<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HR Training & Development Tracker</title>
    <link rel="stylesheet" href="/css/sidebar.css">
    <link rel="stylesheet" href="/css/hr_pages.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');

    .main-content {
        margin-left: 270px;
        padding: 20px;
        font-family: 'Inter', sans-serif;
    }

    /* Dashboard header */
    .dashboard-header {
        margin-bottom: 25px;
    }

    .dashboard-header h2 {
        margin-bottom: 10px;
        color: #333;
        font-size: 24px;
    }

    .dashboard-header p {
        color: #666;
        font-size: 0.95rem;
        max-width: 800px;
    }

    /* Tabs styling */
    .tabs-container {
        width: 100%;
        margin-bottom: 30px;
    }

    .tabs-nav {
        display: flex;
        border-bottom: 2px solid #eee;
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .tab-button {
        padding: 12px 20px;
        background-color: transparent;
        border: none;
        border-bottom: 3px solid transparent;
        cursor: pointer;
        font-weight: 600;
        font-size: 14px;
        color: #666;
        transition: all 0.3s ease;
        margin-right: 10px;
        display: flex;
        align-items: center;
    }

    .tab-button i {
        margin-right: 8px;
        font-size: 16px;
    }

    .tab-button.active {
        color: #07ACB9;
        border-bottom: 3px solid #07ACB9;
        background-color: #f8fdfd;
    }

    .tab-button:hover:not(.active) {
        color: #124A5C;
        border-bottom: 3px solid #ddd;
    }

    .tab-content {
        display: none;
        padding: 25px 0;
        animation: fadeIn 0.5s;
    }

    .tab-content.active {
        display: block;
    }

    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    /* Card styling */
    .card {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        padding: 20px;
        margin-bottom: 25px;
    }

    .card-header {
        margin-bottom: 15px;
        border-bottom: 1px solid #f0f0f0;
        padding-bottom: 15px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .card-header h3 {
        margin: 0;
        font-size: 1.2rem;
        color: #333;
    }

    /* Search and Filter Section */
    .search-filter-section {
        display: flex;
        gap: 15px;
        align-items: center;
        margin-bottom: 20px;
        flex-wrap: wrap;
    }

    .search-container {
        flex: 1;
        min-width: 300px;
        position: relative;
    }

    .search-input {
        width: 100%;
        padding: 12px 16px 12px 45px;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        font-size: 14px;
        transition: border-color 0.2s ease;
        box-sizing: border-box;
    }

    .search-input:focus {
        outline: none;
        border-color: #07ACB9;
        box-shadow: 0 0 0 3px rgba(7, 172, 185, 0.1);
    }

    .search-icon {
        position: absolute;
        left: 15px;
        top: 50%;
        transform: translateY(-50%);
        color: #64748b;
        font-size: 14px;
    }

    /* Training action buttons */
    .add-training-btn {
        background-color: #124A5C;
        color: white;
        border: none;
        padding: 12px 20px;
        border-radius: 8px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.2s ease;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        white-space: nowrap;
        margin-right: 10px;
    }

    .add-training-btn:hover {
        background-color: #0d3c4a;
        transform: translateY(-2px);
    }

    .reassign-training-btn {
        background-color: #07ACB9;
        color: white;
        border: none;
        padding: 12px 20px;
        border-radius: 8px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.2s ease;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        white-space: nowrap;
    }

    .reassign-training-btn:hover {
        background-color: #059ca4;
        transform: translateY(-2px);
    }

    /* Training courses grid */
    .training-courses-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .training-course-card {
        background-color: #f8fafc;
        border: 2px solid #e2e8f0;
        border-radius: 12px;
        padding: 20px;
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .training-course-card:hover {
        border-color: #07ACB9;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .course-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #334155;
        margin: 0 0 10px 0;
    }

    .course-description {
        color: #475569;
        font-size: 14px;
        margin-bottom: 12px;
        line-height: 1.5;
        font-weight: 400;
    }

    .course-details {
        color: #64748b;
        font-size: 13px;
        margin-bottom: 15px;
        line-height: 1.4;
        font-weight: 500;
    }

    .course-badges {
        display: flex;
        gap: 8px;
        flex-wrap: wrap;
    }

    .course-badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 11px;
        font-weight: 500;
    }

    .course-badge.online {
        background-color: #dbeafe;
        color: #1e40af;
    }

    .course-badge.onsite {
        background-color: #fef3c7;
        color: #d97706;
    }

    .course-badge.required {
        background-color: #fecaca;
        color: #dc2626;
    }

    /* Assignment list styling */
    .assignments-list {
        display: flex;
        flex-direction: column;
        gap: 12px;
        margin-top: 20px;
    }

    .assignment-item {
        background-color: #fff;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        padding: 16px 20px;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .assignment-item:hover {
        border-color: #07ACB9;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .assignment-info {
        flex: 1;
    }

    .employee-name {
        font-size: 1rem;
        font-weight: 600;
        color: #334155;
        margin: 0 0 4px 0;
    }

    .assignment-details {
        font-size: 14px;
        color: #64748b;
        line-height: 1.4;
    }

    .assignment-status {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .status-badge {
        padding: 4px 12px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 500;
    }

    .status-badge.in-progress {
        background-color: #dbeafe;
        color: #1e40af;
    }

    .status-badge.completed {
        background-color: #dcfce7;
        color: #166534;
    }

    .status-badge.not-started {
        background-color: #f1f5f9;
        color: #475569;
    }

    /* Modal styling */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: none;
        justify-content: center;
        align-items: center;
        z-index: 10000;
    }

    .modal-overlay.show {
        display: flex;
    }

    .modal-content {
        background-color: white;
        border-radius: 16px;
        padding: 30px;
        max-width: 900px;
        width: 90%;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        font-family: 'Inter', sans-serif;
    }

    .modal-header {
        text-align: center;
        margin-bottom: 25px;
        border-bottom: 1px solid #e2e8f0;
        padding-bottom: 15px;
    }

    .modal-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: #334155;
        margin: 0;
    }

    /* Form styling */
    .form-group {
        margin-bottom: 20px;
    }

    .form-label {
        display: block;
        font-size: 14px;
        font-weight: 500;
        color: #374151;
        margin-bottom: 8px;
        font-family: 'Inter', sans-serif;
    }

    .form-input, .form-select, .form-textarea {
        width: 100%;
        padding: 12px 16px;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        font-size: 14px;
        font-family: 'Inter', sans-serif;
        transition: border-color 0.2s ease;
        box-sizing: border-box;
        color: #334155;
    }

    .form-input:focus, .form-select:focus, .form-textarea:focus {
        outline: none;
        border-color: #07ACB9;
        box-shadow: 0 0 0 3px rgba(7, 172, 185, 0.1);
    }

    .form-textarea {
        resize: vertical;
        min-height: 80px;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
    }

    /* Location fields styling */
    .location-fields {
        background: #f9f9f9;
        padding: 15px;
        border-radius: 8px;
        margin-top: 10px;
        border-left: 4px solid #07ACB9;
    }

    /* Checkbox styling */
    .checkbox-group {
        display: flex !important;
        align-items: flex-start !important; /* Force left alignment */
        gap: 8px !important;
        margin-bottom: 15px !important;
    }

    .checkbox-input {
        width: 16px !important;
        height: 16px !important;
        accent-color: #07ACB9 !important;
        cursor: pointer !important;
        margin-top: 0 !important; /* Remove any top margin */
        margin-right: 8px !important; /* Add right margin */
        flex-shrink: 0 !important; /* Prevent checkbox from shrinking */
        vertical-align: top !important; /* Align to top */
    }

    .checkbox-label {
        font-size: 14px !important;
        font-weight: 500 !important;
        color: #374151 !important;
        cursor: pointer !important;
        flex: 1 !important; /* Allow label to take remaining space */
        line-height: 1.2 !important; /* Better line height */
    }

    /* Assignment section styling */
    .assignment-section {
        background-color: #f8fafc;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
    }

    .assignment-type-selector {
        display: flex;
        gap: 10px;
        margin-bottom: 15px;
        flex-wrap: wrap;
    }

    .assignment-type-btn {
        padding: 10px 16px;
        border: 2px solid #e2e8f0;
        border-radius: 8px;
        background-color: white;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        color: #64748b;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .assignment-type-btn.active {
        border-color: #07ACB9;
        background-color: #07ACB9;
        color: white;
    }

    .assignment-type-btn:hover:not(.active) {
        border-color: #07ACB9;
        color: #07ACB9;
    }

    .assignment-type-btn i {
        font-size: 12px;
    }

    .assignment-filter-section {
        display: none;
        margin-bottom: 15px;
    }

    .assignment-filter-section.show {
        display: block;
    }

    /* Employee list styling */
    .employee-list {
        max-height: 300px;
        overflow-y: auto;
        border: 1px solid #e2e8f0;
        border-radius: 6px;
        background-color: white;
    }

    .employee-item {
        display: flex !important;
        align-items: flex-start !important; /* Force top alignment */
        padding: 12px !important;
        border-bottom: 1px solid #f1f5f9 !important;
        cursor: pointer !important;
        transition: background-color 0.2s ease !important;
    }

    .employee-item:hover {
        background-color: #f8fafc;
    }

    .employee-item:last-child {
        border-bottom: none;
    }

    .employee-checkbox {
        margin-right: 12px !important;
        margin-top: 0 !important; /* Remove top margin */
        accent-color: #07ACB9 !important;
        width: 16px !important;
        height: 16px !important;
        cursor: pointer !important;
        flex-shrink: 0 !important; /* Prevent checkbox from shrinking */
        vertical-align: top !important;
    }

    .employee-info {
        flex: 1 !important;
        min-width: 0 !important; /* Prevent flex item from overflowing */
    }

    .employee-name {
        font-weight: 500 !important;
        color: #334155 !important;
        margin-bottom: 2px !important;
        line-height: 1.2 !important; /* Tighter line height for better alignment */
        margin-top: 0 !important; /* Remove any top margin */
    }

    .employee-details {
        font-size: 12px !important;
        color: #64748b !important;
        line-height: 1.3 !important;
    }

    .select-all-container {
        padding: 12px !important;
        border-bottom: 2px solid #e2e8f0 !important;
        background-color: #f8fafc !important;
        font-weight: 500 !important;
        display: flex !important;
        align-items: flex-start !important; /* Force top alignment */
        gap: 8px !important;
    }

    .select-all-container label {
        cursor: pointer !important;
        display: flex !important;
        align-items: flex-start !important; /* Force top alignment */
        gap: 8px !important;
        font-size: 14px !important;
        color: #374151 !important;
        margin: 0 !important; /* Remove any default margins */
    }

    .select-all-container input[type="checkbox"] {
        margin-top: 0 !important; /* Remove top margin */
        margin-right: 0 !important;
        width: 16px !important;
        height: 16px !important;
        accent-color: #07ACB9 !important;
        flex-shrink: 0 !important;
        vertical-align: top !important;
    }

    input[type="checkbox"] {
        vertical-align: top !important;
        margin-top: 0 !important;
    }

    .checkbox-group *, 
    .employee-item *, 
    .select-all-container * {
        align-self: flex-start !important;
    }

    /* Duration display */
    .duration-display {
        background-color: #f0fdff;
        border: 1px solid #07ACB9;
        border-radius: 8px;
        padding: 20px;
        text-align: center;
        margin: 20px 0;
    }

    .duration-value {
        font-size: 28px;
        font-weight: 600;
        color: #07ACB9;
    }

    .duration-label {
        font-size: 14px;
        color: #64748b;
        margin-bottom: 5px;
    }

    /* Activities and certificates section */
    .add-item-section {
        background-color: #f8fafc;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
    }

    .activity-form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
        margin-bottom: 15px;
    }

    .add-btn {
        background-color: #07ACB9;
        color: white;
        border: none;
        padding: 10px 16px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        transition: background-color 0.2s ease;
        white-space: nowrap;
    }

    .add-btn:hover {
        background-color: #059ca4;
    }

    .dynamic-list {
        margin-top: 15px;
    }

    .dynamic-item {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        background-color: white;
        border: 1px solid #e2e8f0;
        border-radius: 6px;
        padding: 12px;
        margin-bottom: 8px;
        transition: border-color 0.2s ease;
    }

    .dynamic-item:hover {
        border-color: #07ACB9;
    }

    .remove-btn {
        background-color: #ef4444;
        color: white;
        border: none;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        cursor: pointer;
        font-size: 12px;
        font-weight: bold;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
        margin-left: 10px;
    }

    .remove-btn:hover {
        background-color: #dc2626;
    }

    /* Modal actions */
    .modal-actions {
        display: flex;
        justify-content: center;
        gap: 12px;
        margin-top: 25px;
        padding-top: 20px;
        border-top: 1px solid #e2e8f0;
    }

    .btn-secondary {
        background-color: #f8fafc;
        color: #64748b;
        border: 1px solid #e2e8f0;
        padding: 12px 24px;
        border-radius: 8px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.2s ease;
    }

    .btn-secondary:hover {
        background-color: #e2e8f0;
    }

    .btn-primary {
        background-color: #124A5C;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 8px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.2s ease;
    }

    .btn-primary:hover {
        background-color: #0d3c4a;
    }

    /* Selected training info display */
    #selectedTrainingInfo {
        border-left: 4px solid #07ACB9;
    }

    #selectedTrainingInfo h4 {
        margin: 0 0 8px 0;
        color: #334155;
        font-weight: 600;
    }

    #selectedTrainingInfo p {
        margin: 4px 0;
        font-size: 14px;
        color: #64748b;
    }

    /* No data messages */
    .no-trainings-message,
    .no-assignments-message {
        text-align: center;
        padding: 40px;
        color: #64748b;
    }

    .no-trainings-message i,
    .no-assignments-message i {
        font-size: 48px;
        margin-bottom: 15px;
        color: #cbd5e1;
    }

    .no-trainings-message h3,
    .no-assignments-message h3 {
        margin: 0 0 10px 0;
        color: #475569;
    }

    .no-trainings-message p,
    .no-assignments-message p {
        margin: 0;
    }

    /* Responsive design */
    @media (max-width: 768px) {
        .main-content {
            margin-left: 0;
            padding: 15px;
        }

        .search-filter-section {
            flex-direction: column;
            align-items: stretch;
        }

        .search-container {
            min-width: auto;
        }

        .training-courses-grid {
            grid-template-columns: 1fr;
        }

        .form-row {
            grid-template-columns: 1fr;
            gap: 15px;
        }

        .assignment-type-selector {
            flex-direction: column;
            gap: 8px;
        }

        .assignment-type-btn {
            justify-content: center;
        }

        .activity-form-grid {
            grid-template-columns: 1fr;
            gap: 10px;
        }

        .assignment-item {
            flex-direction: column;
            gap: 10px;
            align-items: stretch;
        }

        .modal-content {
            width: 95%;
            padding: 20px;
        }

        .add-training-btn,
        .reassign-training-btn {
            width: 100%;
            justify-content: center;
            margin-right: 0;
            margin-bottom: 10px;
        }
    }
    </style>
</head>
<body>
     <%- include('../../partials/hr_partials') %>
    
    <!-- Main content area -->
    <div class="main-content">
        <div class="dashboard-header">
            <h2>HR Training & Development Tracker</h2>
            <p>View and manage all required trainings for employees.</p>
        </div>

        <!-- CREATE NEW TRAINING MODAL -->
        <div class="modal-overlay" id="addTrainingModal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Create New Training Course</h2>
                </div>
                
                <form id="addTrainingForm">
                    <!-- Training Course Name -->
                    <div class="form-group">
                        <label class="form-label">Training Course Name:</label>
                        <input type="text" class="form-input" id="courseName" placeholder="Enter training course name" required>
                    </div>

                    <!-- Description -->
                    <div class="form-group">
                        <label class="form-label">Description:</label>
                        <textarea class="form-textarea" id="courseDescription" placeholder="Enter detailed description of the training course" required></textarea>
                    </div>

                    <!-- REQUIRED TRAINING CHECKBOX -->
                    <div class="form-group">
                        <div class="checkbox-group">
                            <input type="checkbox" class="checkbox-input" id="isRequired">
                            <label class="checkbox-label" for="isRequired">
                                <i class="fas fa-exclamation-triangle" style="color: #dc2626; margin-right: 5px;"></i>
                                Mark as Required Training
                            </label>
                        </div>
                        <p style="font-size: 12px; color: #64748b; margin-top: 5px;">
                            Required trainings will be marked with a red badge and employees must complete them
                        </p>
                    </div>

                    <!-- Training Mode and Cost -->
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Training Mode:</label>
                            <select class="form-select" id="trainingMode" required>
                                <option value="">Select Training Mode</option>
                                <option value="online">Online</option>
                                <option value="onsite">Onsite</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">Cost (PHP):</label>
                            <input type="number" class="form-input" id="trainingCost" placeholder="Enter cost" min="0" step="0.01">
                        </div>
                    </div>

                    <!-- Location fields for onsite training -->
                    <div id="locationFields" class="location-fields" style="display: none;">
                        <div class="form-group">
                            <label class="form-label">Country:</label>
                            <select class="form-select" id="countryDropdown">
                                <option value="">Loading countries...</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">Address:</label>
                            <textarea class="form-textarea" id="addressField" rows="3" placeholder="Enter the full address for the training venue"></textarea>
                        </div>
                    </div>

                    <!-- EMPLOYEE ASSIGNMENT SECTION -->
                    <div class="form-group">
                        <label class="form-label">Assign to Employees:</label>
                        <div class="assignment-section">
                            <!-- Assignment Type Selector -->
                            <div class="assignment-type-selector">
                                <button type="button" class="assignment-type-btn active" data-type="individual">
                                    <i class="fas fa-user"></i> Individual Employees
                                </button>
                                <button type="button" class="assignment-type-btn" data-type="department">
                                    <i class="fas fa-building"></i> By Department
                                </button>
                                <button type="button" class="assignment-type-btn" data-type="jobPosition">
                                    <i class="fas fa-briefcase"></i> By Job Position
                                </button>
                                <button type="button" class="assignment-type-btn" data-type="all">
                                    <i class="fas fa-users"></i> All Employees
                                </button>
                            </div>

                            <!-- Department Filter -->
                            <div id="departmentFilter" class="assignment-filter-section">
                                <label class="form-label">Select Department:</label>
                                <select class="form-select" id="departmentSelect">
                                    <option value="">Loading departments...</option>
                                </select>
                            </div>

                            <!-- Job Position Filter -->
                            <div id="jobPositionFilter" class="assignment-filter-section">
                                <label class="form-label">Select Job Position:</label>
                                <select class="form-select" id="jobPositionSelect">
                                    <option value="">Loading job positions...</option>
                                </select>
                            </div>

                            <!-- Due Date -->
                            <div class="form-group">
                                <label class="form-label">Due Date (Optional):</label>
                                <input type="date" class="form-input" id="trainingDueDate">
                            </div>

                            <!-- Employee List -->
                            <div id="employeeListContainer" style="display: none;">
                                <label class="form-label">Select Employees:</label>
                                <div class="employee-list" id="employeeList">
                                    <div class="select-all-container">
                                        <label>
                                            <input type="checkbox" id="selectAllEmployees" class="employee-checkbox">
                                            Select All
                                        </label>
                                    </div>
                                    <div id="employeeItems">
                                        <!-- Employee items will be populated here -->
                                    </div>
                                </div>
                            </div>

                            <!-- Selected Count Display -->
                            <div id="selectedCountDisplay" style="margin-top: 10px; font-weight: 500; color: #07ACB9;">
                                Selected: <span id="selectedCount">0</span> employee(s)
                            </div>
                        </div>
                    </div>

                    <!-- Total Duration Display -->
                    <div class="duration-display">
                        <div class="duration-label">Total Duration to Complete</div>
                        <div class="duration-value"><span id="totalDuration">0</span> hours</div>
                    </div>

                    <!-- Activities Needed -->
                    <div class="form-group">
                        <label class="form-label">Activities Needed:</label>
                        <div class="add-item-section">
                            <div class="activity-form-grid">
                                <input type="text" class="form-input" id="moduleName" placeholder="Module name">
                                <input type="number" class="form-input" id="estimatedTime" placeholder="Estimated time (hours)" min="0" step="0.5">
                            </div>
                            <div class="activity-form-grid">
                                <select class="form-select" id="activityType">
                                    <option value="">Select type</option>
                                </select>
                                <input type="text" class="form-input" id="activityRemarks" placeholder="Remarks (optional)">
                            </div>
                            <button type="button" class="add-btn" onclick="addActivity()" style="width: 100%; margin-top: 10px;">Add Activity</button>
                            <div class="dynamic-list" id="activitiesList"></div>
                        </div>
                    </div>

                    <!-- Certificates -->
                    <div class="form-group">
                        <label class="form-label">Certificate/s:</label>
                        <div class="add-item-section">
                            <div class="activity-form-grid">
                                <input type="text" class="form-input" id="certificateTitle" placeholder="Enter certificate title">
                                <textarea class="form-input" id="certificateDescription" placeholder="Enter certificate description" style="min-height: 60px; resize: vertical;"></textarea>
                            </div>
                            <button type="button" class="add-btn" onclick="addCertificate()" style="width: 100%; margin-top: 10px;">Add Certificate</button>
                            <div class="dynamic-list" id="certificatesList"></div>
                        </div>
                    </div>

                    <div class="modal-actions">
                        <button type="button" class="btn-secondary" onclick="closeAddTrainingModal()">Cancel</button>
                        <button type="submit" class="btn-primary">Create Training Course</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- RE-ASSIGN EXISTING TRAINING MODAL -->
        <div class="modal-overlay" id="reassignTrainingModal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Re-assign Existing Training</h2>
                </div>
                
                <form id="reassignTrainingForm">
                    <!-- Existing Training Selection -->
                    <div class="form-group">
                        <label class="form-label">Select Existing Training:</label>
                        <select class="form-select" id="existingTrainingSelect" required>
                            <option value="">Loading existing trainings...</option>
                        </select>
                        <div id="selectedTrainingInfo" style="margin-top: 10px; padding: 10px; background-color: #f8fafc; border-radius: 6px; display: none;">
                            <!-- Training info will be displayed here -->
                        </div>
                    </div>

                    <!-- Same assignment section as create training -->
                    <div class="form-group">
                        <label class="form-label">Assign to Employees:</label>
                        <div class="assignment-section">
                            <!-- Assignment Type Selector -->
                            <div class="assignment-type-selector">
                                <button type="button" class="assignment-type-btn active" data-type="individual" data-modal="reassign">
                                    <i class="fas fa-user"></i> Individual Employees
                                </button>
                                <button type="button" class="assignment-type-btn" data-type="department" data-modal="reassign">
                                    <i class="fas fa-building"></i> By Department
                                </button>
                                <button type="button" class="assignment-type-btn" data-type="jobPosition" data-modal="reassign">
                                    <i class="fas fa-briefcase"></i> By Job Position
                                </button>
                                <button type="button" class="assignment-type-btn" data-type="all" data-modal="reassign">
                                    <i class="fas fa-users"></i> All Employees
                                </button>
                            </div>

                            <!-- Department Filter -->
                            <div id="reassignDepartmentFilter" class="assignment-filter-section">
                                <label class="form-label">Select Department:</label>
                                <select class="form-select" id="reassignDepartmentSelect">
                                    <option value="">Loading departments...</option>
                                </select>
                            </div>

                            <!-- Job Position Filter -->
                            <div id="reassignJobPositionFilter" class="assignment-filter-section">
                                <label class="form-label">Select Job Position:</label>
                                <select class="form-select" id="reassignJobPositionSelect">
                                    <option value="">Loading job positions...</option>
                                </select>
                            </div>

                            <!-- Due Date -->
                            <div class="form-group">
                                <label class="form-label">Due Date (Optional):</label>
                                <input type="date" class="form-input" id="reassignTrainingDueDate">
                            </div>

                            <!-- Employee List -->
                            <div id="reassignEmployeeListContainer" style="display: none;">
                                <label class="form-label">Select Employees:</label>
                                <div class="employee-list" id="reassignEmployeeList">
                                    <div class="select-all-container">
                                        <label>
                                            <input type="checkbox" id="reassignSelectAllEmployees" class="employee-checkbox">
                                            Select All
                                        </label>
                                    </div>
                                    <div id="reassignEmployeeItems">
                                        <!-- Employee items will be populated here -->
                                    </div>
                                </div>
                            </div>

                            <!-- Selected Count Display -->
                            <div id="reassignSelectedCountDisplay" style="margin-top: 10px; font-weight: 500; color: #07ACB9;">
                                Selected: <span id="reassignSelectedCount">0</span> employee(s)
                            </div>
                        </div>
                    </div>

                    <div class="modal-actions">
                        <button type="button" class="btn-secondary" onclick="closeReassignTrainingModal()">Cancel</button>
                        <button type="submit" class="btn-primary">Re-assign Training</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- TABS CONTAINER -->
        <div class="tabs-container">
            <ul class="tabs-nav">
                <li><button class="tab-button active" data-tab="training-courses-tab">
                    <i class="fas fa-graduation-cap"></i> Training Courses
                </button></li>
                <li><button class="tab-button" data-tab="employee-assignments-tab">
                    <i class="fas fa-users"></i> View Employee Training Assignments
                </button></li>
            </ul>

            <!-- Tab Content -->
            <div class="tab-contents">
                <!-- Training Courses Tab -->
                <div id="training-courses-tab" class="tab-content active">
                    <div class="card">
                        <div class="card-header">
                            <h3>Available Training Courses</h3>
                        </div>
                        
                        <!-- Search and Filter Section -->
                        <div class="search-filter-section">
                            <div class="search-container">
                                <i class="fas fa-search search-icon"></i>
                                <input type="text" class="search-input" placeholder="Search training courses..." id="courseSearch">
                            </div>
                            
                            <button class="add-training-btn" onclick="addNewTraining()">
                                <i class="fas fa-plus"></i>
                                Create New Training
                            </button>
                            
                            <button class="reassign-training-btn" onclick="openReassignTrainingModal()">
                                <i class="fas fa-redo"></i>
                                Re-assign Existing Training
                            </button>
                        </div>

                        <!-- Training courses grid -->
                        <div class="training-courses-grid">
                            <% if (typeof trainings !== 'undefined' && trainings && trainings.length > 0) { %>
                                <% trainings.forEach(training => { %>
                                    <div class="training-course-card" data-type="<%= training.badges ? training.badges.join(' ') : '' %>">
                                        <h4 class="course-title"><%= training.title || 'Untitled Training' %></h4>
                                        <div class="course-description">
                                            <%= training.description || 'No description available' %>
                                        </div>
                                        <div class="course-details">
                                            Duration: <%= training.duration || 0 %> hours<br>
                                            <% if (training.mode === 'onsite' && training.location) { %>
                                                Location: <%= training.location.address || 'Address not specified' %>, <%= training.location.country || 'Country not specified' %><br>
                                            <% } %>
                                            <% if (training.cost && training.cost > 0) { %>
                                                Cost: ₱<%= training.cost.toLocaleString() %>
                                            <% } %>
                                        </div>
                                        <div class="course-badges">
                                            <% if (training.badges && training.badges.length > 0) { %>
                                                <% training.badges.forEach(badge => { %>
                                                    <span class="course-badge <%= badge %>"><%= badge.charAt(0).toUpperCase() + badge.slice(1) %></span>
                                                <% }); %>
                                            <% } %>
                                        </div>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <div class="no-trainings-message" style="grid-column: 1 / -1; text-align: center; padding: 40px; color: #64748b;">
                                    <i class="fas fa-graduation-cap" style="font-size: 48px; margin-bottom: 15px; color: #cbd5e1;"></i>
                                    <h3 style="margin: 0 0 10px 0; color: #475569;">No Training Courses Available</h3>
                                    <p style="margin: 0;">Click "Create New Training" to create your first training course.</p>
                                </div>
                            <% } %>
                        </div>
                    </div>
                </div>

                <!-- Employee Training Assignments Tab -->
                <div id="employee-assignments-tab" class="tab-content">
                    <div class="card">
                        <div class="card-header">
                            <h3>Employee Training Assignments</h3>
                        </div>
                        
                        <!-- Search Section -->
                        <div class="search-filter-section">
                            <div class="search-container">
                                <i class="fas fa-search search-icon"></i>
                                <input type="text" class="search-input" placeholder="Search employees..." id="employeeSearch">
                            </div>
                        </div>

                        <!-- Employee assignments list -->
                        <div class="assignments-list">
                            <%
                            // Use assignments data if available, otherwise show sample data
                            let assignmentsToShow = [];
                            
                            if (typeof assignments !== 'undefined' && assignments && assignments.length > 0) {
                                assignmentsToShow = assignments;
                            } else {
                                // Sample data for testing
                                assignmentsToShow = [
                                    {
                                        employeeId: 'john-doe',
                                        employeeName: 'John Doe',
                                        trainingTitle: 'Safety Training (REQUIRED)',
                                        jobTitle: 'Frontend Developer',
                                        status: 'in-progress',
                                        progress: 75,
                                        startDate: new Date('2024-01-15')
                                    },
                                    {
                                        employeeId: 'jane-smith',
                                        employeeName: 'Jane Smith',
                                        trainingTitle: 'Leadership Development',
                                        jobTitle: 'Operations Manager',
                                        status: 'completed',
                                        progress: 100,
                                        startDate: new Date('2024-01-10')
                                    },
                                    {
                                        employeeId: 'mike-johnson',
                                        employeeName: 'Mike Johnson',
                                        trainingTitle: 'Data Analysis Bootcamp (REQUIRED)',
                                        jobTitle: 'Data Analyst',
                                        status: 'not-started',
                                        progress: 0,
                                        startDate: new Date('2024-01-20'),
                                        dueDate: new Date('2024-02-20')
                                    }
                                ];
                            }
                            %>
                            
                            <% if (assignmentsToShow && assignmentsToShow.length > 0) { %>
                                <% assignmentsToShow.forEach(assignment => { %>
                                    <div class="assignment-item" data-status="<%= assignment.status %>">
                                        <div class="assignment-info">
                                            <h4 class="employee-name"><%= assignment.employeeName %></h4>
                                            <div class="assignment-details">
                                                Training: <%= assignment.trainingTitle %><br>
                                                Job Title: <%= assignment.jobTitle %><br>
                                                <% if (assignment.status === 'completed') { %>
                                                    Completed: <%= assignment.startDate ? assignment.startDate.toLocaleDateString() : 'Date not available' %> • Progress: <%= assignment.progress || 0 %>%
                                                <% } else if (assignment.status === 'in-progress') { %>
                                                    Progress: <%= assignment.progress || 0 %>% • Started: <%= assignment.startDate ? assignment.startDate.toLocaleDateString() : 'Date not available' %>
                                                <% } else { %>
                                                    Assigned: <%= assignment.startDate ? assignment.startDate.toLocaleDateString() : 'Date not available' %> • Due: <%= assignment.dueDate ? assignment.dueDate.toLocaleDateString() : 'No due date' %>
                                                <% } %>
                                            </div>
                                        </div>
                                        <div class="assignment-status">
                                            <span class="status-badge <%= assignment.status %>">
                                                <% if (assignment.status === 'in-progress') { %>In Progress
                                                <% } else if (assignment.status === 'completed') { %>Completed
                                                <% } else { %>Not Started<% } %>
                                            </span>
                                        </div>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <div class="no-assignments-message" style="text-align: center; padding: 40px; color: #64748b;">
                                    <i class="fas fa-users" style="font-size: 48px; margin-bottom: 15px; color: #cbd5e1;"></i>
                                    <h3 style="margin: 0 0 10px 0; color: #475569;">No Training Assignments</h3>
                                    <p style="margin: 0;">Training assignments will appear here once employees are assigned to courses.</p>
                                </div>
                            <% } %>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- JavaScript will be added in Phase 2C -->
    <script>
        // Initialize page with better error handling
        document.addEventListener('DOMContentLoaded', function() {
            console.log('HR Training Tracker initializing...');
            
            // Initialize arrays first
            selectedEmployees = [];
            addedActivities = [];
            addedCertificates = [];
            allEmployees = [];
            allDepartments = [];
            allJobPositions = [];
            allActivityTypes = [];
            existingTrainings = [];
            currentAssignmentType = 'individual';
            countriesData = [];
            
            // Wait longer for DOM to be ready
            setTimeout(() => {
                try {
                    console.log('Starting initialization...');
                    
                    // Initialize basic functionality first
                    initializeTabs();
                    initializeModals();
                    
                    // Then load data (these functions will handle missing elements gracefully now)
                    loadFormData();
                    loadExistingTrainings();
                    loadCountries();
                    
                    // Initialize handlers after data loading
                    setTimeout(() => {
                        initializeAssignmentHandlers();
                        initializeFormHandlers();
                        initializeSearchFunctionality();
                        console.log('Initialization complete');
                    }, 500);
                    
                } catch (error) {
                    console.error('Initialization error:', error);
                }
            }, 200);
        });
        // ============================================================================
        // TAB FUNCTIONALITY
        // ============================================================================

        function initializeTabs() {
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabContents = document.querySelectorAll('.tab-content');

            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    // Remove active class from all buttons and contents
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    tabContents.forEach(content => content.classList.remove('active'));

                    // Add active class to clicked button
                    button.classList.add('active');

                    // Show corresponding content
                    const tabId = button.getAttribute('data-tab');
                    const targetTab = document.getElementById(tabId);
                    if (targetTab) {
                        targetTab.classList.add('active');
                    }
                });
            });
        }

        // ============================================================================
        // MODAL FUNCTIONALITY
        // ============================================================================

        function initializeModals() {
            // Close modals when clicking outside
            document.addEventListener('click', function(event) {
                const modals = document.querySelectorAll('.modal-overlay');
                modals.forEach(modal => {
                    if (event.target === modal) {
                        modal.classList.remove('show');
                    }
                });
            });

            // Prevent modal close when clicking inside modal content
            document.querySelectorAll('.modal-content').forEach(content => {
                content.addEventListener('click', function(event) {
                    event.stopPropagation();
                });
            });
        }

        // Modal control functions
        function addNewTraining() {
            console.log('Opening new training modal...');
            
            // Reset everything
            resetTrainingForm();
            
            // Set default assignment type
            currentAssignmentType = 'individual';
            handleAssignmentTypeChange('individual', 'create');
            
            // Show modal
            document.getElementById('addTrainingModal').classList.add('show');
        }

        function closeAddTrainingModal() {
            document.getElementById('addTrainingModal').classList.remove('show');
        }

        function openReassignTrainingModal() {
            console.log('Opening reassign training modal...');
            
            // Reset everything
            resetReassignForm();
            
            // Set default assignment type
            currentAssignmentType = 'individual';
            handleAssignmentTypeChange('individual', 'reassign');
            
            // Show modal
            document.getElementById('reassignTrainingModal').classList.add('show');
        }

        function closeReassignTrainingModal() {
            document.getElementById('reassignTrainingModal').classList.remove('show');
        }

        // ============================================================================
        // FORM RESET FUNCTIONS
        // ============================================================================

        function resetTrainingForm() {
            // Reset form
            const form = document.getElementById('addTrainingForm');
            if (form) {
                form.reset();
            }
            
            // Reset arrays
            selectedEmployees = [];
            addedActivities = [];
            addedCertificates = [];
            
            // Reset displays
            updateSelectedCount('create');
            updateActivitiesDisplay();
            updateCertificatesDisplay();
            calculateTotalDuration();
            
            // Hide location fields
            const locationFields = document.getElementById('locationFields');
            if (locationFields) {
                locationFields.style.display = 'none';
            }
        }

        function resetReassignForm() {
            // Reset form
            const form = document.getElementById('reassignTrainingForm');
            if (form) {
                form.reset();
            }
            
            // Reset arrays
            selectedEmployees = [];
            
            // Reset displays
            updateSelectedCount('reassign');
            
            // Hide training info
            const trainingInfo = document.getElementById('selectedTrainingInfo');
            if (trainingInfo) {
                trainingInfo.style.display = 'none';
            }
        }

        // ============================================================================
        // DATA LOADING FUNCTIONS
        // ============================================================================

        async function loadFormData() {
            try {
                console.log('Loading form data...');
                
                const response = await fetch('/hr/training-form-data', {
                    method: 'GET',
                    credentials: 'include'
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                
                if (result.success) {
                    console.log('Form data loaded:', result.data);
                    
                    allDepartments = result.data.departments || [];
                    allJobPositions = result.data.jobPositions || [];
                    allActivityTypes = result.data.activityTypes || [];
                    
                    // Add delay to ensure DOM elements are ready
                    setTimeout(() => {
                        populateDepartments();
                        populateJobPositions(); 
                        populateActivityTypes();
                        loadAllEmployees();
                    }, 200); // Wait 200ms for DOM to be ready
                    
                    console.log(`Loaded: ${allDepartments.length} departments, ${allJobPositions.length} jobs, ${allActivityTypes.length} activity types`);
                    
                } else {
                    console.error('Failed to load form data:', result.message);
                }
            } catch (error) {
                console.error('Error loading form data:', error);
                // Continue with empty arrays
                allDepartments = [];
                allJobPositions = [];
                allActivityTypes = [];
            }
        }

        async function loadAllEmployees() {
            try {
                console.log('Loading all employees...');
                
                const response = await fetch('/hr/employees', {
                    method: 'GET',
                    credentials: 'include'
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                
                if (result.success) {
                    allEmployees = result.data || [];
                    console.log(`Loaded ${allEmployees.length} employees`);
                    
                    // Show employee list for individual assignment (default)
                    showEmployeeList(allEmployees, 'create');
                } else {
                    console.error('Failed to load employees:', result.message);
                    showNotification('Failed to load employees', 'error');
                }
            } catch (error) {
                console.error('Error loading employees:', error);
                showNotification('Error loading employees: ' + error.message, 'error');
            }
        }

        async function loadExistingTrainings() {
            try {
                console.log('Loading existing trainings...');
                
                const response = await fetch('/hr/existing-trainings', {
                    method: 'GET',
                    credentials: 'include'
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                
                if (result.success) {
                    existingTrainings = result.data || [];
                    populateExistingTrainingsDropdown();
                    console.log(`Loaded ${existingTrainings.length} existing trainings`);
                } else {
                    console.error('Failed to load existing trainings:', result.message);
                }
            } catch (error) {
                console.error('Error loading existing trainings:', error);
            }
        }

        async function loadCountries() {
            try {
                console.log('Loading countries...');
                const response = await fetch('https://restcountries.com/v3.1/all?fields=name,cca2');
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const countries = await response.json();
                
                // Sort countries alphabetically by common name
                countriesData = countries
                    .map(country => ({
                        code: country.cca2,
                        name: country.name.common
                    }))
                    .sort((a, b) => a.name.localeCompare(b.name));
                
                console.log(`Loaded ${countriesData.length} countries`);
                populateCountryDropdown();
                
            } catch (error) {
                console.error('Error fetching countries:', error);
                // Fallback to basic country list
                countriesData = [
                    { code: 'PH', name: 'Philippines' },
                    { code: 'US', name: 'United States' },
                    { code: 'SG', name: 'Singapore' }
                ];
                populateCountryDropdown();
            }
        }

        // ============================================================================
        // DROPDOWN POPULATION FUNCTIONS
        // ============================================================================

        function populateDepartments() {
            const selects = ['departmentSelect', 'reassignDepartmentSelect'];
            
            selects.forEach(selectId => {
                const select = document.getElementById(selectId);
                if (!select) {
                    console.warn(`Department select not found: ${selectId}`);
                    return; // Skip if element doesn't exist
                }
                
                select.innerHTML = '<option value="">Select department...</option>';
                
                if (allDepartments && allDepartments.length > 0) {
                    allDepartments.forEach(dept => {
                        const option = document.createElement('option');
                        option.value = dept.departmentId;
                        option.textContent = dept.deptName;
                        select.appendChild(option);
                    });
                }
            });
            
            console.log('Departments populated in dropdowns');
        }


        function populateJobPositions() {
            const selects = ['jobPositionSelect', 'reassignJobPositionSelect'];
            
            selects.forEach(selectId => {
                const select = document.getElementById(selectId);
                if (!select) {
                    console.warn(`Job position select not found: ${selectId}`);
                    return; // Skip if element doesn't exist
                }
                
                select.innerHTML = '<option value="">Select job position...</option>';
                
                if (allJobPositions && allJobPositions.length > 0) {
                    allJobPositions.forEach(job => {
                        const option = document.createElement('option');
                        option.value = job.jobId;
                        option.textContent = job.jobTitle;
                        select.appendChild(option);
                    });
                }
            });
            
            console.log('Job positions populated in dropdowns');
        }

        function populateActivityTypes() {
            const select = document.getElementById('activityType');
            if (!select) {
                console.warn('Activity type select not found');
                return;
            }
            
            select.innerHTML = '<option value="">Select type...</option>';
            
            if (allActivityTypes && allActivityTypes.length > 0) {
                allActivityTypes.forEach(type => {
                    const option = document.createElement('option');
                    option.value = type.label;
                    option.textContent = type.label;
                    select.appendChild(option);
                });
            }
            
            console.log('Activity types populated');
        }

        function populateCountryDropdown() {
            const countryDropdown = document.getElementById('countryDropdown');
            if (!countryDropdown) {
                console.warn('Country dropdown not found');
                return;
            }
            
            countryDropdown.innerHTML = '<option value="">Select Country</option>';
            
            if (countriesData && countriesData.length > 0) {
                countriesData.forEach(country => {
                    const option = document.createElement('option');
                    option.value = country.code;
                    option.textContent = country.name;
                    countryDropdown.appendChild(option);
                });
            }
            
            console.log('Countries populated in dropdown');
        }

        function populateExistingTrainingsDropdown() {
            const select = document.getElementById('existingTrainingSelect');
            if (!select) {
                console.warn('Existing training select not found');
                return;
            }
            
            select.innerHTML = '<option value="">Select an existing training...</option>';
            
            if (existingTrainings && existingTrainings.length > 0) {
                existingTrainings.forEach(training => {
                    const option = document.createElement('option');
                    option.value = training.id;
                    option.textContent = `${training.title} (${training.mode}) ${training.isRequired ? '- REQUIRED' : ''}`;
                    option.setAttribute('data-training', JSON.stringify(training));
                    select.appendChild(option);
                });

                // Add change event listener
                select.addEventListener('change', function() {
                    const selectedOption = this.options[this.selectedIndex];
                    const trainingInfo = document.getElementById('selectedTrainingInfo');
                    
                    if (selectedOption.value && trainingInfo) {
                        const training = JSON.parse(selectedOption.getAttribute('data-training'));
                        trainingInfo.innerHTML = `
                            <h4>${training.title}</h4>
                            <p><strong>Description:</strong> ${training.description}</p>
                            <p><strong>Mode:</strong> ${training.mode} | <strong>Duration:</strong> ${training.duration} hours | <strong>Cost:</strong> ₱${training.cost}</p>
                            ${training.isRequired ? '<span class="course-badge required">REQUIRED</span>' : ''}
                        `;
                        trainingInfo.style.display = 'block';
                    } else if (trainingInfo) {
                        trainingInfo.style.display = 'none';
                    }
                });
            }
            
            console.log('Existing trainings populated');
        }

        // ============================================================================
        // ASSIGNMENT TYPE HANDLING
        // ============================================================================

        function initializeAssignmentHandlers() {
            // Handle assignment type buttons for both modals
            document.querySelectorAll('.assignment-type-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const type = this.getAttribute('data-type');
                    const modal = this.getAttribute('data-modal') || 'create';
                    
                    handleAssignmentTypeChange(type, modal);
                });
            });

            // Handle department/job position selection changes
            const departmentSelect = document.getElementById('departmentSelect');
            if (departmentSelect) {
                departmentSelect.addEventListener('change', function() {
                    if (currentAssignmentType === 'department') {
                        loadEmployeesByFilter('department', this.value, 'create');
                    }
                });
            }

            const jobPositionSelect = document.getElementById('jobPositionSelect');
            if (jobPositionSelect) {
                jobPositionSelect.addEventListener('change', function() {
                    if (currentAssignmentType === 'jobPosition') {
                        loadEmployeesByFilter('jobPosition', this.value, 'create');
                    }
                });
            }

            // Handle reassign modal selectors
            const reassignDepartmentSelect = document.getElementById('reassignDepartmentSelect');
            if (reassignDepartmentSelect) {
                reassignDepartmentSelect.addEventListener('change', function() {
                    if (currentAssignmentType === 'department') {
                        loadEmployeesByFilter('department', this.value, 'reassign');
                    }
                });
            }

            const reassignJobPositionSelect = document.getElementById('reassignJobPositionSelect');
            if (reassignJobPositionSelect) {
                reassignJobPositionSelect.addEventListener('change', function() {
                    if (currentAssignmentType === 'jobPosition') {
                        loadEmployeesByFilter('jobPosition', this.value, 'reassign');
                    }
                });
            }
        }

        function handleAssignmentTypeChange(type, modal = 'create') {
            console.log(`Assignment type changed to: ${type} for modal: ${modal}`);
            
            currentAssignmentType = type;
            
            // Update button states
            const container = modal === 'reassign' ? 
                document.querySelector('#reassignTrainingModal .assignment-type-selector') :
                document.querySelector('#addTrainingModal .assignment-type-selector');
            
            if (container) {
                container.querySelectorAll('.assignment-type-btn').forEach(btn => {
                    btn.classList.remove('active');
                });
                
                const activeBtn = container.querySelector(`[data-type="${type}"]`);
                if (activeBtn) {
                    activeBtn.classList.add('active');
                }
            }
            
            // Show/hide appropriate filters
            const prefix = modal === 'reassign' ? 'reassign' : '';
            const departmentFilter = document.getElementById(`${prefix}${prefix ? 'D' : 'd'}epartmentFilter`);
            const jobPositionFilter = document.getElementById(`${prefix}${prefix ? 'J' : 'j'}obPositionFilter`);
            const employeeListContainer = document.getElementById(`${prefix}${prefix ? 'E' : 'e'}mployeeListContainer`);
            
            // Hide all filters first
            if (departmentFilter) departmentFilter.classList.remove('show');
            if (jobPositionFilter) jobPositionFilter.classList.remove('show');
            if (employeeListContainer) employeeListContainer.style.display = 'none';
            
            // Clear selections
            selectedEmployees = [];
            updateSelectedCount(modal);
            
            // Show appropriate UI based on type
            switch (type) {
                case 'individual':
                    if (employeeListContainer) employeeListContainer.style.display = 'block';
                    showEmployeeList(allEmployees, modal);
                    break;
                    
                case 'department':
                    if (departmentFilter) departmentFilter.classList.add('show');
                    break;
                    
                case 'jobPosition':
                    if (jobPositionFilter) jobPositionFilter.classList.add('show');
                    break;
                    
                case 'all':
                    if (employeeListContainer) employeeListContainer.style.display = 'block';
                    selectedEmployees = [...allEmployees];
                    showEmployeeList(allEmployees, modal, true);
                    updateSelectedCount(modal);
                    break;
            }
        }

        // ============================================================================
        // EMPLOYEE FILTERING AND DISPLAY
        // ============================================================================

        async function loadEmployeesByFilter(filterType, filterId, modal = 'create') {
            if (!filterId) {
                console.log('No filter ID provided');
                return;
            }
            
            try {
                console.log(`Loading employees by ${filterType}: ${filterId}`);
                
                const params = new URLSearchParams({
                    filterType: filterType,
                    [filterType === 'department' ? 'departmentId' : 'jobId']: filterId
                });
                
                const response = await fetch(`/hr/employees/filter?${params}`, {
                    method: 'GET',
                    credentials: 'include'
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                
                if (result.success) {
                    const employees = result.data || [];
                    console.log(`Loaded ${employees.length} filtered employees`);
                    
                    // Show employee list
                    const prefix = modal === 'reassign' ? 'reassign' : '';
                    const employeeListContainer = document.getElementById(`${prefix}${prefix ? 'E' : 'e'}mployeeListContainer`);
                    if (employeeListContainer) {
                        employeeListContainer.style.display = 'block';
                        showEmployeeList(employees, modal);
                    }
                } else {
                    console.error('Failed to load filtered employees:', result.message);
                    showNotification('Failed to load employees', 'error');
                }
            } catch (error) {
                console.error('Error loading filtered employees:', error);
                showNotification('Error loading employees: ' + error.message, 'error');
            }
        }

        function showEmployeeList(employees, modal = 'create', selectAll = false) {
            console.log(`Showing employee list for ${modal} modal, ${employees.length} employees, selectAll: ${selectAll}`);
            
            const prefix = modal === 'reassign' ? 'reassign' : '';
            const employeeItemsId = `${prefix}${prefix ? 'E' : 'e'}mployeeItems`;
            const selectAllCheckboxId = `${prefix}${prefix ? 'S' : 's'}electAllEmployees`;
            
            const employeeItems = document.getElementById(employeeItemsId);
            const selectAllCheckbox = document.getElementById(selectAllCheckboxId);
            
            if (!employeeItems) {
                console.error(`Employee items container not found: ${employeeItemsId}`);
                return;
            }
            
            console.log(`Found employeeItems container: ${employeeItemsId}`);
            
            employeeItems.innerHTML = '';
            
            if (employees.length === 0) {
                employeeItems.innerHTML = '<div style="padding: 20px; text-align: center; color: #64748b;">No employees found</div>';
                return;
            }
            
            employees.forEach(employee => {
                const isSelected = selectAll || selectedEmployees.some(emp => emp.id === employee.id);
                
                const employeeItem = document.createElement('div');
                employeeItem.className = 'employee-item';
                employeeItem.innerHTML = `
                    <input type="checkbox" class="employee-checkbox" value="${employee.id}" ${isSelected ? 'checked' : ''}>
                    <div class="employee-info">
                        <div class="employee-name">${employee.fullName}</div>
                        <div class="employee-details">${employee.jobTitle} • ${employee.department}</div>
                    </div>
                `;
                
                const checkbox = employeeItem.querySelector('.employee-checkbox');
                checkbox.addEventListener('change', function() {
                    handleEmployeeSelection(employee, this.checked, modal);
                });
                
                employeeItems.appendChild(employeeItem);
            });
            
            // Handle select all checkbox
            if (selectAllCheckbox) {
                selectAllCheckbox.checked = selectAll;
                
                // Remove existing listeners to prevent duplicates
                const newSelectAllCheckbox = selectAllCheckbox.cloneNode(true);
                selectAllCheckbox.parentNode.replaceChild(newSelectAllCheckbox, selectAllCheckbox);
                
                newSelectAllCheckbox.addEventListener('change', function() {
                    const checkboxes = employeeItems.querySelectorAll('.employee-checkbox');
                    checkboxes.forEach(checkbox => {
                        checkbox.checked = this.checked;
                        const employeeId = checkbox.value;
                        const employee = employees.find(emp => emp.id === employeeId);
                        if (employee) {
                            handleEmployeeSelection(employee, this.checked, modal);
                        }
                    });
                });
            } else {
                console.warn(`Select all checkbox not found: ${selectAllCheckboxId}`);
            }
            
            if (selectAll) {
                selectedEmployees = [...employees];
            }
            
            updateSelectedCount(modal);
        }

        function handleEmployeeSelection(employee, isSelected, modal = 'create') {
            if (isSelected) {
                // Check if employee is already selected (using == for type coercion)
                if (!selectedEmployees.find(emp => emp.id == employee.id)) {
                    selectedEmployees.push(employee);
                }
            } else {
                // Remove employee from selection
                selectedEmployees = selectedEmployees.filter(emp => emp.id != employee.id);
            }
            
            updateSelectedCount(modal);
            console.log(`Employee ${employee.fullName} ${isSelected ? 'selected' : 'deselected'}. Total: ${selectedEmployees.length}`);
        }

        function updateSelectedCount(modal = 'create') {
            const prefix = modal === 'reassign' ? 'reassign' : '';
            const countElement = document.getElementById(`${prefix}${prefix ? 'S' : 's'}electedCount`);
            if (countElement) {
                countElement.textContent = selectedEmployees.length;
            }
        }

        // ============================================================================
        // FORM HANDLERS
        // ============================================================================

        function initializeFormHandlers() {
            // Training mode change handler
            const trainingModeSelect = document.getElementById('trainingMode');
            if (trainingModeSelect) {
                trainingModeSelect.addEventListener('change', function() {
                    const locationFields = document.getElementById('locationFields');
                    if (locationFields) {
                        if (this.value === 'onsite') {
                            locationFields.style.display = 'block';
                        } else {
                            locationFields.style.display = 'none';
                        }
                    }
                });
            }

            // Form submission handlers
            const addTrainingForm = document.getElementById('addTrainingForm');
            if (addTrainingForm) {
                addTrainingForm.addEventListener('submit', handleCreateTrainingSubmit);
            }

            const reassignTrainingForm = document.getElementById('reassignTrainingForm');
            if (reassignTrainingForm) {
                reassignTrainingForm.addEventListener('submit', handleReassignTrainingSubmit);
            }
        }

        async function handleCreateTrainingSubmit(e) {
            e.preventDefault();
            
            console.log('Submitting create training form...');
            
            // Collect form data
            const formData = {
                trainingName: document.getElementById('courseName').value.trim(),
                trainingDesc: document.getElementById('courseDescription').value.trim(),
                isRequired: document.getElementById('isRequired').checked,
                isOnlineArrangement: document.getElementById('trainingMode').value === 'online',
                cost: parseFloat(document.getElementById('trainingCost').value) || 0,
                totalDuration: calculateTotalDurationValue(),
                activities: addedActivities,
                certifications: addedCertificates,
                assignmentType: currentAssignmentType,
                assignedEmployees: selectedEmployees.map(emp => ({
                    userId: emp.userId,
                    startDate: new Date().toISOString().split('T')[0],
                    dueDate: document.getElementById('trainingDueDate').value || null
                }))
            };

            // Add location data for onsite training
            if (!formData.isOnlineArrangement) {
                formData.country = document.getElementById('countryDropdown').value;
                formData.address = document.getElementById('addressField').value.trim();
            }

            // Validation
            const errors = validateTrainingForm(formData);
            if (errors.length > 0) {
                showNotification('Please fix the following errors:\n\n' + errors.join('\n'), 'error');
                return;
            }

            try {
                // Show loading state
                const submitBtn = e.target.querySelector('button[type="submit"]');
                const originalText = submitBtn.textContent;
                submitBtn.textContent = 'Creating...';
                submitBtn.disabled = true;

                console.log('Sending training data:', formData);

                const response = await fetch('/hr/training', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    credentials: 'include',
                    body: JSON.stringify(formData)
                });

                const result = await response.json();

                if (result.success) {
                    showNotification(`Training "${formData.trainingName}" created successfully and assigned to ${formData.assignedEmployees.length} employee(s)!`, 'success');
                    closeAddTrainingModal();
                    
                    // Optionally reload the page to show new training
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    showNotification('Error creating training: ' + (result.message || 'Unknown error'), 'error');
                }

                // Reset button state
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;

            } catch (error) {
                console.error('Error creating training:', error);
                showNotification('Error creating training: ' + error.message, 'error');
                
                // Reset button state
                const submitBtn = e.target.querySelector('button[type="submit"]');
                submitBtn.textContent = 'Create Training Course';
                submitBtn.disabled = false;
            }
        }

        async function handleReassignTrainingSubmit(e) {
            e.preventDefault();
            
            console.log('Submitting reassign training form...');
            
            const trainingId = document.getElementById('existingTrainingSelect').value;
            
            if (!trainingId) {
                showNotification('Please select a training to reassign', 'error');
                return;
            }

            if (selectedEmployees.length === 0) {
                showNotification('Please select at least one employee', 'error');
                return;
            }

            const formData = {
                trainingId: trainingId,
                assignmentType: currentAssignmentType,
                assignedEmployees: selectedEmployees.map(emp => ({
                    userId: emp.userId,
                    startDate: new Date().toISOString().split('T')[0],
                    dueDate: document.getElementById('reassignTrainingDueDate').value || null
                }))
            };

            try {
                // Show loading state
                const submitBtn = e.target.querySelector('button[type="submit"]');
                const originalText = submitBtn.textContent;
                submitBtn.textContent = 'Re-assigning...';
                submitBtn.disabled = true;

                console.log('Sending reassign data:', formData);

                const response = await fetch('/hr/training/reassign', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    credentials: 'include',
                    body: JSON.stringify(formData)
                });

                const result = await response.json();

                if (result.success) {
                    showNotification(`Training re-assigned to ${formData.assignedEmployees.length} employee(s) successfully!`, 'success');
                    closeReassignTrainingModal();
                    
                    // Optionally reload the assignments tab
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    showNotification('Error re-assigning training: ' + (result.message || 'Unknown error'), 'error');
                }

                // Reset button state
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;

            } catch (error) {
                console.error('Error re-assigning training:', error);
                showNotification('Error re-assigning training: ' + error.message, 'error');
                
                // Reset button state
                const submitBtn = e.target.querySelector('button[type="submit"]');
                submitBtn.textContent = 'Re-assign Training';
                submitBtn.disabled = false;
            }
        }

        function validateTrainingForm(formData) {
            const errors = [];
            
            if (!formData.trainingName) errors.push('Training name is required');
            if (!formData.trainingDesc) errors.push('Training description is required');
            if (formData.assignedEmployees.length === 0) errors.push('At least one employee must be assigned');
            if (addedActivities.length === 0) errors.push('At least one activity must be added');
            
            // Validate onsite training location
            if (!formData.isOnlineArrangement) {
                if (!formData.country) errors.push('Country is required for onsite training');
                if (!formData.address) errors.push('Address is required for onsite training');
            }
            
            return errors;
        }

        // ============================================================================
        // ACTIVITIES AND CERTIFICATES MANAGEMENT
        // ============================================================================

        function addActivity() {
            const moduleName = document.getElementById('moduleName').value.trim();
            const estimatedTime = document.getElementById('estimatedTime').value.trim();
            const activityType = document.getElementById('activityType').value;
            const remarks = document.getElementById('activityRemarks').value.trim();
            
            if (!moduleName || !estimatedTime || !activityType) {
                showNotification('Please fill in module name, estimated time, and activity type.', 'warning');
                return;
            }
            
            const activity = {
                name: moduleName,
                duration: parseFloat(estimatedTime),
                type: activityType,
                remarks: remarks
            };
            
            addedActivities.push(activity);
            updateActivitiesDisplay();
            calculateTotalDuration();
            
            // Clear fields
            document.getElementById('moduleName').value = '';
            document.getElementById('estimatedTime').value = '';
            document.getElementById('activityType').value = '';
            document.getElementById('activityRemarks').value = '';
            
            console.log('Activity added:', activity);
        }

        function updateActivitiesDisplay() {
            const activitiesList = document.getElementById('activitiesList');
            if (!activitiesList) return;
            
            activitiesList.innerHTML = '';
            
            addedActivities.forEach((activity, index) => {
                const activityItem = document.createElement('div');
                activityItem.className = 'dynamic-item';
                activityItem.innerHTML = `
                    <div>
                        <strong>${activity.name}</strong><br>
                        <span style="font-size: 12px; color: #64748b;">
                            ${activity.duration} hours • ${activity.type}
                            ${activity.remarks ? ` • ${activity.remarks}` : ''}
                        </span>
                    </div>
                    <button type="button" class="remove-btn" onclick="removeActivity(${index})">×</button>
                `;
                activitiesList.appendChild(activityItem);
            });
        }

        function removeActivity(index) {
            addedActivities.splice(index, 1);
            updateActivitiesDisplay();
            calculateTotalDuration();
            console.log('Activity removed at index:', index);
        }

        function addCertificate() {
            const certificateTitle = document.getElementById('certificateTitle').value.trim();
            const certificateDescription = document.getElementById('certificateDescription').value.trim();
            
            if (!certificateTitle || !certificateDescription) {
                showNotification('Please fill in both certificate title and description.', 'warning');
                return;
            }
            
            const certificate = {
                title: certificateTitle,
                description: certificateDescription
            };
            
            addedCertificates.push(certificate);
            updateCertificatesDisplay();
            
            // Clear fields
            document.getElementById('certificateTitle').value = '';
            document.getElementById('certificateDescription').value = '';
            
            console.log('Certificate added:', certificate);
        }

        function updateCertificatesDisplay() {
            const certificatesList = document.getElementById('certificatesList');
            if (!certificatesList) return;
            
            certificatesList.innerHTML = '';
            
            addedCertificates.forEach((certificate, index) => {
                const certificateItem = document.createElement('div');
                certificateItem.className = 'dynamic-item';
                certificateItem.innerHTML = `
                    <div>
                        <strong>${certificate.title}</strong><br>
                        <span style="font-size: 12px; color: #64748b;">${certificate.description}</span>
                    </div>
                    <button type="button" class="remove-btn" onclick="removeCertificate(${index})">×</button>
                `;
                certificatesList.appendChild(certificateItem);
            });
        }

        function removeCertificate(index) {
            addedCertificates.splice(index, 1);
            updateCertificatesDisplay();
            console.log('Certificate removed at index:', index);
        }

        function calculateTotalDuration() {
            let totalHours = 0;
            
            addedActivities.forEach(activity => {
                totalHours += activity.duration;
            });
            
            const totalDurationElement = document.getElementById('totalDuration');
            if (totalDurationElement) {
                totalDurationElement.textContent = totalHours.toFixed(1);
            }
            
            return totalHours;
        }

        function calculateTotalDurationValue() {
            return addedActivities.reduce((sum, activity) => sum + activity.duration, 0);
        }

        // ============================================================================
        // SEARCH FUNCTIONALITY
        // ============================================================================

        function initializeSearchFunctionality() {
            console.log('Initializing search functionality...');
            
            // Course search
            const courseSearch = document.getElementById('courseSearch');
            if (courseSearch) {
                courseSearch.addEventListener('input', function() {
                    const searchTerm = this.value.toLowerCase();
                    const courseCards = document.querySelectorAll('.training-course-card');
                    
                    courseCards.forEach(card => {
                        const title = card.querySelector('.course-title');
                        const description = card.querySelector('.course-description');
                        
                        if (title && description) {
                            const titleText = title.textContent.toLowerCase();
                            const descText = description.textContent.toLowerCase();
                            
                            if (titleText.includes(searchTerm) || descText.includes(searchTerm)) {
                                card.style.display = 'block';
                            } else {
                                card.style.display = 'none';
                            }
                        }
                    });
                });
            }

            // Employee search
            const employeeSearch = document.getElementById('employeeSearch');
            if (employeeSearch) {
                employeeSearch.addEventListener('input', function() {
                    const searchTerm = this.value.toLowerCase();
                    const assignmentItems = document.querySelectorAll('.assignment-item');
                    
                    assignmentItems.forEach(item => {
                        const name = item.querySelector('.employee-name');
                        const details = item.querySelector('.assignment-details');
                        
                        if (name && details) {
                            const nameText = name.textContent.toLowerCase();
                            const detailsText = details.textContent.toLowerCase();
                            
                            if (nameText.includes(searchTerm) || detailsText.includes(searchTerm)) {
                                item.style.display = 'flex';
                            } else {
                                item.style.display = 'none';
                            }
                        }
                    });
                });
            }
            
            console.log('Search functionality initialized');
        }

        // ============================================================================
        // NOTIFICATION SYSTEM
        // ============================================================================

        function showNotification(message, type = 'info') {
            console.log('Notification:', type, message);
            
            // Remove any existing notifications
            const existingNotification = document.querySelector('.hr-notification');
            if (existingNotification) {
                existingNotification.remove();
            }
            
            const notification = document.createElement('div');
            notification.className = 'hr-notification';
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 12px 20px;
                border-radius: 8px;
                color: white;
                font-size: 14px;
                z-index: 30000;
                max-width: 350px;
                animation: slideIn 0.3s ease;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
                font-family: 'Inter', sans-serif;
            `;
            
            // Set background color based on type
            const colors = {
                info: '#3b82f6',
                success: '#10b981',
                error: '#ef4444',
                warning: '#f59e0b'
            };
            notification.style.backgroundColor = colors[type] || colors.info;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            // Remove after 5 seconds
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.style.animation = 'slideOut 0.3s ease';
                    setTimeout(() => {
                        if (notification.parentNode) {
                            notification.parentNode.removeChild(notification);
                        }
                    }, 300);
                }
            }, 5000);
        }

        // Add CSS for notification animations if not already present
        if (!document.getElementById('hr-notification-styles')) {
            const style = document.createElement('style');
            style.id = 'hr-notification-styles';
            style.textContent = `
                @keyframes slideIn {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
                @keyframes slideOut {
                    from { transform: translateX(0); opacity: 1; }
                    to { transform: translateX(100%); opacity: 0; }
                }
            `;
            document.head.appendChild(style);
        }

        // ============================================================================
        // UTILITY FUNCTIONS
        // ============================================================================

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // ============================================================================
        // ERROR HANDLING
        // ============================================================================

        window.addEventListener('error', function(e) {
            console.error('JavaScript Error:', e.error);
            showNotification('An unexpected error occurred. Please refresh the page.', 'error');
        });

        // ============================================================================
        // DEBUGGING HELPERS
        // ============================================================================

        function debugTrainingForm() {
            console.log('=== TRAINING FORM DEBUG ===');
            console.log('Selected Employees:', selectedEmployees);
            console.log('Added Activities:', addedActivities);
            console.log('Added Certificates:', addedCertificates);
            console.log('Current Assignment Type:', currentAssignmentType);
            console.log('All Employees:', allEmployees.length);
            console.log('All Departments:', allDepartments.length);
            console.log('All Job Positions:', allJobPositions.length);
        }

        // Make debug function available globally
        window.debugTrainingForm = debugTrainingForm;

        console.log('HR Training Tracker JavaScript loaded successfully');

        // Make key functions available globally for onclick handlers
        window.addActivity = addActivity;
        window.removeActivity = removeActivity;
        window.addCertificate = addCertificate;
        window.removeCertificate = removeCertificate;
        window.addNewTraining = addNewTraining;
        window.closeAddTrainingModal = closeAddTrainingModal;
        window.openReassignTrainingModal = openReassignTrainingModal;
        window.closeReassignTrainingModal = closeReassignTrainingModal;

                // Toggle active class for sidebar links
        document.querySelectorAll('.sidebar ul li a').forEach(link => {
            link.addEventListener('click', function() {
                document.querySelectorAll('.sidebar ul li a').forEach(link => link.classList.remove('active'));
                this.classList.add('active');
            });
        });

        // Toggle collapsible content
        document.querySelectorAll('.collapsible-header').forEach(header => {
            header.addEventListener('click', function() {
                var content = this.nextElementSibling;
                if (content.style.display === 'block') {
                    content.style.display = 'none';
                } else {
                    // Hide all other collapsible contents
                    document.querySelectorAll('.collapsible-content').forEach(item => {
                        if (item !== content) {
                            item.style.display = 'none';
                        }
                    });
                    content.style.display = 'block';
                }
            });
        });
    </script>
</body>
</html>