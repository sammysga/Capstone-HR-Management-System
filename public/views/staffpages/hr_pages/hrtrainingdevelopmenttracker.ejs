<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HR Training Approval Dashboard</title>
    <link rel="stylesheet" href="/css/sidebar.css">
    <link rel="stylesheet" href="/css/hr_pages.css">
    <link rel="stylesheet" href="/css/hr_trainingdevelopment_tracker.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>
</head>
<body>
    <%- include('../../partials/hr_partials') %>
    
    <!-- Main content area -->
    <div class="main-content">
        <div class="dashboard-header">
            <h2>HR Training Approval Dashboard</h2>
            <p>Review and approve training requests based on department budgets</p>
        </div>

        <!-- HR APPROVAL SUMMARY CARDS -->
        <div class="approval-summary-cards">
            <div class="approval-summary-card pending">
                <div class="approval-card-icon">
                    <i class="fas fa-clock"></i>
                </div>
                <div class="approval-card-number" id="pendingRequestsCount">0</div>
                <div class="approval-card-label">Pending Requests</div>
                <div class="approval-card-sublabel">Awaiting HR approval</div>
            </div>

            <div class="approval-summary-card budget">
                <div class="approval-card-icon">
                    <i class="fas fa-wallet"></i>
                </div>
                <div class="approval-card-number" id="totalBudgetAmount">₱0</div>
                <div class="approval-card-label">Total Budget</div>
                <div class="approval-card-sublabel">All departments</div>
            </div>

            <div class="approval-summary-card approved">
                <div class="approval-card-icon">
                    <i class="fas fa-check-circle"></i>
                </div>
                <div class="approval-card-number" id="approvedThisMonth">0</div>
                <div class="approval-card-label">Approved This Month</div>
                <div class="approval-card-sublabel">Training requests</div>
            </div>

            <div class="approval-summary-card rejected">
                <div class="approval-card-icon">
                    <i class="fas fa-times-circle"></i>
                </div>
                <div class="approval-card-number" id="budgetExceeded">0</div>
                <div class="approval-card-label">Budget Exceeded</div>
                <div class="approval-card-sublabel">Departments</div>
            </div>
        </div>

        <!-- TABS CONTAINER -->
        <div class="tabs-container">
            <ul class="tabs-nav">
                <li><button class="tab-button active" data-tab="pending-approvals-tab">
                    <i class="fas fa-tasks"></i> Pending Approvals
                </button></li>
                <li><button class="tab-button" data-tab="budget-management-tab">
                    <i class="fas fa-coins"></i> Budget Management
                </button></li>
                <li><button class="tab-button" data-tab="approved-requests-tab">
                    <i class="fas fa-history"></i> Approval History
                </button></li>
            </ul>

            <!-- Tab Content -->
            <div class="tab-contents">
                <!-- PENDING APPROVALS TAB -->
                <div id="pending-approvals-tab" class="tab-content active">
                    <div class="requests-section">
                        <div class="requests-header">
                            <h3 class="requests-title">Training Requests for Approval</h3>
                            <span class="requests-count" id="pendingCount">0</span>
                        </div>

                        <!-- Search and Filter Section -->
                        <div class="search-filter-section">
                            <div class="search-container">
                                <i class="fas fa-search search-icon"></i>
                                <input type="text" class="search-input" placeholder="Search by employee, training, or department..." id="requestSearch">
                            </div>
                            
                            <select class="form-select" id="departmentFilter">
                                <option value="">All Departments</option>
                                <!-- Will be populated by JavaScript -->
                            </select>
                            
                            <select class="form-select" id="costRangeFilter">
                                <option value="">All Cost Ranges</option>
                                <option value="0-10000">₱0 - ₱10,000</option>
                                <option value="10000-50000">₱10,000 - ₱50,000</option>
                                <option value="50000-100000">₱50,000 - ₱100,000</option>
                                <option value="100000+">₱100,000+</option>
                            </select>
                            
                            <button class="btn btn-secondary" onclick="clearFilters()">
                                <i class="fas fa-times"></i> Clear Filters
                            </button>
                        </div>

                        <!-- Training Requests List -->
                        <div id="trainingRequestsList">
                            <!-- Training requests will be populated here -->
                            <div class="loading-state">
                                <i class="fas fa-spinner fa-spin loading-spinner"></i>
                                Loading training requests...
                            </div>
                        </div>
                    </div>
                </div>

                <!-- BUDGET MANAGEMENT TAB -->
                <div id="budget-management-tab" class="tab-content">
                    <div class="card">
                        <div class="card-header">
                            <h3>Training Budget Overview</h3>
                            <div class="budget-export-section">
                                <button class="export-btn excel" onclick="exportBudgetReport('excel')">
                                    <i class="fas fa-file-excel"></i> Export Excel
                                </button>
                                <button class="export-btn pdf" onclick="exportBudgetReport('pdf')">
                                    <i class="fas fa-file-pdf"></i> Export PDF
                                </button>
                                <button class="btn btn-primary" onclick="refreshBudgetData()">
                                    <i class="fas fa-sync-alt"></i> Refresh
                                </button>
                            </div>
                        </div>

                        <!-- Budget Summary Cards -->
                        <div class="budget-overview-grid" id="budgetOverviewGrid">
                            <!-- Loading state -->
                            <div class="loading-state" style="grid-column: 1 / -1;">
                                <i class="fas fa-spinner fa-spin loading-spinner"></i>
                                Loading budget overview...
                            </div>
                        </div>

                        <!-- Filters Section -->
                        <div class="budget-filters-section">
                            <div class="budget-filter-group">
                                <label class="budget-filter-label">Status Filter:</label>
                                <select class="budget-filter-select" id="statusFilter" onchange="filterDepartments()">
                                    <option value="">All Departments</option>
                                    <option value="good">Good (< 75%)</option>
                                    <option value="warning">Warning (75-90%)</option>
                                    <option value="critical">Critical (> 90%)</option>
                                </select>
                            </div>

                            <div class="budget-filter-group">
                                <label class="budget-filter-label">Budget Range:</label>
                                <select class="budget-filter-select" id="budgetRangeFilter" onchange="filterDepartments()">
                                    <option value="">All Ranges</option>
                                    <option value="0-50000">₱0 - ₱50,000</option>
                                    <option value="50000-100000">₱50,000 - ₱100,000</option>
                                    <option value="100000-500000">₱100,000 - ₱500,000</option>
                                    <option value="500000+">₱500,000+</option>
                                </select>
                            </div>

                            <div class="budget-filter-group" style="flex: 1;">
                                <label class="budget-filter-label">Search Department:</label>
                                <input type="text" class="budget-search-input" id="departmentSearch" 
                                    placeholder="Search by department name..." onkeyup="filterDepartments()">
                            </div>

                            <button class="btn btn-secondary" onclick="clearAllFilters()">
                                <i class="fas fa-times"></i> Clear Filters
                            </button>
                        </div>

                        <!-- Department Budget Table -->
                        <div class="department-budget-table" id="departmentBudgetTable">
                            <!-- Loading state -->
                            <div class="loading-state" style="padding: 40px; text-align: center;">
                                <i class="fas fa-spinner fa-spin loading-spinner"></i>
                                Loading department budget data...
                            </div>
                        </div>
                    </div>
                </div>

                <!-- APPROVAL HISTORY TAB -->
                <div id="approved-requests-tab" class="tab-content">
                    <div class="card">
                        <div class="card-header">
                            <h3>Training Approval History</h3>
                            <button class="btn btn-primary" onclick="refreshApprovalHistory()">
                                <i class="fas fa-sync-alt"></i> Refresh
                            </button>
                        </div>

                        <!-- Date Range Filter -->
                        <div class="search-filter-section">
                            <div class="date-range-container">
                                <label>From:</label>
                                <input type="date" class="form-input" id="historyStartDate">
                                <label>To:</label>
                                <input type="date" class="form-input" id="historyEndDate">
                            </div>
                            
                            <select class="form-select" id="historyStatusFilter">
                                <option value="">All Statuses</option>
                                <option value="In Progress">Approved</option>
                                <option value="Cancelled">Rejected</option>
                            </select>
                            
                            <button class="btn btn-primary" onclick="applyHistoryFilters()">
                                <i class="fas fa-filter"></i> Apply Filters
                            </button>
                        </div>

                        <!-- Approval History List -->
                        <div id="approvalHistoryList">
                            <!-- History items will be populated here -->
                            <div class="loading-state">
                                <i class="fas fa-spinner fa-spin loading-spinner"></i>
                                Loading approval history...
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- APPROVAL MODAL -->
        <div class="approval-modal" id="approvalModal">
            <div class="approval-modal-content">
                <div class="approval-modal-header">
                    <h3 class="approval-modal-title" id="approvalModalTitle">Review Training Request</h3>
                    <button type="button" class="close-btn" onclick="closeApprovalModal()">&times;</button>
                </div>
                
                <div id="approvalModalBody">
                    <!-- Request details will be populated here -->
                </div>

                <form id="approvalForm">
                    <input type="hidden" id="requestId" name="requestId">
                    
                    <div class="approval-form-group">
                        <label class="approval-form-label">HR Decision:</label>
                        <div style="display: flex; gap: 15px; margin-bottom: 15px;">
                            <label style="display: flex; align-items: center; gap: 5px;">
                                <input type="radio" name="decision" value="approved" required>
                                <span style="color: #10b981; font-weight: 600;">Approve</span>
                            </label>
                            <label style="display: flex; align-items: center; gap: 5px;">
                                <input type="radio" name="decision" value="rejected" required>
                                <span style="color: #ef4444; font-weight: 600;">Reject</span>
                            </label>
                        </div>
                    </div>

                    <div class="approval-form-group">
                        <label class="approval-form-label" for="hrRemarks">HR Remarks:</label>
                        <textarea class="approval-form-textarea" id="hrRemarks" name="remarks" 
                                placeholder="Enter your remarks or reason for the decision..." required></textarea>
                    </div>

                    <div class="approval-modal-actions">
                        <button type="button" class="btn-secondary" onclick="closeApprovalModal()">Cancel</button>
                        <button type="submit" class="btn-primary">
                            <i class="fas fa-check"></i> Submit Decision
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Department Details Modal -->
        <div class="modal-overlay" id="departmentDetailsModal">
            <div class="modal-content" style="max-width: 900px;">
                <div class="modal-header">
                    <h2 class="modal-title">Department Budget Details</h2>
                    <button type="button" class="close-modal-btn" onclick="closeDepartmentDetailsModal()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                
                <div style="max-height: 70vh; overflow-y: auto;">
                    <!-- Department Overview -->
                    <div class="dept-details-section">
                        <h4>Department Overview</h4>
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
                            <div>
                                <p><strong>Department:</strong> <span id="modalDeptName">-</span></p>
                                <p><strong>Department ID:</strong> <span id="modalDeptId">-</span></p>
                                <p><strong>Fiscal Year:</strong> <span id="modalFiscalYear">-</span></p>
                                <p><strong>Employee Count:</strong> <span id="modalEmployeeCount">-</span></p>
                            </div>
                            <div style="background: #f8fafc; padding: 15px; border-radius: 8px;">
                                <h5 style="margin-bottom: 15px; color: #334155;">Budget Summary</h5>
                                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                                    <div style="text-align: center; padding: 10px; background: white; border-radius: 6px;">
                                        <div style="font-size: 18px; font-weight: 600; color: #3b82f6;" id="modalTotalBudget">₱0</div>
                                        <div style="font-size: 11px; color: #64748b;">Total Budget</div>
                                    </div>
                                    <div style="text-align: center; padding: 10px; background: white; border-radius: 6px;">
                                        <div style="font-size: 18px; font-weight: 600; color: #dc2626;" id="modalTotalSpent">₱0</div>
                                        <div style="font-size: 11px; color: #64748b;">Total Spent</div>
                                    </div>
                                    <div style="text-align: center; padding: 10px; background: white; border-radius: 6px;">
                                        <div style="font-size: 18px; font-weight: 600; color: #10b981;" id="modalRemaining">₱0</div>
                                        <div style="font-size: 11px; color: #64748b;">Remaining</div>
                                    </div>
                                    <div style="text-align: center; padding: 10px; background: white; border-radius: 6px;">
                                        <div style="font-size: 18px; font-weight: 600; color: #8b5cf6;" id="modalUtilization">0%</div>
                                        <div style="font-size: 11px; color: #64748b;">Utilization</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Recent Training Requests -->
                    <div class="dept-details-section">
                        <h4>Recent Training Requests</h4>
                        <div class="recent-trainings-list" id="recentTrainingsList">
                            <!-- Training items will be populated by JavaScript -->
                        </div>
                    </div>

                    <!-- Budget Utilization Chart -->
                    <div class="dept-details-section">
                        <h4>Budget Utilization</h4>
                        <div style="background: #f8fafc; padding: 20px; border-radius: 8px;">
                            <div class="budget-progress-container" style="max-width: 100%; height: 20px; margin-bottom: 10px;">
                                <div class="budget-progress-bar" id="modalProgressBar" style="width: 0%;"></div>
                            </div>
                            <div style="display: flex; justify-content: space-between; font-size: 12px; color: #64748b;">
                                <span>₱0</span>
                                <span id="modalProgressText">0% Used</span>
                                <span id="modalBudgetLimit">₱0</span>
                            </div>
                            
                            <!-- Status and Recommendations -->
                            <div style="margin-top: 15px;">
                                <div style="display: flex; align-items: center; gap: 10px;">
                                    <span>Status:</span>
                                    <span class="budget-status-badge" id="modalStatusBadge">Good</span>
                                </div>
                                <div style="margin-top: 10px;">
                                    <strong>Recommendations:</strong>
                                    <ul id="modalRecommendations" style="margin: 5px 0 0 20px; font-size: 14px; color: #64748b;">
                                        <!-- Recommendations will be populated by JavaScript -->
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-actions">
                    <button type="button" class="btn-secondary" onclick="closeDepartmentDetailsModal()">Close</button>
                    <button type="button" class="btn-primary" onclick="editDepartmentBudget()">
                        <i class="fas fa-edit"></i> Edit Budget
                    </button>
                </div>
            </div>
        </div>

        <!-- Edit Budget Modal -->
        <div class="modal-overlay" id="editBudgetModal">
            <div class="modal-content" style="max-width: 500px;">
                <div class="modal-header">
                    <h2 class="modal-title">Edit Department Budget</h2>
                    <button type="button" class="close-modal-btn" onclick="closeEditBudgetModal()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                
                <form id="editBudgetForm">
                    <div class="form-group">
                        <label class="form-label">Department:</label>
                        <input type="text" class="form-input" id="editDeptName" readonly>
                        <input type="hidden" id="editDeptId">
                    </div>

                    <div class="form-group">
                        <label class="form-label">Budget Amount (PHP):</label>
                        <input type="number" class="form-input" id="editBudgetAmount" 
                            placeholder="Enter budget amount" min="0" step="1000" required>
                    </div>

                    <div class="form-group">
                        <label class="form-label">Fiscal Year:</label>
                        <select class="form-select" id="editFiscalYear" required>
                            <option value="2024">2024</option>
                            <option value="2025" selected>2025</option>
                            <option value="2026">2026</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label class="form-label">Notes (Optional):</label>
                        <textarea class="form-textarea" id="editBudgetNotes" 
                                placeholder="Add any notes about this budget allocation..." rows="3"></textarea>
                    </div>

                    <div class="modal-actions">
                        <button type="button" class="btn-secondary" onclick="closeEditBudgetModal()">Cancel</button>
                        <button type="submit" class="btn-primary">
                            <i class="fas fa-save"></i> Save Budget
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>

        // Global variables
        let pendingRequests = [];
        let budgetData = null;
        let filteredDepartments = [];
        let currentSelectedDepartment = null;
        let approvalHistory = [];
        let filteredRequests = [];

        // ============================================================================
        // INITIALIZATION - Main entry point
        // ============================================================================
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 HR Training Approval Dashboard initializing...');
            
            try {
                // Initialize core components in order
                initializeTabs();
                initializeModals();
                initializeFormHandlers();
                
                // Load initial data
                loadPendingRequests();
                
                // Set up tab-specific event listeners
                setupTabEventListeners();
                
                console.log('✅ HR Training Approval Dashboard initialized successfully');
            } catch (error) {
                console.error('❌ Error during initialization:', error);
                showNotification('Error initializing dashboard: ' + error.message, 'error');
            }
        });

        // ============================================================================
        // TAB FUNCTIONALITY
        // ============================================================================
        function initializeTabs() {
            console.log('🔧 Initializing tab functionality...');
            
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabContents = document.querySelectorAll('.tab-content');

            if (tabButtons.length === 0) {
                console.warn('⚠️ No tab buttons found');
                return;
            }

            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    console.log('📱 Tab clicked:', button.getAttribute('data-tab'));
                    
                    // Remove active class from all buttons and contents
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    tabContents.forEach(content => content.classList.remove('active'));
                    
                    // Add active class to clicked button
                    button.classList.add('active');
                    
                    // Show corresponding content
                    const tabId = button.getAttribute('data-tab');
                    const targetTab = document.getElementById(tabId);
                    if (targetTab) {
                        targetTab.classList.add('active');
                        console.log('✅ Tab activated:', tabId);
                    } else {
                        console.error('❌ Tab content not found:', tabId);
                    }
                });
            });
            
            console.log('✅ Tab functionality initialized');
        }

        function setupTabEventListeners() {
            console.log('🔧 Setting up tab-specific event listeners...');
            
            // Budget Management Tab - Load budget data when clicked
            const budgetTab = document.querySelector('[data-tab="budget-management-tab"]');
            if (budgetTab) {
                budgetTab.addEventListener('click', function() {
                    console.log('🏢 Budget tab clicked - loading budget data...');
                    setTimeout(() => {
                        loadBudgetData();
                    }, 100); // Small delay to ensure tab is active
                });
                console.log('✅ Budget tab listener added');
            } else {
                console.warn('⚠️ Budget tab button not found');
            }

            // Approval History Tab - Load history when clicked
            const historyTab = document.querySelector('[data-tab="approved-requests-tab"]');
            if (historyTab) {
                historyTab.addEventListener('click', function() {
                    console.log('📋 History tab clicked - loading approval history...');
                    setTimeout(() => {
                        loadApprovalHistory();
                        initializeHistoryFilters();
                    }, 100); // Small delay to ensure tab is active
                });
                console.log('✅ History tab listener added');
            } else {
                console.warn('⚠️ History tab button not found');
            }
            
            console.log('✅ Tab-specific event listeners setup complete');
        }

        // ============================================================================
        // MODAL FUNCTIONALITY
        // ============================================================================
        function initializeModals() {
            console.log('🔧 Initializing modal functionality...');
            
            // Close modals when clicking outside
            document.addEventListener('click', function(event) {
                const modals = document.querySelectorAll('.modal-overlay, .approval-modal');
                modals.forEach(modal => {
                    if (event.target === modal) {
                        console.log('📱 Modal overlay clicked - closing modal');
                        modal.classList.remove('show');
                    }
                });
            });

            // Prevent modal close when clicking inside modal content
            document.querySelectorAll('.modal-content, .approval-modal-content').forEach(content => {
                content.addEventListener('click', function(event) {
                    event.stopPropagation(); // Prevent closing when clicking inside modal
                });
            });
            
            console.log('✅ Modal functionality initialized');
        }

        // ============================================================================
        // FORM HANDLERS INITIALIZATION
        // ============================================================================
        function initializeFormHandlers() {
            console.log('🔧 Initializing form handlers...');
            
            // Approval form submission
            const approvalForm = document.getElementById('approvalForm');
            if (approvalForm) {
                approvalForm.addEventListener('submit', handleApprovalSubmission);
                console.log('✅ Approval form handler added');
            } else {
                console.warn('⚠️ Approval form not found');
            }

            // Search and filter handlers for pending requests
            const requestSearch = document.getElementById('requestSearch');
            if (requestSearch) {
                requestSearch.addEventListener('input', debounce(filterRequests, 300));
                console.log('✅ Request search handler added');
            } else {
                console.warn('⚠️ Request search input not found');
            }

            const departmentFilter = document.getElementById('departmentFilter');
            if (departmentFilter) {
                departmentFilter.addEventListener('change', filterRequests);
                console.log('✅ Department filter handler added');
            } else {
                console.warn('⚠️ Department filter not found');
            }

            const costRangeFilter = document.getElementById('costRangeFilter');
            if (costRangeFilter) {
                costRangeFilter.addEventListener('change', filterRequests);
                console.log('✅ Cost range filter handler added');
            } else {
                console.warn('⚠️ Cost range filter not found');
            }

            // Budget form handler
            const editBudgetForm = document.getElementById('editBudgetForm');
            if (editBudgetForm) {
                editBudgetForm.addEventListener('submit', handleEditBudgetSubmit);
                console.log('✅ Budget edit form handler added');
            } else {
                console.warn('⚠️ Budget edit form not found');
            }
            
            console.log('✅ Form handlers initialization complete');
        }

        // ============================================================================
        // UTILITY FUNCTIONS
        // ============================================================================

        // Debounce function to limit API calls during typing
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Show notification to user
        function showNotification(message, type = 'info') {
            console.log('📢 Notification:', type, message);
            
            // Remove any existing notifications
            const existingNotification = document.querySelector('.hr-notification');
            if (existingNotification) {
                existingNotification.remove();
            }
            
            const notification = document.createElement('div');
            notification.className = 'hr-notification';
            
            // Set background color based on type
            const colors = {
                info: '#3b82f6',
                success: '#10b981',
                error: '#ef4444',
                warning: '#f59e0b'
            };
            
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background-color: ${colors[type] || colors.info};
                color: white;
                padding: 15px 20px;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                z-index: 10000;
                font-weight: 500;
                max-width: 400px;
                animation: slideIn 0.3s ease;
            `;
            
            notification.textContent = message;
            document.body.appendChild(notification);
            
            // Remove after 5 seconds
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.style.animation = 'slideOut 0.3s ease';
                    setTimeout(() => {
                        if (notification.parentNode) {
                            notification.parentNode.removeChild(notification);
                        }
                    }, 300);
                }
            }, 5000);
        }

        // ============================================================================
        // HR TRAINING APPROVAL DASHBOARD - PHASE 2: PENDING REQUESTS MANAGEMENT
        // Replace the placeholder functions from Phase 1 with actual implementations
        // ============================================================================

        // ============================================================================
        // REPLACE: loadPendingRequests() - ACTUAL IMPLEMENTATION
        // ============================================================================
        async function loadPendingRequests() {
            try {
                console.log('🔄 Loading pending training requests...');
                
                // Show loading state immediately
                showPendingRequestsLoading();
                
                // Fetch pending requests from API
                const response = await fetch('/hr/pending-training-requests', {
                    method: 'GET',
                    credentials: 'include',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                // Check if request was successful
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                
                if (result.success) {
                    // Store the data globally
                    pendingRequests = result.data || [];
                    filteredRequests = [...pendingRequests]; // Copy for filtering
                    
                    console.log(`✅ Loaded ${pendingRequests.length} pending requests`);
                    
                    // Render all the components
                    renderPendingRequests();
                    updateSummaryCards();
                    populateDepartmentFilter();
                    
                    // Show success notification
                    showNotification(`Loaded ${pendingRequests.length} pending requests`, 'success');
                    
                } else {
                    throw new Error(result.message || 'Failed to load pending requests');
                }
                
            } catch (error) {
                console.error('❌ Error loading pending requests:', error);
                showPendingRequestsError(error.message);
                showNotification('Failed to load pending requests: ' + error.message, 'error');
            }
        }

        // ============================================================================
        // NEW FUNCTION: showPendingRequestsLoading()
        // ============================================================================
        function showPendingRequestsLoading() {
            console.log('🔄 Showing loading state for pending requests...');
            
            const requestsList = document.getElementById('trainingRequestsList');
            if (requestsList) {
                requestsList.innerHTML = `
                    <div class="loading-state" style="text-align: center; padding: 40px;">
                        <i class="fas fa-spinner fa-spin loading-spinner" style="font-size: 32px; color: #3b82f6; margin-bottom: 15px;"></i>
                        <h3 style="margin: 0 0 10px 0; color: #475569;">Loading Training Requests</h3>
                        <p style="margin: 0; color: #64748b;">Fetching pending requests for HR approval...</p>
                    </div>
                `;
            } else {
                console.warn('⚠️ Training requests list element not found');
            }
            
            // Also update summary cards with loading state
            updateSummaryCardsLoading();
        }

        // ============================================================================
        // NEW FUNCTION: showPendingRequestsError()
        // ============================================================================
        function showPendingRequestsError(message) {
            console.log('❌ Showing error state for pending requests...');
            
            const requestsList = document.getElementById('trainingRequestsList');
            if (requestsList) {
                requestsList.innerHTML = `
                    <div style="text-align: center; padding: 40px; color: #64748b;">
                        <i class="fas fa-exclamation-triangle" style="font-size: 48px; margin-bottom: 15px; color: #ef4444;"></i>
                        <h3 style="margin: 0 0 10px 0; color: #475569;">Failed to Load Requests</h3>
                        <p style="margin: 0 0 15px 0;">Error: ${message}</p>
                        <button onclick="loadPendingRequests()" class="btn btn-primary" style="padding: 10px 20px; background: #3b82f6; color: white; border: none; border-radius: 6px; cursor: pointer;">
                            <i class="fas fa-retry"></i> Try Again
                        </button>
                    </div>
                `;
            }
        }

        // ============================================================================
        // NEW FUNCTION: renderPendingRequests()
        // ============================================================================
        function renderPendingRequests() {
            console.log(`🎨 Rendering ${filteredRequests.length} pending requests...`);
            
            const requestsList = document.getElementById('trainingRequestsList');
            const pendingCount = document.getElementById('pendingCount');
            
            // Update the count display
            if (pendingCount) {
                pendingCount.textContent = filteredRequests.length;
            }
            
            // Handle empty state
            if (filteredRequests.length === 0) {
                requestsList.innerHTML = `
                    <div style="text-align: center; padding: 40px; color: #64748b;">
                        <i class="fas fa-check-circle" style="font-size: 48px; margin-bottom: 15px; color: #10b981;"></i>
                        <h3 style="margin: 0 0 10px 0; color: #475569;">No Pending Requests</h3>
                        <p style="margin: 0;">
                            ${pendingRequests.length === 0 ? 
                                'All training requests have been reviewed.' : 
                                'No requests match your current filters.'}
                        </p>
                    </div>
                `;
                return;
            }
            
            // Generate HTML for each request
            const requestsHtml = filteredRequests.map(request => {
                const budgetStatusClass = request.budgetSufficient ? 'sufficient' : 'insufficient';
                const budgetStatusText = request.budgetSufficient ? 'Budget Available' : 'Exceeds Budget';
                
                return `
                    <div class="training-request-item" data-request-id="${request.requestId}">
                        <div class="request-header">
                            <div class="request-info">
                                <h4>${request.employeeName}</h4>
                                <div class="request-meta">
                                    ${request.department} • ${request.jobTitle}<br>
                                    Training: <strong>${request.trainingName}</strong><br>
                                    Requested: ${new Date(request.requestDate).toLocaleDateString()}<br>
                                    ${request.isOnlineArrangement ? 
                                        '<span style="color: #07ACB9;"><i class="fas fa-laptop"></i> Online Training</span>' : 
                                        `<span style="color: #f59e0b;"><i class="fas fa-map-marker-alt"></i> Onsite: ${request.country}</span>`
                                    }
                                </div>
                            </div>
                            <div class="request-actions">
                                <button class="view-details-btn" onclick="showRequestDetails('${request.requestId}')" 
                                        style="padding: 8px 12px; margin: 0 5px; background: #6b7280; color: white; border: none; border-radius: 4px; cursor: pointer;">
                                    <i class="fas fa-eye"></i> Details
                                </button>
                                <button class="approve-btn" onclick="openApprovalModal('${request.requestId}', 'approved')" 
                                        style="padding: 8px 12px; margin: 0 5px; background: #10b981; color: white; border: none; border-radius: 4px; cursor: pointer; ${!request.budgetSufficient ? 'opacity: 0.6;' : ''}" 
                                        ${!request.budgetSufficient ? 'title="Budget insufficient"' : ''}>
                                    <i class="fas fa-check"></i> Approve
                                </button>
                                <button class="reject-btn" onclick="openApprovalModal('${request.requestId}', 'rejected')"
                                        style="padding: 8px 12px; margin: 0 5px; background: #ef4444; color: white; border: none; border-radius: 4px; cursor: pointer;">
                                    <i class="fas fa-times"></i> Reject
                                </button>
                            </div>
                        </div>
                        
                        <div class="request-details">
                            <div>
                                <div class="request-cost" style="font-size: 20px; font-weight: 600; color: #1f2937;">₱${request.cost.toLocaleString()}</div>
                                <div style="font-size: 12px; color: #64748b;">Cost</div>
                                ${request.duration ? `<div style="font-size: 12px; margin-top: 5px; color: #64748b;">${request.duration} hours</div>` : ''}
                            </div>
                            
                            <div style="flex: 1; margin: 0 15px;">
                                <div style="font-size: 14px; margin-bottom: 5px; font-weight: 600;">Line Manager Endorsement:</div>
                                <div style="font-size: 13px; color: #64748b; font-style: italic; max-height: 40px; overflow: hidden; line-height: 1.4;">
                                    "${request.lineManagerRemarks || 'No specific remarks provided by line manager'}"
                                </div>
                            </div>
                            
                            <div>
                                <div style="font-size: 14px; margin-bottom: 5px; font-weight: 600;">Budget Status:</div>
                                <div class="budget-status ${budgetStatusClass}" style="padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: 600; 
                                    background-color: ${request.budgetSufficient ? '#dcfce7' : '#fef2f2'}; 
                                    color: ${request.budgetSufficient ? '#166534' : '#dc2626'};">
                                    ${budgetStatusText}
                                </div>
                                ${!request.budgetSufficient ? `
                                    <div style="font-size: 11px; color: #dc2626; margin-top: 2px;">
                                        Available: ₱${request.availableBudget.toLocaleString()}
                                    </div>
                                    <div style="font-size: 11px; color: #dc2626;">
                                        Shortage: ₱${(request.cost - request.availableBudget).toLocaleString()}
                                    </div>
                                ` : `
                                    <div style="font-size: 11px; color: #10b981; margin-top: 2px;">
                                        Available: ₱${request.availableBudget.toLocaleString()}
                                    </div>
                                `}
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
            
            // Set the HTML
            requestsList.innerHTML = requestsHtml;
            
            console.log('✅ Pending requests rendered successfully');
        }

        // ============================================================================
        // NEW FUNCTION: updateSummaryCards()
        // ============================================================================
        function updateSummaryCards() {
            console.log('📊 Updating summary cards...');
            
            if (pendingRequests.length === 0) {
                console.log('📊 No data available for summary cards');
                return;
            }
            
            // Calculate summary metrics
            const pendingCount = pendingRequests.length;
            const totalRequestedCost = pendingRequests.reduce((sum, req) => sum + req.cost, 0);
            const budgetExceededCount = pendingRequests.filter(req => !req.budgetSufficient).length;
            
            // Update each summary card
            const pendingCountEl = document.getElementById('pendingRequestsCount');
            if (pendingCountEl) {
                pendingCountEl.textContent = pendingCount;
            }
            
            const totalBudgetEl = document.getElementById('totalBudgetAmount');
            if (totalBudgetEl) {
                totalBudgetEl.textContent = `₱${totalRequestedCost.toLocaleString()}`;
            }
            
            const budgetExceededEl = document.getElementById('budgetExceeded');
            if (budgetExceededEl) {
                budgetExceededEl.textContent = budgetExceededCount;
            }
            
            // Note: Approved this month would need to be fetched from backend
            // For now, we'll leave it as is or could be calculated from approval history
            const approvedThisMonthEl = document.getElementById('approvedThisMonth');
            if (approvedThisMonthEl && approvedThisMonthEl.textContent === '0') {
                // Only update if it's still the default value
                approvedThisMonthEl.textContent = '-'; // Placeholder until we have real data
            }
            
            console.log(`✅ Summary cards updated - ${pendingCount} pending, ₱${totalRequestedCost.toLocaleString()} total cost, ${budgetExceededCount} over budget`);
        }

        // ============================================================================
        // NEW FUNCTION: updateSummaryCardsLoading()
        // ============================================================================
        function updateSummaryCardsLoading() {
            console.log('🔄 Setting summary cards to loading state...');
            
            const loadingText = '...';
            
            const pendingCountEl = document.getElementById('pendingRequestsCount');
            if (pendingCountEl) pendingCountEl.textContent = loadingText;
            
            const totalBudgetEl = document.getElementById('totalBudgetAmount');
            if (totalBudgetEl) totalBudgetEl.textContent = loadingText;
            
            const budgetExceededEl = document.getElementById('budgetExceeded');
            if (budgetExceededEl) budgetExceededEl.textContent = loadingText;
        }

        // ============================================================================
        // NEW FUNCTION: populateDepartmentFilter()
        // ============================================================================
        function populateDepartmentFilter() {
            console.log('🏢 Populating department filter...');
            
            const departmentFilter = document.getElementById('departmentFilter');
            if (!departmentFilter) {
                console.warn('⚠️ Department filter element not found');
                return;
            }
            
            // Extract unique departments from pending requests
            const departments = [...new Set(pendingRequests.map(req => req.department))]
                .filter(dept => dept) // Remove any null/undefined departments
                .sort(); // Sort alphabetically
            
            console.log(`📋 Found ${departments.length} unique departments:`, departments);
            
            // Clear existing options and add "All Departments"
            departmentFilter.innerHTML = '<option value="">All Departments</option>';
            
            // Add each department as an option
            departments.forEach(dept => {
                const option = document.createElement('option');
                option.value = dept;
                option.textContent = dept;
                departmentFilter.appendChild(option);
            });
            
            console.log('✅ Department filter populated');
        }

        // ============================================================================
        // NEW FUNCTION: refreshPendingRequests()
        // ============================================================================
        function refreshPendingRequests() {
            console.log('🔄 Refreshing pending requests...');
            showNotification('Refreshing pending requests...', 'info');
            loadPendingRequests();
        }

        // ============================================================================
        // REPLACE: openApprovalModal() - ACTUAL IMPLEMENTATION
        // ============================================================================
        function openApprovalModal(requestId, defaultDecision = null) {
            const request = pendingRequests.find(r => r.requestId == requestId);
            if (!request) {
                console.error('❌ Request not found:', requestId);
                showNotification('Request not found', 'error');
                return;
            }
            
            console.log('🔍 Opening approval modal for request:', requestId);
            
            // Set the request ID in the hidden input
            const requestIdInput = document.getElementById('requestId');
            if (requestIdInput) {
                requestIdInput.value = requestId;
            }
            
            // Populate modal with request details
            const modalBody = document.getElementById('approvalModalBody');
            if (modalBody) {
                modalBody.innerHTML = generateApprovalModalContent(request);
            }
            
            // Set default decision if provided
            if (defaultDecision) {
                const radio = document.querySelector(`input[name="decision"][value="${defaultDecision}"]`);
                if (radio) {
                    radio.checked = true;
                    console.log(`✅ Default decision set to: ${defaultDecision}`);
                }
            }
            
            // Clear previous remarks
            const hrRemarks = document.getElementById('hrRemarks');
            if (hrRemarks) {
                hrRemarks.value = '';
            }
            
            // Show modal
            const approvalModal = document.getElementById('approvalModal');
            if (approvalModal) {
                approvalModal.classList.add('show');
                console.log('✅ Approval modal displayed');
            } else {
                console.error('❌ Approval modal element not found');
            }
        }

        // ============================================================================
        // NEW FUNCTION: generateApprovalModalContent()
        // ============================================================================
        function generateApprovalModalContent(request) {
            return `
                <div class="request-overview">
                    <h4 style="margin: 0 0 20px 0; color: #1f2937;">${request.employeeName} - ${request.trainingName}</h4>
                    
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 15px 0;">
                        <div>
                            <p style="margin: 8px 0;"><strong>Department:</strong> ${request.department}</p>
                            <p style="margin: 8px 0;"><strong>Job Title:</strong> ${request.jobTitle}</p>
                            <p style="margin: 8px 0;"><strong>Training Cost:</strong> ₱${request.cost.toLocaleString()}</p>
                            <p style="margin: 8px 0;"><strong>Duration:</strong> ${request.duration || 0} hours</p>
                            <p style="margin: 8px 0;"><strong>Mode:</strong> ${request.isOnlineArrangement ? 'Online' : 'Onsite'}</p>
                        </div>
                        <div>
                            <p style="margin: 8px 0;"><strong>Request Date:</strong> ${new Date(request.requestDate).toLocaleDateString()}</p>
                            <p style="margin: 8px 0;"><strong>Budget Status:</strong> 
                                <span class="budget-status ${request.budgetSufficient ? 'sufficient' : 'insufficient'}" 
                                    style="padding: 2px 6px; border-radius: 4px; font-size: 12px; font-weight: 600; 
                                            background-color: ${request.budgetSufficient ? '#dcfce7' : '#fef2f2'}; 
                                            color: ${request.budgetSufficient ? '#166534' : '#dc2626'};">
                                    ${request.budgetSufficient ? 'Available' : 'Insufficient'}
                                </span>
                            </p>
                            <p style="margin: 8px 0;"><strong>Available Budget:</strong> ₱${request.availableBudget.toLocaleString()}</p>
                            ${!request.budgetSufficient ? `
                                <p style="margin: 8px 0; color: #dc2626;"><strong>Shortage:</strong> ₱${(request.cost - request.availableBudget).toLocaleString()}</p>
                            ` : ''}
                            ${!request.isOnlineArrangement ? `
                                <p style="margin: 8px 0;"><strong>Location:</strong> ${request.address || 'N/A'}, ${request.country || 'N/A'}</p>
                            ` : ''}
                        </div>
                    </div>
                    
                    <div style="background: #f8fafc; padding: 15px; border-radius: 8px; margin: 15px 0;">
                        <h5 style="margin: 0 0 10px 0; color: #334155;">📚 Training Description:</h5>
                        <p style="margin: 0; font-size: 14px; color: #64748b; line-height: 1.5;">${request.trainingDesc || 'No description provided'}</p>
                    </div>
                    
                    <div style="background: #f0f9ff; padding: 15px; border-radius: 8px; border-left: 4px solid #3b82f6; margin: 15px 0;">
                        <h5 style="margin: 0 0 10px 0; color: #1e40af;">👨‍💼 Line Manager Endorsement:</h5>
                        <p style="margin: 0; font-size: 14px; color: #64748b; font-style: italic; line-height: 1.5;">
                            "${request.lineManagerRemarks || 'No specific remarks provided by line manager'}"
                        </p>
                    </div>
                    
                    ${!request.budgetSufficient ? `
                        <div style="background: #fef2f2; padding: 15px; border-radius: 8px; border-left: 4px solid #ef4444; margin-top: 15px;">
                            <h5 style="margin: 0 0 10px 0; color: #dc2626;">⚠️ Budget Warning</h5>
                            <p style="margin: 0; font-size: 14px; color: #dc2626; line-height: 1.5;">
                                This training request exceeds the available department budget by ₱${(request.cost - request.availableBudget).toLocaleString()}.
                                Approval will require budget reallocation or additional budget approval.
                            </p>
                        </div>
                    ` : `
                        <div style="background: #f0fdf4; padding: 15px; border-radius: 8px; border-left: 4px solid #10b981; margin-top: 15px;">
                            <h5 style="margin: 0 0 10px 0; color: #166534;">✅ Budget Available</h5>
                            <p style="margin: 0; font-size: 14px; color: #166534; line-height: 1.5;">
                                Sufficient budget is available for this training request.
                            </p>
                        </div>
                    `}
                </div>
            `;
        }

        // ============================================================================
        // NEW FUNCTION: closeApprovalModal()
        // ============================================================================
        function closeApprovalModal() {
            console.log('❌ Closing approval modal...');
            
            const approvalModal = document.getElementById('approvalModal');
            if (approvalModal) {
                approvalModal.classList.remove('show');
            }
            
            // Reset the form
            const approvalForm = document.getElementById('approvalForm');
            if (approvalForm) {
                approvalForm.reset();
            }
            
            console.log('✅ Approval modal closed and form reset');
        }

        // ============================================================================
        // REPLACE: handleApprovalSubmission() - ACTUAL IMPLEMENTATION
        // ============================================================================
        async function handleApprovalSubmission(e) {
            e.preventDefault();
            
            console.log('🔄 Processing approval submission...');
            
            // Get form data
            const formData = new FormData(e.target);
            const requestId = formData.get('requestId');
            const decision = formData.get('decision');
            const remarks = formData.get('remarks');
            
            // Validate required fields
            if (!requestId || !decision || !remarks.trim()) {
                console.error('❌ Missing required fields');
                showNotification('Please fill in all required fields', 'error');
                return;
            }
            
            console.log(`📝 Submitting: Request ${requestId}, Decision: ${decision}`);
            
            try {
                // Show loading state on submit button
                const submitBtn = e.target.querySelector('button[type="submit"]');
                const originalText = submitBtn.innerHTML;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
                submitBtn.disabled = true;
                
                // Make API request
                const response = await fetch('/hr/approve-training-request', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    credentials: 'include',
                    body: JSON.stringify({
                        requestId: requestId,
                        decision: decision,
                        remarks: remarks
                    })
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                
                if (result.success) {
                    const actionText = decision === 'approved' ? 'approved' : 'rejected';
                    console.log(`✅ Request ${requestId} ${actionText} successfully`);
                    
                    showNotification(`Training request ${actionText} successfully!`, 'success');
                    closeApprovalModal();
                    
                    // Reload pending requests to reflect changes
                    await loadPendingRequests();
                    
                } else {
                    throw new Error(result.message || 'Failed to process request');
                }
                
                // Reset button state
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
                
            } catch (error) {
                console.error('❌ Error processing approval:', error);
                showNotification('Error processing request: ' + error.message, 'error');
                
                // Reset button state
                const submitBtn = e.target.querySelector('button[type="submit"]');
                if (submitBtn) {
                    submitBtn.innerHTML = '<i class="fas fa-check"></i> Submit Decision';
                    submitBtn.disabled = false;
                }
            }
        }

        // ============================================================================
        // REPLACE: showRequestDetails() - ACTUAL IMPLEMENTATION
        // ============================================================================
        function showRequestDetails(requestId) {
            const request = pendingRequests.find(r => r.requestId == requestId);
            if (!request) {
                console.error('❌ Request not found:', requestId);
                showNotification('Request not found', 'error');
                return;
            }
            
            console.log('📋 Showing details for request:', requestId);
            
            // Create detailed view modal HTML
            const detailsHtml = generateRequestDetailsModal(request);
            
            // Remove existing modal if any
            const existingModal = document.getElementById('requestDetailsModal');
            if (existingModal) {
                existingModal.remove();
            }
            
            // Add modal to body
            document.body.insertAdjacentHTML('beforeend', detailsHtml);
            
            console.log('✅ Request details modal displayed');
        }

        // ============================================================================
        // NEW FUNCTION: generateRequestDetailsModal()
        // ============================================================================
        function generateRequestDetailsModal(request) {
            return `
                <div class="modal-overlay" id="requestDetailsModal" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000; align-items: center; justify-content: center;">
                    <div class="modal-content" style="background: white; border-radius: 12px; max-width: 800px; width: 90%; max-height: 90vh; overflow: hidden; position: relative;">
                        <div class="modal-header" style="padding: 20px 20px 0 20px; border-bottom: 1px solid #e5e7eb;">
                            <h2 class="modal-title" style="margin: 0 0 15px 0; color: #1f2937;">Training Request Details</h2>
                            <button type="button" class="close-btn" onclick="closeRequestDetailsModal()" 
                                    style="position: absolute; top: 15px; right: 20px; background: none; border: none; font-size: 24px; cursor: pointer; color: #6b7280; padding: 5px;">&times;</button>
                        </div>
                        
                        <div style="max-height: 60vh; overflow-y: auto; padding: 20px;">
                            <div style="margin-bottom: 20px;">
                                <h4 style="margin: 0 0 20px 0; color: #1f2937;">${request.employeeName} - ${request.trainingName}</h4>
                                
                                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;">
                                    <div>
                                        <h5 style="color: #334155; margin-bottom: 10px; font-size: 16px;">Employee Information</h5>
                                        <p style="margin: 5px 0;"><strong>Name:</strong> ${request.employeeName}</p>
                                        <p style="margin: 5px 0;"><strong>Department:</strong> ${request.department}</p>
                                        <p style="margin: 5px 0;"><strong>Job Title:</strong> ${request.jobTitle}</p>
                                        <p style="margin: 5px 0;"><strong>Department ID:</strong> ${request.departmentId}</p>
                                    </div>
                                    <div>
                                        <h5 style="color: #334155; margin-bottom: 10px; font-size: 16px;">Training Information</h5>
                                        <p style="margin: 5px 0;"><strong>Training:</strong> ${request.trainingName}</p>
                                        <p style="margin: 5px 0;"><strong>Cost:</strong> ₱${request.cost.toLocaleString()}</p>
                                        <p style="margin: 5px 0;"><strong>Duration:</strong> ${request.duration || 0} hours</p>
                                        <p style="margin: 5px 0;"><strong>Mode:</strong> ${request.isOnlineArrangement ? 'Online' : 'Onsite'}</p>
                                        <p style="margin: 5px 0;"><strong>Requested:</strong> ${new Date(request.requestDate).toLocaleDateString()}</p>
                                    </div>
                                </div>
                                
                                ${!request.isOnlineArrangement ? `
                                <div style="background: #fef3c7; padding: 15px; border-radius: 8px; margin: 15px 0; border-left: 4px solid #f59e0b;">
                                    <h5 style="margin: 0 0 10px 0; color: #92400e;">📍 Training Location</h5>
                                    <p style="margin: 0; font-weight: 600;">${request.address || 'Address not provided'}</p>
                                    <p style="margin: 5px 0 0 0; color: #92400e;">${request.country || 'Country not provided'}</p>
                                </div>
                                ` : ''}
                                
                                <div style="background: #f8fafc; padding: 15px; border-radius: 8px; margin: 15px 0;">
                                    <h5 style="margin: 0 0 10px 0; color: #334155;">📚 Training Description</h5>
                                    <p style="margin: 0; color: #64748b; line-height: 1.5;">${request.trainingDesc || 'No description provided'}</p>
                                </div>
                                
                                <div style="background: #f0f9ff; padding: 15px; border-radius: 8px; border-left: 4px solid #3b82f6; margin: 15px 0;">
                                    <h5 style="margin: 0 0 10px 0; color: #1e40af;">👨‍💼 Line Manager Endorsement</h5>
                                    <p style="margin: 0; color: #64748b; font-style: italic; line-height: 1.5;">
                                        "${request.lineManagerRemarks || 'No specific remarks provided by line manager'}"
                                    </p>
                                </div>
                                
                                <div style="background: ${request.budgetSufficient ? '#f0fdf4' : '#fef2f2'}; padding: 15px; border-radius: 8px; border-left: 4px solid ${request.budgetSufficient ? '#10b981' : '#ef4444'}; margin: 15px 0;">
                                    <h5 style="margin: 0 0 10px 0; color: ${request.budgetSufficient ? '#166534' : '#dc2626'};">
                                        ${request.budgetSufficient ? '💰 Budget Analysis - Available' : '⚠️ Budget Analysis - Insufficient'}
                                    </h5>
                                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                                        <div>
                                            <p style="margin: 5px 0;"><strong>Training Cost:</strong> ₱${request.cost.toLocaleString()}</p>
                                            <p style="margin: 5px 0;"><strong>Available Budget:</strong> ₱${request.availableBudget.toLocaleString()}</p>
                                        </div>
                                        <div>
                                            <p style="margin: 5px 0;"><strong>Status:</strong> 
                                                <span style="color: ${request.budgetSufficient ? '#10b981' : '#ef4444'}; font-weight: 600;">
                                                    ${request.budgetSufficient ? 'Budget Available' : 'Insufficient Budget'}
                                                </span>
                                            </p>
                                            ${!request.budgetSufficient ? `
                                                <p style="margin: 5px 0; color: #dc2626;"><strong>Shortage:</strong> ₱${(request.cost - request.availableBudget).toLocaleString()}</p>
                                            ` : `
                                                <p style="margin: 5px 0; color: #10b981;"><strong>Remaining After:</strong> ₱${(request.availableBudget - request.cost).toLocaleString()}</p>
                                            `}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="modal-actions" style="padding: 20px; border-top: 1px solid #e5e7eb; display: flex; gap: 10px; justify-content: flex-end;">
                            <button type="button" class="btn-secondary" onclick="closeRequestDetailsModal()" 
                                    style="padding: 10px 20px; border: 1px solid #d1d5db; background: white; color: #374151; border-radius: 6px; cursor: pointer;">
                                Close
                            </button>
                            <button type="button" class="btn-primary" onclick="closeRequestDetailsModal(); openApprovalModal('${request.requestId}')"
                                    style="padding: 10px 20px; background: #3b82f6; color: white; border: none; border-radius: 6px; cursor: pointer;">
                                <i class="fas fa-gavel"></i> Review & Decide
                            </button>
                        </div>
                    </div>
                </div>
            `;
        }

        // ============================================================================
        // NEW FUNCTION: closeRequestDetailsModal()
        // ============================================================================
        function closeRequestDetailsModal() {
            console.log('❌ Closing request details modal...');
            
            const modal = document.getElementById('requestDetailsModal');
            if (modal) {
                modal.remove();
                console.log('✅ Request details modal closed');
            }
        }

        // ============================================================================
        // GLOBAL FUNCTION EXPORTS FOR HTML ONCLICK HANDLERS
        // ============================================================================
        window.openApprovalModal = openApprovalModal;
        window.closeApprovalModal = closeApprovalModal;
        window.showRequestDetails = showRequestDetails;
        window.closeRequestDetailsModal = closeRequestDetailsModal;

        console.log('✅ Phase 3: Approval Modal Functionality implemented');

        // ============================================================================
        // REPLACE: loadBudgetData() - ACTUAL IMPLEMENTATION
        // ============================================================================
        async function loadBudgetData() {
            try {
                console.log('🏢 Loading HR budget data...');
                
                // Show loading state
                showBudgetLoading();
                
                const response = await fetch('/hr/budget-overview', {
                    method: 'GET',
                    credentials: 'include',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                
                if (result.success) {
                    budgetData = result.data;
                    filteredDepartments = [...budgetData.departments];
                    
                    console.log('✅ Budget data loaded:', budgetData);
                    
                    renderBudgetOverview();
                    renderDepartmentTable();
                    
                    showNotification('Budget data loaded successfully', 'success');
                    
                } else {
                    throw new Error(result.message || 'Failed to load budget data');
                }
                
            } catch (error) {
                console.error('❌ Error loading budget data:', error);
                showBudgetError(error.message);
                showNotification('Failed to load budget data: ' + error.message, 'error');
            }
        }

        // ============================================================================
        // NEW FUNCTION: showBudgetLoading()
        // ============================================================================
        function showBudgetLoading() {
            console.log('🔄 Showing budget loading state...');
            
            const overviewGrid = document.getElementById('budgetOverviewGrid');
            const departmentTable = document.getElementById('departmentBudgetTable');
            
            if (overviewGrid) {
                overviewGrid.innerHTML = `
                    <div class="loading-state" style="grid-column: 1 / -1; text-align: center; padding: 40px;">
                        <i class="fas fa-spinner fa-spin loading-spinner" style="font-size: 32px; color: #3b82f6; margin-bottom: 15px;"></i>
                        <h3 style="margin: 0 0 10px 0; color: #475569;">Loading Budget Overview</h3>
                        <p style="margin: 0; color: #64748b;">Fetching department budget data...</p>
                    </div>
                `;
            }
            
            if (departmentTable) {
                departmentTable.innerHTML = `
                    <div class="loading-state" style="padding: 40px; text-align: center;">
                        <i class="fas fa-spinner fa-spin loading-spinner" style="font-size: 32px; color: #3b82f6; margin-bottom: 15px;"></i>
                        <h3 style="margin: 0 0 10px 0; color: #475569;">Loading Department Data</h3>
                        <p style="margin: 0; color: #64748b;">Please wait...</p>
                    </div>
                `;
            }
        }

        // ============================================================================
        // NEW FUNCTION: showBudgetError()
        // ============================================================================
        function showBudgetError(message) {
            console.log('❌ Showing budget error state...');
            
            const overviewGrid = document.getElementById('budgetOverviewGrid');
            const departmentTable = document.getElementById('departmentBudgetTable');
            
            const errorHTML = `
                <div style="text-align: center; padding: 40px; color: #64748b;">
                    <i class="fas fa-exclamation-triangle" style="font-size: 48px; margin-bottom: 15px; color: #ef4444;"></i>
                    <h3 style="margin: 0 0 10px 0; color: #475569;">Failed to Load Budget Data</h3>
                    <p style="margin: 0 0 15px 0;">${message}</p>
                    <button onclick="loadBudgetData()" class="btn btn-primary" 
                            style="padding: 10px 20px; background: #3b82f6; color: white; border: none; border-radius: 6px; cursor: pointer;">
                        <i class="fas fa-retry"></i> Try Again
                    </button>
                </div>
            `;
            
            if (overviewGrid) {
                overviewGrid.innerHTML = errorHTML;
            }
            
            if (departmentTable) {
                departmentTable.innerHTML = errorHTML;
            }
        }

        // ============================================================================
        // NEW FUNCTION: renderBudgetOverview()
        // ============================================================================
        function renderBudgetOverview() {
            console.log('📊 Rendering budget overview...');
            
            const overviewGrid = document.getElementById('budgetOverviewGrid');
            if (!overviewGrid || !budgetData) {
                console.warn('⚠️ Budget overview grid not found or no budget data');
                return;
            }
            
            const { totalAllocated, totalSpent, totalRemaining } = budgetData;
            const overallUtilization = totalAllocated > 0 ? Math.round((totalSpent / totalAllocated) * 100) : 0;
            
            overviewGrid.innerHTML = `
                <div class="budget-summary-card total" style="background: #f8fafc; padding: 20px; border-radius: 12px; text-align: center; border: 1px solid #e2e8f0;">
                    <div class="budget-summary-icon" style="font-size: 24px; color: #3b82f6; margin-bottom: 10px;">
                        <i class="fas fa-wallet"></i>
                    </div>
                    <div class="budget-summary-number" style="font-size: 28px; font-weight: 700; color: #1f2937; margin-bottom: 5px;">₱${totalAllocated.toLocaleString()}</div>
                    <div class="budget-summary-label" style="font-size: 14px; font-weight: 600; color: #374151; margin-bottom: 3px;">Total Budget</div>
                    <div class="budget-summary-sublabel" style="font-size: 12px; color: #64748b;">${budgetData.departments.length} departments</div>
                </div>
                
                <div class="budget-summary-card spent" style="background: #fef2f2; padding: 20px; border-radius: 12px; text-align: center; border: 1px solid #fecaca;">
                    <div class="budget-summary-icon" style="font-size: 24px; color: #dc2626; margin-bottom: 10px;">
                        <i class="fas fa-credit-card"></i>
                    </div>
                    <div class="budget-summary-number" style="font-size: 28px; font-weight: 700; color: #1f2937; margin-bottom: 5px;">₱${totalSpent.toLocaleString()}</div>
                    <div class="budget-summary-label" style="font-size: 14px; font-weight: 600; color: #374151; margin-bottom: 3px;">Total Spent</div>
                    <div class="budget-summary-sublabel" style="font-size: 12px; color: #64748b;">Training expenses</div>
                </div>
                
                <div class="budget-summary-card remaining" style="background: #f0fdf4; padding: 20px; border-radius: 12px; text-align: center; border: 1px solid #bbf7d0;">
                    <div class="budget-summary-icon" style="font-size: 24px; color: #059669; margin-bottom: 10px;">
                        <i class="fas fa-piggy-bank"></i>
                    </div>
                    <div class="budget-summary-number" style="font-size: 28px; font-weight: 700; color: #1f2937; margin-bottom: 5px;">₱${totalRemaining.toLocaleString()}</div>
                    <div class="budget-summary-label" style="font-size: 14px; font-weight: 600; color: #374151; margin-bottom: 3px;">Remaining Budget</div>
                    <div class="budget-summary-sublabel" style="font-size: 12px; color: #64748b;">Available funds</div>
                </div>
                
                <div class="budget-summary-card utilization" style="background: #fefbeb; padding: 20px; border-radius: 12px; text-align: center; border: 1px solid #fed7aa;">
                    <div class="budget-summary-icon" style="font-size: 24px; color: #d97706; margin-bottom: 10px;">
                        <i class="fas fa-chart-pie"></i>
                    </div>
                    <div class="budget-summary-number" style="font-size: 28px; font-weight: 700; color: #1f2937; margin-bottom: 5px;">${overallUtilization}%</div>
                    <div class="budget-summary-label" style="font-size: 14px; font-weight: 600; color: #374151; margin-bottom: 3px;">Overall Utilization</div>
                    <div class="budget-summary-sublabel" style="font-size: 12px; color: #64748b;">Budget usage</div>
                </div>
            `;
            
            console.log('✅ Budget overview rendered');
        }

        // ============================================================================
        // NEW FUNCTION: renderDepartmentTable()
        // ============================================================================
        function renderDepartmentTable() {
            console.log(`📋 Rendering department table with ${filteredDepartments.length} departments...`);
            
            const departmentTable = document.getElementById('departmentBudgetTable');
            if (!departmentTable || !filteredDepartments) {
                console.warn('⚠️ Department table element not found or no filtered departments');
                return;
            }
            
            if (filteredDepartments.length === 0) {
                departmentTable.innerHTML = `
                    <div style="text-align: center; padding: 40px; color: #64748b;">
                        <i class="fas fa-search" style="font-size: 48px; margin-bottom: 15px; color: #cbd5e1;"></i>
                        <h3 style="margin: 0 0 10px 0; color: #475569;">No Departments Found</h3>
                        <p style="margin: 0;">Try adjusting your filters or search criteria.</p>
                    </div>
                `;
                return;
            }
            
            const tableHTML = `
                <table style="width: 100%; border-collapse: collapse; background: white; border-radius: 8px; overflow: hidden; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
                    <thead>
                        <tr style="background: #f8fafc; border-bottom: 1px solid #e2e8f0;">
                            <th style="padding: 15px 12px; text-align: left; font-weight: 600; color: #374151; font-size: 14px;">Department</th>
                            <th style="padding: 15px 12px; text-align: right; font-weight: 600; color: #374151; font-size: 14px;">Budget Allocated</th>
                            <th style="padding: 15px 12px; text-align: right; font-weight: 600; color: #374151; font-size: 14px;">Amount Spent</th>
                            <th style="padding: 15px 12px; text-align: right; font-weight: 600; color: #374151; font-size: 14px;">Remaining</th>
                            <th style="padding: 15px 12px; text-align: center; font-weight: 600; color: #374151; font-size: 14px;">Utilization</th>
                            <th style="padding: 15px 12px; text-align: center; font-weight: 600; color: #374151; font-size: 14px;">Status</th>
                            <th style="padding: 15px 12px; text-align: center; font-weight: 600; color: #374151; font-size: 14px;">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${filteredDepartments.map(dept => {
                            const statusColors = {
                                good: { bg: '#dcfce7', color: '#166534', progress: '#10b981' },
                                warning: { bg: '#fef3c7', color: '#92400e', progress: '#f59e0b' },
                                critical: { bg: '#fef2f2', color: '#dc2626', progress: '#ef4444' }
                            };
                            const colors = statusColors[dept.status] || statusColors.good;
                            
                            return `
                                <tr onclick="showDepartmentDetails(${dept.departmentId})" 
                                    style="cursor: pointer; border-bottom: 1px solid #e2e8f0; transition: background-color 0.2s;"
                                    onmouseover="this.style.backgroundColor='#f8fafc'" 
                                    onmouseout="this.style.backgroundColor='white'">
                                    <td class="dept-name-cell" style="padding: 15px 12px;">
                                        <div style="font-weight: 600; color: #1f2937; margin-bottom: 2px;">${dept.departmentName}</div>
                                        <div style="font-size: 12px; color: #6b7280;">ID: ${dept.departmentId}</div>
                                    </td>
                                    <td class="budget-amount" style="padding: 15px 12px; text-align: right; font-weight: 600; color: #1f2937;">₱${dept.allocated.toLocaleString()}</td>
                                    <td class="spent-amount" style="padding: 15px 12px; text-align: right; font-weight: 600; color: #dc2626;">₱${dept.spent.toLocaleString()}</td>
                                    <td class="remaining-amount" style="padding: 15px 12px; text-align: right; font-weight: 600; color: ${dept.remaining >= 0 ? '#059669' : '#dc2626'};">
                                        ₱${dept.remaining.toLocaleString()}
                                    </td>
                                    <td style="padding: 15px 12px; text-align: center;">
                                        <div style="width: 100px; height: 8px; background: #f1f5f9; border-radius: 4px; margin: 0 auto 5px; overflow: hidden;">
                                            <div style="width: ${Math.min(dept.utilization, 100)}%; height: 100%; background: ${colors.progress}; transition: width 0.3s;"></div>
                                        </div>
                                        <div style="font-size: 12px; font-weight: 600; color: #374151;">${dept.utilization}%</div>
                                    </td>
                                    <td style="padding: 15px 12px; text-align: center;">
                                        <span style="padding: 4px 8px; border-radius: 12px; font-size: 11px; font-weight: 600; background: ${colors.bg}; color: ${colors.color};">
                                            ${dept.status.charAt(0).toUpperCase() + dept.status.slice(1)}
                                        </span>
                                    </td>
                                    <td onclick="event.stopPropagation()" style="padding: 15px 12px; text-align: center;">
                                        <button onclick="showDepartmentDetails(${dept.departmentId})" 
                                                style="padding: 6px 10px; margin: 0 2px; background: #6b7280; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 11px;">
                                            <i class="fas fa-eye"></i> View
                                        </button>
                                        <button onclick="editDepartmentBudget(${dept.departmentId})"
                                                style="padding: 6px 10px; margin: 0 2px; background: #3b82f6; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 11px;">
                                            <i class="fas fa-edit"></i> Edit
                                        </button>
                                    </td>
                                </tr>
                            `;
                        }).join('')}
                    </tbody>
                </table>
            `;
            
            departmentTable.innerHTML = tableHTML;
            console.log('✅ Department table rendered');
        }

        // ============================================================================
        // NEW FUNCTION: filterDepartments()
        // ============================================================================
        function filterDepartments() {
            if (!budgetData || !budgetData.departments) {
                console.warn('⚠️ No budget data available for filtering');
                return;
            }
            
            const statusFilter = document.getElementById('statusFilter')?.value || '';
            const budgetRangeFilter = document.getElementById('budgetRangeFilter')?.value || '';
            const searchTerm = document.getElementById('departmentSearch')?.value.toLowerCase() || '';
            
            console.log('🔍 Filtering departments:', { statusFilter, budgetRangeFilter, searchTerm });
            
            filteredDepartments = budgetData.departments.filter(dept => {
                // Status filter
                if (statusFilter && dept.status !== statusFilter) {
                    return false;
                }
                
                // Budget range filter
                if (budgetRangeFilter) {
                    const budget = dept.allocated;
                    switch (budgetRangeFilter) {
                        case '0-50000':
                            if (budget < 0 || budget > 50000) return false;
                            break;
                        case '50000-100000':
                            if (budget < 50000 || budget > 100000) return false;
                            break;
                        case '100000-500000':
                            if (budget < 100000 || budget > 500000) return false;
                            break;
                        case '500000+':
                            if (budget < 500000) return false;
                            break;
                    }
                }
                
                // Search filter
                if (searchTerm && !dept.departmentName.toLowerCase().includes(searchTerm)) {
                    return false;
                }
                
                return true;
            });
            
            console.log(`✅ Filtered to ${filteredDepartments.length} departments`);
            renderDepartmentTable();
        }

        // ============================================================================
        // NEW FUNCTION: clearAllFilters()
        // ============================================================================
        function clearAllFilters() {
            console.log('🧹 Clearing all budget filters...');
            
            const statusFilter = document.getElementById('statusFilter');
            const budgetRangeFilter = document.getElementById('budgetRangeFilter');
            const departmentSearch = document.getElementById('departmentSearch');
            
            if (statusFilter) statusFilter.value = '';
            if (budgetRangeFilter) budgetRangeFilter.value = '';
            if (departmentSearch) departmentSearch.value = '';
            
            if (budgetData) {
                filteredDepartments = [...budgetData.departments];
                renderDepartmentTable();
            }
            
            showNotification('Budget filters cleared', 'info');
        }

        // ============================================================================
        // NEW FUNCTION: refreshBudgetData()
        // ============================================================================
        function refreshBudgetData() {
            console.log('🔄 Refreshing budget data...');
            showNotification('Refreshing budget data...', 'info');
            loadBudgetData();
        }


        // ============================================================================
        // GLOBAL FUNCTION EXPORTS FOR HTML ONCLICK HANDLERS
        // ============================================================================
        window.loadBudgetData = loadBudgetData;
        window.filterDepartments = filterDepartments;
        window.clearAllFilters = clearAllFilters;
        window.showDepartmentDetails = showDepartmentDetails;
        window.editDepartmentBudget = editDepartmentBudget;
        window.refreshBudgetData = refreshBudgetData;

        console.log('✅ Phase 4: Budget Management implemented');

        // ============================================================================
        // HR TRAINING APPROVAL DASHBOARD - PHASE 5: DEPARTMENT DETAILS & BUDGET EDITING
        // Replace the placeholder functions and add department management functionality
        // ============================================================================

        // ============================================================================
        // REPLACE: showDepartmentDetails() - ACTUAL IMPLEMENTATION
        // ============================================================================
        function showDepartmentDetails(departmentId) {
            console.log('🏢 Showing details for department:', departmentId);
            
            const department = budgetData.departments.find(d => d.departmentId === departmentId);
            if (!department) {
                console.error('❌ Department not found:', departmentId);
                showNotification('Department not found', 'error');
                return;
            }
            
            currentSelectedDepartment = department;
            
            // Update modal content
            populateDepartmentDetailsModal(department);
            
            // Show modal
            const modal = document.getElementById('departmentDetailsModal');
            if (modal) {
                modal.classList.add('show');
                console.log('✅ Department details modal displayed');
            } else {
                console.error('❌ Department details modal not found');
            }
        }

        // ============================================================================
        // NEW FUNCTION: populateDepartmentDetailsModal()
        // ============================================================================
        function populateDepartmentDetailsModal(department) {
            console.log('📝 Populating department details modal...');
            
            // Update basic information
            const modalDeptName = document.getElementById('modalDeptName');
            const modalDeptId = document.getElementById('modalDeptId');
            const modalFiscalYear = document.getElementById('modalFiscalYear');
            const modalEmployeeCount = document.getElementById('modalEmployeeCount');
            
            if (modalDeptName) modalDeptName.textContent = department.departmentName;
            if (modalDeptId) modalDeptId.textContent = department.departmentId;
            if (modalFiscalYear) modalFiscalYear.textContent = '2025';
            if (modalEmployeeCount) modalEmployeeCount.textContent = department.employeeCount || 'N/A';
            
            // Update budget summary
            const modalTotalBudget = document.getElementById('modalTotalBudget');
            const modalTotalSpent = document.getElementById('modalTotalSpent');
            const modalRemaining = document.getElementById('modalRemaining');
            const modalUtilization = document.getElementById('modalUtilization');
            
            if (modalTotalBudget) modalTotalBudget.textContent = `₱${department.allocated.toLocaleString()}`;
            if (modalTotalSpent) modalTotalSpent.textContent = `₱${department.spent.toLocaleString()}`;
            if (modalRemaining) modalRemaining.textContent = `₱${department.remaining.toLocaleString()}`;
            if (modalUtilization) modalUtilization.textContent = `${department.utilization}%`;
            
            // Update progress bar
            const progressBar = document.getElementById('modalProgressBar');
            if (progressBar) {
                const statusColors = {
                    good: '#10b981',
                    warning: '#f59e0b', 
                    critical: '#ef4444'
                };
                progressBar.style.width = `${Math.min(department.utilization, 100)}%`;
                progressBar.style.backgroundColor = statusColors[department.status] || statusColors.good;
            }
            
            const modalProgressText = document.getElementById('modalProgressText');
            const modalBudgetLimit = document.getElementById('modalBudgetLimit');
            if (modalProgressText) modalProgressText.textContent = `${department.utilization}% Used`;
            if (modalBudgetLimit) modalBudgetLimit.textContent = `₱${department.allocated.toLocaleString()}`;
            
            // Update status badge
            const statusBadge = document.getElementById('modalStatusBadge');
            if (statusBadge) {
                const statusColors = {
                    good: { bg: '#dcfce7', color: '#166534' },
                    warning: { bg: '#fef3c7', color: '#92400e' },
                    critical: { bg: '#fef2f2', color: '#dc2626' }
                };
                const colors = statusColors[department.status] || statusColors.good;
                statusBadge.style.backgroundColor = colors.bg;
                statusBadge.style.color = colors.color;
                statusBadge.textContent = department.status.charAt(0).toUpperCase() + department.status.slice(1);
            }
            
            // Update recommendations
            updateDepartmentRecommendations(department);
            
            // Load recent training requests for this department
            loadRecentTrainingRequests(department.departmentId);
        }

        // ============================================================================
        // NEW FUNCTION: updateDepartmentRecommendations()
        // ============================================================================
        function updateDepartmentRecommendations(department) {
            const recommendationsList = document.getElementById('modalRecommendations');
            if (!recommendationsList) return;
            
            const recommendations = [];
            
            if (department.status === 'good') {
                recommendations.push('Budget is well-managed with good utilization');
                recommendations.push('Consider planning additional training opportunities');
                if (department.utilization < 50) {
                    recommendations.push('Low utilization - encourage more training requests');
                }
            } else if (department.status === 'warning') {
                recommendations.push('Monitor spending closely to avoid budget overrun');
                recommendations.push('Review upcoming training requests carefully');
                recommendations.push('Consider reallocating budget if needed');
            } else if (department.status === 'critical') {
                recommendations.push('⚠️ Budget is critically low - immediate attention required');
                recommendations.push('Suspend non-essential training requests');
                recommendations.push('Consider emergency budget reallocation');
                recommendations.push('Review all pending training costs');
            }
            
            recommendationsList.innerHTML = recommendations.map(rec => `<li>${rec}</li>`).join('');
        }

        // ============================================================================
        // NEW FUNCTION: loadRecentTrainingRequests()
        // ============================================================================
        function loadRecentTrainingRequests(departmentId) {
            console.log('📋 Loading recent training requests for department:', departmentId);
            
            const recentTrainingsList = document.getElementById('recentTrainingsList');
            if (!recentTrainingsList) return;
            
            // Filter recent requests from pending requests and approval history
            const departmentRequests = [
                ...pendingRequests.filter(req => req.departmentId === departmentId),
                ...(approvalHistory || []).filter(req => req.departmentId === departmentId)
            ].slice(0, 5); // Show last 5 requests
            
            if (departmentRequests.length === 0) {
                recentTrainingsList.innerHTML = `
                    <div style="text-align: center; padding: 20px; color: #64748b;">
                        <i class="fas fa-inbox" style="font-size: 24px; margin-bottom: 10px; color: #cbd5e1;"></i>
                        <p style="margin: 0;">No recent training requests found</p>
                    </div>
                `;
                return;
            }
            
            const requestsHtml = departmentRequests.map(request => {
                const isPending = pendingRequests.some(pr => pr.requestId === request.requestId);
                const statusColor = isPending ? '#f59e0b' : (request.isApproved ? '#10b981' : '#ef4444');
                const statusText = isPending ? 'Pending' : (request.isApproved ? 'Approved' : 'Rejected');
                
                return `
                    <div style="padding: 12px; border: 1px solid #e5e7eb; border-radius: 6px; margin-bottom: 8px;">
                        <div style="display: flex; justify-content: between; align-items: start;">
                            <div style="flex: 1;">
                                <div style="font-weight: 600; color: #1f2937; margin-bottom: 4px;">${request.employeeName}</div>
                                <div style="font-size: 14px; color: #64748b; margin-bottom: 4px;">${request.trainingName}</div>
                                <div style="font-size: 12px; color: #64748b;">
                                    Cost: ₱${request.cost.toLocaleString()} • 
                                    ${new Date(request.requestDate).toLocaleDateString()}
                                </div>
                            </div>
                            <div style="text-align: right;">
                                <span style="padding: 2px 6px; border-radius: 12px; font-size: 11px; font-weight: 600; 
                                            background-color: ${statusColor}20; color: ${statusColor};">
                                    ${statusText}
                                </span>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
            
            recentTrainingsList.innerHTML = requestsHtml;
        }

        // ============================================================================
        // NEW FUNCTION: closeDepartmentDetailsModal()
        // ============================================================================
        function closeDepartmentDetailsModal() {
            console.log('❌ Closing department details modal...');
            
            const modal = document.getElementById('departmentDetailsModal');
            if (modal) {
                modal.classList.remove('show');
            }
            
            currentSelectedDepartment = null;
            console.log('✅ Department details modal closed');
        }

        // ============================================================================
        // REPLACE: editDepartmentBudget() - ACTUAL IMPLEMENTATION
        // ============================================================================
        function editDepartmentBudget(departmentId) {
            const department = departmentId ? 
                budgetData.departments.find(d => d.departmentId === departmentId) : 
                currentSelectedDepartment;
            
            if (!department) {
                console.error('❌ Department not found for editing:', departmentId);
                showNotification('Department not found', 'error');
                return;
            }
            
            console.log('✏️ Opening budget edit modal for department:', department.departmentName);
            
            // Close details modal if open
            closeDepartmentDetailsModal();
            
            // Populate edit form
            const editDeptName = document.getElementById('editDeptName');
            const editDeptId = document.getElementById('editDeptId');
            const editBudgetAmount = document.getElementById('editBudgetAmount');
            const editFiscalYear = document.getElementById('editFiscalYear');
            const editBudgetNotes = document.getElementById('editBudgetNotes');
            
            if (editDeptName) editDeptName.value = department.departmentName;
            if (editDeptId) editDeptId.value = department.departmentId;
            if (editBudgetAmount) editBudgetAmount.value = department.allocated;
            if (editFiscalYear) editFiscalYear.value = '2025';
            if (editBudgetNotes) editBudgetNotes.value = '';
            
            // Show edit modal
            const editModal = document.getElementById('editBudgetModal');
            if (editModal) {
                editModal.classList.add('show');
                console.log('✅ Budget edit modal displayed');
            } else {
                console.error('❌ Budget edit modal not found');
            }
        }

        // ============================================================================
        // NEW FUNCTION: closeEditBudgetModal()
        // ============================================================================
        function closeEditBudgetModal() {
            console.log('❌ Closing budget edit modal...');
            
            const modal = document.getElementById('editBudgetModal');
            if (modal) {
                modal.classList.remove('show');
            }
            
            // Reset form
            const form = document.getElementById('editBudgetForm');
            if (form) {
                form.reset();
            }
            
            console.log('✅ Budget edit modal closed');
        }

        // ============================================================================
        // REPLACE: handleEditBudgetSubmit() - ACTUAL IMPLEMENTATION
        // ============================================================================
        async function handleEditBudgetSubmit(e) {
            e.preventDefault();
            
            console.log('💰 Processing budget edit submission...');
            
            // Get form data
            const departmentId = document.getElementById('editDeptId')?.value;
            const budgetAmount = parseFloat(document.getElementById('editBudgetAmount')?.value);
            const fiscalYear = document.getElementById('editFiscalYear')?.value;
            const notes = document.getElementById('editBudgetNotes')?.value;
            
            // Validate inputs
            if (!departmentId || !budgetAmount || budgetAmount < 0) {
                showNotification('Please enter a valid budget amount', 'error');
                return;
            }
            
            console.log(`📝 Updating budget for department ${departmentId}: ₱${budgetAmount.toLocaleString()}`);
            
            try {
                // Show loading state
                const submitBtn = e.target.querySelector('button[type="submit"]');
                const originalText = submitBtn.innerHTML;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
                submitBtn.disabled = true;
                
                // Make API request
                const response = await fetch('/hr/update-budget', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    credentials: 'include',
                    body: JSON.stringify({
                        departmentId: parseInt(departmentId),
                        amount: budgetAmount,
                        fiscalYear: fiscalYear,
                        notes: notes
                    })
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                
                if (result.success) {
                    console.log('✅ Budget updated successfully');
                    
                    showNotification('Budget updated successfully!', 'success');
                    closeEditBudgetModal();
                    
                    // Refresh budget data to show updated information
                    await loadBudgetData();
                    
                } else {
                    throw new Error(result.message || 'Failed to update budget');
                }
                
                // Reset button
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
                
            } catch (error) {
                console.error('❌ Error updating budget:', error);
                showNotification('Error updating budget: ' + error.message, 'error');
                
                // Reset button
                const submitBtn = e.target.querySelector('button[type="submit"]');
                if (submitBtn) {
                    submitBtn.innerHTML = '<i class="fas fa-save"></i> Save Budget';
                    submitBtn.disabled = false;
                }
            }
        }

        // ============================================================================
        // NEW FUNCTION: exportBudgetReport()
        // ============================================================================
        function exportBudgetReport(format) {
            console.log(`📊 Exporting budget report in ${format} format...`);
            
            if (!budgetData || !budgetData.departments) {
                showNotification('No budget data available to export', 'error');
                return;
            }
            
            if (format === 'excel') {
                exportBudgetToExcel();
            } else if (format === 'pdf') {
                exportBudgetToPDF();
            } else {
                showNotification('Unsupported export format', 'error');
            }
        }

        // ============================================================================
        // NEW FUNCTION: exportBudgetToExcel()
        // ============================================================================
        function exportBudgetToExcel() {
            console.log('📗 Exporting budget data to Excel...');
            
            // Create CSV data
            const headers = ['Department ID', 'Department Name', 'Budget Allocated', 'Amount Spent', 'Remaining', 'Utilization %', 'Status'];
            const rows = budgetData.departments.map(dept => [
                dept.departmentId,
                dept.departmentName,
                dept.allocated,
                dept.spent,
                dept.remaining,
                dept.utilization,
                dept.status
            ]);
            
            const csvContent = [headers, ...rows]
                .map(row => row.map(cell => `"${cell}"`).join(','))
                .join('\n');
            
            // Download CSV file
            const blob = new Blob([csvContent], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `budget-report-${new Date().toISOString().split('T')[0]}.csv`;
            link.click();
            window.URL.revokeObjectURL(url);
            
            showNotification('Budget report exported to Excel format', 'success');
        }

        // ============================================================================
        // NEW FUNCTION: exportBudgetToPDF()
        // ============================================================================
        function exportBudgetToPDF() {
            console.log('📕 Exporting budget data to PDF...');
            
            // This would require jsPDF library - for now show notification
            showNotification('PDF export functionality requires jsPDF library', 'warning');
            
            // If jsPDF is available, uncomment this:
            /*
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            
            doc.text('Training Budget Report', 20, 20);
            doc.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 30);
            
            // Add table data using autoTable plugin if available
            if (doc.autoTable) {
                doc.autoTable({
                    head: [['Department', 'Budget', 'Spent', 'Remaining', 'Utilization', 'Status']],
                    body: budgetData.departments.map(dept => [
                        dept.departmentName,
                        `₱${dept.allocated.toLocaleString()}`,
                        `₱${dept.spent.toLocaleString()}`,
                        `₱${dept.remaining.toLocaleString()}`,
                        `${dept.utilization}%`,
                        dept.status
                    ]),
                    startY: 40
                });
            }
            
            doc.save(`budget-report-${new Date().toISOString().split('T')[0]}.pdf`);
            showNotification('Budget report exported to PDF', 'success');
            */
        }

        // ============================================================================
        // GLOBAL FUNCTION EXPORTS FOR HTML ONCLICK HANDLERS
        // ============================================================================
        window.showDepartmentDetails = showDepartmentDetails;
        window.closeDepartmentDetailsModal = closeDepartmentDetailsModal;
        window.editDepartmentBudget = editDepartmentBudget;
        window.closeEditBudgetModal = closeEditBudgetModal;
        window.handleEditBudgetSubmit = handleEditBudgetSubmit;
        window.exportBudgetReport = exportBudgetReport;

        console.log('✅ Phase 5: Department Details & Budget Editing implemented');

        // ============================================================================
        // REPLACE: loadApprovalHistory() - ACTUAL IMPLEMENTATION
        // ============================================================================
        async function loadApprovalHistory() {
            try {
                console.log('📋 Loading approval history...');
                
                // Show loading state
                showApprovalHistoryLoading();
                
                const response = await fetch('/hr/training-approval-history', {
                    method: 'GET',
                    credentials: 'include',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                
                if (result.success) {
                    approvalHistory = result.data || [];
                    console.log(`✅ Loaded ${approvalHistory.length} approval records`);
                    
                    renderApprovalHistory();
                    showNotification(`Loaded ${approvalHistory.length} approval records`, 'success');
                    
                } else {
                    throw new Error(result.message || 'Failed to load approval history');
                }
                
            } catch (error) {
                console.error('❌ Error loading approval history:', error);
                showApprovalHistoryError(error.message);
                showNotification('Failed to load approval history: ' + error.message, 'error');
            }
        }

        // ============================================================================
        // NEW FUNCTION: showApprovalHistoryLoading()
        // ============================================================================
        function showApprovalHistoryLoading() {
            console.log('🔄 Showing approval history loading state...');
            
            const historyList = document.getElementById('approvalHistoryList');
            if (historyList) {
                historyList.innerHTML = `
                    <div class="loading-state" style="text-align: center; padding: 40px;">
                        <i class="fas fa-spinner fa-spin loading-spinner" style="font-size: 32px; color: #3b82f6; margin-bottom: 15px;"></i>
                        <h3 style="margin: 0 0 10px 0; color: #475569;">Loading Approval History</h3>
                        <p style="margin: 0; color: #64748b;">Fetching training approval records...</p>
                    </div>
                `;
            }
        }

        // ============================================================================
        // NEW FUNCTION: showApprovalHistoryError()
        // ============================================================================
        function showApprovalHistoryError(message) {
            console.log('❌ Showing approval history error state...');
            
            const historyList = document.getElementById('approvalHistoryList');
            if (historyList) {
                historyList.innerHTML = `
                    <div style="text-align: center; padding: 40px; color: #64748b;">
                        <i class="fas fa-exclamation-triangle" style="font-size: 48px; margin-bottom: 15px; color: #ef4444;"></i>
                        <h3 style="margin: 0 0 10px 0; color: #475569;">Failed to Load History</h3>
                        <p style="margin: 0 0 15px 0;">Error: ${message}</p>
                        <button onclick="loadApprovalHistory()" class="btn btn-primary" 
                                style="padding: 10px 20px; background: #3b82f6; color: white; border: none; border-radius: 6px; cursor: pointer;">
                            <i class="fas fa-retry"></i> Try Again
                        </button>
                    </div>
                `;
            }
        }

        // ============================================================================
        // NEW FUNCTION: renderApprovalHistory()
        // ============================================================================
        function renderApprovalHistory() {
            console.log(`🎨 Rendering ${approvalHistory.length} approval history records...`);
            
            const historyList = document.getElementById('approvalHistoryList');
            if (!historyList) {
                console.warn('⚠️ Approval history list element not found');
                return;
            }
            
            if (approvalHistory.length === 0) {
                historyList.innerHTML = `
                    <div style="text-align: center; padding: 40px; color: #64748b;">
                        <i class="fas fa-history" style="font-size: 48px; margin-bottom: 15px; color: #cbd5e1;"></i>
                        <h3 style="margin: 0 0 10px 0; color: #475569;">No Approval History</h3>
                        <p style="margin: 0;">No training approvals have been processed yet.</p>
                    </div>
                `;
                return;
            }
            
            const historyHtml = approvalHistory.map(record => {
                const isApproved = record.isApproved;
                const statusClass = isApproved ? 'approved' : 'rejected';
                const statusText = isApproved ? 'Approved' : 'Rejected';
                const statusIcon = isApproved ? 'fa-check-circle' : 'fa-times-circle';
                const statusColor = isApproved ? '#10b981' : '#ef4444';
                
                return `
                    <div class="training-request-item" style="margin-bottom: 15px; background: white; border-radius: 8px; padding: 20px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
                        <div class="request-header" style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 15px;">
                            <div class="request-info" style="flex: 1;">
                                <h4 style="margin: 0 0 8px 0; color: #1f2937; font-size: 18px;">${record.employeeName}</h4>
                                <div class="request-meta" style="color: #64748b; font-size: 14px; line-height: 1.5;">
                                    ${record.department} • ${record.jobTitle}<br>
                                    Training: <strong style="color: #1f2937;">${record.trainingName}</strong><br>
                                    Decision Date: ${new Date(record.hrDecisionDate).toLocaleDateString()}<br>
                                    Cost: ₱${record.cost.toLocaleString()}
                                    ${record.duration ? ` • ${record.duration} hours` : ''}
                                </div>
                            </div>
                            <div class="request-actions" style="text-align: right;">
                                <div style="margin-bottom: 10px;">
                                    <i class="fas ${statusIcon}" style="color: ${statusColor}; margin-right: 5px;"></i>
                                    <span style="color: ${statusColor}; font-weight: 600; font-size: 16px;">${statusText}</span>
                                </div>
                                <span class="status-badge" style="padding: 4px 8px; border-radius: 12px; font-size: 11px; font-weight: 600; 
                                                                background-color: ${statusColor}20; color: ${statusColor};">
                                    ${record.status || 'Completed'}
                                </span>
                            </div>
                        </div>
                        
                        <div class="request-details" style="display: flex; gap: 20px; align-items: start; background: #f8fafc; padding: 15px; border-radius: 6px;">
                            <div style="flex: 1;">
                                <div style="font-size: 14px; margin-bottom: 5px; font-weight: 600; color: #374151;">HR Decision:</div>
                                <div style="font-size: 13px; color: ${statusColor}; font-weight: 600;">
                                    ${statusText}
                                </div>
                                <div style="font-size: 11px; color: #64748b; margin-top: 2px;">
                                    ${new Date(record.hrDecisionDate).toLocaleDateString()} at ${new Date(record.hrDecisionDate).toLocaleTimeString()}
                                </div>
                            </div>
                            
                            <div style="flex: 2; margin: 0 15px;">
                                <div style="font-size: 14px; margin-bottom: 5px; font-weight: 600; color: #374151;">HR Remarks:</div>
                                <div style="font-size: 13px; color: #64748b; font-style: italic; max-height: 60px; overflow: hidden; line-height: 1.4;">
                                    "${record.hrDecisionRemarks || 'No remarks provided'}"
                                </div>
                            </div>
                            
                            <div style="flex: 1;">
                                <div style="font-size: 14px; margin-bottom: 5px; font-weight: 600; color: #374151;">Training Mode:</div>
                                ${record.isOnlineArrangement ? 
                                    '<div style="font-size: 11px; color: #07ACB9; margin-top: 5px;"><i class="fas fa-laptop"></i> Online Training</div>' : 
                                    '<div style="font-size: 11px; color: #f59e0b; margin-top: 5px;"><i class="fas fa-map-marker-alt"></i> Onsite Training</div>'
                                }
                                <div style="font-size: 11px; color: #64748b; margin-top: 5px;">
                                    Request ID: ${record.requestId || 'N/A'}
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
            
            historyList.innerHTML = historyHtml;
            console.log('✅ Approval history rendered successfully');
        }

        // ============================================================================
        // NEW FUNCTION: applyHistoryFilters()
        // ============================================================================
        function applyHistoryFilters() {
            console.log('🔍 Applying history filters...');
            
            const startDate = document.getElementById('historyStartDate')?.value;
            const endDate = document.getElementById('historyEndDate')?.value;
            const statusFilter = document.getElementById('historyStatusFilter')?.value;
            
            console.log('Filter criteria:', { startDate, endDate, statusFilter });
            
            let filteredHistory = [...approvalHistory];
            
            // Apply date filters
            if (startDate) {
                const startDateTime = new Date(startDate);
                filteredHistory = filteredHistory.filter(record => 
                    new Date(record.hrDecisionDate) >= startDateTime
                );
                console.log(`After start date filter: ${filteredHistory.length} records`);
            }
            
            if (endDate) {
                const endDateTime = new Date(endDate + 'T23:59:59'); // Include full end date
                filteredHistory = filteredHistory.filter(record => 
                    new Date(record.hrDecisionDate) <= endDateTime
                );
                console.log(`After end date filter: ${filteredHistory.length} records`);
            }
            
            // Apply status filter (maps to approval status)
            if (statusFilter) {
                if (statusFilter === 'In Progress') {
                    // Show approved requests
                    filteredHistory = filteredHistory.filter(record => record.isApproved === true);
                } else if (statusFilter === 'Cancelled') {
                    // Show rejected requests
                    filteredHistory = filteredHistory.filter(record => record.isApproved === false);
                }
                console.log(`After status filter: ${filteredHistory.length} records`);
            }
            
            // Temporarily replace history for rendering
            const originalHistory = [...approvalHistory];
            approvalHistory = filteredHistory;
            renderApprovalHistory();
            approvalHistory = originalHistory;
            
            showNotification(`Found ${filteredHistory.length} records matching your criteria`, 'info');
            console.log(`✅ History filtered to ${filteredHistory.length} records`);
        }

        // ============================================================================
        // NEW FUNCTION: refreshApprovalHistory()
        // ============================================================================
        function refreshApprovalHistory() {
            console.log('🔄 Refreshing approval history...');
            showNotification('Refreshing approval history...', 'info');
            loadApprovalHistory();
        }

        // ============================================================================
        // REPLACE: filterRequests() - ACTUAL IMPLEMENTATION (Complete pending requests filtering)
        // ============================================================================
        function filterRequests() {
            if (!pendingRequests || pendingRequests.length === 0) {
                console.warn('⚠️ No pending requests available for filtering');
                return;
            }
            
            const searchTerm = document.getElementById('requestSearch')?.value.toLowerCase() || '';
            const departmentFilter = document.getElementById('departmentFilter')?.value || '';
            const costRangeFilter = document.getElementById('costRangeFilter')?.value || '';
            
            console.log('🔍 Filtering pending requests:', { searchTerm, departmentFilter, costRangeFilter });
            
            filteredRequests = pendingRequests.filter(request => {
                // Search filter - check multiple fields
                if (searchTerm) {
                    const searchableText = `${request.employeeName} ${request.department} ${request.trainingName} ${request.jobTitle}`.toLowerCase();
                    if (!searchableText.includes(searchTerm)) {
                        return false;
                    }
                }
                
                // Department filter
                if (departmentFilter && request.department !== departmentFilter) {
                    return false;
                }
                
                // Cost range filter
                if (costRangeFilter) {
                    const cost = request.cost;
                    switch (costRangeFilter) {
                        case '0-10000':
                            if (cost < 0 || cost > 10000) return false;
                            break;
                        case '10000-50000':
                            if (cost < 10000 || cost > 50000) return false;
                            break;
                        case '50000-100000':
                            if (cost < 50000 || cost > 100000) return false;
                            break;
                        case '100000+':
                            if (cost < 100000) return false;
                            break;
                    }
                }
                
                return true;
            });
            
            console.log(`✅ Filtered to ${filteredRequests.length} of ${pendingRequests.length} requests`);
            renderPendingRequests();
        }

        // ============================================================================
        // NEW FUNCTION: clearFilters() - Clear pending requests filters
        // ============================================================================
        function clearFilters() {
            console.log('🧹 Clearing pending request filters...');
            
            const requestSearch = document.getElementById('requestSearch');
            const departmentFilter = document.getElementById('departmentFilter');
            const costRangeFilter = document.getElementById('costRangeFilter');
            
            if (requestSearch) requestSearch.value = '';
            if (departmentFilter) departmentFilter.value = '';
            if (costRangeFilter) costRangeFilter.value = '';
            
            // Reset to show all requests
            filteredRequests = [...pendingRequests];
            renderPendingRequests();
            
            showNotification('Filters cleared', 'info');
            console.log('✅ Pending request filters cleared');
        }

        // ============================================================================
        // NEW FUNCTION: clearHistoryFilters() - Clear history filters
        // ============================================================================
        function clearHistoryFilters() {
            console.log('🧹 Clearing history filters...');
            
            const historyStartDate = document.getElementById('historyStartDate');
            const historyEndDate = document.getElementById('historyEndDate');
            const historyStatusFilter = document.getElementById('historyStatusFilter');
            
            if (historyStartDate) historyStartDate.value = '';
            if (historyEndDate) historyEndDate.value = '';
            if (historyStatusFilter) historyStatusFilter.value = '';
            
            // Re-render original history
            renderApprovalHistory();
            
            showNotification('History filters cleared', 'info');
            console.log('✅ History filters cleared');
        }

        // ============================================================================
        // NEW FUNCTION: setDefaultHistoryDates() - Helper to set common date ranges
        // ============================================================================
        function setDefaultHistoryDates() {
            const historyStartDate = document.getElementById('historyStartDate');
            const historyEndDate = document.getElementById('historyEndDate');
            
            if (historyStartDate && historyEndDate) {
                // Set to current month by default
                const now = new Date();
                const firstDay = new Date(now.getFullYear(), now.getMonth(), 1);
                const lastDay = new Date(now.getFullYear(), now.getMonth() + 1, 0);
                
                historyStartDate.value = firstDay.toISOString().split('T')[0];
                historyEndDate.value = lastDay.toISOString().split('T')[0];
                
                console.log('📅 Default history date range set to current month');
            }
        }

        // ============================================================================
        // NEW FUNCTION: initializeHistoryFilters() - Set up history tab default state
        // ============================================================================
        function initializeHistoryFilters() {
            console.log('🔧 Initializing history filters...');
            
            // Set default date range when history tab is activated
            setDefaultHistoryDates();
            
            // Add event listeners for filter changes
            const historyStartDate = document.getElementById('historyStartDate');
            const historyEndDate = document.getElementById('historyEndDate');
            const historyStatusFilter = document.getElementById('historyStatusFilter');
            
            if (historyStartDate) {
                historyStartDate.addEventListener('change', applyHistoryFilters);
            }
            if (historyEndDate) {
                historyEndDate.addEventListener('change', applyHistoryFilters);
            }
            if (historyStatusFilter) {
                historyStatusFilter.addEventListener('change', applyHistoryFilters);
            }
            
            console.log('✅ History filters initialized');
        }

        // ============================================================================
        // GLOBAL FUNCTION EXPORTS FOR HTML ONCLICK HANDLERS
        // ============================================================================
        window.loadApprovalHistory = loadApprovalHistory;
        window.refreshApprovalHistory = refreshApprovalHistory;
        window.applyHistoryFilters = applyHistoryFilters;
        window.clearFilters = clearFilters;
        window.clearHistoryFilters = clearHistoryFilters;
        window.filterRequests = filterRequests;
        window.setDefaultHistoryDates = setDefaultHistoryDates;

        console.log('✅ Phase 6: Approval History & Filtering (Final Phase) implemented');
        // ============================================================================
        // ERROR HANDLING
        // ============================================================================
        window.addEventListener('error', function(e) {
            console.error('❌ JavaScript Error:', e.error);
            showNotification('An unexpected error occurred. Please refresh the page.', 'error');
        });

        window.addEventListener('unhandledrejection', function(e) {
            console.error('❌ Unhandled Promise Rejection:', e.reason);
            showNotification('An unexpected error occurred. Please try again.', 'error');
        });

        // ============================================================================
        // INITIALIZATION COMPLETE
        // ============================================================================
        console.log('📦 HR Training Approval Dashboard Core JavaScript loaded');
    </script>
</body>
</html>