<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HR Training & Development Tracker</title>
    <link rel="stylesheet" href="/css/sidebar.css">
    <link rel="stylesheet" href="/css/hr_pages.css">
    <link rel="stylesheet" href="/css/hr_trainingdevelopment_tracker.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style id="hr-notification-styles">
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        @keyframes slideOut {
            from { transform: translateX(0); opacity: 1; }
            to { transform: translateX(100%); opacity: 0; }
        }
        .hr-notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            border-radius: 8px;
            color: white;
            font-size: 14px;
            z-index: 30000;
            max-width: 350px;
            animation: slideIn 0.3s ease;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            font-family: 'Inter', sans-serif;
        }
    </style>
</head>
<body>
     <%- include('../../partials/hr_partials') %>
    
    <!-- Main content area -->
    <div class="main-content">
        <div class="dashboard-header">
            <h2>HR Training & Development Tracker</h2>
            <p>View and manage all required trainings for employees.</p>
        </div>

        <!-- ADD NEW TRAINING MODAL -->
        <div class="modal-overlay" id="addTrainingModal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Create New Training Course</h2>
                </div>
                
                <form id="addTrainingForm">
                    <!-- Training Course Name -->
                    <div class="form-group">
                        <label class="form-label">Training Course Name:</label>
                        <input type="text" class="form-input" id="courseName" placeholder="Enter training course name" required>
                    </div>

                    <!-- Description -->
                    <div class="form-group">
                        <label class="form-label">Description:</label>
                        <textarea class="form-textarea" id="courseDescription" placeholder="Enter detailed description of the training course" required></textarea>
                    </div>

                    <!-- REQUIRED TRAINING CHECKBOX -->
                    <div class="form-group">
                        <div class="checkbox-group">
                            <input type="checkbox" class="checkbox-input" id="isRequired">
                            <label class="checkbox-label" for="isRequired">
                                <i class="fas fa-exclamation-triangle" style="color: #dc2626; margin-right: 5px;"></i>
                                Mark as Required Training
                            </label>
                        </div>
                        <p style="font-size: 12px; color: #64748b; margin-top: 5px;">
                            Required trainings will be marked with a red badge and employees must complete them
                        </p>
                    </div>

                    <!-- Training Mode and Cost -->
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Training Mode:</label>
                            <select class="form-select" id="trainingMode" required>
                                <option value="">Select Training Mode</option>
                                <option value="online">Online</option>
                                <option value="onsite">Onsite</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">Cost (PHP):</label>
                            <input type="number" class="form-input" id="trainingCost" placeholder="Enter cost" min="0" step="0.01">
                        </div>
                    </div>

                    <!-- Location fields for onsite training -->
                    <div id="locationFields" class="location-fields" style="display: none;">
                        <div class="form-group">
                            <label class="form-label">Country:</label>
                            <select class="form-select" id="countryDropdown">
                                <option value="">Loading countries...</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">Address:</label>
                            <textarea class="form-textarea" id="addressField" rows="3" placeholder="Enter the full address for the training venue"></textarea>
                        </div>
                    </div>

                    <!-- EMPLOYEE ASSIGNMENT SECTION -->
                    <div class="form-group">
                        <label class="form-label">Assign to Employees:</label>
                        <div class="assignment-section">
                            <!-- Assignment Type Selector -->
                            <div class="assignment-type-selector">
                                <button type="button" class="assignment-type-btn active" data-type="individual">
                                    <i class="fas fa-user"></i> Individual Employees
                                </button>
                                <button type="button" class="assignment-type-btn" data-type="department">
                                    <i class="fas fa-building"></i> By Department
                                </button>
                                <button type="button" class="assignment-type-btn" data-type="jobPosition">
                                    <i class="fas fa-briefcase"></i> By Job Position
                                </button>
                                <button type="button" class="assignment-type-btn" data-type="all">
                                    <i class="fas fa-users"></i> All Employees
                                </button>
                            </div>

                            <!-- Department Filter -->
                            <div id="departmentFilter" class="assignment-filter-section">
                                <label class="form-label">Select Department:</label>
                                <select class="form-select" id="departmentSelect">
                                    <option value="">Loading departments...</option>
                                </select>
                            </div>

                            <!-- Job Position Filter -->
                            <div id="jobPositionFilter" class="assignment-filter-section">
                                <label class="form-label">Select Job Position:</label>
                                <select class="form-select" id="jobPositionSelect">
                                    <option value="">Loading job positions...</option>
                                </select>
                            </div>

                            <!-- Due Date -->
                            <div class="form-group">
                                <label class="form-label">Due Date (Optional):</label>
                                <input type="date" class="form-input" id="trainingDueDate">
                            </div>

                            <!-- Employee List -->
                            <div id="employeeListContainer" style="display: none;">
                                <label class="form-label">Select Employees:</label>
                                <div class="employee-list" id="employeeList">
                                    <div class="select-all-container">
                                        <label>
                                            <input type="checkbox" id="selectAllEmployees" class="employee-checkbox">
                                            Select All
                                        </label>
                                    </div>
                                    <div id="employeeItems">
                                        <!-- Employee items will be populated here -->
                                    </div>
                                </div>
                            </div>

                            <!-- Selected Count Display -->
                            <div id="selectedCountDisplay" style="margin-top: 10px; font-weight: 500; color: #07ACB9;">
                                Selected: <span id="selectedCount">0</span> employee(s)
                            </div>
                        </div>
                    </div>

                    <!-- Total Duration Display -->
                    <div class="duration-display">
                        <div class="duration-label">Total Duration to Complete</div>
                        <div class="duration-value"><span id="totalDuration">0</span> hours</div>
                    </div>

                    <!-- Activities Needed -->
                    <div class="form-group">
                        <label class="form-label">Activities Needed:</label>
                        <div class="add-item-section">
                            <div class="activity-form-grid">
                                <input type="text" class="form-input" id="moduleName" placeholder="Module name">
                                <input type="number" class="form-input" id="estimatedTime" placeholder="Estimated time (hours)" min="0" step="0.5">
                            </div>
                            <div class="activity-form-grid">
                                <select class="form-select" id="activityType">
                                    <option value="">Select type</option>
                                </select>
                                <input type="text" class="form-input" id="activityRemarks" placeholder="Remarks (optional)">
                            </div>
                            <button type="button" class="add-btn" onclick="addActivity()" style="width: 100%; margin-top: 10px;">Add Activity</button>
                            <div class="dynamic-list" id="activitiesList"></div>
                        </div>
                    </div>

                    <!-- Certificates -->
                    <div class="form-group">
                        <label class="form-label">Certificate/s:</label>
                        <div class="add-item-section">
                            <div class="activity-form-grid">
                                <input type="text" class="form-input" id="certificateTitle" placeholder="Enter certificate title">
                                <textarea class="form-input" id="certificateDescription" placeholder="Enter certificate description" style="min-height: 60px; resize: vertical;"></textarea>
                            </div>
                            <button type="button" class="add-btn" onclick="addCertificate()" style="width: 100%; margin-top: 10px;">Add Certificate</button>
                            <div class="dynamic-list" id="certificatesList"></div>
                        </div>
                    </div>

                    <div class="modal-actions">
                        <button type="button" class="btn-secondary" onclick="closeAddTrainingModal()">Cancel</button>
                        <button type="submit" class="btn-primary">Add New HR Training Course</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- RE-ASSIGN EXISTING TRAINING MODAL -->
        <div class="modal-overlay" id="reassignTrainingModal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Re-assign Existing Training</h2>
                </div>
                
                <form id="reassignTrainingForm">
                    <!-- Existing Training Selection -->
                    <div class="form-group">
                        <label class="form-label">Select Existing Training:</label>
                        <select class="form-select" id="existingTrainingSelect" required>
                            <option value="">Loading existing trainings...</option>
                        </select>
                        <div id="selectedTrainingInfo" style="margin-top: 10px; padding: 10px; background-color: #f8fafc; border-radius: 6px; display: none;">
                            <!-- Training info will be displayed here -->
                        </div>
                    </div>

                    <!-- Same assignment section as create training -->
                    <div class="form-group">
                        <label class="form-label">Assign to Employees:</label>
                        <div class="assignment-section">
                            <!-- Assignment Type Selector -->
                            <div class="assignment-type-selector">
                                <button type="button" class="assignment-type-btn active" data-type="individual" data-modal="reassign">
                                    <i class="fas fa-user"></i> Individual Employees
                                </button>
                                <button type="button" class="assignment-type-btn" data-type="department" data-modal="reassign">
                                    <i class="fas fa-building"></i> By Department
                                </button>
                                <button type="button" class="assignment-type-btn" data-type="jobPosition" data-modal="reassign">
                                    <i class="fas fa-briefcase"></i> By Job Position
                                </button>
                                <button type="button" class="assignment-type-btn" data-type="all" data-modal="reassign">
                                    <i class="fas fa-users"></i> All Employees
                                </button>
                            </div>

                            <!-- Department Filter -->
                            <div id="reassignDepartmentFilter" class="assignment-filter-section">
                                <label class="form-label">Select Department:</label>
                                <select class="form-select" id="reassignDepartmentSelect">
                                    <option value="">Loading departments...</option>
                                </select>
                            </div>

                            <!-- Job Position Filter -->
                            <div id="reassignJobPositionFilter" class="assignment-filter-section">
                                <label class="form-label">Select Job Position:</label>
                                <select class="form-select" id="reassignJobPositionSelect">
                                    <option value="">Loading job positions...</option>
                                </select>
                            </div>

                            <!-- Due Date -->
                            <div class="form-group">
                                <label class="form-label">Due Date (Optional):</label>
                                <input type="date" class="form-input" id="reassignTrainingDueDate">
                            </div>

                            <!-- Employee List -->
                            <div id="reassignEmployeeListContainer" style="display: none;">
                                <label class="form-label">Select Employees:</label>
                                <div class="employee-list" id="reassignEmployeeList">
                                    <div class="select-all-container">
                                        <label>
                                            <input type="checkbox" id="reassignSelectAllEmployees" class="employee-checkbox">
                                            Select All
                                        </label>
                                    </div>
                                    <div id="reassignEmployeeItems">
                                        <!-- Employee items will be populated here -->
                                    </div>
                                </div>
                            </div>

                            <!-- Selected Count Display -->
                            <div id="reassignSelectedCountDisplay" style="margin-top: 10px; font-weight: 500; color: #07ACB9;">
                                Selected: <span id="reassignSelectedCount">0</span> employee(s)
                            </div>
                        </div>
                    </div>

                    <div class="modal-actions">
                        <button type="button" class="btn-secondary" onclick="closeReassignTrainingModal()">Cancel</button>
                        <button type="submit" class="btn-primary">Re-assign Training</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- TABS CONTAINER -->
        <div class="tabs-container">
            <ul class="tabs-nav">
                <li><button class="tab-button active" data-tab="training-courses-tab">
                    <i class="fas fa-graduation-cap"></i> Training Courses
                </button></li>
                <li><button class="tab-button" data-tab="employee-assignments-tab">
                    <i class="fas fa-users"></i> View Employee Training Assignments
                </button></li>
            </ul>

            <!-- Tab Content -->
            <div class="tab-contents">
                <!-- Training Courses Tab -->
                <div id="training-courses-tab" class="tab-content active">
                    <div class="card">
                        <div class="card-header">
                            <h3>Available Training Courses</h3>
                        </div>
                        
                        <!-- Search and Filter Section -->
                        <div class="search-filter-section">
                            <div class="search-container">
                                <i class="fas fa-search search-icon"></i>
                                <input type="text" class="search-input" placeholder="Search training courses..." id="courseSearch">
                            </div>
                            
                            <button class="add-training-btn" onclick="addNewTraining()">
                                <i class="fas fa-plus"></i>
                                Add New HR Training
                            </button>
                            
                            <button class="reassign-training-btn" onclick="openReassignTrainingModal()">
                                <i class="fas fa-redo"></i>
                                Re-assign Existing Training
                            </button>
                        </div>

                        <!-- Training courses grid -->
                        <div class="training-courses-grid">
                            <% if (typeof trainings !== 'undefined' && trainings && trainings.length > 0) { %>
                                <% trainings.forEach(training => { %>
                                    <div class="training-course-card" 
                                        data-type="<%= training.badges ? training.badges.join(' ') : '' %>"
                                        data-training-id="<%= training.id %>"
                                        style="cursor: pointer; transition: all 0.3s ease;">
                                        
                                        <div class="course-card-header">
                                            <h4 class="course-title"><%= training.title || 'Untitled Training' %></h4>
                                            <div class="course-card-actions">
                                                <i class="fas fa-eye" style="color: #07ACB9; font-size: 14px;" title="Click to view details"></i>
                                                <% if (training.assignmentStats && training.assignmentStats.total > 0) { %>
                                                    <span class="assignment-count-badge">
                                                        <%= training.assignmentStats.total %>
                                                    </span>
                                                <% } %>
                                            </div>
                                        </div>
                                        
                                        <div class="course-description">
                                            <%= training.description || 'No description available' %>
                                        </div>
                                        
                                        <div class="course-details">
                                            Duration: <%= training.duration || 0 %> hours<br>
                                            <% if (training.mode === 'onsite' && training.location) { %>
                                                Location: <%= training.location.address || 'Address not specified' %>, <%= training.location.country || 'Country not specified' %><br>
                                            <% } %>
                                            <% if (training.cost && training.cost > 0) { %>
                                                Cost: ₱<%= training.cost.toLocaleString() %><br>
                                            <% } %>
                                            <% if (training.assignmentStats) { %>
                                                <strong>Assignments:</strong> 
                                                <%= training.assignmentStats.completed %> completed, 
                                                <%= training.assignmentStats.inProgress %> in progress, 
                                                <%= training.assignmentStats.notStarted %> not started
                                            <% } %>
                                        </div>
                                        
                                        <div class="course-badges">
                                            <% if (training.badges && training.badges.length > 0) { %>
                                                <% training.badges.forEach(badge => { %>
                                                    <span class="course-badge <%= badge %>">
                                                        <%= badge.charAt(0).toUpperCase() + badge.slice(1) %>
                                                    </span>
                                                <% }); %>
                                            <% } %>
                                        </div>
                                        
                                        <!-- Assignment Progress Bar -->
                                        <% if (training.assignmentStats && training.assignmentStats.total > 0) { %>
                                            <% const progressPercentage = (training.assignmentStats.completed / training.assignmentStats.total) * 100; %>
                                            <div class="progress-container">
                                                <div class="progress-header">
                                                    <span>Progress</span>
                                                    <span><%= Math.round(progressPercentage) %>%</span>
                                                </div>
                                                <div class="progress-bar-background">
                                                    <div class="progress-bar-fill" data-progress="<%= progressPercentage %>"></div>
                                                </div>
                                            </div>
                                        <% } %>
                                        
                                        <div class="click-hint">
                                            <small>
                                                <i class="fas fa-mouse-pointer" style="margin-right: 4px;"></i>
                                                Click to view assignments & details
                                            </small>
                                        </div>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <div class="no-trainings-message" style="grid-column: 1 / -1; text-align: center; padding: 40px; color: #64748b;">
                                    <i class="fas fa-graduation-cap" style="font-size: 48px; margin-bottom: 15px; color: #cbd5e1;"></i>
                                    <h3 style="margin: 0 0 10px 0; color: #475569;">No Required Training Courses Available</h3>
                                    <p style="margin: 0;">Click "Add New Training" to create your first required training course.</p>
                                </div>
                            <% } %>
                        </div>
                    </div>
                </div>

                <!-- Employee Training Assignments Tab -->
                <div id="employee-assignments-tab" class="tab-content">
                    <div class="card">
                        <div class="card-header">
                            <h3>Employee Training Dashboard</h3>
                            <button class="btn btn-primary" onclick="refreshDashboard()">
                                <i class="fas fa-sync-alt"></i> Refresh Dashboard
                            </button>
                        </div>
                        
                        <!-- Dashboard Summary Cards -->
                        <div class="dashboard-summary" id="dashboardSummary">
                            <div class="loading-state">
                                <i class="fas fa-spinner fa-spin loading-spinner"></i>
                                Loading dashboard overview...
                            </div>
                        </div>

                        <!-- Search and Filter Section -->
                        <div class="search-filter-section" style="margin-top: 30px;">
                            <div class="search-container">
                                <i class="fas fa-search search-icon"></i>
                                <input type="text" class="search-input" placeholder="Search employees..." id="employeeDashboardSearch">
                            </div>
                            
                            <div class="filter-controls">
                                <select class="filter-select" id="statusFilter">
                                    <option value="">All Statuses</option>
                                    <option value="Behind Schedule">Behind Schedule</option>
                                    <option value="On Track">On Track</option>
                                    <option value="All Complete">All Complete</option>
                                    <option value="Pending Approval">Pending Approval</option>
                                    <option value="Has Rejections">Has Rejections</option>
                                </select>
                                
                                <select class="filter-select" id="departmentFilter">
                                    <option value="">All Departments</option>
                                    <!-- Will be populated by JavaScript -->
                                </select>
                                
                                <button class="filter-btn" onclick="clearAllFilters()">
                                    <i class="fas fa-times"></i> Clear Filters
                                </button>
                            </div>
                        </div>

                        <!-- Employee Dashboard List -->
                        <div class="employees-dashboard-list" id="employeesDashboardList">
                            <div class="loading-state">
                                <i class="fas fa-spinner fa-spin loading-spinner"></i>
                                Loading employee training data...
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global variables for dashboard
        let employeeDashboardData = [];
        let filteredEmployees = [];
        let dashboardStats = {};

        // Initialize page with better error handling
        document.addEventListener('DOMContentLoaded', function() {
            console.log('HR Training Tracker initializing...');

            const employeeTab = document.querySelector('[data-tab="employee-assignments-tab"]');
                if (employeeTab) {
                    employeeTab.addEventListener('click', function() {
                        console.log('Employee assignments tab clicked - loading dashboard...');
                        // Always load dashboard data when tab is clicked (removed the length check)
                        setTimeout(() => {
                            loadEmployeeDashboard();
                        }, 100);
                    });
                }

            document.querySelectorAll('.progress-bar-fill').forEach(function(progressBar) {
                const progress = progressBar.getAttribute('data-progress');
                if (progress) {
                    progressBar.style.width = progress + '%';
                }
            });
            
            // Initialize arrays first
            selectedEmployees = [];
            addedActivities = [];
            addedCertificates = [];
            allEmployees = [];
            allDepartments = [];
            allJobPositions = [];
            allActivityTypes = [];
            existingTrainings = [];
            currentAssignmentType = 'individual';
            countriesData = [];
            
            // Wait longer for DOM to be ready
            setTimeout(() => {
                try {
                    console.log('Starting initialization...');
                    
                    // Initialize basic functionality first
                    initializeTabs();
                    initializeModals();
                    
                    // Then load data (these functions will handle missing elements gracefully now)
                    loadFormData();
                    loadExistingTrainings();
                    loadCountries();
                    
                    // Initialize handlers after data loading
                    setTimeout(() => {
                        initializeAssignmentHandlers();
                        initializeFormHandlers();
                        initializeSearchFunctionality();
                        makeTrainingCardsClickable();
                        console.log('Initialization complete');
                    }, 1000);
                    
                } catch (error) {
                    console.error('Initialization error:', error);
                }
            }, 200);
        });

        // ============================================================================
        // DASHBOARD FUNCTIONALITY
        // ============================================================================

        async function loadEmployeeDashboard() {
            try {
                console.log('Loading Employee Training Dashboard...');

                const summaryContainer = document.getElementById('dashboardSummary');
                const listContainer = document.getElementById('employeesDashboardList');
                
                if (!summaryContainer || !listContainer) {
                    console.error('Dashboard containers not found!');
                    console.log('Summary container:', summaryContainer);
                    console.log('List container:', listContainer);
                    showNotification('Dashboard containers not found. Please check HTML structure.', 'error');
                    return;
                }
                
                // Show loading state immediately
                summaryContainer.innerHTML = `
                    <div style="text-align: center; padding: 40px; color: #64748b; grid-column: 1 / -1;">
                        <i class="fas fa-spinner fa-spin loading-spinner"></i>
                        <p style="margin-top: 10px;">Loading dashboard overview...</p>
                    </div>
                `;
                
                listContainer.innerHTML = `
                    <div class="loading-state">
                        <i class="fas fa-spinner fa-spin loading-spinner"></i>
                        Loading employee training data...
                    </div>
                `;
                
                const response = await fetch('/hr/employee-dashboard', {
                    method: 'GET',
                    credentials: 'include',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                
                if (result.success) {
                    employeeDashboardData = result.data.employees || [];
                    dashboardStats = result.data.statistics || {};
                    filteredEmployees = [...employeeDashboardData];
                    
                    console.log(`Loaded dashboard data for ${employeeDashboardData.length} employees`);
                    
                    renderDashboardSummary();
                    renderEmployeeDashboard();
                    populateDepartmentFilter();
                    initializeDashboardSearch();
                    
                } else {
                    throw new Error(result.message || 'Failed to load employee dashboard');
                }
                
            } catch (error) {
                console.error('Error loading employee dashboard:', error);
                showNotification('Failed to load employee dashboard: ' + error.message, 'error');
                
                // Show error state
                document.getElementById('dashboardSummary').innerHTML = `
                    <div style="text-align: center; padding: 40px; color: #64748b;">
                        <i class="fas fa-exclamation-triangle" style="font-size: 48px; margin-bottom: 15px; color: #ef4444;"></i>
                        <h3 style="margin: 0 0 10px 0; color: #475569;">Failed to Load Dashboard</h3>
                        <p style="margin: 0 0 15px 0;">There was an error loading the employee training dashboard.</p>
                        <button onclick="loadEmployeeDashboard()" class="btn btn-primary">
                            <i class="fas fa-retry"></i> Try Again
                        </button>
                    </div>
                `;
            }
        }

        function renderDashboardSummary() {
            const summaryContainer = document.getElementById('dashboardSummary');
            
            const summaryHtml = `
                <div class="summary-card total">
                    <div class="summary-card-icon">
                        <i class="fas fa-users"></i>
                    </div>
                    <div class="summary-card-number">${dashboardStats.totalEmployees}</div>
                    <div class="summary-card-label">Total Employees</div>
                    <div class="summary-card-sublabel">In training system</div>
                </div>
                
                <div class="summary-card behind">
                    <div class="summary-card-icon">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <div class="summary-card-number">${dashboardStats.employeesBehindSchedule}</div>
                    <div class="summary-card-label">Behind Schedule</div>
                    <div class="summary-card-sublabel">Need attention</div>
                </div>
                
                <div class="summary-card on-track">
                    <div class="summary-card-icon">
                        <i class="fas fa-chart-line"></i>
                    </div>
                    <div class="summary-card-number">${dashboardStats.employeesOnTrack}</div>
                    <div class="summary-card-label">On Track</div>
                    <div class="summary-card-sublabel">Making progress</div>
                </div>
                
                <div class="summary-card complete">
                    <div class="summary-card-icon">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <div class="summary-card-number">${dashboardStats.employeesAllComplete}</div>
                    <div class="summary-card-label">All Complete</div>
                    <div class="summary-card-sublabel">100% finished</div>
                </div>
                
                <div class="summary-card pending">
                    <div class="summary-card-icon">
                        <i class="fas fa-clock"></i>
                    </div>
                    <div class="summary-card-number">${dashboardStats.employeesWithPendingApprovals}</div>
                    <div class="summary-card-label">Pending Approval</div>
                    <div class="summary-card-sublabel">Awaiting review</div>
                </div>
                
                <div class="summary-card rejected">
                    <div class="summary-card-icon">
                        <i class="fas fa-times-circle"></i>
                    </div>
                    <div class="summary-card-number">${dashboardStats.employeesWithRejections}</div>
                    <div class="summary-card-label">Has Rejections</div>
                    <div class="summary-card-sublabel">Need follow-up</div>
                </div>
            `;
            
            summaryContainer.innerHTML = summaryHtml;
        }

        function renderEmployeeDashboard() {
            const dashboardContainer = document.getElementById('employeesDashboardList');
            
            if (filteredEmployees.length === 0) {
                dashboardContainer.innerHTML = `
                    <div style="text-align: center; padding: 40px; color: #64748b;">
                        <i class="fas fa-search" style="font-size: 48px; margin-bottom: 15px; color: #cbd5e1;"></i>
                        <h3 style="margin: 0 0 10px 0; color: #475569;">No Employees Found</h3>
                        <p style="margin: 0;">Try adjusting your search or filter criteria.</p>
                    </div>
                `;
                return;
            }
            
            const employeesHtml = filteredEmployees.map(employee => {
                const statusClass = `status-${employee.overallStatus.toLowerCase().replace(' ', '-')}`;
                
                return `
                    <div class="employee-dashboard-item ${statusClass}" onclick="showEmployeeTrainingDetails('${employee.userId}')">
                        <div class="employee-header">
                            <div class="employee-info">
                                <h4>${employee.employeeName}</h4>
                                <div class="employee-meta">
                                    ${employee.jobTitle} • ${employee.department}<br>
                                    ${employee.email}
                                </div>
                            </div>
                            <div class="employee-status">
                                <div class="employee-overall-progress">${employee.overallProgress}%</div>
                                <div class="employee-status-badge">${employee.overallStatus}</div>
                            </div>
                        </div>
                        
                        <div class="employee-progress-grid">
                            <div class="progress-stat">
                                <div class="progress-stat-number" style="--stat-color: #10b981;">${employee.completedTrainings}</div>
                                <div class="progress-stat-label">Completed</div>
                            </div>
                            <div class="progress-stat">
                                <div class="progress-stat-number" style="--stat-color: #07ACB9;">${employee.inProgressTrainings}</div>
                                <div class="progress-stat-label">In Progress</div>
                            </div>
                            <div class="progress-stat">
                                <div class="progress-stat-number" style="--stat-color: #64748b;">${employee.notStartedTrainings}</div>
                                <div class="progress-stat-label">Not Started</div>
                            </div>
                            <div class="progress-stat">
                                <div class="progress-stat-number" style="--stat-color: #ef4444;">${employee.overdueTrainings}</div>
                                <div class="progress-stat-label">Overdue</div>
                            </div>
                        </div>
                        
                        <div class="employee-actions" onclick="event.stopPropagation()">
                            <button class="action-btn primary" onclick="showEmployeeTrainingDetails('${employee.userId}')">
                                <i class="fas fa-eye"></i> View Details
                            </button>
                            <button class="action-btn" onclick="sendReminderToEmployee('${employee.userId}')">
                                <i class="fas fa-bell"></i> Send Reminder
                            </button>
                            <button class="action-btn" onclick="assignNewTraining('${employee.userId}')">
                                <i class="fas fa-plus"></i> Assign Training
                            </button>
                        </div>
                    </div>
                `;
            }).join('');
            
            dashboardContainer.innerHTML = employeesHtml;
        }

        function populateDepartmentFilter() {
            const departmentFilter = document.getElementById('departmentFilter');
            if (!departmentFilter) return;
            
            // Get unique departments from employee data
            const departments = [...new Set(employeeDashboardData.map(emp => emp.department))].sort();
            
            departmentFilter.innerHTML = '<option value="">All Departments</option>';
            departments.forEach(dept => {
                const option = document.createElement('option');
                option.value = dept;
                option.textContent = dept;
                departmentFilter.appendChild(option);
            });
            
            // Add change event listener
            departmentFilter.addEventListener('change', function() {
                applyFilters();
            });
        }

        function initializeDashboardSearch() {
            const searchInput = document.getElementById('employeeDashboardSearch');
            if (!searchInput) return;
            
            searchInput.addEventListener('input', function() {
                applyFilters();
            });
            
            // Initialize status filter
            const statusFilter = document.getElementById('statusFilter');
            if (statusFilter) {
                statusFilter.addEventListener('change', function() {
                    applyFilters();
                });
            }
        }

        // Apply All Filters
        function applyFilters() {
            const searchTerm = document.getElementById('employeeDashboardSearch').value.toLowerCase();
            const statusFilter = document.getElementById('statusFilter').value;
            const departmentFilter = document.getElementById('departmentFilter').value;
            
            filteredEmployees = employeeDashboardData.filter(employee => {
                // Search filter
                const matchesSearch = !searchTerm || 
                    employee.employeeName.toLowerCase().includes(searchTerm) ||
                    employee.jobTitle.toLowerCase().includes(searchTerm) ||
                    employee.department.toLowerCase().includes(searchTerm) ||
                    employee.email.toLowerCase().includes(searchTerm);
                
                // Status filter
                const matchesStatus = !statusFilter || employee.overallStatus === statusFilter;
                
                // Department filter
                const matchesDepartment = !departmentFilter || employee.department === departmentFilter;
                
                return matchesSearch && matchesStatus && matchesDepartment;
            });
            
            renderEmployeeDashboard();
        }

        // Clear All Filters
        function clearAllFilters() {
            document.getElementById('employeeDashboardSearch').value = '';
            document.getElementById('statusFilter').value = '';
            document.getElementById('departmentFilter').value = '';
            
            filteredEmployees = [...employeeDashboardData];
            renderEmployeeDashboard();
        }

        // Refresh Dashboard
        function refreshDashboard() {
            employeeDashboardData = [];
            loadEmployeeDashboard();
        }

        function debugEmployeeData() {
            console.log('=== EMPLOYEE DATA DEBUG ===');
            console.log('Total employees in dashboard:', employeeDashboardData.length);
            
            if (employeeDashboardData.length > 0) {
                console.log('First employee data:', employeeDashboardData[0]);
                console.log('First employee userId type:', typeof employeeDashboardData[0].userId);
                console.log('First employee userId value:', employeeDashboardData[0].userId);
            }
            
            console.log('All employee userIds:', employeeDashboardData.map(emp => ({
                name: emp.employeeName,
                userId: emp.userId,
                userIdType: typeof emp.userId
            })));
        }

        // Show Employee Training Details Modal
        function showEmployeeTrainingDetails(userId) {
            console.log('=== SHOW EMPLOYEE DETAILS DEBUG ===');
            console.log('Searching for userId:', userId);
            console.log('userId type:', typeof userId);
            console.log('Available employees:', employeeDashboardData.length);
            
            // Try both string and number comparison
            let employee = employeeDashboardData.find(emp => emp.userId == userId); // Use == for type coercion
            
            if (!employee) {
                console.log('Employee not found with == comparison, trying strict ===');
                employee = employeeDashboardData.find(emp => emp.userId === userId);
            }
            
            if (!employee) {
                console.log('Employee not found with === comparison, trying string conversion');
                employee = employeeDashboardData.find(emp => String(emp.userId) === String(userId));
            }
            
            if (!employee) {
                console.log('Employee not found with string conversion, trying number conversion');
                employee = employeeDashboardData.find(emp => Number(emp.userId) === Number(userId));
            }
            
            if (!employee) {
                console.error('Employee still not found after all attempts');
                console.log('Available userIds:', employeeDashboardData.map(emp => emp.userId));
                showNotification('Employee not found. Check console for debugging info.', 'error');
                debugEmployeeData(); // Call debug function
                return;
            }
            
            console.log('Employee found:', employee.employeeName);
            
            // Rest of your existing modal code...
            const modalHtml = `
                <div class="modal-overlay" id="employeeDetailsModal" style="display: flex;">
                    <div class="modal-content" style="max-width: 1000px; width: 95%;">
                        <div class="modal-header">
                            <h2 class="modal-title">${employee.employeeName} - Training Details</h2>
                            <button type="button" class="close-btn" onclick="closeEmployeeDetailsModal()" style="position: absolute; top: 15px; right: 20px; background: none; border: none; font-size: 24px; cursor: pointer;">&times;</button>
                        </div>
                        
                        <div style="max-height: 70vh; overflow-y: auto; padding: 0 5px;">
                            <!-- Employee Overview -->
                            <div class="card" style="margin-bottom: 20px;">
                                <div class="card-header">
                                    <h3>Employee Overview</h3>
                                </div>
                                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
                                    <div>
                                        <p><strong>Name:</strong> ${employee.employeeName}</p>
                                        <p><strong>Job Title:</strong> ${employee.jobTitle}</p>
                                        <p><strong>Department:</strong> ${employee.department}</p>
                                        <p><strong>Email:</strong> ${employee.email}</p>
                                        <p><strong>User ID:</strong> ${employee.userId} (${typeof employee.userId})</p>
                                    </div>
                                    <div style="background: #f8fafc; padding: 15px; border-radius: 8px;">
                                        <h4 style="margin-bottom: 15px; color: #334155;">Training Progress</h4>
                                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                                            <div style="text-align: center; padding: 10px; background: white; border-radius: 6px;">
                                                <div style="font-size: 24px; font-weight: 600; color: #07ACB9;">${employee.overallProgress}%</div>
                                                <div style="font-size: 12px; color: #64748b;">Overall Progress</div>
                                            </div>
                                            <div style="text-align: center; padding: 10px; background: white; border-radius: 6px;">
                                                <div style="font-size: 24px; font-weight: 600; color: #10b981;">${employee.completedTrainings}</div>
                                                <div style="font-size: 12px; color: #64748b;">Completed</div>
                                            </div>
                                            <div style="text-align: center; padding: 10px; background: white; border-radius: 6px;">
                                                <div style="font-size: 24px; font-weight: 600; color: #3b82f6;">${employee.inProgressTrainings}</div>
                                                <div style="font-size: 12px; color: #64748b;">In Progress</div>
                                            </div>
                                            <div style="text-align: center; padding: 10px; background: white; border-radius: 6px;">
                                                <div style="font-size: 24px; font-weight: 600; color: #ef4444;">${employee.overdueTrainings}</div>
                                                <div style="font-size: 12px; color: #64748b;">Overdue</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Training Details -->
                            <div class="card">
                                <div class="card-header">
                                    <h3>Training Assignments (${employee.trainings.length})</h3>
                                </div>
                                <div>
                                    ${employee.trainings.length > 0 ? employee.trainings.map(training => `
                                        <div class="assignment-item" style="margin-bottom: 15px; padding: 15px; border: 1px solid #e2e8f0; border-radius: 8px;">
                                            <div style="display: flex; justify-content: space-between; align-items: flex-start;">
                                                <div style="flex: 1;">
                                                    <h4 style="margin: 0 0 5px 0; color: #334155;">${training.trainingName}</h4>
                                                    <div style="font-size: 14px; color: #64748b; margin-bottom: 10px;">
                                                        ${training.isRequired ? '<span style="color: #ef4444; font-weight: 600;">REQUIRED</span> • ' : ''}
                                                        Duration: ${training.totalDuration} hours • 
                                                        Mode: ${training.isOnlineArrangement ? 'Online' : 'Onsite'}
                                                        ${training.startDate ? `<br>Start: ${new Date(training.startDate).toLocaleDateString()}` : ''}
                                                        ${training.endDate ? ` • Due: ${new Date(training.endDate).toLocaleDateString()}` : ''}
                                                    </div>
                                                    ${training.isOverdue ? '<div style="color: #ef4444; font-size: 12px; font-weight: 600;">⚠️ OVERDUE</div>' : ''}
                                                </div>
                                                <div style="text-align: right;">
                                                    <div style="font-size: 20px; font-weight: 700; color: ${training.progress >= 100 ? '#10b981' : training.progress >= 50 ? '#07ACB9' : '#64748b'};">
                                                        ${training.progress}%
                                                    </div>
                                                    <div style="font-size: 10px; color: #64748b; margin-bottom: 4px;">Progress</div>
                                                    <span class="status-badge ${training.status.toLowerCase().replace(' ', '-')}">${training.status}</span>
                                                </div>
                                            </div>
                                        </div>
                                    `).join('') : `
                                        <div style="text-align: center; padding: 40px; color: #64748b;">
                                            <i class="fas fa-graduation-cap" style="font-size: 48px; margin-bottom: 15px; color: #cbd5e1;"></i>
                                            <h3 style="margin: 0 0 10px 0; color: #475569;">No Training Assignments</h3>
                                            <p style="margin: 0;">This employee has not been assigned any trainings yet.</p>
                                        </div>
                                    `}
                                </div>
                            </div>
                        </div>

                        <div class="modal-actions">
                            <button type="button" class="btn-secondary" onclick="closeEmployeeDetailsModal()">Close</button>
                            <button type="button" class="btn-primary" onclick="assignNewTraining('${employee.userId}')">
                                <i class="fas fa-plus"></i> Assign New Training
                            </button>
                        </div>
                    </div>
                </div>
            `;

            // Remove any existing modal
            const existingModal = document.getElementById('employeeDetailsModal');
            if (existingModal) {
                existingModal.remove();
            }

            // Add modal to body
            document.body.insertAdjacentHTML('beforeend', modalHtml);
        }

        // Close Employee Details Modal
        function closeEmployeeDetailsModal() {
            const modal = document.getElementById('employeeDetailsModal');
            if (modal) {
                modal.remove();
            }
        }

        // Send Reminder to Employee
        function sendReminderToEmployee(userId) {
            // This would integrate with your notification system
            showNotification('Reminder sent to employee!', 'success');
            console.log('Sending reminder to employee:', userId);
        }

        // Assign New Training to Employee
        function assignNewTraining(userId) {
            // Close any open modals
            closeEmployeeDetailsModal();
            
            // Open the reassign training modal with pre-selected employee
            setTimeout(() => {
                openReassignTrainingModal();
                // Pre-select this employee when modal opens
                // You could add logic here to pre-filter to this specific employee
            }, 100);
        }



        // ============================================================================
        // TAB FUNCTIONALITY
        // ============================================================================

        function initializeTabs() {
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabContents = document.querySelectorAll('.tab-content');

            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    // Remove active class from all buttons and contents
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    tabContents.forEach(content => content.classList.remove('active'));

                    // Add active class to clicked button
                    button.classList.add('active');

                    // Show corresponding content
                    const tabId = button.getAttribute('data-tab');
                    const targetTab = document.getElementById(tabId);
                    if (targetTab) {
                        targetTab.classList.add('active');
                    }
                });
            });
        }

        // ============================================================================
        // MODAL FUNCTIONALITY
        // ============================================================================

        function initializeModals() {
            // Close modals when clicking outside
            document.addEventListener('click', function(event) {
                const modals = document.querySelectorAll('.modal-overlay');
                modals.forEach(modal => {
                    if (event.target === modal) {
                        modal.classList.remove('show');
                    }
                });
            });

            // Prevent modal close when clicking inside modal content
            document.querySelectorAll('.modal-content').forEach(content => {
                content.addEventListener('click', function(event) {
                    event.stopPropagation();
                });
            });
        }

        // Modal control functions
        function addNewTraining() {
            console.log('Opening new training modal...');
            
            // Reset everything
            resetTrainingForm();
            
            // Set default assignment type
            currentAssignmentType = 'individual';
            handleAssignmentTypeChange('individual', 'create');
            
            // Show modal
            document.getElementById('addTrainingModal').classList.add('show');
        }

        function closeAddTrainingModal() {
            document.getElementById('addTrainingModal').classList.remove('show');
        }

        function openReassignTrainingModal() {
            console.log('Opening reassign training modal...');
            
            // Reset everything
            resetReassignForm();
            
            // Set default assignment type
            currentAssignmentType = 'individual';
            handleAssignmentTypeChange('individual', 'reassign');
            
            // Show modal
            document.getElementById('reassignTrainingModal').classList.add('show');
        }

        function closeReassignTrainingModal() {
            document.getElementById('reassignTrainingModal').classList.remove('show');
        }

        // ============================================================================
        // FORM RESET FUNCTIONS
        // ============================================================================

        function resetTrainingForm() {
            // Reset form
            const form = document.getElementById('addTrainingForm');
            if (form) {
                form.reset();
            }
            
            // Reset arrays
            selectedEmployees = [];
            addedActivities = [];
            addedCertificates = [];
            
            // Reset displays
            updateSelectedCount('create');
            updateActivitiesDisplay();
            updateCertificatesDisplay();
            calculateTotalDuration();
            
            // Hide location fields
            const locationFields = document.getElementById('locationFields');
            if (locationFields) {
                locationFields.style.display = 'none';
            }
        }

        function resetReassignForm() {
            // Reset form
            const form = document.getElementById('reassignTrainingForm');
            if (form) {
                form.reset();
            }
            
            // Reset arrays
            selectedEmployees = [];
            
            // Reset displays
            updateSelectedCount('reassign');
            
            // Hide training info
            const trainingInfo = document.getElementById('selectedTrainingInfo');
            if (trainingInfo) {
                trainingInfo.style.display = 'none';
            }
        }

        // ============================================================================
        // DATA LOADING FUNCTIONS
        // ============================================================================

        async function loadFormData() {
            try {
                console.log('Loading form data...');
                
                const response = await fetch('/hr/training-form-data', {
                    method: 'GET',
                    credentials: 'include'
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                
                if (result.success) {
                    console.log('Form data loaded:', result.data);
                    
                    allDepartments = result.data.departments || [];
                    allJobPositions = result.data.jobPositions || [];
                    allActivityTypes = result.data.activityTypes || [];
                    
                    // Add delay to ensure DOM elements are ready
                    setTimeout(() => {
                        populateDepartments();
                        populateJobPositions(); 
                        populateActivityTypes();
                        loadAllEmployees();
                    }, 200); // Wait 200ms for DOM to be ready
                    
                    console.log(`Loaded: ${allDepartments.length} departments, ${allJobPositions.length} jobs, ${allActivityTypes.length} activity types`);
                    
                } else {
                    console.error('Failed to load form data:', result.message);
                }
            } catch (error) {
                console.error('Error loading form data:', error);
                // Continue with empty arrays
                allDepartments = [];
                allJobPositions = [];
                allActivityTypes = [];
            }
        }

        async function loadAllEmployees() {
            try {
                console.log('Loading all employees...');
                
                const response = await fetch('/hr/employees', {
                    method: 'GET',
                    credentials: 'include'
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                
                if (result.success) {
                    allEmployees = result.data || [];
                    console.log(`Loaded ${allEmployees.length} employees`);
                    
                    // Show employee list for individual assignment (default)
                    showEmployeeList(allEmployees, 'create');
                } else {
                    console.error('Failed to load employees:', result.message);
                    showNotification('Failed to load employees', 'error');
                }
            } catch (error) {
                console.error('Error loading employees:', error);
                showNotification('Error loading employees: ' + error.message, 'error');
            }
        }

        async function loadExistingTrainings() {
            try {
                console.log('Loading existing trainings...');
                
                const response = await fetch('/hr/existing-trainings', {
                    method: 'GET',
                    credentials: 'include'
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                
                if (result.success) {
                    existingTrainings = result.data || [];
                    populateExistingTrainingsDropdown();
                    console.log(`Loaded ${existingTrainings.length} existing trainings`);
                } else {
                    console.error('Failed to load existing trainings:', result.message);
                }
            } catch (error) {
                console.error('Error loading existing trainings:', error);
            }
        }

        async function loadCountries() {
            try {
                console.log('Loading countries...');
                const response = await fetch('https://restcountries.com/v3.1/all?fields=name,cca2');
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const countries = await response.json();
                
                // Sort countries alphabetically by common name
                countriesData = countries
                    .map(country => ({
                        code: country.cca2,
                        name: country.name.common
                    }))
                    .sort((a, b) => a.name.localeCompare(b.name));
                
                console.log(`Loaded ${countriesData.length} countries`);
                populateCountryDropdown();
                
            } catch (error) {
                console.error('Error fetching countries:', error);
                // Fallback to basic country list
                countriesData = [
                    { code: 'PH', name: 'Philippines' },
                    { code: 'US', name: 'United States' },
                    { code: 'SG', name: 'Singapore' }
                ];
                populateCountryDropdown();
            }
        }

        // ============================================================================
        // DROPDOWN POPULATION FUNCTIONS
        // ============================================================================

        function populateDepartments() {
            const selects = ['departmentSelect', 'reassignDepartmentSelect'];
            
            selects.forEach(selectId => {
                const select = document.getElementById(selectId);
                if (!select) {
                    console.warn(`Department select not found: ${selectId}`);
                    return; // Skip if element doesn't exist
                }
                
                select.innerHTML = '<option value="">Select department...</option>';
                
                if (allDepartments && allDepartments.length > 0) {
                    allDepartments.forEach(dept => {
                        const option = document.createElement('option');
                        option.value = dept.departmentId;
                        option.textContent = dept.deptName;
                        select.appendChild(option);
                    });
                }
            });
            
            console.log('Departments populated in dropdowns');
        }


        function populateJobPositions() {
            const selects = ['jobPositionSelect', 'reassignJobPositionSelect'];
            
            selects.forEach(selectId => {
                const select = document.getElementById(selectId);
                if (!select) {
                    console.warn(`Job position select not found: ${selectId}`);
                    return; // Skip if element doesn't exist
                }
                
                select.innerHTML = '<option value="">Select job position...</option>';
                
                if (allJobPositions && allJobPositions.length > 0) {
                    allJobPositions.forEach(job => {
                        const option = document.createElement('option');
                        option.value = job.jobId;
                        option.textContent = job.jobTitle;
                        select.appendChild(option);
                    });
                }
            });
            
            console.log('Job positions populated in dropdowns');
        }

        function populateActivityTypes() {
            const select = document.getElementById('activityType');
            if (!select) {
                console.warn('Activity type select not found');
                return;
            }
            
            select.innerHTML = '<option value="">Select type...</option>';
            
            if (allActivityTypes && allActivityTypes.length > 0) {
                allActivityTypes.forEach(type => {
                    const option = document.createElement('option');
                    option.value = type.label;
                    option.textContent = type.label;
                    select.appendChild(option);
                });
            }
            
            console.log('Activity types populated');
        }

        function populateCountryDropdown() {
            const countryDropdown = document.getElementById('countryDropdown');
            if (!countryDropdown) {
                console.warn('Country dropdown not found');
                return;
            }
            
            countryDropdown.innerHTML = '<option value="">Select Country</option>';
            
            if (countriesData && countriesData.length > 0) {
                countriesData.forEach(country => {
                    const option = document.createElement('option');
                    option.value = country.code;
                    option.textContent = country.name;
                    countryDropdown.appendChild(option);
                });
            }
            
            console.log('Countries populated in dropdown');
        }

        function populateExistingTrainingsDropdown() {
            const select = document.getElementById('existingTrainingSelect');
            if (!select) {
                console.warn('Existing training select not found');
                return;
            }
            
            select.innerHTML = '<option value="">Select an existing training...</option>';
            
            if (existingTrainings && existingTrainings.length > 0) {
                existingTrainings.forEach(training => {
                    const option = document.createElement('option');
                    option.value = training.id;
                    option.textContent = `${training.title} (${training.mode}) ${training.isRequired ? '- REQUIRED' : ''}`;
                    option.setAttribute('data-training', JSON.stringify(training));
                    select.appendChild(option);
                });

                // Add change event listener
                select.addEventListener('change', function() {
                    const selectedOption = this.options[this.selectedIndex];
                    const trainingInfo = document.getElementById('selectedTrainingInfo');
                    
                    if (selectedOption.value && trainingInfo) {
                        const training = JSON.parse(selectedOption.getAttribute('data-training'));
                        trainingInfo.innerHTML = `
                            <h4>${training.title}</h4>
                            <p><strong>Description:</strong> ${training.description}</p>
                            <p><strong>Mode:</strong> ${training.mode} | <strong>Duration:</strong> ${training.duration} hours | <strong>Cost:</strong> ₱${training.cost}</p>
                            ${training.isRequired ? '<span class="course-badge required">REQUIRED</span>' : ''}
                        `;
                        trainingInfo.style.display = 'block';
                    } else if (trainingInfo) {
                        trainingInfo.style.display = 'none';
                    }
                });
            }
            
            console.log('Existing trainings populated');
        }

        // ============================================================================
        // ASSIGNMENT TYPE HANDLING
        // ============================================================================

        function initializeAssignmentHandlers() {
            // Handle assignment type buttons for both modals
            document.querySelectorAll('.assignment-type-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const type = this.getAttribute('data-type');
                    const modal = this.getAttribute('data-modal') || 'create';
                    
                    handleAssignmentTypeChange(type, modal);
                });
            });

            // Handle department/job position selection changes
            const departmentSelect = document.getElementById('departmentSelect');
            if (departmentSelect) {
                departmentSelect.addEventListener('change', function() {
                    if (currentAssignmentType === 'department') {
                        loadEmployeesByFilter('department', this.value, 'create');
                    }
                });
            }

            const jobPositionSelect = document.getElementById('jobPositionSelect');
            if (jobPositionSelect) {
                jobPositionSelect.addEventListener('change', function() {
                    if (currentAssignmentType === 'jobPosition') {
                        loadEmployeesByFilter('jobPosition', this.value, 'create');
                    }
                });
            }

            // Handle reassign modal selectors
            const reassignDepartmentSelect = document.getElementById('reassignDepartmentSelect');
            if (reassignDepartmentSelect) {
                reassignDepartmentSelect.addEventListener('change', function() {
                    if (currentAssignmentType === 'department') {
                        loadEmployeesByFilter('department', this.value, 'reassign');
                    }
                });
            }

            const reassignJobPositionSelect = document.getElementById('reassignJobPositionSelect');
            if (reassignJobPositionSelect) {
                reassignJobPositionSelect.addEventListener('change', function() {
                    if (currentAssignmentType === 'jobPosition') {
                        loadEmployeesByFilter('jobPosition', this.value, 'reassign');
                    }
                });
            }
        }

        function handleAssignmentTypeChange(type, modal = 'create') {
            console.log(`Assignment type changed to: ${type} for modal: ${modal}`);
            
            currentAssignmentType = type;
            
            // Update button states
            const container = modal === 'reassign' ? 
                document.querySelector('#reassignTrainingModal .assignment-type-selector') :
                document.querySelector('#addTrainingModal .assignment-type-selector');
            
            if (container) {
                container.querySelectorAll('.assignment-type-btn').forEach(btn => {
                    btn.classList.remove('active');
                });
                
                const activeBtn = container.querySelector(`[data-type="${type}"]`);
                if (activeBtn) {
                    activeBtn.classList.add('active');
                }
            }
            
            // Show/hide appropriate filters
            const prefix = modal === 'reassign' ? 'reassign' : '';
            const departmentFilter = document.getElementById(`${prefix}${prefix ? 'D' : 'd'}epartmentFilter`);
            const jobPositionFilter = document.getElementById(`${prefix}${prefix ? 'J' : 'j'}obPositionFilter`);
            const employeeListContainer = document.getElementById(`${prefix}${prefix ? 'E' : 'e'}mployeeListContainer`);
            
            // Hide all filters first
            if (departmentFilter) departmentFilter.classList.remove('show');
            if (jobPositionFilter) jobPositionFilter.classList.remove('show');
            if (employeeListContainer) employeeListContainer.style.display = 'none';
            
            // Clear selections
            selectedEmployees = [];
            updateSelectedCount(modal);
            
            // Show appropriate UI based on type
            switch (type) {
                case 'individual':
                    if (employeeListContainer) employeeListContainer.style.display = 'block';
                    showEmployeeList(allEmployees, modal);
                    break;
                    
                case 'department':
                    if (departmentFilter) departmentFilter.classList.add('show');
                    break;
                    
                case 'jobPosition':
                    if (jobPositionFilter) jobPositionFilter.classList.add('show');
                    break;
                    
                case 'all':
                    if (employeeListContainer) employeeListContainer.style.display = 'block';
                    selectedEmployees = [...allEmployees];
                    showEmployeeList(allEmployees, modal, true);
                    updateSelectedCount(modal);
                    break;
            }
        }

        // ============================================================================
        // EMPLOYEE FILTERING AND DISPLAY
        // ============================================================================

        async function loadEmployeesByFilter(filterType, filterId, modal = 'create') {
            if (!filterId) {
                console.log('No filter ID provided');
                return;
            }
            
            try {
                console.log(`Loading employees by ${filterType}: ${filterId}`);
                
                const params = new URLSearchParams({
                    filterType: filterType,
                    [filterType === 'department' ? 'departmentId' : 'jobId']: filterId
                });
                
                const response = await fetch(`/hr/employees/filter?${params}`, {
                    method: 'GET',
                    credentials: 'include'
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                
                if (result.success) {
                    const employees = result.data || [];
                    console.log(`Loaded ${employees.length} filtered employees`);
                    
                    // Show employee list
                    const prefix = modal === 'reassign' ? 'reassign' : '';
                    const employeeListContainer = document.getElementById(`${prefix}${prefix ? 'E' : 'e'}mployeeListContainer`);
                    if (employeeListContainer) {
                        employeeListContainer.style.display = 'block';
                        showEmployeeList(employees, modal);
                    }
                } else {
                    console.error('Failed to load filtered employees:', result.message);
                    showNotification('Failed to load employees', 'error');
                }
            } catch (error) {
                console.error('Error loading filtered employees:', error);
                showNotification('Error loading employees: ' + error.message, 'error');
            }
        }

        function showEmployeeList(employees, modal = 'create', selectAll = false) {
            console.log(`Showing employee list for ${modal} modal, ${employees.length} employees, selectAll: ${selectAll}`);
            
            const prefix = modal === 'reassign' ? 'reassign' : '';
            const employeeItemsId = `${prefix}${prefix ? 'E' : 'e'}mployeeItems`;
            const selectAllCheckboxId = `${prefix}${prefix ? 'S' : 's'}electAllEmployees`;
            
            const employeeItems = document.getElementById(employeeItemsId);
            const selectAllCheckbox = document.getElementById(selectAllCheckboxId);
            
            if (!employeeItems) {
                console.error(`Employee items container not found: ${employeeItemsId}`);
                return;
            }
            
            console.log(`Found employeeItems container: ${employeeItemsId}`);
            
            employeeItems.innerHTML = '';
            
            if (employees.length === 0) {
                employeeItems.innerHTML = '<div style="padding: 20px; text-align: center; color: #64748b;">No employees found</div>';
                return;
            }
            
            employees.forEach(employee => {
                console.log('Employee object structure:', employee);
                const isSelected = selectAll || selectedEmployees.some(emp => emp.id === employee.id);
                
                const employeeItem = document.createElement('div');
                employeeItem.className = 'employee-item';
                employeeItem.innerHTML = `
                    <input type="checkbox" class="employee-checkbox" value="${employee.id}" ${isSelected ? 'checked' : ''}>
                    <div class="employee-info">
                        <div class="employee-name">${employee.fullName}</div>
                        <div class="employee-details">${employee.jobTitle} • ${employee.department}</div>
                    </div>
                `;
                
                const checkbox = employeeItem.querySelector('.employee-checkbox');
                checkbox.addEventListener('change', function() {
                    handleEmployeeSelection(employee, this.checked, modal);
                });
                
                employeeItems.appendChild(employeeItem);
            });
            
            // Handle select all checkbox
            if (selectAllCheckbox) {
                selectAllCheckbox.checked = selectAll;
                
                // Remove existing listeners to prevent duplicates
                const newSelectAllCheckbox = selectAllCheckbox.cloneNode(true);
                selectAllCheckbox.parentNode.replaceChild(newSelectAllCheckbox, selectAllCheckbox);
                
                newSelectAllCheckbox.addEventListener('change', function() {
                    const isChecked = this.checked;
                    const checkboxes = employeeItems.querySelectorAll('.employee-checkbox');
                    
                    if (isChecked) {
                        // Clear existing selections first
                        selectedEmployees = [];
                        // Add all employees
                        selectedEmployees = [...employees];
                    } else {
                        // Clear all selections
                        selectedEmployees = [];
                    }
                    
                    // Update checkboxes
                    checkboxes.forEach(checkbox => {
                        checkbox.checked = isChecked;
                    });
                    
                    updateSelectedCount(modal);
                    console.log(`Select All ${isChecked ? 'checked' : 'unchecked'}. Total: ${selectedEmployees.length}`);
                });
            } else {
                console.warn(`Select all checkbox not found: ${selectAllCheckboxId}`);
            }
            
            if (selectAll) {
                selectedEmployees = [...employees];
            }
            
            updateSelectedCount(modal);
        }

        function handleEmployeeSelection(employee, isSelected, modal = 'create') {
            if (isSelected) {
                // Check if employee is already selected (using == for type coercion)
                if (!selectedEmployees.find(emp => emp.id == employee.id)) {
                    selectedEmployees.push(employee);
                }
            } else {
                // Remove employee from selection
                selectedEmployees = selectedEmployees.filter(emp => emp.id != employee.id);
            }
            
            updateSelectedCount(modal);
            console.log(`Employee ${employee.fullName} ${isSelected ? 'selected' : 'deselected'}. Total: ${selectedEmployees.length}`);
        }

        function updateSelectedCount(modal = 'create') {
            const prefix = modal === 'reassign' ? 'reassign' : '';
            const countElement = document.getElementById(`${prefix}${prefix ? 'S' : 's'}electedCount`);
            if (countElement) {
                countElement.textContent = selectedEmployees.length;
            }
        }

        // ============================================================================
        // FORM HANDLERS
        // ============================================================================

        function initializeFormHandlers() {
            // Training mode change handler
            const trainingModeSelect = document.getElementById('trainingMode');
            if (trainingModeSelect) {
                trainingModeSelect.addEventListener('change', function() {
                    const locationFields = document.getElementById('locationFields');
                    if (locationFields) {
                        if (this.value === 'onsite') {
                            locationFields.style.display = 'block';
                        } else {
                            locationFields.style.display = 'none';
                        }
                    }
                });
            }

            // Form submission handlers
            const addTrainingForm = document.getElementById('addTrainingForm');
            if (addTrainingForm) {
                addTrainingForm.addEventListener('submit', handleCreateTrainingSubmit);
            }

            const reassignTrainingForm = document.getElementById('reassignTrainingForm');
            if (reassignTrainingForm) {
                reassignTrainingForm.addEventListener('submit', handleReassignTrainingSubmit);
            }
        }

        async function handleCreateTrainingSubmit(e) {
            e.preventDefault();
            
            console.log('Submitting create training form...');
            
            // Collect form data
            const formData = {
                trainingName: document.getElementById('courseName').value.trim(),
                trainingDesc: document.getElementById('courseDescription').value.trim(),
                isRequired: document.getElementById('isRequired').checked,
                isOnlineArrangement: document.getElementById('trainingMode').value === 'online',
                cost: parseFloat(document.getElementById('trainingCost').value) || 0,
                totalDuration: calculateTotalDurationValue(),
                activities: addedActivities,
                certifications: addedCertificates,
                assignmentType: currentAssignmentType,
                assignedEmployees: selectedEmployees.map(emp => ({
                    userId: emp.userId,
                    startDate: new Date().toISOString().split('T')[0],
                    dueDate: document.getElementById('trainingDueDate').value || null
                }))
            };

            // Add location data for onsite training
            if (!formData.isOnlineArrangement) {
                formData.country = document.getElementById('countryDropdown').value;
                formData.address = document.getElementById('addressField').value.trim();
            }

            // Validation
            const errors = validateTrainingForm(formData);
            if (errors.length > 0) {
                showNotification('Please fix the following errors:\n\n' + errors.join('\n'), 'error');
                return;
            }

            try {
                // Show loading state
                const submitBtn = e.target.querySelector('button[type="submit"]');
                const originalText = submitBtn.textContent;
                submitBtn.textContent = 'Creating...';
                submitBtn.disabled = true;

                console.log('Sending training data:', formData);

                const response = await fetch('/hr/training', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    credentials: 'include',
                    body: JSON.stringify(formData)
                });

                const result = await response.json();

                if (result.success) {
                    showNotification(`Training "${formData.trainingName}" created successfully and assigned to ${formData.assignedEmployees.length} employee(s)!`, 'success');
                    closeAddTrainingModal();
                    
                    // Optionally reload the page to show new training
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    showNotification('Error creating training: ' + (result.message || 'Unknown error'), 'error');
                }

                // Reset button state
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;

            } catch (error) {
                console.error('Error creating training:', error);
                showNotification('Error creating training: ' + error.message, 'error');
                
                // Reset button state
                const submitBtn = e.target.querySelector('button[type="submit"]');
                submitBtn.textContent = 'Create Training Course';
                submitBtn.disabled = false;
            }
        }

        async function handleReassignTrainingSubmit(e) {
            e.preventDefault();
            
            console.log('Submitting reassign training form...');
            
            const trainingId = document.getElementById('existingTrainingSelect').value;
            
            if (!trainingId) {
                showNotification('Please select a training to reassign', 'error');
                return;
            }

            if (selectedEmployees.length === 0) {
                showNotification('Please select at least one employee', 'error');
                return;
            }

            const formData = {
                trainingId: trainingId,
                assignmentType: currentAssignmentType,
                assignedEmployees: selectedEmployees.map(emp => ({
                    userId: emp.userId,
                    startDate: new Date().toISOString().split('T')[0],
                    dueDate: document.getElementById('reassignTrainingDueDate').value || null
                }))
            };

            try {
                // Show loading state
                const submitBtn = e.target.querySelector('button[type="submit"]');
                const originalText = submitBtn.textContent;
                submitBtn.textContent = 'Re-assigning...';
                submitBtn.disabled = true;

                console.log('Sending reassign data:', formData);

                const response = await fetch('/hr/training/reassign', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    credentials: 'include',
                    body: JSON.stringify(formData)
                });

                const result = await response.json();

                if (result.success) {
                    showNotification(`Training re-assigned to ${formData.assignedEmployees.length} employee(s) successfully!`, 'success');
                    closeReassignTrainingModal();
                    
                    // Optionally reload the assignments tab
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    showNotification('Error re-assigning training: ' + (result.message || 'Unknown error'), 'error');
                }

                // Reset button state
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;

            } catch (error) {
                console.error('Error re-assigning training:', error);
                showNotification('Error re-assigning training: ' + error.message, 'error');
                
                // Reset button state
                const submitBtn = e.target.querySelector('button[type="submit"]');
                submitBtn.textContent = 'Re-assign Training';
                submitBtn.disabled = false;
            }
        }

        function validateTrainingForm(formData) {
            const errors = [];
            
            if (!formData.trainingName) errors.push('Training name is required');
            if (!formData.trainingDesc) errors.push('Training description is required');
            if (formData.assignedEmployees.length === 0) errors.push('At least one employee must be assigned');
            if (addedActivities.length === 0) errors.push('At least one activity must be added');
            
            // Validate onsite training location
            if (!formData.isOnlineArrangement) {
                if (!formData.country) errors.push('Country is required for onsite training');
                if (!formData.address) errors.push('Address is required for onsite training');
            }
            
            return errors;
        }

        // ============================================================================
        // ACTIVITIES AND CERTIFICATES MANAGEMENT
        // ============================================================================

        function addActivity() {
            const moduleName = document.getElementById('moduleName').value.trim();
            const estimatedTime = document.getElementById('estimatedTime').value.trim();
            const activityType = document.getElementById('activityType').value;
            const remarks = document.getElementById('activityRemarks').value.trim();
            
            if (!moduleName || !estimatedTime || !activityType) {
                showNotification('Please fill in module name, estimated time, and activity type.', 'warning');
                return;
            }
            
            const activity = {
                name: moduleName,
                duration: parseFloat(estimatedTime),
                type: activityType,
                remarks: remarks
            };
            
            addedActivities.push(activity);
            updateActivitiesDisplay();
            calculateTotalDuration();
            
            // Clear fields
            document.getElementById('moduleName').value = '';
            document.getElementById('estimatedTime').value = '';
            document.getElementById('activityType').value = '';
            document.getElementById('activityRemarks').value = '';
            
            console.log('Activity added:', activity);
        }

        function updateActivitiesDisplay() {
            const activitiesList = document.getElementById('activitiesList');
            if (!activitiesList) return;
            
            activitiesList.innerHTML = '';
            
            addedActivities.forEach((activity, index) => {
                const activityItem = document.createElement('div');
                activityItem.className = 'dynamic-item';
                activityItem.innerHTML = `
                    <div>
                        <strong>${activity.name}</strong><br>
                        <span style="font-size: 12px; color: #64748b;">
                            ${activity.duration} hours • ${activity.type}
                            ${activity.remarks ? ` • ${activity.remarks}` : ''}
                        </span>
                    </div>
                    <button type="button" class="remove-btn" onclick="removeActivity(${index})">×</button>
                `;
                activitiesList.appendChild(activityItem);
            });
        }

        function removeActivity(index) {
            addedActivities.splice(index, 1);
            updateActivitiesDisplay();
            calculateTotalDuration();
            console.log('Activity removed at index:', index);
        }

        function addCertificate() {
            const certificateTitle = document.getElementById('certificateTitle').value.trim();
            const certificateDescription = document.getElementById('certificateDescription').value.trim();
            
            if (!certificateTitle || !certificateDescription) {
                showNotification('Please fill in both certificate title and description.', 'warning');
                return;
            }
            
            const certificate = {
                title: certificateTitle,
                description: certificateDescription
            };
            
            addedCertificates.push(certificate);
            updateCertificatesDisplay();
            
            // Clear fields
            document.getElementById('certificateTitle').value = '';
            document.getElementById('certificateDescription').value = '';
            
            console.log('Certificate added:', certificate);
        }

        function updateCertificatesDisplay() {
            const certificatesList = document.getElementById('certificatesList');
            if (!certificatesList) return;
            
            certificatesList.innerHTML = '';
            
            addedCertificates.forEach((certificate, index) => {
                const certificateItem = document.createElement('div');
                certificateItem.className = 'dynamic-item';
                certificateItem.innerHTML = `
                    <div>
                        <strong>${certificate.title}</strong><br>
                        <span style="font-size: 12px; color: #64748b;">${certificate.description}</span>
                    </div>
                    <button type="button" class="remove-btn" onclick="removeCertificate(${index})">×</button>
                `;
                certificatesList.appendChild(certificateItem);
            });
        }

        function removeCertificate(index) {
            addedCertificates.splice(index, 1);
            updateCertificatesDisplay();
            console.log('Certificate removed at index:', index);
        }

        function calculateTotalDuration() {
            let totalHours = 0;
            
            addedActivities.forEach(activity => {
                totalHours += activity.duration;
            });
            
            const totalDurationElement = document.getElementById('totalDuration');
            if (totalDurationElement) {
                totalDurationElement.textContent = totalHours.toFixed(1);
            }
            
            return totalHours;
        }

        function calculateTotalDurationValue() {
            return addedActivities.reduce((sum, activity) => sum + activity.duration, 0);
        }

        // ============================================================================
        // SEARCH FUNCTIONALITY
        // ============================================================================

        function initializeSearchFunctionality() {
            console.log('Initializing search functionality...');
            
            // Course search
            const courseSearch = document.getElementById('courseSearch');
            if (courseSearch) {
                courseSearch.addEventListener('input', function() {
                    const searchTerm = this.value.toLowerCase();
                    const courseCards = document.querySelectorAll('.training-course-card');
                    
                    courseCards.forEach(card => {
                        const title = card.querySelector('.course-title');
                        const description = card.querySelector('.course-description');
                        
                        if (title && description) {
                            const titleText = title.textContent.toLowerCase();
                            const descText = description.textContent.toLowerCase();
                            
                            if (titleText.includes(searchTerm) || descText.includes(searchTerm)) {
                                card.style.display = 'block';
                            } else {
                                card.style.display = 'none';
                            }
                        }
                    });
                });
            }

            // Employee search
            const employeeSearch = document.getElementById('employeeSearch');
            if (employeeSearch) {
                employeeSearch.addEventListener('input', function() {
                    const searchTerm = this.value.toLowerCase();
                    const assignmentItems = document.querySelectorAll('.assignment-item');
                    
                    assignmentItems.forEach(item => {
                        const name = item.querySelector('.employee-name');
                        const details = item.querySelector('.assignment-details');
                        
                        if (name && details) {
                            const nameText = name.textContent.toLowerCase();
                            const detailsText = details.textContent.toLowerCase();
                            
                            if (nameText.includes(searchTerm) || detailsText.includes(searchTerm)) {
                                item.style.display = 'flex';
                            } else {
                                item.style.display = 'none';
                            }
                        }
                    });
                });
            }
            
            console.log('Search functionality initialized');
        }

        // ============================================================================
        // NOTIFICATION SYSTEM
        // ============================================================================

        function showNotification(message, type = 'info') {
            console.log('Notification:', type, message);
            
            // Remove any existing notifications
            const existingNotification = document.querySelector('.hr-notification');
            if (existingNotification) {
                existingNotification.remove();
            }
            
            const notification = document.createElement('div');
            notification.className = 'hr-notification';
            
            // Set background color based on type
            const colors = {
                info: '#3b82f6',
                success: '#10b981',
                error: '#ef4444',
                warning: '#f59e0b'
            };
            notification.style.backgroundColor = colors[type] || colors.info;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            // Remove after 5 seconds
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.style.animation = 'slideOut 0.3s ease';
                    setTimeout(() => {
                        if (notification.parentNode) {
                            notification.parentNode.removeChild(notification);
                        }
                    }, 300);
                }
            }, 5000);
        }

        // ============================================================================
        // TRAINING DETAILS MODAL FUNCTIONALITY
        // ============================================================================

        // Function to show training details when a course card is clicked
        function showTrainingDetails(trainingId) {
            console.log('Showing training details for ID:', trainingId);
            
            // Show loading state
            showNotification('Loading training details...', 'info');
            
            // Fetch training details
            fetchTrainingDetails(trainingId);
        }

        async function fetchTrainingDetails(trainingId) {
            try {
                console.log('Fetching training details for ID:', trainingId);
                
                // Make sure the URL matches your backend route
                const response = await fetch(`/hr/training/${trainingId}/details`, {
                    method: 'GET',
                    credentials: 'include',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                console.log('Response status:', response.status);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                console.log('Training details response:', result);

                if (result.success) {
                    displayTrainingDetailsModal(result.data);
                } else {
                    showNotification('Failed to load training details: ' + result.message, 'error');
                }

            } catch (error) {
                console.error('Error fetching training details:', error);
                showNotification('Error loading training details: ' + error.message, 'error');
            }
        }

        function displayTrainingDetailsModal(training) {
            // Create modal HTML
            const modalHtml = `
                <div class="modal-overlay" id="trainingDetailsModal" style="display: flex;">
                    <div class="modal-content" style="max-width: 1200px; width: 95%;">
                        <div class="modal-header">
                            <h2 class="modal-title">${training.title}</h2>
                            <button type="button" class="close-btn" onclick="closeTrainingDetailsModal()" style="position: absolute; top: 15px; right: 20px; background: none; border: none; font-size: 24px; cursor: pointer;">&times;</button>
                        </div>
                        
                        <div style="max-height: 70vh; overflow-y: auto; padding: 0 5px;">
                            <!-- Training Overview -->
                            <div class="card" style="margin-bottom: 20px;">
                                <div class="card-header">
                                    <h3>Training Overview</h3>
                                </div>
                                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 15px;">
                                    <div>
                                        <p><strong>Description:</strong></p>
                                        <p style="color: #64748b; margin-bottom: 15px;">${training.description}</p>
                                        <p><strong>Mode:</strong> <span class="course-badge ${training.mode}">${training.mode.toUpperCase()}</span></p>
                                        <p><strong>Duration:</strong> ${training.duration} hours</p>
                                        <p><strong>Cost:</strong> ₱${training.cost.toLocaleString()}</p>
                                        ${training.isRequired ? '<span class="course-badge required">REQUIRED TRAINING</span>' : ''}
                                    </div>
                                    <div style="background: #f8fafc; padding: 15px; border-radius: 8px;">
                                        <h4 style="margin-bottom: 15px; color: #334155;">Assignment Statistics</h4>
                                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                                            <div style="text-align: center; padding: 10px; background: white; border-radius: 6px;">
                                                <div style="font-size: 24px; font-weight: 600; color: #07ACB9;">${training.statistics.totalAssigned}</div>
                                                <div style="font-size: 12px; color: #64748b;">Total Assigned</div>
                                            </div>
                                            <div style="text-align: center; padding: 10px; background: white; border-radius: 6px;">
                                                <div style="font-size: 24px; font-weight: 600; color: #10b981;">${training.statistics.completed}</div>
                                                <div style="font-size: 12px; color: #64748b;">Completed</div>
                                            </div>
                                            <div style="text-align: center; padding: 10px; background: white; border-radius: 6px;">
                                                <div style="font-size: 24px; font-weight: 600; color: #3b82f6;">${training.statistics.inProgress}</div>
                                                <div style="font-size: 12px; color: #64748b;">In Progress</div>
                                            </div>
                                            <div style="text-align: center; padding: 10px; background: white; border-radius: 6px;">
                                                <div style="font-size: 24px; font-weight: 600; color: #ef4444;">${training.statistics.overdue}</div>
                                                <div style="font-size: 12px; color: #64748b;">Overdue</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                ${training.location ? `
                                <div style="background: #fef3c7; padding: 10px; border-radius: 6px; border-left: 4px solid #f59e0b;">
                                    <strong>Training Location:</strong><br>
                                    ${training.location.address}<br>
                                    ${training.location.country}
                                </div>
                                ` : ''}
                            </div>

                            <!-- Assigned Employees -->
                            <div class="card" style="margin-bottom: 20px;">
                                <div class="card-header">
                                    <h3>Assigned Employees (${training.assignments.length})</h3>
                                    <div class="search-container" style="max-width: 300px;">
                                        <i class="fas fa-search search-icon"></i>
                                        <input type="text" class="search-input" placeholder="Search employees..." id="modalEmployeeSearch" onkeyup="searchModalEmployees()">
                                    </div>
                                </div>
                                <div id="modalEmployeesList">
                                    ${training.assignments.length > 0 ? training.assignments.map(assignment => `
                                        <div class="assignment-item modal-assignment-item" data-status="${assignment.status.toLowerCase().replace(' ', '-')}">
                                            <div class="assignment-info">
                                                <h4 class="employee-name">${assignment.employeeName}</h4>
                                                <div class="assignment-details">
                                                    ${assignment.jobTitle} • ${assignment.department}<br>
                                                    Email: ${assignment.employeeEmail}<br>
                                                    Assigned: ${assignment.assignedDate ? new Date(assignment.assignedDate).toLocaleDateString() : 'N/A'}
                                                    ${assignment.startDate ? `• Start: ${new Date(assignment.startDate).toLocaleDateString()}` : ''}
                                                    ${assignment.endDate ? `• Due: ${new Date(assignment.endDate).toLocaleDateString()}` : ''}
                                                    ${assignment.completionDate ? `• Completed: ${new Date(assignment.completionDate).toLocaleDateString()}` : ''}
                                                </div>
                                                ${assignment.approvalRemarks ? `
                                                <div style="margin-top: 5px; font-size: 12px; color: #64748b; font-style: italic;">
                                                    Note: ${assignment.approvalRemarks}
                                                </div>
                                                ` : ''}
                                            </div>
                                            <div class="assignment-status">
                                                <div style="text-align: right; margin-bottom: 8px;">
                                                    <div style="font-size: 20px; font-weight: 700; color: ${assignment.progress >= 100 ? '#10b981' : assignment.progress >= 50 ? '#07ACB9' : '#64748b'};">
                                                        ${assignment.progress}%
                                                    </div>
                                                    <div style="font-size: 10px; color: #64748b; margin-bottom: 4px;">Progress</div>
                                                    <!-- Progress Bar -->
                                                    <div style="width: 80px; height: 6px; background: #f1f5f9; border-radius: 3px; overflow: hidden;">
                                                        <div style="width: ${assignment.progress}%; height: 100%; background: ${assignment.progress >= 100 ? '#10b981' : assignment.progress >= 50 ? '#07ACB9' : '#64748b'}; border-radius: 3px; transition: width 0.3s ease;"></div>
                                                    </div>
                                                </div>
                                                <span class="status-badge ${assignment.status.toLowerCase().replace(' ', '-')}">
                                                    ${assignment.status}
                                                </span>
                                            </div>
                                        </div>
                                    `).join('') : `
                                        <div style="text-align: center; padding: 40px; color: #64748b;">
                                            <i class="fas fa-users" style="font-size: 48px; margin-bottom: 15px; color: #cbd5e1;"></i>
                                            <h3 style="margin: 0 0 10px 0; color: #475569;">No Employees Assigned</h3>
                                            <p style="margin: 0;">This training has not been assigned to any employees yet.</p>
                                        </div>
                                    `}
                                </div>
                            </div>

                            <!-- Training Activities -->
                            ${training.activities && training.activities.length > 0 ? `
                            <div class="card" style="margin-bottom: 20px;">
                                <div class="card-header">
                                    <h3>Training Activities (${training.activities.length})</h3>
                                </div>
                                <div style="display: grid; gap: 10px;">
                                    ${training.activities.map((activity, index) => `
                                        <div style="background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 6px; padding: 12px;">
                                            <div style="display: flex; justify-content: space-between; align-items: flex-start;">
                                                <div style="flex: 1;">
                                                    <h5 style="margin: 0 0 5px 0; color: #334155;">${index + 1}. ${activity.activityName}</h5>
                                                    <div style="font-size: 12px; color: #64748b;">
                                                        Type: ${activity.activityType} • Duration: ${activity.estActivityDuration} hours
                                                        ${activity.activityRemarks ? `<br>Notes: ${activity.activityRemarks}` : ''}
                                                    </div>
                                                </div>
                                                <div style="background: #07ACB9; color: white; padding: 4px 8px; border-radius: 12px; font-size: 11px; font-weight: 500;">
                                                    ${activity.estActivityDuration}h
                                                </div>
                                            </div>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                            ` : ''}

                            <!-- Certifications -->
                            ${training.certifications && training.certifications.length > 0 ? `
                            <div class="card" style="margin-bottom: 20px;">
                                <div class="card-header">
                                    <h3>Certifications (${training.certifications.length})</h3>
                                </div>
                                <div style="display: grid; gap: 10px;">
                                    ${training.certifications.map(cert => `
                                        <div style="background: #f0fdff; border: 1px solid #07ACB9; border-radius: 6px; padding: 12px; border-left: 4px solid #07ACB9;">
                                            <h5 style="margin: 0 0 5px 0; color: #334155;">${cert.trainingCertTitle}</h5>
                                            <p style="margin: 0; font-size: 14px; color: #64748b;">${cert.trainingCertDesc}</p>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                            ` : ''}
                        </div>

                        <div class="modal-actions">
                            <button type="button" class="btn-secondary" onclick="closeTrainingDetailsModal()">Close</button>
                            <button type="button" class="btn-primary" onclick="reassignThisTraining(${training.id})">
                                <i class="fas fa-redo"></i> Re-assign Training
                            </button>
                        </div>
                    </div>
                </div>
            `;

            // Remove any existing modal
            const existingModal = document.getElementById('trainingDetailsModal');
            if (existingModal) {
                existingModal.remove();
            }

            // Add modal to body
            document.body.insertAdjacentHTML('beforeend', modalHtml);
        }

        function closeTrainingDetailsModal() {
            const modal = document.getElementById('trainingDetailsModal');
            if (modal) {
                modal.remove();
            }
        }

        function searchModalEmployees() {
            const searchInput = document.getElementById('modalEmployeeSearch');
            const searchTerm = searchInput.value.toLowerCase();
            const assignments = document.querySelectorAll('.modal-assignment-item');

            assignments.forEach(item => {
                const name = item.querySelector('.employee-name');
                const details = item.querySelector('.assignment-details');
                
                if (name && details) {
                    const nameText = name.textContent.toLowerCase();
                    const detailsText = details.textContent.toLowerCase();
                    
                    if (nameText.includes(searchTerm) || detailsText.includes(searchTerm)) {
                        item.style.display = 'flex';
                    } else {
                        item.style.display = 'none';
                    }
                }
            });
        }

        function reassignThisTraining(trainingId) {
            closeTrainingDetailsModal();
            
            // Pre-select the training in the reassign modal
            setTimeout(() => {
                openReassignTrainingModal();
                
                // Wait for modal to open and populate
                setTimeout(() => {
                    const trainingSelect = document.getElementById('existingTrainingSelect');
                    if (trainingSelect) {
                        trainingSelect.value = trainingId;
                        trainingSelect.dispatchEvent(new Event('change'));
                    }
                }, 500);
            }, 100);
        }

        function makeTrainingCardsClickable() {
            document.querySelectorAll('.training-course-card').forEach(card => {
                // Add pointer cursor
                card.style.cursor = 'pointer';
                
                // Add click event listener
                card.addEventListener('click', function() {
                    // Get training ID from a data attribute (you'll need to add this to your EJS template)
                    const trainingId = this.getAttribute('data-training-id');
                    if (trainingId) {
                        showTrainingDetails(trainingId);
                    }
                });
                
                // Add hover effect
                card.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-2px)';
                    this.style.boxShadow = '0 8px 24px rgba(0, 0, 0, 0.12)';
                });
                
                card.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0)';
                    this.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.08)';
                });
            });
        }

        // ============================================================================
        // UTILITY FUNCTIONS
        // ============================================================================

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // ============================================================================
        // ERROR HANDLING
        // ============================================================================

        window.addEventListener('error', function(e) {
            console.error('JavaScript Error:', e.error);
            showNotification('An unexpected error occurred. Please refresh the page.', 'error');
        });

        // ============================================================================
        // DEBUGGING HELPERS
        // ============================================================================

        function debugTrainingForm() {
            console.log('=== TRAINING FORM DEBUG ===');
            console.log('Selected Employees:', selectedEmployees);
            console.log('Added Activities:', addedActivities);
            console.log('Added Certificates:', addedCertificates);
            console.log('Current Assignment Type:', currentAssignmentType);
            console.log('All Employees:', allEmployees.length);
            console.log('All Departments:', allDepartments.length);
            console.log('All Job Positions:', allJobPositions.length);
        }

        // Make debug function available globally
        window.debugTrainingForm = debugTrainingForm;

        console.log('HR Training Tracker JavaScript loaded successfully');

        // Make key functions available globally for onclick handlers
        window.addActivity = addActivity;
        window.removeActivity = removeActivity;
        window.addCertificate = addCertificate;
        window.removeCertificate = removeCertificate;
        window.addNewTraining = addNewTraining;
        window.closeAddTrainingModal = closeAddTrainingModal;
        window.openReassignTrainingModal = openReassignTrainingModal;
        window.closeReassignTrainingModal = closeReassignTrainingModal;
        window.showTrainingDetails = showTrainingDetails;
        window.closeTrainingDetailsModal = closeTrainingDetailsModal;
        window.searchModalEmployees = searchModalEmployees;
        window.reassignThisTraining = reassignThisTraining;
        window.loadEmployeeDashboard = loadEmployeeDashboard;
        window.refreshDashboard = refreshDashboard;
        window.clearAllFilters = clearAllFilters;
        window.showEmployeeTrainingDetails = showEmployeeTrainingDetails;
        window.closeEmployeeDetailsModal = closeEmployeeDetailsModal;
        window.sendReminderToEmployee = sendReminderToEmployee;
        window.assignNewTraining = assignNewTraining;

        // Toggle active class for sidebar links
        document.querySelectorAll('.sidebar ul li a').forEach(link => {
            link.addEventListener('click', function() {
                document.querySelectorAll('.sidebar ul li a').forEach(link => link.classList.remove('active'));
                this.classList.add('active');
            });
        });

        // Toggle collapsible content
        document.querySelectorAll('.collapsible-header').forEach(header => {
            header.addEventListener('click', function() {
                var content = this.nextElementSibling;
                if (content.style.display === 'block') {
                    content.style.display = 'none';
                } else {
                    // Hide all other collapsible contents
                    document.querySelectorAll('.collapsible-content').forEach(item => {
                        if (item !== content) {
                            item.style.display = 'none';
                        }
                    });
                    content.style.display = 'block';
                }
            });
        });
    </script>
</body>
</html>