<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Training & Development Tracker</title>
    <link rel="stylesheet" href="/css/sidebar.css">
    <link rel="stylesheet" href="/css/recordsandperformancetracker.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        /* Import Inter font */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');

        /* Main content styling */
        .main-content {
            margin-left: 270px;
            padding: 20px;
            font-family: 'Inter', sans-serif;
        }

        /* Dashboard header */
        .dashboard-header {
            margin-bottom: 25px;
        }

        .dashboard-header h2 {
            margin-bottom: 10px;
            color: #333;
            font-size: 24px;
        }

        .dashboard-header p {
            color: #666;
            font-size: 0.95rem;
            max-width: 800px;
        }

        /* Tabs styling */
        .tabs-container {
            width: 100%;
            margin-bottom: 30px;
        }

        .tabs-nav {
            display: flex;
            border-bottom: 2px solid #eee;
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .tab-button {
            padding: 12px 20px;
            background-color: transparent;
            border: none;
            border-bottom: 3px solid transparent;
            cursor: pointer;
            font-weight: 600;
            font-size: 14px;
            color: #666;
            transition: all 0.3s ease;
            margin-right: 10px;
            display: flex;
            align-items: center;
        }

        .tab-button i {
            margin-right: 8px;
            font-size: 16px;
        }

        .tab-button.active {
            color: #07ACB9;
            border-bottom: 3px solid #07ACB9;
            background-color: #f8fdfd;
        }

        .tab-button:hover:not(.active) {
            color: #124A5C;
            border-bottom: 3px solid #ddd;
        }

        .tab-content {
            display: none;
            padding: 25px 0;
            animation: fadeIn 0.5s;
        }

        .tab-content.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        /* Card styling */
        .card {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
            padding: 20px;
            margin-bottom: 25px;
        }

        .card-header {
            margin-bottom: 15px;
            border-bottom: 1px solid #f0f0f0;
            padding-bottom: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .card-header h3 {
            margin: 0;
            font-size: 1.2rem;
            color: #333;
        }

        /* Search and Filter Section */
        .search-filter-section {
            display: flex;
            gap: 15px;
            align-items: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .search-container {
            flex: 1;
            min-width: 300px;
            position: relative;
        }

        .search-input {
            width: 100%;
            padding: 12px 16px 12px 45px;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.2s ease;
            box-sizing: border-box;
        }

        .search-input:focus {
            outline: none;
            border-color: #07ACB9;
            box-shadow: 0 0 0 3px rgba(7, 172, 185, 0.1);
        }

        .search-icon {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: #64748b;
            font-size: 14px;
        }

        /* Filter dropdown */
        .filter-dropdown {
            position: relative;
        }

        .filter-button {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 12px 16px;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            background-color: #fff;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.2s ease;
            white-space: nowrap;
        }

        .filter-button:hover {
            border-color: #07ACB9;
        }

        .filter-dropdown-content {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background-color: white;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            z-index: 1000;
            display: none;
            padding: 10px;
            min-width: 200px;
        }

        .filter-dropdown.open .filter-dropdown-content {
            display: block;
        }

        .filter-option {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px;
            cursor: pointer;
            border-radius: 4px;
            font-size: 14px;
        }

        .filter-option:hover {
            background-color: #f8fafc;
        }

        .filter-option input[type="checkbox"] {
            margin: 0;
        }

        /* Add training button */
        .add-training-btn {
            background-color: #124A5C;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            white-space: nowrap;
        }

        .add-training-btn:hover {
            background-color: #0d3c4a;
            transform: translateY(-2px);
        }

        /* Active filters display */
        .active-filters {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
            margin-top: 10px;
        }

        .filter-tag {
            background-color: #07ACB9;
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .filter-tag .remove-filter {
            cursor: pointer;
            font-size: 10px;
            background-color: rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            width: 14px;
            height: 14px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Training courses grid */
        .training-courses-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .training-course-card {
            background-color: #f8fafc;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            padding: 20px;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .training-course-card:hover {
            border-color: #07ACB9;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .course-title {
            font-size: 1.1rem;
            font-weight: 600;
            color: #334155;
            margin: 0 0 10px 0;
        }

        .course-description {
            color: #475569;
            font-size: 14px;
            margin-bottom: 12px;
            line-height: 1.5;
            font-weight: 400;
        }

        .course-details {
            color: #64748b;
            font-size: 13px;
            margin-bottom: 15px;
            line-height: 1.4;
            font-weight: 500;
        }

        .course-badges {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }

        .course-badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: 500;
        }

        .course-badge.online {
            background-color: #dbeafe;
            color: #1e40af;
        }

        .course-badge.onsite {
            background-color: #fef3c7;
            color: #d97706;
        }

        .course-badge.required {
            background-color: #fecaca;
            color: #dc2626;
        }

        /* Employee assignments list */
        .assignments-list {
            display: flex;
            flex-direction: column;
            gap: 12px;
            margin-top: 20px;
        }

        .assignment-item {
            background-color: #fff;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 16px 20px;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .assignment-item:hover {
            border-color: #07ACB9;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .assignment-info {
            flex: 1;
        }

        .employee-name {
            font-size: 1rem;
            font-weight: 600;
            color: #334155;
            margin: 0 0 4px 0;
        }

        .assignment-details {
            font-size: 14px;
            color: #64748b;
            line-height: 1.4;
        }

        .assignment-status {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .status-badge {
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
        }

        .status-badge.in-progress {
            background-color: #dbeafe;
            color: #1e40af;
        }

        .status-badge.completed {
            background-color: #dcfce7;
            color: #166534;
        }

        .status-badge.not-started {
            background-color: #f1f5f9;
            color: #475569;
        }

        /* Modal styling */
      .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 10000;
}

.modal-overlay.show {
    display: flex;
}
        .modal-content {
    background-color: white;
    border-radius: 16px;
    padding: 30px;
    max-width: 900px; /* Increased from 800px */
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    font-family: 'Inter', sans-serif; /* Ensure modal uses Inter font */
}


        .modal-header {
            text-align: center;
            margin-bottom: 25px;
            border-bottom: 1px solid #e2e8f0;
            padding-bottom: 15px;
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #334155;
            margin: 0;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
    display: block;
    font-size: 14px;
    font-weight: 500;
    color: #374151;
    margin-bottom: 8px;
    font-family: 'Inter', sans-serif; /* Consistent font */
}


        .form-input, .form-select, .form-textarea {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.2s ease;
            box-sizing: border-box;
        }

        .form-input:focus, .form-select:focus, .form-textarea:focus {
            outline: none;
            border-color: #07ACB9;
            box-shadow: 0 0 0 3px rgba(7, 172, 185, 0.1);
        }

        .form-textarea {
            resize: vertical;
            min-height: 80px;
        }
.form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px; /* Increased gap */
}s
        /* country add */
label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #333;
        }
        select, input[type="text"], textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            box-sizing: border-box;
        }
        .location-fields {
            display: none;
            background: #f9f9f9;
            padding: 15px;
            border-radius: 5px;
            margin-top: 10px;
            border-left: 4px solid #007bff;
        }
        .location-fields.show {
            display: block;
        }
        #countryDropdown {
            max-height: 200px;
            overflow-y: auto;
        }
        .loading {
            color: #666;
            font-style: italic;
        }
        .demo-section {
            background: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        h2 {
            color: #333;
            border-bottom: 2px solid #007bff;
            padding-bottom: 10px;
        }
s
.add-item-section {
    background-color: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    padding: 20px; /* Increased padding */
    margin-bottom: 20px;
}


        .add-item-header {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
        }

        .add-item-input {
            flex: 1;
            padding: 8px 12px;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            font-size: 14px;
        }

        .add-btn {
            background-color: #07ACB9;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: background-color 0.2s ease;
            white-space: nowrap;
        }

        .add-btn:hover {
            background-color: #059ca4;
        }

        .dynamic-list {
            margin-top: 10px;
        }

        .dynamic-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: white;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            padding: 8px 12px;
            margin-bottom: 8px;
        }

        .remove-btn {
            background-color: #ef4444;
            color: white;
            border: none;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .remove-btn:hover {
            background-color: #dc2626;
        }

        /* Updated pill-style tags for objectives and skills */
        .pill-tag {
            display: inline-flex;
            align-items: center;
            background-color: #07ACB9;
            color: white;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
            margin: 4px;
            gap: 6px;
        }

        .pill-tag .remove-pill {
            cursor: pointer;
            background-color: rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            width: 16px;
            height: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: bold;
        }

        .pill-tag .remove-pill:hover {
            background-color: rgba(255, 255, 255, 0.5);
        }

        .pills-container {
            display: flex;
            flex-wrap: wrap;
            margin-top: 10px;
            min-height: 30px;
            padding: 5px;
            background-color: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
        }

       .activity-form-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px; /* Increased gap */
    margin-bottom: 15px;
}



        .activity-item {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            background-color: white;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            padding: 12px;
            margin-bottom: 8px;
        }

        .activity-details {
            flex: 1;
        }

        .activity-details strong {
            color: #334155;
        }

        .activity-details span {
            color: #64748b;
            font-size: 13px;
        }

        /* Certificate item styling */
        .certificate-item {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            background-color: white;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            padding: 12px;
            margin-bottom: 8px;
        }

        .certificate-details {
            flex: 1;
        }

        .certificate-details strong {
            color: #334155;
            display: block;
            margin-bottom: 4px;
        }

        .certificate-details span {
            color: #64748b;
            font-size: 13px;
            line-height: 1.4;
        }

.duration-display {
    background-color: #f0fdff;
    border: 1px solid #07ACB9;
    border-radius: 8px;
    padding: 20px; /* Increased padding */
    text-align: center;
    margin: 20px 0; /* Increased margin */
}

.duration-value {
    font-size: 28px; /* Slightly larger */
}

        .duration-label {
            font-size: 14px;
            color: #64748b;
            margin-bottom: 5px;
        }

        

        .modal-actions {
            display: flex;
            justify-content: center;
            gap: 12px;
            margin-top: 25px;
            padding-top: 20px;
            border-top: 1px solid #e2e8f0;
        }

        .btn-secondary {
            background-color: #f8fafc;
            color: #64748b;
            border: 1px solid #e2e8f0;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .btn-secondary:hover {
            background-color: #e2e8f0;
        }

        .btn-primary {
            background-color: #124A5C;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .btn-primary:hover {
            background-color: #0d3c4a;
        }

        /* Employee Training Details Modal */
        .employee-info-section {
            background-color: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .employee-header {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 15px;
        }

        .employee-avatar {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background-color: #07ACB9;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 24px;
            font-weight: 600;
        }

        .employee-details h3 {
            margin: 0 0 5px 0;
            color: #334155;
            font-size: 1.2rem;
        }

        .employee-job-role {
            color: #64748b;
            font-size: 14px;
            margin-bottom: 3px;
        }

        .employee-email {
            color: #64748b;
            font-size: 14px;
        }

        /* Training Statistics Cards */
        .training-stats {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
            margin-bottom: 25px;
        }

        .stat-card {
            background-color: #fff;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 15px;
            text-align: center;
        }

        .stat-number {
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 12px;
            color: #64748b;
            font-weight: 500;
        }

        .stat-card.in-progress .stat-number {
            color: #3b82f6;
        }

        .stat-card.completed .stat-number {
            color: #10b981;
        }

        .stat-card.overdue .stat-number {
            color: #ef4444;
        }

        /* Training Progress List */
        .training-progress-list {
            margin-top: 20px;
        }

        .training-progress-item {
            background-color: #fff;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 12px;
        }

        .training-progress-header {
            display: flex;
            justify-content: between;
            align-items: flex-start;
            margin-bottom: 10px;
        }

        .training-title {
            font-size: 1rem;
            font-weight: 600;
            color: #334155;
            margin: 0 0 5px 0;
        }

        .training-meta {
            font-size: 13px;
            color: #64748b;
            margin-bottom: 10px;
        }

        .progress-bar-container {
            background-color: #f1f5f9;
            height: 8px;
            border-radius: 4px;
            overflow: hidden;
            margin-bottom: 8px;
        }

        .progress-bar-fill {
            height: 100%;
            border-radius: 4px;
            transition: width 0.3s ease;
        }

        .progress-bar-fill.in-progress {
            background-color: #3b82f6;
        }

        .progress-bar-fill.completed {
            background-color: #10b981;
        }

        .progress-bar-fill.overdue {
            background-color: #ef4444;
        }

        .progress-text {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 12px;
        }

        .progress-percentage {
            font-weight: 600;
            color: #334155;
        }

        .progress-status {
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: 500;
        }

        .progress-status.in-progress {
            background-color: #dbeafe;
            color: #1e40af;
        }

        .progress-status.completed {
            background-color: #dcfce7;
            color: #166534;
        }

        .progress-status.overdue {
            background-color: #fecaca;
            color: #dc2626;
        }

        /* Training Description Styling */
        .training-description {
            color: #475569;
            font-size: 14px;
            line-height: 1.5;
            margin-bottom: 10px;
        }

        .training-badges {
            display: flex;
            gap: 6px;
            flex-wrap: wrap;
            margin: 10px 0;
        }

        @media (max-width: 768px) {
            .main-content {
                margin-left: 0;
                padding: 15px;
            }

            .search-filter-section {
                flex-direction: column;
                align-items: stretch;
            }

            .search-container {
                min-width: auto;
            }

            .training-courses-grid {
                grid-template-columns: 1fr;
            }

            .assignment-item {
                flex-direction: column;
                gap: 10px;
                align-items: stretch;
            }
        }

        /* ACTIVITY TYPE MODAL */

        /* Activity type actions styling */
    .activity-type-actions {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .add-type-btn {
        background-color: #07ACB9;
        color: white;
        border: none;
        padding: 8px 12px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 12px;
        font-weight: 500;
        transition: background-color 0.2s ease;
        white-space: nowrap;
        display: flex;
        align-items: center;
        gap: 4px;
    }

    .add-type-btn:hover {
        background-color: #059ca4;
    }

    .add-type-btn i {
        font-size: 10px;
    }

/* Mini modal styling */
.mini-modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.6);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 20000; /* Higher than main modal */
}

.mini-modal-overlay.show {
    display: flex;
}

/* Mini modal adjustments */
.mini-modal-content {
    background-color: white;
    border-radius: 12px;
    padding: 25px; /* Increased padding */
    max-width: 700px; /* Wider mini modal */
    width: 100%;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.4);
    animation: miniModalSlideIn 0.3s ease;
    font-family: 'Inter', sans-serif; /* Consistent font */
}


/* Consistent form input styling */
.form-input, 
.form-select, 
.form-textarea,
.add-item-input,
#countryDropdown,
#addressField,
#newActivityTypeName,
#certificateTitle,
#certificateDescription {
    width: 100%;
    padding: 12px 16px;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    font-size: 14px;
    font-family: 'Inter', sans-serif; /* Consistent font */
    transition: border-color 0.2s ease;
    box-sizing: border-box;
    color: #334155; /* Consistent text color */
}

.form-input:focus, 
.form-select:focus, 
.form-textarea:focus,
.add-item-input:focus,
#countryDropdown:focus,
#addressField:focus,
#newActivityTypeName:focus,
#certificateTitle:focus,
#certificateDescription:focus {
    outline: none;
    border-color: #07ACB9;
    box-shadow: 0 0 0 3px rgba(7, 172, 185, 0.1);
}


@keyframes miniModalSlideIn {
    from {
        opacity: 0;
        transform: scale(0.9) translateY(-20px);
    }
    to {
        opacity: 1;
        transform: scale(1) translateY(0);
    }
}


    .mini-modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #e2e8f0;
    }

    .mini-modal-header h4 {
        margin: 0;
        color: #334155;
        font-size: 1.1rem;
    }
.close-mini-modal {
    background: none;
    border: none;
    font-size: 24px;
    color: #64748b;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: all 0.2s ease;
}

.close-mini-modal:hover {
    background-color: #f1f5f9;
    color: #334155;
}

.mini-modal-body {
    margin-bottom: 0;
}

.mini-modal-actions {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 20px;
    padding-top: 15px;
    border-top: 1px solid #e2e8f0;
}

.mini-modal-actions .btn-secondary,
.mini-modal-actions .btn-primary {
    padding: 8px 16px;
    font-size: 14px;
}
    /* Responsive adjustments */
    @media (max-width: 1000px) {
        .activity-form-grid {
            grid-template-columns: 1fr;
            gap: 10px;
        }

        .activity-type-actions {
            justify-content: flex-start;
        }

        .add-type-btn {
            font-size: 11px;
            padding: 6px 10px;
        }
    }

    /* Training Request Statistics */
.training-request-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.request-stat-card {
    background: linear-gradient(135deg, #fff 0%, #f8fafc 100%);
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 20px;
    text-align: center;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

.request-stat-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: var(--accent-color);
}

.request-stat-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
}

.request-stat-card.pending {
    --accent-color: #f59e0b;
}

.request-stat-card.approved {
    --accent-color: #10b981;
}

.request-stat-card.rejected {
    --accent-color: #ef4444;
}

.request-stat-icon {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 15px;
    font-size: 24px;
    color: white;
}

.request-stat-card.pending .request-stat-icon {
    background: linear-gradient(135deg, #f59e0b, #d97706);
}

.request-stat-card.approved .request-stat-icon {
    background: linear-gradient(135deg, #10b981, #059669);
}

.request-stat-card.rejected .request-stat-icon {
    background: linear-gradient(135deg, #ef4444, #dc2626);
}

.request-stat-number {
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: 5px;
    color: #1f2937;
    line-height: 1;
}

.request-stat-label {
    font-size: 0.875rem;
    font-weight: 500;
    color: #6b7280;
    text-transform: uppercase;
    letter-spacing: 0.05em;
}

.request-stat-change {
    font-size: 0.75rem;
    margin-top: 8px;
    padding: 2px 8px;
    border-radius: 12px;
    font-weight: 500;
}

.request-stat-change.increase {
    background-color: #dcfce7;
    color: #166534;
}

.request-stat-change.decrease {
    background-color: #fecaca;
    color: #dc2626;
}

.request-stat-change.neutral {
    background-color: #f3f4f6;
    color: #6b7280;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .training-request-stats {
        grid-template-columns: 1fr;
        gap: 15px;
    }
    
    .request-stat-card {
        padding: 15px;
    }
    
    .request-stat-number {
        font-size: 1.75rem;
    }
}

/* Additional CSS for employee assignment section */
.employee-assignment-header {
    background-color: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 15px;
}

.assigned-employees-container {
    background-color: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    padding: 15px;
    margin-top: 10px;
}

.assigned-employees-list {
    max-height: 200px;
    overflow-y: auto;
}

.assigned-employee-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: white;
    border: 1px solid #e2e8f0;
    border-radius: 6px;
    padding: 12px 15px;
    margin-bottom: 8px;
    transition: all 0.2s ease;
}

.assigned-employee-item:hover {
    border-color: #07ACB9;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.assigned-employee-info {
    flex: 1;
}

.assigned-employee-name {
    font-weight: 600;
    color: #334155;
    margin-bottom: 2px;
}

.assigned-employee-details {
    font-size: 13px;
    color: #64748b;
}

.assigned-employee-due {
    font-size: 12px;
    color: #07ACB9;
    font-weight: 500;
    margin-right: 10px;
}

.remove-assignment-btn {
    background-color: #ef4444;
    color: white;
    border: none;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    cursor: pointer;
    font-size: 12px;
    font-weight: bold;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s ease;
}

.remove-assignment-btn:hover {
    background-color: #dc2626;
}

.no-assignments-message {
    text-align: center;
    color: #64748b;
    font-style: italic;
    padding: 20px;
    background-color: #f1f5f9;
    border-radius: 6px;
    border: 1px dashed #cbd5e1;
}

/* Enhanced form styling */
.form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
}

@media (max-width: 768px) {
    .form-row {
        grid-template-columns: 1fr;
        gap: 15px;
    }
    
    .employee-assignment-header .form-row {
        grid-template-columns: 1fr;
    }
    
    .employee-assignment-header .form-input {
        margin-left: 0 !important;
        margin-top: 10px;
    }
}

</style>

</head>
<body>
    <%- include('../../partials/linemanager_partials') %>
    
    <!-- Main content area -->
    <div class="main-content">
        <div class="dashboard-header">
            <h2>Employee Training & Development Tracker</h2>
            <p>Manage training courses, track employee progress, and oversee professional development initiatives.</p>
        </div>

       <!-- Enhanced Add New Training Modal with Employee Assignment -->
<div class="modal-overlay" id="addTrainingModal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 class="modal-title">Add New Training Course</h2>
        </div>
        
        <form id="addTrainingForm">
            <!-- Training Course Name -->
            <div class="form-group">
                <label class="form-label">Training Course Name:</label>
                <input type="text" class="form-input" id="courseName" placeholder="Enter training course name" required>
            </div>

            <!-- Description -->
            <div class="form-group">
                <label class="form-label">Description:</label>
                <textarea class="form-textarea" id="courseDescription" placeholder="Enter detailed description of the training course" required></textarea>
            </div>

            <!-- Job Positions and Training Mode -->
            <div class="form-row">
                <div class="form-group">
                    <label class="form-label">Job Positions Applicable:</label>
                    <select class="form-select" id="jobPositions" required>
                        <option value="">Select applicable positions</option>
                        <!-- Options will be populated dynamically -->
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="trainingMode">Training Mode <span style="color: red;">*</span></label>
                    <select id="trainingMode" name="trainingMode" required>
                        <option value="">Select Training Mode</option>
                        <option value="online">Online</option>
                        <option value="onsite">Onsite</option>
                    </select>
                </div>
            </div>

            <!-- Location fields for onsite training -->
            <div id="locationFields" class="location-fields">
                <div class="form-group">
                    <label for="countryDropdown">Country <span style="color: red;">*</span></label>
                    <select id="countryDropdown" name="country">
                        <option value="">Loading countries...</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="addressField">Address <span style="color: red;">*</span></label>
                    <textarea id="addressField" name="address" rows="3" placeholder="Enter the full address for the training venue"></textarea>
                </div>
            </div>

            <!-- Cost -->
            <div class="form-group">
                <label class="form-label">Cost (PHP):</label>
                <input type="number" class="form-input" id="trainingCost" placeholder="Enter training cost in Philippine Pesos (PHP)" min="0" step="0.01">
            </div>

            <!-- Employee Assignment Section -->
            <div class="form-group">
                <label class="form-label">Assign to Employees:</label>
                <div class="add-item-section">
                    <div class="employee-assignment-header">
                        <div class="form-row" style="margin-bottom: 15px;">
                            <select class="form-select" id="employeeDropdown" style="flex: 2;">
                                <option value="">Select employee to assign</option>
                                <!-- Options will be populated dynamically -->
                            </select>
                            <input type="date" class="form-input" id="assignmentDueDate" style="flex: 1; margin-left: 10px;" title="Due date for this assignment">
                        </div>
                        <button type="button" class="add-btn" onclick="assignEmployee()" style="width: 100%;">
                            <i class="fas fa-user-plus"></i> Assign Employee
                        </button>
                    </div>
                    
                    <!-- Assigned Employees List -->
                    <div class="assigned-employees-container">
                        <div class="assigned-employees-header" style="margin: 15px 0 10px 0; font-weight: 600; color: #334155;">
                            Assigned Employees (<span id="assignedCount">0</span>):
                        </div>
                        <div class="assigned-employees-list" id="assignedEmployeesList">
                            <!-- Assigned employees will appear here -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Focus on Objective Areas -->
            <div class="form-group">
                <label class="form-label">Objective Focus Areas:</label>
                <div class="add-item-section">
                    <div class="add-item-header">
                        <select class="add-item-input" id="objectiveDropdown">
                            <option value="">Select objective area</option>
                        </select>
                        <button type="button" class="add-btn" onclick="addObjective()">Add Objective</button>
                    </div>
                    <div class="pills-container" id="objectivesList"></div>
                </div>
            </div>

            <!-- Focus Skill Areas -->
            <div class="form-group">
                <label class="form-label">Skill Focus Areas:</label>
                <div class="add-item-section">
                    <div class="add-item-header">
                        <select class="add-item-input" id="skillDropdown">
                            <option value="">Select skill area</option>
                        </select>
                        <button type="button" class="add-btn" onclick="addSkill()">Add Skill Area</button>
                    </div>
                    <div class="pills-container" id="skillsList"></div>
                </div>
            </div>

            <!-- Total Duration Display -->
            <div class="duration-display">
                <div class="duration-label">Total Duration to Complete</div>
                <div class="duration-value"><span id="totalDuration">0</span></div>
            </div>

            <!-- Activities Needed -->
            <div class="form-group">
                <label class="form-label">Activities Needed:</label>
                <div class="add-item-section">
                    <div class="activity-form-grid">
                        <input type="text" class="add-item-input" id="moduleName" placeholder="Module name">
                        <input type="number" class="add-item-input" id="estimatedTime" placeholder="Estimated time (hours)" min="0" step="0.5">
                    </div>
                    <div class="activity-form-grid">
                        <select class="form-select" id="activityType">
                            <option value="">Select type</option>
                        </select>
                        <div class="activity-type-actions">
                            <button type="button" class="add-type-btn" onclick="showAddActivityTypeModal()">
                                <i class="fas fa-plus"></i> Add New Type
                            </button>
                        </div>
                    </div>
                    <input type="text" class="add-item-input" id="activityRemarks" placeholder="Remarks (optional)">
                    <button type="button" class="add-btn" onclick="addActivity()" style="width: 100%; margin-top: 10px;">Add Activity</button>
                    <div class="dynamic-list" id="activitiesList"></div>
                </div>
            </div>

            <!-- Certificates -->
            <div class="form-group">
                <label class="form-label">Certificate/s:</label>
                <div class="add-item-section">
                    <div class="activity-form-grid">
                        <input type="text" class="add-item-input" id="certificateTitle" placeholder="Enter certificate title">
                        <textarea class="add-item-input" id="certificateDescription" placeholder="Enter certificate description" style="min-height: 60px; resize: vertical;"></textarea>
                    </div>
                    <button type="button" class="add-btn" onclick="addCertificate()" style="width: 100%; margin-top: 10px;">Add Certificate</button>
                    <div class="dynamic-list" id="certificatesList"></div>
                </div>
            </div>

            <div class="modal-actions">
                <button type="button" class="btn-secondary" onclick="closeAddTrainingModal()">Cancel</button>
                <button type="submit" class="btn-primary">Create Training Course</button>
            </div>
        </form>
    </div>
</div>

<!-- Tabs Container -->
        <div class="tabs-container">
            <ul class="tabs-nav">
                <li><button class="tab-button active" data-tab="training-courses-tab">
                    <i class="fas fa-graduation-cap"></i> Training Courses
                </button></li>
                <li><button class="tab-button" data-tab="employee-assignments-tab">
                    <i class="fas fa-users"></i> View Employee Training Assignments
                </button></li>
            </ul>

            <!-- Tab Content -->
            <div class="tab-contents">
                <!-- Training Courses Tab -->
                <div id="training-courses-tab" class="tab-content active">
                    <div class="card">
                        <div class="card-header">
                            <h3>Available Training Courses</h3>
                        </div>
                        
                        <!-- Search and Filter Section -->
                        <div class="search-filter-section">
                            <div class="search-container">
                                <i class="fas fa-search search-icon"></i>
                                <input type="text" class="search-input" placeholder="Search training courses..." id="courseSearch">
                            </div>
                            
                            <div class="filter-dropdown" id="filter-dropdown">
                                <div class="filter-button" onclick="toggleFilterDropdown()">
                                    <i class="fas fa-filter"></i>
                                    <span>Filters</span>
                                    <i class="fas fa-chevron-down"></i>
                                </div>
                                <div class="filter-dropdown-content">
                                    <div class="filter-option">
                                        <input type="checkbox" id="filter-online" value="online" onchange="updateFilters()">
                                        <label for="filter-online">Online</label>
                                    </div>
                                    <div class="filter-option">
                                        <input type="checkbox" id="filter-onsite" value="onsite" onchange="updateFilters()">
                                        <label for="filter-onsite">Onsite</label>
                                    </div>
                                    <div class="filter-option">
                                        <input type="checkbox" id="filter-required" value="required" onchange="updateFilters()">
                                        <label for="filter-required">Required</label>
                                    </div>
                                </div>
                            </div>
                            
                            <button class="add-training-btn" onclick="addNewTraining()">
                                <i class="fas fa-plus"></i>
                                Add New Training
                            </button>
                        </div>

                        <!-- Active filters display -->
                        <div class="active-filters" id="active-filters"></div>

                       <!-- Training courses grid -->
<div class="training-courses-grid">
    <% if (typeof trainings !== 'undefined' && trainings && trainings.length > 0) { %>
        <% trainings.forEach(training => { %>
            <div class="training-course-card" data-type="<%= training.badges ? training.badges.join(' ') : '' %>">
                <h4 class="course-title"><%= training.title || 'Untitled Training' %></h4>
                <div class="course-description">
                    <%= training.description || 'No description available' %>
                </div>
                <div class="course-details">
                    Duration: <%= training.duration || 0 %> hours<br>
                    Department: <%= training.department || 'Not specified' %><br>
                    Job Position: <%= training.jobTitle || 'Not specified' %><br>
                    <% if (training.mode === 'onsite' && training.location) { %>
                        Location: <%= training.location.address || 'Address not specified' %>, <%= training.location.country || 'Country not specified' %><br>
                    <% } %>
                    <% if (training.cost && training.cost > 0) { %>
                        Cost: ₱<%= training.cost.toLocaleString() %>
                    <% } %>
                </div>
                <div class="course-badges">
                    <% if (training.badges && training.badges.length > 0) { %>
                        <% training.badges.forEach(badge => { %>
                            <span class="course-badge <%= badge %>"><%= badge.charAt(0).toUpperCase() + badge.slice(1) %></span>
                        <% }); %>
                    <% } %>
                </div>
            </div>
        <% }); %>
    <% } else { %>
        <div class="no-trainings-message" style="grid-column: 1 / -1; text-align: center; padding: 40px; color: #64748b;">
            <i class="fas fa-graduation-cap" style="font-size: 48px; margin-bottom: 15px; color: #cbd5e1;"></i>
            <h3 style="margin: 0 0 10px 0; color: #475569;">No Training Courses Available</h3>
            <p style="margin: 0;">Click "Add New Training" to create your first training course.</p>
        </div>
    <% } %>
</div>
                    </div>
                </div>

                <!-- Updated Employee Training Assignments Tab Content -->
<div id="employee-assignments-tab" class="tab-content">
    <div class="card">
        <div class="card-header">
            <h3>Employee Training Assignments</h3>
        </div>
        
        <!-- Training Request Statistics -->
        <div class="training-request-stats">
            <div class="request-stat-card pending">
                <div class="request-stat-icon">
                    <i class="fas fa-clock"></i>
                </div>
                <div class="request-stat-number" id="pendingRequestsCount">
                    <%
                    // Calculate pending requests count
                    let pendingCount = 0;
                    if (typeof assignments !== 'undefined' && assignments && assignments.length > 0) {
                        pendingCount = assignments.filter(assignment => 
                            assignment.status === 'not-started' || assignment.status === 'pending'
                        ).length;
                    } else {
                        // Sample data count for testing
                        pendingCount = 1; // From sample data: Mike Johnson - not-started
                    }
                    %>
                    <%= pendingCount %>
                </div>
                <div class="request-stat-label">Pending Requests</div>
                <div class="request-stat-change neutral">
                    <i class="fas fa-minus"></i> No change
                </div>
            </div>
            
            <div class="request-stat-card approved">
                <div class="request-stat-icon">
                    <i class="fas fa-check-circle"></i>
                </div>
                <div class="request-stat-number" id="approvedRequestsCount">
                    <%
                    // Calculate approved/in-progress requests count
                    let approvedCount = 0;
                    if (typeof assignments !== 'undefined' && assignments && assignments.length > 0) {
                        approvedCount = assignments.filter(assignment => 
                            assignment.status === 'in-progress' || assignment.status === 'approved'
                        ).length;
                    } else {
                        // Sample data count for testing
                        approvedCount = 1; // From sample data: John Doe - in-progress
                    }
                    %>
                    <%= approvedCount %>
                </div>
                <div class="request-stat-label">Approved Requests</div>
                <div class="request-stat-change increase">
                    <i class="fas fa-arrow-up"></i> +2 this week
                </div>
            </div>
            
            <div class="request-stat-card rejected">
                <div class="request-stat-icon">
                    <i class="fas fa-times-circle"></i>
                </div>
                <div class="request-stat-number" id="rejectedRequestsCount">
                    <%
                    // Calculate rejected requests count
                    let rejectedCount = 0;
                    if (typeof assignments !== 'undefined' && assignments && assignments.length > 0) {
                        rejectedCount = assignments.filter(assignment => 
                            assignment.status === 'rejected' || assignment.status === 'cancelled'
                        ).length;
                    } else {
                        // Sample data count for testing
                        rejectedCount = 0; // No rejected in sample data
                    }
                    %>
                    <%= rejectedCount %>
                </div>
                <div class="request-stat-label">Rejected Requests</div>
                <div class="request-stat-change decrease">
                    <i class="fas fa-arrow-down"></i> -1 this week
                </div>
            </div>
            
            <!-- Total Completed (Bonus stat) -->
            <div class="request-stat-card completed" style="--accent-color: #3b82f6;">
                <div class="request-stat-icon" style="background: linear-gradient(135deg, #3b82f6, #1d4ed8);">
                    <i class="fas fa-graduation-cap"></i>
                </div>
                <div class="request-stat-number" id="completedRequestsCount">
                    <%
                    // Calculate completed requests count
                    let completedCount = 0;
                    if (typeof assignments !== 'undefined' && assignments && assignments.length > 0) {
                        completedCount = assignments.filter(assignment => 
                            assignment.status === 'completed'
                        ).length;
                    } else {
                        // Sample data count for testing
                        completedCount = 1; // From sample data: Jane Smith - completed
                    }
                    %>
                    <%= completedCount %>
                </div>
                <div class="request-stat-label">Completed</div>
                <div class="request-stat-change increase">
                    <i class="fas fa-arrow-up"></i> +3 this week
                </div>
            </div>
        </div>
        
        <!-- Search and Filter Section -->
        <div class="search-filter-section">
            <div class="search-container">
                <i class="fas fa-search search-icon"></i>
                <input type="text" class="search-input" placeholder="Search employees..." id="employeeSearch">
            </div>
            
            <div class="filter-dropdown" id="status-filter-dropdown">
                <div class="filter-button" onclick="toggleStatusFilterDropdown()">
                    <i class="fas fa-filter"></i>
                    <span>Status</span>
                    <i class="fas fa-chevron-down"></i>
                </div>
                <div class="filter-dropdown-content">
                    <div class="filter-option">
                        <input type="checkbox" id="filter-in-progress" value="in-progress" onchange="updateStatusFilters()">
                        <label for="filter-in-progress">In Progress</label>
                    </div>
                    <div class="filter-option">
                        <input type="checkbox" id="filter-completed" value="completed" onchange="updateStatusFilters()">
                        <label for="filter-completed">Completed</label>
                    </div>
                    <div class="filter-option">
                        <input type="checkbox" id="filter-not-started" value="not-started" onchange="updateStatusFilters()">
                        <label for="filter-not-started">Not Started</label>
                    </div>
                </div>
            </div>
        </div>

                       <!-- Employee assignments list -->
<div class="assignments-list">
    <%
    // Debug: Check if assignments variable exists and log it
    let hasAssignments = false;
    let assignmentsToShow = [];
    
    if (typeof assignments !== 'undefined' && assignments && assignments.length > 0) {
        hasAssignments = true;
        assignmentsToShow = assignments;
    } else {
        // Fallback sample data for testing
        assignmentsToShow = [
            {
                employeeId: 'john-doe',
                employeeName: 'John Doe',
                trainingTitle: 'JavaScript Fundamentals',
                jobTitle: 'Frontend Developer',
                status: 'in-progress',
                progress: 75,
                startDate: new Date('2024-01-15')
            },
            {
                employeeId: 'jane-smith',
                employeeName: 'Jane Smith',
                trainingTitle: 'Safety Training',
                jobTitle: 'Operations Manager',
                status: 'completed',
                progress: 100,
                startDate: new Date('2024-01-10')
            },
            {
                employeeId: 'mike-johnson',
                employeeName: 'Mike Johnson',
                trainingTitle: 'Data Analysis Bootcamp',
                jobTitle: 'Data Analyst',
                status: 'not-started',
                progress: 0,
                startDate: new Date('2024-01-20'),
                dueDate: new Date('2024-02-20')
            }
        ];
    }
    %>
    
    <!-- Debug info (remove in production) -->
    <% if (!hasAssignments) { %>
        <div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 10px; margin-bottom: 20px; border-radius: 5px; font-size: 12px; color: #856404;">
            <strong>Debug Info:</strong> No assignments data from server. Showing sample data for testing.
            <br>Server assignments variable: <%= typeof assignments %> 
            <% if (typeof assignments !== 'undefined') { %>
                (length: <%= assignments ? assignments.length : 'null' %>)
            <% } %>
        </div>
    <% } %>
    
    <% if (assignmentsToShow && assignmentsToShow.length > 0) { %>
        <% assignmentsToShow.forEach(assignment => { %>
            <div class="assignment-item" data-status="<%= assignment.status %>" onclick="openEmployeeModal('<%= assignment.employeeId %>')">
                <div class="assignment-info">
                    <h4 class="employee-name"><%= assignment.employeeName %></h4>
                    <div class="assignment-details">
                        Training: <%= assignment.trainingTitle %><br>
                        Job Title: <%= assignment.jobTitle %><br>
                        <% if (assignment.status === 'completed') { %>
                            Completed: <%= assignment.startDate ? assignment.startDate.toLocaleDateString() : 'Date not available' %> • Progress: <%= assignment.progress || 0 %>%
                        <% } else if (assignment.status === 'in-progress') { %>
                            Progress: <%= assignment.progress || 0 %>% • Started: <%= assignment.startDate ? assignment.startDate.toLocaleDateString() : 'Date not available' %>
                        <% } else { %>
                            Assigned: <%= assignment.startDate ? assignment.startDate.toLocaleDateString() : 'Date not available' %> • Due: <%= assignment.dueDate ? assignment.dueDate.toLocaleDateString() : 'No due date' %>
                        <% } %>
                    </div>
                </div>
                <div class="assignment-status">
                    <span class="status-badge <%= assignment.status %>">
                        <% if (assignment.status === 'in-progress') { %>In Progress
                        <% } else if (assignment.status === 'completed') { %>Completed
                        <% } else { %>Not Started<% } %>
                    </span>
                </div>
            </div>
        <% }); %>
    <% } else { %>
        <div class="no-assignments-message" style="text-align: center; padding: 40px; color: #64748b;">
            <i class="fas fa-users" style="font-size: 48px; margin-bottom: 15px; color: #cbd5e1;"></i>
            <h3 style="margin: 0 0 10px 0; color: #475569;">No Training Assignments</h3>
            <p style="margin: 0;">Training assignments will appear here once employees are enrolled in courses.</p>
        </div>
    <% } %>
</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Employee Training Details Modal -->
        <div class="modal-overlay" id="employeeTrainingModal">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Employee Training Details</h2>
                </div>
                
                <!-- Employee Information Section -->
                <div class="employee-info-section">
                    <div class="employee-header">
                        <div class="employee-avatar" id="employeeAvatar">JD</div>
                        <div class="employee-details">
                            <h3 id="employeeName">John Doe</h3>
                            <div class="employee-job-role" id="employeeJobRole">Software Engineer</div>
                            <div class="employee-email" id="employeeEmail">john.doe@company.com</div>
                        </div>
                    </div>
                </div>

                <!-- Training Statistics -->
                <div class="training-stats">
                    <div class="stat-card in-progress">
                        <div class="stat-number" id="inProgressCount">2</div>
                        <div class="stat-label">IN PROGRESS</div>
                    </div>
                    <div class="stat-card completed">
                        <div class="stat-number" id="completedCount">5</div>
                        <div class="stat-label">COMPLETED</div>
                    </div>
                    <div class="stat-card overdue">
                        <div class="stat-number" id="overdueCount">1</div>
                        <div class="stat-label">OVERDUE</div>
                    </div>
                </div>

                <!-- Training Progress List -->
                <div class="training-progress-list" id="employeeTrainingList">
                    <!-- Training items will be populated by JavaScript -->
                </div>

                <div class="modal-actions">
                    <button type="button" class="btn-secondary" onclick="closeEmployeeTrainingModal()">Close</button>
                    <button type="button" class="btn-primary" onclick="assignNewTraining()">Assign New Training</button>
                    <button type="button" class="btn-primary" onclick="visitPerformanceTracker()">Visit Performance Tracker</button>
                </div>
            </div>
        </div>

    <!-- JavaScript for functionality -->
    <script>

        // Employee assignment functionality
let assignedEmployees = [];
let allEmployees = [];

// Function to load employees from backend
async function loadEmployees() {
    try {
        console.log('Loading employees...');
        
        const response = await fetch('/hr/employees', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
            credentials: 'include'
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            allEmployees = result.data;
            populateEmployeeDropdown(allEmployees);
            console.log(`Loaded ${allEmployees.length} employees`);
        } else {
            console.error('Failed to load employees:', result.message);
            // Fallback to demo data
            loadDemoEmployees();
        }
    } catch (error) {
        console.error('Error loading employees:', error);
        // Fallback to demo data
        loadDemoEmployees();
    }
}

// Fallback demo employees
function loadDemoEmployees() {
    allEmployees = [
        {
            id: 'emp1',
            firstName: 'John',
            lastName: 'Doe',
            fullName: 'John Doe',
            email: 'john.doe@company.com',
            jobTitle: 'Software Engineer',
            department: 'IT'
        },
        {
            id: 'emp2',
            firstName: 'Jane',
            lastName: 'Smith',
            fullName: 'Jane Smith',
            email: 'jane.smith@company.com',
            jobTitle: 'Operations Manager',
            department: 'Operations'
        },
        {
            id: 'emp3',
            firstName: 'Mike',
            lastName: 'Johnson',
            fullName: 'Mike Johnson',
            email: 'mike.johnson@company.com',
            jobTitle: 'Data Analyst',
            department: 'Analytics'
        },
        {
            id: 'emp4',
            firstName: 'Sarah',
            lastName: 'Wilson',
            fullName: 'Sarah Wilson',
            email: 'sarah.wilson@company.com',
            jobTitle: 'HR Specialist',
            department: 'Human Resources'
        },
        {
            id: 'emp5',
            firstName: 'David',
            lastName: 'Brown',
            fullName: 'David Brown',
            email: 'david.brown@company.com',
            jobTitle: 'Marketing Manager',
            department: 'Marketing'
        }
    ];
    
    populateEmployeeDropdown(allEmployees);
    console.log('Loaded demo employees data');
}

// Populate employee dropdown
function populateEmployeeDropdown(employees) {
    const employeeDropdown = document.getElementById('employeeDropdown');
    if (!employeeDropdown) return;
    
    // Clear existing options except the first one
    employeeDropdown.innerHTML = '<option value="">Select employee to assign</option>';
    
    // Sort employees alphabetically by name
    const sortedEmployees = employees.sort((a, b) => {
        const nameA = (a.fullName || `${a.firstName} ${a.lastName}`).toUpperCase();
        const nameB = (b.fullName || `${b.firstName} ${b.lastName}`).toUpperCase();
        return nameA.localeCompare(nameB);
    });
    
    sortedEmployees.forEach(employee => {
        const option = document.createElement('option');
        option.value = employee.id;
        option.textContent = `${employee.fullName || `${employee.firstName} ${employee.lastName}`} - ${employee.jobTitle || 'No Title'}`;
        option.setAttribute('data-employee-name', employee.fullName || `${employee.firstName} ${employee.lastName}`);
        option.setAttribute('data-employee-email', employee.email || '');
        option.setAttribute('data-job-title', employee.jobTitle || '');
        option.setAttribute('data-department', employee.department || '');
        employeeDropdown.appendChild(option);
    });
}

// Filter employees based on selected job position
function filterEmployeesByJob() {
    const jobPositionSelect = document.getElementById('jobPositions');
    const selectedJobId = jobPositionSelect.value;
    
    if (!selectedJobId) {
        // Show all employees if no job position selected
        populateEmployeeDropdown(allEmployees);
        return;
    }
    
    // Filter employees by job position
    const filteredEmployees = allEmployees.filter(employee => 
        employee.jobId === parseInt(selectedJobId) || employee.job_id === parseInt(selectedJobId)
    );
    
    console.log(`Filtering employees by job ID ${selectedJobId}: found ${filteredEmployees.length} employees`);
    
    if (filteredEmployees.length === 0) {
        // If no employees found for this job position, show all with a message
        populateEmployeeDropdown(allEmployees);
        console.log('No employees found for selected job position, showing all employees');
    } else {
        populateEmployeeDropdown(filteredEmployees);
    }
}

// Assign employee function
function assignEmployee() {
    const employeeDropdown = document.getElementById('employeeDropdown');
    const dueDateInput = document.getElementById('assignmentDueDate');
    
    const selectedEmployeeId = employeeDropdown.value;
    const selectedOption = employeeDropdown.options[employeeDropdown.selectedIndex];
    const dueDate = dueDateInput.value;
    
    if (!selectedEmployeeId) {
        alert('Please select an employee to assign.');
        return;
    }
    
    // Check if employee is already assigned
    if (assignedEmployees.find(emp => emp.id === selectedEmployeeId)) {
        alert('This employee has already been assigned to this training.');
        return;
    }
    
    // Validate due date (optional, but if provided should be in the future)
    if (dueDate && new Date(dueDate) < new Date()) {
        const proceed = confirm('The due date is in the past. Do you want to continue?');
        if (!proceed) return;
    }
    
    const employee = {
        id: selectedEmployeeId,
        name: selectedOption.getAttribute('data-employee-name'),
        email: selectedOption.getAttribute('data-employee-email'),
        jobTitle: selectedOption.getAttribute('data-job-title'),
        department: selectedOption.getAttribute('data-department'),
        dueDate: dueDate || null,
        assignedDate: new Date().toISOString().split('T')[0]
    };
    
    assignedEmployees.push(employee);
    updateAssignedEmployeesDisplay();
    
    // Reset dropdowns
    employeeDropdown.value = '';
    dueDateInput.value = '';
    
    console.log('Employee assigned:', employee);
    console.log('Total assigned employees:', assignedEmployees.length);
}

// Update assigned employees display
function updateAssignedEmployeesDisplay() {
    const assignedEmployeesList = document.getElementById('assignedEmployeesList');
    const assignedCount = document.getElementById('assignedCount');
    
    if (!assignedEmployeesList || !assignedCount) return;
    
    assignedCount.textContent = assignedEmployees.length;
    
    if (assignedEmployees.length === 0) {
        assignedEmployeesList.innerHTML = `
            <div class="no-assignments-message">
                <i class="fas fa-users" style="margin-bottom: 8px; font-size: 18px;"></i><br>
                No employees assigned yet. Select employees from the dropdown above.
            </div>
        `;
        return;
    }
    
    assignedEmployeesList.innerHTML = '';
    
    assignedEmployees.forEach((employee, index) => {
        const employeeItem = document.createElement('div');
        employeeItem.className = 'assigned-employee-item';
        
        const dueDateText = employee.dueDate 
            ? `Due: ${new Date(employee.dueDate).toLocaleDateString()}`
            : 'No due date set';
        
        employeeItem.innerHTML = `
            <div class="assigned-employee-info">
                <div class="assigned-employee-name">${employee.name}</div>
                <div class="assigned-employee-details">
                    ${employee.jobTitle} • ${employee.department || 'N/A'} • ${employee.email}
                </div>
            </div>
            <div class="assigned-employee-due">${dueDateText}</div>
            <button type="button" class="remove-assignment-btn" onclick="removeAssignedEmployee(${index})" title="Remove assignment">
                ×
            </button>
        `;
        
        assignedEmployeesList.appendChild(employeeItem);
    });
}

// Remove assigned employee
function removeAssignedEmployee(index) {
    const employee = assignedEmployees[index];
    const confirmRemove = confirm(`Remove ${employee.name} from this training assignment?`);
    
    if (confirmRemove) {
        assignedEmployees.splice(index, 1);
        updateAssignedEmployeesDisplay();
        console.log('Employee removed from assignment');
    }
}

// Enhanced form submission to include assigned employees
document.addEventListener('DOMContentLoaded', function() {
    // Load employees when modal opens
    const addTrainingModal = document.getElementById('addTrainingModal');
    const originalAddNewTraining = window.addNewTraining;
    
    window.addNewTraining = function() {
        // Reset assigned employees
        assignedEmployees = [];
        updateAssignedEmployeesDisplay();
        
        // Load employees
        loadEmployees();
        
        // Call original function
        if (originalAddNewTraining) {
            originalAddNewTraining();
        }
    };
    
    // Add event listener for job position changes to filter employees
    const jobPositionsSelect = document.getElementById('jobPositions');
    if (jobPositionsSelect) {
        jobPositionsSelect.addEventListener('change', function() {
            // Call existing job position change handler
            if (window.onJobPositionChange) {
                window.onJobPositionChange();
            }
            // Filter employees by job position
            filterEmployeesByJob();
        });
    }
    
    // Enhanced form submission
    const addTrainingForm = document.getElementById('addTrainingForm');
    if (addTrainingForm) {
        addTrainingForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Get all existing form data
            const courseName = document.getElementById('courseName').value.trim();
            const courseDescription = document.getElementById('courseDescription').value.trim();
            const jobPosition = document.getElementById('jobPositions').value;
            const trainingMode = document.getElementById('trainingMode').value;
            const trainingCost = document.getElementById('trainingCost').value;
            
            // Enhanced validation including employee assignments
            const errors = [];
            
            if (!courseName) errors.push('Course name is required');
            if (!courseDescription) errors.push('Course description is required');
            if (!jobPosition) errors.push('Job position must be selected');
            if (!trainingMode) errors.push('Training mode must be selected');
            
            if (selectedObjectives.length === 0 && selectedSkills.length === 0) {
                errors.push('You must select at least one Objective Focus Area OR one Skill Focus Area');
            }
            
            if (addedActivities.length === 0) {
                errors.push('At least one activity must be added');
            }
            
            // Validate employee assignments
            if (assignedEmployees.length === 0) {
                errors.push('You must assign at least one employee to this training');
            }
            
            // Location validation for onsite training
            if (trainingMode === 'onsite') {
                const country = document.getElementById('countryDropdown').value;
                const address = document.getElementById('addressField').value.trim();
                
                if (!country) errors.push('Country must be selected for onsite training');
                if (!address) errors.push('Address must be provided for onsite training');
            }
            
            if (errors.length > 0) {
                alert('Please fix the following errors:\n\n' + errors.join('\n'));
                return;
            }
            
            // Calculate total duration
            const calculatedTotalDuration = addedActivities.reduce((sum, activity) => {
                return sum + (parseFloat(activity.duration) || 0);
            }, 0);
            
            // Prepare form data including assigned employees
            const formData = {
                trainingName: courseName,
                trainingDesc: courseDescription,
                jobId: parseInt(jobPosition),
                objectives: selectedObjectives.map(obj => parseInt(obj.id)),
                skills: selectedSkills.map(skill => parseInt(skill.id)),
                isOnlineArrangement: trainingMode === 'online',
                cost: parseFloat(trainingCost) || 0,
                totalDuration: calculatedTotalDuration,
                activities: addedActivities.map(activity => ({
                    name: activity.name,
                    duration: parseFloat(activity.duration),
                    type: activity.type,
                    remarks: activity.remarks || ''
                })),
                certifications: addedCertificates.map(cert => ({
                    title: cert.title,
                    description: cert.description
                })),
                // Include assigned employees
                assignedEmployees: assignedEmployees.map(emp => ({
                    employeeId: emp.id,
                    dueDate: emp.dueDate,
                    assignedDate: emp.assignedDate
                }))
            };
            
            // Add location data for onsite training
            if (trainingMode === 'onsite') {
                formData.country = document.getElementById('countryDropdown').value;
                formData.address = document.getElementById('addressField').value.trim();
            } else {
                formData.country = null;
                formData.address = null;
            }
            
            console.log('Final form data with assignments:', formData);
            
            // Show loading state
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            submitBtn.textContent = 'Creating...';
            submitBtn.disabled = true;
            
            // Submit to backend
            fetch('/linemanager/training', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(`Training course created successfully!\n\nAssigned to ${assignedEmployees.length} employee(s).`);
                    closeAddTrainingModal();
                    
                    // Reset form and arrays
                    this.reset();
                    selectedObjectives = [];
                    selectedSkills = [];
                    addedActivities = [];
                    addedCertificates = [];
                    assignedEmployees = [];
                    
                    // Clear displays
                    document.getElementById('objectivesList').innerHTML = '';
                    document.getElementById('skillsList').innerHTML = '';
                    document.getElementById('activitiesList').innerHTML = '';
                    document.getElementById('certificatesList').innerHTML = '';
                    document.getElementById('totalDuration').textContent = '0';
                    updateAssignedEmployeesDisplay();
                    
                    // Reset location fields
                    document.getElementById('locationFields').classList.remove('show');
                    
                    // Refresh page to show new training and assignments
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    alert('Error creating training course:\n\n' + (data.message || 'Unknown error occurred'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error creating training course. Please try again.\n\nError: ' + error.message);
            })
            .finally(() => {
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;
            });
        });
    }
});

        // Function to update statistics based on current assignments
function updateTrainingStats() {
    const assignmentItems = document.querySelectorAll('.assignment-item');
    
    let pendingCount = 0;
    let approvedCount = 0;
    let rejectedCount = 0;
    let completedCount = 0;
    
    assignmentItems.forEach(item => {
        const status = item.getAttribute('data-status');
        
        switch(status) {
            case 'not-started':
            case 'pending':
                pendingCount++;
                break;
            case 'in-progress':
            case 'approved':
                approvedCount++;
                break;
            case 'rejected':
            case 'cancelled':
                rejectedCount++;
                break;
            case 'completed':
                completedCount++;
                break;
        }
    });
    
    // Update the counts in the DOM
    const pendingElement = document.getElementById('pendingRequestsCount');
    const approvedElement = document.getElementById('approvedRequestsCount');
    const rejectedElement = document.getElementById('rejectedRequestsCount');
    const completedElement = document.getElementById('completedRequestsCount');
    
    if (pendingElement) pendingElement.textContent = pendingCount;
    if (approvedElement) approvedElement.textContent = approvedCount;
    if (rejectedElement) rejectedElement.textContent = rejectedCount;
    if (completedElement) completedElement.textContent = completedCount;
}

// Call this function whenever the assignment list is updated
document.addEventListener('DOMContentLoaded', function() {
    // Update stats when page loads
    setTimeout(updateTrainingStats, 100);
    
    // Update stats when filters are applied
    const originalUpdateStatusFilters = window.updateStatusFilters;
    window.updateStatusFilters = function() {
        originalUpdateStatusFilters();
        setTimeout(updateTrainingStats, 50);
    };
});

        // Arrays to store selected objectives and skills
        let selectedObjectives = [];
        let selectedSkills = [];
        let addedActivities = [];
        let addedCertificates = [];
        let countriesData = [];
        let allFormData = {
            jobPositions: [],
            objectives: [],
            skills: [],
            activityTypes: []
        };


        document.addEventListener('DOMContentLoaded', () => {
            // Tab functionality
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabContents = document.querySelectorAll('.tab-content');

            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    // Remove active class from all buttons and contents
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    tabContents.forEach(content => content.classList.remove('active'));

                    // Add active class to clicked button
                    button.classList.add('active');

                    // Show corresponding content
                    const tabId = button.getAttribute('data-tab');
                    document.getElementById(tabId).classList.add('active');
                });
            });

            // Search functionality for courses
            document.getElementById('courseSearch').addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                const courseCards = document.querySelectorAll('.training-course-card');
                
                courseCards.forEach(card => {
                    const title = card.querySelector('.course-title').textContent.toLowerCase();
                    const details = card.querySelector('.course-details').textContent.toLowerCase();
                    
                    if (title.includes(searchTerm) || details.includes(searchTerm)) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });
            });

            // Search functionality for employees
            document.getElementById('employeeSearch').addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                const assignmentItems = document.querySelectorAll('.assignment-item');
                
                assignmentItems.forEach(item => {
                    const name = item.querySelector('.employee-name').textContent.toLowerCase();
                    const details = item.querySelector('.assignment-details').textContent.toLowerCase();
                    
                    if (name.includes(searchTerm) || details.includes(searchTerm)) {
                        item.style.display = 'flex';
                    } else {
                        item.style.display = 'none';
                    }
                });
            });


// Get modal element
const addTrainingModal = document.getElementById('addTrainingModal');

// Load dropdown data when modal is opened
document.querySelector('.add-training-btn').addEventListener('click', function() {
    loadTrainingFormData();
});
        });

        // Filter dropdown functionality
        function toggleFilterDropdown() {
            const dropdown = document.getElementById('filter-dropdown');
            dropdown.classList.toggle('open');
        }

        function toggleStatusFilterDropdown() {
            const dropdown = document.getElementById('status-filter-dropdown');
            dropdown.classList.toggle('open');
        }

        // Close dropdowns when clicking outside
        document.addEventListener('click', function(event) {
            const filterDropdown = document.getElementById('filter-dropdown');
            const statusFilterDropdown = document.getElementById('status-filter-dropdown');
            
            if (!filterDropdown.contains(event.target)) {
                filterDropdown.classList.remove('open');
            }
            
            if (!statusFilterDropdown.contains(event.target)) {
                statusFilterDropdown.classList.remove('open');
            }
        });

        // Update filters for training courses
        function updateFilters() {
            const activeFilters = [];
            const checkboxes = document.querySelectorAll('#filter-dropdown input[type="checkbox"]:checked');
            
            checkboxes.forEach(checkbox => {
                activeFilters.push(checkbox.value);
            });
            
            updateActiveFiltersDisplay(activeFilters);
            filterCourses(activeFilters);
        }

        // Update filters for employee assignments
        function updateStatusFilters() {
            const activeFilters = [];
            const checkboxes = document.querySelectorAll('#status-filter-dropdown input[type="checkbox"]:checked');
            
            checkboxes.forEach(checkbox => {
                activeFilters.push(checkbox.value);
            });
            
            filterAssignments(activeFilters);
        }

        // Display active filters
        function updateActiveFiltersDisplay(filters) {
            const activeFiltersContainer = document.getElementById('active-filters');
            activeFiltersContainer.innerHTML = '';
            
            filters.forEach(filter => {
                const filterTag = document.createElement('div');
                filterTag.className = 'filter-tag';
                filterTag.innerHTML = `
                    ${filter.charAt(0).toUpperCase() + filter.slice(1)}
                    <span class="remove-filter" onclick="removeFilter('${filter}')">×</span>
                `;
                activeFiltersContainer.appendChild(filterTag);
            });
        }

        // Remove individual filter
        function removeFilter(filterToRemove) {
            const checkbox = document.getElementById(`filter-${filterToRemove}`);
            if (checkbox) {
                checkbox.checked = false;
                updateFilters();
            }
        }

        // Filter courses based on selected filters
        function filterCourses(activeFilters) {
            const courseCards = document.querySelectorAll('.training-course-card');
            
            courseCards.forEach(card => {
                if (activeFilters.length === 0) {
                    card.style.display = 'block';
                } else {
                    const cardTypes = card.getAttribute('data-type') || '';
                    const hasMatchingFilter = activeFilters.some(filter => 
                        cardTypes.includes(filter)
                    );
                    
                    card.style.display = hasMatchingFilter ? 'block' : 'none';
                }
            });
        }

        // Filter assignments based on status
        function filterAssignments(activeFilters) {
            const assignmentItems = document.querySelectorAll('.assignment-item');
            
            assignmentItems.forEach(item => {
                if (activeFilters.length === 0) {
                    item.style.display = 'flex';
                } else {
                    const itemStatus = item.getAttribute('data-status');
                    const hasMatchingStatus = activeFilters.includes(itemStatus);
                    
                    item.style.display = hasMatchingStatus ? 'flex' : 'none';
                }
            });
        }

        // ============================
        // ADD TRAINING MODULE SCRIPTS
        // ============================


        // Add new training function
   // Open modal function
function addNewTraining() {
    // Reset form and arrays
    selectedObjectives = [];
    selectedSkills = [];
    addedActivities = [];
    addedCertificates = [];
    
    // Clear form fields
    const form = document.getElementById('addTrainingForm');
    if (form) {
        form.reset();
    }
    
    // Clear displayed items
    updateObjectivesDisplay();
    updateSkillsDisplay();
    updateActivitiesDisplay();
    updateCertificatesDisplay();
    
    const totalDurationElement = document.getElementById('totalDuration');
    if (totalDurationElement) {
        totalDurationElement.textContent = '0';
    }
    
    // Load dropdown data
    loadTrainingFormData();
    
    const modal = document.getElementById('addTrainingModal');
    if (modal) {
        modal.classList.add('show');
    }
}



// Enhanced objective addition with validation
function addObjective() {
    const objectiveDropdown = document.getElementById('objectiveDropdown');
    const selectedValue = objectiveDropdown.value;
    const selectedOption = objectiveDropdown.options[objectiveDropdown.selectedIndex];
    
    console.log('Adding objective:', selectedValue, selectedOption.text);
    
    if (!selectedValue) {
        alert('Please select an objective from the dropdown.');
        return;
    }
    
    if (selectedObjectives.find(obj => obj.id === selectedValue)) {
        alert('This objective has already been added.');
        return;
    }
    
    const objective = {
        id: selectedValue,
        text: selectedOption.getAttribute('data-objective-desc') || selectedOption.text
    };
    
    selectedObjectives.push(objective);
    updateObjectivesDisplay();
    objectiveDropdown.value = ''; // Reset dropdown
    
    console.log('Objective added. Current objectives:', selectedObjectives);
}

// Update objectives display
function updateObjectivesDisplay() {
    const objectivesList = document.getElementById('objectivesList');
    objectivesList.innerHTML = '';
    
    selectedObjectives.forEach(objective => {
        const pillTag = document.createElement('div');
        pillTag.className = 'pill-tag';
        pillTag.innerHTML = `
            ${objective.text}
            <span class="remove-pill" onclick="removeObjective('${objective.id}')">×</span>
        `;
        objectivesList.appendChild(pillTag);
    });
}

// Remove objective function
function removeObjective(objectiveIdToRemove) {
    selectedObjectives = selectedObjectives.filter(obj => obj.id !== objectiveIdToRemove);
    updateObjectivesDisplay();
}

// Enhanced skill addition with validation
function addSkill() {
    const skillDropdown = document.getElementById('skillDropdown');
    const selectedValue = skillDropdown.value;
    const selectedOption = skillDropdown.options[skillDropdown.selectedIndex];
    
    console.log('Adding skill:', selectedValue, selectedOption.text);
    
    if (!selectedValue) {
        alert('Please select a skill from the dropdown.');
        return;
    }
    
    if (selectedSkills.find(skill => skill.id === selectedValue)) {
        alert('This skill has already been added.');
        return;
    }
    
    const skill = {
        id: selectedValue,
        text: selectedOption.getAttribute('data-name') + ' (' + selectedOption.getAttribute('data-type') + ')' || selectedOption.text
    };
    
    selectedSkills.push(skill);
    updateSkillsDisplay();
    skillDropdown.value = ''; // Reset dropdown
    
    console.log('Skill added. Current skills:', selectedSkills);
}
function updateSkillsDisplay() {
    const skillsList = document.getElementById('skillsList');
    skillsList.innerHTML = '';
    
    selectedSkills.forEach(skill => {
        const pillTag = document.createElement('div');
        pillTag.className = 'pill-tag';
        pillTag.innerHTML = `
            ${skill.text}
            <span class="remove-pill" onclick="removeSkill('${skill.id}')">×</span>
        `;
        skillsList.appendChild(pillTag);
    });
}

// Remove skill function
function removeSkill(skillIdToRemove) {
    selectedSkills = selectedSkills.filter(skill => skill.id !== skillIdToRemove);
    updateSkillsDisplay();
}

// Add activity function
function addActivity() {
    const moduleName = document.getElementById('moduleName').value.trim();
    const estimatedTime = document.getElementById('estimatedTime').value.trim();
    const activityType = document.getElementById('activityType').value;
    const remarks = document.getElementById('activityRemarks').value.trim();
    
    if (!moduleName || !estimatedTime || !activityType) {
        alert('Please fill in module name, estimated time, and activity type.');
        return;
    }
    
    const activity = {
        name: moduleName,
        duration: parseFloat(estimatedTime),
        type: activityType,
        remarks: remarks
    };
    
    addedActivities.push(activity);
    updateActivitiesDisplay();
    calculateTotalDuration();
    
    // Clear fields
    document.getElementById('moduleName').value = '';
    document.getElementById('estimatedTime').value = '';
    document.getElementById('activityType').value = '';
    document.getElementById('activityRemarks').value = '';
}

// Update activities display
function updateActivitiesDisplay() {
    const activitiesList = document.getElementById('activitiesList');
    if (!activitiesList) return;
    
    activitiesList.innerHTML = '';
    
    addedActivities.forEach((activity, index) => {
        const activityItem = document.createElement('div');
        activityItem.className = 'activity-item';
        activityItem.innerHTML = `
            <div class="activity-details">
                <strong>${activity.name}</strong><br>
                <span>Time: ${activity.duration} hours • Type: ${activity.type}</span><br>
                ${activity.remarks ? `<span>Remarks: ${activity.remarks}</span>` : ''}
            </div>
            <button type="button" class="remove-btn" onclick="removeActivity(${index})">×</button>
        `;
        activitiesList.appendChild(activityItem);
    });
}

// Submit training form
async function submitTrainingForm(event) {
    event.preventDefault();
    
    const locationData = getLocationData();

    // Add this debug code right before you prepare the formData object:

console.log('=== LOCATION DEBUG ===');
console.log('Training mode:', trainingMode);

if (trainingMode === 'onsite') {
    const countryElement = document.getElementById('countryDropdown');
    const addressElement = document.getElementById('addressField');
    
    console.log('Country element found:', !!countryElement);
    console.log('Address element found:', !!addressElement);
    
    if (countryElement) {
        console.log('Country value:', countryElement.value);
        console.log('Country options count:', countryElement.options.length);
    }
    
    if (addressElement) {
        console.log('Address value:', addressElement.value);
    }
}

const formData = {
    trainingName: courseName,
    trainingDesc: courseDescription,
    jobId: parseInt(jobPosition),
    objectives: selectedObjectives.map(obj => parseInt(obj.id)),
    skills: selectedSkills.map(skill => parseInt(skill.id)),
    isOnlineArrangement: trainingMode === 'online',
    cost: parseFloat(trainingCost) || 0,
    totalDuration: calculatedTotalDuration,
    activities: addedActivities.map(activity => ({
        name: activity.name,
        duration: parseFloat(activity.duration),
        type: activity.type,
        remarks: activity.remarks || ''
    })),
    certifications: addedCertificates.map(cert => ({
        title: cert.title,
        description: cert.description
    }))
};



    try {
        const response = await fetch('/line-manager/training', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData)
        });

        const result = await response.json();
        
        if (result.success) {
            // Close modal and refresh training list
            closeModal();
            loadTrainings();
            // Show success notification
        }
    } catch (error) {
        console.error('Error submitting form:', error);
        // Show error notification
    }
}

// Helper function to get activities from form
function getActivitiesFromForm() {
    const activities = [];
    const activityContainer = document.getElementById('activitiesList');
    const activityItems = activityContainer.getElementsByClassName('activity-item');
    
    for (const item of activityItems) {
        activities.push({
            name: item.querySelector('[name="activityName"]').value,
            duration: parseFloat(item.querySelector('[name="activityDuration"]').value),
            type: item.querySelector('[name="activityType"]').value,
            remarks: item.querySelector('[name="activityRemarks"]').value
        });
    }
    
    return activities;
}

// Helper function to get certifications from form
function getCertificationsFromForm() {
    const certifications = [];
    const certContainer = document.getElementById('certificationsList');
    const certItems = certContainer.getElementsByClassName('certificate-item');
    
    for (const item of certItems) {
        certifications.push({
            title: item.querySelector('[name="certTitle"]').value,
            description: item.querySelector('[name="certDescription"]').value
        });
    }
    
    return certifications;
}



        // Close modal function
        function closeAddTrainingModal() {
            document.getElementById('addTrainingModal').classList.remove('show');
        }

      

// Update activities display
function updateActivitiesDisplay() {
    const activitiesList = document.getElementById('activitiesList');
    if (!activitiesList) return;
    
    activitiesList.innerHTML = '';
    
    addedActivities.forEach((activity, index) => {
        const activityItem = document.createElement('div');
        activityItem.className = 'activity-item';
        activityItem.innerHTML = `
            <div class="activity-details">
                <strong>${activity.name}</strong><br>
                <span>Time: ${activity.duration} hours • Type: ${activity.type}</span><br>
                ${activity.remarks ? `<span>Remarks: ${activity.remarks}</span>` : ''}
            </div>
            <button type="button" class="remove-btn" onclick="removeActivity(${index})">×</button>
        `;
        activitiesList.appendChild(activityItem);
    });
}

// Remove activity
function removeActivity(index) {
    addedActivities.splice(index, 1);
    updateActivitiesDisplay();
    calculateTotalDuration();
}

// Add certificate function
function addCertificate() {
    const certificateTitle = document.getElementById('certificateTitle').value.trim();
    const certificateDescription = document.getElementById('certificateDescription').value.trim();
    
    if (!certificateTitle || !certificateDescription) {
        alert('Please fill in both certificate title and description.');
        return;
    }
    
    const certificate = {
        title: certificateTitle,
        description: certificateDescription
    };
    
    addedCertificates.push(certificate);
    updateCertificatesDisplay();
    
    // Clear fields
    document.getElementById('certificateTitle').value = '';
    document.getElementById('certificateDescription').value = '';
}

// Update certificates display
function updateCertificatesDisplay() {
    const certificatesList = document.getElementById('certificatesList');
    if (!certificatesList) return;
    
    certificatesList.innerHTML = '';
    
    addedCertificates.forEach((certificate, index) => {
        const certificateItem = document.createElement('div');
        certificateItem.className = 'certificate-item';
        certificateItem.innerHTML = `
            <div class="certificate-details">
                <strong>${certificate.title}</strong>
                <span>${certificate.description}</span>
            </div>
            <button type="button" class="remove-btn" onclick="removeCertificate(${index})">×</button>
        `;
        certificatesList.appendChild(certificateItem);
    });
}

// Remove certificate
function removeCertificate(index) {
    addedCertificates.splice(index, 1);
    updateCertificatesDisplay();
}

// Calculate total duration
function calculateTotalDuration() {
    let totalHours = 0;
    
    addedActivities.forEach(activity => {
        totalHours += activity.duration;
    });
    
    const totalHoursRounded = totalHours.toFixed(1);
    const totalDays = (totalHours / 8).toFixed(1);
    
    const totalDurationElement = document.getElementById('totalDuration');
    if (totalDurationElement) {
        totalDurationElement.textContent = `${totalHoursRounded} hours (${totalDays} days)`;
    }
}


// Load training form data from backend
async function loadTrainingFormData() {
    try {
        console.log('Loading training form data...');
        
        // Check if required DOM elements exist before proceeding
        const requiredElements = [
            'jobPositions',
            'objectiveDropdown', 
            'skillDropdown',
            'activityType'
        ];
        
        const missingElements = requiredElements.filter(id => !document.getElementById(id));
        if (missingElements.length > 0) {
            console.error('Missing required DOM elements:', missingElements);
            return;
        }
        
        // Fix the URL - it should match your backend route
        const response = await fetch('/linemanager/training-form-data', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
            credentials: 'include' // Include session cookies
        });
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error(`HTTP error! status: ${response.status}, response: ${errorText}`);
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            console.log('Data received:', result.data);
            console.log('Metadata:', result.metadata);
            
            // Store all data globally
            allFormData = result.data;
            
            // Log counts for debugging
            console.log(`Found ${result.data.jobPositions.length} job positions`);
            console.log(`Found ${result.data.objectives.length} objectives`);
            console.log(`Found ${result.data.skills.all.length} total skills`);
            console.log(`Found ${result.data.activityTypes.length} activity types`);
            
            // Populate all dropdowns - initially show all data
            populateJobPositions(result.data.jobPositions);
            populateObjectives(result.data.objectives);
            populateSkills(result.data.skills.all);
            populateActivityTypes(result.data.activityTypes);
            
            // Add event listener for job position changes (remove existing first)
            const jobPositionsSelect = document.getElementById('jobPositions');
            if (jobPositionsSelect) {
                // Remove existing listeners to prevent duplicates
                jobPositionsSelect.removeEventListener('change', onJobPositionChange);
                jobPositionsSelect.addEventListener('change', onJobPositionChange);
            }
            
        } else {
            console.error('Failed to load form data:', result.message);
            alert('Failed to load form data: ' + result.message);
        }
    } catch (error) {
        console.error('Error loading form data:', error);
        alert('Error loading form data. Please check your connection and try again.\n\nError: ' + error.message);
    }
}
// ENHANCED: Form submission with better debugging
// ENHANCED: Form submission with better debugging and location data
document.addEventListener('DOMContentLoaded', function() {
    const addTrainingForm = document.getElementById('addTrainingForm');
    if (addTrainingForm) {
        addTrainingForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            console.log('=== FORM SUBMISSION DEBUG ===');
            
            // Collect all form data
            const courseName = document.getElementById('courseName').value.trim();
            const courseDescription = document.getElementById('courseDescription').value.trim();
            const jobPosition = document.getElementById('jobPositions').value;
            const trainingMode = document.getElementById('trainingMode').value;
            const trainingCost = document.getElementById('trainingCost').value;
            
            console.log('Form field values:');
            console.log('- Course Name:', courseName);
            console.log('- Course Description:', courseDescription);
            console.log('- Job Position:', jobPosition);
            console.log('- Training Mode:', trainingMode);
            console.log('- Training Cost:', trainingCost);
            console.log('- Selected Objectives:', selectedObjectives);
            console.log('- Selected Skills:', selectedSkills);
            console.log('- Added Activities:', addedActivities);
            console.log('- Added Certificates:', addedCertificates);
            
            // Enhanced validation with specific error messages
            const errors = [];
            
            // Required fields validation
            if (!courseName) errors.push('Course name is required');
            if (!courseDescription) errors.push('Course description is required');
            if (!jobPosition) errors.push('Job position must be selected');
            if (!trainingMode) errors.push('Training mode must be selected');
            
            // Modified validation for objectives/skills - either one is required
            if (selectedObjectives.length === 0 && selectedSkills.length === 0) {
                errors.push('You must select at least one Objective Focus Area OR one Skill Focus Area');
            }
            
            // Activities validation
            if (addedActivities.length === 0) {
                errors.push('At least one activity must be added');
            }
            
            // Validate activities have required fields
            const invalidActivities = addedActivities.filter(activity => 
                !activity.name || !activity.duration || !activity.type
            );
            
            if (invalidActivities.length > 0) {
                errors.push(`${invalidActivities.length} activities are missing required information`);
            }

            // NEW: Validate location fields for onsite training
            if (trainingMode === 'onsite') {
                const country = document.getElementById('countryDropdown').value;
                const address = document.getElementById('addressField').value.trim();
                
                if (!country) {
                    errors.push('Country must be selected for onsite training');
                }
                
                if (!address) {
                    errors.push('Address must be provided for onsite training');
                }
                
                console.log('Onsite training location validation:', { 
                    country: country || 'MISSING', 
                    address: address || 'MISSING' 
                });
            }
            
            if (errors.length > 0) {
                console.error('Validation errors:', errors);
                alert('Please fix the following errors:\n\n' + errors.join('\n'));
                return;
            }
            
            console.log('All validations passed, preparing form data...');
            
            // Calculate total duration from activities
            const calculatedTotalDuration = addedActivities.reduce((sum, activity) => {
                return sum + (parseFloat(activity.duration) || 0);
            }, 0);
            
            console.log('Calculated total duration:', calculatedTotalDuration);

            // Add this debug code right before you prepare the formData object:
            console.log('=== LOCATION DEBUG ===');
            console.log('Training mode:', trainingMode);

            if (trainingMode === 'onsite') {
                const countryElement = document.getElementById('countryDropdown');
                const addressElement = document.getElementById('addressField');
                
                console.log('Country element found:', !!countryElement);
                console.log('Address element found:', !!addressElement);
                
                if (countryElement) {
                    console.log('Country value:', countryElement.value);
                    console.log('Country options count:', countryElement.options.length);
                }
                
                if (addressElement) {
                    console.log('Address value:', addressElement.value);
                }
            }
            
            // Prepare the final form data object
            const formData = {
                trainingName: courseName,
                trainingDesc: courseDescription,
                jobId: parseInt(jobPosition),
                objectives: selectedObjectives.map(obj => parseInt(obj.id)),
                skills: selectedSkills.map(skill => parseInt(skill.id)),
                isOnlineArrangement: trainingMode === 'online',
                cost: parseFloat(trainingCost) || 0,
                totalDuration: calculatedTotalDuration,
                activities: addedActivities.map(activity => ({
                    name: activity.name,
                    duration: parseFloat(activity.duration),
                    type: activity.type,
                    remarks: activity.remarks || ''
                })),
                certifications: addedCertificates.map(cert => ({
                    title: cert.title,
                    description: cert.description
                }))
            };

            // FIX: Add country and address for onsite training
            if (trainingMode === 'onsite') {
                const countryElement = document.getElementById('countryDropdown');
                const addressElement = document.getElementById('addressField');
                
                formData.country = countryElement ? countryElement.value : null;
                formData.address = addressElement ? addressElement.value.trim() : null;
                
                console.log('Added location data to form:', { 
                    country: formData.country, 
                    address: formData.address 
                });
            } else {
                // Explicitly set to null for online training
                formData.country = null;
                formData.address = null;
            }
            
            console.log('Final form data to submit:', JSON.stringify(formData, null, 2));
            
            // Show loading state
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            submitBtn.textContent = 'Creating...';
            submitBtn.disabled = true;
            
            // Send to backend
            console.log('Sending request to /linemanager/training...');
            fetch('/linemanager/training', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formData)
            })
            .then(response => {
                console.log('Response status:', response.status);
                console.log('Response headers:', response.headers);
                return response.json();
            })
            .then(data => {
                console.log('Server response:', data);
                if (data.success) {
                    alert('Training course created successfully!');
                    closeAddTrainingModal();
                    this.reset();
                    // Reset arrays
                    selectedObjectives = [];
                    selectedSkills = [];
                    addedActivities = [];
                    addedCertificates = [];
                    // Clear displays
                    document.getElementById('objectivesList').innerHTML = '';
                    document.getElementById('skillsList').innerHTML = '';
                    document.getElementById('activitiesList').innerHTML = '';
                    document.getElementById('certificatesList').innerHTML = '';
                    document.getElementById('totalDuration').textContent = '0';
                    
                    // Reset location fields
                    document.getElementById('locationFields').classList.remove('show');
                    
                    // Optionally refresh the training courses display
                    // loadTrainingCourses();
                } else {
                    console.error('Server returned error:', data);
                    alert('Error creating training course:\n\n' + (data.message || 'Unknown error occurred'));
                }
            })
            .catch(error => {
                console.error('Network/Parse Error:', error);
                alert('Error creating training course. Please check your connection and try again.\n\nError: ' + error.message);
            })
            .finally(() => {
                // Reset button state
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;
            });
        });
    }
});

// Show add activity type modal
function showAddActivityTypeModal() {
    document.getElementById('newActivityTypeName').value = '';
    document.getElementById('addActivityTypeModal').classList.add('show');
}

// Close add activity type modal
function closeAddActivityTypeModal() {
    document.getElementById('addActivityTypeModal').classList.remove('show');
}

// Save new activity type
async function saveNewActivityType() {
    const activityTypeName = document.getElementById('newActivityTypeName').value.trim();
    
    if (!activityTypeName) {
        alert('Please enter an activity type name.');
        return;
    }

    // Check if activity type already exists
    const activityTypeSelect = document.getElementById('activityType');
    const existingOptions = Array.from(activityTypeSelect.options);
    const exists = existingOptions.some(option => 
        option.textContent.toLowerCase() === activityTypeName.toLowerCase()
    );

    if (exists) {
        alert('This activity type already exists.');
        return;
    }

    // Show loading state
    const saveBtn = document.querySelector('#addActivityTypeModal .btn-primary');
    const originalText = saveBtn.textContent;
    saveBtn.textContent = 'Adding...';
    saveBtn.disabled = true;

    try {
        const response = await fetch('/linemanager/activity-type', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                activityType: activityTypeName
            })
        });

        const result = await response.json();

        if (result.success) {
            // Add the new option to the dropdown
            const newOption = document.createElement('option');
            newOption.value = result.data.activityType;
            newOption.textContent = result.data.activityType;
            newOption.setAttribute('data-id', result.data.activityTypeId);
            activityTypeSelect.appendChild(newOption);

            // Select the newly added option
            activityTypeSelect.value = result.data.activityType;

            // Close modal
            closeAddActivityTypeModal();

            // Show success message
            showSuccessToast('Activity type added successfully!');
        } else {
            alert('Error adding activity type: ' + result.message);
        }
    } catch (error) {
        console.error('Error adding activity type:', error);
        alert('Error adding activity type. Please try again.');
    } finally {
        // Reset button state
        saveBtn.textContent = originalText;
        saveBtn.disabled = false;
    }
}

// Helper function to show success toast (optional)
function showSuccessToast(message) {
    // Create a simple toast notification
    const toast = document.createElement('div');
    toast.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background-color: #10b981;
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        z-index: 30000;
        font-size: 14px;
        font-weight: 500;
        animation: slideInRight 0.3s ease;
    `;
    toast.textContent = message;
    
    // Add animation keyframes
    if (!document.getElementById('toast-styles')) {
        const style = document.createElement('style');
        style.id = 'toast-styles';
        style.textContent = `
            @keyframes slideInRight {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            @keyframes slideOutRight {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
        `;
        document.head.appendChild(style);
    }
    
    document.body.appendChild(toast);
    
    // Remove toast after 3 seconds
    setTimeout(() => {
        toast.style.animation = 'slideOutRight 0.3s ease';
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 300);
    }, 3000);
}

// Close mini modal when clicking outside
document.addEventListener('click', function(event) {
    const miniModal = document.getElementById('addActivityTypeModal');
    const miniModalContent = miniModal.querySelector('.mini-modal-content');
    
    if (miniModal.classList.contains('show') && 
        !miniModalContent.contains(event.target) && 
        !event.target.classList.contains('add-type-btn')) {
        closeAddActivityTypeModal();
    }
});

// Handle Enter key in the activity type input
document.addEventListener('DOMContentLoaded', function() {
    const newActivityTypeInput = document.getElementById('newActivityTypeName');
    if (newActivityTypeInput) {
        newActivityTypeInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                saveNewActivityType();
            }
        });
    }
});

        // Function to fetch countries from REST API
        async function fetchCountries() {
            try {
                console.log('Fetching countries from API...');
                const response = await fetch('https://restcountries.com/v3.1/all?fields=name,cca2');
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const countries = await response.json();
                
                // Sort countries alphabetically by common name
                countriesData = countries
                    .map(country => ({
                        code: country.cca2,
                        name: country.name.common
                    }))
                    .sort((a, b) => a.name.localeCompare(b.name));
                
                console.log(`Loaded ${countriesData.length} countries`);
                populateCountryDropdown();
                
            } catch (error) {
                console.error('Error fetching countries:', error);
                // Fallback to basic country list
                loadFallbackCountries();
            }
        }

        // Function to populate the country dropdown
        function populateCountryDropdown() {
            const countryDropdown = document.getElementById('countryDropdown');
            
            // Clear existing options
            countryDropdown.innerHTML = '<option value="">Select Country</option>';
            
            // Add countries to dropdown
            countriesData.forEach(country => {
                const option = document.createElement('option');
                option.value = country.code;
                option.textContent = country.name;
                countryDropdown.appendChild(option);
            });
        }

        // Fallback country list in case API fails
        function loadFallbackCountries() {
            const fallbackCountries = [
                { code: 'PH', name: 'Philippines' },
                { code: 'US', name: 'United States' },
                { code: 'GB', name: 'United Kingdom' },
                { code: 'CA', name: 'Canada' },
                { code: 'AU', name: 'Australia' },
                { code: 'SG', name: 'Singapore' },
                { code: 'MY', name: 'Malaysia' },
                { code: 'JP', name: 'Japan' },
                { code: 'KR', name: 'South Korea' },
                { code: 'CN', name: 'China' },
                { code: 'IN', name: 'India' },
                { code: 'DE', name: 'Germany' },
                { code: 'FR', name: 'France' },
                { code: 'IT', name: 'Italy' },
                { code: 'ES', name: 'Spain' }
            ].sort((a, b) => a.name.localeCompare(b.name));
            
            countriesData = fallbackCountries;
            populateCountryDropdown();
        }

        // Function to toggle location fields based on training mode
        function toggleLocationFields() {
            const trainingMode = document.getElementById('trainingMode').value;
            const locationFields = document.getElementById('locationFields');
            
            if (trainingMode === 'onsite') {
                locationFields.classList.add('show');
                // Make fields required when onsite is selected
                document.getElementById('countryDropdown').required = true;
                document.getElementById('addressField').required = true;
            } else {
                locationFields.classList.remove('show');
                // Remove required when online is selected
                document.getElementById('countryDropdown').required = false;
                document.getElementById('addressField').required = false;
                // Clear values
                document.getElementById('countryDropdown').value = '';
                document.getElementById('addressField').value = '';
            }
        }

        // Initialize when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Load countries when page loads
            fetchCountries();
            
            // Add event listener to training mode dropdown
            const trainingModeSelect = document.getElementById('trainingMode');
            if (trainingModeSelect) {
                trainingModeSelect.addEventListener('change', toggleLocationFields);
            }
        });

        // Updated form validation function (add this to your existing validation)
        function validateLocationFields() {
            const trainingMode = document.getElementById('trainingMode').value;
            const errors = [];
            
            if (trainingMode === 'onsite') {
                const country = document.getElementById('countryDropdown').value;
                const address = document.getElementById('addressField').value.trim();
                
                if (!country) {
                    errors.push('Country is required for onsite training');
                }
                
                if (!address) {
                    errors.push('Address is required for onsite training');
                }
            }
            
            return errors;
        }

        // Function to get location data for form submission
        function getLocationData() {
            const trainingMode = document.getElementById('trainingMode').value;
            
            if (trainingMode === 'onsite') {
                return {
                    isOnlineArrangement: false,
                    country: document.getElementById('countryDropdown').value,
                    address: document.getElementById('addressField').value.trim()
                };
            } else {
                return {
                    isOnlineArrangement: true,
                    country: null,
                    address: null
                };
            }
        }

        // Demo function to show how data would be collected
        function showFormData() {
            const locationData = getLocationData();
            const validationErrors = validateLocationFields();
            
            console.log('Location Data:', locationData);
            console.log('Validation Errors:', validationErrors);
            
            alert('Check console for location data and validation results');
        }

function populateJobPositions(jobPositions) {
    const jobPositionsSelect = document.getElementById('jobPositions');
    // Clear existing options except the first one
    jobPositionsSelect.innerHTML = '<option value="">Select applicable positions</option>';
    
    console.log('Populating job positions:', jobPositions.length, 'positions found');
    
    jobPositions.forEach(job => {
        const option = document.createElement('option');
        option.value = job.jobId;  // Use jobId as value
        option.textContent = job.jobTitle;  // Use jobTitle for display
        option.setAttribute('data-job-title', job.jobTitle);
        option.setAttribute('data-job-description', job.jobDescrpt);
        option.setAttribute('data-department', job.departmentId);
        jobPositionsSelect.appendChild(option);
    });
}

// Populate objectives dropdown with job title prefix - now properly linked
function populateObjectives(objectives) {
    const objectiveDropdown = document.getElementById('objectiveDropdown');
    objectiveDropdown.innerHTML = ''; // Clear existing options

    if (!objectives || objectives.length === 0) {
        // If no objectives found
        const option = document.createElement('option');
        option.value = '';
        option.textContent = 'Objectives are being fetched when set with an employee in Objective Settings. Please assign objectives to the employee first.';
        objectiveDropdown.appendChild(option);
        return;
    }

    // Sort objectives by staffName alphabetically
    objectives.sort((a, b) => {
        const nameA = a.staffName.toUpperCase();
        const nameB = b.staffName.toUpperCase();
        return nameA.localeCompare(nameB);
    });

    // Default first option
    const defaultOption = document.createElement('option');
    defaultOption.value = '';
    defaultOption.textContent = 'Select objective area';
    objectiveDropdown.appendChild(defaultOption);

    // Populate the dropdown with sorted objectives
    objectives.forEach(obj => {
        const option = document.createElement('option');
        option.value = obj.objectiveId;
        option.textContent = `${obj.staffName} - ${obj.objectiveDescrpt}`;
        option.setAttribute('data-objective-desc', obj.objectiveDescrpt);
        objectiveDropdown.appendChild(option);
    });
}

// Populate skills dropdown with skill type and name
function populateSkills(skills) {
    const skillDropdown = document.getElementById('skillDropdown');
    skillDropdown.innerHTML = ''; // Clear existing options

    if (!skills || skills.length === 0) {
        // If no skills found
        const option = document.createElement('option');
        option.value = '';
        option.textContent = 'No skills available. Please coordinate with HR to set up the skills for the respective job position.';
        skillDropdown.appendChild(option);
        return;
    }

    // Default first option
    const defaultOption = document.createElement('option');
    defaultOption.value = '';
    defaultOption.textContent = 'Select skill area';
    skillDropdown.appendChild(defaultOption);

    // Group skills by type
    const groupedSkills = skills.reduce((acc, skill) => {
        if (!acc[skill.jobReqSkillType]) {
            acc[skill.jobReqSkillType] = [];
        }
        acc[skill.jobReqSkillType].push(skill);
        return acc;
    }, {});

    // Create optgroups for each skill type
    Object.entries(groupedSkills).forEach(([type, typeSkills]) => {
        const optgroup = document.createElement('optgroup');
        optgroup.label = `${type} Skills`;

        typeSkills.forEach(skill => {
            const option = document.createElement('option');
            option.value = skill.jobReqSkillId;
            option.textContent = skill.jobReqSkillName;
            option.setAttribute('data-job-id', skill.jobId);
            option.setAttribute('data-job-title', skill.jobTitle);
            option.setAttribute('data-type', skill.jobReqSkillType);
            option.setAttribute('data-name', skill.jobReqSkillName);
            optgroup.appendChild(option);
        });

        skillDropdown.appendChild(optgroup);
    });
}


// Function to populate activity types
function populateActivityTypes(activityTypes) {
    const activityTypeSelect = document.getElementById('activityType');
    // Clear existing options except the first one
    activityTypeSelect.innerHTML = '<option value="">Select type</option>';
    
    activityTypes.forEach(type => {
        const option = document.createElement('option');
        option.value = type.label;
        option.textContent = type.label;
        option.setAttribute('data-id', type.id);
        activityTypeSelect.appendChild(option);
    });
}

// FIXED: Filter objectives and skills based on selected job position
function onJobPositionChange() {
    const jobPositionsSelect = document.getElementById('jobPositions');
    const selectedJobId = jobPositionsSelect.value;
    
    console.log('Job position changed to:', selectedJobId);
    
    // Clear current selections
    selectedObjectives = [];
    selectedSkills = [];
    updateObjectivesDisplay();
    updateSkillsDisplay();
    
    if (!selectedJobId) {
        // Reset to show all objectives and skills
        console.log('No job selected, showing all data');
        populateObjectives(allFormData.objectives);
        populateSkills(allFormData.skills.all);
        return;
    }
    
    // Filter objectives for the selected job
    const filteredObjectives = allFormData.objectives.filter(obj => 
        obj.jobId === parseInt(selectedJobId)
    );
    
    // Filter skills for the selected job
    const filteredSkills = allFormData.skills.all.filter(skill => 
        skill.jobId === parseInt(selectedJobId)
    );
    
    console.log(`Job ID ${selectedJobId} selected:`);
    console.log(`- Found ${filteredObjectives.length} matching objectives`);
    console.log(`- Found ${filteredSkills.length} matching skills`);
    
    // Update dropdowns with filtered data
    populateObjectives(filteredObjectives);
    populateSkills(filteredSkills);
    
    // Log the filtered data for debugging
    console.log('Filtered objectives:', filteredObjectives.map(o => o.objectiveDescrpt));
    console.log('Filtered skills:', filteredSkills.map(s => s.jobReqSkillName));
}
        // Employee Training Modal Functions
        function openEmployeeModal(employeeId) {
            // Sample employee data - in real app, this would come from a database
            const employeeData = {
                'john-doe': {
                    name: 'John Doe',
                    jobRole: 'Software Engineer',
                    email: 'john.doe@company.com',
                    avatar: 'JD',
                    stats: { inProgress: 2, completed: 5, overdue: 1 },
                    trainings: [
                        {
                            title: 'Leadership Development Program',
                            description: 'Develop essential leadership skills including team management, strategic thinking, communication, and decision-making.',
                            types: ['online'],
                            progress: 75,
                            status: 'in-progress'
                        },
                        {
                            title: 'Advanced JavaScript',
                            description: 'Master advanced JavaScript concepts including ES6+, async programming, and modern development patterns.',
                            types: ['online'],
                            progress: 40,
                            status: 'in-progress'
                        },
                        {
                            title: 'Safety and Compliance Training',
                            description: 'Essential workplace safety protocols, emergency procedures, and regulatory compliance requirements.',
                            types: ['onsite', 'required'],
                            progress: 100,
                            status: 'completed'
                        },
                        {
                            title: 'Technical Skills Enhancement',
                            description: 'Enhance technical capabilities and stay updated with latest technologies and industry best practices.',
                            types: ['online', 'required'],
                            progress: 100,
                            status: 'completed'
                        },
                        {
                            title: 'Communication Excellence',
                            description: 'Improve interpersonal and communication skills for better workplace interactions and team collaboration.',
                            types: ['onsite'],
                            progress: 100,
                            status: 'completed'
                        },
                        {
                            title: 'Time Management',
                            description: 'Learn effective time management strategies, prioritization techniques, and productivity optimization methods.',
                            types: ['online'],
                            progress: 100,
                            status: 'completed'
                        },
                        {
                            title: 'Customer Service Training',
                            description: 'Enhance customer interaction skills, learn problem-solving techniques, and understand customer psychology.',
                            types: ['onsite'],
                            progress: 100,
                            status: 'completed'
                        },
                        {
                            title: 'Project Management Fundamentals',
                            description: 'Learn essential project management methodologies, tools, and techniques for successful project delivery.',
                            types: ['online', 'required'],
                            progress: 25,
                            status: 'overdue'
                        }
                    ]
                },
                'jane-smith': {
                    name: 'Jane Smith',
                    jobRole: 'Operations Manager',
                    email: 'jane.smith@company.com',
                    avatar: 'JS',
                    stats: { inProgress: 1, completed: 8, overdue: 0 },
                    trainings: [
                        {
                            title: 'Advanced Leadership Skills',
                            description: 'Advanced leadership techniques for senior managers including strategic planning and team development.',
                            types: ['online'],
                            progress: 60,
                            status: 'in-progress'
                        },
                        {
                            title: 'Safety and Compliance Training',
                            description: 'Essential workplace safety protocols, emergency procedures, and regulatory compliance requirements.',
                            types: ['onsite', 'required'],
                            progress: 100,
                            status: 'completed'
                        },
                        {
                            title: 'Operations Management Excellence',
                            description: 'Optimize operational processes, improve efficiency, and implement best practices in operations management.',
                            types: ['online'],
                            progress: 100,
                            status: 'completed'
                        }
                    ]
                },
                'mike-johnson': {
                    name: 'Mike Johnson',
                    jobRole: 'Data Analyst',
                    email: 'mike.johnson@company.com',
                    avatar: 'MJ',
                    stats: { inProgress: 0, completed: 3, overdue: 1 },
                    trainings: [
                        {
                            title: 'Advanced Excel Training',
                            description: 'Master advanced Excel features including pivot tables, macros, data analysis tools, and complex formulas.',
                            types: ['online'],
                            progress: 0,
                            status: 'overdue'
                        },
                        {
                            title: 'Data Visualization with Power BI',
                            description: 'Learn to create compelling data visualizations and interactive dashboards using Power BI.',
                            types: ['online'],
                            progress: 100,
                            status: 'completed'
                        },
                        {
                            title: 'SQL Database Management',
                            description: 'Master SQL queries, database design, and data manipulation techniques for effective data management.',
                            types: ['online'],
                            progress: 100,
                            status: 'completed'
                        }
                    ]
                },
                'sarah-wilson': {
                    name: 'Sarah Wilson',
                    jobRole: 'HR Specialist',
                    email: 'sarah.wilson@company.com',
                    avatar: 'SW',
                    stats: { inProgress: 2, completed: 6, overdue: 0 },
                    trainings: [
                        {
                            title: 'Team Building Workshop',
                            description: 'Interactive workshop focused on building stronger team relationships, improving collaboration, and enhancing group dynamics.',
                            types: ['onsite'],
                            progress: 50,
                            status: 'in-progress'
                        },
                        {
                            title: 'HR Management Certification',
                            description: 'Comprehensive HR management program covering recruitment, performance management, and employee relations.',
                            types: ['online', 'required'],
                            progress: 80,
                            status: 'in-progress'
                        },
                        {
                            title: 'Employment Law and Compliance',
                            description: 'Stay updated with employment laws, regulations, and compliance requirements for HR professionals.',
                            types: ['online', 'required'],
                            progress: 100,
                            status: 'completed'
                        }
                    ]
                }
            };

            const employee = employeeData[employeeId];
            if (!employee) return;

            // Update employee information
            document.getElementById('employeeName').textContent = employee.name;
            document.getElementById('employeeJobRole').textContent = employee.jobRole;
            document.getElementById('employeeEmail').textContent = employee.email;
            document.getElementById('employeeAvatar').textContent = employee.avatar;

            // Update statistics
            document.getElementById('inProgressCount').textContent = employee.stats.inProgress;
            document.getElementById('completedCount').textContent = employee.stats.completed;
            document.getElementById('overdueCount').textContent = employee.stats.overdue;

            // Update training list
            const trainingList = document.getElementById('employeeTrainingList');
            trainingList.innerHTML = '';

            employee.trainings.forEach(training => {
                const trainingItem = document.createElement('div');
                trainingItem.className = 'training-progress-item';
                
                // Generate badge HTML for training types
                const badgesHTML = training.types.map(type => {
                    const badgeClass = type === 'online' ? 'online' : 
                                     type === 'onsite' ? 'onsite' : 'required';
                    const badgeText = type.charAt(0).toUpperCase() + type.slice(1);
                    return `<span class="course-badge ${badgeClass}">${badgeText}</span>`;
                }).join('');
                
                trainingItem.innerHTML = `
                    <div class="training-progress-header">
                        <h4 class="training-title">${training.title}</h4>
                    </div>
                    <div class="training-description">${training.description}</div>
                    <div class="training-badges" style="margin: 10px 0;">
                        ${badgesHTML}
                    </div>
                    <div class="progress-bar-container">
                        <div class="progress-bar-fill ${training.status}" style="width: ${training.progress}%"></div>
                    </div>
                    <div class="progress-text">
                        <span class="progress-percentage">${training.progress}% Complete</span>
                        <span class="progress-status ${training.status}">
                            ${training.status.charAt(0).toUpperCase() + training.status.slice(1).replace('-', ' ')}
                        </span>
                    </div>
                `;
                trainingList.appendChild(trainingItem);
            });

            // Show modal
            document.getElementById('employeeTrainingModal').classList.add('show');
        }

        function closeEmployeeTrainingModal() {
            document.getElementById('employeeTrainingModal').classList.remove('show');
        }

        function assignNewTraining() {
            // This would typically open another modal or navigate to assignment page
            alert('Assign New Training functionality would be implemented here.');
        }

        function visitPerformanceTracker() {
            // Get current employee name for context
            const employeeName = document.getElementById('employeeName').textContent;
            
            // This would typically navigate to the performance tracker page
            // You can customize this URL based on your routing structure
            const performanceTrackerUrl = '/performance-tracker'; // or '/employee/performance-tracker'
            
            // Option 1: Navigate to performance tracker
            window.location.href = performanceTrackerUrl;
            
            // Option 2: Open in new tab (uncomment if preferred)
            // window.open(performanceTrackerUrl, '_blank');
            
            // Option 3: For demonstration - show alert (remove in production)
            // alert(`Navigating to Performance Tracker for ${employeeName}...`);
        }

        // Toggle active class for sidebar links
        document.querySelectorAll('.sidebar ul li a').forEach(link => {
            link.addEventListener('click', function() {
                document.querySelectorAll('.sidebar ul li a').forEach(link => link.classList.remove('active'));
                this.classList.add('active');
            });
        });

        // Toggle collapsible content
        document.querySelectorAll('.collapsible-header').forEach(header => {
            header.addEventListener('click', function() {
                var content = this.nextElementSibling;
                if (content.style.display === 'block') {
                    content.style.display = 'none';
                } else {
                    // Hide all other collapsible contents
                    document.querySelectorAll('.collapsible-content').forEach(item => {
                        if (item !== content) {
                            item.style.display = 'none';
                        }
                    });
                    content.style.display = 'block';
                }
            });
        });


    </script>
</body>
</html>