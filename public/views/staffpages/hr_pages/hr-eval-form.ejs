<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HR Interview Form</title>
    <link rel="stylesheet" href="/css/sidebar.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
            padding: 20px;
            margin: 0;
        }

        h1 {
            color: #124A5C;
            margin-bottom: 20px;
        }

        .container {
            margin-left: 280px;
            padding: 20px;
        }

        form {
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
            max-width: 100%;
            margin: 20px auto;
        }

        .form-section {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #333;
        }

        input[type="text"], input[type="date"], input[type="number"], select, textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-sizing: border-box;
            margin-bottom: 10px;
            font-size: 16px;
        }

        input[readonly] {
            background-color: #e9ecef;
            cursor: not-allowed;
        }

        button {
            background-color: #07ACB9;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            display: block;
            margin: 20px 0;
        }

        button:hover {
            background-color: #065d6a;
        }

        h2 {
            color: #124A5C;
            font-size: 1.2rem;
            margin-bottom: 10px;
        }

        .rating-guide table {
            width: 100%;
            border-collapse: collapse;
        }

        .rating-guide table th, 
        .rating-guide table td {
            border: 1px solid #ccc;
            padding: 10px;
            text-align: left;
        }

        .rating-guide table th {
            background-color: #f1f1f1;
        }

        .skill-section {
            margin-bottom: 20px;
        }

        .skill-section div {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

        .skill-section div label {
            flex: 1;
            margin-right: 10px;
        }

        .skill-section div input {
            width: 60px;
            padding: 5px;
            text-align: center;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .category-total {
            margin-top: 10px;
            display: flex;
            align-items: center;
            justify-content: flex-end;
        }

        .category-total span {
            margin-right: 10px;
            font-weight: bold;
        }

        .category-total input {
            width: 80px;
            padding: 5px;
            text-align: center;
            background-color: #e9ecef;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .final-total {
            margin-top: 30px;
            display: flex;
            justify-content: flex-end;
            align-items: center;
        }

        .final-total span {
            font-size: 18px;
            font-weight: bold;
            margin-right: 10px;
        }

        .final-total input {
            width: 100px;
            padding: 10px;
            text-align: center;
            background-color: #e9ecef;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 16px;
        }

        .additional-info {
            margin-top: 20px;
        }

        .additional-info label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .additional-info input {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .yes-no-section {
            margin-top: 20px;
            display: flex;
            justify-content: space-between;
        }

        .yes-no-section div {
            flex: 1;
            text-align: center;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .yes-no-section div label {
            display: inline-block;
            margin-bottom: 10px;
            font-weight: bold;
        }

        .yes-no-section div input[type="checkbox"] {
            width: 20px;
            height: 20px;
            margin-right: 5px;
        }

        .yes-no-section div input[type="checkbox"]:checked + label {
            color: #28a745; /* Green when checked */
        }

        .yes-no-section div input[type="checkbox"]:not(:checked) + label {
            color: #dc3545; /* Red when not checked */
        }

        .submit-section {
            margin-top: 30px;
            display: flex;
            justify-content: space-between;
            gap: 15px;
        }

        .submit-section button {
            padding: 10px 20px;
            font-size: 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            width: auto;
        }

        .submit-section .back {
            background-color: #6c757d;
            color: #fff;
        }

        .submit-section .save {
            background-color: #ffc107;
            color: #fff;
        }

        .submit-section .save-submit {
            background-color: #007bff;
            color: #fff;
        }

        .submit-section button:hover {
            opacity: 0.9;
        }

        @media (max-width: 768px) {
            .container {
                margin-left: 0;
            }

            .yes-no-section {
                flex-direction: column;
                align-items: center;
            }

            .yes-no-section div {
                margin-bottom: 20px;
            }

            form {
                padding: 10px;
            }

            .form-section {
                margin-bottom: 15px;
            }

            input[type="text"], input[type="date"], input[type="number"], select, textarea {
                font-size: 14px;
            }

            button {
                font-size: 14px;
            }
        }


        .rating-dropdown {
        width: 130px;
        padding: 5px;
        text-align: center;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .rating-explanation {
        display: none;
        position: absolute;
        background-color: #fff;
        border: 1px solid #ccc;
        padding: 10px;
        width: 300px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        z-index: 10;
        font-size: 14px;
    }

    .rating-container {
        position: relative;
        display: inline-block;
    }

    .rating-container:hover .rating-explanation {
        display: block;
    }

    .rating-container label {
        flex: 1;
    }
    </style>
</head>
<body>
    <%- include('../../partials/hr_partials') %>
    <div class="container">
        <header>
            <h1>HR Interview Form</h1>
        </header>

        <form id="interview-form">
            <div class="form-section">
                <label for="candidate-name">Candidate Name:</label>
                <input type="text" id="candidate-name" placeholder="Henry, Arthur" readonly>

                <label for="position-title">Position Title:</label>
                <input type="text" id="position-title" placeholder="Financial Analyst" readonly>

                <label for="position-department">Position Department:</label>
                <input type="text" id="position-department" placeholder="Finance" readonly>

                <label for="conducted-by">Conducted by:</label>
                <input type="text" id="conducted-by" placeholder="Henry, Arthur" readonly>

                <label for="date-of-interview">Date of Interview:</label>
                <input type="text" id="date-of-interview" placeholder="March 15, 2024" readonly>
            </div>

 <!-- Rating Definition Guide -->
 <div class="rating-guide">
    <h2>Rating Definition Guide</h2>
    <table>
        <tr>
            <th>Clearly Evident</th>
            <td>Clearly and thoroughly explains actions, thought process, and outcomes. Shows a deep understanding and high level of skill in the area being assessed.</td>
            <td>3</td>
        </tr>
        <tr>
            <th>Moderately Evident</th>
            <td>Adequately explains actions, thought process, and outcomes, but some aspects may be unclear or underdeveloped. Shows a reasonable understanding and skill level in the area being assessed.</td>
            <td>2</td>
        </tr>
        <tr>
            <th>Not Evident</th>
            <td>Struggles to explain actions, thought process, and outcomes. Shows a lack of understanding and inadequate skill in the area being assessed.</td>
            <td>1</td>
        </tr>
    </table>
</div>

           <!-- Professional Background and Experience -->
<div class="skill-section" id="professional-background-section">
    <h2>Professional Background and Experience</h2>
    <div>
        <label>Demonstrated understanding of role requirements?</label>
        <select class="rating-dropdown" data-category="professional">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
    <div>
        <label>Relevance of experience to job description?</label>
        <select class="rating-dropdown" data-category="professional">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
    <div>
        <label>Highlighted achievements and contributions in previous roles?</label>
        <select class="rating-dropdown" data-category="professional">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
</div>

<div class="category-total">
    <h3>Total:</h3>
    <input type="number" readonly id="professional-total" value="0">
</div>

            <!-- Functional Skills -->
<div class="skill-section" id="functional-skills-section">
    <h2>Functional Skills</h2>
    <div>
        <label>Proficiency in relevant skills:</label>
        <select class="rating-dropdown" data-category="functional">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
    <div>
        <label>Experience in Finance strategy, industry mapping, P&L management:</label>
        <select class="rating-dropdown" data-category="functional">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
    <div>
        <label>Provided examples of skills utilization and success:</label>
        <select class="rating-dropdown" data-category="functional">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
</div>

<div class="category-total">
    <h3>Total:</h3>
    <input type="number" readonly id="functional-total" value="0">
</div>

             <!-- Teamwork and Collaboration -->
<div class="skill-section" id="teamwork-section">
    <h2>Teamwork and Collaboration</h2>
    <div>
        <label>Emphasized importance of collaboration?</label>
        <select class="rating-dropdown" data-category="teamwork">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
    <div>
        <label>Shared experiences of effective teamwork?</label>
        <select class="rating-dropdown" data-category="teamwork">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
</div>

<div class="category-total">
    <h3>Total:</h3>
    <input type="number" readonly id="teamwork-total" value="0">
</div>


            <!-- Value Creation -->
<div class="skill-section" id="value-creation-section">
    <h2>Value Creation</h2>
    <div>
        <label>Demonstrated ability to generate innovative ideas or solutions?</label>
        <select class="rating-dropdown" data-category="value-creation">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
    <div>
        <label>Contributed to the creation of tangible value for the team or organization?</label>
        <select class="rating-dropdown" data-category="value-creation">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
</div>

<div class="category-total">
    <h3>Total:</h3>
    <input type="number" readonly id="value-total" value="0">
</div>

           <!-- Integrity -->
<div class="skill-section" id="integrity-section">
    <h2>Integrity</h2>
    <div>
        <label>Showed respect for colleagues and stakeholders?</label>
        <select class="rating-dropdown" data-category="integrity">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
    <div>
        <label>Acted professionally and courteously in all interactions?</label>
        <select class="rating-dropdown" data-category="integrity">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
</div>

<div class="category-total">
    <h3>Total:</h3>
    <input type="number" readonly id="integrity-total" value="0">
</div>


            <!-- Problem-Solving Abilities -->
<div class="skill-section" id="problem-solving-section">
    <h2>Problem-Solving Abilities</h2>
    <div>
        <label>Demonstrated strong problem-solving skills?</label>
        <select class="rating-dropdown" data-category="problem-solving">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
    <div>
        <label>Provided examples of problem-solving approach?</label>
        <select class="rating-dropdown" data-category="problem-solving">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
</div>

<div class="category-total">
    <h3>Total:</h3>
    <input type="number" readonly id="problem-solving-total" value="0">
</div>


            <!-- Motivation and Fit -->
<div class="skill-section" id="motivation-fit-section">
    <h2>Motivation and Fit</h2>
    <div>
        <label>Demonstrated genuine interest in the position?</label>
        <input type="number" min="1" max="3" class="rating-input" data-category="motivation-fit">
    </div>
</div>

<div class="category-total">
    <h3>Total:</h3>
    <input type="number" readonly id="motivation-total" value="0">
</div>

<!-- Calculated Total Section -->
<div class="final-total">
    <h3>Calculated Total Assessment Rating:</h3>
    <span id="total-rating">0</span>
</div>

            <!--Additional Info-->
            <div class="additional-info">
                <label for="expected-compensation">Expected Compensation:</label>
                <input type="text" id="expected-compensation" placeholder="Enter expected compensation">

                <label for="reason-applying">Reason for Applying:</label>
                <input type="text" id="reason-applying" placeholder="Enter reason for applying">

                <label for="availability">Availability:</label>
                <input type="text" id="availability" placeholder="Enter availability">
            </div>

            <!--Yes/No Section-->
            <div class="yes-no-section">
                <div>
                    <label>Potential Fit for the Role?</label>
                    <input type="checkbox" id="fit-role" class="checkbox">
                    <label for="fit-role">Yes</label>
                </div>

                <div>
                    <label>Recommended for Further Consideration in Hiring Process?</label>
                    <input type="checkbox" id="consideration" class="checkbox">
                    <label for="consideration">Yes</label>
                </div>
            </div>

            <!--Submit Section-->
            <div class="submit-section">
                <button type="button" class="back">Back</button>
                <button type="submit" class="save-submit">Save & Submit</button>
            </div>
        </form>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
    // Select all rating dropdowns within the Professional Background section
    const ratingDropdowns = document.querySelectorAll('#professional-background-section .rating-dropdown');
    const categoryTotalInput = document.getElementById('professional-total');

    // Function to update the total score for Professional Background and Experience
    function updateProfessionalTotal() {
        let total = 0;

        // Loop through each dropdown and sum the values
        ratingDropdowns.forEach((dropdown) => {
            const value = parseInt(dropdown.value, 10);
            if (!isNaN(value)) {
                total += value;
            }
        });

        // Update the total score field
        categoryTotalInput.value = total;
    }

    // Event listener to update the total when a dropdown value changes
    ratingDropdowns.forEach((dropdown) => {
        dropdown.addEventListener('change', updateProfessionalTotal);
    });

    // Initial call to set the total score on page load
    updateProfessionalTotal();
});


        document.addEventListener('DOMContentLoaded', () => {
    // Select all rating dropdowns within the Functional Skills section
    const ratingDropdowns = document.querySelectorAll('#functional-skills-section .rating-dropdown');
    const categoryTotalInput = document.getElementById('functional-total');

    // Function to update the total score for Functional Skills
    function updateFunctionalTotal() {
        let total = 0;

        // Loop through each dropdown and sum the values
        ratingDropdowns.forEach((dropdown) => {
            const value = parseInt(dropdown.value, 10);
            if (!isNaN(value)) {
                total += value;
            }
        });

        // Update the total score field
        categoryTotalInput.value = total;
    }

    // Event listener to update the total when a dropdown value changes
    ratingDropdowns.forEach((dropdown) => {
        dropdown.addEventListener('change', updateFunctionalTotal);
    });

    // Initial call to set the total score on page load
    updateFunctionalTotal();
});

document.addEventListener('DOMContentLoaded', () => {
    // Select all rating dropdowns within the Teamwork and Collaboration section
    const ratingDropdowns = document.querySelectorAll('#teamwork-section .rating-dropdown');
    const categoryTotalInput = document.getElementById('teamwork-total');

    // Function to update the total score for Teamwork and Collaboration
    function updateTeamworkTotal() {
        let total = 0;

        // Loop through each dropdown and sum the values
        ratingDropdowns.forEach((dropdown) => {
            const value = parseInt(dropdown.value, 10);
            if (!isNaN(value)) {
                total += value;
            }
        });

        // Update the total score field
        categoryTotalInput.value = total;
    }

    // Event listener to update the total when a dropdown value changes
    ratingDropdowns.forEach((dropdown) => {
        dropdown.addEventListener('change', updateTeamworkTotal);
    });

    // Initial call to set the total score on page load
    updateTeamworkTotal();
});

document.addEventListener('DOMContentLoaded', () => {
    // Select all rating dropdowns within the Value Creation section
    const ratingDropdowns = document.querySelectorAll('#value-creation-section .rating-dropdown');
    const categoryTotalInput = document.getElementById('value-total');

    // Function to update the total score for Value Creation
    function updateValueCreationTotal() {
        let total = 0;

        // Loop through each dropdown and sum the values
        ratingDropdowns.forEach((dropdown) => {
            const value = parseInt(dropdown.value, 10);
            if (!isNaN(value)) {
                total += value;
            }
        });

        // Update the total score field
        categoryTotalInput.value = total;
    }

    // Event listener to update the total when a dropdown value changes
    ratingDropdowns.forEach((dropdown) => {
        dropdown.addEventListener('change', updateValueCreationTotal);
    });

    // Initial call to set the total score on page load
    updateValueCreationTotal();
});

document.addEventListener('DOMContentLoaded', () => {
    // Select all rating dropdowns within the Integrity section
    const ratingDropdowns = document.querySelectorAll('#integrity-section .rating-dropdown');
    const categoryTotalInput = document.getElementById('integrity-total');

    // Function to update the total score for Integrity
    function updateIntegrityTotal() {
        let total = 0;

        // Loop through each dropdown and sum the values
        ratingDropdowns.forEach((dropdown) => {
            const value = parseInt(dropdown.value, 10);
            if (!isNaN(value)) {
                total += value;
            }
        });

        // Update the total score field
        categoryTotalInput.value = total;
    }

    // Event listener to update the total when a dropdown value changes
    ratingDropdowns.forEach((dropdown) => {
        dropdown.addEventListener('change', updateIntegrityTotal);
    });

    // Initial call to set the total score on page load
    updateIntegrityTotal();
});

document.addEventListener('DOMContentLoaded', () => {
    // Select all rating dropdowns within the Problem-Solving Abilities section
    const ratingDropdowns = document.querySelectorAll('#problem-solving-section .rating-dropdown');
    const categoryTotalInput = document.getElementById('problem-solving-total');

    // Function to update the total score for Problem-Solving Abilities
    function updateProblemSolvingTotal() {
        let total = 0;

        // Loop through each dropdown and sum the values
        ratingDropdowns.forEach((dropdown) => {
            const value = parseInt(dropdown.value, 10);
            if (!isNaN(value)) {
                total += value;
            }
        });

        // Update the total score field
        categoryTotalInput.value = total;
    }

    // Event listener to update the total when a dropdown value changes
    ratingDropdowns.forEach((dropdown) => {
        dropdown.addEventListener('change', updateProblemSolvingTotal);
    });

    // Initial call to set the total score on page load
    updateProblemSolvingTotal();
});

document.addEventListener('DOMContentLoaded', () => {
    // Select the rating input field in the Motivation and Fit section
    const ratingInput = document.querySelector('#motivation-fit-section .rating-input');
    const categoryTotalInput = document.getElementById('motivation-total');

    // Function to update the total score for Motivation and Fit
    function updateMotivationTotal() {
        const value = parseInt(ratingInput.value, 10);
        // Ensure the value is between 1 and 3, otherwise default to 0
        const total = isNaN(value) || value < 1 || value > 3 ? 0 : value;
        categoryTotalInput.value = total;
    }

    // Event listener to update the total when the rating input changes
    ratingInput.addEventListener('input', updateMotivationTotal);

    // Initial call to set the total score on page load
    updateMotivationTotal();
});


document.addEventListener('DOMContentLoaded', () => {
    // Function to calculate the total rating from all category totals
    function calculateFinalTotal() {
        // Select all category total inputs
        const categoryTotals = document.querySelectorAll('.category-total input');

        let finalTotal = 0;
        categoryTotals.forEach(input => {
            // Parse each category total value and add to final total
            const value = parseInt(input.value, 10);
            if (!isNaN(value)) {
                finalTotal += value;
            }
        });

        // Display the final total in the "total-rating" span
        document.getElementById('total-rating').textContent = finalTotal;
    }

    // Update the total rating whenever a category total changes
    const ratingInputs = document.querySelectorAll('.rating-input, .rating-dropdown');
    ratingInputs.forEach(input => {
        input.addEventListener('input', calculateFinalTotal);
        input.addEventListener('change', calculateFinalTotal);
    });

    // Initial call to set the total rating on page load
    calculateFinalTotal();
});



        const ratingInputs = document.querySelectorAll('.rating-input');
        const categoryTotals = document.querySelectorAll('.category-total-score');
        const finalTotalInput = document.getElementById('final-total');

        // Update total dynamically on dropdown selection change
        const ratingDropdowns = document.querySelectorAll('.rating-dropdown');
        const totalRatingDisplay = document.getElementById('total-rating');
    
        function updateTotalRating() {
    let totalRating = 0;
    
    ratingDropdowns.forEach((dropdown) => {
        const value = parseInt(dropdown.value, 10);
        if (!isNaN(value)) {
            totalRating += value;
        }
    });

    totalRatingDisplay.textContent = totalRating;

    // Update the category-total-score input with the calculated totalRating
    // You may need to assign it to specific fields based on the category or general total
    document.getElementById('category-total-score').value = totalRating;
}
    
ratingDropdowns.forEach(dropdown => {
    dropdown.addEventListener('change', () => {
        updateTotalRating();
        calculateCategoryTotals();  // Update totals after dropdown change
        calculateFinalTotal();      // Update final total if needed
    });
});
    
        // Ensure all sections are rated before submission
        document.getElementById('submit-button').addEventListener('click', function (event) {
            let allRated = true;
    
            ratingDropdowns.forEach((dropdown) => {
                if (dropdown.value === "") {
                    allRated = false;
                }
            });
    
            if (!allRated) {
                alert('Please rate all sections before submitting.');
                event.preventDefault();
            }
        });

        function calculateCategoryTotals() {
    const categories = {};
    ratingDropdowns.forEach(dropdown => {
        const category = dropdown.dataset.category;  // Assuming each dropdown has a `data-category` attribute
        const value = parseInt(dropdown.value, 10);
        if (!categories[category]) {
            categories[category] = 0;
        }
        if (!isNaN(value)) {
            categories[category] += value;
        }
    });

    categoryTotals.forEach(totalInput => {
        const category = totalInput.id.replace('-total', ''); // Assuming input id is like "category-total-score"
        totalInput.value = categories[category] || 0;
    });
}

        function calculateFinalTotal() {
            let finalTotal = 0;
            categoryTotals.forEach(input => {
                const value = parseInt(input.value, 10);
                if (!isNaN(value)) {
                    finalTotal += value;
                }
            });
            finalTotalInput.value = finalTotal;
        }

        ratingInputs.forEach(input => {
            input.addEventListener('input', () => {
                calculateCategoryTotals();
                calculateFinalTotal();
            });
        });
        

        document.getElementById('interview-form').addEventListener('submit', (event) => {
            event.preventDefault();
            alert(`Form submitted with final total score: ${finalTotalInput.value}`);
        });

        // Toggle active class for sidebar links
    document.querySelectorAll('.sidebar ul li a').forEach(link => {
        link.addEventListener('click', function() {
            document.querySelectorAll('.sidebar ul li a').forEach(link => link.classList.remove('active'));
            this.classList.add('active');
        });
    });

    // Toggle collapsible content
    document.querySelectorAll('.collapsible-header').forEach(header => {
        header.addEventListener('click', function() {
            var content = this.nextElementSibling;
            if (content.style.display === 'block') {
                content.style.display = 'none';
            } else {
                // Hide all other collapsible contents
                document.querySelectorAll('.collapsible-content').forEach(item => {
                    if (item !== content) {
                        item.style.display = 'none';
                    }
                });
                content.style.display = 'block';
            }
        });
    });

    



    </script>
</body>
</html>
