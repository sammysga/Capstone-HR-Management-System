<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HR Interview Form</title>
    <link rel="stylesheet" href="/css/sidebar.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
            padding: 20px;
            margin: 0;
        }

        h1 {
            color: #124A5C;
            margin-bottom: 20px;
        }

        .container {
            margin-left: 280px;
            padding: 20px;
        }

        form {
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
            max-width: 100%;
            margin: 20px auto;
        }

        .form-section {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #333;
        }

        input[type="text"], input[type="date"], input[type="number"], select, textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-sizing: border-box;
            margin-bottom: 10px;
            font-size: 16px;
        }

        input[readonly] {
            background-color: #e9ecef;
            cursor: not-allowed;
        }

        button {
            background-color: #07ACB9;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            display: block;
            margin: 20px 0;
        }

        button:hover {
            background-color: #065d6a;
        }

        h2 {
            color: #124A5C;
            font-size: 1.2rem;
            margin-bottom: 10px;
        }

        .rating-guide table {
            width: 100%;
            border-collapse: collapse;
        }

        .rating-guide table th, 
        .rating-guide table td {
            border: 1px solid #ccc;
            padding: 10px;
            text-align: left;
        }

        .rating-guide table th {
            background-color: #f1f1f1;
        }

        .skill-section {
            margin-bottom: 20px;
        }

        .skill-section div {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

        .skill-section div label {
            flex: 1;
            margin-right: 10px;
        }

        .skill-section div input {
            width: 60px;
            padding: 5px;
            text-align: center;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .category-total {
            margin-top: 10px;
            display: flex;
            align-items: center;
            justify-content: flex-end;
        }

        .category-total span {
            margin-right: 10px;
            font-weight: bold;
        }

        .category-total input {
            width: 80px;
            padding: 5px;
            text-align: center;
            background-color: #e9ecef;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .final-total {
            margin-top: 30px;
            display: flex;
            justify-content: flex-end;
            align-items: center;
        }

        .final-total span {
            font-size: 18px;
            font-weight: bold;
            margin-right: 10px;
        }

        .final-total input {
            width: 100px;
            padding: 10px;
            text-align: center;
            background-color: #e9ecef;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 16px;
        }

        .additional-info {
            margin-top: 20px;
        }

        .additional-info label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .additional-info input {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

      .yes-no-section {
    margin-top: 20px;
    display: flex;
    justify-content: space-between;
    gap: 20px;
}

.yes-no-section > div {
    flex: 1;
    text-align: center;
    display: flex;
    flex-direction: column;
    justify-content: center;
}

.yes-no-section > div > label {
    display: block;
    margin-bottom: 15px;
    font-weight: bold;
}

.yes-no-section > div > div {
    display: flex;
    justify-content: center;
    gap: 20px;
}

.yes-no-section input[type="radio"] {
    width: 20px;
    height: 20px;
    margin-right: 5px;
}


.yes-no-section .options {
    display: flex;
    gap: 20px;
    justify-content: center;
    margin-top: 10px;
}

.yes-no-section .options label {
    display: flex;
    align-items: center;
    gap: 5px;
    font-weight: normal;
    color: inherit;
}

        .submit-section {
            margin-top: 30px;
            display: flex;
            justify-content: space-between;
            gap: 15px;
        }

        .submit-section button {
            padding: 10px 20px;
            font-size: 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            width: auto;
        }

        .submit-section .back {
            background-color: #6c757d;
            color: #fff;
        }

        .submit-section .save {
            background-color: #ffc107;
            color: #fff;
        }

        .submit-section .save-submit {
            background-color: #007bff;
            color: #fff;
        }

        .submit-section button:hover {
            opacity: 0.9;
        }

        @media (max-width: 768px) {
            .container {
                margin-left: 0;
            }

            .yes-no-section {
                flex-direction: column;
                align-items: center;
            }

            .yes-no-section div {
                margin-bottom: 20px;
            }

            form {
                padding: 10px;
            }

            .form-section {
                margin-bottom: 15px;
            }

            input[type="text"], input[type="date"], input[type="number"], select, textarea {
                font-size: 14px;
            }

            button {
                font-size: 14px;
            }
        }


        .rating-dropdown {
        width: 130px;
        padding: 5px;
        text-align: center;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .rating-explanation {
        display: none;
        position: absolute;
        background-color: #fff;
        border: 1px solid #ccc;
        padding: 10px;
        width: 300px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        z-index: 10;
        font-size: 14px;
    }

    .rating-container {
        position: relative;
        display: inline-block;
    }

    .rating-container:hover .rating-explanation {
        display: block;
    }

    .rating-container label {
        flex: 1;
    }
    </style>
</head>
<body>
    <%- include('../../partials/hr_partials') %>
    <div class="container">
        <header>
            <h1>HR Interview Form</h1>
        </header>

        <form id="interview-form" method="POST" action="/saveEvaluation">
            <input type="hidden" id="applicant-id" name="applicantId" value="<%= applicantId %>">
        
            <div class="form-section">
                <label for="candidate-name">Candidate Name:</label>
                <input type="text" id="candidate-name" name="candidateName" value="<%= applicant?.firstName %> <%= applicant?.lastName %>" readonly>
            
                <label for="position-title">Position Title:</label>
                <input type="text" id="position-title" name="positionTitle" value="<%= applicant?.jobpositions?.jobTitle || 'N/A' %>" readonly>
            
                <label for="position-department">Position Department:</label>
                <input type="text" id="position-department" name="positionDepartment" value="<%= interviewDetails.departmentName %>" readonly>
            
                <label for="conducted-by">Conducted by:</label>
                <input type="text" id="conducted-by" name="conductedBy" value="<%= interviewDetails.conductedBy %>" readonly>
            
                <label for="date-of-interview">Date of Interview:</label>
                <input type="text" id="date-of-interview" name="dateOfInterview" value="<%= interviewDetails.dateOfInterview %>" readonly>
            </div>

 <!-- Rating Definition Guide -->
 <div class="rating-guide">
    <h2>Rating Definition Guide</h2>
    <table>
        <tr>
            <th>Clearly Evident</th>
            <td>Clearly and thoroughly explains actions, thought process, and outcomes. Shows a deep understanding and high level of skill in the area being assessed.</td>
            <td>3</td>
        </tr>
        <tr>
            <th>Moderately Evident</th>
            <td>Adequately explains actions, thought process, and outcomes, but some aspects may be unclear or underdeveloped. Shows a reasonable understanding and skill level in the area being assessed.</td>
            <td>2</td>
        </tr>
        <tr>
            <th>Not Evident</th>
            <td>Struggles to explain actions, thought process, and outcomes. Shows a lack of understanding and inadequate skill in the area being assessed.</td>
            <td>1</td>
        </tr>
    </table>
</div>

           <!-- Professional Background and Experience -->
<div class="skill-section" id="professional-background-section">
    <h2>Professional Background and Experience</h2>
    <div>
        <label>Demonstrated understanding of role requirements?</label>
        <select class="rating-dropdown" data-category="professional">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
    <div>
        <label>Relevance of experience to job description?</label>
        <select class="rating-dropdown" data-category="professional">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
    <div>
        <label>Highlighted achievements and contributions in previous roles?</label>
        <select class="rating-dropdown" data-category="professional">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
</div>

<div class="category-total">
    <h3>Total:</h3>
    <input type="number" readonly id="professional-total" value="0">
</div>

            <!-- Functional Skills -->
<div class="skill-section" id="functional-skills-section">
    <h2>Functional Skills</h2>
    <div>
        <label>Proficiency in relevant skills:</label>
        <select class="rating-dropdown" data-category="functional">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
    <div>
        <label>Experience in Finance strategy, industry mapping, P&L management:</label>
        <select class="rating-dropdown" data-category="functional">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
    <div>
        <label>Provided examples of skills utilization and success:</label>
        <select class="rating-dropdown" data-category="functional">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
</div>

<div class="category-total">
    <h3>Total:</h3>
    <input type="number" readonly id="functional-total" value="0">
</div>

             <!-- Teamwork and Collaboration -->
<div class="skill-section" id="teamwork-section">
    <h2>Teamwork and Collaboration</h2>
    <div>
        <label>Emphasized importance of collaboration?</label>
        <select class="rating-dropdown" data-category="teamwork">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
    <div>
        <label>Shared experiences of effective teamwork?</label>
        <select class="rating-dropdown" data-category="teamwork">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
</div>

<div class="category-total">
    <h3>Total:</h3>
    <input type="number" readonly id="teamwork-total" value="0">
</div>


            <!-- Value Creation -->
<div class="skill-section" id="value-creation-section">
    <h2>Value Creation</h2>
    <div>
        <label>Demonstrated ability to generate innovative ideas or solutions?</label>
        <select class="rating-dropdown" data-category="value-creation">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
    <div>
        <label>Contributed to the creation of tangible value for the team or organization?</label>
        <select class="rating-dropdown" data-category="value-creation">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
</div>

<div class="category-total">
    <h3>Total:</h3>
    <input type="number" readonly id="value-total" value="0">
</div>

           <!-- Integrity -->
<div class="skill-section" id="integrity-section">
    <h2>Integrity</h2>
    <div>
        <label>Showed respect for colleagues and stakeholders?</label>
        <select class="rating-dropdown" data-category="integrity">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
    <div>
        <label>Acted professionally and courteously in all interactions?</label>
        <select class="rating-dropdown" data-category="integrity">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
</div>

<div class="category-total">
    <h3>Total:</h3>
    <input type="number" readonly id="integrity-total" value="0">
</div>


            <!-- Problem-Solving Abilities -->
<div class="skill-section" id="problem-solving-section">
    <h2>Problem-Solving Abilities</h2>
    <div>
        <label>Demonstrated strong problem-solving skills?</label>
        <select class="rating-dropdown" data-category="problem-solving">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
    <div>
        <label>Provided examples of problem-solving approach?</label>
        <select class="rating-dropdown" data-category="problem-solving">
            <option value="">Select</option>
            <option value="3">3 (Clearly Evident)</option>
            <option value="2">2 (Moderately Evident)</option>
            <option value="1">1 (Not Evident)</option>
        </select>
    </div>
</div>

<div class="category-total">
    <h3>Total:</h3>
    <input type="number" readonly id="problem-solving-total" value="0">
</div>


            <!-- Motivation and Fit -->
<div class="skill-section" id="motivation-fit-section">
    <h2>Motivation and Fit</h2>
    <div>
        <label>Demonstrated genuine interest in the position?</label>
<select class="rating-dropdown" name="motivation_interest" data-category="motivation-fit">
    <option value="1">Yes</option>
    <option value="0">No</option>
</select>

    </div>
</div>
<!-- Calculated Total Section -->
<div class="final-total">
    <h3>Calculated Total Assessment Rating:</h3>
    <span id="total-rating">0</span>
</div>

            <!--Additional Info-->
            <div class="additional-info">
                <label for="expected-compensation">Expected Compensation:</label>
                <input type="text" id="expected-compensation" placeholder="Enter expected compensation">

                <label for="reason-applying">Reason for Applying:</label>
                <input type="text" id="reason-applying" placeholder="Enter reason for applying">

                <label for="availability">Availability:</label>
                <input type="text" id="availability" placeholder="Enter availability">
            </div>

<!-- Yes/No Section (Redesigned) -->
<div class="yes-no-section">
    <div>
        <label>Potential Fit for the Role?</label>
        <div>
            <input type="radio" id="fit-role-yes" name="fitRole" value="Yes">
            <label for="fit-role-yes">Yes</label>
            <input type="radio" id="fit-role-no" name="fitRole" value="No">
            <label for="fit-role-no">No</label>
        </div>
    </div>

    <div>
        <label>Recommended for Further Consideration in Hiring Process?</label>
        <div>
            <input type="radio" id="consideration-yes" name="consideration" value="Yes">
            <label for="consideration-yes">Yes</label>
            <input type="radio" id="consideration-no" name="consideration" value="No">
            <label for="consideration-no">No</label>
        </div>
    </div>
</div>


            <!--Submit Section-->
            <div class="submit-section">
                <button type="button" class="back">Back</button>
                <button type="submit" class="save-submit">Save & Submit</button>
            </div>
        </form>
    </div>

<script>

document.addEventListener("DOMContentLoaded", () => {
    const urlParams = new URLSearchParams(window.location.search);
    const applicantId = urlParams.get("applicantId");

    if (applicantId) {
        document.getElementById("applicant-id").value = applicantId;
    } else {
        console.error("Applicant ID not found in URL.");
    }
});

// UPDATED SAVE FUNCTION - Fixed to collect all form data properly
document.querySelector(".save-submit").addEventListener("click", async function (event) {
    event.preventDefault();

    // Collect all form data
    const applicantId = document.getElementById("applicant-id").value;
    const totalRating = parseFloat(document.getElementById("total-rating").textContent);
    
    // Collect all individual ratings
    const professionalDropdowns = document.querySelectorAll('#professional-background-section .rating-dropdown');
    const functionalDropdowns = document.querySelectorAll('#functional-skills-section .rating-dropdown');
    const teamworkDropdowns = document.querySelectorAll('#teamwork-section .rating-dropdown');
    const valueDropdowns = document.querySelectorAll('#value-creation-section .rating-dropdown');
    const integrityDropdowns = document.querySelectorAll('#integrity-section .rating-dropdown');
    const problemSolvingDropdowns = document.querySelectorAll('#problem-solving-section .rating-dropdown');
    const motivationDropdown = document.querySelector('#motivation-fit-section .rating-dropdown');
    
    // Collect category totals
    const professionalTotal = document.getElementById('professional-total').value;
    const functionalTotal = document.getElementById('functional-total').value;
    const teamworkTotal = document.getElementById('teamwork-total').value;
    const valueTotal = document.getElementById('value-total').value;
    const integrityTotal = document.getElementById('integrity-total').value;
    const problemSolvingTotal = document.getElementById('problem-solving-total').value;
    
    // Collect additional info
    const expectedCompensation = document.getElementById('expected-compensation').value;
    const reasonForApplying = document.getElementById('reason-applying').value;
    const availability = document.getElementById('availability').value;
    
    // Collect yes/no questions
    const fitForRole = document.querySelector('input[name="fitRole"]:checked')?.value === 'Yes';
    const recommendedForConsideration = document.querySelector('input[name="consideration"]:checked')?.value === 'Yes';

    console.log("Sending applicantId:", applicantId, "Total Rating(parsed):", totalRating);

    // Prepare the request body to match backend expectations
    const requestBody = {
        applicantId,
        totalAssessmentRating: totalRating, // Changed from totalRating to totalAssessmentRating
        
        // Individual ratings - Professional Background
        professional_understanding: professionalDropdowns[0]?.value || 0,
        professional_relevance: professionalDropdowns[1]?.value || 0,
        professional_achievements: professionalDropdowns[2]?.value || 0,
        
        // Individual ratings - Functional Skills
        functional_proficiency: functionalDropdowns[0]?.value || 0,
        functional_experience: functionalDropdowns[1]?.value || 0,
        functional_examples: functionalDropdowns[2]?.value || 0,
        
        // Individual ratings - Teamwork
        teamwork_collaboration: teamworkDropdowns[0]?.value || 0,
        teamwork_experiences: teamworkDropdowns[1]?.value || 0,
        
        // Individual ratings - Value Creation
        value_innovation: valueDropdowns[0]?.value || 0,
        value_contribution: valueDropdowns[1]?.value || 0,
        
        // Individual ratings - Integrity
        integrity_respect: integrityDropdowns[0]?.value || 0,
        integrity_professional: integrityDropdowns[1]?.value || 0,
        
        // Individual ratings - Problem Solving
        problem_solving_skills: problemSolvingDropdowns[0]?.value || 0,
        problem_solving_examples: problemSolvingDropdowns[1]?.value || 0,
        
        // Individual ratings - Motivation
        motivation_interest: motivationDropdown?.value || 0,
        
        // Category totals
        professionalTotal: parseInt(professionalTotal) || 0,
        functionalTotal: parseInt(functionalTotal) || 0,
        teamworkTotal: parseInt(teamworkTotal) || 0,
        valueTotal: parseInt(valueTotal) || 0,
        integrityTotal: parseInt(integrityTotal) || 0,
        problemSolvingTotal: parseInt(problemSolvingTotal) || 0,
        motivationTotal: parseInt(motivationDropdown?.value) || 0,
        
        // Additional information
        expectedCompensation,
        reasonForApplying,
        availability,
        fitForRole,
        recommendedForConsideration,
        
        // Status update
        newStatus: "P2 - HR Evaluation Accomplished"
    };

    console.log("Request body being sent:", requestBody);

    try {
        const response = await fetch("/saveEvaluation", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(requestBody),
        });

        const result = await response.json();
        console.log("Server response:", result);

        if (result.success) {
            alert("Evaluation saved successfully! Applicant status updated to P2 - HR Evaluation Accomplished");
            window.location.href = "/hr/applicant-tracker";
        } else {
            alert(`Failed to save the evaluation: ${result.message}`);
            console.error("Server error details:", result);
        }
    } catch (error) {
        console.error("Error saving the evaluation:", error);
        alert("An error occurred while saving the evaluation.");
    }
});

// Toggle active class for sidebar links
document.querySelectorAll('.sidebar ul li a').forEach(link => {
    link.addEventListener('click', function() {
        document.querySelectorAll('.sidebar ul li a').forEach(link => link.classList.remove('active'));
        this.classList.add('active');
    });
});

// Toggle collapsible content
document.querySelectorAll('.collapsible-header').forEach(header => {
    header.addEventListener('click', function() {
        var content = this.nextElementSibling;
        if (content.style.display === 'block') {
            content.style.display = 'none';
        } else {
            // Hide all other collapsible contents
            document.querySelectorAll('.collapsible-content').forEach(item => {
                if (item !== content) {
                    item.style.display = 'none';
                }
            });
            content.style.display = 'block';
        }
    });
});

// Professional Background section calculations
document.addEventListener('DOMContentLoaded', () => {
    const ratingDropdowns = document.querySelectorAll('#professional-background-section .rating-dropdown');
    const categoryTotalInput = document.getElementById('professional-total');

    function updateProfessionalTotal() {
        let total = 0;
        ratingDropdowns.forEach((dropdown) => {
            const value = parseInt(dropdown.value, 10);
            if (!isNaN(value)) {
                total += value;
            }
        });
        categoryTotalInput.value = total;
        updateFinalTotal(); // Update final total when category changes
    }

    ratingDropdowns.forEach((dropdown) => {
        dropdown.addEventListener('change', updateProfessionalTotal);
    });

    updateProfessionalTotal();
});

// Functional Skills section calculations
document.addEventListener('DOMContentLoaded', () => {
    const ratingDropdowns = document.querySelectorAll('#functional-skills-section .rating-dropdown');
    const categoryTotalInput = document.getElementById('functional-total');

    function updateFunctionalTotal() {
        let total = 0;
        ratingDropdowns.forEach((dropdown) => {
            const value = parseInt(dropdown.value, 10);
            if (!isNaN(value)) {
                total += value;
            }
        });
        categoryTotalInput.value = total;
        updateFinalTotal(); // Update final total when category changes
    }

    ratingDropdowns.forEach((dropdown) => {
        dropdown.addEventListener('change', updateFunctionalTotal);
    });

    updateFunctionalTotal();
});

// Teamwork section calculations
document.addEventListener('DOMContentLoaded', () => {
    const ratingDropdowns = document.querySelectorAll('#teamwork-section .rating-dropdown');
    const categoryTotalInput = document.getElementById('teamwork-total');

    function updateTeamworkTotal() {
        let total = 0;
        ratingDropdowns.forEach((dropdown) => {
            const value = parseInt(dropdown.value, 10);
            if (!isNaN(value)) {
                total += value;
            }
        });
        categoryTotalInput.value = total;
        updateFinalTotal(); // Update final total when category changes
    }

    ratingDropdowns.forEach((dropdown) => {
        dropdown.addEventListener('change', updateTeamworkTotal);
    });

    updateTeamworkTotal();
});

// Value Creation section calculations
document.addEventListener('DOMContentLoaded', () => {
    const ratingDropdowns = document.querySelectorAll('#value-creation-section .rating-dropdown');
    const categoryTotalInput = document.getElementById('value-total');

    function updateValueCreationTotal() {
        let total = 0;
        ratingDropdowns.forEach((dropdown) => {
            const value = parseInt(dropdown.value, 10);
            if (!isNaN(value)) {
                total += value;
            }
        });
        categoryTotalInput.value = total;
        updateFinalTotal(); // Update final total when category changes
    }

    ratingDropdowns.forEach((dropdown) => {
        dropdown.addEventListener('change', updateValueCreationTotal);
    });

    updateValueCreationTotal();
});

// Integrity section calculations
document.addEventListener('DOMContentLoaded', () => {
    const ratingDropdowns = document.querySelectorAll('#integrity-section .rating-dropdown');
    const categoryTotalInput = document.getElementById('integrity-total');

    function updateIntegrityTotal() {
        let total = 0;
        ratingDropdowns.forEach((dropdown) => {
            const value = parseInt(dropdown.value, 10);
            if (!isNaN(value)) {
                total += value;
            }
        });
        categoryTotalInput.value = total;
        updateFinalTotal(); // Update final total when category changes
    }

    ratingDropdowns.forEach((dropdown) => {
        dropdown.addEventListener('change', updateIntegrityTotal);
    });

    updateIntegrityTotal();
});

// Problem-Solving section calculations
document.addEventListener('DOMContentLoaded', () => {
    const ratingDropdowns = document.querySelectorAll('#problem-solving-section .rating-dropdown');
    const categoryTotalInput = document.getElementById('problem-solving-total');

    function updateProblemSolvingTotal() {
        let total = 0;
        ratingDropdowns.forEach((dropdown) => {
            const value = parseInt(dropdown.value, 10);
            if (!isNaN(value)) {
                total += value;
            }
        });
        categoryTotalInput.value = total;
        updateFinalTotal(); // Update final total when category changes
    }

    ratingDropdowns.forEach((dropdown) => {
        dropdown.addEventListener('change', updateProblemSolvingTotal);
    });

    updateProblemSolvingTotal();
});

// Motivation and Fit section calculations - FIXED
document.addEventListener('DOMContentLoaded', () => {
    // Note: Changed from .rating-input to .rating-dropdown to match your HTML
    const ratingDropdown = document.querySelector('#motivation-fit-section .rating-dropdown');
    
    function updateMotivationTotal() {
        // Since motivation section only has one dropdown, we don't need a separate total field
        // The value is directly used in the final calculation
        updateFinalTotal(); // Update final total when this changes
    }

    if (ratingDropdown) {
        ratingDropdown.addEventListener('change', updateMotivationTotal);
    }

    updateMotivationTotal();
});

// CONSOLIDATED FINAL TOTAL CALCULATION
function updateFinalTotal() {
    // Select all category total inputs and motivation dropdown
    const professionalTotal = parseInt(document.getElementById('professional-total').value) || 0;
    const functionalTotal = parseInt(document.getElementById('functional-total').value) || 0;
    const teamworkTotal = parseInt(document.getElementById('teamwork-total').value) || 0;
    const valueTotal = parseInt(document.getElementById('value-total').value) || 0;
    const integrityTotal = parseInt(document.getElementById('integrity-total').value) || 0;
    const problemSolvingTotal = parseInt(document.getElementById('problem-solving-total').value) || 0;
    
    // For motivation, get the dropdown value directly since it's not a sum
    const motivationDropdown = document.querySelector('#motivation-fit-section .rating-dropdown');
    const motivationTotal = parseInt(motivationDropdown?.value) || 0;

    const finalTotal = professionalTotal + functionalTotal + teamworkTotal + 
                      valueTotal + integrityTotal + problemSolvingTotal + motivationTotal;

    // Display the final total in the "total-rating" span
    document.getElementById('total-rating').textContent = finalTotal;
    
    console.log("Final Total Updated:", finalTotal);
}

// Legacy functions kept for compatibility (from your original code)
document.addEventListener('DOMContentLoaded', () => {
    // Function to calculate the total rating from all category totals (LEGACY - now handled by updateFinalTotal)
    function calculateFinalTotal() {
        updateFinalTotal(); // Call the new consolidated function
    }

    // Update the total rating whenever a category total changes (LEGACY)
    const ratingInputs = document.querySelectorAll('.rating-input, .rating-dropdown');
    ratingInputs.forEach(input => {
        input.addEventListener('input', calculateFinalTotal);
        input.addEventListener('change', calculateFinalTotal);
    });

    // Initial call to set the total rating on page load
    calculateFinalTotal();
});

// Legacy total rating update function (from your original code)
document.addEventListener("DOMContentLoaded", () => {
    // Select all rating dropdowns after DOM is loaded
    const ratingDropdowns = document.querySelectorAll(".rating-dropdown");

    // Function to update total rating (LEGACY - now handled by updateFinalTotal)
    function updateTotalRating() {
        updateFinalTotal(); // Call the new consolidated function
        console.log("Legacy updateTotalRating called"); // Debugging log
    }

    // Function to calculate category totals (LEGACY - now handled by individual section functions)
    function calculateCategoryTotals() {
        console.log("Legacy calculateCategoryTotals called.");
    }

    // Add event listeners to dropdowns after DOM is fully loaded
    ratingDropdowns.forEach((dropdown) => {
        dropdown.addEventListener("change", () => {
            updateTotalRating(); // Update the total rating
            calculateCategoryTotals(); // Update category totals
        });
    });
});

// FORM VALIDATION BEFORE SUBMIT
document.addEventListener('DOMContentLoaded', () => {
    // Check if submit-button exists (from your original code)
    const submitButton = document.getElementById('submit-button');
    if (submitButton) {
        submitButton.addEventListener('click', function (event) {
            const ratingDropdowns = document.querySelectorAll('.rating-dropdown');
            let allRated = true;

            ratingDropdowns.forEach((dropdown) => {
                if (dropdown.value === "") {
                    allRated = false;
                    dropdown.classList.add('error');
                } else {
                    dropdown.classList.remove('error');
                }
            });

            if (!allRated) {
                alert('Please rate all sections before submitting.');
                event.preventDefault();
            }
        });
    }
});

// Legacy category calculation functions (kept for compatibility but simplified)
function calculateCategoryTotals() {
    // This is now handled by individual section functions
    console.log("Legacy calculateCategoryTotals function called");
}

function calculateFinalTotal() {
    // This now calls the new consolidated function
    updateFinalTotal();
}

// Legacy form submission handler (from your original code)
document.addEventListener('DOMContentLoaded', () => {
    const interviewForm = document.getElementById('interview-form');
    if (interviewForm) {
        interviewForm.addEventListener('submit', (event) => {
            event.preventDefault();
            const finalTotal = document.getElementById('total-rating').textContent;
            alert(`Form submitted with final total score: ${finalTotal}`);
        });
    }
});

// Initialize final total calculation on page load
document.addEventListener('DOMContentLoaded', () => {
    // Wait a bit for all other event listeners to be set up
    setTimeout(() => {
        updateFinalTotal();
    }, 100);
});

</script>
</body>
</html>
