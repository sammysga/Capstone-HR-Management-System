<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Applicant Tracker - Job Position</title>
    <link rel="stylesheet" href="/css/sidebar.css"> <!-- Linking Sidebar CSS -->
    <link rel="stylesheet" href="/css/linemanager.css"> <!-- Linking Main Content CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"> <!-- FontAwesome for icons -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <style>

.review-modal-reject-button {
    background-color: #e74c3c;
    color: white;
    border: none;
    padding: 10px 20px;
    margin: 0 10px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s ease;
}

.review-modal-reject-button:hover {
    opacity: 0.8;
}

/* Add this CSS to your existing styles */

/* Center the scores table and enhance its appearance */
.scores-table {
    margin: 0 auto;  /* Center the table horizontally */
    width: 80%;      /* Control the width of the table */
    border-collapse: collapse;
    margin-bottom: 20px;
    text-align: center; /* Center text within the table */
}

.scores-table th, 
.scores-table td {
    padding: 8px 12px;
    border: 1px solid #ddd;
}

.scores-table th {
    background-color: #f2f2f2;
}

.scores-table tr:nth-child(even) {
    background-color: #f9f9f9;
}

/* Add a container around the scores section to center all elements within */
.scores-section {
    text-align: center;
    margin: 15px 0;
}

/* Style for the computation verdict section */
.computation-verdict {
    text-align: center;
    margin: 15px 0;
    padding: 10px;
    font-size: 16px;
    background-color: #f9f9f9;
    border-radius: 5px;
}

        body {
            font-family: 'Inter', sans-serif;
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        .main-content {
            margin-left: 350px;
            padding: 20px;
            width: calc(100% - 350px);
            background-color: #FFFFFF;
        }

        .header-section {
            margin-bottom: 10px;
            margin-left: 5px;
            font-size: 24px;
            text-align: left;
        }

        .subheader {
            font-size: 20px;
            margin-left: 5px;
            margin-bottom: 20px;
            color: #555;
        }

        .tracking-section {
            background-color: #FFFFFF;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            margin: 10px 5px;
        }

        .search-container {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 15px;
        }

        .search-bar {
            padding: 8px;
            width: 370px;
            font-size: 16px;
            border: 1px solid #ddd;
        }

        .search-button {
            margin-left: 10px;
            background-color: #124A5C;
            color: white;
            border: none;
            padding: 10px;
            cursor: pointer;
            font-size: 16px;
        }

        .right-section {
            display: flex;
            gap: 10px;
        }

        .right-section button {
            padding: 10px 15px;
            font-size: 16px;
            font-weight: bold;
            border: none;
            background-color:#124A5C;
            color: white;
            transition: background-color 0.3s ease;
        }

        .right-section button:hover {
            background-color: #B4E3E3       ;
            color: white;
        }

        .tracking-table {
            width: 100%;
            border-collapse: collapse;
        }

        .tracking-table th, 
        .tracking-table td {
            padding: 10px 10px;
            border: 1px solid #ddd;
        }

        .tracking-table th,
        .tracking-table td {
            text-align: left;
        }

        .tracking-table th:nth-child(1),
        .tracking-table td:nth-child(1) {
            width: 10%; 
        }

        .tracking-table th:nth-child(2),
        .tracking-table td:nth-child(2) {
            width: 20%;
        }

        .tracking-table th:nth-child(3),
        .tracking-table td:nth-child(3) {
            width: 15%; 
        }

        .tracking-table th:nth-child(4),
        .tracking-table td:nth-child(4) {
            width: 15%; 
        }

        .tracking-table td:last-child {
            display: flex;
            justify-content: space-between; 
            align-items: center;
        }

        .tracking-table td:last-child span {
            text-align: left; 
            flex-grow: 1;
        }

        .tracking-table th,
        .tracking-table td {
            text-align: left;
        }

        .tracking-table td:last-child button {
            margin-left: 10px; 
        }
        .tracking-table tr:hover {
            background-color: #f1f1f1;
        }
       
        .job-title-container {
            display: flex;
            align-items: center;
        }

        /* Style for status circle */
        .status-circle {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px; 
        }

        /* Green status circle */
        .status-circle.green {
            background-color: green;
        }

        /* Gray status circle */
        .status-circle.gray {
            background-color: gray;
        }

        /* Button styling for status actions */
        .status-button {
            background-color: white; 
            color: black; 
            border: 1px solid #124A5C; 
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 14px;
            cursor: pointer;
            text-align: center;
            width: auto;
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        .status-button:hover {
            background-color: #124A5C; 
            color: white; 
        }

        .btn-review, .btn-evaluation, .btn-onboarding {
            background-color: white;
            color: black;
            border: 1px solid #124A5C;
            padding: 10px 20px;
            cursor: pointer;
            border-radius: 5px;
            font-size: 14px;
            transition: background-color 0.3s ease, color 0.3s ease;
            width: 150px;
            text-align: center; 
        }

        .btn-review:hover, .btn-evaluation:hover, .btn-onboarding:hover {
            background-color: #124A5C;
            color: white;
        }
        .set-interview-button {
                    padding: 10px 20px;
                    background-color: #124A5C;
                    color: white;
                    border: none;
                    cursor: pointer;
                    font-size: 16px;
                    margin-top: 20px;
                    display: block;
                    width: 20%;
                    text-align: center;
                }
                .set-interview-button:hover {
                    background-color: #B4E3E3       ;
                    color: white;
                }

        /* Styling for the Modals */
        .modal {
            display: none; 
            position: fixed; 
            z-index: 1000; 
            left: 0;
            top: 0;
            width: 100%; 
            height: 100%; 
            overflow: auto; 
            background-color: rgba(0,0,0,0.4); 
        }

        .modal-content {
            background-color: #fefefe;
            margin: 10% auto; 
            padding: 20px;
            border: 1px solid #888;
            border-radius: 8px; 
            width: 80%; 
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); 
        }

        .modal-header, .modal-body, .modal-footer {
            text-align: center;
        }

        .close-button {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close-button:hover,
        .close-button:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

        .modal-buttons {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

        .modal-buttons button {
            padding: 10px 20px;
            margin: 0 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s ease;
        }

        .modal-buttons button#backButton {
            background-color: rgba(18, 74, 92, 0.5); 
            color: white;
        }

        .modal-buttons button#confirmButton {
            background-color: #124A5C; 
            color: white;
        }

        .modal-buttons button:hover {
            opacity: 0.8; 
        }

        .divider {
            height: 2px; 
            background-color: #124A5C; 
            margin: 10px 0; 
        }

        .modal-question {
            display: flex;
            justify-content: center;  
            align-items: center;
            text-align: center;
            margin-top: 20px;  
            margin-bottom: 20px; 
            font-size: 16px;
        }

        /* Modal Styling */
.modal {
    display: none; /* Hidden by default */
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    overflow: auto;
}

.modal-content {
    background-color: #fefefe;
    margin: 10% auto;
    padding: 20px;
    border-radius: 8px;
    width: 60%; /* Adjust as necessary */
    text-align: center; /* Center content inside modal */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.modal-content h2, .modal-content p {
    color: #124A5C;
    margin-bottom: 20px;
}

.modal-buttons {
    display: flex;
    justify-content: center;
    gap: 20px; /* Space between buttons */
}

.modal-buttons button {
    padding: 10px 20px;
    font-size: 16px;
    font-weight: bold;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.back-button {
    background-color: rgba(18, 74, 92, 0.5); /* Transparent background */
    color: white;
}

.confirm-button {
    background-color: #124A5C;
    color: white;
}

.modal-buttons button:hover {
    opacity: 0.8;
}

/* Close Button (X) */
.close-button {
    color: #aaa;
    font-size: 28px;
    font-weight: bold;
    float: right;
    cursor: pointer;
}

.close-button:hover {
    color: black;
}

.review-modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.4);
}

.review-modal-content {
    background-color: #fefefe;
    margin: 10% auto;
    padding: 20px;
    border: 1px solid #888;
    border-radius: 8px;
    width: 50%;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    text-align: center;
}

.review-close-button {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
}

.review-close-button:hover,
.review-close-button:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
}

.review-modal-buttons {
    display: flex;
    justify-content: center;
    margin-top: 20px;
}

.review-modal-buttons button {
    padding: 10px 20px;
    margin: 0 10px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s ease;
}

.review-modal-back-button {
    background-color: rgba(18, 74, 92, 0.5);
    color: white;
}

.review-modal-confirm-button {
    background-color: #124A5C;
    color: white;
}

.review-modal-buttons button:hover {
    opacity: 0.8;
}


/*USER ID CSS*/
#applicant-userId {
    display: none;
}

/* ========== ADDED P2 STYLES ========== */
/* P2 Review Section Styles - Similar to Line Manager P1 styles */
.applicant-status-section {
    background-color: #FFFFFF;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    margin: 10px 5px 20px;
    display: none; /* Hidden by default */
}

.applicant-status-section h3.subheader {
    color: #124A5C;
    margin-bottom: 15px;
    font-size: 20px;
    font-weight: bold;
}

.applicant-status-section .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0;
    width: 100%;
}

.applicant-status-section .section-header h3.subheader {
    margin: 0;
    color: #124A5C;
    font-weight: bold;
}

.applicant-status-section .right-section {
    display: flex;
    gap: 10px;
}

.applicant-status-section .right-section button {
    padding: 10px 15px;
    font-size: 16px;
    font-weight: bold;
    border: none;
    background-color: #124A5C;
    color: white;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.applicant-status-section .right-section button:hover {
    background-color: #B4E3E3;
    color: #124A5C;
}

.applicant-status-section .divider {
    height: 2px;
    background-color: #124A5C;
    margin: 15px 0;
    width: 100%;
    display: block;
    clear: both;
}

/* Filter button styling */
.filter-button {
    padding: 10px 15px;
    font-size: 15px;
    font-weight: bold;
    border: none;
    background-color: #124A5C;
    color: white;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    min-width: 130px;
}

.filter-button:hover {
    background-color: #0d3a47;
}

.filter-button.active {
    background-color: #07ACB9;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

/* Sort section styling */
.sort-section {
    display: flex;
    align-items: center;
    margin: 10px 0;
}

.sort-section label {
    margin-right: 10px;
    font-weight: bold;
}

.sort-section select {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: white;
    min-width: 180px;
}

/* Toggle Status Button - P2 */
.btn-toggle-status {
    padding: 6px 12px;
    background-color: #6c757d;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.btn-toggle-status:hover {
    background-color: #5a6268;
}

.btn-toggle-status.status-passed {
    background-color: #28a745;
}

.btn-toggle-status.status-failed {
    background-color: #dc3545;
}

/* No data message */
.no-data-message {
    padding: 20px;
    background-color: #f8f9fa;
    border-left: 4px solid #07ACB9;
    color: #555;
    font-size: 16px;
    font-style: italic;
}

.no-data-message p {
    margin: 0;
}

/* Section header row in tables */
.section-header-row {
    background-color: #f0f0f0;
    font-weight: bold;
}

.section-header-row td {
    padding: 8px;
    background-color: #f0f0f0;
}

/* ========== P2 STYLES ========== */
.recipient-item {
    padding: 10px;
    border-bottom: 1px solid rgba(255,255,255,0.3);
}

.recipient-item:last-child {
    border-bottom: none;
}

.recipient-name {
    font-weight: bold;
    margin-bottom: 2px;
}

.recipient-email {
    font-size: 14px;
    opacity: 0.8;
    margin-bottom: 2px;
}

.recipient-job {
    font-size: 12px;
    opacity: 0.7;
    font-style: italic;
}

/* Enhanced modal styles for document reupload functionality */
        .document-reupload-section {
            background-color: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
            display: none;
        }

        .document-reupload-section.active {
            display: block;
        }

        .document-reupload-section h4 {
            color: #856404;
            margin-top: 0;
            margin-bottom: 15px;
        }

        .checkbox-group {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-bottom: 15px;
        }

        .checkbox-item {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .checkbox-item input[type="checkbox"] {
            transform: scale(1.2);
        }

        .checkbox-item label {
            cursor: pointer;
            user-select: none;
        }

        .remarks-section {
            margin-top: 15px;
        }

        .remarks-section label {
            display: block;
            font-weight: bold;
            margin-bottom: 8px;
            color: #856404;
        }

        .remarks-section textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            resize: vertical;
            min-height: 80px;
        }

        .reupload-button {
            background-color: #f39c12;
            color: white;
            border: none;
            padding: 10px 20px;
            margin: 0 10px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s ease;
        }

        .reupload-button:hover {
            background-color: #e67e22;
        }

        .modal-buttons-enhanced {
            display: flex;
            justify-content: center;
            margin-top: 20px;
            gap: 10px;
            flex-wrap: wrap;
        }

        .addtl-document-section {
            background-color: #e8f4f8;
            padding: 15px;
            border-radius: 5px;
            margin-top: 15px;
        }

        .addtl-document-section h5 {
            margin-top: 0;
            color: #124A5C;
        }

        .warning-text {
            color: #d9534f;
            font-size: 0.9em;
            margin-top: 5px;
            font-style: italic;
        }


    </style>
</head>
<body>

<%- include('../../partials/hr_partials') %>

<!-- Main Content Section -->
<div class="main-content">

    <!-- Header Section -->
    <div class="header-section">
        <h2>Applicant Tracking</h2>
        <% if (applicants && applicants.length > 0) { %>
          <div class="subheader">
            <%= applicants[0].jobTitle %>
          </div>
        <% } else { %>
          <p>No applicant found.</p>
        <% } %>
      </div>
      

  <!-- Applicant Tracking Section -->
    <div class="tracking-section">
        <div class="search-container">
            <div class="left-section">
                <input type="text" class="search-bar" id="searchBar" placeholder="Search by Application No., Name, Email, or Status">
                <button class="search-button"><i class="fas fa-search"></i> Search</button>
            </div>
            <!-- ========== MODIFIED FILTER SECTION - Added filter-button class ========== -->
            <div class="right-section">
                <button id="filter-all" class="filter-button active">All</button>
                <button id="filter-review" class="filter-button">For Review</button>
                <button id="filter-evaluation" class="filter-button">For Evaluation</button>
                <button id="filter-onboarding" class="filter-button">For Onboarding</button>
            </div>            
            <!-- ========== END MODIFIED FILTER SECTION ========== -->
        </div>

        <!-- ========== ADDED P2 APPLICANT STATUS SECTION ========== -->
        <!-- P2 Applicant Status Section (Hidden by default, shown when "For Review" is clicked) -->
        <div class="applicant-status-section" id="applicantStatusSection">
            <!-- Header section with flexbox -->
            <div class="section-header">
                <h3 class="subheader">List of Applicants on <span id="currentPhase">Review</span></h3>
                <div class="right-section" id="finalizeButtonContainer">
                    <!-- Finalize button will be added dynamically based on phase -->
                </div>
            </div>
            <!-- Divider placed immediately after the section-header -->
            <div class="divider"></div>
            
            <h4>Awaiting for Action</h4>
            <table class="tracking-table" id="awaitingActionTable">
                <thead>
                    <tr>
                        <th>Applicant No.</th>
                        <th>Last Name, First Name</th>
                        <th>Department</th>
                        <th>Position Applied</th>
                        <th>Total Score</th>
                        <th>Applicant Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Will be populated dynamically -->
                </tbody>
            </table>

            <h4>Applicants on <span id="currentPhase2">Review</span> Declared Results</h4>
            <div class="sort-section">
                <label for="sortOptions">Sort By:</label>
                <select id="sortOptions">
                    <option value="ascending">Score - Ascending</option>
                    <option value="descending">Score - Descending</option>
                    <option value="alphabetical">Alphabetically</option>
                </select>
            </div>
            <table class="tracking-table" id="declaredResultsTable">
                <thead>
                    <tr>
                        <th>Applicant No.</th>
                        <th>Last Name, First Name</th>
                        <th>Department</th>
                        <th>Position Applied</th>
                        <th>Total Score</th>
                        <th>Applicant Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Will be populated dynamically -->
                </tbody>
            </table>
        </div>
        <!-- ========== END ADDED P2 APPLICANT STATUS SECTION ========== -->
        <!-- Table for Applicant Data -->
<!-- Table for Applicant Data -->
<table class="tracking-table" id="mainApplicantTable" style="width: 100%; margin-bottom: 20px; border-collapse: collapse;">
    <thead>
        <tr>
            <th>Applicant No.</th>
            <th>Last Name, First Name</th>
            <th>Department</th>
            <th>Position Applied</th>
            <th>Applicant Status & Actions</th>
        </tr>
    </thead>
    <tbody>
        <% if (applicants && applicants.length) { %>
            <% applicants.forEach((applicant, index) => { %>
                <tr class="applicant-row" 
                    data-phase="<%= applicant.applicantStatus && applicant.applicantStatus.startsWith('P1') ? 'P1' : applicant.applicantStatus && applicant.applicantStatus.startsWith('P2') ? 'P2' : applicant.applicantStatus && applicant.applicantStatus.startsWith('P3') ? 'P3' : 'other' %>" 
                    data-status="<%= applicant.applicantStatus || '' %>"
                    data-userid="<%= applicant.userId %>"
                    data-applicantid="<%= applicant.applicantId %>"
                    data-name="<%= applicant.lastName %>, <%= applicant.firstName %>"
                    data-score="<%= applicant.hrInterviewFormScore || 'N/A' %>">
                    <td><%= index + 1 %></td>
                    <td>
                        <%= applicant.lastName %>, <%= applicant.firstName %>
                        <br>
                        <small style="color: #555;"><%= applicant.userEmail || 'Email not available' %></small>
                    </td>
                    
                    <td><%= applicant.deptName %></td> <!-- Display department name -->
                    <td><%= applicant.jobTitle %></td> <!-- Display job title -->
                    <td>
<!-- Display Applicant Status -->
<span><strong>Status:</strong> <%= applicant.applicantStatus || 'Pending' %></span>

<div style="margin-top: 10px;">
    <% if (applicant.applicantStatus && applicant.applicantStatus.startsWith('P1 - Awaiting for HR Action')) { %>
        <!-- For Review Button -->
        <button 
class="btn-review" 
onclick="
    console.log('Opening Modal with:', {
        lastName: '<%= applicant.lastName %>',
        firstName: '<%= applicant.firstName %>',
        birthDate: '<%= applicant.birthDate %>',
        email: '<%= applicant.userEmail %>',
        phoneNo: '<%= applicant.phoneNo %>',
        scores: {
            degree: '<%= applicant.initialScreeningAssessment.degreeScore %>',
            experience: '<%= applicant.initialScreeningAssessment.experienceScore %>',
            certifications: '<%= applicant.initialScreeningAssessment.certificationScore %>',
            hardSkills: '<%= applicant.initialScreeningAssessment.hardSkillsScore %>',
            softSkills: '<%= applicant.initialScreeningAssessment.softSkillsScore %>',
            workSetup: '<%= applicant.initialScreeningAssessment.workSetupScore %>',
            availability: '<%= applicant.initialScreeningAssessment.availabilityScore %>'
        },
        totalScore: '<%= applicant.initialScreeningAssessment.totalScore %>',
        resumeURL: '<%= applicant.initialScreeningAssessment.resume_url %>',
        applicantStatus: '<%= applicant.applicantStatus %>'
    });

    showAppropriateModal(
        '<%= applicant.userId %>', 
        '<%= applicant.lastName %>', 
        '<%= applicant.firstName %>', 
        '<%= applicant.birthDate %>', 
        '<%= applicant.userEmail %>', 
        '<%= applicant.phoneNo %>', 
        {
            degree: '<%= applicant.initialScreeningAssessment.degreeScore %>',
            experience: '<%= applicant.initialScreeningAssessment.experienceScore %>',
            certifications: '<%= applicant.initialScreeningAssessment.certificationScore %>',
            hardSkills: '<%= applicant.initialScreeningAssessment.hardSkillsScore %>',
            softSkills: '<%= applicant.initialScreeningAssessment.softSkillsScore %>',
            workSetup: '<%= applicant.initialScreeningAssessment.workSetupScore %>',
            availability: '<%= applicant.initialScreeningAssessment.availabilityScore %>'
        }, 
        '<%= applicant.initialScreeningAssessment.totalScore %>', 
        '<%= applicant.initialScreeningAssessment.degree_url %>',
        '<%= applicant.initialScreeningAssessment.cert_url %>',
        '<%= applicant.initialScreeningAssessment.resume_url %>',
        '<%= applicant.applicantStatus %>'
    )
">
For Review
</button>

    
                            <% } else if (applicant.applicantStatus === 'P2 - Awaiting for HR Evaluation') { %>
    <!-- For Evaluation Button -->
    <a href="/hr/evaluation-form/<%= applicant.applicantId %>">
        <button class="btn-evaluation">For Evaluation</button>
    </a>
    <% } else if (applicant.applicantStatus && applicant.applicantStatus.startsWith('P2 - HR Evaluation Accomplished')) { %>
        <!-- ========== MODIFIED P2 ACCOMPLISHED SECTION ========== -->
        <!-- For Review Button that redirects to review filter -->
        <button 
            class="btn-review" 
            onclick="goToP2ReviewFilter()"
            style="background-color: white; color: black; border: 1px solid #124A5C; padding: 10px 20px; cursor: pointer; border-radius: 5px; font-size: 14px; transition: background-color 0.3s ease, color 0.3s ease; width: 150px; text-align: center;">
            For Review
        </button>
        <!-- ========== END MODIFIED P2 ACCOMPLISHED SECTION ========== -->
    <% } %>
</div>
                            
                        </div>
                    </td>   
                </tr>
            <% }); %>
        <% } else { %>
            <tr>
                <td colspan="5">No applicants found.</td>
            </tr>
        <% } %>
    </tbody>
    
    
    
</table>

<h2 class="header-section" style="margin-top: 30px; margin-bottom: 10px;">Onboarding</h2>

<table class="tracking-table" id="onboardingTable" style="width: 100%; border-collapse: collapse;">
    <thead>
        <tr>
            <th>Application No.</th>
            <th>Last Name, First Name</th>
            <th>Department</th>
            <th>Position Applied</th>
            <th>Application Status & Actions</th>
        </tr>
    </thead>
    <tbody>
        <% if (applicants && applicants.length) { %>
            <% applicants.forEach((applicant, index) => { %>
                <% if (applicant.applicantStatus === 'P3 - PASSED - Job Offer Sent') { %>
                    <tr>
                        <td><%= index + 1 %></td>
                        <td>
                            <%= applicant.lastName %>, <%= applicant.firstName %>
                            <br>
                            <small style="color: #555;"><%= applicant.userEmail || 'Email not available' %></small>
                        </td>
                        <td><%= applicant.deptName %></td>
                        <td><%= applicant.jobTitle %></td>
                        <td>
                            <span><strong>Status:</strong> <%= applicant.applicantStatus %></span>
                            <div style="margin-top: 10px;">
                                <button class="btn-onboarding" onclick="openOnboardingModal(
                                    '<%= applicant.userId %>',
                                    '<%= applicant.applicantId %>',
                                    '<%= applicant.firstName %>',
                                    '<%= applicant.lastName %>',
                                    '<%= applicant.birthDate %>',
                                    '<%= applicant.userEmail %>',
                                    '<%= applicant.phoneNo %>',
                                    '<%= applicant.jobId %>',
                                    '<%= applicant.jobTitle %>'
                                )">For Onboarding</button>
                            </div>
                        </td>
                    </tr>
                <% } %>
            <% }); %>
        <% } else { %>
            <tr>
                <td colspan="5">No applicants for onboarding found.</td>
            </tr>
        <% } %>
    </tbody>
</table>


<!--Frontend Modals-->

<!-- Modal for Confirm Release of Job Offer -->
<div id="releaseJobOfferModal" class="modal">
    <div class="modal-content">
        <span class="close-button" onclick="closeModal('releaseJobOfferModal')">&times;</span>
        <h2 style="color: #07ACB9;">Name</h2>
        <p><strong>Age:</strong> Text</p>
        <p><strong>Email:</strong> Text</p>
        <p><strong>Contact No:</strong> Text</p>
        
        <div class="divider"></div>
        
        <h3>Panel Assessment Form Breakdown</h3>
        <p>[INSERT SUBMITTED FORM HERE]</p>
        
        <div class="modal-question">
            <p><strong>Would you like to release the job offer and notify the applicant they are being considered for hiring?</strong></p>
        </div>
        
        <div class="modal-buttons">
            <button id="backButton" onclick="closeModal('releaseJobOfferModal')">Back</button>
            <button id="confirmButton" onclick="sendNotification()">Notify Applicant</button>
        </div>
    </div>
</div>

<!-- Modal for Account Setup Creation Reminder -->
<div id="accountSetupReminderModal" class="modal">
    <div class="modal-content">
        <span class="close-button" onclick="closeModal('accountSetupReminderModal')">&times;</span>
        <h1>Account Setup Creation Reminder</h1>
        
        <h2><strong>Applicant Personal Information</strong></h2>
        <h3><strong>Name</strong></h3>
        <p><strong>Age:</strong> Text</p>
        <p><strong>Email:</strong> Text</p>
        <p><strong>Contact No:</strong> Text</p>
        
        <div class="modal-question">
            <p><strong>Have you created an account for the employee through the Manage Employees page and emailed them the account details?</strong></p>
        </div>
        
        <div class="modal-buttons">
            <button id="backButton" onclick="closeModal('accountSetupReminderModal')">Back</button>
            <button id="confirmButton" onclick="confirmAccountSetup()">Confirm</button>
        </div>
    </div>
</div>


<button class="set-interview-button" onclick="setInterviewAvailabilities()">Set Interview Availabilities on Calendly</button>

<!-- Modal for P1: Finalize Review and Notify Applicants -->
<div id="finalizeModalP1" class="modal">
    <div class="modal-content">
        <span class="close-button">&times;</span>
        <h2>Confirm Final Review and Notify Applicants</h2>
        <p>You are about to finalize the review process and notify all applicants who were not selected that they have not advanced to the next stage. This action is irreversible. Are you sure you want to proceed?</p>
        <div class="modal-buttons">
            <button id="backButtonP1" class="back-button">Back</button>
            <button id="confirmButtonP1" class="confirm-button">Confirm</button>
        </div>
    </div>
</div>

<!-- Modal for P2: Finalize Review and Notify Applicants -->
<div id="finalizeModalP2" class="modal">
    <div class="modal-content">
        <span class="close-button">&times;</span>
        <h2>Confirm Final Review and Notify Applicants</h2>
        <p>You are about to finalize the review process and notify all applicants who were not selected that they have not advanced to the next stage. This action is irreversible. Are you sure you want to proceed?</p>
        <div class="modal-buttons">
            <button id="backButtonP2" class="back-button">Back</button>
            <button id="confirmButtonP2" class="confirm-button">Confirm</button>
        </div>
    </div>
</div>

<!-- Modal for P3: Finalize Review and Notify Applicants -->
<div id="finalizeModalP3" class="modal">
    <div class="modal-content">
        <span class="close-button">&times;</span>
        <h2>Confirm Final Review and Notify Applicants</h2>
        <p>You are about to finalize the review process and notify all applicants who were not selected that they have not advanced to the next stage. This action is irreversible. Are you sure you want to proceed?</p>
        <div class="modal-buttons">
            <button id="backButtonP3" class="back-button">Back</button>
            <button id="confirmButtonP3" class="confirm-button">Confirm</button>
        </div>
    </div>
</div>

<!-- ========== UPDATED P2 NOTIFY MODAL ========== -->
<!-- Modal for notifying P2 applicants -->
<div id="notifyApplicantsModal" class="modal">
    <div class="modal-content">
        <span class="close-button" onclick="closeModal('notifyApplicantsModal')">&times;</span>
        <h2>Confirm P2 Review Finalization</h2>
        <p>You are about to finalize the P2 review process using Gmail compose. This will prepare customizable email templates and open Gmail with pre-filled recipient information for both passed and failed applicants. Are you sure you want to proceed?</p>
        <div class="modal-buttons">
            <button id="backButtonP2Modal" class="back-button" onclick="closeModal('notifyApplicantsModal')">Back</button>
            <button id="confirmP2Button" class="confirm-button" onclick="startP2GmailIntegrationFlow()">Start Gmail Process</button>
        </div>
    </div>
</div>
<!-- ========== END UPDATED P2 NOTIFY MODAL ========== -->

<div id="hrInitialScreeningModalHtml" class="review-modal">
    <div class="review-modal-content">
        <span class="review-close-button">&times;</span>
        <h2>P1: Initial Screening Score Breakdown</h2> 
        <div class="divider"></div>
        <div class="applicant-details">
            <input type="hidden" id="userId">
            <input type="hidden" id="jobId">            
            <input type="hidden" id="applicantId">

            <p><strong>Name:</strong> <span id="applicant-name"></span></p>
            <p><strong>Birthday:</strong> <span id="applicant-birthday"></span></p>
            <p><strong>Email:</strong> <span id="applicant-email"></span></p>
            <p><strong>Contact No.:</strong> <span id="applicant-contact"></span></p>
        </div>

        <h4>HR Online Assessment Form Breakdown</h4>
        <div class="scores-section">
            <h4>Initial Screening Scores</h4> 
            <table class="scores-table"> 
                <thead> 
                    <tr> 
                        <th>Criteria</th> 
                        <th>Score</th> 
                    </tr> 
                </thead> 
                <tbody> 
                    <tr> 
                        <td>Industry Specific Degree</td> 
                        <td id="score-degree"></td> 
                    </tr> 
                    <tr> 
                        <td>Experiences</td> 
                        <td id="score-experience"></td> 
                    </tr> 
                    <tr> 
                        <td>Certifications</td> 
                        <td id="score-certifications"></td> 
                    </tr> 
                    <tr> 
                        <td>Hard Skills</td> 
                        <td id="score-hard-skills"></td> 
                    </tr> 
                    <tr> 
                        <td>Soft Skills</td> 
                        <td id="score-soft-skills"></td> 
                    </tr> 
                    <tr> 
                        <td>Work Setup</td> 
                        <td id="score-work-setup"></td> 
                    </tr> 
                    <tr> 
                        <td>Availability</td> 
                        <td id="score-availability"></td> 
                    </tr> 
                </tbody> 
            </table> 
            <div class="computation-verdict"> 
                <strong>Computation Verdict - <span id="computation-verdict"></span></strong> 
            </div>
        </div>

        <h4>Uploaded Documents</h4>
        <p><strong>Degree:</strong> <a id="degree-doc" href="#" target="_blank">No document uploaded</a></p>
        <div id="degree-preview" style="margin-top: 10px;"></div>
        
        <p><strong>Certification:</strong> <a id="cert-doc" href="#" target="_blank">No document uploaded</a></p>
        <div id="cert-preview" style="margin-top: 10px;"></div>
        
        <p><strong>Resume:</strong> <a id="resume-doc" href="#" target="_blank">No document uploaded</a></p>
        <div id="resume-preview" style="margin-top: 10px;"></div>

        <!-- Additional Document Section (only show if exists) -->
        <div id="addtl-document-section" style="display: none;">
            <p><strong>Additional Document:</strong> <a id="addtl-doc" href="#" target="_blank">No additional document</a></p>
            <div id="addtl-preview" style="margin-top: 10px;"></div>
            <div class="addtl-document-section" style="background-color: #e8f4f8; padding: 15px; border-radius: 5px; margin-top: 15px;">
                <h5 style="margin-top: 0; color: #124A5C;">HR Remarks for Additional Document:</h5>
                <p id="hr-remarks-display" style="font-style: italic; color: #555;"></p>
            </div>
        </div>

        <!-- Document Reupload Request Section -->
        <div id="document-reupload-section" class="document-reupload-section" style="background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 20px; margin: 20px 0; display: none;">
            <h4 style="color: #856404; margin-top: 0; margin-bottom: 15px;"><i class="fas fa-exclamation-triangle"></i> Document Reupload Request</h4>
            <p>Please select which documents need to be reuploaded by the applicant:</p>
            
            <div class="checkbox-group" style="display: flex; flex-direction: column; gap: 10px; margin-bottom: 15px;">
                <div class="checkbox-item" style="display: flex; align-items: center; gap: 10px;">
                    <input type="checkbox" id="reupload-degree" name="reupload-docs" value="degree" style="transform: scale(1.2);">
                    <label for="reupload-degree" style="cursor: pointer; user-select: none;">Degree Certificate</label>
                </div>
                <div class="checkbox-item" style="display: flex; align-items: center; gap: 10px;">
                    <input type="checkbox" id="reupload-cert" name="reupload-docs" value="certification" style="transform: scale(1.2);">
                    <label for="reupload-cert" style="cursor: pointer; user-select: none;">Certification Document</label>
                </div>
                <div class="checkbox-item" style="display: flex; align-items: center; gap: 10px;">
                    <input type="checkbox" id="reupload-resume" name="reupload-docs" value="resume" style="transform: scale(1.2);">
                    <label for="reupload-resume" style="cursor: pointer; user-select: none;">Resume</label>
                </div>
                <div class="checkbox-item" style="display: flex; align-items: center; gap: 10px;">
                    <input type="checkbox" id="reupload-addtl" name="reupload-docs" value="additional" style="transform: scale(1.2);">
                    <label for="reupload-addtl" style="cursor: pointer; user-select: none;">Request Additional Document</label>
                </div>
            </div>

            <div class="remarks-section" style="margin-top: 15px;">
                <label for="reupload-remarks" style="display: block; font-weight: bold; margin-bottom: 8px; color: #856404;">Remarks/Instructions for Applicant: <span style="color: #d9534f; font-size: 0.9em; font-style: italic;">*Required</span></label>
                <textarea id="reupload-remarks" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 4px; resize: vertical; min-height: 80px;" placeholder="Please provide specific instructions for the applicant regarding the document reupload requirements..."></textarea>
                <div style="color: #d9534f; font-size: 0.9em; margin-top: 5px; font-style: italic;">This message will be shown to the applicant when they log in to the chatbot.</div>
            </div>
        </div>

        <!-- HR Verification Statement and Comments -->
        <div class="verification-section" style="margin-top: 20px; padding: 10px; border-top: 1px solid #ccc;">
            <label style="display: flex; align-items: flex-start; gap: 10px; font-weight: normal;">
                <input type="checkbox" id="hr-verification-checkbox" style="margin-top: 3px;">
                <span>
                    I confirm that the applicant is eligible for endorsement to the Line Manager after a review of the submitted documents.
                </span>
            </label>
            <p style="color: #d9534f; margin: 5px 0 15px 25px; font-size: 0.9em;">
                * This checkbox must be ticked to proceed with confirmation and endorsement to the Line Manager.
            </p>

            <label for="hr-verification-comments" style="display: block; margin-top: 10px;"><strong>HR Comments (optional):</strong></label>
            <textarea id="hr-verification-comments" rows="3" style="width: 100%; padding: 8px; resize: vertical;" placeholder="Enter any remarks or notes..."></textarea>
        </div>

        <!-- Enhanced Modal Buttons -->
        <div class="review-modal-buttons" style="display: flex; justify-content: center; margin-top: 20px; gap: 10px; flex-wrap: wrap;">
            <button id="backButton" class="review-modal-back-button" onclick="document.getElementById('hrInitialScreeningModalHtml').style.display = 'none'">Back</button>
            <button id="reuploadRequestButton" style="background-color: #f39c12; color: white; border: none; padding: 10px 20px; margin: 0 10px; border-radius: 5px; cursor: pointer; font-size: 16px; transition: background-color 0.3s ease;" onclick="toggleReuploadSection()">Document Reupload Request</button>
            <button id="rejectButton" class="review-modal-reject-button" onclick="rejectHRInitialScreeningModal()">Reject</button>
            <button id="confirmButton" class="review-modal-confirm-button" onclick="confirmHRInitialScreeningModal()">Confirm</button>
        </div>
    </div>
</div>

<!-- Second Modal for Final Decision (No Reupload Request) -->
<div id="hrInitialScreeningDecisionModal" class="review-modal">
    <div class="review-modal-content">
        <span class="review-close-button">&times;</span>
        <h2>P1: Final Review - Initial Screening</h2> 
        <div class="divider"></div>
        <div class="applicant-details">
            <input type="hidden" id="final-userId">
            <input type="hidden" id="final-jobId">            
            <input type="hidden" id="final-applicantId">

            <p><strong>Name:</strong> <span id="final-applicant-name"></span></p>
            <p><strong>Birthday:</strong> <span id="final-applicant-birthday"></span></p>
            <p><strong>Email:</strong> <span id="final-applicant-email"></span></p>
            <p><strong>Contact No.:</strong> <span id="final-applicant-contact"></span></p>
        </div>

        <h4>HR Online Assessment Form Breakdown</h4>
        <div class="scores-section">
            <h4>Initial Screening Scores</h4> 
            <table class="scores-table"> 
                <thead> 
                    <tr> 
                        <th>Criteria</th> 
                        <th>Score</th> 
                    </tr> 
                </thead> 
                <tbody> 
                    <tr> 
                        <td>Industry Specific Degree</td> 
                        <td id="final-score-degree"></td> 
                    </tr> 
                    <tr> 
                        <td>Experiences</td> 
                        <td id="final-score-experience"></td> 
                    </tr> 
                    <tr> 
                        <td>Certifications</td> 
                        <td id="final-score-certifications"></td> 
                    </tr> 
                    <tr> 
                        <td>Hard Skills</td> 
                        <td id="final-score-hard-skills"></td> 
                    </tr> 
                    <tr> 
                        <td>Soft Skills</td> 
                        <td id="final-score-soft-skills"></td> 
                    </tr> 
                    <tr> 
                        <td>Work Setup</td> 
                        <td id="final-score-work-setup"></td> 
                    </tr> 
                    <tr> 
                        <td>Availability</td> 
                        <td id="final-score-availability"></td> 
                    </tr> 
                </tbody> 
            </table> 
            <div class="computation-verdict"> 
                <strong>Computation Verdict - <span id="final-computation-verdict"></span></strong> 
            </div>
        </div>

        <h4>Uploaded Documents</h4>
        <p><strong>Degree:</strong> <a id="final-degree-doc" href="#" target="_blank">No document uploaded</a></p>
        <div id="final-degree-preview" style="margin-top: 10px;"></div>
        
        <p><strong>Certification:</strong> <a id="final-cert-doc" href="#" target="_blank">No document uploaded</a></p>
        <div id="final-cert-preview" style="margin-top: 10px;"></div>
        
        <p><strong>Resume:</strong> <a id="final-resume-doc" href="#" target="_blank">No document uploaded</a></p>
        <div id="final-resume-preview" style="margin-top: 10px;"></div>

        <!-- Additional Document Section (only show if exists) -->
        <div id="final-addtl-document-section" style="display: none;">
            <p><strong>Additional Document:</strong> <a id="final-addtl-doc" href="#" target="_blank">No additional document</a></p>
            <div id="final-addtl-preview" style="margin-top: 10px;"></div>
            <div class="addtl-document-section" style="background-color: #e8f4f8; padding: 15px; border-radius: 5px; margin-top: 15px;">
                <h5 style="margin-top: 0; color: #124A5C;">HR Remarks for Additional Document:</h5>
                <p id="final-hr-remarks-display" style="font-style: italic; color: #555;"></p>
            </div>
        </div>

        <!-- HR Verification Statement and Comments -->
        <div class="verification-section" style="margin-top: 20px; padding: 10px; border-top: 1px solid #ccc;">
            <label style="display: flex; align-items: flex-start; gap: 10px; font-weight: normal;">
                <input type="checkbox" id="final-hr-verification-checkbox" style="margin-top: 3px;">
                <span>
                    I confirm that the applicant is eligible for endorsement to the Line Manager after a review of the submitted documents.
                </span>
            </label>
            <p style="color: #d9534f; margin: 5px 0 15px 25px; font-size: 0.9em;">
                * This checkbox must be ticked to proceed with confirmation and endorsement to the Line Manager.
            </p>

            <label for="final-hr-verification-comments" style="display: block; margin-top: 10px;"><strong>HR Comments (optional):</strong></label>
            <textarea id="final-hr-verification-comments" rows="3" style="width: 100%; padding: 8px; resize: vertical;" placeholder="Enter any remarks or notes..."></textarea>
        </div>

        <!-- Final Decision Buttons (No Reupload Request) -->
        <div class="review-modal-buttons">
            <button id="finalBackButton" class="review-modal-back-button">Back</button>
            <button id="finalRejectButton" class="review-modal-reject-button" onclick="rejectFinalHRModal()">Reject</button>
            <button id="finalConfirmButton" class="review-modal-confirm-button" onclick="confirmFinalHRModal()">Confirm</button>
        </div>
    </div>
</div>

    </div>
</div>
<div id="moveToOnboardingModal" class="modal">
    <div class="modal-content" style="width: 70%; max-width: 1200px; background-color: white; border-radius: 8px; box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2); padding: 30px;">
        <span class="close-button" onclick="closeModal('moveToOnboardingModal')" style="color: #666; font-size: 28px; font-weight: bold; position: absolute; right: 20px; top: 15px; cursor: pointer;">&times;</span>
        
        <h1 style="color: #07ACB9; text-align: center; margin-bottom: 30px; font-weight: 600;">
            Move Applicant to Onboarding and Send First Day Checklist?
        </h1>
                
        <input type="hidden" id="onboarding-user-id">
        <input type="hidden" id="onboarding-applicant-id">
        <input type="hidden" id="onboarding-job-id">
        
        <div class="applicant-info-section" style="margin-bottom: 30px; background-color: #f8f9fa; padding: 20px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);">
            <h2 style="color: #124A5C; margin-top: 0; font-weight: 600; margin-bottom: 15px;"><strong>Applicant Personal Information</strong></h2>
            <h3 style="color: #333; margin-top: 0; font-weight: 600; margin-bottom: 15px;"><strong id="applicant-name-onboarding">Name</strong></h3>
            <p style="margin: 10px 0; line-height: 1.6;"><strong>Birthday:</strong> <span id="applicant-birthday-onboarding">Text</span></p>
            <p style="margin: 10px 0; line-height: 1.6;"><strong>Email:</strong> <span id="applicant-email-onboarding">Text</span></p>
            <p style="margin: 10px 0; line-height: 1.6;"><strong>Contact No:</strong> <span id="applicant-contact-onboarding">Text</span></p>
            <p style="margin: 10px 0; line-height: 1.6;"><strong>Position:</strong> <span id="applicant-position-onboarding">Text</span></p>
        </div>
        
<!-- Updated Start Date Section in moveToOnboardingModal -->
<div class="start-date-section" style="margin-bottom: 30px; background-color: #f0f8ff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);">
    <h2 style="color: #124A5C; margin-top: 0; font-weight: 600; margin-bottom: 15px;"><strong>Start Date Information</strong></h2>
    
    <!-- Line Manager's Set Date -->
    <div style="margin-bottom: 15px; padding: 10px; background-color: #e8f4f8; border-radius: 5px; border-left: 4px solid #07ACB9;">
        <p style="margin: 0 0 5px 0; font-weight: 600;">Line Manager's Set Date:</p>
        <p style="margin: 0; font-size: 16px;" id="lm-set-date">Loading...</p>
    </div>
    
    <!-- HR can confirm or modify the date -->
    <p style="margin: 15px 0;">You can confirm or modify the start date for the applicant:</p>
    
    <div style="margin-bottom: 20px;">
        <label for="start-date-input" style="display: block; font-weight: 600; margin-bottom: 10px;">Confirmed Start Date:</label>
        <input type="date" id="start-date-input" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 4px; font-size: 16px;" min="<%= new Date().toISOString().split('T')[0] %>">
    </div>
</div><div class="checklist-section" style="margin-bottom: 30px; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); border: 1px solid #e9ecef;">
            <h2 style="color: #124A5C; margin-top: 0; font-weight: 600; margin-bottom: 15px;"><strong>First Day Onboarding Checklist</strong></h2>
            <p style="margin-bottom: 15px;">The following checklist will be provided to the applicant:</p>
            
            <table style="width: 100%; border-collapse: collapse; margin-bottom: 20px; background: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);">
                <thead>
                    <tr>
                        <th style="background-color: #124A5C; color: white; padding: 15px; text-align: left; font-weight: 500;">Activities</th>
                        <th style="background-color: #124A5C; color: white; padding: 15px; text-align: left; font-weight: 500;">Where</th>
                        <th style="background-color: #124A5C; color: white; padding: 15px; text-align: left; font-weight: 500;">Contact Person</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Finding your workstation + Meeting your team</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Your Department's Floor</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Line Manager</td>
                    </tr>
                    <tr>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Creation of company ID</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">19F Facilities Mgt Room</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Zac Apron</td>
                    </tr>
                    <tr>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Building/Door access</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">19F Security</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Billie Jean</td>
                    </tr>
                    <tr>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Claim IT equipment</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">20th Floor IT Dept, right wing</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Johnny Legend</td>
                    </tr>
                    <tr>
                        <td style="padding: 15px;">Setting up of company email</td>
                        <td style="padding: 15px;">Your Department's Floor</td>
                        <td style="padding: 15px;">Line Manager</td>
                    </tr>
                    <tr>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">
                            Submit Government IDs<br />
                            <em style="display: block; margin-left: 15px; color: #495057;">(Philhealth ID Card, Pag-Ibig ID, SSS ID, Tax Identification Number (TIN))</em>
                        </td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">HR Department, 18th Floor</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Jane Smith</td>
                    </tr>
                    <tr>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">
                            Submit Government Clearances<br />
                            <em style="display: block; margin-left: 15px; color: #495057;">(NBI Clearance, BIR Form 2316)</em>
                        </td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">HR Department, 18th Floor</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Jane Smith</td>
                    </tr>
                    <tr>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">
                            Submit Personal & Identity Document<br />
                            <em style="display: block; margin-left: 15px; color: #495057;">(PSA-issued Birth Certificate, 2x2 Photo with Background)</em>
                        </td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">HR Department, 18th Floor</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Jane Smith</td>
                    </tr>
                    <tr>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">
                            Submit Educational & Professional Records<br />
                            <em style="display: block; margin-left: 15px; color: #495057;">(Transcript of Records, Medical Clearance)</em>
                        </td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">HR Department, 18th Floor</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Jane Smith</td>
                    </tr>
                    <tr>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">
                            Submit Employment & Financial Setup<br />
                            <em style="display: block; margin-left: 15px; color: #495057;">(Bank Account Details, Signed Employment Contract)</em>
                        </td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">HR Department, 18th Floor</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Jane Smith</td>
                    </tr>
                </tbody>
            </table>
            
            <div style="background-color: #f8f9fa; border: 1px solid #ddd; border-radius: 8px; padding: 15px; margin-top: 20px;">
                <p style="margin: 0; display: flex; align-items: center;">
                    <span style="display: inline-block; width: 18px; height: 18px; margin-right: 10px; background-color: #07ACB9; color: white; border-radius: 50%; text-align: center; line-height: 18px; font-weight: bold; font-size: 12px;">i</span>
                    Confirming will update the applicant's status to "Onboarding - First Day Checklist Sent" and send them the first day checklist as a requirement for Onboarding.
                </p>
            </div>
        </div>
        
        
        <div class="modal-question" style="text-align: center; margin: 25px 0;">
            <p style="font-weight: 600; font-size: 1.1rem; color: #124A5C;"><strong>Would you like to move this applicant for onboarding?</strong></p>
        </div>
        
        <div class="modal-buttons" style="display: flex; justify-content: center; gap: 20px; margin-top: 30px;">
            <button id="backButton" onclick="closeModal('moveToOnboardingModal')" style="background-color: #f8f9fa; color: #333; border: 1px solid #ddd; padding: 12px 25px; border-radius: 4px; cursor: pointer; font-weight: 500; font-size: 16px;">Back</button>
            <button id="confirmButton" onclick="confirmOnboarding()" style="background-color: #124A5C; color: white; border: none; padding: 12px 25px; border-radius: 4px; cursor: pointer; font-weight: 500; font-size: 16px;">Confirm</button>
        </div>
    </div>
</div>
<!-- P2 Gmail Compose Modal for Passed Applicants -->
<div id="emailP2PassedModal" class="modal">
    <div class="modal-content" style="width: 85%; max-width: 900px;">
        <span class="close-button" onclick="closeModal('emailP2PassedModal')">&times;</span>
        <h2 style="color: #28a745;">✅ Gmail Compose - HR Interview Advancement Email</h2>
        
        <div style="background-color: #d4edda; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h4 style="color: #155724; margin-top: 0; display: flex; align-items: center;">
                <i class="fas fa-users" style="margin-right: 10px;"></i>
                Recipients (<span id="p2PassedRecipientsCount">0</span> applicants):
            </h4>
            <div id="p2PassedRecipientsList" style="color: #155724; max-height: 180px; overflow-y: auto; background: rgba(255,255,255,0.3); padding: 15px; border-radius: 5px;">
                <!-- Will be populated dynamically -->
            </div>
        </div>
        
        <div style="margin: 25px 0;">
            <label for="p2PassedEmailSubject" style="display: block; font-weight: bold; margin-bottom: 8px;">
                <i class="fas fa-tag" style="margin-right: 8px;"></i>Email Subject:
            </label>
            <input 
                type="text" 
                id="p2PassedEmailSubject" 
                style="width: 100%; padding: 12px; border: 2px solid #28a745; border-radius: 6px; font-size: 16px;"
                value="Great News! You've Advanced to Final Interview - Prime Infrastructure"
            >
        </div>
        
        <div style="margin: 25px 0;">
            <label for="p2PassedEmailTemplate" style="display: block; font-weight: bold; margin-bottom: 8px;">
                <i class="fas fa-edit" style="margin-right: 8px;"></i>Email Template:
            </label>
            <div style="margin: 10px 0; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
                <small style="color: #6c757d;">
                    <strong>Available placeholders:</strong> 
                    <code>{applicantName}</code>, <code>{jobTitle}</code>, <code>{companyName}</code>
                </small>
            </div>
            <textarea 
                id="p2PassedEmailTemplate" 
                rows="14" 
                style="width: 100%; padding: 15px; border: 2px solid #28a745; border-radius: 6px; font-family: Arial, sans-serif; font-size: 14px; line-height: 1.5;"
                placeholder="Email template will be loaded here..."
            ></textarea>
        </div>

        <div style="background: linear-gradient(135deg, #e7f3ff, #f0f8ff); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #007bff;">
            <h4 style="color: #0066cc; margin-top: 0; display: flex; align-items: center;">
                <i class="fab fa-google" style="margin-right: 10px; font-size: 20px;"></i>
                Gmail Integration Ready
            </h4>
            <p style="color: #0066cc; margin-bottom: 0; line-height: 1.6;">
                Clicking "Open Gmail Compose" will open Gmail in a new tab with:<br>
                • <strong>All recipient emails</strong> automatically added to "To:" field<br>
                • <strong>Subject line</strong> pre-filled<br>
                • <strong>Email template</strong> ready in the message body
            </p>
        </div>
        
        <div class="modal-buttons">
            <button class="back-button" onclick="closeModal('emailP2PassedModal')">
                <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
            </button>
            <button class="confirm-button" onclick="openGmailForP2Passed()" style="background: linear-gradient(135deg, #db4437, #c23321); border: none; font-size: 16px; padding: 12px 25px;">
                <i class="fab fa-google" style="margin-right: 8px;"></i>
                Open Gmail Compose
            </button>
        </div>
    </div>
</div>

<!-- P2 Gmail Compose Modal for Failed Applicants -->
<div id="emailP2FailedModal" class="modal">
    <div class="modal-content" style="width: 85%; max-width: 900px;">
        <span class="close-button" onclick="closeModal('emailP2FailedModal')">&times;</span>
        <h2 style="color: #dc3545;">❌ Gmail Compose - HR Interview Notification Email</h2>
        
        <div style="background-color: #f8d7da; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h4 style="color: #721c24; margin-top: 0; display: flex; align-items: center;">
                <i class="fas fa-users" style="margin-right: 10px;"></i>
                Recipients (<span id="p2FailedRecipientsCount">0</span> applicants):
            </h4>
            <div id="p2FailedRecipientsList" style="color: #721c24; max-height: 180px; overflow-y: auto; background: rgba(255,255,255,0.3); padding: 15px; border-radius: 5px;">
                <!-- Will be populated dynamically -->
            </div>
        </div>
        
        <div style="margin: 25px 0;">
            <label for="p2FailedEmailSubject" style="display: block; font-weight: bold; margin-bottom: 8px;">
                <i class="fas fa-tag" style="margin-right: 8px;"></i>Email Subject:
            </label>
            <input 
                type="text" 
                id="p2FailedEmailSubject" 
                style="width: 100%; padding: 12px; border: 2px solid #dc3545; border-radius: 6px; font-size: 16px;"
                value="Thank You for Your Interview - Prime Infrastructure"
            >
        </div>
        
        <div style="margin: 25px 0;">
            <label for="p2FailedEmailTemplate" style="display: block; font-weight: bold; margin-bottom: 8px;">
                <i class="fas fa-edit" style="margin-right: 8px;"></i>Email Template:
            </label>
            <div style="margin: 10px 0; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
                <small style="color: #6c757d;">
                    <strong>Available placeholders:</strong> 
                    <code>{applicantName}</code>, <code>{jobTitle}</code>, <code>{companyName}</code>
                </small>
            </div>
            <textarea 
                id="p2FailedEmailTemplate" 
                rows="14" 
                style="width: 100%; padding: 15px; border: 2px solid #dc3545; border-radius: 6px; font-family: Arial, sans-serif; font-size: 14px; line-height: 1.5;"
                placeholder="Email template will be loaded here..."
            ></textarea>
        </div>

        <div style="background: linear-gradient(135deg, #e7f3ff, #f0f8ff); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #007bff;">
            <h4 style="color: #0066cc; margin-top: 0; display: flex; align-items: center;">
                <i class="fab fa-google" style="margin-right: 10px; font-size: 20px;"></i>
                Gmail Integration Ready
            </h4>
            <p style="color: #0066cc; margin-bottom: 0; line-height: 1.6;">
                Clicking "Open Gmail Compose" will open Gmail in a new tab with:<br>
                • <strong>All recipient emails</strong> automatically added to "To:" field<br>
                • <strong>Subject line</strong> pre-filled<br>
                • <strong>Email template</strong> ready in the message body
            </p>
        </div>
        
        <div class="modal-buttons">
            <button class="back-button" onclick="closeModal('emailP2FailedModal')">
                <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
            </button>
            <button class="confirm-button" onclick="openGmailForP2Failed()" style="background: linear-gradient(135deg, #db4437, #c23321); border: none; font-size: 16px; padding: 12px 25px;">
                <i class="fab fa-google" style="margin-right: 8px;"></i>
                Open Gmail Compose
            </button>
        </div>
    </div>
</div>


<!-- P2 Status Update Modal -->
<div id="p2StatusUpdateModal" class="modal">
    <div class="modal-content" style="width: 70%; max-width: 600px;">
        <h2 style="text-align: center; color: #007bff;">
            <i class="fab fa-google" style="color: #db4437; margin-right: 10px;"></i>
            Gmail Compose Opened
        </h2>
        
        <div style="margin: 30px 0; text-align: center;">
            <div style="font-size: 64px; color: #db4437; margin-bottom: 20px;">
                <i class="fab fa-google"></i>
            </div>
            <p style="font-size: 18px; margin-bottom: 20px;">Gmail compose window has been opened in a new tab with your P2 HR interview emails pre-filled.</p>
            
            <div style="background-color: #e3f2fd; padding: 25px; border-radius: 10px; margin: 25px 0; border-left: 5px solid #2196f3;">
                <h4 style="color: #1976d2; margin-top: 0;">📋 Next Steps:</h4>
                <ol style="text-align: left; margin: 15px 0; color: #1976d2; line-height: 1.8;">
                    <li><strong>Switch to Gmail tab</strong> - Check if Gmail opened correctly</li>
                    <li><strong>Review recipient list</strong> - Verify all emails are in "To:" field</li>
                    <li><strong>Check subject line</strong> - Modify if needed</li>
                    <li><strong>Review email content</strong> - Make final adjustments</li>
                    <li><strong>Send emails</strong> - Click Gmail's send button</li>
                    <li><strong>Return here</strong> - Click "Update Database" below</li>
                </ol>
            </div>
        </div>
        
        <div style="background: linear-gradient(135deg, #fff3cd, #ffeaa7); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #f39c12;">
            <h4 style="color: #856404; margin-top: 0; display: flex; align-items: center;">
                <i class="fas fa-exclamation-triangle" style="margin-right: 10px;"></i>
                Important
            </h4>
            <p style="color: #856404; margin-bottom: 0; line-height: 1.6;">
                <strong>After sending emails in Gmail</strong>, return here and click "Update Database" to finalize the P2 applicant statuses in your system.
            </p>
        </div>
        
        <div class="modal-buttons">
            <button class="back-button" onclick="closeModal('p2StatusUpdateModal')">
                <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel Process
            </button>
            <button class="confirm-button" onclick="updateP2ApplicantStatuses()" style="background: linear-gradient(135deg, #28a745, #20c997); font-size: 16px; padding: 12px 25px;">
                <i class="fas fa-database" style="margin-right: 8px;"></i>
                Update Database
            </button>
        </div>
    </div>
</div>

<!-- ========== ADDED APPLICANTS DATA SCRIPT ========== -->
<script id="applicants-data" type="application/json">
    <% if (typeof applicants !== 'undefined') { %>
      <%- JSON.stringify(applicants) %>
    <% } else { %>
      []
    <% } %>
</script>
<!-- ========== END ADDED APPLICANTS DATA SCRIPT ========== -->


<script>
    
// Global variables for P2 functionality
let currentP2PassedApplicants = [];
let currentP2FailedApplicants = [];
let pendingP2StatusChanges = {};

// P2 Email Integration Global Variables
let p2EmailTemplates = {};
let p2EmailsToUpdate = { passed: [], failed: [] };


// Global variables for tracking modal state
let isReuploadRequested = false;
let currentModalType = 'initial'; // 'initial' or 'final'


// NEW: P2 Gmail Integration Flow Starter Function
function startP2GmailIntegrationFlow() {
    console.log("🚀 [P2 Gmail Flow] Starting P2 Gmail integration flow from modal...");
    
    // Close the existing confirmation modal
    closeModal('notifyApplicantsModal');
    
    // Now start the P2 Gmail integration process
    finalizeP2Review();
}

function p2passApplicant(applicantId) {
    console.log(`🟢 [P2 Pass] Starting pass action for applicantId: ${applicantId}`);
    
    if (!applicantId) {
        console.error('❌ [P2 Pass] Missing applicantId');
        alert("Error: Invalid Applicant ID");
        return;
    }

    // Make API call to update status
    fetch('/hr/markAsP2Passed', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ applicantId: applicantId }),
    })
    .then(response => {
        console.log(`📡 [P2 Pass] API response status: ${response.status}`);
        return response.json();
    })
    .then(data => {
        console.log('📡 [P2 Pass] API response data:', data);
        
        if (data.success) {
            // Record this in the pending changes
            if (!window.pendingP2StatusChanges) {
                window.pendingP2StatusChanges = {};
            }
            window.pendingP2StatusChanges[applicantId] = 'PASSED';
            
            // Move the row from awaiting to declared results
            moveP2RowToSection(applicantId, 'awaitingActionTable', 'declaredResultsTable');
            
            console.log(`✅ [P2 Pass] Successfully marked applicant ${applicantId} as P2 PASSED!`);
            alert("Successfully marked applicant as P2 PASSED!");
            
        } else {
            console.error(`❌ [P2 Pass] API error: ${data.message}`);
            alert("Error updating applicant status: " + (data.message || "Unknown error"));
        }
    })
    .catch(error => {
        console.error("❌ [P2 Pass] Network error:", error);
        alert("Failed to update applicant status.");
    });
}

// Function to handle P2 reject action from awaiting table
function p2rejectApplicant(applicantId) {
    console.log(`🔴 [P2 Reject] Starting reject action for applicantId: ${applicantId}`);
    
    if (!applicantId) {
        console.error('❌ [P2 Reject] Missing applicantId');
        alert("Error: Invalid Applicant ID");
        return;
    }

    // Make API call to update status
    fetch('/hr/markAsP2Failed', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ applicantId: applicantId }),
    })
    .then(response => {
        console.log(`📡 [P2 Reject] API response status: ${response.status}`);
        return response.json();
    })
    .then(data => {
        console.log('📡 [P2 Reject] API response data:', data);
        
        if (data.success) {
            // Record this in the pending changes
            if (!window.pendingP2StatusChanges) {
                window.pendingP2StatusChanges = {};
            }
            window.pendingP2StatusChanges[applicantId] = 'FAILED';
            
            // Move the row from awaiting to declared results
            moveP2RowToSection(applicantId, 'awaitingActionTable', 'declaredResultsTable');
            
            console.log(`✅ [P2 Reject] Successfully marked applicant ${applicantId} as P2 FAILED!`);
            alert("Successfully marked applicant as P2 FAILED!");
            
        } else {
            console.error(`❌ [P2 Reject] API error: ${data.message}`);
            alert("Error updating applicant status: " + (data.message || "Unknown error"));
        }
    })
    .catch(error => {
        console.error("❌ [P2 Reject] Network error:", error);
        alert("Failed to update applicant status.");
    });
}

function moveP2RowToSection(applicantId, fromTableId, toTableId) {
    console.log(`🔄 [P2 Move] Moving applicantId ${applicantId} from ${fromTableId} to ${toTableId}`);
    
    const fromTable = document.getElementById(fromTableId);
    const toTable = document.getElementById(toTableId);
    
    if (!fromTable || !toTable) {
        console.error(`❌ [P2 Move] Tables not found: ${fromTableId} or ${toTableId}`);
        return;
    }
    
    // Find the row in the source table
    const rows = fromTable.querySelectorAll('tbody tr');
    let rowToMove = null;
    
    for (const row of rows) {
        if (row.getAttribute('data-applicantid') === applicantId) {
            rowToMove = row;
            break;
        }
    }
    
    if (!rowToMove) {
        console.error(`❌ [P2 Move] Row for applicant ${applicantId} not found in ${fromTableId}`);
        return;
    }
    
    // Update the status cell
    const statusCell = rowToMove.querySelector('td:nth-child(6)');
    if (statusCell) {
        const isPassed = window.pendingP2StatusChanges[applicantId] === 'PASSED';
        statusCell.textContent = isPassed ? 'P2 - PASSED (Pending Finalization)' : 'P2 - FAILED (Pending Finalization)';
        console.log(`✅ [P2 Move] Updated status cell to: ${statusCell.textContent}`);
    }
    
    // Change the actions column to toggle button for declared results
    if (toTableId === 'declaredResultsTable') {
        const actionsCell = rowToMove.querySelector('td:last-child');
        if (actionsCell) {
            const isPassed = window.pendingP2StatusChanges[applicantId] === 'PASSED';
            actionsCell.innerHTML = `
                <button 
                    class="btn-toggle-status ${isPassed ? 'status-passed' : 'status-failed'}" 
                    data-applicantid="${applicantId}"
                    onclick="toggleP2ApplicantStatus(this)"
                >
                    ${isPassed ? 'Passed' : 'Failed'}
                </button>
            `;
            console.log(`✅ [P2 Move] Added toggle button for applicant ${applicantId}`);
        }
    }
    
    // Move the row
    rowToMove.remove();
    
    // Add to target table
    const targetTbody = toTable.querySelector('tbody');
    
    // Remove any "no data" message
    const noDataRow = targetTbody.querySelector('.no-data-message')?.closest('tr');
    if (noDataRow) {
        noDataRow.remove();
    }
    
    // Find or create P2 section header
    let p2Header = targetTbody.querySelector('.section-header-row');
    if (!p2Header) {
        p2Header = document.createElement('tr');
        p2Header.classList.add('section-header-row');
        p2Header.innerHTML = `<td colspan="7" style="background-color: #f0f0f0; font-weight: bold; padding: 8px;">List of P2 Applicants - Declared Results</td>`;
        targetTbody.appendChild(p2Header);
    }
    
    // Add the row after the header
    p2Header.insertAdjacentElement('afterend', rowToMove);
    
    console.log(`✅ [P2 Move] Successfully moved applicant ${applicantId} to ${toTableId}`);
}

// Toggle P2 applicant status between PASSED and FAILED
function toggleP2ApplicantStatus(button) {
    const row = button.closest('tr');
    if (!row) return;
    
    const applicantId = button.getAttribute('data-applicantid') || row.getAttribute('data-applicantid');
    if (!applicantId) {
        console.error("❌ [P2 Toggle] Cannot toggle status: Missing applicantId");
        alert("Error: Cannot identify the applicant to update status");
        return;
    }
    
    // Get current status
    const statusCell = row.querySelector('td:nth-child(6)');
    if (!statusCell) return;
    
    const currentStatus = statusCell.textContent.trim();
    console.log(`🔄 [P2 Toggle] Toggling P2 status for applicantId ${applicantId}, current status: ${currentStatus}`);
    
    // Toggle between PASSED and FAILED
    let newStatus;
    let apiEndpoint;
    
    if (currentStatus.includes('PASSED')) {
        // If already PASSED, change to FAILED
        newStatus = 'P2 - FAILED (Pending Finalization)';
        apiEndpoint = 'markAsP2Failed';
        button.classList.remove('status-passed');
        button.classList.add('status-failed');
        button.textContent = 'Failed';
    } else {
        // Default to PASSED
        newStatus = 'P2 - PASSED (Pending Finalization)';
        apiEndpoint = 'markAsP2Passed';
        button.classList.remove('status-failed');
        button.classList.add('status-passed');
        button.textContent = 'Passed';
    }
    
    // Update the status cell
    statusCell.textContent = newStatus;
    
    // Store the pending status change
    if (!window.pendingP2StatusChanges) {
        window.pendingP2StatusChanges = {};
    }
    
    window.pendingP2StatusChanges[applicantId] = newStatus.includes('PASSED') ? 'PASSED' : 'FAILED';
    
    console.log(`✅ [P2 Toggle] P2 status change for applicantId ${applicantId} to ${newStatus} is pending finalization`);
    
    // Make API call to update the temporary status
    fetch(`/hr/${apiEndpoint}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ applicantId: applicantId }),
    })
    .then(response => response.json())
    .then(data => {
        if (!data.success) {
            console.error(`❌ [P2 Toggle] Error updating P2 status: ${data.message || 'Unknown error'}`);
        } else {
            console.log(`✅ [P2 Toggle] Successfully updated temporary status for ${applicantId}`);
        }
    })
    .catch(error => {
        console.error('❌ [P2 Toggle] Error calling P2 status API:', error);
    });
}

// Updated finalizeP2Review function to include Gmail integration
function finalizeP2Review() {
    console.log("🚀 [P2 Finalize] Starting P2 review finalization with Gmail compose integration...");

    // Extract status updates from rows in the declared results table
    const declaredResultsTable = document.getElementById("declaredResultsTable");
    const rows = declaredResultsTable?.querySelectorAll('tbody tr:not(.section-header-row)') || [];

    // Arrays to store passed and failed applicant IDs
    const passedApplicantIds = [];
    const failedApplicantIds = [];

    // Process each row to determine which users passed and which failed
    rows.forEach(row => {
        // Skip message rows
        if (row.querySelector('td[colspan]')) return;
        
        const statusCell = row.querySelector('td:nth-child(6)');
        const applicantId = row.getAttribute('data-applicantid');
        
        if (statusCell && applicantId) {
            const statusText = statusCell.textContent.trim();
            
            // Only include P2 rows
            if (statusText.includes('P2')) {
                if (statusText.includes('PASSED')) {
                    passedApplicantIds.push(applicantId);
                    console.log(`✅ [P2 Finalize] Added ${applicantId} to passed list (${statusText})`);
                } else if (statusText.includes('FAILED')) {
                    failedApplicantIds.push(applicantId);
                    console.log(`❌ [P2 Finalize] Added ${applicantId} to failed list (${statusText})`);
                }
            }
        }
    });

    // If no applicants are selected, show an error
    if (passedApplicantIds.length === 0 && failedApplicantIds.length === 0) {
        console.warn("⚠️ [P2 Finalize] No P2 applicants found with PASSED or FAILED status");
        alert("No P2 applicants found with PASSED or FAILED status.");
        closeModal('notifyApplicantsModal');
        return;
    }

    console.log(`📊 [P2 Finalize] Preparing P2 Gmail compose for: ${passedApplicantIds.length} passed, ${failedApplicantIds.length} failed`);

    // Store the applicant IDs for database updates later
    p2EmailsToUpdate = {
        passed: passedApplicantIds,
        failed: failedApplicantIds
    };

    // Fetch applicant data and email templates
    Promise.all([
        fetchP2ApplicantDataForEmails(passedApplicantIds, failedApplicantIds),
        fetchP2EmailTemplates()
    ])
    .then(([applicantData, templates]) => {
        console.log('📧 [P2 Finalize] Successfully fetched applicant data and templates');
        
        currentP2PassedApplicants = applicantData.passedApplicants || [];
        currentP2FailedApplicants = applicantData.failedApplicants || [];
        p2EmailTemplates = templates;
        
        console.log(`📊 [P2 Finalize] Loaded ${currentP2PassedApplicants.length} passed and ${currentP2FailedApplicants.length} failed applicants`);
        
        // Start the Gmail compose process
        if (currentP2PassedApplicants.length > 0) {
            console.log('📧 [P2 Finalize] Showing passed email modal');
            showP2PassedEmailModal();
        } else if (currentP2FailedApplicants.length > 0) {
            console.log('📧 [P2 Finalize] Showing failed email modal');
            showP2FailedEmailModal();
        } else {
            console.warn("⚠️ [P2 Finalize] No applicant data found for email composition");
            alert("No applicant data found for P2 email composition.");
        }
    })
    .catch(error => {
        console.error("❌ [P2 Finalize] Error preparing P2 email composition:", error);
        alert("Error preparing P2 email composition: " + error.message);
    });
}

// Fetch P2 applicant data for email composition

// Enhanced fetchP2ApplicantDataForEmails function with better debugging
async function fetchP2ApplicantDataForEmails(passedApplicantIds, failedApplicantIds) {
    try {
        console.log('📡 [P2 Data] Fetching P2 applicant data for emails...');
        console.log('📊 [P2 Data] Request payload:', {
            passedApplicantIds,
            failedApplicantIds,
            getEmailData: true
        });
        
        const requestBody = {
            passedApplicantIds: passedApplicantIds,
            failedApplicantIds: failedApplicantIds,
            getEmailData: true
        };
        
        console.log('📡 [P2 Data] Sending request to /hr/finalizeP2Review with body:', JSON.stringify(requestBody, null, 2));
        
        const response = await fetch('/hr/finalizeP2Review', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody),
        });
        
        console.log('📡 [P2 Data] Response status:', response.status);
        console.log('📡 [P2 Data] Response headers:', response.headers);
        
        const data = await response.json();
        console.log('📡 [P2 Data] API response data:', JSON.stringify(data, null, 2));
        
        if (!data.success) {
            console.error('❌ [P2 Data] API returned error:', data.message);
            throw new Error(data.message || 'Failed to fetch P2 applicant data');
        }
        
        console.log('✅ [P2 Data] Successfully fetched applicant data');
        console.log('📊 [P2 Data] Passed applicants:', data.passedApplicants);
        console.log('📊 [P2 Data] Failed applicants:', data.failedApplicants);
        
        return {
            passedApplicants: data.passedApplicants || [],
            failedApplicants: data.failedApplicants || []
        };
        
    } catch (error) {
        console.error("❌ [P2 Data] Error fetching P2 applicant data:", error);
        console.error("❌ [P2 Data] Error stack:", error.stack);
        throw error;
    }
}

// Updated fetchP2EmailTemplates function to use your existing endpoint
async function fetchP2EmailTemplates() {
    try {
        console.log("📧 [P2 Templates] Fetching P2 email templates from emailService.js via backend...");
        
        // Use your existing P2-specific endpoint
        const response = await fetch('/hr/getP2EmailTemplates');
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('📡 [P2 Templates] Backend response:', data);
        
        if (!data.success) {
            throw new Error(data.message || 'Failed to fetch P2 email templates');
        }
        
        console.log("✅ [P2 Templates] Successfully fetched P2 templates from emailService.js via backend");
        console.log("📧 [P2 Templates] Templates received:", data.templates);
        
        return data.templates;
        
    } catch (error) {
        console.error("❌ [P2 Templates] Error fetching P2 email templates from backend:", error);
        
        // Minimal fallback
        console.log("⚠️ [P2 Templates] Backend failed, using minimal fallback");
        return {
            passed: {
                subject: 'Great News! You\'ve Advanced to Final Interview - Prime Infrastructure',
                template: 'Congratulations {applicantName}! You have advanced to the final interview stage for the {jobTitle} position. Our team will contact you soon.'
            },
            failed: {
                subject: 'Thank You for Your Interview - Prime Infrastructure',
                template: 'Thank you {applicantName} for your interest in the {jobTitle} position. We have decided to move forward with another candidate.'
            }
        };
    }
}
// Show P2 passed applicants email modal
function showP2PassedEmailModal() {
    console.log("📧 [P2 Passed Modal] Showing P2 passed applicants Gmail compose modal");
    
    // Populate recipients list
    const recipientsList = document.getElementById('p2PassedRecipientsList');
    const recipientsCount = document.getElementById('p2PassedRecipientsCount');
    
    if (recipientsList && currentP2PassedApplicants.length > 0) {
        recipientsCount.textContent = currentP2PassedApplicants.length;
        
        recipientsList.innerHTML = currentP2PassedApplicants.map(applicant => `
            <div class="recipient-item">
                <div class="recipient-name">${applicant.name}</div>
                <div class="recipient-email">${applicant.email}</div>
                <div class="recipient-job">${applicant.jobTitle}</div>
            </div>
        `).join('');
        
        console.log(`📊 [P2 Passed Modal] Populated ${currentP2PassedApplicants.length} passed recipients`);
    }
    
    // Set default subject and template
    document.getElementById('p2PassedEmailSubject').value = p2EmailTemplates.passed?.subject || 'Great News! You\'ve Advanced to Final Interview - Prime Infrastructure';
    document.getElementById('p2PassedEmailTemplate').value = p2EmailTemplates.passed?.template || 'Congratulations! You have advanced to the final interview stage.';
    
    // Show the modal
    document.getElementById('emailP2PassedModal').style.display = 'block';
    console.log("✅ [P2 Passed Modal] P2 passed email modal displayed");
}

// Show P2 failed applicants email modal
function showP2FailedEmailModal() {
    console.log("📧 [P2 Failed Modal] Showing P2 failed applicants Gmail compose modal");
    
    // Populate recipients list
    const recipientsList = document.getElementById('p2FailedRecipientsList');
    const recipientsCount = document.getElementById('p2FailedRecipientsCount');
    
    if (recipientsList && currentP2FailedApplicants.length > 0) {
        recipientsCount.textContent = currentP2FailedApplicants.length;
        
        recipientsList.innerHTML = currentP2FailedApplicants.map(applicant => `
            <div class="recipient-item">
                <div class="recipient-name">${applicant.name}</div>
                <div class="recipient-email">${applicant.email}</div>
                <div class="recipient-job">${applicant.jobTitle}</div>
            </div>
        `).join('');
        
        console.log(`📊 [P2 Failed Modal] Populated ${currentP2FailedApplicants.length} failed recipients`);
    }
    
    // Set default subject and template
    document.getElementById('p2FailedEmailSubject').value = p2EmailTemplates.failed?.subject || 'Thank You for Your Interview - Prime Infrastructure';
    document.getElementById('p2FailedEmailTemplate').value = p2EmailTemplates.failed?.template || 'Thank you for your interest in our position.';
    
    // Show the modal
    document.getElementById('emailP2FailedModal').style.display = 'block';
    console.log("✅ [P2 Failed Modal] P2 failed email modal displayed");
}

// Open Gmail for P2 passed applicants
function openGmailForP2Passed() {
    console.log("📧 [P2 Gmail] Opening Gmail for P2 passed applicants");
    
    const subject = document.getElementById('p2PassedEmailSubject').value;
    const template = document.getElementById('p2PassedEmailTemplate').value;
    
    if (!subject || !template) {
        console.warn("⚠️ [P2 Gmail] Missing subject or template");
        alert("Please fill in both subject and template fields.");
        return;
    }
    
    if (!confirm(`This will open Gmail with ${currentP2PassedApplicants.length} P2 passed applicants in the "To:" field. Continue?`)) {
        console.log("📧 [P2 Gmail] User cancelled Gmail compose for passed applicants");
        return;
    }
    
    // Build Gmail compose URL
    const gmailUrl = buildP2GmailComposeUrl(currentP2PassedApplicants, subject, template);
    
    console.log('🔗 [P2 Gmail] Opening Gmail for P2 passed applicants:', gmailUrl);
    
    // Open Gmail in new tab
    const gmailWindow = window.open(gmailUrl, '_blank');
    
    if (!gmailWindow) {
        console.error("❌ [P2 Gmail] Failed to open Gmail window - popup blocked");
        alert('Please allow pop-ups for this site to open Gmail compose window.');
        return;
    }
    
    // Close the modal
    closeModal('emailP2PassedModal');
    
    // If there are also failed applicants, show their modal next
    if (currentP2FailedApplicants.length > 0) {
        console.log("📧 [P2 Gmail] Scheduling failed email modal to show next");
        setTimeout(() => {
            showP2FailedEmailModal();
        }, 1000);
    } else {
        // Show status update modal if no failed applicants
        console.log("📧 [P2 Gmail] No failed applicants, showing status update modal");
        setTimeout(() => {
            showP2StatusUpdateModal();
        }, 2000);
    }
}

// Open Gmail for P2 failed applicants
function openGmailForP2Failed() {
    console.log("📧 [P2 Gmail] Opening Gmail for P2 failed applicants");
    
    const subject = document.getElementById('p2FailedEmailSubject').value;
    const template = document.getElementById('p2FailedEmailTemplate').value;
    
    if (!subject || !template) {
        console.warn("⚠️ [P2 Gmail] Missing subject or template");
        alert("Please fill in both subject and template fields.");
        return;
    }
    
    if (!confirm(`This will open Gmail with ${currentP2FailedApplicants.length} P2 failed applicants in the "To:" field. Continue?`)) {
        console.log("📧 [P2 Gmail] User cancelled Gmail compose for failed applicants");
        return;
    }
    
    // Build Gmail compose URL
    const gmailUrl = buildP2GmailComposeUrl(currentP2FailedApplicants, subject, template);
    
    console.log('🔗 [P2 Gmail] Opening Gmail for P2 failed applicants:', gmailUrl);
    
    // Open Gmail in new tab
    const gmailWindow = window.open(gmailUrl, '_blank');
    
    if (!gmailWindow) {
        console.error("❌ [P2 Gmail] Failed to open Gmail window - popup blocked");
        alert('Please allow pop-ups for this site to open Gmail compose window.');
        return;
    }
    
    // Close the modal and show status update modal
    closeModal('emailP2FailedModal');
    
    // Show status update modal
    setTimeout(() => {
        showP2StatusUpdateModal();
    }, 2000);
}

// Build Gmail compose URL for P2 with pre-filled data
function buildP2GmailComposeUrl(applicants, subject, template) {
    console.log(`🔗 [P2 Gmail URL] Building Gmail URL for ${applicants.length} P2 applicants`);
    
    // Extract all email addresses
    const emailAddresses = applicants.map(applicant => applicant.email).join(',');
    
    // Process template for multiple recipients
    let processedTemplate = template;
    if (applicants.length > 0) {
        if (applicants.length > 1) {
            processedTemplate = template
                .replace(/\{applicantName\}/g, '[Recipient Name]')
                .replace(/\{jobTitle\}/g, '[Position Applied]')
                .replace(/\{companyName\}/g, 'Prime Infrastructure');
        } else {
            processedTemplate = template
                .replace(/\{applicantName\}/g, applicants[0].name)
                .replace(/\{jobTitle\}/g, applicants[0].jobTitle)
                .replace(/\{companyName\}/g, 'Prime Infrastructure');
        }
    }
    
    const plainTextBody = htmlToPlainText(processedTemplate);
    
    // Try multiple URL formats - Gmail can be finicky
    const specificAccount = 'recruitmentprime7@gmail.com';
    
    // Use account-specific subdomain approach
    const gmailUrl = `https://mail.google.com/mail/u/0/?authuser=${encodeURIComponent(specificAccount)}&view=cm&to=${encodeURIComponent(emailAddresses)}&subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(plainTextBody)}`;
    
    console.log('🔥 [P2 Gmail URL] P2 Gmail URL:', gmailUrl);
    console.log('📧 [P2 Gmail URL] Target account:', specificAccount);
    
    return gmailUrl;
}

// Convert HTML template to plain text for P2
function htmlToPlainText(html) {
    // Create a temporary div to parse HTML
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = html;
    
    // Remove script and style elements
    const scripts = tempDiv.querySelectorAll('script, style');
    scripts.forEach(element => element.remove());
    
    // Get text content and clean it up
    let plainText = tempDiv.textContent || tempDiv.innerText || '';
    
    // Clean up extra whitespace and line breaks
    plainText = plainText
        .replace(/\s+/g, ' ')           // Replace multiple spaces with single space
        .replace(/\n\s*\n/g, '\n\n')   // Replace multiple line breaks with double line break
        .trim();
    
    // Add some basic formatting for better readability in plain text
    plainText = plainText
        .replace(/Dear\s+/gi, '\nDear ')
        .replace(/Best regards/gi, '\n\nBest regards')
        .replace(/Thank you/gi, '\n\nThank you')
        .replace(/Congratulations/gi, '\n\nCongratulations')
        .replace(/What's Next\?/gi, '\n\nWhat\'s Next?')
        .replace(/•/g, '\n• ')
        .replace(/- /g, '\n- ');
    
    return plainText;
}

// Show P2 status update modal
function showP2StatusUpdateModal() {
    console.log('📧 [P2 Status] Showing P2 status update modal');
    document.getElementById('p2StatusUpdateModal').style.display = 'block';
}

// Update P2 applicant statuses in database after emails are sent via Gmail
function updateP2ApplicantStatuses() {
    if (!confirm('Have you successfully sent the P2 emails via Gmail? This will update the applicant statuses in the database.')) {
        console.log("📧 [P2 Status] User cancelled P2 status update");
        return;
    }
    
    console.log('📊 [P2 Status] Updating P2 applicant statuses in database...');
    console.log('✅ [P2 Status] Passed applicantIds:', p2EmailsToUpdate.passed);
    console.log('❌ [P2 Status] Failed applicantIds:', p2EmailsToUpdate.failed);
    
    // Show loading state
    const updateButton = document.querySelector('#p2StatusUpdateModal .confirm-button');
    const originalText = updateButton.textContent;
    updateButton.textContent = 'Updating Database...';
    updateButton.disabled = true;
    
    // Make API call to update statuses
    fetch('/hr/finalizeP2Review', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            passedApplicantIds: p2EmailsToUpdate.passed,
            failedApplicantIds: p2EmailsToUpdate.failed
        }),
    })
    .then(response => {
        console.log(`📡 [P2 Status] API response status: ${response.status}`);
        return response.json();
    })
    .then(data => {
        console.log('📡 [P2 Status] API response data:', data);
        
        if (data.success) {
            alert(`P2 applicant statuses updated successfully!\n\nUpdated:\n- ${data.passedCount || 0} passed applicants\n- ${data.failedCount || 0} failed applicants`);
            
            // Close modal
            closeModal('p2StatusUpdateModal');
            
            // Clear global variables
            currentP2PassedApplicants = [];
            currentP2FailedApplicants = [];
            p2EmailsToUpdate = { passed: [], failed: [] };
            
            console.log('✅ [P2 Status] P2 status update completed successfully');
            
            // Refresh the view
            setTimeout(() => {
                const activeFilter = document.querySelector(".filter-button.active");
                if (activeFilter) {
                    activeFilter.click();
                } else {
                    document.getElementById("filter-all").click();
                }
            }, 500);
        } else {
            throw new Error(data.message || 'Failed to update P2 statuses');
        }
    })
    .catch(error => {
        console.error('❌ [P2 Status] Error updating P2 statuses:', error);
        alert('Error updating P2 applicant statuses: ' + error.message);
        
        // Reset button state
        updateButton.textContent = originalText;
        updateButton.disabled = false;
    });
}

// Check if all P2 applicants have been marked
function checkAllP2ApplicantsMarked() {
    console.log("🔍 [P2 Check] Checking if all P2 applicants have been marked");
    
    const declaredResultsTable = document.getElementById("declaredResultsTable");
    if (!declaredResultsTable) {
        console.log("📊 [P2 Check] No declared results table found, returning true");
        return true;
    }
    
    const rows = declaredResultsTable.querySelectorAll('tbody tr:not(.section-header-row)');
    if (rows.length === 0) {
        console.log("📊 [P2 Check] No rows to check, returning true");
        return true; // No rows to check
    }
    
    let relevantRows = Array.from(rows).filter(row => {
        const statusCell = row.querySelector('td:nth-child(6)');
        return statusCell && statusCell.textContent.includes('P2');
    });
    
    if (relevantRows.length === 0) {
        console.log("📊 [P2 Check] No P2 rows found, returning true");
        return true; // No P2 rows
    }
    
    console.log(`📊 [P2 Check] Found ${relevantRows.length} P2 rows to check`);
    
    // Check each P2 row for PASSED/FAILED status
    const allMarked = relevantRows.every(row => {
        // Skip message rows
        if (row.querySelector('td[colspan]')) {
            return true;
        }
        
        const statusCell = row.querySelector('td:nth-child(6)');
        if (!statusCell) return true;
        
        const statusText = statusCell.textContent;
        const isMarked = statusText.includes('PASSED') || statusText.includes('FAILED');
        
        if (!isMarked) {
            console.log(`⚠️ [P2 Check] Found unmarked P2 row: ${statusText}`);
        }
        
        return isMarked;
    });
    
    console.log(`📊 [P2 Check] All P2 applicants marked: ${allMarked}`);
    return allMarked;
}

// =========================
// ENHANCED FILTER HANDLING FOR P2
// =========================

// Update the existing goToP2ReviewFilter function
function goToP2ReviewFilter() {
    console.log("🔄 [P2 Filter] Triggering P2 Review filter");
    // Trigger the "For Review" filter
    document.getElementById("filter-review").click();
}

// Update the existing handleP2ReviewFilter function to include finalize button
function updateSectionHeaderButtonsP2() {
    console.log("🔧 [P2 Header] Updating section header buttons for P2");
    
    const rightSection = document.querySelector('#finalizeButtonContainer');
    
    if (!rightSection) {
        console.warn("⚠️ [P2 Header] No finalize button container found");
        return;
    }
    
    // Clear existing buttons
    rightSection.innerHTML = '';
    
    // Add Finalize P2 Review button with Gmail integration
    const p2Button = document.createElement('button');
    p2Button.id = 'finalizeP2Button';
    p2Button.textContent = 'Finalize P2 Review';
    p2Button.style.padding = '10px 15px';
    p2Button.style.fontSize = '16px';
    p2Button.style.fontWeight = 'bold';
    p2Button.style.border = 'none';
    p2Button.style.backgroundColor = '#124A5C';
    p2Button.style.color = 'white';
    p2Button.style.borderRadius = '4px';
    p2Button.style.cursor = 'pointer';
    p2Button.style.transition = 'background-color 0.3s ease';
    
    p2Button.addEventListener('mouseover', function() {
        this.style.backgroundColor = '#B4E3E3';
        this.style.color = '#124A5C';
    });
    
    p2Button.addEventListener('mouseout', function() {
        this.style.backgroundColor = '#124A5C';
        this.style.color = 'white';
    });
    
    p2Button.addEventListener('click', function() {
        console.log("🎯 [P2 Button] Finalize P2 Review button clicked");
        
        if (checkAllP2ApplicantsMarked()) {
            console.log("✅ [P2 Button] All P2 applicants marked, showing modal");
            document.getElementById('notifyApplicantsModal').style.display = 'block';
            
            // Update modal for P2 Gmail integration
            const modalTitle = document.querySelector('#notifyApplicantsModal h2');
            if (modalTitle) {
                modalTitle.textContent = "Confirm P2 Review Finalization";
            }
            
            const modalParagraph = document.querySelector('#notifyApplicantsModal p');
            if (modalParagraph) {
                modalParagraph.textContent = "You are about to finalize the P2 review process using Gmail compose. This will prepare customizable email templates and open Gmail with pre-filled recipient information for both passed and failed applicants. Are you sure you want to proceed?";
            }
            
            // Update confirm button for P2 Gmail flow
            const confirmButton = document.getElementById('confirmP2Button');
            if (confirmButton) {
                const newConfirmButton = confirmButton.cloneNode(true);
                confirmButton.parentNode.replaceChild(newConfirmButton, confirmButton);
                newConfirmButton.addEventListener('click', startP2GmailIntegrationFlow);
                console.log("🔧 [P2 Button] Updated confirm button for P2 flow");
            }
        } else {
            console.warn("⚠️ [P2 Button] Not all P2 applicants marked");
            alert("Not all P2 applicants have been marked as passed or failed. Please make a decision for all applicants first.");
        }
    });
    
    rightSection.appendChild(p2Button);
    console.log("✅ [P2 Header] Added Finalize P2 Review button");
}

// =========================
// EXISTING FUNCTIONS (KEEPING ALL ORIGINAL FUNCTIONALITY)
// =========================

// Function to handle rejection of an applicant
function rejectApplicant(applicantId) {
    if (!confirm("Are you sure you want to reject this applicant? This action cannot be undone.")) {
        return;
    }

    fetch('/hr/reject-applicant', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ applicantId }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("Applicant has been rejected successfully.");
            location.reload(); // Reload to update the UI
        } else {
            alert("Failed to reject applicant: " + (data.message || "Unknown error"));
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert("An error occurred while rejecting the applicant.");
    });
}

// Function to handle passing an applicant
function passApplicant(applicantId) {
    if (!confirm("Are you sure you want to pass this applicant to the next stage? This action cannot be undone.")) {
        return;
    }

    fetch('/hr/pass-applicant', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ applicantId }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("Applicant has been passed to the next stage successfully.");
            location.reload(); // Reload to update the UI
        } else {
            alert("Failed to pass applicant: " + (data.message || "Unknown error"));
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert("An error occurred while passing the applicant.");
    });
}

function handleFailedAction(applicantId) {
    alert('Action required for P2 - FAILED applicant: ' + applicantId);
    // Implement logic for failed status (e.g., notify applicant, reject process)
}

function handlePassedAction(applicantId) {
    alert('Action required for P2 - PASSED applicant: ' + applicantId);
    // Implement logic for passed status (e.g., schedule next steps, notify team)
}

function handleP3FailedAction(applicantId) {
    alert('Action required for P3 - FAILED applicant: ' + applicantId);
    // Implement logic for P3 failed status
}

function handleP3PassedAction(applicantId) {
    alert('Action required for P3 - PASSED applicant: ' + applicantId);
    // Implement logic for P3 passed status
}

function handleJobOfferAction(applicantId) {
    alert('Action required for Job Offer Sent applicant: ' + applicantId);
    // Implement logic for job offer status (e.g., follow-up, onboarding)
}

function notifyLineManager(applicantId) {
    fetch('/notify-line-manager', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ applicantId: applicantId }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert(data.message);  // Success message
        } else {
            alert(data.error);    // Error message
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('An error occurred.');
    });
}

// Function to extract applicantId from URL
function getApplicantIdFromURL() {
    const path = window.location.pathname;
    const parts = path.split('/'); // Split the URL into parts
    const applicantId = parts[3]; // Assuming the URL is like /hr/evaluation-form/{applicantId}
    return applicantId;
}

// Display the applicantId from the URL (if any) when the page is loaded
document.addEventListener('DOMContentLoaded', function () {
    const applicantId = getApplicantIdFromURL(); // Extract applicantId from the URL
    if (applicantId) {
        document.getElementById('applicantIdDisplay').textContent = `Applicant ID from URL: ${applicantId}`;
    } else {
        document.getElementById('applicantIdDisplay').textContent = 'No Applicant ID found in URL.';
    }
});

// Enhanced function to open initial screening modal
function hrInitialScreeningModal(userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl) {
    console.log('Opening Initial Screening Modal with Data:', { userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl });

    if (!userId || userId === "undefined") {
        console.error("Invalid userId passed to modal:", userId);
        alert("Error: Invalid User ID. Cannot display applicant details.");
        return;
    }
    
    currentModalType = 'initial';
    isReuploadRequested = false;
    
    // Populate the initial modal
    populateModalData('', userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl);
    
    // Check for additional document and HR remarks
    checkForAdditionalDocument(userId);
    
    // Show the initial modal
    document.getElementById('hrInitialScreeningModalHtml').style.display = 'block';
}

// Function to open final decision modal (for reuploaded cases)
function hrInitialScreeningDecisionModal(userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl) {
    console.log('Opening Final Decision Modal with Data:', { userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl });

    if (!userId || userId === "undefined") {
        console.error("Invalid userId passed to modal:", userId);
        alert("Error: Invalid User ID. Cannot display applicant details.");
        return;
    }
    
    currentModalType = 'final';
    
    // Populate the final modal
    populateModalData('final-', userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl);
    
    // Check for additional document and HR remarks in final modal
    checkForAdditionalDocument(userId, 'final');
    
    // Show the final modal
    document.getElementById('hrInitialScreeningDecisionModal').style.display = 'block';
}

// Helper function to populate modal data
function populateModalData(prefix, userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl) {
    document.getElementById(prefix + 'userId').value = userId;
    document.getElementById(prefix + 'applicant-name').textContent = `${lastName}, ${firstName}`;
    document.getElementById(prefix + 'applicant-birthday').textContent = birthday || 'N/A';
    document.getElementById(prefix + 'applicant-email').textContent = email || 'N/A';
    document.getElementById(prefix + 'applicant-contact').textContent = phoneNo || 'N/A';

    document.getElementById(prefix + 'score-degree').textContent = scores.degree || 'N/A';
    document.getElementById(prefix + 'score-experience').textContent = scores.experience || 'N/A';
    document.getElementById(prefix + 'score-certifications').textContent = scores.certifications || 'N/A';
    document.getElementById(prefix + 'score-hard-skills').textContent = scores.hardSkills || 'N/A';
    document.getElementById(prefix + 'score-soft-skills').textContent = scores.softSkills || 'N/A';
    document.getElementById(prefix + 'score-work-setup').textContent = scores.workSetup || 'N/A';
    document.getElementById(prefix + 'score-availability').textContent = scores.availability || 'N/A';

    document.getElementById(prefix + 'computation-verdict').textContent = verdict || 'N/A';

    // Display documents
    displayUploadedDocument(degreeUrl, prefix + "degree-doc", prefix + "degree-preview");
    displayUploadedDocument(certUrl, prefix + "cert-doc", prefix + "cert-preview");
    displayUploadedDocument(resumeUrl, prefix + "resume-doc", prefix + "resume-preview");
}

// Function to check for additional document and HR remarks
function checkForAdditionalDocument(userId, prefix = '') {
    fetch(`/hr/get-additional-document/${userId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success && data.addtlFileUrl) {
                const addtlSection = document.getElementById(prefix + 'addtl-document-section');
                if (addtlSection) {
                    addtlSection.style.display = 'block';
                    displayUploadedDocument(data.addtlFileUrl, prefix + "addtl-doc", prefix + "addtl-preview");
                    
                    if (data.hrRemarks) {
                        document.getElementById(prefix + 'hr-remarks-display').textContent = data.hrRemarks;
                    }
                }
            }
        })
        .catch(error => {
            console.error('Error checking for additional document:', error);
        });
}

// Function to toggle reupload section
function toggleReuploadSection() {
    const reuploadSection = document.getElementById('document-reupload-section');
    const reuploadButton = document.getElementById('reuploadRequestButton');
    const verificationSection = document.querySelector('.verification-section'); // Add this line
    
    if (reuploadSection.style.display === 'none' || !reuploadSection.style.display) {
        reuploadSection.style.display = 'block';
        reuploadButton.textContent = 'Cancel Reupload Request';
        reuploadButton.style.backgroundColor = '#e67e22';
        if (verificationSection) verificationSection.style.display = 'none'; // Add this line
        isReuploadRequested = true;
    } else {
        reuploadSection.style.display = 'none';
        reuploadButton.textContent = 'Document Reupload Request';
        reuploadButton.style.backgroundColor = '#f39c12';
        if (verificationSection) verificationSection.style.display = 'block'; // Add this line
        isReuploadRequested = false;
        
        // Clear form
        document.querySelectorAll('input[name="reupload-docs"]').forEach(cb => cb.checked = false);
        document.getElementById('reupload-remarks').value = '';
    }
}

function displayUploadedDocument(fileUrl, linkId, previewId) {
    const docLink = document.getElementById(linkId);
    const docPreview = document.getElementById(previewId);

    if (!fileUrl) {
        docLink.href = "#";
        docLink.textContent = "No document uploaded";
        docPreview.innerHTML = ""; // Clear preview
        return;
    }

    docLink.href = fileUrl;
    docLink.textContent = "View Uploaded Document";

    const fileExtension = fileUrl.split('.').pop().toLowerCase();

    if (["jpg", "jpeg", "png"].includes(fileExtension)) {
        docPreview.innerHTML = `<img src="${fileUrl}" alt="Uploaded Image" style="max-width: 300px; border: 1px solid #ccc; padding: 5px;">`;
    } else if (fileExtension === "pdf") {
        docPreview.innerHTML = `<iframe src="${fileUrl}" width="100%" height="400px" style="border: none;"></iframe>`;
    } else {
        docPreview.innerHTML = ""; // No preview for other file types
    }
}
// Enhanced confirm function for initial screening
function confirmHRInitialScreeningModal() {
    const userId = document.getElementById("userId").value;
    
    if (isReuploadRequested) {
        // Handle document reupload request - no verification checkbox needed
        handleDocumentReuploadRequest(userId);
    } else {
        // Normal confirmation process - requires verification checkbox
        const checkbox = document.getElementById("hr-verification-checkbox");
        const comments = document.getElementById("hr-verification-comments").value;
        
        if (!checkbox.checked) {
            alert("Please confirm that the applicant is eligible for endorsement by checking the verification checkbox.");
            return;
        }
        
        handleNormalConfirmation(userId, comments);
    }
}

// Function to handle document reupload request
function handleDocumentReuploadRequest(userId) {  // Remove comments parameter
    const selectedDocs = [];
    const checkboxes = document.querySelectorAll('input[name="reupload-docs"]:checked');
    const remarks = document.getElementById('reupload-remarks').value.trim();
    
    if (checkboxes.length === 0) {
        alert("Please select at least one document type for reupload.");
        return;
    }
    
    if (!remarks) {
        alert("Please provide remarks/instructions for the applicant.");
        return;
    }
    
    checkboxes.forEach(checkbox => {
        selectedDocs.push(checkbox.value);
    });
    
    const requestData = {
        userId: userId,
        documentsToReupload: selectedDocs,
        remarks: remarks
        // Remove hrComments completely for reupload requests
    };
    
    fetch('/hr/request-document-reupload', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("Document reupload request sent successfully. The applicant will be notified when they log in to the chatbot.");
            document.getElementById('hrInitialScreeningModalHtml').style.display = 'none';
            location.reload();
        } else {
            alert("Error sending reupload request: " + data.message);
        }
    })
    .catch(error => {
        console.error("Error:", error);
        alert("Failed to send reupload request.");
    });
}

// Function to handle normal confirmation
function handleNormalConfirmation(userId, comments) {
    const requestData = {
        userId: userId,
        hrComments: comments
    };
    
    fetch('/hr/applicant-tracker-jobposition/P1AwaitingforLineManager', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("Successfully updated applicant status!");
            document.getElementById('hrInitialScreeningModalHtml').style.display = 'none';
            location.reload();
        } else {
            alert("Error updating applicant status: " + data.message);
        }
    })
    .catch(error => {
        console.error("Error:", error);
        alert("Failed to update applicant status.");
    });
}
// Function to handle final modal confirmation
function confirmFinalHRModal() {
    const userId = document.getElementById("final-userId").value;
    const checkbox = document.getElementById("final-hr-verification-checkbox");
    const comments = document.getElementById("final-hr-verification-comments").value;
    
    if (!checkbox.checked) {
        alert("Please confirm that the applicant is eligible for endorsement by checking the verification checkbox.");
        return;
    }
    
    const requestData = {
        userId: userId,
        hrComments: comments
    };
    
    fetch('/hr/applicant-tracker-jobposition/P1AwaitingforLineManager', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("Successfully updated applicant status!");
            document.getElementById('hrInitialScreeningDecisionModal').style.display = 'none';
            location.reload();
        } else {
            alert("Error updating applicant status: " + data.message);
        }
    })
    .catch(error => {
        console.error("Error:", error);
        alert("Failed to update applicant status.");
    });
}

// Function to reject from final modal
function rejectFinalHRModal() {
    const userId = document.getElementById("final-userId").value;
    
    if (!confirm("Are you sure you want to reject this applicant? This action cannot be undone.")) {
        return;
    }
    
    fetch('/hr/applicant-tracker-jobposition/P1HRFailed', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("Successfully updated applicant status to P1 - HR FAILED!");
            document.getElementById('hrInitialScreeningDecisionModal').style.display = 'none';
            location.reload();
        } else {
            alert("Error updating applicant status: " + data.message);
        }
    })
    .catch(error => {
        console.error("Error:", error);
        alert("Failed to update applicant status.");
    });
}

// Function to determine which modal to show based on applicant status
function showAppropriateModal(userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl, applicantStatus) {
    if (applicantStatus && applicantStatus.includes('Requested for Reupload')) {
        // Show final decision modal (no reupload request option)
        hrInitialScreeningDecisionModal(userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl);
    } else {
        // Show initial modal (with reupload request option)
        hrInitialScreeningModal(userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl);
    }
}

// Close modal if clicked outside the modal content
window.addEventListener('click', function (event) {
    const modal = document.getElementById('hrInitialScreeningModalHtml');
    if (event.target === modal) {
        modal.style.display = 'none';
    }
});

document.addEventListener("DOMContentLoaded", function () {
    // ========== MODIFIED FILTER FUNCTION TO INCLUDE P2 REVIEW ==========    
    // Function to filter rows based on status
    function filterRowsByStatus(status) {
        const rows = document.querySelectorAll('.tracking-table tbody tr');
        const mainTable = document.getElementById('mainApplicantTable');
        const onboardingTable = document.getElementById('onboardingTable');
        const applicantStatusSection = document.getElementById('applicantStatusSection');
        
        // Hide/show applicant status section based on filter
        if (applicantStatusSection) {
            applicantStatusSection.style.display = (status === 'review') ? 'block' : 'none';
        }
        
        // Show/hide main table based on filter
        if (mainTable) {
            mainTable.style.display = (status === 'review') ? 'none' : '';
        }
        
        if (status === "all") {
            // Show all rows in main table
            rows.forEach(row => row.style.display = "");
            
            // Show onboarding table
            if (onboardingTable) onboardingTable.style.display = "";
            
        } else if (status === "review") {
            // Handle P2 Review filter
            handleP2ReviewFilter();
            
        } else if (status === "for-evaluation") {
            // Show only P2 evaluation rows
            rows.forEach(row => {
                const statusCell = row.querySelector('td:last-child');
                const statusText = statusCell ? statusCell.textContent : '';
                
                if (statusText.includes('P2 - Awaiting for HR Evaluation')) {
                    row.style.display = "";
                } else {
                    row.style.display = "none";
                }
            });
            
            // Hide onboarding table
            if (onboardingTable) onboardingTable.style.display = "none";
            
        } else if (status === "for-onboarding") {
            // Show onboarding status rows
            rows.forEach(row => {
                const statusCell = row.querySelector('td:last-child');
                const statusText = statusCell ? statusCell.textContent : '';
                
                if (statusText.includes('P3 - PASSED - Job Offer Sent')) {
                    row.style.display = "";
                } else {
                    row.style.display = "none";
                }
            });
            
            // Show onboarding table
            if (onboardingTable) onboardingTable.style.display = "";
        }
        
        // Highlight the active filter button
        highlightActiveFilter(status);
    }

    // Handle the "For Review" filter for P2
    function handleP2ReviewFilter() {
        const mainTable = document.getElementById('mainApplicantTable');
        const applicantStatusSection = document.getElementById('applicantStatusSection');
        const allMainRows = mainTable ? Array.from(mainTable.querySelectorAll('tbody tr')) : [];
        
        // Update the current phase
        const phaseSpans = document.querySelectorAll('#currentPhase, #currentPhase2');
        phaseSpans.forEach(span => span.textContent = "P2 Review");
        
        // Arrays to store rows
        const awaitingRowsP2 = [];
        const declaredRowsP2 = [];
        
        // Process each row and categorize it
        allMainRows.forEach((row, index) => {
            const lastCell = row.querySelector('td:last-child');
            if (!lastCell) return;
            
            const statusSpan = lastCell.querySelector('span');
            if (!statusSpan) return;
            
            const statusText = statusSpan.textContent.trim();
            
            // Extract row data
            const rowData = extractRowData(row, index);
            
            // Check for P2 - HR Evaluation Accomplished
            if (statusText.includes("P2 - HR Evaluation Accomplished")) {
                awaitingRowsP2.push(rowData);
            }
            // Check for P2 - PASSED or P2 - FAILED (including pending)
            else if (statusText.includes("P2 - PASSED") || statusText.includes("P2 - FAILED")) {
                declaredRowsP2.push(rowData);
            }
        });
        
        // Update tables
        updateAwaitingActionTableP2(awaitingRowsP2);
        updateDeclaredResultsTableP2(declaredRowsP2);
        
        // Update section header buttons
        updateSectionHeaderButtonsP2();
    }

    // Extract row data for P2
    function extractRowData(row, index) {
        const cells = Array.from(row.querySelectorAll('td'));
        const cellData = cells.map(cell => cell.innerHTML);
        
        // Get applicantId and score from row attributes
        const applicantId = row.getAttribute('data-applicantid');
        const totalScore = row.getAttribute('data-score') || 'N/A';
        
        // Get name and email
        let applicantName = '';
        let applicantEmail = '';
        
        if (cells.length > 1) {
            const nameCell = cells[1];
            const fullContent = nameCell.innerHTML;
            const nameParts = fullContent.split('<br>');
            
            if (nameParts.length > 0) {
                applicantName = nameParts[0].trim();
            }
            
            if (nameParts.length > 1) {
                const emailHtml = nameParts[1];
                applicantEmail = emailHtml.replace(/<[^>]*>/g, '').trim();
            }
        }
        
        return {
            index: index + 1,
            cells: cellData,
            applicantId: applicantId,
            totalScore: totalScore,
            name: applicantName,
            email: applicantEmail
        };
    }

    // Update Awaiting Action table for P2
    function updateAwaitingActionTableP2(awaitingRows) {
        const awaitingActionTable = document.getElementById('awaitingActionTable');
        if (!awaitingActionTable) return;
        
        const awaitingTbody = awaitingActionTable.querySelector('tbody');
        if (!awaitingTbody) return;
        
        // Empty the tbody first
        awaitingTbody.innerHTML = '';
        
        if (awaitingRows.length > 0) {
            // Add the section header
            const headerRow = document.createElement('tr');
            headerRow.classList.add('section-header-row');
            headerRow.innerHTML = `<td colspan="7" style="background-color: #f0f0f0; font-weight: bold; padding: 8px;">List of P2 Applicants Awaiting Review</td>`;
            awaitingTbody.appendChild(headerRow);
            
            // Add each row with Pass/Reject buttons
            awaitingRows.forEach((rowData) => {
                const newRow = createTableRowP2(rowData, false, true); // third parameter for showing action buttons
                awaitingTbody.appendChild(newRow);
            });
        } else {
            // Display no data message
            const messageRow = document.createElement('tr');
            messageRow.innerHTML = `<td colspan="7" class="no-data-message">No applicants awaiting P2 review.</td>`;
            awaitingTbody.appendChild(messageRow);
        }
    }

    // Update Declared Results table for P2
    function updateDeclaredResultsTableP2(declaredRows) {
        const declaredResultsTable = document.getElementById('declaredResultsTable');
        if (!declaredResultsTable) return;
        
        const declaredTbody = declaredResultsTable.querySelector('tbody');
        if (!declaredTbody) return;
        
        // Empty the tbody first
        declaredTbody.innerHTML = '';
        
        if (declaredRows.length > 0) {
            // Add the section header
            const headerRow = document.createElement('tr');
            headerRow.classList.add('section-header-row');
            headerRow.innerHTML = `<td colspan="7" style="background-color: #f0f0f0; font-weight: bold; padding: 8px;">List of P2 Applicants - Declared Results</td>`;
            declaredTbody.appendChild(headerRow);
            
            // Add each row with Toggle Status button
            declaredRows.forEach((rowData) => {
                const newRow = createTableRowP2(rowData, true);
                declaredTbody.appendChild(newRow);
            });
            
            // Setup toggle buttons
            setupToggleStatusButtonsP2();
        } else {
            // Display no data message
            const messageRow = document.createElement('tr');
            messageRow.innerHTML = `<td colspan="7" class="no-data-message">No P2 applicants with declared results.</td>`;
            declaredTbody.appendChild(messageRow);
        }
    }

    // Create table row for P2
    function createTableRowP2(rowData, isForDeclaredResults = false, isForAwaitingAction = false) {
        const newRow = document.createElement('tr');
        
        // Add applicantId as data attribute
        if (rowData.applicantId) {
            newRow.setAttribute('data-applicantid', rowData.applicantId);
        }
        
        // Create cells from stored data
        if (rowData.cells && rowData.cells.length >= 5) {
            // Applicant No
            const cell1 = document.createElement('td');
            cell1.innerHTML = rowData.cells[0];
            newRow.appendChild(cell1);
            
            // Name
            const cell2 = document.createElement('td');
            cell2.innerHTML = rowData.cells[1];
            newRow.appendChild(cell2);
            
            // Department
            const cell3 = document.createElement('td');
            cell3.innerHTML = rowData.cells[2];
            newRow.appendChild(cell3);
            
            // Position
            const cell4 = document.createElement('td');
            cell4.innerHTML = rowData.cells[3];
            newRow.appendChild(cell4);
            
            // Total Score
            const cell5 = document.createElement('td');
            cell5.textContent = rowData.totalScore || 'N/A';
            newRow.appendChild(cell5);
            
            // Status
            const cell6 = document.createElement('td');
            const statusMatch = rowData.cells[4].match(/<span><strong>Status:<\/strong>\s*([^<]+)<\/span>/);
            const status = statusMatch ? statusMatch[1] : 'Unknown';
            cell6.textContent = status;
            newRow.appendChild(cell6);
            
            // Add action column based on table type
            if (isForAwaitingAction) {
                // Add View Evaluation and Pass/Reject buttons for awaiting action
                const actionCell = document.createElement('td');
                actionCell.innerHTML = `
                    <div style="display: flex; flex-direction: column; gap: 5px;">
                        <a href="/hr/view-evaluation/${rowData.applicantId}" target="_blank">
                            <button class="btn-view-evaluation" style="background-color: white; color: black; border: 1px solid #124A5C; padding: 6px 12px; border-radius: 4px; width: 100%; font-size: 14px; transition: background-color 0.3s ease, color 0.3s ease; cursor: pointer;"
                                onmouseover="this.style.backgroundColor='#124A5C'; this.style.color='white';"
                                onmouseout="this.style.backgroundColor='white'; this.style.color='black';">
                                View Evaluation
                            </button>
                        </a>
                        <div style="display: flex; gap: 5px;">
                            <button 
                                class="btn-pass" 
                                onclick="p2passApplicant('${rowData.applicantId}')"
                                style="background-color: #27ae60; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 14px; flex: 1;">
                                Pass
                            </button>
                            <button 
                                class="btn-reject" 
                                onclick="p2rejectApplicant('${rowData.applicantId}')"
                                style="background-color: #e74c3c; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 14px; flex: 1;">
                                Reject
                            </button>
                        </div>
                    </div>
                `;
                newRow.appendChild(actionCell);
            } else if (isForDeclaredResults) {
                // Add Toggle Status button for declared results
                const toggleCell = document.createElement('td');
                toggleCell.innerHTML = `
                    <button 
                        class="btn-toggle-status" 
                        data-applicantid="${rowData.applicantId}"
                        onclick="toggleP2ApplicantStatus(this)"
                    >
                        ${status.includes('PASSED') ? 'Passed' : 'Failed'}
                    </button>
                `;
                newRow.appendChild(toggleCell);
            }
        }
        
        return newRow;
    }

    // Setup toggle status buttons for P2
    function setupToggleStatusButtonsP2() {
        const buttons = document.querySelectorAll('.btn-toggle-status:not([data-has-listener])');
        
        buttons.forEach(button => {
            button.setAttribute('data-has-listener', 'true');
            
            // Set initial button state based on current status
            const row = button.closest('tr');
            if (row) {
                const statusCell = row.querySelector('td:nth-child(6)');
                if (statusCell) {
                    const currentStatus = statusCell.textContent.trim();
                    if (currentStatus.includes('PASSED')) {
                        button.textContent = 'Passed';
                        button.classList.add('status-passed');
                        button.classList.remove('status-failed');
                    } else if (currentStatus.includes('FAILED')) {
                        button.textContent = 'Failed';
                        button.classList.add('status-failed');
                        button.classList.remove('status-passed');
                    }
                }
            }
        });
    }

    // Function to filter table based on search input
    function filterTable() {
        const searchValue = document.getElementById("searchBar").value.toLowerCase();
        const rows = document.querySelectorAll('.tracking-table tbody tr');

        rows.forEach(row => {
            const cells = row.querySelectorAll("td");
            const rowText = Array.from(cells)
                .map(cell => cell.textContent.toLowerCase())
                .join(" ");
            
            if (rowText.includes(searchValue)) {
                row.style.display = ""; // Show if search term matches
            } else {
                row.style.display = "none"; // Hide otherwise
            }
        });
    }

    function highlightActiveFilter(status) {
        const buttons = document.querySelectorAll(".filter-button");
        buttons.forEach(button => {
            button.classList.remove("active");
        });
        
        const activeButton = document.getElementById(`filter-${status === "review" ? "review" : status}`);
        if (activeButton) {
            activeButton.classList.add("active");
        }
    }

    // Initialize buttons for filtering by status
    const buttons = {
        all: document.getElementById("filter-all"),
        review: document.getElementById("filter-review"),
        evaluation: document.getElementById("filter-evaluation"),
        onboarding: document.getElementById("filter-onboarding"),
    };

    // Add event listeners to filter buttons
    buttons.all.addEventListener("click", () => filterRowsByStatus("all"));
    buttons.review.addEventListener("click", () => filterRowsByStatus("review"));
    buttons.evaluation.addEventListener("click", () => filterRowsByStatus("for-evaluation"));
    buttons.onboarding.addEventListener("click", () => filterRowsByStatus("for-onboarding"));

    // Search functionality
    document.querySelector(".search-button").addEventListener("click", filterTable);
    document.getElementById("searchBar").addEventListener("keypress", function(e) {
        if (e.key === "Enter") {
            e.preventDefault(); // Prevent form submission if inside a form
            filterTable();
        }
    });

    // Set button text dynamically based on row class
    const rows = document.querySelectorAll('.tracking-table tbody tr');
    rows.forEach(row => {
        const statusCell = row.querySelector('td:last-child');
        const button = statusCell.querySelector('button');
        if (row.classList.contains('status-for-review')) {
            button.textContent = "For Review";
        } else if (row.classList.contains('status-for-onboarding')) {
            button.textContent = "For Onboarding";
        } else if (row.classList.contains('status-for-evaluation')) {
            button.textContent = "For Evaluation";
        }
    });

    // Display all rows initially
    filterRowsByStatus("all");
});

document.addEventListener("DOMContentLoaded", function () {
    const evaluationButtons = document.querySelectorAll(".btn-evaluation");

    evaluationButtons.forEach(button => {
        button.addEventListener("click", function () {
            window.location.href = "/hr/evaluation-form";
        });
    });
});

// Function to open the modal
function openModal(modalId) {
    document.getElementById(modalId).style.display = "block";
}

// Function to close the modal
function closeModal(modalId) {
    document.getElementById(modalId).style.display = "none";
}

// Function for sending notification to the applicant
function sendNotification() {
    alert("Sent notification to applicant");
    closeModal('releaseJobOfferModal');
}

function openOnboardingModal(userId, applicantId, firstName, lastName, birthDate, email, phoneNo, jobId, jobTitle) {
    // Set the hidden input values
    document.getElementById('onboarding-user-id').value = userId;
    document.getElementById('onboarding-applicant-id').value = applicantId;
    document.getElementById('onboarding-job-id').value = jobId;
    
    // Set the visible applicant information
    document.getElementById('applicant-name-onboarding').textContent = lastName + ', ' + firstName;
    document.getElementById('applicant-birthday-onboarding').textContent = birthDate || 'Not available';
    document.getElementById('applicant-email-onboarding').textContent = email || 'Not available';
    document.getElementById('applicant-contact-onboarding').textContent = phoneNo || 'Not available';
    document.getElementById('applicant-position-onboarding').textContent = jobTitle || 'Not available';
    
    // Fetch the Line Manager's set date from the database
    fetch(`/hr/get-start-date?jobId=${jobId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success && data.startDate) {
                // Format the date for display
                const date = new Date(data.startDate);
                const formattedDate = date.toLocaleDateString('en-US', { 
                    weekday: 'long', 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                });
                
                // Display Line Manager's set date
                document.getElementById('lm-set-date').textContent = formattedDate;
                
                // Set the default value for HR's confirmation field
                document.getElementById('start-date-input').value = data.startDate;
            } else {
                document.getElementById('lm-set-date').textContent = 'No date set by Line Manager';
                
                // Set a default start date (2 weeks from today)
                const twoWeeksFromNow = new Date();
                twoWeeksFromNow.setDate(twoWeeksFromNow.getDate() + 14);
                const formattedDate = twoWeeksFromNow.toISOString().split('T')[0];
                document.getElementById('start-date-input').value = formattedDate;
            }
        })
        .catch(error => {
            console.error('Error fetching start date:', error);
            document.getElementById('lm-set-date').textContent = 'Error loading date';
            
            // Set a default start date (2 weeks from today)
            const twoWeeksFromNow = new Date();
            twoWeeksFromNow.setDate(twoWeeksFromNow.getDate() + 14);
            const formattedDate = twoWeeksFromNow.toISOString().split('T')[0];
            document.getElementById('start-date-input').value = formattedDate;
        });
    
    // Display the modal
    document.getElementById('moveToOnboardingModal').style.display = 'block';
}

// Function for confirming onboarding - Updated version
function confirmOnboarding() {
    const userId = document.getElementById('onboarding-user-id').value;
    const applicantId = document.getElementById('onboarding-applicant-id').value;
    const jobId = document.getElementById('onboarding-job-id').value;
    const startDate = document.getElementById('start-date-input').value;
    
    if (!userId || !applicantId || !jobId || !startDate) {
        alert('Error: Missing required information. Please make sure all fields are filled.');
        return;
    }
    
    // Send request to update applicant status and save start date
    fetch('/hr/send-onboarding-checklist', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
            userId: userId,
            applicantId: applicantId,
            jobId: jobId,
            startDate: startDate
        }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Status updated and job offer sent successfully. Start date has been set for ' + startDate);
            closeModal('moveToOnboardingModal');
            location.reload(); // Reload to update the UI
        } else {
            alert('Error: ' + (data.message || 'Failed to update status.'));
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('An error occurred while processing your request. Please try again.');
    });
}

// Function for confirming account setup
function confirmAccountSetup() {
    alert("Account setup confirmed");
    closeModal('accountSetupReminderModal');
}

document.addEventListener("DOMContentLoaded", function() {
    // Modal functionality for the notify applicants modal
    const notifyModal = document.getElementById("notifyApplicantsModal");
    
    if (notifyModal) {
        const closeButton = notifyModal.querySelector(".close-button");
        const backButton = notifyModal.querySelector("#backButton");
        
        // Close the modal when the close button (X) is clicked
        if (closeButton) {
            closeButton.addEventListener("click", function() {
                notifyModal.style.display = "none";
            });
        }
        
        // Close the modal when the back button is clicked
        if (backButton) {
            backButton.addEventListener("click", function() {
                notifyModal.style.display = "none";
            });
        }
        
        // Close the modal if the user clicks outside of it
        window.addEventListener("click", function(event) {
            if (event.target == notifyModal) {
                notifyModal.style.display = "none";
            }
        });
    }
});

// Function to open the modal
function openModal(name, age, email, contact) {
    document.getElementById("applicant-name").value = name;
    document.getElementById("applicant-birthday").value = age;
    document.getElementById("applicant-email").value = email;
    document.getElementById("applicant-contact").value = contact;
    // document.getElementById("hrInitialScreeningModalHtml").style.display = "block";
}

// Add event listeners to all "For Review" buttons
document.querySelectorAll(".btn-review").forEach(button => {
    button.addEventListener("click", function() {
        const parentRow = button.closest("tr");
        const name = parentRow.querySelector("td:nth-child(2)").innerText.split("\n")[0];
        const email = parentRow.querySelector("td:nth-child(2)").innerText.split("\n")[1];
        const age = "N/A";  // Placeholder for age
        const contact = "N/A";  // Placeholder for contact
        openModal(name, age, email, contact);
    });
});


// Close modal when clicking outside of the modal content
window.addEventListener("click", function(event) {
    if (event.target == document.getElementById("reviewModal")) {
        document.getElementById("reviewModal").style.display = "none";
    }
});

// Back button functionality
document.getElementById("backButton").addEventListener("click", function() {
    document.getElementById("reviewModal").style.display = "none";
});

// Confirm button functionality
document.getElementById("confirmButton").addEventListener("click", function() {
    alert("Applicant has been selected and recommended for panel interview.");
    document.getElementById("reviewModal").style.display = "none";
});

document.querySelectorAll('.action-required-btn').forEach(button => {
    button.addEventListener('click', function() {
        const mrfId = this.getAttribute('data-mrfid');
        window.location.href = `/hr/view-mrf/${mrfId}`;  // Redirect to the MRF page
    });
});

// Toggle active class for sidebar links
document.querySelectorAll('.sidebar ul li a').forEach(link => {
    link.addEventListener('click', function() {
        document.querySelectorAll('.sidebar ul li a').forEach(link => link.classList.remove('active'));
        this.classList.add('active');
    });
});

// Toggle collapsible content
document.querySelectorAll('.collapsible-header').forEach(header => {
    header.addEventListener('click', function() {
        var content = this.nextElementSibling;
        if (content.style.display === 'block') {
            content.style.display = 'none';
        } else {
            // Hide all other collapsible contents
            document.querySelectorAll('.collapsible-content').forEach(item => {
                if (item !== content) {
                    item.style.display = 'none';
                }
            });
            content.style.display = 'block';
        }
    });
});

function rejectHRInitialScreeningModal() {
    const userIdElement = document.getElementById("userId");
    if (!userIdElement) {
        alert("Error: userId is missing. Please try again.");
        return;
    }

    const userIdRaw = userIdElement.value.trim();
    console.log("User ID (raw):", userIdRaw);

    const userId = parseInt(userIdRaw, 10);
    console.log("User ID (parsed):", userId);

    if (isNaN(userId)) {
        alert("Error: User ID is invalid. Please try again.");
        return;
    }

    // Confirm reject action
    if (confirm("Are you sure you want to reject this applicant? This action cannot be undone.")) {
        fetch('/hr/applicant-tracker-jobposition/P1HRFailed', {
            method: 'POST', 
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userId }), // Only send userId
        })
        .then(response => response.json())
        .then(data => {
            console.log("Server Response:", data);

            if (data.success) {
                const modal = document.getElementById('hrInitialScreeningModalHtml');
                if (modal) {
                    modal.style.display = 'none';
                }
                alert("Successfully updated applicant status to P1 - HR FAILED!");
                location.reload(); // Reload the page to reflect the changes
            } else {
                alert("Error updating applicant status: " + data.message);
            }
        })
        .catch(error => {
            console.error("Fetch Error:", error);
            alert("Failed to update applicant status.");
        });
    }
}


// Enhanced close button handlers
document.addEventListener('DOMContentLoaded', function() {
    // Close buttons for both modals
    document.querySelectorAll('.review-close-button').forEach(button => {
        button.addEventListener('click', function() {
            const modal = this.closest('.review-modal');
            if (modal) {
                modal.style.display = 'none';
            }
        });
    });
    
    // Back buttons
    const backButton = document.getElementById('backButton');
    if (backButton) {
        backButton.addEventListener('click', function() {
            document.getElementById('hrInitialScreeningModalHtml').style.display = 'none';
        });
    }
    
    const finalBackButton = document.getElementById('finalBackButton');
    if (finalBackButton) {
        finalBackButton.addEventListener('click', function() {
            document.getElementById('hrInitialScreeningDecisionModal').style.display = 'none';
        });
    }
    
    // Close modals when clicking outside
    window.addEventListener('click', function(event) {
        const initialModal = document.getElementById('hrInitialScreeningModalHtml');
        const finalModal = document.getElementById('hrInitialScreeningDecisionModal');
        
        if (event.target === initialModal) {
            initialModal.style.display = 'none';
        }
        if (event.target === finalModal) {
            finalModal.style.display = 'none';
        }
    });
});

// Enhanced console logging for debugging
console.log("✅ [P2 Integration] P2 Email Integration JavaScript loaded successfully");
console.log("📧 [P2 Integration] Available P2 functions:", [
    'p2passApplicant',
    'p2rejectApplicant', 
    'toggleP2ApplicantStatus',
    'finalizeP2Review',
    'showP2PassedEmailModal',
    'showP2FailedEmailModal',
    'openGmailForP2Passed',
    'openGmailForP2Failed',
    'updateP2ApplicantStatuses',
    'checkAllP2ApplicantsMarked',
    'startP2GmailIntegrationFlow'
]);
</script>

</body>
</html>

