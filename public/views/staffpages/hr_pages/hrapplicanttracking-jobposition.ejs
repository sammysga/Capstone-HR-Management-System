<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Applicant Tracker - Job Position</title>
    <link rel="stylesheet" href="/css/sidebar.css"> <!-- Linking Sidebar CSS -->
    <link rel="stylesheet" href="/css/linemanager.css"> <!-- Linking Main Content CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"> <!-- FontAwesome for icons -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <style>

        /* Base Modal Styles - Ensure proper overlay */
        .review-modal {
            display: none; /* CRITICAL: Hidden by default */
            position: fixed; /* CRITICAL: Fixed positioning for overlay */
            z-index: 9999; /* CRITICAL: High z-index to appear above everything */
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent backdrop */
            backdrop-filter: blur(3px);
            overflow: auto; /* Allow scrolling if content is tall */
        }

        /* Modal Content Container */
        .review-modal-content {
            background-color: #fefefe;
            margin: 3% auto; /* Center horizontally, some margin from top */
            padding: 30px;
            border: none;
            border-radius: 12px;
            width: 85%;
            max-width: 900px;
            max-height: 90vh; /* Prevent modal from being too tall */
            overflow-y: auto; /* Allow scrolling within modal if needed */
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            position: relative;
            animation: modalSlideIn 0.3s ease-out;
        }

        /* Modal Animation */
        @keyframes modalSlideIn {
            from {
                opacity: 0;
                transform: translateY(-50px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Close Button - Top Right X */
        .review-close-button {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            position: absolute;
            top: 15px;
            right: 25px;
            cursor: pointer;
            transition: color 0.3s ease;
            z-index: 10;
        }

        .review-close-button:hover,
        .review-close-button:focus {
            color: #000;
            text-decoration: none;
        }

        /* Modal Headers */
        .review-modal h2 {
            color: #124A5C;
            margin-bottom: 20px;
            font-size: 24px;
            font-weight: 600;
            margin-top: 0;
            padding-right: 40px; /* Space for close button */
        }

        .review-modal h4 {
            color: #124A5C;
            margin: 20px 0 15px 0;
            font-size: 18px;
            font-weight: 600;
        }

.review-modal-reject-button {
    background-color: #e74c3c;
    color: white;
    border: none;
    padding: 10px 20px;
    margin: 0 10px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s ease;
}

.review-modal-reject-button:hover {
    opacity: 0.8;
}

/* Applicant Details Section */
        .applicant-details {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
            border-left: 4px solid #124A5C;
        }

        .applicant-details p {
            margin: 10px 0;
            line-height: 1.6;
            color: #333;
        }

        .applicant-details strong {
            color: #124A5C;
            font-weight: 600;
        }
/* Center the scores table and enhance its appearance */
.scores-table {
            margin: 0 auto;
            width: 80%;
            border-collapse: collapse;
            margin-bottom: 20px;
            background-color: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .scores-table th,
        .scores-table td {
            padding: 12px 15px;
            border: 1px solid #ddd;
            text-align: center;
        }

        .scores-table th {
            background-color: #124A5C;
            color: white;
            font-weight: 600;
        }

.scores-table tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .scores-table tr:hover {
            background-color: #e8f4f8;
        }


/* Scores Section */
        .scores-section {
            text-align: center;
            margin: 25px 0;
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
        }

         /* Back Button */
        .review-modal-back-button {
            background: linear-gradient(135deg, #6c757d, #5a6268);
            color: white;
        }

        .review-modal-back-button:hover {
            background: linear-gradient(135deg, #5a6268, #495057);
            transform: translateY(-2px);
        }

        /* Confirm Button */
        .review-modal-confirm-button {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
        }

        .review-modal-confirm-button:hover {
            background: linear-gradient(135deg, #20c997, #1fa886);
            transform: translateY(-2px);
        }

        /* Reject Button */
        .review-modal-reject-button {
            background: linear-gradient(135deg, #dc3545, #c82333);
            color: white;
        }

        .review-modal-reject-button:hover {
            background: linear-gradient(135deg, #c82333, #b21f2d);
            transform: translateY(-2px);
        }

        /* Reupload Button */
        .reupload-button {
            background: linear-gradient(135deg, #f39c12, #e67e22);
            color: white;
        }

        .reupload-button:hover {
            background: linear-gradient(135deg, #e67e22, #d68910);
            transform: translateY(-2px);
        }

        /* Hidden Input Fields */
        .review-modal input[type="hidden"] {
            display: none;
        }
/* Responsive Design */
        @media (max-width: 768px) {
            .review-modal-content {
                width: 95%;
                margin: 5% auto;
                padding: 20px;
            }
            
            .scores-table {
                width: 100%;
                font-size: 14px;
            }
            
            .review-modal-buttons {
                flex-direction: column;
                align-items: stretch;
            }
            
            .review-modal-buttons button {
                margin-bottom: 10px;
                min-width: auto;
            }
            
            .review-close-button {
                font-size: 24px;
                top: 10px;
                right: 15px;
            }
        }


         /* Document Section Styling */
        .review-modal p {
            line-height: 1.6;
            margin: 15px 0;
            color: #555;
        }

        .review-modal a {
            color: #124A5C;
            text-decoration: none;
            font-weight: 500;
        }

        .review-modal a:hover {
            text-decoration: underline;
            color: #0d3a47;
        }

        /* Document Preview Styling */
        .review-modal div[id*="preview"] {
            margin: 15px 0;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: #f9f9f9;
            text-align: center;
        }

        .review-modal div[id*="preview"] img {
            max-width: 100%;
            max-height: 300px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }

        .review-modal div[id*="preview"] iframe {
            width: 100%;
            height: 400px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }

        /* Ensure modals appear above all other content */
        .review-modal {
            z-index: 10000 !important;
        }

        /* Override any conflicting styles */
        #hrInitialScreeningModalHtml,
        #hrInitialScreeningDecisionModal {
            display: none !important; /* Ensure hidden by default */
            position: fixed !important;
            z-index: 10000 !important;
        }

        /* Show modal when active */
        #hrInitialScreeningModalHtml[style*="display: block"],
        #hrInitialScreeningDecisionModal[style*="display: block"] {
            display: block !important;
        }

/* Style for the computation verdict section */
.computation-verdict {
            text-align: center;
            margin: 20px 0;
            padding: 15px;
            font-size: 18px;
            font-weight: bold;
            background: linear-gradient(135deg, #e8f4f8, #d4edda);
            border-radius: 8px;
            border: 2px solid #124A5C;
            color: #124A5C;
        }

        body {
            font-family: 'Inter', sans-serif;
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        .main-content {
            margin-left: 350px;
            padding: 20px;
            width: calc(100% - 350px);
            background-color: #FFFFFF;
        }

        .header-section {
            margin-bottom: 10px;
            margin-left: 5px;
            font-size: 24px;
            text-align: left;
        }

        .subheader {
            font-size: 20px;
            margin-left: 5px;
            margin-bottom: 20px;
            color: #555;
        }

        .tracking-section {
            background-color: #FFFFFF;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            margin: 10px 5px;
        }

        .search-container {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 15px;
        }

        .search-bar {
            padding: 8px;
            width: 370px;
            font-size: 16px;
            border: 1px solid #ddd;
        }

        .search-button {
            margin-left: 10px;
            background-color: #124A5C;
            color: white;
            border: none;
            padding: 10px;
            cursor: pointer;
            font-size: 16px;
        }

        .right-section {
            display: flex;
            gap: 10px;
        }

        .right-section button {
            padding: 10px 15px;
            font-size: 16px;
            font-weight: bold;
            border: none;
            background-color:#124A5C;
            color: white;
            transition: background-color 0.3s ease;
        }

        .right-section button:hover {
            background-color: #B4E3E3       ;
            color: white;
        }

        .tracking-table {
            width: 100%;
            border-collapse: collapse;
        }

        .tracking-table th, 
        .tracking-table td {
            padding: 10px 10px;
            border: 1px solid #ddd;
        }

        .tracking-table th,
        .tracking-table td {
            text-align: left;
        }

        .tracking-table th:nth-child(1),
        .tracking-table td:nth-child(1) {
            width: 10%; 
        }

        .tracking-table th:nth-child(2),
        .tracking-table td:nth-child(2) {
            width: 20%;
        }

        .tracking-table th:nth-child(3),
        .tracking-table td:nth-child(3) {
            width: 15%; 
        }

        .tracking-table th:nth-child(4),
        .tracking-table td:nth-child(4) {
            width: 15%; 
        }

        .tracking-table td:last-child {
            display: flex;
            justify-content: space-between; 
            align-items: center;
        }

        .tracking-table td:last-child span {
            text-align: left; 
            flex-grow: 1;
        }

        .tracking-table th,
        .tracking-table td {
            text-align: left;
        }

        .tracking-table td:last-child button {
            margin-left: 10px; 
        }
        .tracking-table tr:hover {
            background-color: #f1f1f1;
        }
       
        .job-title-container {
            display: flex;
            align-items: center;
        }

        /* Style for status circle */
        .status-circle {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px; 
        }

        /* Green status circle */
        .status-circle.green {
            background-color: green;
        }

        /* Gray status circle */
        .status-circle.gray {
            background-color: gray;
        }

        /* Button styling for status actions */
        .status-button {
            background-color: white; 
            color: black; 
            border: 1px solid #124A5C; 
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 14px;
            cursor: pointer;
            text-align: center;
            width: auto;
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        .status-button:hover {
            background-color: #124A5C; 
            color: white; 
        }

        .btn-review, .btn-evaluation, .btn-onboarding {
            background-color: white;
            color: black;
            border: 1px solid #124A5C;
            padding: 10px 20px;
            cursor: pointer;
            border-radius: 5px;
            font-size: 14px;
            transition: background-color 0.3s ease, color 0.3s ease;
            width: 150px;
            text-align: center; 
        }

        .btn-review:hover, .btn-evaluation:hover, .btn-onboarding:hover {
            background-color: #124A5C;
            color: white;
        }
        .set-interview-button {
                    padding: 10px 20px;
                    background-color: #124A5C;
                    color: white;
                    border: none;
                    cursor: pointer;
                    font-size: 16px;
                    margin-top: 20px;
                    display: block;
                    width: 20%;
                    text-align: center;
                }
                .set-interview-button:hover {
                    background-color: #B4E3E3       ;
                    color: white;
                }

.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(3px);
}

.modal-content {
    background-color: #fefefe;
    margin: 5% auto;
    padding: 20px;
    border: none;
    border-radius: 12px;
    width: 80%;
    max-width: 600px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
    position: relative;
    animation: modalSlideIn 0.3s ease-out;
}

@keyframes modalSlideIn {
    from {
        opacity: 0;
        transform: translateY(-50px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.close-button {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
    position: absolute;
    top: 15px;
    right: 20px;
    cursor: pointer;
    transition: color 0.3s ease;
}

.close-button:hover,
.close-button:focus {
    color: #000;
    text-decoration: none;
}


.modal h2 {
    color: #124A5C;
    margin-bottom: 20px;
    font-size: 24px;
    font-weight: 600;
}

.modal p {
    line-height: 1.6;
    margin-bottom: 20px;
    color: #555;
}

.modal-buttons {
    display: flex;
    justify-content: center;
    gap: 15px;
    margin-top: 30px;
}

.back-button, .confirm-button {
    padding: 12px 25px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 16px;
    font-weight: 500;
    transition: all 0.3s ease;
    min-width: 120px;
}

.back-button {
    background-color: #6c757d;
    color: white;
}

.back-button:hover {
    background-color: #5a6268;
    transform: translateY(-1px);
}

.confirm-button {
    background: linear-gradient(135deg, #124A5C, #1a5a6b);
    color: white;
}

.confirm-button:hover {
    background: linear-gradient(135deg, #1a5a6b, #124A5C);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(18, 74, 92, 0.3);
}

/* Divider */
        .divider {
            height: 2px;
            background-color: #124A5C;
            margin: 20px 0;
            width: 100%;
        }


/* Progress Steps */
.progress-step {
    transition: all 0.3s ease;
}

.progress-step.active {
    background: #4caf50 !important;
    color: white !important;
}

.progress-step.completed {
    background: #4caf50 !important;
    color: white !important;
}

.progress-step.pending {
    background: #e0e0e0 !important;
    color: #666 !important;
}
/* Recipients Section */
.recipients-section {
    padding: 20px;
    border-radius: 8px;
    margin: 20px 0;
}

.recipients-section h4 {
    margin-top: 0;
    margin-bottom: 15px;
    display: flex;
    align-items: center;
}

.recipients-section h4 i {
    margin-right: 10px;
}

.recipients-list {
    max-height: 180px;
    overflow-y: auto;
    background: rgba(255, 255, 255, 0.3);
    padding: 15px;
    border-radius: 5px;
}

/* Recipient Items */
.recipient-item {
    margin-bottom: 10px;
    padding: 10px;
    background: rgba(255, 255, 255, 0.8);
    border-radius: 5px;
    border-left: 3px solid #124A5C;
}

.recipient-name {
    font-weight: bold;
    color: #124A5C;
}

.recipient-email {
    color: #666;
    font-size: 14px;
}

.recipient-job {
    color: #888;
    font-size: 12px;
    font-style: italic;
}


/* Form Elements */
.modal input[type="text"], .modal textarea {
    border: 2px solid #ddd;
    border-radius: 6px;
    padding: 12px;
    font-size: 14px;
    transition: border-color 0.3s ease;
    width: 100%;
    box-sizing: border-box;
}

.modal input[type="text"]:focus, .modal textarea:focus {
    border-color: #124A5C;
    outline: none;
    box-shadow: 0 0 0 3px rgba(18, 74, 92, 0.1);
}

.modal label {
    display: block;
    font-weight: 600;
    margin-bottom: 8px;
    color: #333;
}

/* Email Form Sections */
.email-subject-section,
.email-template-section {
    margin: 25px 0;
}

.email-subject-section label,
.email-template-section label {
    display: block;
    font-weight: bold;
    margin-bottom: 10px;
    color: #333;
    font-size: 16px;
}

.email-subject-section label i,
.email-template-section label i {
    margin-right: 8px;
    color: #124A5C;
}

.email-input {
    width: 100%;
    padding: 12px;
    border: 2px solid #ddd;
    border-radius: 6px;
    font-size: 16px;
    transition: border-color 0.3s ease;
    box-sizing: border-box;
}

.email-input:focus {
    outline: none;
    border-color: #124A5C;
    box-shadow: 0 0 5px rgba(18, 74, 92, 0.3);
}

.template-info {
    margin: 10px 0;
    padding: 10px;
    background-color: #f8f9fa;
    border-radius: 5px;
    border-left: 3px solid #17a2b8;
}

.template-info small {
    color: #6c757d;
    font-size: 14px;
}

.template-info code {
    background-color: #e9ecef;
    padding: 2px 4px;
    border-radius: 3px;
    font-family: 'Courier New', monospace;
    color: #495057;
}

.email-textarea {
    width: 100%;
    padding: 15px;
    border: 2px solid #ddd;
    border-radius: 6px;
    font-family: Arial, sans-serif;
    font-size: 14px;
    line-height: 1.6;
    resize: vertical;
    min-height: 300px;
    transition: border-color 0.3s ease;
    box-sizing: border-box;
}

.email-textarea:focus {
    outline: none;
    border-color: #124A5C;
    box-shadow: 0 0 5px rgba(18, 74, 92, 0.3);
}

/* Sending Methods Info */
.sending-methods-info {
    background: linear-gradient(135deg, #e7f3ff, #f0f8ff);
    padding: 20px;
    border-radius: 10px;
    margin: 20px 0;
    border-left: 5px solid #007bff;
}

.sending-methods-info h4 {
    color: #0066cc;
    margin-top: 0;
    margin-bottom: 15px;
    display: flex;
    align-items: center;
    font-size: 18px;
}

.sending-methods-info h4 i {
    margin-right: 10px;
    font-size: 20px;
}

.sending-methods-info p {
    color: #0066cc;
    margin-bottom: 0;
    line-height: 1.8;
    font-size: 15px;
}


       

/*USER ID CSS*/
#applicant-userId {
    display: none;
}

/* ========== ADDED P2 STYLES ========== */
/* P2 Review Section Styles - Similar to Line Manager P1 styles */
.applicant-status-section {
    background-color: #FFFFFF;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    margin: 10px 5px 20px;
    display: none; /* Hidden by default */
}

.applicant-status-section h3.subheader {
    color: #124A5C;
    margin-bottom: 15px;
    font-size: 20px;
    font-weight: bold;
}

.applicant-status-section .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0;
    width: 100%;
}

.applicant-status-section .section-header h3.subheader {
    margin: 0;
    color: #124A5C;
    font-weight: bold;
}

.applicant-status-section .right-section {
    display: flex;
    gap: 10px;
}

.applicant-status-section .right-section button {
    padding: 10px 15px;
    font-size: 16px;
    font-weight: bold;
    border: none;
    background-color: #124A5C;
    color: white;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.applicant-status-section .right-section button:hover {
    background-color: #B4E3E3;
    color: #124A5C;
}

.applicant-status-section .divider {
    height: 2px;
    background-color: #124A5C;
    margin: 15px 0;
    width: 100%;
    display: block;
    clear: both;
}

/* Filter button styling */
.filter-button {
    padding: 10px 15px;
    font-size: 15px;
    font-weight: bold;
    border: none;
    background-color: #124A5C;
    color: white;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    min-width: 130px;
}

.filter-button:hover {
    background-color: #0d3a47;
}

.filter-button.active {
    background-color: #07ACB9;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

/* Sort section styling */
.sort-section {
    display: flex;
    align-items: center;
    margin: 10px 0;
}

.sort-section label {
    margin-right: 10px;
    font-weight: bold;
}

.sort-section select {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: white;
    min-width: 180px;
}


/* Button Variations */
.btn-toggle-status {
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    transition: all 0.3s ease;
}

.btn-toggle-status.status-passed {
    background-color: #28a745;
    color: white;
}

.btn-toggle-status.status-failed {
    background-color: #dc3545;
    color: white;
}

.btn-toggle-status:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
}

.btn-toggle-status.status-passed {
    background-color: #28a745;
}

.btn-toggle-status.status-failed {
    background-color: #dc3545;
}

/* Responsive Design */
@media (max-width: 768px) {
    .modal-content {
        width: 95%;
        margin: 10% auto;
        padding: 15px;
    }
    
    .modal-buttons {
        flex-direction: column;
        gap: 10px;
    }
    
    .progress-step {
        font-size: 12px;
        padding: 6px !important;
    }
}
/* No data message */
.no-data-message {
    padding: 20px;
    background-color: #f8f9fa;
    border-left: 4px solid #07ACB9;
    color: #555;
    font-size: 16px;
    font-style: italic;
}

.no-data-message p {
    margin: 0;
}

/* Section header row in tables */
.section-header-row {
    background-color: #f0f0f0;
    font-weight: bold;
}

.section-header-row td {
    padding: 8px;
    background-color: #f0f0f0;
}

/* ========== P2 STYLES ========== */
.recipient-item {
    padding: 10px;
    border-bottom: 1px solid rgba(255,255,255,0.3);
}

.recipient-item:last-child {
    border-bottom: none;
}

.recipient-name {
    font-weight: bold;
    margin-bottom: 2px;
}

.recipient-email {
    font-size: 14px;
    opacity: 0.8;
    margin-bottom: 2px;
}

.recipient-job {
    font-size: 12px;
    opacity: 0.7;
    font-style: italic;
}

/* Document Reupload Section */
        .document-reupload-section {
            background: linear-gradient(135deg, #fff3cd, #ffeaa7);
            border: 2px solid #f39c12;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
            display: none; /* Hidden by default */
        }

        .document-reupload-section.active {
            display: block;
        }

        .document-reupload-section h4 {
            color: #856404;
            margin-top: 0;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
        }

        .document-reupload-section h4 i {
            margin-right: 10px;
        }

       /* Checkbox Group */
        .checkbox-group {
            display: flex;
            flex-direction: column;
            gap: 12px;
            margin: 15px 0;
        }

        .checkbox-item {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .checkbox-item input[type="checkbox"] {
            transform: scale(1.3);
            cursor: pointer;
        }

        .checkbox-item label {
            cursor: pointer;
            user-select: none;
            color: #856404;
            font-weight: 500;
        }

        /* Remarks Section */
        .remarks-section {
            margin: 20px 0;
        }

        .remarks-section label {
            display: block;
            font-weight: bold;
            margin-bottom: 8px;
            color: #856404;
        }

.remarks-section textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #f39c12;
            border-radius: 6px;
            resize: vertical;
            min-height: 100px;
            font-family: Arial, sans-serif;
            font-size: 14px;
            line-height: 1.5;
        }

        .remarks-section textarea:focus {
            outline: none;
            border-color: #e67e22;
            box-shadow: 0 0 5px rgba(243, 156, 18, 0.3);
        }


        .reupload-button {
            background-color: #f39c12;
            color: white;
            border: none;
            padding: 10px 20px;
            margin: 0 10px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s ease;
        }

        .reupload-button:hover {
            background-color: #e67e22;
        }

        .modal-buttons-enhanced {
            display: flex;
            justify-content: center;
            margin-top: 20px;
            gap: 10px;
            flex-wrap: wrap;
        }

.addtl-document-section {
            background: linear-gradient(135deg, #e8f4f8, #f0f8ff);
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
            border-left: 4px solid #124A5C;
        }

        .addtl-document-section h5 {
            margin-top: 0;
            color: #124A5C;
            font-weight: 600;
        }

        .addtl-document-section p {
            color: #555;
            font-style: italic;
            margin-bottom: 0;
        }
/* Warning Text */
        .warning-text {
            color: #d9534f;
            font-size: 0.9em;
            margin-top: 5px;
            font-style: italic;
            font-weight: 500;
        }
        
        /* Verification Section */
        .verification-section {
            background: linear-gradient(135deg, #e8f5e8, #f0f8ff);
            padding: 20px;
            border-radius: 8px;
            margin: 25px 0;
            border: 2px solid #28a745;
        }

        .verification-section label {
            display: flex;
            align-items: flex-start;
            gap: 12px;
            font-weight: normal;
            color: #155724;
            line-height: 1.6;
        }

        .verification-section input[type="checkbox"] {
            margin-top: 3px;
            transform: scale(1.2);
            cursor: pointer;
        }

        .verification-section p {
            color: #d9534f;
            margin: 10px 0 15px 30px;
            font-size: 0.9em;
            font-weight: 500;
        }

        .verification-section textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #28a745;
            border-radius: 6px;
            resize: vertical;
            min-height: 80px;
            margin-top: 10px;
        }

        .verification-section textarea:focus {
            outline: none;
            border-color: #20c997;
            box-shadow: 0 0 5px rgba(40, 167, 69, 0.3);
        }


/* Modal Buttons */
.modal-buttons {
    display: flex;
    justify-content: center;
    gap: 15px;
    margin-top: 30px;
    flex-wrap: wrap;
}

.modal-buttons button {
    padding: 12px 20px;
    border: none;
    border-radius: 6px;
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    min-width: 140px;
    justify-content: center;
}

.modal-buttons button i {
    margin-right: 8px;
}

.back-button {
    background: #6c757d;
    color: white;
}

.back-button:hover {
    background: #5a6268;
    transform: translateY(-2px);
}

.confirm-button {
    color: white;
    font-weight: 600;
}

.gmail-button {
    background: linear-gradient(135deg, #db4437, #c23321);
}

.gmail-button:hover {
    background: linear-gradient(135deg, #c23321, #a52714);
    transform: translateY(-2px);
}

.preview-button {
    background: linear-gradient(135deg, #17a2b8, #138496);
}

.preview-button:hover {
    background: linear-gradient(135deg, #138496, #117a8b);
    transform: translateY(-2px);
}

.send-button {
    font-weight: 600;
}

.send-passed {
    background: linear-gradient(135deg, #28a745, #20c997);
}

.send-passed:hover {
    background: linear-gradient(135deg, #20c997, #1fa886);
    transform: translateY(-2px);
}

.send-failed {
    background: linear-gradient(135deg, #dc3545, #c82333);
}

.send-failed:hover {
    background: linear-gradient(135deg, #c82333, #b21f2d);
    transform: translateY(-2px);
}

/* Button toggle states */
.btn-toggle-status {
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: bold;
    transition: all 0.3s ease;
}

.btn-toggle-status.status-passed {
    background-color: #28a745;
    color: white;
}

.btn-toggle-status.status-failed {
    background-color: #dc3545;
    color: white;
}

.btn-toggle-status:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
}

/* Responsive Design */
@media (max-width: 768px) {
    .modal-content {
        width: 95%;
        margin: 5% auto;
        padding: 20px;
    }
    
    .progress-steps {
        flex-direction: column;
        gap: 10px;
    }
    
    .progress-step {
        font-size: 12px;
        padding: 8px;
    }
    
    .modal-buttons {
        flex-direction: column;
        align-items: stretch;
    }
    
    .modal-buttons button {
        margin-bottom: 10px;
        min-width: auto;
    }
}

    </style>
</head>
<body>

<%- include('../../partials/hr_partials') %>

<!-- Main Content Section -->
<div class="main-content">

    <!-- Header Section -->
    <div class="header-section">
        <h2>Applicant Tracking</h2>
        <% if (applicants && applicants.length > 0) { %>
          <div class="subheader">
            <%= applicants[0].jobTitle %>
          </div>
        <% } else { %>
          <p>No applicant found.</p>
        <% } %>
      </div>
      

  <!-- Applicant Tracking Section -->
    <div class="tracking-section">
        <div class="search-container">
            <div class="left-section">
                <input type="text" class="search-bar" id="searchBar" placeholder="Search by Application No., Name, Email, or Status">
                <button class="search-button"><i class="fas fa-search"></i> Search</button>
            </div>
            <!-- ========== MODIFIED FILTER SECTION - Added filter-button class ========== -->
            <div class="right-section">
                <button id="filter-all" class="filter-button active">All</button>
                <button id="filter-review" class="filter-button">For Review</button>
                <button id="filter-evaluation" class="filter-button">For Evaluation</button>
                <button id="filter-onboarding" class="filter-button">For Onboarding</button>
            </div>            
            <!-- ========== END MODIFIED FILTER SECTION ========== -->
        </div>

       <!-- ========== MODIFIED P1 & P2 APPLICANT STATUS SECTION ========== -->
<div class="applicant-status-section" id="applicantStatusSection">
    <!-- Header section with flexbox -->
    <div class="section-header">
        <h3 class="subheader">Applicant Review Dashboard</h3>
        <div class="right-section" id="finalizeButtonContainer">
            <!-- Finalize buttons will be added dynamically based on phase -->
        </div>
    </div>
    <!-- Divider placed immediately after the section-header -->
    <div class="divider"></div>
    
    <!-- ========== P1 REVIEW SECTIONS ========== -->
    <h2 style="color: #124A5C; margin: 20px 0 15px 0; font-size: 22px; font-weight: bold;">List of Applicants on P1 Review - For Line Manager Endorsement</h2>
    
    <!-- P1 Awaiting for Action Section -->
<h4>Awaiting for Action</h4>
<table class="tracking-table" id="p1AwaitingActionTable">
    <thead>
        <tr>
            <th>Applicant No.</th>
            <th>Last Name, First Name</th>
            <th>Department</th>
            <th>Position Applied</th>
            <th>Total Score</th>
            <th>Work Setup/Availability</th>
            <th>Applicant Status</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        <!-- Will be populated dynamically -->
    </tbody>
</table>

<!-- P1 Under Line Manager Review Section -->
<h4>Applicants on P1 Review; Under Line Manager Review</h4>
<table class="tracking-table" id="p1LineManagerReviewTable">
    <thead>
        <tr>
            <th>Applicant No.</th>
            <th>Last Name, First Name</th>
            <th>Department</th>
            <th>Position Applied</th>
            <th>Total Score</th>
            <th>Work Setup/Availability</th>
            <th>Applicant Status</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        <!-- Will be populated dynamically -->
    </tbody>
</table>
    <!-- Spacer between P1 and P2 sections -->
    <div style="margin: 40px 0; border-top: 2px solid #124A5C;"></div>
    
    <!-- ========== P2 REVIEW SECTIONS (KEEP EXISTING) ========== -->
    <h2 style="color: #124A5C; margin: 20px 0 15px 0; font-size: 22px; font-weight: bold;">List of Applicants on P2 Review</h2>
    
    <h4>Awaiting for Action</h4>
    <table class="tracking-table" id="awaitingActionTable">
        <thead>
            <tr>
                <th>Applicant No.</th>
                <th>Last Name, First Name</th>
                <th>Department</th>
                <th>Position Applied</th>
                <th>Total Score</th>
                <th>Applicant Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <!-- Will be populated dynamically -->
        </tbody>
    </table>

    <h4>Applicants on <span id="currentPhase2">Review</span> Declared Results</h4>
    <div class="sort-section">
        <label for="sortOptions">Sort By:</label>
        <select id="sortOptions">
            <option value="ascending">Score - Ascending</option>
            <option value="descending">Score - Descending</option>
            <option value="alphabetical">Alphabetically</option>
        </select>
    </div>
    <table class="tracking-table" id="declaredResultsTable">
        <thead>
            <tr>
                <th>Applicant No.</th>
                <th>Last Name, First Name</th>
                <th>Department</th>
                <th>Position Applied</th>
                <th>Total Score</th>
                <th>Applicant Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <!-- Will be populated dynamically -->
        </tbody>
    </table>
</div>
<!-- ========== END MODIFIED P1 & P2 APPLICANT STATUS SECTION ========== -->
        <!-- Table for Applicant Data -->
<!-- Table for Applicant Data -->
<table class="tracking-table" id="mainApplicantTable" style="width: 100%; margin-bottom: 20px; border-collapse: collapse;">
    <thead>
        <tr>
            <th>Applicant No.</th>
            <th>Last Name, First Name</th>
            <th>Department</th>
            <th>Position Applied</th>
            <th>Applicant Status & Actions</th>
        </tr>
    </thead>
    <tbody>
        <% if (applicants && applicants.length) { %>
            <% applicants.forEach((applicant, index) => { %>
                <tr class="applicant-row" 
                    data-phase="<%= applicant.applicantStatus && applicant.applicantStatus.startsWith('P1') ? 'P1' : applicant.applicantStatus && applicant.applicantStatus.startsWith('P2') ? 'P2' : applicant.applicantStatus && applicant.applicantStatus.startsWith('P3') ? 'P3' : 'other' %>" 
                    data-status="<%= applicant.applicantStatus || '' %>"
                    data-userid="<%= applicant.userId %>"
                    data-applicantid="<%= applicant.applicantId %>"
                    data-name="<%= applicant.lastName %>, <%= applicant.firstName %>"
                    data-score="<%= applicant.hrInterviewFormScore || 'N/A' %>">
                    <td><%= index + 1 %></td>
                    <td>
                        <%= applicant.lastName %>, <%= applicant.firstName %>
                        <br>
                        <small style="color: #555;"><%= applicant.userEmail || 'Email not available' %></small>
                    </td>
                    
                    <td><%= applicant.deptName %></td> <!-- Display department name -->
                    <td><%= applicant.jobTitle %></td> <!-- Display job title -->
                    <td>
<!-- Display Applicant Status -->
<span><strong>Status:</strong> <%= applicant.applicantStatus || 'Pending' %></span>

<div style="margin-top: 10px;">
    <% if (applicant.applicantStatus && applicant.applicantStatus.startsWith('P1 - Awaiting for HR Action')) { %>
        <!-- For Review Button -->
        <button 
class="btn-review" 
onclick="redirectToReviewFilter()"
style="background-color: white; color: black; border: 1px solid #124A5C; padding: 10px 20px; cursor: pointer; border-radius: 5px; font-size: 14px; transition: background-color 0.3s ease, color 0.3s ease; width: 150px; text-align: center;">
For Review
</button>

    
                            <% }
                             else if (applicant.applicantStatus === 'P2 - Awaiting for HR Evaluation') { %>
    <!-- For Evaluation Button -->
    <a href="/hr/evaluation-form/<%= applicant.applicantId %>">
        <button class="btn-evaluation">For Evaluation</button>
    </a>
    <% } else if (applicant.applicantStatus && applicant.applicantStatus.startsWith('P2 - HR Evaluation Accomplished')) { %>
        <!-- ========== MODIFIED P2 ACCOMPLISHED SECTION ========== -->
        <!-- For Review Button that redirects to review filter -->
        <button 
            class="btn-review" 
            onclick="goToP2ReviewFilter()"
            style="background-color: white; color: black; border: 1px solid #124A5C; padding: 10px 20px; cursor: pointer; border-radius: 5px; font-size: 14px; transition: background-color 0.3s ease, color 0.3s ease; width: 150px; text-align: center;">
            For Review
        </button>
        <!-- ========== END MODIFIED P2 ACCOMPLISHED SECTION ========== -->
    <% } %>
</div>
                            
                        </div>
                    </td>   
                </tr>
            <% }); %>
        <% } else { %>
            <tr>
                <td colspan="5">No applicants found.</td>
            </tr>
        <% } %>
    </tbody>
    
    
    
</table>

<!-- Replace your onboarding table section with this fixed version -->
<h2 class="header-section" style="margin-top: 30px; margin-bottom: 10px;">Onboarding</h2>

<table class="tracking-table" id="onboardingTable" style="width: 100%; border-collapse: collapse;">
    <thead>
        <tr>
            <th>Application No.</th>
            <th>Last Name, First Name</th>
            <th>Department</th>
            <th>Position Applied</th>
            <th>Application Status & Actions</th>
        </tr>
    </thead>
    <tbody>
        <% if (applicants && applicants.length) { %>
            <% applicants.forEach((applicant, index) => { %>
                <% if (applicant.applicantStatus === 'P3 - PASSED - Job Offer Sent' || applicant.applicantStatus === 'Onboarding - First Day Checklist Sent') { %>
                    <tr class="applicant-row onboarding-row" 
                        data-userid="<%= applicant.userId %>"
                        data-applicantid="<%= applicant.applicantId %>"
                        data-firstname="<%= applicant.firstName %>"
                        data-lastname="<%= applicant.lastName %>"
                        data-birthdate="<%= applicant.birthDate %>"
                        data-email="<%= applicant.userEmail %>"
                        data-phone="<%= applicant.phoneNo %>"
                        data-jobid="<%= applicant.jobId %>"
                        data-jobtitle="<%= applicant.jobTitle %>"
                        data-status="<%= applicant.applicantStatus %>">
                        <td><%= index + 1 %></td>
                        <td>
                            <%= applicant.lastName %>, <%= applicant.firstName %>
                            <br>
                            <small style="color: #555;"><%= applicant.userEmail || 'Email not available' %></small>
                        </td>
                        <td><%= applicant.deptName %></td>
                        <td><%= applicant.jobTitle %></td>
                        <td>
                            <span><strong>Status:</strong> <%= applicant.applicantStatus %></span>
                            <div style="margin-top: 10px;">
                                <% if (applicant.applicantStatus === 'P3 - PASSED - Job Offer Sent') { %>
                                    <button class="btn-onboarding onboarding-trigger">For Onboarding</button>
                                <% } else if (applicant.applicantStatus === 'Onboarding - First Day Checklist Sent') { %>
                                    <span style="color: #28a745; font-weight: bold;">
                                        <i class="fas fa-check-circle"></i> Checklist Sent
                                    </span>
                                <% } %>
                            </div>
                        </td>
                    </tr>
                <% } %>
            <% }); %>
        <% } else { %>
            <tr>
                <td colspan="5">No applicants for onboarding found.</td>
            </tr>
        <% } %>
    </tbody>
</table>
<!--Frontend Modals-->

<!-- Modal for Confirm Release of Job Offer -->
<div id="releaseJobOfferModal" class="modal">
    <div class="modal-content">
        <span class="close-button" onclick="closeModal('releaseJobOfferModal')">&times;</span>
        <h2 style="color: #07ACB9;">Name</h2>
        <p><strong>Age:</strong> Text</p>
        <p><strong>Email:</strong> Text</p>
        <p><strong>Contact No:</strong> Text</p>
        
        <div class="divider"></div>
        
        <h3>Panel Assessment Form Breakdown</h3>
        <p>[INSERT SUBMITTED FORM HERE]</p>
        
        <div class="modal-question">
            <p><strong>Would you like to release the job offer and notify the applicant they are being considered for hiring?</strong></p>
        </div>
        
        <div class="modal-buttons">
            <button id="backButton" onclick="closeModal('releaseJobOfferModal')">Back</button>
            <button id="confirmButton" onclick="sendNotification()">Notify Applicant</button>
        </div>
    </div>
</div>

<!-- Modal for Account Setup Creation Reminder -->
<div id="accountSetupReminderModal" class="modal">
    <div class="modal-content">
        <span class="close-button" onclick="closeModal('accountSetupReminderModal')">&times;</span>
        <h1>Account Setup Creation Reminder</h1>
        
        <h2><strong>Applicant Personal Information</strong></h2>
        <h3><strong>Name</strong></h3>
        <p><strong>Age:</strong> Text</p>
        <p><strong>Email:</strong> Text</p>
        <p><strong>Contact No:</strong> Text</p>
        
        <div class="modal-question">
            <p><strong>Have you created an account for the employee through the Manage Employees page and emailed them the account details?</strong></p>
        </div>
        
        <div class="modal-buttons">
            <button id="backButton" onclick="closeModal('accountSetupReminderModal')">Back</button>
            <button id="confirmButton" onclick="confirmAccountSetup()">Confirm</button>
        </div>
    </div>
</div>


<button class="set-interview-button" onclick="setInterviewAvailabilities()">Set Interview Availabilities on Calendly</button>

<!-- Modal for P1: Finalize Review and Notify Applicants -->
<div id="finalizeModalP1" class="modal">
    <div class="modal-content">
        <span class="close-button">&times;</span>
        <h2>Confirm Final Review and Notify Applicants</h2>
        <p>You are about to finalize the review process and notify all applicants who were not selected that they have not advanced to the next stage. This action is irreversible. Are you sure you want to proceed?</p>
        <div class="modal-buttons">
            <button id="backButtonP1" class="back-button">Back</button>
            <button id="confirmButtonP1" class="confirm-button">Confirm</button>
        </div>
    </div>
</div>

<!-- P2 Finalize Review Modal -->
<div id="finalizeModalP2" class="modal">
    <div class="modal-content">
        <span class="close-button" onclick="closeModal('finalizeModalP2')">&times;</span>
        <h2>Confirm P2 Review Finalization</h2>
        <p>You are about to finalize the P2 review process using Gmail compose. This will prepare customizable email templates and open Gmail with pre-filled recipient information for both passed and failed applicants. Are you sure you want to proceed?</p>
        
        <div style="background-color: #e7f3ff; padding: 15px; border-radius: 5px; margin: 15px 0;">
            <h4 style="color: #0066cc; margin-top: 0;">📧 Gmail Integration Process</h4>
            <ol style="color: #0066cc; margin-bottom: 0;">
                <li>Customize email templates for passed applicants</li>
                <li>Gmail will open with all emails pre-filled</li>
                <li>Customize email templates for failed applicants</li>
                <li>Gmail will open with rejection emails pre-filled</li>
                <li>Send emails directly from Gmail</li>
                <li>Return here to update database</li>
            </ol>
        </div>
        
        <div class="modal-buttons">
            <button id="backButtonP2" class="back-button" onclick="closeModal('finalizeModalP2')">Back</button>
            <button id="confirmButtonP2" class="confirm-button">Start Gmail Process</button>
        </div>
    </div>
</div>

<!-- Enhanced Progress Modal Template for P2 -->
<div id="emailP2ProgressModalTemplate" style="display: none;">
    <div class="modal-content" style="width: 70%; max-width: 600px;">
        <h2 style="text-align: center; color: #007bff;">
            <i class="fas fa-paper-plane" style="color: #28a745; margin-right: 10px;"></i>
            Sending P2 Emails
        </h2>
        
        <div style="margin: 30px 0; text-align: center;">
            <div style="font-size: 48px; color: #28a745; margin-bottom: 20px;">
                <i class="fas fa-spinner fa-spin"></i>
            </div>
            <p id="p2ProgressMessage" style="font-size: 18px; margin-bottom: 20px;">Sending P2 emails...</p>
            
            <div style="background-color: #e9ecef; border-radius: 10px; height: 20px; margin: 20px 0; overflow: hidden;">
                <div id="p2EmailProgressBar" style="background: linear-gradient(135deg, #28a745, #20c997); height: 100%; width: 0%; transition: width 0.3s ease;"></div>
            </div>
            
            <div id="p2EmailProgressText" style="font-size: 14px; color: #6c757d;">
                Initializing P2 email sending...
            </div>
            
            <div id="p2EmailProgressDetails" style="margin-top: 20px; background-color: #f8f9fa; padding: 15px; border-radius: 5px; text-align: left; max-height: 200px; overflow-y: auto;">
                <div style="font-weight: bold; margin-bottom: 10px;">📋 P2 Sending Progress:</div>
                <div id="p2EmailProgressLog"></div>
            </div>
        </div>
        
        <div style="background: linear-gradient(135deg, #fff3cd, #ffeaa7); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #f39c12;">
            <h4 style="color: #856404; margin-top: 0; display: flex; align-items: center;">
                <i class="fas fa-info-circle" style="margin-right: 10px;"></i>
                Please Wait
            </h4>
            <p style="color: #856404; margin-bottom: 0; line-height: 1.6;">
                P2 emails are being sent automatically. This modal will update when the process is complete.
            </p>
        </div>
        
        <div class="modal-buttons" style="display: none;" id="p2EmailProgressButtons">
            <button class="confirm-button" onclick="finishP2EmailProcess()" 
                    style="background: linear-gradient(135deg, #28a745, #20c997); font-size: 16px; padding: 12px 25px;">
                <i class="fas fa-check" style="margin-right: 8px;"></i>
                Continue to Database Update
            </button>
        </div>
    </div>
</div>

<!-- P2 Gmail Compose Modal for Passed Applicants -->
<div id="emailP2PassedModal" class="modal">
    <div class="modal-content" style="width: 85%; max-width: 900px;">
        <span class="close-button" onclick="closeModal('emailP2PassedModal')">&times;</span>
        <h2 style="color: #28a745;">✅ P2 Gmail Compose - Interview Advancement Email</h2>
        
        <!-- Progress Indicator for P2 -->
        <div style="background: linear-gradient(135deg, #e3f2fd, #bbdefb); padding: 15px; border-radius: 8px; margin: 15px 0; border-left: 5px solid #2196f3;">
            <h4 style="color: #1976d2; margin-top: 0; display: flex; align-items: center;">
                <i class="fas fa-route" style="margin-right: 10px;"></i>
                P2 Email Process Progress
            </h4>
            <div style="display: flex; align-items: center; color: #1976d2;">
                <div class="progress-step active" style="flex: 1; text-align: center; padding: 8px; background: #4caf50; color: white; border-radius: 4px; margin: 0 2px;">
                    🟢 Step 1: Interview Advancement Emails
                </div>
                <div class="progress-step pending" style="flex: 1; text-align: center; padding: 8px; background: #e0e0e0; color: #666; border-radius: 4px; margin: 0 2px;">
                    ⚪ Step 2: Notification Emails
                </div>
                <div class="progress-step pending" style="flex: 1; text-align: center; padding: 8px; background: #e0e0e0; color: #666; border-radius: 4px; margin: 0 2px;">
                    ⚪ Step 3: Database Update
                </div>
            </div>
        </div>
        
        <div style="background-color: #d4edda; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h4 style="color: #155724; margin-top: 0; display: flex; align-items: center;">
                <i class="fas fa-users" style="margin-right: 10px;"></i>
                Recipients (<span id="p2PassedRecipientsCount">0</span> applicants):
            </h4>
            <div id="p2PassedRecipientsList" style="color: #155724; max-height: 180px; overflow-y: auto; background: rgba(255,255,255,0.3); padding: 15px; border-radius: 5px;">
                <!-- Will be populated dynamically -->
            </div>
        </div>
        
        <div style="margin: 25px 0;">
            <label for="p2PassedEmailSubject" style="display: block; font-weight: bold; margin-bottom: 8px;">
                <i class="fas fa-tag" style="margin-right: 8px;"></i>Email Subject:
            </label>
            <input 
                type="text" 
                id="p2PassedEmailSubject" 
                style="width: 100%; padding: 12px; border: 2px solid #28a745; border-radius: 6px; font-size: 16px;"
                value="Great News! You've Advanced to Final Interview - Prime Infrastructure"
            >
        </div>
        
        <div style="margin: 25px 0;">
            <label for="p2PassedEmailTemplate" style="display: block; font-weight: bold; margin-bottom: 8px;">
                <i class="fas fa-edit" style="margin-right: 8px;"></i>Email Template:
            </label>
            <div style="margin: 10px 0; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
                <small style="color: #6c757d;">
                    <strong>Available placeholders:</strong> 
                    <code>{applicantName}</code>, <code>{jobTitle}</code>, <code>{companyName}</code>
                </small>
            </div>
            <textarea 
                id="p2PassedEmailTemplate" 
                rows="14" 
                style="width: 100%; padding: 15px; border: 2px solid #28a745; border-radius: 6px; font-family: Arial, sans-serif; font-size: 14px; line-height: 1.5;"
                placeholder="Email template will be loaded here..."
            ></textarea>
        </div>

        <div style="background: linear-gradient(135deg, #e7f3ff, #f0f8ff); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #007bff;">
            <h4 style="color: #0066cc; margin-top: 0; display: flex; align-items: center;">
                <i class="fas fa-magic" style="margin-right: 10px; font-size: 20px;"></i>
                Choose Your Sending Method
            </h4>
            <p style="color: #0066cc; margin-bottom: 0; line-height: 1.6;">
                • <strong>Gmail Compose:</strong> Opens Gmail with pre-filled content (manual sending)<br>
                • <strong>Preview & Edit:</strong> Review template before automatic sending<br>
                • <strong>Send Automatically:</strong> Sends all emails via SMTP instantly
            </p>
        </div>
        
        <div class="modal-buttons" id="emailP2PassedModalButtons">
            <button class="back-button" onclick="closeModal('emailP2PassedModal')">
                <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
            </button>
            <button class="confirm-button" onclick="openGmailForP2Passed()" 
                    style="background: linear-gradient(135deg, #6c757d, #5a6268); margin-right: 10px;">
                <i class="fab fa-google" style="margin-right: 8px;"></i>Gmail Compose
            </button>
            <button class="confirm-button" onclick="previewP2EmailTemplate('passed')" 
                    style="background: linear-gradient(135deg, #17a2b8, #138496); margin-right: 10px;">
                <i class="fas fa-eye" style="margin-right: 8px;"></i>Preview & Edit
            </button>
            <button class="confirm-button" onclick="sendAutomatedP2Emails('passed')" 
                    style="background: linear-gradient(135deg, #28a745, #20c997);" id="sendP2PassedEmailsBtn">
                <i class="fas fa-paper-plane" style="margin-right: 8px;"></i>Send Automatically
            </button>
        </div>
    </div>
</div>

<!-- P2 Gmail Compose Modal for Failed Applicants -->
<div id="emailP2FailedModal" class="modal">
    <div class="modal-content" style="width: 85%; max-width: 900px;">
        <span class="close-button" onclick="closeModal('emailP2FailedModal')">&times;</span>
        <h2 style="color: #dc3545;">❌ P2 Gmail Compose - Interview Notification Email</h2>
        
        <!-- Progress Indicator for P2 -->
        <div style="background: linear-gradient(135deg, #e3f2fd, #bbdefb); padding: 15px; border-radius: 8px; margin: 15px 0; border-left: 5px solid #2196f3;">
            <h4 style="color: #1976d2; margin-top: 0; display: flex; align-items: center;">
                <i class="fas fa-route" style="margin-right: 10px;"></i>
                P2 Email Process Progress
            </h4>
            <div style="display: flex; align-items: center; color: #1976d2;">
                <div class="progress-step completed" style="flex: 1; text-align: center; padding: 8px; background: #4caf50; color: white; border-radius: 4px; margin: 0 2px;">
                    ✅ Step 1: Interview Advancement Emails
                </div>
                <div class="progress-step active" style="flex: 1; text-align: center; padding: 8px; background: #4caf50; color: white; border-radius: 4px; margin: 0 2px;">
                    🟢 Step 2: Notification Emails
                </div>
                <div class="progress-step pending" style="flex: 1; text-align: center; padding: 8px; background: #e0e0e0; color: #666; border-radius: 4px; margin: 0 2px;">
                    ⚪ Step 3: Database Update
                </div>
            </div>
        </div>
        
        <div style="background-color: #f8d7da; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h4 style="color: #721c24; margin-top: 0; display: flex; align-items: center;">
                <i class="fas fa-users" style="margin-right: 10px;"></i>
                Recipients (<span id="p2FailedRecipientsCount">0</span> applicants):
            </h4>
            <div id="p2FailedRecipientsList" style="color: #721c24; max-height: 180px; overflow-y: auto; background: rgba(255,255,255,0.3); padding: 15px; border-radius: 5px;">
                <!-- Will be populated dynamically -->
            </div>
        </div>
        
        <div style="margin: 25px 0;">
            <label for="p2FailedEmailSubject" style="display: block; font-weight: bold; margin-bottom: 8px;">
                <i class="fas fa-tag" style="margin-right: 8px;"></i>Email Subject:
            </label>
            <input 
                type="text" 
                id="p2FailedEmailSubject" 
                style="width: 100%; padding: 12px; border: 2px solid #dc3545; border-radius: 6px; font-size: 16px;"
                value="Thank You for Your Interview - Prime Infrastructure"
            >
        </div>
        
        <div style="margin: 25px 0;">
            <label for="p2FailedEmailTemplate" style="display: block; font-weight: bold; margin-bottom: 8px;">
                <i class="fas fa-edit" style="margin-right: 8px;"></i>Email Template:
            </label>
            <div style="margin: 10px 0; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
                <small style="color: #6c757d;">
                    <strong>Available placeholders:</strong> 
                    <code>{applicantName}</code>, <code>{jobTitle}</code>, <code>{companyName}</code>
                </small>
            </div>
            <textarea 
                id="p2FailedEmailTemplate" 
                rows="14" 
                style="width: 100%; padding: 15px; border: 2px solid #dc3545; border-radius: 6px; font-family: Arial, sans-serif; font-size: 14px; line-height: 1.5;"
                placeholder="Email template will be loaded here..."
            ></textarea>
        </div>

        <div style="background: linear-gradient(135deg, #e7f3ff, #f0f8ff); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #007bff;">
            <h4 style="color: #0066cc; margin-top: 0; display: flex; align-items: center;">
                <i class="fas fa-magic" style="margin-right: 10px; font-size: 20px;"></i>
                Choose Your Sending Method
            </h4>
            <p style="color: #0066cc; margin-bottom: 0; line-height: 1.6;">
                • <strong>Gmail Compose:</strong> Opens Gmail with pre-filled content (manual sending)<br>
                • <strong>Preview & Edit:</strong> Review template before automatic sending<br>
                • <strong>Send Automatically:</strong> Sends all emails via SMTP instantly
            </p>
        </div>
        
        <div class="modal-buttons" id="emailP2FailedModalButtons">
            <button class="back-button" onclick="closeModal('emailP2FailedModal')">
                <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
            </button>
            <button class="confirm-button" onclick="openGmailForP2Failed()" 
                    style="background: linear-gradient(135deg, #6c757d, #5a6268); margin-right: 10px;">
                <i class="fab fa-google" style="margin-right: 8px;"></i>Gmail Compose
            </button>
            <button class="confirm-button" onclick="previewP2EmailTemplate('failed')" 
                    style="background: linear-gradient(135deg, #17a2b8, #138496); margin-right: 10px;">
                <i class="fas fa-eye" style="margin-right: 8px;"></i>Preview & Edit
            </button>
            <button class="confirm-button" onclick="sendAutomatedP2Emails('failed')" 
                    style="background: linear-gradient(135deg, #dc3545, #c82333);" id="sendP2FailedEmailsBtn">
                <i class="fas fa-paper-plane" style="margin-right: 8px;"></i>Send Automatically (Step 2)
            </button>
        </div>
    </div>
</div>

<!-- P2 Status Update Modal -->
<div id="p2StatusUpdateModal" class="modal">
    <div class="modal-content" style="width: 70%; max-width: 600px;">
        <h2 style="text-align: center; color: #007bff;">
            <i class="fab fa-google" style="color: #db4437; margin-right: 10px;"></i>
            P2 Gmail Compose Opened
        </h2>
        
        <div style="margin: 30px 0; text-align: center;">
            <div style="font-size: 64px; color: #db4437; margin-bottom: 20px;">
                <i class="fab fa-google"></i>
            </div>
            <p style="font-size: 18px; margin-bottom: 20px;">Gmail compose window has been opened in a new tab with your P2 email pre-filled.</p>
            
            <div style="background-color: #e3f2fd; padding: 25px; border-radius: 10px; margin: 25px 0; border-left: 5px solid #2196f3;">
                <h4 style="color: #1976d2; margin-top: 0;">📋 Next Steps:</h4>
                <ol style="text-align: left; margin: 15px 0; color: #1976d2; line-height: 1.8;">
                    <li><strong>Switch to Gmail tab</strong> - Check if Gmail opened correctly</li>
                    <li><strong>Review recipient list</strong> - Verify all emails are in "To:" field</li>
                    <li><strong>Check subject line</strong> - Modify if needed</li>
                    <li><strong>Review email content</strong> - Make final adjustments</li>
                    <li><strong>Send emails</strong> - Click Gmail's send button</li>
                    <li><strong>Return here</strong> - Click "Update Database" below</li>
                </ol>
            </div>
        </div>
        
        <div style="background: linear-gradient(135deg, #fff3cd, #ffeaa7); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #f39c12;">
            <h4 style="color: #856404; margin-top: 0; display: flex; align-items: center;">
                <i class="fas fa-exclamation-triangle" style="margin-right: 10px;"></i>
                Important
            </h4>
            <p style="color: #856404; margin-bottom: 0; line-height: 1.6;">
                <strong>After sending emails in Gmail</strong>, return here and click "Update Database" to finalize the P2 applicant statuses in your system.
            </p>
        </div>
        
        <div class="modal-buttons">
            <button class="back-button" onclick="closeModal('p2StatusUpdateModal')">
                <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel Process
            </button>
            <button class="confirm-button" onclick="updateP2ApplicantStatuses()" 
                    style="background: linear-gradient(135deg, #28a745, #20c997); font-size: 16px; padding: 12px 25px;">
                <i class="fas fa-database" style="margin-right: 8px;"></i>
                Update Database
            </button>
        </div>
    </div>
</div>

<!-- Modal for P3: Finalize Review and Notify Applicants -->
<div id="finalizeModalP3" class="modal">
    <div class="modal-content">
        <span class="close-button">&times;</span>
        <h2>Confirm Final Review and Notify Applicants</h2>
        <p>You are about to finalize the review process and notify all applicants who were not selected that they have not advanced to the next stage. This action is irreversible. Are you sure you want to proceed?</p>
        <div class="modal-buttons">
            <button id="backButtonP3" class="back-button">Back</button>
            <button id="confirmButtonP3" class="confirm-button">Confirm</button>
        </div>
    </div>
</div>

<!-- ========== UPDATED P2 NOTIFY MODAL ========== -->
<!-- Modal for notifying P2 applicants -->
<div id="notifyApplicantsModal" class="modal">
    <div class="modal-content">
        <span class="close-button" onclick="closeModal('notifyApplicantsModal')">&times;</span>
        <h2>Confirm P2 Review Finalization</h2>
        <p>You are about to finalize the P2 review process using Gmail compose. This will prepare customizable email templates and open Gmail with pre-filled recipient information for both passed and failed applicants. Are you sure you want to proceed?</p>
        <div class="modal-buttons">
            <button id="backButtonP2Modal" class="back-button" onclick="closeModal('notifyApplicantsModal')">Back</button>
            <button id="confirmP2Button" class="confirm-button" onclick="startP2GmailIntegrationFlow()">Start Gmail Process</button>
        </div>
    </div>
</div>
<!-- ========== END UPDATED P2 NOTIFY MODAL ========== -->

<div id="hrInitialScreeningModalHtml" class="review-modal">
    <div class="review-modal-content">
        <span class="review-close-button">&times;</span>
        <h2>P1: Initial Screening Score Breakdown</h2> 
        <div class="divider"></div>
        <div class="applicant-details">
            <input type="hidden" id="userId">
            <input type="hidden" id="jobId">            
            <input type="hidden" id="applicantId">

            <p><strong>Name:</strong> <span id="applicant-name"></span></p>
            <p><strong>Birthday:</strong> <span id="applicant-birthday"></span></p>
            <p><strong>Email:</strong> <span id="applicant-email"></span></p>
            <p><strong>Contact No.:</strong> <span id="applicant-contact"></span></p>
        </div>

        <h4>HR Online Assessment Form Breakdown</h4>
        <div class="scores-section">
            <h4>Initial Screening Scores</h4> 
            <table class="scores-table"> 
                <thead> 
                    <tr> 
                        <th>Criteria</th> 
                        <th>Score</th> 
                    </tr> 
                </thead> 
                <tbody> 
                    <tr> 
                        <td>Industry Specific Degree</td> 
                        <td id="score-degree"></td> 
                    </tr> 
                    <tr> 
                        <td>Experiences</td> 
                        <td id="score-experience"></td> 
                    </tr> 
                    <tr> 
                        <td>Certifications</td> 
                        <td id="score-certifications"></td> 
                    </tr> 
                    <tr> 
                        <td>Hard Skills</td> 
                        <td id="score-hard-skills"></td> 
                    </tr> 
                    <tr> 
                        <td>Soft Skills</td> 
                        <td id="score-soft-skills"></td> 
                    </tr> 
                    <tr> 
                        <td>Work Setup</td> 
                        <td id="score-work-setup"></td> 
                    </tr> 
                    <tr> 
                        <td>Availability</td> 
                        <td id="score-availability"></td> 
                    </tr> 
                </tbody> 
            </table> 
            <div class="computation-verdict"> 
                <strong>Computation Verdict - <span id="computation-verdict"></span></strong> 
            </div>
        </div>

        <h4>Uploaded Documents</h4>
        <p><strong>Degree:</strong> <a id="degree-doc" href="#" target="_blank">No document uploaded</a></p>
        <div id="degree-preview" style="margin-top: 10px;"></div>
        
        <p><strong>Certification:</strong> <a id="cert-doc" href="#" target="_blank">No document uploaded</a></p>
        <div id="cert-preview" style="margin-top: 10px;"></div>
        
        <p><strong>Resume:</strong> <a id="resume-doc" href="#" target="_blank">No document uploaded</a></p>
        <div id="resume-preview" style="margin-top: 10px;"></div>

        <!-- Additional Document Section (only show if exists) -->
        <div id="addtl-document-section" style="display: none;">
            <p><strong>Additional Document:</strong> <a id="addtl-doc" href="#" target="_blank">No additional document</a></p>
            <div id="addtl-preview" style="margin-top: 10px;"></div>
            <div class="addtl-document-section" style="background-color: #e8f4f8; padding: 15px; border-radius: 5px; margin-top: 15px;">
                <h5 style="margin-top: 0; color: #124A5C;">HR Remarks for Additional Document:</h5>
                <p id="hr-remarks-display" style="font-style: italic; color: #555;"></p>
            </div>
        </div>

        <!-- Document Reupload Request Section -->
        <div id="document-reupload-section" class="document-reupload-section" style="background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 20px; margin: 20px 0; display: none;">
            <h4 style="color: #856404; margin-top: 0; margin-bottom: 15px;"><i class="fas fa-exclamation-triangle"></i> Document Reupload Request</h4>
            <p>Please select which documents need to be reuploaded by the applicant:</p>
            
            <div class="checkbox-group" style="display: flex; flex-direction: column; gap: 10px; margin-bottom: 15px;">
                <div class="checkbox-item" style="display: flex; align-items: center; gap: 10px;">
                    <input type="checkbox" id="reupload-degree" name="reupload-docs" value="degree" style="transform: scale(1.2);">
                    <label for="reupload-degree" style="cursor: pointer; user-select: none;">Degree Certificate</label>
                </div>
                <div class="checkbox-item" style="display: flex; align-items: center; gap: 10px;">
                    <input type="checkbox" id="reupload-cert" name="reupload-docs" value="certification" style="transform: scale(1.2);">
                    <label for="reupload-cert" style="cursor: pointer; user-select: none;">Certification Document</label>
                </div>
                <div class="checkbox-item" style="display: flex; align-items: center; gap: 10px;">
                    <input type="checkbox" id="reupload-resume" name="reupload-docs" value="resume" style="transform: scale(1.2);">
                    <label for="reupload-resume" style="cursor: pointer; user-select: none;">Resume</label>
                </div>
                <div class="checkbox-item" style="display: flex; align-items: center; gap: 10px;">
                    <input type="checkbox" id="reupload-addtl" name="reupload-docs" value="additional" style="transform: scale(1.2);">
                    <label for="reupload-addtl" style="cursor: pointer; user-select: none;">Request Additional Document</label>
                </div>
            </div>

            <div class="remarks-section" style="margin-top: 15px;">
                <label for="reupload-remarks" style="display: block; font-weight: bold; margin-bottom: 8px; color: #856404;">Remarks/Instructions for Applicant: <span style="color: #d9534f; font-size: 0.9em; font-style: italic;">*Required</span></label>
                <textarea id="reupload-remarks" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 4px; resize: vertical; min-height: 80px;" placeholder="Please provide specific instructions for the applicant regarding the document reupload requirements..."></textarea>
                <div style="color: #d9534f; font-size: 0.9em; margin-top: 5px; font-style: italic;">This message will be shown to the applicant when they log in to the chatbot.</div>
            </div>
        </div>

        <!-- HR Verification Statement and Comments -->
        <div class="verification-section" style="margin-top: 20px; padding: 10px; border-top: 1px solid #ccc;">
            <label style="display: flex; align-items: flex-start; gap: 10px; font-weight: normal;">
                <input type="checkbox" id="hr-verification-checkbox" style="margin-top: 3px;">
                <span>
                    I confirm that the applicant is eligible for endorsement to the Line Manager after a review of the submitted documents.
                </span>
            </label>
            <p style="color: #d9534f; margin: 5px 0 15px 25px; font-size: 0.9em;">
                * This checkbox must be ticked to proceed with confirmation and endorsement to the Line Manager.
            </p>

            <label for="hr-verification-comments" style="display: block; margin-top: 10px;"><strong>HR Comments (optional):</strong></label>
            <textarea id="hr-verification-comments" rows="3" style="width: 100%; padding: 8px; resize: vertical;" placeholder="Enter any remarks or notes..."></textarea>
        </div>

        <!-- Enhanced Modal Buttons -->
        <div class="review-modal-buttons" style="display: flex; justify-content: center; margin-top: 20px; gap: 10px; flex-wrap: wrap;">
            <button id="backButton" class="review-modal-back-button" onclick="document.getElementById('hrInitialScreeningModalHtml').style.display = 'none'">Back</button>
            <button id="reuploadRequestButton" style="background-color: #f39c12; color: white; border: none; padding: 10px 20px; margin: 0 10px; border-radius: 5px; cursor: pointer; font-size: 16px; transition: background-color 0.3s ease;" onclick="toggleReuploadSection()">Document Reupload Request</button>
            <button id="rejectButton" class="review-modal-reject-button" onclick="rejectHRInitialScreeningModal()">Reject</button>
            <button id="confirmButton" class="review-modal-confirm-button" onclick="confirmHRInitialScreeningModal()">Confirm</button>
        </div>
    </div>
</div>

<!-- Second Modal for Final Decision (No Reupload Request) -->
<div id="hrInitialScreeningDecisionModal" class="review-modal">
    <div class="review-modal-content">
        <span class="review-close-button">&times;</span>
        <h2>P1: Final Review - Initial Screening</h2> 
        <div class="divider"></div>
        <div class="applicant-details">
            <input type="hidden" id="final-userId">
            <input type="hidden" id="final-jobId">            
            <input type="hidden" id="final-applicantId">

            <p><strong>Name:</strong> <span id="final-applicant-name"></span></p>
            <p><strong>Birthday:</strong> <span id="final-applicant-birthday"></span></p>
            <p><strong>Email:</strong> <span id="final-applicant-email"></span></p>
            <p><strong>Contact No.:</strong> <span id="final-applicant-contact"></span></p>
        </div>

        <h4>HR Online Assessment Form Breakdown</h4>
        <div class="scores-section">
            <h4>Initial Screening Scores</h4> 
            <table class="scores-table"> 
                <thead> 
                    <tr> 
                        <th>Criteria</th> 
                        <th>Score</th> 
                    </tr> 
                </thead> 
                <tbody> 
                    <tr> 
                        <td>Industry Specific Degree</td> 
                        <td id="final-score-degree"></td> 
                    </tr> 
                    <tr> 
                        <td>Experiences</td> 
                        <td id="final-score-experience"></td> 
                    </tr> 
                    <tr> 
                        <td>Certifications</td> 
                        <td id="final-score-certifications"></td> 
                    </tr> 
                    <tr> 
                        <td>Hard Skills</td> 
                        <td id="final-score-hard-skills"></td> 
                    </tr> 
                    <tr> 
                        <td>Soft Skills</td> 
                        <td id="final-score-soft-skills"></td> 
                    </tr> 
                    <tr> 
                        <td>Work Setup</td> 
                        <td id="final-score-work-setup"></td> 
                    </tr> 
                    <tr> 
                        <td>Availability</td> 
                        <td id="final-score-availability"></td> 
                    </tr> 
                </tbody> 
            </table> 
            <div class="computation-verdict"> 
                <strong>Computation Verdict - <span id="final-computation-verdict"></span></strong> 
            </div>
        </div>

        <h4>Uploaded Documents</h4>
        <p><strong>Degree:</strong> <a id="final-degree-doc" href="#" target="_blank">No document uploaded</a></p>
        <div id="final-degree-preview" style="margin-top: 10px;"></div>
        
        <p><strong>Certification:</strong> <a id="final-cert-doc" href="#" target="_blank">No document uploaded</a></p>
        <div id="final-cert-preview" style="margin-top: 10px;"></div>
        
        <p><strong>Resume:</strong> <a id="final-resume-doc" href="#" target="_blank">No document uploaded</a></p>
        <div id="final-resume-preview" style="margin-top: 10px;"></div>

        <!-- Additional Document Section (only show if exists) -->
        <div id="final-addtl-document-section" style="display: none;">
            <p><strong>Additional Document:</strong> <a id="final-addtl-doc" href="#" target="_blank">No additional document</a></p>
            <div id="final-addtl-preview" style="margin-top: 10px;"></div>
            <div class="addtl-document-section" style="background-color: #e8f4f8; padding: 15px; border-radius: 5px; margin-top: 15px;">
                <h5 style="margin-top: 0; color: #124A5C;">HR Remarks for Additional Document:</h5>
                <p id="final-hr-remarks-display" style="font-style: italic; color: #555;"></p>
            </div>
        </div>

        <!-- HR Verification Statement and Comments -->
        <div class="verification-section" style="margin-top: 20px; padding: 10px; border-top: 1px solid #ccc;">
            <label style="display: flex; align-items: flex-start; gap: 10px; font-weight: normal;">
                <input type="checkbox" id="final-hr-verification-checkbox" style="margin-top: 3px;">
                <span>
                    I confirm that the applicant is eligible for endorsement to the Line Manager after a review of the submitted documents.
                </span>
            </label>
            <p style="color: #d9534f; margin: 5px 0 15px 25px; font-size: 0.9em;">
                * This checkbox must be ticked to proceed with confirmation and endorsement to the Line Manager.
            </p>

            <label for="final-hr-verification-comments" style="display: block; margin-top: 10px;"><strong>HR Comments (optional):</strong></label>
            <textarea id="final-hr-verification-comments" rows="3" style="width: 100%; padding: 8px; resize: vertical;" placeholder="Enter any remarks or notes..."></textarea>
        </div>

        <!-- Final Decision Buttons (No Reupload Request) -->
        <div class="review-modal-buttons">
            <button id="finalBackButton" class="review-modal-back-button">Back</button>
            <button id="finalRejectButton" class="review-modal-reject-button" onclick="rejectFinalHRModal()">Reject</button>
            <button id="finalConfirmButton" class="review-modal-confirm-button" onclick="confirmFinalHRModal()">Confirm</button>
        </div>
    </div>
</div>

    </div>
</div>
<div id="moveToOnboardingModal" class="modal">
    <div class="modal-content" style="width: 70%; max-width: 1200px; background-color: white; border-radius: 8px; box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2); padding: 30px;">
        <span class="close-button" onclick="closeModal('moveToOnboardingModal')" style="color: #666; font-size: 28px; font-weight: bold; position: absolute; right: 20px; top: 15px; cursor: pointer;">&times;</span>
        
        <h1 style="color: #07ACB9; text-align: center; margin-bottom: 30px; font-weight: 600;">
            Moving of Applicant to Onboarding and Send First Day Checklist
        </h1>
                
        <input type="hidden" id="onboarding-user-id">
        <input type="hidden" id="onboarding-applicant-id">
        <input type="hidden" id="onboarding-job-id">
        
        <div class="applicant-info-section" style="margin-bottom: 30px; background-color: #f8f9fa; padding: 20px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);">
            <h2 style="color: #124A5C; margin-top: 0; font-weight: 600; margin-bottom: 15px;"><strong>Applicant Personal Information</strong></h2>
            <h3 style="color: #333; margin-top: 0; font-weight: 600; margin-bottom: 15px;"><strong id="applicant-name-onboarding">Name</strong></h3>
            <p style="margin: 10px 0; line-height: 1.6;"><strong>Birthday:</strong> <span id="applicant-birthday-onboarding">Text</span></p>
            <p style="margin: 10px 0; line-height: 1.6;"><strong>Email:</strong> <span id="applicant-email-onboarding">Text</span></p>
            <p style="margin: 10px 0; line-height: 1.6;"><strong>Contact No:</strong> <span id="applicant-contact-onboarding">Text</span></p>
            <p style="margin: 10px 0; line-height: 1.6;"><strong>Position:</strong> <span id="applicant-position-onboarding">Text</span></p>
        </div>
        
<!-- Updated Start Date Section in moveToOnboardingModal -->
<div class="start-date-section" style="margin-bottom: 30px; background-color: #f0f8ff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);">
    <h2 style="color: #124A5C; margin-top: 0; font-weight: 600; margin-bottom: 15px;"><strong>Start Date Information</strong></h2>
    
    <!-- Line Manager's Set Date -->
    <div style="margin-bottom: 15px; padding: 10px; background-color: #e8f4f8; border-radius: 5px; border-left: 4px solid #07ACB9;">
        <p style="margin: 0 0 5px 0; font-weight: 600;">Line Manager's Set Date:</p>
        <p style="margin: 0; font-size: 16px;" id="lm-set-date">Loading...</p>
    </div>
    
    <!-- HR can confirm or modify the date -->
    <p style="margin: 15px 0;">You can confirm or modify the start date for the applicant:</p>
    
    <div style="margin-bottom: 20px;">
        <label for="start-date-input" style="display: block; font-weight: 600; margin-bottom: 10px;">Confirmed Start Date:</label>
        <input type="date" id="start-date-input" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 4px; font-size: 16px;" min="<%= new Date().toISOString().split('T')[0] %>">
    </div>
</div><div class="checklist-section" style="margin-bottom: 30px; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); border: 1px solid #e9ecef;">
            <h2 style="color: #124A5C; margin-top: 0; font-weight: 600; margin-bottom: 15px;"><strong>First Day Onboarding Checklist</strong></h2>
            <p style="margin-bottom: 15px;">The following checklist will be provided to the applicant:</p>
            
            <table style="width: 100%; border-collapse: collapse; margin-bottom: 20px; background: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);">
                <thead>
                    <tr>
                        <th style="background-color: #124A5C; color: white; padding: 15px; text-align: left; font-weight: 500;">Activities</th>
                        <th style="background-color: #124A5C; color: white; padding: 15px; text-align: left; font-weight: 500;">Where</th>
                        <th style="background-color: #124A5C; color: white; padding: 15px; text-align: left; font-weight: 500;">Contact Person</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Finding your workstation + Meeting your team</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Your Department's Floor</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Line Manager</td>
                    </tr>
                    <tr>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Creation of company ID</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">19F Facilities Mgt Room</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Zac Apron</td>
                    </tr>
                    <tr>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Building/Door access</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">19F Security</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Billie Jean</td>
                    </tr>
                    <tr>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Claim IT equipment</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">20th Floor IT Dept, right wing</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Johnny Legend</td>
                    </tr>
                    <tr>
                        <td style="padding: 15px;">Setting up of company email</td>
                        <td style="padding: 15px;">Your Department's Floor</td>
                        <td style="padding: 15px;">Line Manager</td>
                    </tr>
                    <tr>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">
                            Submit Government IDs<br />
                            <em style="display: block; margin-left: 15px; color: #495057;">(Philhealth ID Card, Pag-Ibig ID, SSS ID, Tax Identification Number (TIN))</em>
                        </td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">HR Department, 18th Floor</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Jane Smith</td>
                    </tr>
                    <tr>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">
                            Submit Government Clearances<br />
                            <em style="display: block; margin-left: 15px; color: #495057;">(NBI Clearance, BIR Form 2316)</em>
                        </td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">HR Department, 18th Floor</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Jane Smith</td>
                    </tr>
                    <tr>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">
                            Submit Personal & Identity Document<br />
                            <em style="display: block; margin-left: 15px; color: #495057;">(PSA-issued Birth Certificate, 2x2 Photo with Background)</em>
                        </td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">HR Department, 18th Floor</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Jane Smith</td>
                    </tr>
                    <tr>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">
                            Submit Educational & Professional Records<br />
                            <em style="display: block; margin-left: 15px; color: #495057;">(Transcript of Records, Medical Clearance)</em>
                        </td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">HR Department, 18th Floor</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Jane Smith</td>
                    </tr>
                    <tr>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">
                            Submit Employment & Financial Setup<br />
                            <em style="display: block; margin-left: 15px; color: #495057;">(Bank Account Details, Signed Employment Contract)</em>
                        </td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">HR Department, 18th Floor</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Jane Smith</td>
                    </tr>
                </tbody>
            </table>
            
            <div style="background-color: #f8f9fa; border: 1px solid #ddd; border-radius: 8px; padding: 15px; margin-top: 20px;">
                <p style="margin: 0; display: flex; align-items: center;">
                    <span style="display: inline-block; width: 18px; height: 18px; margin-right: 10px; background-color: #07ACB9; color: white; border-radius: 50%; text-align: center; line-height: 18px; font-weight: bold; font-size: 12px;">i</span>
                    Confirming will update the applicant's status to "Onboarding - First Day Checklist Sent" and send them the first day checklist as a requirement for Onboarding.
                </p>
            </div>
        </div>
        
        
        <div class="modal-question" style="text-align: center; margin: 25px 0;">
            <p style="font-weight: 600; font-size: 1.1rem; color: #124A5C;"><strong>Would you like to move this applicant for onboarding?</strong></p>
        </div>
        
        <div class="modal-buttons" style="display: flex; justify-content: center; gap: 20px; margin-top: 30px;">
            <button id="backButton" onclick="closeModal('moveToOnboardingModal')" style="background-color: #f8f9fa; color: #333; border: 1px solid #ddd; padding: 12px 25px; border-radius: 4px; cursor: pointer; font-weight: 500; font-size: 16px;">Back</button>
            <button id="confirmButton" onclick="confirmOnboarding()" style="background-color: #124A5C; color: white; border: none; padding: 12px 25px; border-radius: 4px; cursor: pointer; font-weight: 500; font-size: 16px;">Confirm</button>
        </div>
    </div>
</div>
<!-- P2 Gmail Compose Modal for Passed Applicants -->
<div id="emailP2PassedModal" class="modal">
    <div class="modal-content" style="width: 85%; max-width: 900px;">
        <span class="close-button" onclick="closeModal('emailP2PassedModal')">&times;</span>
        <h2 style="color: #28a745;">✅ Gmail Compose - HR Interview Advancement Email</h2>
        
        <div style="background-color: #d4edda; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h4 style="color: #155724; margin-top: 0; display: flex; align-items: center;">
                <i class="fas fa-users" style="margin-right: 10px;"></i>
                Recipients (<span id="p2PassedRecipientsCount">0</span> applicants):
            </h4>
            <div id="p2PassedRecipientsList" style="color: #155724; max-height: 180px; overflow-y: auto; background: rgba(255,255,255,0.3); padding: 15px; border-radius: 5px;">
                <!-- Will be populated dynamically -->
            </div>
        </div>
        
        <div style="margin: 25px 0;">
            <label for="p2PassedEmailSubject" style="display: block; font-weight: bold; margin-bottom: 8px;">
                <i class="fas fa-tag" style="margin-right: 8px;"></i>Email Subject:
            </label>
            <input 
                type="text" 
                id="p2PassedEmailSubject" 
                style="width: 100%; padding: 12px; border: 2px solid #28a745; border-radius: 6px; font-size: 16px;"
                value="Great News! You've Advanced to Final Interview - Company ABC"
            >
        </div>
        
        <div style="margin: 25px 0;">
            <label for="p2PassedEmailTemplate" style="display: block; font-weight: bold; margin-bottom: 8px;">
                <i class="fas fa-edit" style="margin-right: 8px;"></i>Email Template:
            </label>
            <div style="margin: 10px 0; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
                <small style="color: #6c757d;">
                    <strong>Available placeholders:</strong> 
                    <code>{applicantName}</code>, <code>{jobTitle}</code>, <code>{companyName}</code>
                </small>
            </div>
            <textarea 
                id="p2PassedEmailTemplate" 
                rows="14" 
                style="width: 100%; padding: 15px; border: 2px solid #28a745; border-radius: 6px; font-family: Arial, sans-serif; font-size: 14px; line-height: 1.5;"
                placeholder="Email template will be loaded here..."
            ></textarea>
        </div>

        <div style="background: linear-gradient(135deg, #e7f3ff, #f0f8ff); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #007bff;">
            <h4 style="color: #0066cc; margin-top: 0; display: flex; align-items: center;">
                <i class="fab fa-google" style="margin-right: 10px; font-size: 20px;"></i>
                Gmail Integration Ready
            </h4>
            <p style="color: #0066cc; margin-bottom: 0; line-height: 1.6;">
                Clicking "Open Gmail Compose" will open Gmail in a new tab with:<br>
                • <strong>All recipient emails</strong> automatically added to "To:" field<br>
                • <strong>Subject line</strong> pre-filled<br>
                • <strong>Email template</strong> ready in the message body
            </p>
        </div>
        
        <div class="modal-buttons">
            <button class="back-button" onclick="closeModal('emailP2PassedModal')">
                <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
            </button>
            <button class="confirm-button" onclick="openGmailForP2Passed()" style="background: linear-gradient(135deg, #db4437, #c23321); border: none; font-size: 16px; padding: 12px 25px;">
                <i class="fab fa-google" style="margin-right: 8px;"></i>
                Open Gmail Compose
            </button>
        </div>
    </div>
</div>

<!-- P2 Gmail Compose Modal for Failed Applicants -->
<div id="emailP2FailedModal" class="modal">
    <div class="modal-content" style="width: 85%; max-width: 900px;">
        <span class="close-button" onclick="closeModal('emailP2FailedModal')">&times;</span>
        <h2 style="color: #dc3545;">❌ Gmail Compose - HR Interview Notification Email</h2>
        
        <div style="background-color: #f8d7da; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h4 style="color: #721c24; margin-top: 0; display: flex; align-items: center;">
                <i class="fas fa-users" style="margin-right: 10px;"></i>
                Recipients (<span id="p2FailedRecipientsCount">0</span> applicants):
            </h4>
            <div id="p2FailedRecipientsList" style="color: #721c24; max-height: 180px; overflow-y: auto; background: rgba(255,255,255,0.3); padding: 15px; border-radius: 5px;">
                <!-- Will be populated dynamically -->
            </div>
        </div>
        
        <div style="margin: 25px 0;">
            <label for="p2FailedEmailSubject" style="display: block; font-weight: bold; margin-bottom: 8px;">
                <i class="fas fa-tag" style="margin-right: 8px;"></i>Email Subject:
            </label>
            <input 
                type="text" 
                id="p2FailedEmailSubject" 
                style="width: 100%; padding: 12px; border: 2px solid #dc3545; border-radius: 6px; font-size: 16px;"
                value="Thank You for Your Interview - Company ABC"
            >
        </div>
        
        <div style="margin: 25px 0;">
            <label for="p2FailedEmailTemplate" style="display: block; font-weight: bold; margin-bottom: 8px;">
                <i class="fas fa-edit" style="margin-right: 8px;"></i>Email Template:
            </label>
            <div style="margin: 10px 0; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
                <small style="color: #6c757d;">
                    <strong>Available placeholders:</strong> 
                    <code>{applicantName}</code>, <code>{jobTitle}</code>, <code>{companyName}</code>
                </small>
            </div>
            <textarea 
                id="p2FailedEmailTemplate" 
                rows="14" 
                style="width: 100%; padding: 15px; border: 2px solid #dc3545; border-radius: 6px; font-family: Arial, sans-serif; font-size: 14px; line-height: 1.5;"
                placeholder="Email template will be loaded here..."
            ></textarea>
        </div>

        <div style="background: linear-gradient(135deg, #e7f3ff, #f0f8ff); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #007bff;">
            <h4 style="color: #0066cc; margin-top: 0; display: flex; align-items: center;">
                <i class="fab fa-google" style="margin-right: 10px; font-size: 20px;"></i>
                Gmail Integration Ready
            </h4>
            <p style="color: #0066cc; margin-bottom: 0; line-height: 1.6;">
                Clicking "Open Gmail Compose" will open Gmail in a new tab with:<br>
                • <strong>All recipient emails</strong> automatically added to "To:" field<br>
                • <strong>Subject line</strong> pre-filled<br>
                • <strong>Email template</strong> ready in the message body
            </p>
        </div>
        
        <div class="modal-buttons">
            <button class="back-button" onclick="closeModal('emailP2FailedModal')">
                <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
            </button>
            <button class="confirm-button" onclick="openGmailForP2Failed()" style="background: linear-gradient(135deg, #db4437, #c23321); border: none; font-size: 16px; padding: 12px 25px;">
                <i class="fab fa-google" style="margin-right: 8px;"></i>
                Open Gmail Compose
            </button>
        </div>
    </div>
</div>


<!-- P2 Status Update Modal -->
<div id="p2StatusUpdateModal" class="modal">
    <div class="modal-content" style="width: 70%; max-width: 600px;">
        <h2 style="text-align: center; color: #007bff;">
            <i class="fab fa-google" style="color: #db4437; margin-right: 10px;"></i>
            Gmail Compose Opened
        </h2>
        
        <div style="margin: 30px 0; text-align: center;">
            <div style="font-size: 64px; color: #db4437; margin-bottom: 20px;">
                <i class="fab fa-google"></i>
            </div>
            <p style="font-size: 18px; margin-bottom: 20px;">Gmail compose window has been opened in a new tab with your P2 HR interview emails pre-filled.</p>
            
            <div style="background-color: #e3f2fd; padding: 25px; border-radius: 10px; margin: 25px 0; border-left: 5px solid #2196f3;">
                <h4 style="color: #1976d2; margin-top: 0;">📋 Next Steps:</h4>
                <ol style="text-align: left; margin: 15px 0; color: #1976d2; line-height: 1.8;">
                    <li><strong>Switch to Gmail tab</strong> - Check if Gmail opened correctly</li>
                    <li><strong>Review recipient list</strong> - Verify all emails are in "To:" field</li>
                    <li><strong>Check subject line</strong> - Modify if needed</li>
                    <li><strong>Review email content</strong> - Make final adjustments</li>
                    <li><strong>Send emails</strong> - Click Gmail's send button</li>
                    <li><strong>Return here</strong> - Click "Update Database" below</li>
                </ol>
            </div>
        </div>
        
        <div style="background: linear-gradient(135deg, #fff3cd, #ffeaa7); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #f39c12;">
            <h4 style="color: #856404; margin-top: 0; display: flex; align-items: center;">
                <i class="fas fa-exclamation-triangle" style="margin-right: 10px;"></i>
                Important
            </h4>
            <p style="color: #856404; margin-bottom: 0; line-height: 1.6;">
                <strong>After sending emails in Gmail</strong>, return here and click "Update Database" to finalize the P2 applicant statuses in your system.
            </p>
        </div>
        
        <div class="modal-buttons">
            <button class="back-button" onclick="closeModal('p2StatusUpdateModal')">
                <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel Process
            </button>
            <button class="confirm-button" onclick="updateP2ApplicantStatuses()" style="background: linear-gradient(135deg, #28a745, #20c997); font-size: 16px; padding: 12px 25px;">
                <i class="fas fa-database" style="margin-right: 8px;"></i>
                Update Database
            </button>
        </div>
    </div>
</div>

<!-- ========== ADDED APPLICANTS DATA SCRIPT ========== -->
<script id="applicants-data" type="application/json">
    <% if (typeof applicants !== 'undefined') { %>
      <%- JSON.stringify(applicants) %>
    <% } else { %>
      []
    <% } %>
</script>
<!-- ========== END ADDED APPLICANTS DATA SCRIPT ========== -->


<script>
    
// Global variables for P2 functionality
let currentP2PassedApplicants = [];
let currentP2FailedApplicants = [];
let pendingP2StatusChanges = {};

// P2 Email Integration Global Variables
let p2EmailTemplates = {};
let p2EmailsToUpdate = { passed: [], failed: [] };


// Global variables for tracking modal state
let isReuploadRequested = false;
let currentModalType = 'initial'; // 'initial' or 'final'

let p2EmailSendingInProgress = false;
let p2EmailSendingState = {
    phase: 'P2',
    passedSent: false,
    failedSent: false,
    currentStep: 'initial',
    passedResults: null,
    failedResults: null
};

function startP2GmailIntegrationFlow() {
    console.log("🔥 HR P2: Starting Gmail integration flow from finalization modal");
    p2EmailSendingState.phase = 'P2';
    p2EmailSendingState.currentStep = 'initial';
    p2EmailSendingState.passedSent = false;
    p2EmailSendingState.failedSent = false;
    
    // Close the finalization modal first
    closeModal('finalizeModalP2');
    closeModal('notifyApplicantsModal');
    
    // Start the P2 review process
    executeP2Finalization();
}


function p2passApplicant(applicantId) {
    console.log(`🟢 [P2 Pass] Starting pass action for applicantId: ${applicantId}`);
    
    if (!applicantId) {
        console.error('❌ [P2 Pass] Missing applicantId');
        alert("Error: Invalid Applicant ID");
        return;
    }

    // Make API call to update status
    fetch('/hr/markAsP2Passed', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ applicantId: applicantId }),
    })
    .then(response => {
        console.log(`📡 [P2 Pass] API response status: ${response.status}`);
        return response.json();
    })
    .then(data => {
        console.log('📡 [P2 Pass] API response data:', data);
        
        if (data.success) {
            // Record this in the pending changes
            if (!window.pendingP2StatusChanges) {
                window.pendingP2StatusChanges = {};
            }
            window.pendingP2StatusChanges[applicantId] = 'PASSED';
            
            // Move the row from awaiting to declared results
            moveP2RowToSection(applicantId, 'awaitingActionTable', 'declaredResultsTable');
            
            console.log(`✅ [P2 Pass] Successfully marked applicant ${applicantId} as P2 PASSED!`);
            alert("Successfully marked applicant as P2 PASSED!");
            
        } else {
            console.error(`❌ [P2 Pass] API error: ${data.message}`);
            alert("Error updating applicant status: " + (data.message || "Unknown error"));
        }
    })
    .catch(error => {
        console.error("❌ [P2 Pass] Network error:", error);
        alert("Failed to update applicant status.");
    });
}

// Function to handle P2 reject action from awaiting table
function p2rejectApplicant(applicantId) {
    console.log(`🔴 [P2 Reject] Starting reject action for applicantId: ${applicantId}`);
    
    if (!applicantId) {
        console.error('❌ [P2 Reject] Missing applicantId');
        alert("Error: Invalid Applicant ID");
        return;
    }

    // Make API call to update status
    fetch('/hr/markAsP2Failed', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ applicantId: applicantId }),
    })
    .then(response => {
        console.log(`📡 [P2 Reject] API response status: ${response.status}`);
        return response.json();
    })
    .then(data => {
        console.log('📡 [P2 Reject] API response data:', data);
        
        if (data.success) {
            // Record this in the pending changes
            if (!window.pendingP2StatusChanges) {
                window.pendingP2StatusChanges = {};
            }
            window.pendingP2StatusChanges[applicantId] = 'FAILED';
            
            // Move the row from awaiting to declared results
            moveP2RowToSection(applicantId, 'awaitingActionTable', 'declaredResultsTable');
            
            console.log(`✅ [P2 Reject] Successfully marked applicant ${applicantId} as P2 FAILED!`);
            alert("Successfully marked applicant as P2 FAILED!");
            
        } else {
            console.error(`❌ [P2 Reject] API error: ${data.message}`);
            alert("Error updating applicant status: " + (data.message || "Unknown error"));
        }
    })
    .catch(error => {
        console.error("❌ [P2 Reject] Network error:", error);
        alert("Failed to update applicant status.");
    });
}

function moveP2RowToSection(applicantId, fromTableId, toTableId) {
    console.log(`🔄 [P2 Move] Moving applicantId ${applicantId} from ${fromTableId} to ${toTableId}`);
    
    const fromTable = document.getElementById(fromTableId);
    const toTable = document.getElementById(toTableId);
    
    if (!fromTable || !toTable) {
        console.error(`❌ [P2 Move] Tables not found: ${fromTableId} or ${toTableId}`);
        return;
    }
    
    // Find the row in the source table
    const rows = fromTable.querySelectorAll('tbody tr');
    let rowToMove = null;
    
    for (const row of rows) {
        if (row.getAttribute('data-applicantid') === applicantId) {
            rowToMove = row;
            break;
        }
    }
    
    if (!rowToMove) {
        console.error(`❌ [P2 Move] Row for applicant ${applicantId} not found in ${fromTableId}`);
        return;
    }
    
    // Update the status cell
    const statusCell = rowToMove.querySelector('td:nth-child(6)');
    if (statusCell) {
        const isPassed = window.pendingP2StatusChanges[applicantId] === 'PASSED';
        statusCell.textContent = isPassed ? 'P2 - PASSED (Pending Finalization)' : 'P2 - FAILED (Pending Finalization)';
        console.log(`✅ [P2 Move] Updated status cell to: ${statusCell.textContent}`);
    }
    
    // Change the actions column to toggle button for declared results
    if (toTableId === 'declaredResultsTable') {
        const actionsCell = rowToMove.querySelector('td:last-child');
        if (actionsCell) {
            const isPassed = window.pendingP2StatusChanges[applicantId] === 'PASSED';
            actionsCell.innerHTML = `
                <button 
                    class="btn-toggle-status ${isPassed ? 'status-passed' : 'status-failed'}" 
                    data-applicantid="${applicantId}"
                    onclick="toggleP2ApplicantStatus(this)"
                >
                    ${isPassed ? 'Passed' : 'Failed'}
                </button>
            `;
            console.log(`✅ [P2 Move] Added toggle button for applicant ${applicantId}`);
        }
    }
    
    // Move the row
    rowToMove.remove();
    
    // Add to target table
    const targetTbody = toTable.querySelector('tbody');
    
    // Remove any "no data" message
    const noDataRow = targetTbody.querySelector('.no-data-message')?.closest('tr');
    if (noDataRow) {
        noDataRow.remove();
    }
    
    // Find or create P2 section header
    let p2Header = targetTbody.querySelector('.section-header-row');
    if (!p2Header) {
        p2Header = document.createElement('tr');
        p2Header.classList.add('section-header-row');
        p2Header.innerHTML = `<td colspan="7" style="background-color: #f0f0f0; font-weight: bold; padding: 8px;">List of P2 Applicants - Declared Results</td>`;
        targetTbody.appendChild(p2Header);
    }
    
    // Add the row after the header
    p2Header.insertAdjacentElement('afterend', rowToMove);
    
    console.log(`✅ [P2 Move] Successfully moved applicant ${applicantId} to ${toTableId}`);
}


// Toggle P2 applicant status between PASSED and FAILED
function toggleP2ApplicantStatus(button) {
    const row = button.closest('tr');
    if (!row) return;
    
    const applicantId = button.getAttribute('data-applicantid') || row.getAttribute('data-applicantid');
    if (!applicantId) {
        console.error("❌ [P2 Toggle] Cannot toggle status: Missing applicantId");
        alert("Error: Cannot identify the applicant to update status");
        return;
    }
    
    // Get current status
    const statusCell = row.querySelector('td:nth-child(6)');
    if (!statusCell) return;
    
    const currentStatus = statusCell.textContent.trim();
    console.log(`🔄 [P2 Toggle] Toggling P2 status for applicantId ${applicantId}, current status: ${currentStatus}`);
    
    // Toggle between PASSED and FAILED
    let newStatus;
    let apiEndpoint;
    
    if (currentStatus.includes('PASSED')) {
        // If already PASSED, change to FAILED
        newStatus = 'P2 - FAILED (Pending Finalization)';
        apiEndpoint = 'markAsP2Failed';
        button.classList.remove('status-passed');
        button.classList.add('status-failed');
        button.textContent = 'Failed';
    } else {
        // Default to PASSED
        newStatus = 'P2 - PASSED (Pending Finalization)';
        apiEndpoint = 'markAsP2Passed';
        button.classList.remove('status-failed');
        button.classList.add('status-passed');
        button.textContent = 'Passed';
    }
    
    // Update the status cell
    statusCell.textContent = newStatus;
    
    // Store the pending status change
    if (!window.pendingP2StatusChanges) {
        window.pendingP2StatusChanges = {};
    }
    
    window.pendingP2StatusChanges[applicantId] = newStatus.includes('PASSED') ? 'PASSED' : 'FAILED';
    
    console.log(`✅ [P2 Toggle] P2 status change for applicantId ${applicantId} to ${newStatus} is pending finalization`);
    
    // Make API call to update the temporary status
    fetch(`/hr/${apiEndpoint}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ applicantId: applicantId }),
    })
    .then(response => response.json())
    .then(data => {
        if (!data.success) {
            console.error(`❌ [P2 Toggle] Error updating P2 status: ${data.message || 'Unknown error'}`);
        } else {
            console.log(`✅ [P2 Toggle] Successfully updated temporary status for ${applicantId}`);
        }
    })
    .catch(error => {
        console.error('❌ [P2 Toggle] Error calling P2 status API:', error);
    });
}

// Updated finalizeP2Review function to include Gmail integration
function finalizeP2Review() {
    console.log("🚀 [P2 Finalize] Starting P2 review finalization with Gmail compose integration...");

    // Extract status updates from rows in the declared results table
    const declaredResultsTable = document.getElementById("declaredResultsTable");
    const rows = declaredResultsTable?.querySelectorAll('tbody tr:not(.section-header-row)') || [];

    // Arrays to store passed and failed applicant IDs
    const passedApplicantIds = [];
    const failedApplicantIds = [];

    // Process each row to determine which users passed and which failed
    rows.forEach(row => {
        // Skip message rows
        if (row.querySelector('td[colspan]')) return;
        
        const statusCell = row.querySelector('td:nth-child(6)');
        const applicantId = row.getAttribute('data-applicantid');
        
        if (statusCell && applicantId) {
            const statusText = statusCell.textContent.trim();
            
            // Only include P2 rows
            if (statusText.includes('P2')) {
                if (statusText.includes('PASSED')) {
                    passedApplicantIds.push(applicantId);
                    console.log(`✅ [P2 Finalize] Added ${applicantId} to passed list (${statusText})`);
                } else if (statusText.includes('FAILED')) {
                    failedApplicantIds.push(applicantId);
                    console.log(`❌ [P2 Finalize] Added ${applicantId} to failed list (${statusText})`);
                }
            }
        }
    });

    // If no applicants are selected, show an error
    if (passedApplicantIds.length === 0 && failedApplicantIds.length === 0) {
        console.warn("⚠️ [P2 Finalize] No P2 applicants found with PASSED or FAILED status");
        alert("No P2 applicants found with PASSED or FAILED status.");
        closeModal('notifyApplicantsModal');
        return;
    }

    console.log(`📊 [P2 Finalize] Preparing P2 Gmail compose for: ${passedApplicantIds.length} passed, ${failedApplicantIds.length} failed`);

    // Store the applicant IDs for database updates later
    p2EmailsToUpdate = {
        passed: passedApplicantIds,
        failed: failedApplicantIds
    };

    // Fetch applicant data and email templates
    Promise.all([
        fetchP2ApplicantDataForEmails(passedApplicantIds, failedApplicantIds),
        fetchP2EmailTemplates()
    ])
    .then(([applicantData, templates]) => {
        console.log('📧 [P2 Finalize] Successfully fetched applicant data and templates');
        
        currentP2PassedApplicants = applicantData.passedApplicants || [];
        currentP2FailedApplicants = applicantData.failedApplicants || [];
        p2EmailTemplates = templates;
        
        console.log(`📊 [P2 Finalize] Loaded ${currentP2PassedApplicants.length} passed and ${currentP2FailedApplicants.length} failed applicants`);
        
        // Start the Gmail compose process
        if (currentP2PassedApplicants.length > 0) {
            console.log('📧 [P2 Finalize] Showing passed email modal');
            showP2PassedEmailModal();
        } else if (currentP2FailedApplicants.length > 0) {
            console.log('📧 [P2 Finalize] Showing failed email modal');
            showP2FailedEmailModal();
        } else {
            console.warn("⚠️ [P2 Finalize] No applicant data found for email composition");
            alert("No applicant data found for P2 email composition.");
        }
    })
    .catch(error => {
        console.error("❌ [P2 Finalize] Error preparing P2 email composition:", error);
        alert("Error preparing P2 email composition: " + error.message);
    });
}

function startP2FinalizationProcess() {
    console.log("🎯 HR P2: Starting P2 finalization process");
    
    try {
        // First show the modal to inform user about the process
        const modal = document.getElementById('finalizeModalP2');
        if (modal) {
            modal.style.display = 'block';
            console.log("✅ P2 Modal displayed successfully");
        } else {
            // If modal doesn't exist, proceed directly to finalization
            console.log("⚠️ P2 Modal not found, proceeding directly to finalization");
            executeP2Finalization();
        }
    } catch (error) {
        console.error("❌ Error in P2 finalization process:", error);
        alert("Error starting P2 finalization process: " + error.message);
    }
}
async function executeP2Finalization() {
    console.log("🔥 HR P2: Starting P2 review finalization with Gmail compose integration");

    try {
        const declaredResultsTable = document.getElementById("declaredResultsTable");
        if (!declaredResultsTable) {
            throw new Error("P2 declared results table not found");
        }

        const rows = declaredResultsTable.querySelectorAll('tbody tr:not(.section-header-row)') || [];
        console.log(`🔥 HR P2: Found ${rows.length} rows in P2 declared results table`);

        const passedApplicantIds = [];
        const failedApplicantIds = [];

        rows.forEach((row, index) => {
            // Skip rows with colspan (no data messages)
            if (row.querySelector('td[colspan]')) {
                console.log(`Row ${index + 1}: Skipping colspan row (no data message)`);
                return;
            }
            
            const applicantId = row.getAttribute('data-applicantid');
            console.log(`Row ${index + 1}: applicantId=${applicantId}`);
            
            if (!applicantId) {
                console.log(`❌ Row ${index + 1}: No applicantId found`);
                return;
            }
            
            // Find the status cell (should be column 6 for P2)
            const statusCell = row.querySelector('td:nth-child(6)');
            if (!statusCell) {
                console.log(`❌ Row ${index + 1}: No status cell found`);
                return;
            }
            
            const statusText = statusCell.textContent.trim();
            console.log(`Row ${index + 1}: Processing status = "${statusText}"`);
            
            if (statusText.includes('P2')) {
                if (statusText.includes('PASSED')) {
                    passedApplicantIds.push(applicantId);
                    console.log(`✅ Added ${applicantId} to P2 passed list (${statusText})`);
                } else if (statusText.includes('FAILED')) {
                    failedApplicantIds.push(applicantId);
                    console.log(`✅ Added ${applicantId} to P2 failed list (${statusText})`);
                } else {
                    console.log(`⚠️ Row ${index + 1}: P2 status found but not PASSED/FAILED: "${statusText}"`);
                }
            } else {
                console.log(`⚠️ Row ${index + 1}: No P2 status found: "${statusText}"`);
            }
        });

        console.log(`🔥 HR P2: Final counts - Passed: ${passedApplicantIds.length}, Failed: ${failedApplicantIds.length}`);

        if (passedApplicantIds.length === 0 && failedApplicantIds.length === 0) {
            throw new Error("No P2 applicants found with PASSED or FAILED status. Please mark some applicants first.");
        }

        console.log(`🔥 HR P2: Preparing P2 Gmail compose for: ${passedApplicantIds.length} passed, ${failedApplicantIds.length} failed`);

        // Store for later use
        p2EmailsToUpdate = {
            passed: passedApplicantIds,
            failed: failedApplicantIds
        };

        // Fetch applicant data and email templates
        const [applicantData, templates] = await Promise.all([
            fetchP2ApplicantDataForEmails(passedApplicantIds, failedApplicantIds),
            fetchP2EmailTemplates()
        ]);

        currentP2PassedApplicants = applicantData.passedApplicants || [];
        currentP2FailedApplicants = applicantData.failedApplicants || [];
        p2EmailTemplates = templates;
        
        console.log("🔥 HR P2: Data loaded successfully");
        console.log("Passed applicants:", currentP2PassedApplicants);
        console.log("Failed applicants:", currentP2FailedApplicants);
        
        // Start with passed applicants if any exist
        if (currentP2PassedApplicants.length > 0) {
            showP2PassedEmailModal();
        } else if (currentP2FailedApplicants.length > 0) {
            showP2FailedEmailModal();
        } else {
            throw new Error("No applicant data found for P2 email composition.");
        }

    } catch (error) {
        console.error("🔥 HR P2: Error in P2 finalization:", error);
        alert("Error preparing P2 email composition: " + error.message);
    }
}


async function fetchP2ApplicantDataForEmails(passedApplicantIds, failedApplicantIds) {
    try {
        console.log('📡 [HR] Fetching P2 applicant data using existing finalizeP2Review endpoint...');
        
        const requestBody = {
            passedApplicantIds: passedApplicantIds,
            failedApplicantIds: failedApplicantIds,
            getEmailData: true  // This triggers your existing email data fetch logic
        };
        
        console.log('📡 [HR] Request payload:', JSON.stringify(requestBody, null, 2));
        
        const response = await fetch('/hr/finalizeP2Review', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody),
        });
        
        console.log('📡 [HR] Response status:', response.status);
        
        const data = await response.json();
        console.log('📡 [HR] API response data:', JSON.stringify(data, null, 2));
        
        if (!data.success) {
            console.error('❌ [HR] API returned error:', data.message);
            throw new Error(data.message || 'Failed to fetch P2 applicant data');
        }
        
        console.log('✅ [HR] Successfully fetched P2 applicant data using your existing endpoint');
        console.log('📊 [HR] Passed applicants:', data.passedApplicants);
        console.log('📊 [HR] Failed applicants:', data.failedApplicants);
        
        return {
            passedApplicants: data.passedApplicants || [],
            failedApplicants: data.failedApplicants || []
        };
        
    } catch (error) {
        console.error("❌ [HR] Error fetching P2 applicant data:", error);
        throw error;
    }
}
async function fetchP2EmailTemplates() {
    try {
        console.log("📧 HR P2: Fetching P2 email templates...");

        const response = await fetch('/hr/getP2EmailTemplates');
        const data = await response.json();

        if (!data.success) {
            throw new Error(data.message || 'Failed to fetch P2 email templates');
        }

        console.log("✅ HR P2: Successfully fetched P2 templates");

        return data.templates;

    } catch (error) {
        console.error("❌ HR P2: Error fetching P2 email templates:", error);

        // Fallback templates
        return {
            'P2 - PASSED': {
                subject: "Great News! You've Advanced to Final Interview - Prime Infrastructure",
                template: `Dear {applicantName},

Congratulations! We are pleased to inform you that you have successfully passed our HR interview process for the {jobTitle} position at {companyName}.

We were impressed with your qualifications, experience, and the responses you provided during the interview. You have demonstrated the skills and competencies we are looking for in this role.

🎉 Next Steps:
You will now advance to the final interview stage with our department head/senior management team. This is the final step in our recruitment process.

Our team will contact you within the next 2-3 business days to schedule your final interview. Please be prepared to discuss:
• Your technical expertise and experience in detail
• Your career goals and how they align with our company
• Specific scenarios and problem-solving approaches
• Your questions about the role and our organization

📋 What to Expect:
• Interview duration: 45-60 minutes
• Format: In-person/Virtual (we'll confirm the details)
• Participants: Department head and senior team members
• Focus: Technical competency and cultural fit assessment

We appreciate your continued interest in joining {companyName} and look forward to the next step in the process.

If you have any questions in the meantime, please don't hesitate to reach out to our HR team.

Best regards,  
The {companyName} HR Team`
            },
            'P2 - FAILED': {
                subject: 'Thank You for Your Interview - Prime Infrastructure',
                template: `Dear {applicantName},

Thank you for taking the time to interview with us for the {jobTitle} position at {companyName}. We appreciate your interest in our organization and the effort you put into the interview process.

After careful consideration of all candidates, we have decided to move forward with another candidate whose qualifications more closely match our current requirements for this specific role.

This decision was not made lightly, as we were impressed with many aspects of your background and experience. We encourage you to apply for future opportunities that may be a better fit for your skills and career goals.

🌟 Moving Forward:
• Your information will remain in our candidate database for future opportunities
• We will notify you of relevant positions that match your profile
• Feel free to check our careers page regularly for new openings
• We welcome you to apply again for suitable roles

We wish you the best of luck in your job search and hope our paths may cross again in the future.

Thank you again for your interest in {companyName}.

Best regards,  
The {companyName} HR Team`
            }
        };
    }
}


// ============================
// P2 PASS/FAIL FUNCTIONS
// ============================
function p2passApplicant(applicantId) {
    console.log(`🟢 [P2 Pass] Starting pass action for applicantId: ${applicantId}`);
    
    if (!applicantId) {
        console.error('❌ [P2 Pass] Missing applicantId');
        alert("Error: Invalid Applicant ID");
        return;
    }

    // Make API call to update status
    fetch('/hr/markAsP2Passed', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ applicantId: applicantId }),
    })
    .then(response => {
        console.log(`📡 [P2 Pass] API response status: ${response.status}`);
        return response.json();
    })
    .then(data => {
        console.log('📡 [P2 Pass] API response data:', data);
        
        if (data.success) {
            // Record this in the pending changes
            if (!window.pendingP2StatusChanges) {
                window.pendingP2StatusChanges = {};
            }
            window.pendingP2StatusChanges[applicantId] = 'PASSED';
            
            // Move the row from awaiting to declared results
            moveP2RowToSection(applicantId, 'awaitingActionTable', 'declaredResultsTable');
            
            console.log(`✅ [P2 Pass] Successfully marked applicant ${applicantId} as P2 PASSED!`);
            alert("Successfully marked applicant as P2 PASSED!");
            
        } else {
            console.error(`❌ [P2 Pass] API error: ${data.message}`);
            alert("Error updating applicant status: " + (data.message || "Unknown error"));
        }
    })
    .catch(error => {
        console.error("❌ [P2 Pass] Network error:", error);
        alert("Failed to update applicant status.");
    });
}

function p2rejectApplicant(applicantId) {
    console.log(`🔴 [P2 Reject] Starting reject action for applicantId: ${applicantId}`);
    
    if (!applicantId) {
        console.error('❌ [P2 Reject] Missing applicantId');
        alert("Error: Invalid Applicant ID");
        return;
    }

    // Make API call to update status
    fetch('/hr/markAsP2Failed', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ applicantId: applicantId }),
    })
    .then(response => {
        console.log(`📡 [P2 Reject] API response status: ${response.status}`);
        return response.json();
    })
    .then(data => {
        console.log('📡 [P2 Reject] API response data:', data);
        
        if (data.success) {
            // Record this in the pending changes
            if (!window.pendingP2StatusChanges) {
                window.pendingP2StatusChanges = {};
            }
            window.pendingP2StatusChanges[applicantId] = 'FAILED';
            
            // Move the row from awaiting to declared results
            moveP2RowToSection(applicantId, 'awaitingActionTable', 'declaredResultsTable');
            
            console.log(`✅ [P2 Reject] Successfully marked applicant ${applicantId} as P2 FAILED!`);
            alert("Successfully marked applicant as P2 FAILED!");
            
        } else {
            console.error(`❌ [P2 Reject] API error: ${data.message}`);
            alert("Error updating applicant status: " + (data.message || "Unknown error"));
        }
    })
    .catch(error => {
        console.error("❌ [P2 Reject] Network error:", error);
        alert("Failed to update applicant status.");
    });
}
// ============================
// P2 EMAIL MODAL FUNCTIONS
// ============================
function personalizeTemplate(template, applicant) {
    return template
        .replace(/{applicantName}/g, applicant.name)
        .replace(/{jobTitle}/g, applicant.jobTitle)
        .replace(/{companyName}/g, 'Company ABC');
}
function showP2PassedEmailModal() {
    console.log("📧 HR P2: Showing P2 passed applicants Gmail compose modal");

    // Remove existing modal if it exists
    const existingModal = document.getElementById('emailP2PassedModal');
    if (existingModal) {
        existingModal.remove();
    }

    // Create modal dynamically
    const modal = createP2EmailModalDynamically('emailP2PassedModal', 'P2', 'passed');

    setTimeout(() => {
        const recipientsList = document.getElementById('p2PassedRecipientsList');
        const recipientsCount = document.getElementById('p2PassedRecipientsCount');

        if (recipientsList && currentP2PassedApplicants.length > 0) {
            recipientsCount.textContent = currentP2PassedApplicants.length;

            recipientsList.innerHTML = currentP2PassedApplicants.map(applicant => `
                <div class="recipient-item">
                    <div class="recipient-name">${applicant.name}</div>
                    <div class="recipient-email">${applicant.email}</div>
                    <div class="recipient-job">${applicant.jobTitle}</div>
                </div>
            `).join('');

            console.log(`📊 HR P2: Populated ${currentP2PassedApplicants.length} passed recipients`);
        }

        const subjectElement = document.getElementById('p2PassedEmailSubject');
        const templateElement = document.getElementById('p2PassedEmailTemplate');

        if (subjectElement && templateElement) {
            const defaultSubject = "Great News! You've Advanced to Final Interview - Prime Infrastructure";
            const defaultTemplate = `Dear {applicantName},

Congratulations! We are pleased to inform you that you have successfully passed our HR interview process for the {jobTitle} position at {companyName}.

We were impressed with your qualifications, experience, and the responses you provided during the interview. You have demonstrated the skills and competencies we are looking for in this role.

🎉 Next Steps:
You will now advance to the final interview stage with our department head/senior management team. This is the final step in our recruitment process.

Our team will contact you within the next 2-3 business days to schedule your final interview. Please be prepared to discuss:
• Your technical expertise and experience in detail
• Your career goals and how they align with our company
• Specific scenarios and problem-solving approaches
• Your questions about the role and our organization

📋 What to Expect:
• Interview duration: 45-60 minutes
• Format: In-person/Virtual (we'll confirm the details)
• Participants: Department head and senior team members
• Focus: Technical competency and cultural fit assessment

We appreciate your continued interest in joining {companyName} and look forward to the next step in the process.

If you have any questions in the meantime, please don't hesitate to reach out to our HR team.

Best regards,
The {companyName} HR Team`;

            subjectElement.value = p2EmailTemplates.passed?.subject || defaultSubject;

            // Show template personalized for the first applicant in preview
            const previewApplicant = currentP2PassedApplicants[0];
            templateElement.value = personalizeTemplate(
                p2EmailTemplates.passed?.template || defaultTemplate,
                previewApplicant
            );

            console.log("✅ HR P2: Set subject and personalized template for first applicant");
        } else {
            console.error("❌ HR P2: Could not find subject or template elements");
        }

        document.getElementById('emailP2PassedModal').style.display = 'block';
        console.log("✅ HR P2: P2 passed email modal displayed");
    }, 100);
}
function showP2FailedEmailModal() {
    console.log("📧 HR P2: Showing P2 failed applicants Gmail compose modal");

    // Remove existing modal if it exists
    const existingModal = document.getElementById('emailP2FailedModal');
    if (existingModal) {
        existingModal.remove();
    }

    // Create modal dynamically
    const modal = createP2EmailModalDynamically('emailP2FailedModal', 'P2', 'failed');

    setTimeout(() => {
        const recipientsList = document.getElementById('p2FailedRecipientsList');
        const recipientsCount = document.getElementById('p2FailedRecipientsCount');

        if (recipientsList && currentP2FailedApplicants.length > 0) {
            recipientsCount.textContent = currentP2FailedApplicants.length;

            recipientsList.innerHTML = currentP2FailedApplicants.map(applicant => `
                <div class="recipient-item">
                    <div class="recipient-name">${applicant.name}</div>
                    <div class="recipient-email">${applicant.email}</div>
                    <div class="recipient-job">${applicant.jobTitle}</div>
                </div>
            `).join('');

            console.log(`📊 HR P2: Populated ${currentP2FailedApplicants.length} failed recipients`);
        }

        const subjectElement = document.getElementById('p2FailedEmailSubject');
        const templateElement = document.getElementById('p2FailedEmailTemplate');

        if (subjectElement && templateElement) {
            const defaultSubject = "Thank You for Your Interview - Prime Infrastructure";
            const defaultTemplate = `Dear {applicantName},

Thank you for taking the time to interview with us for the {jobTitle} position at {companyName}. We appreciate your interest in our organization and the effort you put into the interview process.

After careful consideration of all candidates, we have decided to move forward with another candidate whose qualifications more closely match our current requirements for this specific role.

This decision was not made lightly, as we were impressed with many aspects of your background and experience. We encourage you to apply for future opportunities that may be a better fit for your skills and career goals.

🌟 Moving Forward:
• Your information will remain in our candidate database for future opportunities
• We will notify you of relevant positions that match your profile
• Feel free to check our careers page regularly for new openings
• We welcome you to apply again for suitable roles

We wish you the best of luck in your job search and hope our paths may cross again in the future.

Thank you again for your interest in {companyName}.

Best regards,
The {companyName} HR Team`;

            subjectElement.value = p2EmailTemplates.failed?.subject || defaultSubject;

            // Preview with first applicant
            const previewApplicant = currentP2FailedApplicants[0];
            templateElement.value = personalizeTemplate(
                p2EmailTemplates.failed?.template || defaultTemplate,
                previewApplicant
            );

            console.log("✅ HR P2: Set subject and personalized template for first failed applicant");
        } else {
            console.error("❌ HR P2: Could not find failed subject or template elements");
        }

        document.getElementById('emailP2FailedModal').style.display = 'block';
        console.log("✅ HR P2: P2 failed email modal displayed");
    }, 100);
}

function createP2EmailModalDynamically(modalId, modalType, applicantType) {
    console.log(`🔧 HR P2: Creating ${modalId} dynamically with correct IDs`);
    
    // Remove existing modal if it exists
    const existingModal = document.getElementById(modalId);
    if (existingModal) {
        existingModal.remove();
    }
    
    const modal = document.createElement('div');
    modal.id = modalId;
    modal.className = 'modal';
    modal.style.display = 'none';
    
    const titleColor = applicantType === 'passed' ? '#28a745' : '#dc3545';
    const borderColor = applicantType === 'passed' ? '#28a745' : '#dc3545';
    const bgColor = applicantType === 'passed' ? '#d4edda' : '#f8d7da';
    const textColor = applicantType === 'passed' ? '#155724' : '#721c24';
    
    const titleText = applicantType === 'passed' 
        ? '✅ P2 Gmail Compose - Interview Advancement Email'
        : '❌ P2 Gmail Compose - Interview Notification Email';
    
    // Generate correct element IDs
    const subjectId = `p2${applicantType.charAt(0).toUpperCase() + applicantType.slice(1)}EmailSubject`;
    const templateId = `p2${applicantType.charAt(0).toUpperCase() + applicantType.slice(1)}EmailTemplate`;
    const recipientsCountId = `p2${applicantType.charAt(0).toUpperCase() + applicantType.slice(1)}RecipientsCount`;
    const recipientsListId = `p2${applicantType.charAt(0).toUpperCase() + applicantType.slice(1)}RecipientsList`;
    
    console.log(`🔧 HR P2: Using IDs - Subject: ${subjectId}, Template: ${templateId}`);
    
    modal.innerHTML = `
        <div class="modal-content" style="width: 85%; max-width: 900px;">
            <span class="close-button" onclick="closeModal('${modalId}')">&times;</span>
            <h2 style="color: ${titleColor};">${titleText}</h2>
            
            <!-- Progress Indicator -->
            <div style="background: linear-gradient(135deg, #e3f2fd, #bbdefb); padding: 15px; border-radius: 8px; margin: 15px 0; border-left: 5px solid #2196f3;">
                <h4 style="color: #1976d2; margin-top: 0; display: flex; align-items: center;">
                    <i class="fas fa-route" style="margin-right: 10px;"></i>
                    P2 Email Process Progress
                </h4>
                <div style="display: flex; align-items: center; color: #1976d2;">
                    <div class="progress-step ${applicantType === 'passed' ? 'active' : 'pending'}" style="flex: 1; text-align: center; padding: 8px; background: ${applicantType === 'passed' ? '#4caf50' : '#e0e0e0'}; color: ${applicantType === 'passed' ? 'white' : '#666'}; border-radius: 4px; margin: 0 2px;">
                        ${applicantType === 'passed' ? '🟢' : '⚪'} Step 1: Interview Advancement Emails
                    </div>
                    <div class="progress-step ${applicantType === 'failed' ? 'active' : 'pending'}" style="flex: 1; text-align: center; padding: 8px; background: ${applicantType === 'failed' ? '#4caf50' : '#e0e0e0'}; color: ${applicantType === 'failed' ? 'white' : '#666'}; border-radius: 4px; margin: 0 2px;">
                        ${applicantType === 'failed' ? '🟢' : '⚪'} Step 2: Notification Emails
                    </div>
                    <div class="progress-step pending" style="flex: 1; text-align: center; padding: 8px; background: #e0e0e0; color: #666; border-radius: 4px; margin: 0 2px;">
                        ⚪ Step 3: Database Update
                    </div>
                </div>
            </div>
            
            <div style="background-color: ${bgColor}; padding: 20px; border-radius: 8px; margin: 20px 0;">
                <h4 style="color: ${textColor}; margin-top: 0; display: flex; align-items: center;">
                    <i class="fas fa-users" style="margin-right: 10px;"></i>
                    Recipients (<span id="${recipientsCountId}">0</span> applicants):
                </h4>
                <div id="${recipientsListId}" style="color: ${textColor}; max-height: 180px; overflow-y: auto; background: rgba(255,255,255,0.3); padding: 15px; border-radius: 5px;">
                    <!-- Will be populated dynamically -->
                </div>
            </div>
            
            <div style="margin: 25px 0;">
                <label for="${subjectId}" style="display: block; font-weight: bold; margin-bottom: 8px;">
                    <i class="fas fa-tag" style="margin-right: 8px;"></i>Email Subject:
                </label>
                <input 
                    type="text" 
                    id="${subjectId}" 
                    style="width: 100%; padding: 12px; border: 2px solid ${borderColor}; border-radius: 6px; font-size: 16px;"
                    value=""
                >
            </div>
            
            <div style="margin: 25px 0;">
                <label for="${templateId}" style="display: block; font-weight: bold; margin-bottom: 8px;">
                    <i class="fas fa-edit" style="margin-right: 8px;"></i>Email Template:
                </label>
                <div style="margin: 10px 0; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
                    <small style="color: #6c757d;">
                        <strong>Available placeholders:</strong> 
                        <code>{applicantName}</code>, <code>{jobTitle}</code>, <code>{companyName}</code>
                    </small>
                </div>
                <textarea 
                    id="${templateId}" 
                    rows="14" 
                    style="width: 100%; padding: 15px; border: 2px solid ${borderColor}; border-radius: 6px; font-family: Arial, sans-serif; font-size: 14px; line-height: 1.5;"
                    placeholder="Email template will be loaded here..."
                ></textarea>
            </div>

            <div style="background: linear-gradient(135deg, #e7f3ff, #f0f8ff); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #007bff;">
                <h4 style="color: #0066cc; margin-top: 0; display: flex; align-items: center;">
                    <i class="fas fa-magic" style="margin-right: 10px; font-size: 20px;"></i>
                    Choose Your Sending Method
                </h4>
                <p style="color: #0066cc; margin-bottom: 0; line-height: 1.6;">
                    • <strong>Gmail Compose:</strong> Opens Gmail with pre-filled content (manual sending)<br>
                    • <strong>Preview & Edit:</strong> Review template before automatic sending<br>
                    • <strong>Send Automatically:</strong> Sends all emails via SMTP instantly
                </p>
            </div>
            
            <div class="modal-buttons" id="${modalId}Buttons">
                <button class="back-button" onclick="closeModal('${modalId}')">
                    <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
                </button>
                <button class="confirm-button" onclick="openGmailForP2${applicantType.charAt(0).toUpperCase() + applicantType.slice(1)}()" 
                        style="background: linear-gradient(135deg, #6c757d, #5a6268); margin-right: 10px;">
                    <i class="fab fa-google" style="margin-right: 8px;"></i>Gmail Compose
                </button>
                <button class="confirm-button" onclick="previewP2EmailTemplate('${applicantType}')" 
                        style="background: linear-gradient(135deg, #17a2b8, #138496); margin-right: 10px;">
                    <i class="fas fa-eye" style="margin-right: 8px;"></i>Preview & Edit
                </button>
                <button class="confirm-button" onclick="sendAutomatedP2Emails('${applicantType}')" 
                        style="background: linear-gradient(135deg, ${applicantType === 'passed' ? '#28a745, #20c997' : '#dc3545, #c82333'});" id="sendP2${applicantType.charAt(0).toUpperCase() + applicantType.slice(1)}EmailsBtn">
                    <i class="fas fa-paper-plane" style="margin-right: 8px;"></i>Send Automatically
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    console.log(`✅ HR P2: Modal created with correct IDs - ${subjectId}, ${templateId}`);
    return modal;
}
// ============================
// P2 EMAIL SENDING FUNCTIONS
// ============================
async function sendAutomatedP2Emails(type) {
    if (p2EmailSendingInProgress) {
        alert('Email sending is already in progress. Please wait.');
        return;
    }
    
    console.log(`📧 HR P2: Starting automated P2 email sending for: ${type}`);
    
    let applicants, subject, template;
    let subjectId, templateId;
    
    // Use correct IDs
    if (type === 'passed') {
        subjectId = 'p2PassedEmailSubject';
        templateId = 'p2PassedEmailTemplate';
        applicants = currentP2PassedApplicants;
    } else if (type === 'failed') {
        subjectId = 'p2FailedEmailSubject';
        templateId = 'p2FailedEmailTemplate';
        applicants = currentP2FailedApplicants;
    }
    
    console.log(`📧 HR P2: Looking for elements with IDs: ${subjectId}, ${templateId}`);
    
    const subjectElement = document.getElementById(subjectId);
    const templateElement = document.getElementById(templateId);
    
    if (!subjectElement || !templateElement) {
        console.error(`❌ HR P2: Missing elements for automated sending:`);
        console.log(`Subject element (${subjectId}):`, !!subjectElement);
        console.log(`Template element (${templateId}):`, !!templateElement);
        
        // List all elements with similar IDs for debugging
        const allElements = document.querySelectorAll('[id*="EmailSubject"], [id*="EmailTemplate"]');
        console.log('Available email-related elements:', Array.from(allElements).map(el => el.id));
        
        alert('Error: Could not find email template fields. Please try refreshing the page.');
        return;
    }
    
    subject = subjectElement.value;
    template = templateElement.value;
    
    if (!applicants || applicants.length === 0) {
        alert(`No ${type} applicants found to send emails to.`);
        return;
    }
    
    if (!subject || !template) {
        alert('Please fill in both subject and template fields.');
        return;
    }
    
    if (!confirm(`This will automatically send ${applicants.length} emails to ${type} applicants. Continue?`)) {
        return;
    }
    
    console.log(`📧 HR P2: Confirmed sending ${applicants.length} P2 ${type} emails`);
    
    // Close current modal
    const modalMap = {
        'passed': 'emailP2PassedModal',
        'failed': 'emailP2FailedModal'
    };
    
    closeModal(modalMap[type]);
    
    // Show progress modal
    showP2EmailSendingProgress(type, applicants.length);
    
    // Send emails using batch function
    await sendP2EmailBatch(applicants, subject, template, type);
}


function showP2EmailSendingProgress(type, totalCount) {
    console.log(`📧 HR P2: Creating progress modal for P2 ${type} emails`);
    
    // Remove any existing progress modal
    const existingModal = document.getElementById('p2EmailProgressModal');
    if (existingModal) {
        existingModal.remove();
    }
    
    const progressModal = document.createElement('div');
    progressModal.id = 'p2EmailProgressModal';
    progressModal.className = 'modal';
    progressModal.style.display = 'block';
    
    const titleText = type === 'passed' ? 'Interview Advancement' : 'Interview Notification';
    
    progressModal.innerHTML = `
        <div class="modal-content" style="width: 70%; max-width: 600px;">
            <h2 style="text-align: center; color: #007bff;">
                <i class="fas fa-paper-plane" style="color: #28a745; margin-right: 10px;"></i>
                Sending P2 ${titleText} Emails
            </h2>
            
            <div style="margin: 30px 0; text-align: center;">
                <div style="font-size: 48px; color: #28a745; margin-bottom: 20px;">
                    <i class="fas fa-spinner fa-spin"></i>
                </div>
                <p style="font-size: 18px; margin-bottom: 20px;">Sending P2 emails to ${totalCount} applicant(s)...</p>
                
                <div style="background-color: #e9ecef; border-radius: 10px; height: 20px; margin: 20px 0; overflow: hidden;">
                    <div id="p2EmailProgressBar" style="background: linear-gradient(135deg, #28a745, #20c997); height: 100%; width: 0%; transition: width 0.3s ease;"></div>
                </div>
                
                <div id="p2EmailProgressText" style="font-size: 14px; color: #6c757d;">
                    Initializing P2 email sending...
                </div>
                
                <div id="p2EmailProgressDetails" style="margin-top: 20px; background-color: #f8f9fa; padding: 15px; border-radius: 5px; text-align: left; max-height: 200px; overflow-y: auto;">
                    <div style="font-weight: bold; margin-bottom: 10px;">📋 P2 Sending Progress:</div>
                    <div id="p2EmailProgressLog"></div>
                </div>
            </div>
            
            <div style="background: linear-gradient(135deg, #fff3cd, #ffeaa7); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #f39c12;">
                <h4 style="color: #856404; margin-top: 0; display: flex; align-items: center;">
                    <i class="fas fa-info-circle" style="margin-right: 10px;"></i>
                    Please Wait
                </h4>
                <p style="color: #856404; margin-bottom: 0; line-height: 1.6;">
                    P2 emails are being sent automatically. This modal will update when the process is complete.
                </p>
            </div>
            
            <div class="modal-buttons" style="display: none;" id="p2EmailProgressButtons">
                <!-- Buttons will be shown after completion -->
            </div>
        </div>
    `;
    
    document.body.appendChild(progressModal);
    console.log(`📧 HR P2: Progress modal created with ID: ${progressModal.id}`);
}

async function sendP2EmailBatch(applicants, subject, template, type) {
    console.log(`📧 HR P2: Starting email batch for ${type} - ${applicants.length} applicants`);
    p2EmailSendingInProgress = true;
    
    const progressBar = document.getElementById('p2EmailProgressBar');
    const progressText = document.getElementById('p2EmailProgressText');
    const progressLog = document.getElementById('p2EmailProgressLog');
    
    let sentCount = 0;
    let errorCount = 0;
    const errors = [];
    
    const updateProgress = (current, total, currentApplicant, success) => {
        const percentage = Math.round((current / total) * 100);
        if (progressBar) {
            progressBar.style.width = percentage + '%';
        }
        if (progressText) {
            progressText.textContent = `Sent ${sentCount} of ${total} P2 emails (${errorCount} errors)`;
        }
        
        const status = success ? '✅' : '❌';
        const statusText = success ? 'Sent' : 'Failed';
        if (progressLog) {
            progressLog.innerHTML += `<div style="margin: 2px 0; font-size: 12px;">${status} ${currentApplicant}: ${statusText}</div>`;
            progressLog.scrollTop = progressLog.scrollHeight;
        }
    };
    
    try {
        console.log(`📧 HR P2: Processing ${applicants.length} applicants for ${type} emails`);
        
        for (let i = 0; i < applicants.length; i++) {
            const applicant = applicants[i];
            
            try {
                console.log(`📧 HR P2: Sending email ${i + 1}/${applicants.length} to: ${applicant.email}`);
                
                const response = await fetch('/hr/send-automated-email', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        email: applicant.email,
                        subject: subject,
                        template: template,
                        applicantName: applicant.name,
                        jobTitle: applicant.jobTitle,
                        phase: 'P2',
                        type: type
                    }),
                });
                
                const result = await response.json();
                
                if (result.success) {
                    sentCount++;
                    console.log(`✅ HR P2: Email ${i + 1} sent successfully to ${applicant.email}`);
                    updateProgress(i + 1, applicants.length, applicant.name, true);
                } else {
                    errorCount++;
                    console.error(`❌ HR P2: Email ${i + 1} failed to ${applicant.email}: ${result.message}`);
                    errors.push(`${applicant.name} (${applicant.email}): ${result.message || 'Unknown error'}`);
                    updateProgress(i + 1, applicants.length, applicant.name, false);
                }
                
                // Small delay to avoid overwhelming the server
                await new Promise(resolve => setTimeout(resolve, 500));
                
            } catch (error) {
                console.error(`❌ HR P2: Network error sending email to ${applicant.email}:`, error);
                errorCount++;
                errors.push(`${applicant.name} (${applicant.email}): Network error - ${error.message}`);
                updateProgress(i + 1, applicants.length, applicant.name, false);
            }
        }
        
        console.log(`📧 HR P2: Batch complete - Sent: ${sentCount}, Failed: ${errorCount}`);
        
        // Store results
        if (type === 'passed') {
            p2EmailSendingState.passedSent = true;
            p2EmailSendingState.currentStep = 'passed-complete';
            p2EmailSendingState.passedResults = { sent: sentCount, failed: errorCount, errors: errors };
        } else {
            p2EmailSendingState.failedSent = true;
            p2EmailSendingState.currentStep = 'failed-complete';
            p2EmailSendingState.failedResults = { sent: sentCount, failed: errorCount, errors: errors };
        }
        
        console.log(`📧 HR P2: Results stored for P2 ${type}`);
        
        // Show completion
        setTimeout(() => {
            showP2EmailSendingCompletion(sentCount, errorCount, errors, type);
        }, 1000);
        
    } catch (error) {
        console.error('❌ HR P2: Critical error in email batch sending:', error);
        
        // Show error in progress modal
        if (progressText) {
            progressText.innerHTML = `<div style="color: #dc3545; font-weight: bold;">❌ Error: ${error.message}</div>`;
        }
        
        p2EmailSendingInProgress = false;
        
        // Remove progress modal after error
        setTimeout(() => {
            const progressModal = document.getElementById('p2EmailProgressModal');
            if (progressModal) {
                progressModal.remove();
            }
            alert('Critical error sending P2 emails: ' + error.message);
        }, 2000);
    }
}


function showP2EmailSendingCompletion(sentCount, errorCount, errors, type) {
    console.log(`📧 HR P2: Email sending completion - ${type} - Sent: ${sentCount}, Errors: ${errorCount}`);
    
    p2EmailSendingInProgress = false;
    
    // Find the progress modal
    let progressModal = document.getElementById('p2EmailProgressModal') || 
                       document.querySelector('.modal[style*="display: block"]');
    
    if (!progressModal) {
        console.error('❌ HR P2: No progress modal found for completion update');
        createP2CompletionModalFromScratch(sentCount, errorCount, type);
        return;
    }
    
    // Update the modal content
    const progressText = progressModal.querySelector('#p2EmailProgressText') || 
                        progressModal.querySelector('[id*="ProgressText"]');
    
    const progressButtons = progressModal.querySelector('#p2EmailProgressButtons') || 
                           progressModal.querySelector('[id*="ProgressButtons"]') ||
                           progressModal.querySelector('.modal-buttons');
    
    const progressBar = progressModal.querySelector('#p2EmailProgressBar') || 
                       progressModal.querySelector('[id*="ProgressBar"]');
    
    const spinner = progressModal.querySelector('.fa-spinner');
    
    // Hide spinner
    if (spinner) {
        spinner.style.display = 'none';
    }
    
    // Update progress bar to 100%
    if (progressBar) {
        progressBar.style.width = '100%';
        progressBar.style.background = '#28a745';
    }
    
    // Update text
    if (progressText) {
        if (errorCount === 0) {
            progressText.innerHTML = `<div style="color: #28a745; font-weight: bold; font-size: 18px;">✅ All ${sentCount} P2 ${type} emails sent successfully!</div>`;
        } else {
            progressText.innerHTML = `<div style="color: #ffc107; font-weight: bold; font-size: 18px;">⚠️ ${sentCount} P2 ${type} emails sent, ${errorCount} failed</div>`;
        }
    }
    
    // Determine what's next for P2
    const hasPassedApplicants = currentP2PassedApplicants?.length > 0;
    const hasFailedApplicants = currentP2FailedApplicants?.length > 0;
    
    let nextStep = '';
    let nextAction = '';
    
    if (type === 'passed' && hasFailedApplicants && !p2EmailSendingState.failedSent) {
        nextStep = 'Proceed with Notification Emails';
        nextAction = 'proceedWithP2NextStep';
    } else {
        nextStep = 'Proceed to Database Update';
        nextAction = 'showP2DatabaseUpdateConfirmationModal';
    }
    
    // Update buttons
    if (progressButtons) {
        const buttonHtml = `
            <button class="back-button" onclick="cancelP2EmailProcess()" style="background: #6c757d; color: white; border: none; padding: 12px 20px; border-radius: 5px; cursor: pointer; margin-right: 10px;">
                <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel Process
            </button>
            <button class="confirm-button" onclick="${nextAction}('${type}')" 
                    style="background: linear-gradient(135deg, #28a745, #20c997); color: white; border: none; padding: 12px 25px; border-radius: 5px; cursor: pointer; font-size: 16px;">
                <i class="fas fa-arrow-right" style="margin-right: 8px;"></i>
                ${nextStep}
            </button>
        `;
        
        progressButtons.innerHTML = buttonHtml;
        progressButtons.style.display = 'flex';
        progressButtons.style.justifyContent = 'center';
        progressButtons.style.gap = '10px';
        progressButtons.style.marginTop = '20px';
    }
    
    console.log(`✅ HR P2: Modal updated successfully for ${type}`);
}
function createP2CompletionModalFromScratch(sentCount, errorCount, type) {
    console.log(`🔧 HR P2: Creating completion modal from scratch for P2 ${type}`);
    
    // Remove any existing modals first
    const existingModals = document.querySelectorAll('.modal');
    existingModals.forEach(modal => {
        if (modal.id.includes('P2') || modal.id.includes('p2')) {
            modal.remove();
        }
    });
    
    const completionModal = document.createElement('div');
    completionModal.className = 'modal';
    completionModal.style.display = 'block';
    completionModal.id = 'p2EmailCompletionModal';
    
    const titleText = type === 'passed' ? 'Interview Advancement' : 'Interview Notification';
    
    completionModal.innerHTML = `
        <div class="modal-content" style="width: 70%; max-width: 600px; position: relative; background: white; margin: 5% auto; padding: 0; border-radius: 10px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
            <div style="padding: 30px; text-align: center;">
                <h2 style="color: #007bff; margin-bottom: 20px;">
                    <i class="fas fa-check-circle" style="color: #28a745; margin-right: 10px; font-size: 48px;"></i>
                    <br>P2 Email Sending Complete!
                </h2>
                
                <div style="font-size: 18px; margin: 20px 0; color: #28a745; font-weight: bold;">
                    ✅ Successfully sent ${sentCount} P2 ${titleText} email${sentCount > 1 ? 's' : ''}!
                </div>
                
                ${errorCount > 0 ? `
                <div style="color: #dc3545; margin: 15px 0;">
                    ⚠️ ${errorCount} email${errorCount > 1 ? 's' : ''} failed to send
                </div>` : ''}
                
                <div style="background: linear-gradient(135deg, #d4edda, #c3e6cb); padding: 20px; border-radius: 10px; margin: 20px 0;">
                    <h4 style="color: #155724; margin-top: 0;">📊 P2 Email Summary:</h4>
                    <ul style="color: #155724; text-align: left; margin: 0;">
                        <li><strong>${titleText} emails sent:</strong> ${sentCount}</li>
                        <li><strong>Phase:</strong> P2</li>
                        <li><strong>Status:</strong> ${errorCount === 0 ? 'All emails sent successfully' : 'Some emails failed'}</li>
                    </ul>
                </div>
                
                <div style="background: linear-gradient(135deg, #fff3cd, #ffeaa7); padding: 20px; border-radius: 10px; margin: 20px 0;">
                    <h4 style="color: #856404; margin-top: 0;">📋 Next Step:</h4>
                    <p style="color: #856404; margin: 0;">
                        Click "Proceed to Database Update" below to finalize the P2 applicant statuses in your system.
                    </p>
                </div>
                
                <div style="display: flex; justify-content: center; gap: 15px; margin-top: 30px;">
                    <button onclick="cancelP2EmailProcess()" 
                            style="background: #6c757d; color: white; border: none; padding: 12px 20px; border-radius: 5px; cursor: pointer;">
                        <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
                    </button>
                    <button onclick="showP2DatabaseUpdateConfirmationModal()" 
                            style="background: linear-gradient(135deg, #28a745, #20c997); color: white; border: none; padding: 12px 25px; border-radius: 5px; cursor: pointer; font-size: 16px;">
                        <i class="fas fa-database" style="margin-right: 8px;"></i>
                        Proceed to Database Update
                    </button>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(completionModal);
    console.log(`✅ HR P2: Completion modal created and displayed for P2 ${type}`);
}



function proceedWithP2NextStep(completedType) {
    console.log(`📧 HR P2: Proceeding with next step after ${completedType} emails`);
    
    // Close progress modal
    const progressModal = document.getElementById('p2EmailProgressModal');
    if (progressModal) {
        progressModal.remove();
    }
    
    p2EmailSendingInProgress = false;
    
    // Determine next step for P2
    const hasPassedApplicants = currentP2PassedApplicants?.length > 0;
    const hasFailedApplicants = currentP2FailedApplicants?.length > 0;
    
    if (completedType === 'passed' && hasFailedApplicants && !p2EmailSendingState.failedSent) {
        // Show failed email modal next
        console.log('📧 HR P2: Showing failed email modal next');
        setTimeout(() => {
            showP2FailedEmailModal();
        }, 500);
    } else {
        // Show database update confirmation
        console.log('📧 HR P2: Showing database update confirmation');
        setTimeout(() => {
            showP2DatabaseUpdateConfirmationModal();
        }, 500);
    }
}


function showP2DatabaseUpdateConfirmationModal() {
    console.log('📧 HR P2: Showing P2 database update confirmation modal');
    
    const updateModal = document.createElement('div');
    updateModal.className = 'modal';
    updateModal.style.display = 'block';
    updateModal.id = 'p2DatabaseUpdateConfirmationModal';
    
    const passedResults = p2EmailSendingState.passedResults || { sent: 0, failed: 0 };
    const failedResults = p2EmailSendingState.failedResults || { sent: 0, failed: 0 };
    const totalSent = passedResults.sent + failedResults.sent;
    const totalErrors = passedResults.failed + failedResults.failed;
    
    updateModal.innerHTML = `
        <div class="modal-content" style="width: 70%; max-width: 600px;">
            <h2 style="text-align: center; color: #007bff;">
                <i class="fas fa-database" style="color: #28a745; margin-right: 10px;"></i>
                P2 Email Process Complete - Ready for Database Update
            </h2>
            
            <div style="margin: 30px 0; text-align: center;">
                <div style="font-size: 64px; color: #28a745; margin-bottom: 20px;">
                    <i class="fas fa-check-double"></i>
                </div>
                <p style="font-size: 18px; margin-bottom: 20px;">
                    All P2 emails have been sent successfully!
                </p>
                
                <div style="background-color: #d4edda; padding: 20px; border-radius: 10px; margin: 20px 0; text-align: left;">
                    <h4 style="color: #155724; margin-top: 0;">📊 Complete P2 Email Summary:</h4>
                    <ul style="color: #155724; margin-bottom: 0;">
                        ${p2EmailSendingState.passedSent ? `<li><strong>Interview advancement emails sent:</strong> ${passedResults.sent}</li>` : ''}
                        ${p2EmailSendingState.failedSent ? `<li><strong>Interview notification emails sent:</strong> ${failedResults.sent}</li>` : ''}
                        <li><strong>Total P2 emails processed:</strong> ${totalSent}</li>
                        ${totalErrors > 0 ? `<li style="color: #dc3545;"><strong>Total sending errors:</strong> ${totalErrors}</li>` : ''}
                    </ul>
                </div>
            </div>
            
            <div style="background: linear-gradient(135deg, #fff3cd, #ffeaa7); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #f39c12;">
                <h4 style="color: #856404; margin-top: 0; display: flex; align-items: center;">
                    <i class="fas fa-exclamation-triangle" style="margin-right: 10px;"></i>
                    Final Step Required
                </h4>
                <p style="color: #856404; margin-bottom: 0; line-height: 1.6;">
                    Click "Update P2 Database" below to finalize the P2 applicant statuses in your system. This will mark all passed and failed applicants accordingly.
                </p>
            </div>
            
            <div class="modal-buttons">
                <button class="back-button" onclick="closeModal('p2DatabaseUpdateConfirmationModal')">
                    <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
                </button>
                <button class="confirm-button" onclick="executeP2DatabaseUpdate()" 
                        style="background: linear-gradient(135deg, #28a745, #20c997); font-size: 16px; padding: 12px 25px;">
                    <i class="fas fa-database" style="margin-right: 8px;"></i>
                    Update P2 Database
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(updateModal);
    console.log('📧 HR P2: P2 database update confirmation modal displayed');
}



function executeP2DatabaseUpdate() {
    console.log('📧 [HR] Executing P2 database update using existing finalizeP2Review...');
    
    if (!p2EmailsToUpdate || (!p2EmailsToUpdate.passed.length && !p2EmailsToUpdate.failed.length)) {
        alert('No P2 applicant status updates to process.');
        return;
    }
    
    const updateButton = event.target;
    const originalText = updateButton.textContent;
    updateButton.textContent = 'Updating P2 Database...';
    updateButton.disabled = true;
    
    // Use your existing finalizeP2Review endpoint (without getEmailData flag)
    fetch('/hr/finalizeP2Review', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            passedApplicantIds: p2EmailsToUpdate.passed,
            failedApplicantIds: p2EmailsToUpdate.failed
        }),
    })
    .then(response => {
        console.log(`📡 [HR] P2 Database update response status: ${response.status}`);
        return response.json();
    })
    .then(data => {
        console.log('📡 [HR] P2 Database update response data:', data);
        
        if (data.success) {
            // Close modal
            closeModal('p2DatabaseUpdateConfirmationModal');
            
            const passedResults = p2EmailSendingState.passedResults || { sent: 0 };
            const failedResults = p2EmailSendingState.failedResults || { sent: 0 };
            
            alert(`P2 Process Complete!\n\nDatabase Updates:\n- ${data.passedCount || 0} passed applicants\n- ${data.failedCount || 0} failed applicants\n\nEmails Sent:\n- ${passedResults.sent} interview advancement emails\n- ${failedResults.sent} interview notification emails\n\nAll P2 applicants have been processed successfully!\n\nNote: Passed applicants received chatbot messages with Calendly scheduling links.`);
            
            // Reset state
            p2EmailSendingState = {
                phase: 'P2',
                passedSent: false,
                failedSent: false,
                currentStep: 'initial',
                passedResults: null,
                failedResults: null
            };
            
            // Clear data
            currentP2PassedApplicants = [];
            currentP2FailedApplicants = [];
            p2EmailsToUpdate = { passed: [], failed: [] };
            
            // Reset global flag
            p2EmailSendingInProgress = false;
            
            // Refresh view
            setTimeout(() => {
                const activeFilter = document.querySelector(".filter-button.active");
                if (activeFilter) {
                    activeFilter.click();
                } else {
                    document.getElementById("filter-all").click();
                }
            }, 500);
        } else {
            throw new Error(data.message || 'Failed to update P2 statuses');
        }
    })
    .catch(error => {
        console.error('❌ [HR] Error updating P2 statuses:', error);
        alert('Error updating P2 applicant statuses: ' + error.message);
        
        updateButton.textContent = originalText;
        updateButton.disabled = false;
    });
}


// ============================
// P2 GMAIL INTEGRATION FUNCTIONS
// ============================

function openGmailForP2Passed() {
    console.log("🔗 HR P2: Opening Gmail for P2 passed applicants");
    
    const subjectElement = document.getElementById('p2PassedEmailSubject');
    const templateElement = document.getElementById('p2PassedEmailTemplate');
    
    if (!subjectElement || !templateElement) {
        console.error("❌ HR P2: Could not find subject or template elements for Gmail");
        alert("Error: Could not find email template fields.");
        return;
    }
    
    const subject = subjectElement.value;
    const template = templateElement.value;
    
    if (!subject || !template) {
        alert("Please fill in both subject and template fields.");
        return;
    }
    
    if (!confirm(`This will open Gmail with ${currentP2PassedApplicants.length} P2 passed applicants in the "To:" field. Continue?`)) {
        return;
    }
    
    // Build Gmail compose URL
    const gmailUrl = buildP2GmailComposeUrl(currentP2PassedApplicants, subject, template);
    
    console.log('🔗 HR P2: Opening Gmail for P2 passed applicants:', gmailUrl);
    
    // Open Gmail in new tab
    const gmailWindow = window.open(gmailUrl, '_blank');
    
    if (!gmailWindow) {
        alert('Please allow pop-ups for this site to open Gmail compose window.');
        return;
    }
    
    // Close the modal
    closeModal('emailP2PassedModal');
    
    // If there are also failed applicants, show their modal next
    if (currentP2FailedApplicants.length > 0) {
        setTimeout(() => {
            showP2FailedEmailModal();
        }, 1000);
    } else {
        // Show status update modal if no failed applicants
        setTimeout(() => {
            showP2StatusUpdateModal();
        }, 2000);
    }
}

function openGmailForP2Failed() {
    console.log("🔗 HR P2: Opening Gmail for P2 failed applicants");
    
    const subjectElement = document.getElementById('p2FailedEmailSubject');
    const templateElement = document.getElementById('p2FailedEmailTemplate');
    
    if (!subjectElement || !templateElement) {
        console.error("❌ HR P2: Could not find subject or template elements for Gmail");
        alert("Error: Could not find email template fields.");
        return;
    }
    
    const subject = subjectElement.value;
    const template = templateElement.value;
    
    if (!subject || !template) {
        alert("Please fill in both subject and template fields.");
        return;
    }
    
    if (!confirm(`This will open Gmail with ${currentP2FailedApplicants.length} P2 failed applicants in the "To:" field. Continue?`)) {
        return;
    }
    
    // Build Gmail compose URL
    const gmailUrl = buildP2GmailComposeUrl(currentP2FailedApplicants, subject, template);
    
    console.log('🔗 HR P2: Opening Gmail for P2 failed applicants:', gmailUrl);
    
    // Open Gmail in new tab
    const gmailWindow = window.open(gmailUrl, '_blank');
    
    if (!gmailWindow) {
        alert('Please allow pop-ups for this site to open Gmail compose window.');
        return;
    }
    
    // Close the modal and show status update modal
    closeModal('emailP2FailedModal');
    
    // Show status update modal
    setTimeout(() => {
        showP2StatusUpdateModal();
    }, 2000);
}

// Build Gmail compose URL for P2 with pre-filled data

function buildP2GmailComposeUrl(applicants, subject, template) {
    console.log(`🔗 HR P2: Building Gmail URL for ${applicants.length} P2 applicants`);
    
    // Extract all email addresses
    const emailAddresses = applicants.map(applicant => applicant.email).join(',');
    
    // Process template for multiple recipients
    let processedTemplate = template;
    if (applicants.length > 0) {
        if (applicants.length > 1) {
            processedTemplate = template
                .replace(/\{applicantName\}/g, '[Recipient Name]')
                .replace(/\{jobTitle\}/g, '[Position Applied]')
                .replace(/\{companyName\}/g, 'Prime Infrastructure');
        } else {
            processedTemplate = template
                .replace(/\{applicantName\}/g, applicants[0].name)
                .replace(/\{jobTitle\}/g, applicants[0].jobTitle)
                .replace(/\{companyName\}/g, 'Prime Infrastructure');
        }
    }
    
    const plainTextBody = htmlToPlainText(processedTemplate);
    
    // Use account-specific subdomain approach
    const specificAccount = 'recruitmentprime7@gmail.com';
    const gmailUrl = `https://mail.google.com/mail/u/0/?authuser=${encodeURIComponent(specificAccount)}&view=cm&to=${encodeURIComponent(emailAddresses)}&subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(plainTextBody)}`;
    
    console.log('🔥 HR P2: P2 Gmail URL:', gmailUrl);
    
    return gmailUrl;
}

// Convert HTML template to plain text for P2
function htmlToPlainText(html) {
    // Create a temporary div to parse HTML
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = html;
    
    // Remove script and style elements
    const scripts = tempDiv.querySelectorAll('script, style');
    scripts.forEach(element => element.remove());
    
    // Get text content and clean it up
    let plainText = tempDiv.textContent || tempDiv.innerText || '';
    
    // Clean up extra whitespace and line breaks
    plainText = plainText
        .replace(/\s+/g, ' ')           // Replace multiple spaces with single space
        .replace(/\n\s*\n/g, '\n\n')   // Replace multiple line breaks with double line break
        .trim();
    
    // Add some basic formatting for better readability in plain text
    plainText = plainText
        .replace(/Dear\s+/gi, '\nDear ')
        .replace(/Best regards/gi, '\n\nBest regards')
        .replace(/Thank you/gi, '\n\nThank you')
        .replace(/Congratulations/gi, '\n\nCongratulations')
        .replace(/What's Next\?/gi, '\n\nWhat\'s Next?')
        .replace(/•/g, '\n• ')
        .replace(/- /g, '\n- ');
    
    return plainText;
}

// Show P2 status update modal

function showP2StatusUpdateModal() {
    console.log('📧 HR P2: Showing P2 status update modal');
    
    const statusModal = document.createElement('div');
    statusModal.className = 'modal';
    statusModal.style.display = 'block';
    statusModal.id = 'p2StatusUpdateModal';
    
    statusModal.innerHTML = `
        <div class="modal-content" style="width: 70%; max-width: 600px;">
            <h2 style="text-align: center; color: #007bff;">
                <i class="fab fa-google" style="color: #db4437; margin-right: 10px;"></i>
                P2 Gmail Compose Opened
            </h2>
            
            <div style="margin: 30px 0; text-align: center;">
                <div style="font-size: 64px; color: #db4437; margin-bottom: 20px;">
                    <i class="fab fa-google"></i>
                </div>
                <p style="font-size: 18px; margin-bottom: 20px;">Gmail compose window has been opened in a new tab with your P2 email pre-filled.</p>
                
                <div style="background-color: #e3f2fd; padding: 25px; border-radius: 10px; margin: 25px 0; border-left: 5px solid #2196f3;">
                    <h4 style="color: #1976d2; margin-top: 0;">📋 Next Steps:</h4>
                    <ol style="text-align: left; margin: 15px 0; color: #1976d2; line-height: 1.8;">
                        <li><strong>Switch to Gmail tab</strong> - Check if Gmail opened correctly</li>
                        <li><strong>Review recipient list</strong> - Verify all emails are in "To:" field</li>
                        <li><strong>Check subject line</strong> - Modify if needed</li>
                        <li><strong>Review email content</strong> - Make final adjustments</li>
                        <li><strong>Send emails</strong> - Click Gmail's send button</li>
                        <li><strong>Return here</strong> - Click "Update Database" below</li>
                    </ol>
                </div>
            </div>
            
            <div style="background: linear-gradient(135deg, #fff3cd, #ffeaa7); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #f39c12;">
                <h4 style="color: #856404; margin-top: 0; display: flex; align-items: center;">
                    <i class="fas fa-exclamation-triangle" style="margin-right: 10px;"></i>
                    Important
                </h4>
                <p style="color: #856404; margin-bottom: 0; line-height: 1.6;">
                    <strong>After sending emails in Gmail</strong>, return here and click "Update Database" to finalize the P2 applicant statuses in your system.
                </p>
            </div>
            
            <div class="modal-buttons">
                <button class="back-button" onclick="closeModal('p2StatusUpdateModal')">
                    <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel Process
                </button>
                <button class="confirm-button" onclick="updateP2ApplicantStatuses()" 
                        style="background: linear-gradient(135deg, #28a745, #20c997); font-size: 16px; padding: 12px 25px;">
                    <i class="fas fa-database" style="margin-right: 8px;"></i>
                    Update Database
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(statusModal);
}


// Update P2 applicant statuses in database after emails are sent via Gmail



function updateP2ApplicantStatuses() {
    if (!confirm('Have you successfully sent the P2 emails via Gmail? This will update the applicant statuses in the database.')) {
        return;
    }
    
    console.log('📊 [HR] Updating P2 applicant statuses using existing finalizeP2Review...');
    console.log('✅ [HR] Passed applicantIds:', p2EmailsToUpdate.passed);
    console.log('❌ [HR] Failed applicantIds:', p2EmailsToUpdate.failed);
    
    // Show loading state
    const updateButton = document.querySelector('#p2StatusUpdateModal .confirm-button');
    const originalText = updateButton.textContent;
    updateButton.textContent = 'Updating Database...';
    updateButton.disabled = true;
    
    // Use your existing finalizeP2Review endpoint (without getEmailData flag)
    fetch('/hr/finalizeP2Review', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            passedApplicantIds: p2EmailsToUpdate.passed,
            failedApplicantIds: p2EmailsToUpdate.failed
        }),
    })
    .then(response => {
        console.log(`📡 [HR] API response status: ${response.status}`);
        return response.json();
    })
    .then(data => {
        console.log('📡 [HR] API response data:', data);
        
        if (data.success) {
            alert(`P2 applicant statuses updated successfully!\n\nUpdated:\n- ${data.passedCount || 0} passed applicants (with Calendly links)\n- ${data.failedCount || 0} failed applicants\n\nNote: Passed applicants received chatbot messages for final interview scheduling.`);
            
            // Close modal
            closeModal('p2StatusUpdateModal');
            
            // Clear global variables
            currentP2PassedApplicants = [];
            currentP2FailedApplicants = [];
            p2EmailsToUpdate = { passed: [], failed: [] };
            
            console.log('✅ [HR] P2 status update completed successfully');
            
            // Refresh the view
            setTimeout(() => {
                const activeFilter = document.querySelector(".filter-button.active");
                if (activeFilter) {
                    activeFilter.click();
                } else {
                    document.getElementById("filter-all").click();
                }
            }, 500);
        } else {
            throw new Error(data.message || 'Failed to update P2 statuses');
        }
    })
    .catch(error => {
        console.error('❌ [HR] Error updating P2 statuses:', error);
        alert('Error updating P2 applicant statuses: ' + error.message);
        
        // Reset button state
        updateButton.textContent = originalText;
        updateButton.disabled = false;
    });
}

// ============================
// P2 EMAIL PREVIEW FUNCTION
// ============================
function previewP2EmailTemplate(type) {
    console.log(`📧 HR P2: Previewing P2 ${type} email template with formatting`);
    
    let subject, template, applicants;
    let subjectId, templateId;
    
    if (type === 'passed') {
        subjectId = 'p2PassedEmailSubject';
        templateId = 'p2PassedEmailTemplate';
        applicants = currentP2PassedApplicants;
    } else if (type === 'failed') {
        subjectId = 'p2FailedEmailSubject';
        templateId = 'p2FailedEmailTemplate';
        applicants = currentP2FailedApplicants;
    }
    
    // Get elements with null checks
    const subjectElement = document.getElementById(subjectId);
    const templateElement = document.getElementById(templateId);
    
    if (!subjectElement || !templateElement) {
        console.error(`Missing HR P2 elements: subject=${subjectId}, template=${templateId}`);
        alert('Error: Could not find P2 email template fields. Please try refreshing the page.');
        return;
    }
    
    subject = subjectElement.value;
    template = templateElement.value;
    
    if (!subject || !template) {
        alert('Please fill in both subject and template fields.');
        return;
    }
    
    if (!applicants || applicants.length === 0) {
        alert('No P2 applicants found for preview.');
        return;
    }
    
    // Use first applicant for preview
    const sampleApplicant = applicants[0];
    
    // Process template while preserving formatting
    const processedTemplate = processEmailTemplateWithFormatting(
        template, 
        sampleApplicant.name, 
        sampleApplicant.jobTitle, 
        'Prime Infrastructure'
    );
    
    // Create preview modal
    const previewModal = document.createElement('div');
    previewModal.className = 'modal';
    previewModal.style.display = 'block';
    previewModal.innerHTML = `
        <div class="modal-content" style="width: 90%; max-width: 800px;">
            <span class="close-button" onclick="this.closest('.modal').remove()">&times;</span>
            <h2>📧 P2 Email Preview - ${type.charAt(0).toUpperCase() + type.slice(1)}</h2>
            
            <div style="margin: 20px 0;">
                <h4>Recipients: ${applicants.length} P2 applicant(s)</h4>
                <p><strong>Subject:</strong> ${subject}</p>
            </div>
            
            <div style="border: 2px solid #ddd; border-radius: 8px; padding: 20px; background-color: #f9f9f9; margin: 20px 0;">
                <h4 style="margin-top: 0; color: #124A5C;">📝 P2 Email Content Preview (with formatting):</h4>
                <div style="white-space: pre-wrap; font-family: Arial, sans-serif; line-height: 1.6; background: white; padding: 15px; border-radius: 4px; border: 1px solid #ddd;">
${processedTemplate}
                </div>
            </div>
            
            <div style="background-color: #e8f5e8; padding: 15px; border-radius: 5px; margin: 20px 0;">
                <h4 style="color: #2e7d32; margin-top: 0;">✅ P2 Formatting Preserved:</h4>
                <ul style="color: #2e7d32; margin-bottom: 0;">
                    <li>Line breaks and spacing will be maintained</li>
                    <li>Paragraph structure will be preserved</li>
                    <li>${applicants.length} P2 recipient(s) will receive this formatted email</li>
                    <li>All placeholders have been replaced with actual data</li>
                </ul>
            </div>
            
            <div class="modal-buttons">
                <button class="back-button" onclick="this.closest('.modal').remove()">
                    <i class="fas fa-times" style="margin-right: 5px;"></i>Close Preview
                </button>
                <button class="confirm-button" onclick="this.closest('.modal').remove(); sendAutomatedP2Emails('${type}')" 
                        style="background: linear-gradient(135deg, #28a745, #20c997);">
                    <i class="fas fa-paper-plane" style="margin-right: 8px;"></i>Send P2 Emails Now
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(previewModal);
}


// ============================
// UTILITY FUNCTIONS
// ============================
function processEmailTemplateWithFormatting(template, applicantName, jobTitle, companyName) {
    return template
        .replace(/\{applicantName\}/g, applicantName)
        .replace(/\{jobTitle\}/g, jobTitle)
        .replace(/\{companyName\}/g, companyName);
}

function htmlToPlainText(html) {
    // Create a temporary div to parse HTML
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = html;
    
    // Remove script and style elements
    const scripts = tempDiv.querySelectorAll('script, style');
    scripts.forEach(element => element.remove());
    
    // Get text content and clean it up
    let plainText = tempDiv.textContent || tempDiv.innerText || '';
    
    // Clean up extra whitespace and line breaks
    plainText = plainText
        .replace(/\s+/g, ' ')           // Replace multiple spaces with single space
        .replace(/\n\s*\n/g, '\n\n')   // Replace multiple line breaks with double line break
        .trim();
    
    // Add some basic formatting for better readability in plain text
    plainText = plainText
        .replace(/Dear\s+/gi, '\nDear ')
        .replace(/Best regards/gi, '\n\nBest regards')
        .replace(/Thank you/gi, '\n\nThank you')
        .replace(/Congratulations/gi, '\n\nCongratulations')
        .replace(/What's Next\?/gi, '\n\nWhat\'s Next?')
        .replace(/•/g, '\n• ')
        .replace(/- /g, '\n- ');
    
    return plainText;
}

function cancelP2EmailProcess() {
    if (confirm('Are you sure you want to cancel the P2 email process? Any emails that have been sent will remain sent, but the process will be stopped.')) {
        console.log('📧 HR P2: Cancelling P2 email process...');
        
        // Reset state
        p2EmailSendingState = {
            phase: 'P2',
            passedSent: false,
            failedSent: false,
            currentStep: 'initial',
            passedResults: null,
            failedResults: null
        };
        
        // Reset global flag
        p2EmailSendingInProgress = false;
        
        // Close all related modals
        const modals = document.querySelectorAll('.modal');
        modals.forEach(modal => {
            if (modal.id.includes('P2') || 
                modal.id.includes('p2') || 
                modal.id.includes('Email')) {
                modal.remove();
                console.log(`📧 HR P2: Removed modal: ${modal.id}`);
            }
        });
        
        console.log('📧 HR P2: P2 email process cancelled by user');
    }
}
// ============================
// GLOBAL SCOPE ASSIGNMENTS
// ============================
// Make all P2 functions globally available
window.startP2FinalizationProcess = startP2FinalizationProcess;
window.startP2GmailIntegrationFlow = startP2GmailIntegrationFlow;
window.executeP2Finalization = executeP2Finalization;
window.fetchP2ApplicantDataForEmails = fetchP2ApplicantDataForEmails;
window.fetchP2EmailTemplates = fetchP2EmailTemplates;
window.showP2PassedEmailModal = showP2PassedEmailModal;
window.showP2FailedEmailModal = showP2FailedEmailModal;
window.createP2EmailModalDynamically = createP2EmailModalDynamically;
window.sendAutomatedP2Emails = sendAutomatedP2Emails;
window.showP2EmailSendingProgress = showP2EmailSendingProgress;
window.sendP2EmailBatch = sendP2EmailBatch;
window.showP2EmailSendingCompletion = showP2EmailSendingCompletion;
window.createP2CompletionModalFromScratch = createP2CompletionModalFromScratch;
window.proceedWithP2NextStep = proceedWithP2NextStep;
window.showP2DatabaseUpdateConfirmationModal = showP2DatabaseUpdateConfirmationModal;
window.executeP2DatabaseUpdate = executeP2DatabaseUpdate;
window.cancelP2EmailProcess = cancelP2EmailProcess;
window.openGmailForP2Passed = openGmailForP2Passed;
window.openGmailForP2Failed = openGmailForP2Failed;
window.buildP2GmailComposeUrl = buildP2GmailComposeUrl;
window.showP2StatusUpdateModal = showP2StatusUpdateModal;
window.updateP2ApplicantStatuses = updateP2ApplicantStatuses;
window.previewP2EmailTemplate = previewP2EmailTemplate;

console.log('✅ HR P2: All P2 finalization functions loaded and made globally available');

document.addEventListener("DOMContentLoaded", function() {
    // Set up P2 finalization button
    setTimeout(() => {
        console.log("🔧 HR P2: Setting up P2 finalization button...");
        
        // Set up P2 confirm button
        const confirmButtonP2 = document.getElementById('confirmButtonP2');
        if (confirmButtonP2) {
            console.log("🔧 HR P2: Setting up P2 confirm button");
            
            // Remove existing event listeners
            const newConfirmP2Button = confirmButtonP2.cloneNode(true);
            confirmButtonP2.parentNode.replaceChild(newConfirmP2Button, confirmButtonP2);
            
            // Add event listener
            newConfirmP2Button.addEventListener('click', function(e) {
                e.preventDefault();
                console.log("🚀 HR P2: P2 Gmail process starting...");
                startP2GmailIntegrationFlow();
            });
            
            console.log("✅ HR P2: P2 confirm button setup complete");
        } else {
            console.log("ℹ️ HR P2: P2 confirm button not found");
        }
        
    }, 1000);
});

// ============================
// UTILITY FUNCTION TO CLOSE MODALS
// ============================
function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'none';
        // Remove from DOM if it was dynamically created
        if (modalId.includes('emailP2') || modalId.includes('p2')) {
            modal.remove();
        }
    }
}
// document.addEventListener("DOMContentLoaded", function() {
//     // Set up P2 finalization button
//     setTimeout(() => {
//         console.log("🔧 HR P2: Setting up P2 finalization button...");
        
//         const finalizeP2Button = document.getElementById('finalizeP2Button');
//         if (finalizeP2Button) {
//             console.log("✅ HR P2: Found P2 finalize button by ID");
            
//             // Remove any existing event listeners by cloning
//             const newP2Button = finalizeP2Button.cloneNode(true);
//             finalizeP2Button.parentNode.replaceChild(newP2Button, finalizeP2Button);
            
//             // Add the click event listener
//             newP2Button.addEventListener('click', function(e) {
//                 e.preventDefault();
//                 console.log("🚀 HR P2: P2 Finalize button clicked!");
                
//                 if (checkAllP2ApplicantsMarked()) {
//                     console.log("✅ HR P2: All P2 applicants marked - starting finalization process");
//                     startP2FinalizationProcess();
//                 } else {
//                     console.log("⚠️ HR P2: Not all P2 applicants marked");
//                     alert("Not all P2 applicants have been marked as passed or failed. Please make a decision for all applicants first.");
//                 }
//             });
            
//             console.log("✅ HR P2: P2 button event listener attached successfully");
//         } else {
//             console.log("ℹ️ HR P2: P2 finalize button not found (this is normal if no P2 data exists)");
//         }
        
//         // Set up P2 confirm button
//         const confirmButtonP2 = document.getElementById('confirmButtonP2');
//         if (confirmButtonP2) {
//             console.log("🔧 HR P2: Setting up P2 confirm button");
            
//             // Remove existing event listeners
//             const newConfirmP2Button = confirmButtonP2.cloneNode(true);
//             confirmButtonP2.parentNode.replaceChild(newConfirmP2Button, confirmButtonP2);
            
//             // Add event listener
//             newConfirmP2Button.addEventListener('click', function(e) {
//                 e.preventDefault();
//                 console.log("🚀 HR P2: P2 Gmail process starting...");
//                 startP2GmailIntegrationFlow();
//             });
            
//             console.log("✅ HR P2: P2 confirm button setup complete");
//         } else {
//             console.log("ℹ️ HR P2: P2 confirm button not found");
//         }
        
//     }, 1000);
// });

// ============================
// CHECK P2 APPLICANTS MARKED FUNCTION
// ============================
function checkAllP2ApplicantsMarked() {
    console.log("🔍 HR P2: Checking if all P2 applicants have been marked");
    
    const declaredResultsTable = document.getElementById("declaredResultsTable");
    if (!declaredResultsTable) {
        console.log("📊 HR P2: No declared results table found, returning true");
        return true;
    }
    
    const rows = declaredResultsTable.querySelectorAll('tbody tr:not(.section-header-row)');
    if (rows.length === 0) {
        console.log("📊 HR P2: No rows to check, returning true");
        return true; // No rows to check
    }
    
    let relevantRows = Array.from(rows).filter(row => {
        const statusCell = row.querySelector('td:nth-child(6)');
        return statusCell && statusCell.textContent.includes('P2');
    });
    
    if (relevantRows.length === 0) {
        console.log("📊 HR P2: No P2 rows found, returning true");
        return true; // No P2 rows
    }
    
    console.log(`📊 HR P2: Found ${relevantRows.length} P2 rows to check`);
    
    // Check each P2 row for PASSED/FAILED status
    const allMarked = relevantRows.every(row => {
        // Skip message rows
        if (row.querySelector('td[colspan]')) {
            return true;
        }
        
        const statusCell = row.querySelector('td:nth-child(6)');
        if (!statusCell) return true;
        
        const statusText = statusCell.textContent;
        const isMarked = statusText.includes('PASSED') || statusText.includes('FAILED');
        
        if (!isMarked) {
            console.log(`⚠️ HR P2: Found unmarked P2 row: ${statusText}`);
        }
        
        return isMarked;
    });
    
    console.log(`📊 HR P2: All P2 applicants marked: ${allMarked}`);
    return allMarked;
}

// ============================
// FILTER HANDLING FOR P2
// ============================
function goToP2ReviewFilter() {
    console.log("🔄 [P2 Filter] Triggering P2 Review filter");
    // Trigger the "For Review" filter
    document.getElementById("filter-review").click();
}

function updateSectionHeaderButtonsP2() {
    console.log("🔧 [P2 Header] Updating section header buttons for P2");
    
    const rightSection = document.querySelector('#finalizeButtonContainer');
    
    if (!rightSection) {
        console.warn("⚠️ [P2 Header] No finalize button container found");
        return;
    }
    
    // Clear existing buttons
    rightSection.innerHTML = '';
    
    // Add Finalize P2 Review button with Gmail integration
    const p2Button = document.createElement('button');
    p2Button.id = 'finalizeP2Button';
    p2Button.textContent = 'Finalize P2 Review';
    p2Button.style.padding = '10px 15px';
    p2Button.style.fontSize = '16px';
    p2Button.style.fontWeight = 'bold';
    p2Button.style.border = 'none';
    p2Button.style.backgroundColor = '#124A5C';
    p2Button.style.color = 'white';
    p2Button.style.borderRadius = '4px';
    p2Button.style.cursor = 'pointer';
    p2Button.style.transition = 'background-color 0.3s ease';
    
    p2Button.addEventListener('mouseover', function() {
        this.style.backgroundColor = '#B4E3E3';
        this.style.color = '#124A5C';
    });
    
    p2Button.addEventListener('mouseout', function() {
        this.style.backgroundColor = '#124A5C';
        this.style.color = 'white';
    });
    
    p2Button.addEventListener('click', function() {
        console.log("🎯 [P2 Button] Finalize P2 Review button clicked");
        
        if (checkAllP2ApplicantsMarked()) {
            console.log("✅ [P2 Button] All P2 applicants marked, showing modal");
            document.getElementById('notifyApplicantsModal').style.display = 'block';
        } else {
            console.warn("⚠️ [P2 Button] Not all P2 applicants marked");
            alert("Not all P2 applicants have been marked as passed or failed. Please make a decision for all applicants first.");
        }
    });
    
    rightSection.appendChild(p2Button);
    console.log("✅ [P2 Header] Added Finalize P2 Review button");
}

// =========================
// EXISTING FUNCTIONS (KEEPING ALL ORIGINAL FUNCTIONALITY)
// =========================

// Function to handle rejection of an applicant
function rejectApplicant(applicantId) {
    if (!confirm("Are you sure you want to reject this applicant? This action cannot be undone.")) {
        return;
    }

    fetch('/hr/reject-applicant', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ applicantId }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("Applicant has been rejected successfully.");
            location.reload(); // Reload to update the UI
        } else {
            alert("Failed to reject applicant: " + (data.message || "Unknown error"));
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert("An error occurred while rejecting the applicant.");
    });
}

// Function to handle passing an applicant
function passApplicant(applicantId) {
    if (!confirm("Are you sure you want to pass this applicant to the next stage? This action cannot be undone.")) {
        return;
    }

    fetch('/hr/pass-applicant', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ applicantId }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("Applicant has been passed to the next stage successfully.");
            location.reload(); // Reload to update the UI
        } else {
            alert("Failed to pass applicant: " + (data.message || "Unknown error"));
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert("An error occurred while passing the applicant.");
    });
}

function handleFailedAction(applicantId) {
    alert('Action required for P2 - FAILED applicant: ' + applicantId);
    // Implement logic for failed status (e.g., notify applicant, reject process)
}

function handlePassedAction(applicantId) {
    alert('Action required for P2 - PASSED applicant: ' + applicantId);
    // Implement logic for passed status (e.g., schedule next steps, notify team)
}

function handleP3FailedAction(applicantId) {
    alert('Action required for P3 - FAILED applicant: ' + applicantId);
    // Implement logic for P3 failed status
}

function handleP3PassedAction(applicantId) {
    alert('Action required for P3 - PASSED applicant: ' + applicantId);
    // Implement logic for P3 passed status
}

function handleJobOfferAction(applicantId) {
    alert('Action required for Job Offer Sent applicant: ' + applicantId);
    // Implement logic for job offer status (e.g., follow-up, onboarding)
}

function notifyLineManager(applicantId) {
    fetch('/notify-line-manager', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ applicantId: applicantId }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert(data.message);  // Success message
        } else {
            alert(data.error);    // Error message
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('An error occurred.');
    });
}

// Function to extract applicantId from URL
function getApplicantIdFromURL() {
    const path = window.location.pathname;
    const parts = path.split('/'); // Split the URL into parts
    const applicantId = parts[3]; // Assuming the URL is like /hr/evaluation-form/{applicantId}
    return applicantId;
}

// Display the applicantId from the URL (if any) when the page is loaded
document.addEventListener('DOMContentLoaded', function () {
    const applicantId = getApplicantIdFromURL(); // Extract applicantId from the URL
    if (applicantId) {
        document.getElementById('applicantIdDisplay').textContent = `Applicant ID from URL: ${applicantId}`;
    } else {
        document.getElementById('applicantIdDisplay').textContent = 'No Applicant ID found in URL.';
    }
});

// Enhanced function to open initial screening modal
function hrInitialScreeningModal(userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl) {
    console.log('Opening Initial Screening Modal with Data:', { userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl });

    if (!userId || userId === "undefined") {
        console.error("Invalid userId passed to modal:", userId);
        alert("Error: Invalid User ID. Cannot display applicant details.");
        return;
    }
    
    currentModalType = 'initial';
    isReuploadRequested = false;
    
    // Populate the initial modal
    populateModalData('', userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl);
    
    // Check for additional document and HR remarks
    checkForAdditionalDocument(userId);
    
    // ✅ FIX: ADD THIS LINE TO ACTUALLY SHOW THE MODAL
    const modal = document.getElementById('hrInitialScreeningModalHtml');
    if (modal) {
        modal.style.display = 'block';
        console.log('✅ Modal displayed successfully');
    } else {
        console.error('❌ Modal element not found');
    }
}

// Function to open final decision modal (for reuploaded cases)

function hrInitialScreeningDecisionModal(userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl) {
    console.log('Opening Final Decision Modal with Data:', { userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl });

    if (!userId || userId === "undefined") {
        console.error("Invalid userId passed to modal:", userId);
        alert("Error: Invalid User ID. Cannot display applicant details.");
        return;
    }
    
    currentModalType = 'final';
    
    // Populate the final modal
    populateModalData('final-', userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl);
    
    // Check for additional document and HR remarks in final modal
    checkForAdditionalDocument(userId, 'final');
    
    // ✅ FIX: ADD THIS LINE TO ACTUALLY SHOW THE MODAL
    const modal = document.getElementById('hrInitialScreeningDecisionModal');
    if (modal) {
        modal.style.display = 'block';
        console.log('✅ Final modal displayed successfully');
    } else {
        console.error('❌ Final modal element not found');
    }
}


// Helper function to populate modal data
function populateModalData(prefix, userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl) {
    document.getElementById(prefix + 'userId').value = userId;
    document.getElementById(prefix + 'applicant-name').textContent = `${lastName}, ${firstName}`;
    document.getElementById(prefix + 'applicant-birthday').textContent = birthday || 'N/A';
    document.getElementById(prefix + 'applicant-email').textContent = email || 'N/A';
    document.getElementById(prefix + 'applicant-contact').textContent = phoneNo || 'N/A';

    document.getElementById(prefix + 'score-degree').textContent = scores.degree || 'N/A';
    document.getElementById(prefix + 'score-experience').textContent = scores.experience || 'N/A';
    document.getElementById(prefix + 'score-certifications').textContent = scores.certifications || 'N/A';
    document.getElementById(prefix + 'score-hard-skills').textContent = scores.hardSkills || 'N/A';
    document.getElementById(prefix + 'score-soft-skills').textContent = scores.softSkills || 'N/A';
    document.getElementById(prefix + 'score-work-setup').textContent = scores.workSetup || 'N/A';
    document.getElementById(prefix + 'score-availability').textContent = scores.availability || 'N/A';

    document.getElementById(prefix + 'computation-verdict').textContent = verdict || 'N/A';

    // Display documents
    displayUploadedDocument(degreeUrl, prefix + "degree-doc", prefix + "degree-preview");
    displayUploadedDocument(certUrl, prefix + "cert-doc", prefix + "cert-preview");
    displayUploadedDocument(resumeUrl, prefix + "resume-doc", prefix + "resume-preview");
}

// Function to check for additional document and HR remarks
function checkForAdditionalDocument(userId, prefix = '') {
    fetch(`/hr/get-additional-document/${userId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success && data.addtlFileUrl) {
                const addtlSection = document.getElementById(prefix + 'addtl-document-section');
                if (addtlSection) {
                    addtlSection.style.display = 'block';
                    displayUploadedDocument(data.addtlFileUrl, prefix + "addtl-doc", prefix + "addtl-preview");
                    
                    if (data.hrRemarks) {
                        document.getElementById(prefix + 'hr-remarks-display').textContent = data.hrRemarks;
                    }
                }
            }
        })
        .catch(error => {
            console.error('Error checking for additional document:', error);
        });
}

// Function to toggle reupload section
function toggleReuploadSection() {
    const reuploadSection = document.getElementById('document-reupload-section');
    const reuploadButton = document.getElementById('reuploadRequestButton');
    const verificationSection = document.querySelector('.verification-section'); // Add this line
    
    if (reuploadSection.style.display === 'none' || !reuploadSection.style.display) {
        reuploadSection.style.display = 'block';
        reuploadButton.textContent = 'Cancel Reupload Request';
        reuploadButton.style.backgroundColor = '#e67e22';
        if (verificationSection) verificationSection.style.display = 'none'; // Add this line
        isReuploadRequested = true;
    } else {
        reuploadSection.style.display = 'none';
        reuploadButton.textContent = 'Document Reupload Request';
        reuploadButton.style.backgroundColor = '#f39c12';
        if (verificationSection) verificationSection.style.display = 'block'; // Add this line
        isReuploadRequested = false;
        
        // Clear form
        document.querySelectorAll('input[name="reupload-docs"]').forEach(cb => cb.checked = false);
        document.getElementById('reupload-remarks').value = '';
    }
}

function displayUploadedDocument(fileUrl, linkId, previewId) {
    const docLink = document.getElementById(linkId);
    const docPreview = document.getElementById(previewId);

    if (!fileUrl) {
        docLink.href = "#";
        docLink.textContent = "No document uploaded";
        docPreview.innerHTML = ""; // Clear preview
        return;
    }

    docLink.href = fileUrl;
    docLink.textContent = "View Uploaded Document";

    const fileExtension = fileUrl.split('.').pop().toLowerCase();

    if (["jpg", "jpeg", "png"].includes(fileExtension)) {
        docPreview.innerHTML = `<img src="${fileUrl}" alt="Uploaded Image" style="max-width: 300px; border: 1px solid #ccc; padding: 5px;">`;
    } else if (fileExtension === "pdf") {
        docPreview.innerHTML = `<iframe src="${fileUrl}" width="100%" height="400px" style="border: none;"></iframe>`;
    } else {
        docPreview.innerHTML = ""; // No preview for other file types
    }
}
// Enhanced confirm function for initial screening
function confirmHRInitialScreeningModal() {
    console.log("🔄 Enhanced confirm function called");
    
    const userId = document.getElementById("userId").value;
    
    // Check if this is being called from a P1 pass action
    if (window.p1ActionType === 'pass' && window.p1ActionUserId === userId) {
        console.log("🟢 [P1 Pass] Confirming pass action via modal");
        
        if (isReuploadRequested) {
            // Handle document reupload request - no verification checkbox needed
            handleDocumentReuploadRequest(userId);
        } else {
            // Normal confirmation process - requires verification checkbox
            const checkbox = document.getElementById("hr-verification-checkbox");
            const comments = document.getElementById("hr-verification-comments").value;
            
            if (!checkbox.checked) {
                alert("Please confirm that the applicant is eligible for endorsement by checking the verification checkbox.");
                return;
            }
            
            // Call the normal confirmation which will pass the applicant
            handleNormalConfirmation(userId, comments);
        }
        
        // Clear the action flags
        window.p1ActionType = null;
        window.p1ActionUserId = null;
    } else {
        // Call the original confirmation function
        confirmHRInitialScreeningModal();
    }
}

// Function to handle document reupload request
function handleDocumentReuploadRequest(userId) {  // Remove comments parameter
    const selectedDocs = [];
    const checkboxes = document.querySelectorAll('input[name="reupload-docs"]:checked');
    const remarks = document.getElementById('reupload-remarks').value.trim();
    
    if (checkboxes.length === 0) {
        alert("Please select at least one document type for reupload.");
        return;
    }
    
    if (!remarks) {
        alert("Please provide remarks/instructions for the applicant.");
        return;
    }
    
    checkboxes.forEach(checkbox => {
        selectedDocs.push(checkbox.value);
    });
    
    const requestData = {
        userId: userId,
        documentsToReupload: selectedDocs,
        remarks: remarks
        // Remove hrComments completely for reupload requests
    };
    
    fetch('/hr/request-document-reupload', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("Document reupload request sent successfully. The applicant will be notified when they log in to the chatbot.");
            document.getElementById('hrInitialScreeningModalHtml').style.display = 'none';
            location.reload();
        } else {
            alert("Error sending reupload request: " + data.message);
        }
    })
    .catch(error => {
        console.error("Error:", error);
        alert("Failed to send reupload request.");
    });
}

// Function to handle normal confirmation
function handleNormalConfirmation(userId, comments) {
    const requestData = {
        userId: userId,
        hrComments: comments
    };
    
    fetch('/hr/applicant-tracker-jobposition/P1AwaitingforLineManager', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("Successfully updated applicant status!");
            document.getElementById('hrInitialScreeningModalHtml').style.display = 'none';
            location.reload();
        } else {
            alert("Error updating applicant status: " + data.message);
        }
    })
    .catch(error => {
        console.error("Error:", error);
        alert("Failed to update applicant status.");
    });
}
// Function to handle final modal confirmation
function confirmFinalHRModal() {
    const userId = document.getElementById("final-userId").value;
    const checkbox = document.getElementById("final-hr-verification-checkbox");
    const comments = document.getElementById("final-hr-verification-comments").value;
    
    if (!checkbox.checked) {
        alert("Please confirm that the applicant is eligible for endorsement by checking the verification checkbox.");
        return;
    }
    
    const requestData = {
        userId: userId,
        hrComments: comments
    };
    
    fetch('/hr/applicant-tracker-jobposition/P1AwaitingforLineManager', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("Successfully updated applicant status!");
            document.getElementById('hrInitialScreeningDecisionModal').style.display = 'none';
            location.reload();
        } else {
            alert("Error updating applicant status: " + data.message);
        }
    })
    .catch(error => {
        console.error("Error:", error);
        alert("Failed to update applicant status.");
    });
}

// Function to reject from final modal
function rejectFinalHRModal() {
    const userId = document.getElementById("final-userId").value;
    
    if (!confirm("Are you sure you want to reject this applicant? This action cannot be undone.")) {
        return;
    }
    
    fetch('/hr/applicant-tracker-jobposition/P1HRFailed', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("Successfully updated applicant status to P1 - HR FAILED!");
            document.getElementById('hrInitialScreeningDecisionModal').style.display = 'none';
            location.reload();
        } else {
            alert("Error updating applicant status: " + data.message);
        }
    })
    .catch(error => {
        console.error("Error:", error);
        alert("Failed to update applicant status.");
    });
}

// Function to determine which modal to show based on applicant status
function showAppropriateModal(userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl, applicantStatus) {
    if (applicantStatus && applicantStatus.includes('Requested for Reupload')) {
        // Show final decision modal (no reupload request option)
        hrInitialScreeningDecisionModal(userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl);
    } else {
        // Show initial modal (with reupload request option)
        hrInitialScreeningModal(userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl);
    }
}

// Close modal if clicked outside the modal content
window.addEventListener('click', function (event) {
    const modal = document.getElementById('hrInitialScreeningModalHtml');
    if (event.target === modal) {
        modal.style.display = 'none';
    }
});

document.addEventListener("DOMContentLoaded", function () {
    // Function to filter rows based on status
    function filterRowsByStatus(status) {
        const rows = document.querySelectorAll('.tracking-table tbody tr');
        const mainTable = document.getElementById('mainApplicantTable');
        const onboardingTable = document.getElementById('onboardingTable');
        const applicantStatusSection = document.getElementById('applicantStatusSection');
        
        // Hide/show applicant status section based on filter
        if (applicantStatusSection) {
            applicantStatusSection.style.display = (status === 'review') ? 'block' : 'none';
        }
        
        // Show/hide main table based on filter
        if (mainTable) {
            mainTable.style.display = (status === 'review') ? 'none' : '';
        }
        
        if (status === "all") {
            // Show all rows in main table
            rows.forEach(row => row.style.display = "");
            
            // Show onboarding table
            if (onboardingTable) onboardingTable.style.display = "";
            
        } else if (status === "review") {
            // Handle P1 and P2 Review filter - BUT DON'T AUTO-TRIGGER
            handleP1AndP2ReviewFilter();
                
        } else if (status === "for-evaluation") {
            // Show only P2 evaluation rows
            rows.forEach(row => {
                const statusCell = row.querySelector('td:last-child');
                const statusText = statusCell ? statusCell.textContent : '';
                
                if (statusText.includes('P2 - Awaiting for HR Evaluation')) {
                    row.style.display = "";
                } else {
                    row.style.display = "none";
                }
            });
            
            // Hide onboarding table
            if (onboardingTable) onboardingTable.style.display = "none";
            
        } else if (status === "for-onboarding") {
            // Show onboarding status rows
            rows.forEach(row => {
                const statusCell = row.querySelector('td:last-child');
                const statusText = statusCell ? statusCell.textContent : '';
                
                if (statusText.includes('P3 - PASSED - Job Offer Sent')) {
                    row.style.display = "";
                } else {
                    row.style.display = "none";
                }
            });
            
            // Show onboarding table
            if (onboardingTable) onboardingTable.style.display = "";
        }
        
        // Highlight the active filter button
        highlightActiveFilter(status);
    }

    // ============================
// P1 REVIEW FUNCTIONS
// ============================

// Handle P1 Review filter
function handleP1AndP2ReviewFilter() {
    console.log("🔄 [P1&P2 Filter] Triggering combined P1 and P2 Review filter");
    
    const mainTable = document.getElementById('mainApplicantTable');
    const applicantStatusSection = document.getElementById('applicantStatusSection');
    const allMainRows = mainTable ? Array.from(mainTable.querySelectorAll('tbody tr')) : [];
    
    // Arrays to store rows
    const p1AwaitingRows = [];
    const p1LineManagerRows = [];
    const p2AwaitingRows = [];
    const p2DeclaredRows = [];
    
    // Process each row and categorize it
    allMainRows.forEach((row, index) => {
        const lastCell = row.querySelector('td:last-child');
        if (!lastCell) return;
        
        const statusSpan = lastCell.querySelector('span');
        if (!statusSpan) return;
        
        const statusText = statusSpan.textContent.trim();
        
        // Extract row data
        const rowData = extractRowData(row, index);
        
        // P1 Categories
        if (statusText.includes("P1 - Awaiting for HR Action") || 
            statusText.includes("P1 - Awaiting for Line Manager Action; Requested for Reupload")) {
            p1AwaitingRows.push(rowData);
        }
        else if (statusText.includes("P1 - Awaiting for Line Manager Action; HR PASSED") ||
                 statusText.includes("P1 - PASSED") ||
                 statusText.includes("P1 - FAILED")) {
            p1LineManagerRows.push(rowData);
        }
        // P2 Categories (keep existing logic)
        else if (statusText.includes("P2 - HR Evaluation Accomplished")) {
            p2AwaitingRows.push(rowData);
        }
        else if (statusText.includes("P2 - PASSED") || statusText.includes("P2 - FAILED")) {
            p2DeclaredRows.push(rowData);
        }
    });
    
    // Update all tables
    updateP1AwaitingActionTable(p1AwaitingRows);
    updateP1LineManagerReviewTable(p1LineManagerRows);
    updateAwaitingActionTableP2(p2AwaitingRows);
    updateDeclaredResultsTableP2(p2DeclaredRows);
    
    // Update section header buttons
    updateSectionHeaderButtonsP1AndP2();
}
function updateP1AwaitingActionTable(awaitingRows) {
    console.log(`Populating P1 awaiting action table with ${awaitingRows.length} rows`);
    
    const p1AwaitingTable = document.getElementById('p1AwaitingActionTable');
    if (!p1AwaitingTable) {
        console.error("❌ P1 awaiting action table not found");
        return;
    }
    
    const tbody = p1AwaitingTable.querySelector('tbody');
    if (!tbody) {
        console.error("❌ Tbody not found in P1 awaiting action table");
        return;
    }
    
    tbody.innerHTML = '';
    
    if (awaitingRows.length > 0) {
        awaitingRows.forEach((rowData, idx) => {
            console.log(`Processing P1 awaiting row ${idx + 1}: ${rowData.name}`);
            
            const newRow = createP1TableRow(rowData, 'awaiting');
            tbody.appendChild(newRow);
            
            // Enhance row with work setup data after creation
            if (rowData.userId) {
                newRow.setAttribute('data-userid', rowData.userId);
                enhanceRowWithWorkSetupData(newRow);
            }
            
            console.log(`✅ Added P1 awaiting row ${idx + 1}`);
        });
        
        console.log(`✅ Successfully populated P1 awaiting action table with ${awaitingRows.length} rows`);
    } else {
        const messageRow = document.createElement('tr');
        const messageCell = document.createElement('td');
        messageCell.setAttribute('colspan', '8'); // Updated to 8 columns
        messageCell.className = 'text-center no-data-message';
        messageCell.style.cssText = `
            padding: 30px;
            background-color: #f8f9fa;
            color: #6c757d;
            font-style: italic;
            font-size: 16px;
            border-left: 4px solid #007bff;
        `;
        messageCell.textContent = 'No P1 applicants awaiting for action found.';
        messageRow.appendChild(messageCell);
        tbody.appendChild(messageRow);
        
        console.log("❌ No P1 awaiting rows - added no data message");
    }
}


function updateP1LineManagerReviewTable(lineManagerRows) {
    console.log(`Populating P1 line manager review table with ${lineManagerRows.length} rows`);
    
    const p1LineManagerTable = document.getElementById('p1LineManagerReviewTable');
    if (!p1LineManagerTable) {
        console.error("❌ P1 line manager review table not found");
        return;
    }
    
    const tbody = p1LineManagerTable.querySelector('tbody');
    if (!tbody) {
        console.error("❌ Tbody not found in P1 line manager review table");
        return;
    }
    
    tbody.innerHTML = '';
    
    if (lineManagerRows.length > 0) {
        lineManagerRows.forEach((rowData, idx) => {
            console.log(`Processing P1 line manager row ${idx + 1}: ${rowData.name}`);
            
            const newRow = createP1TableRow(rowData, 'linemanager');
            tbody.appendChild(newRow);
            
            // Enhance row with work setup data after creation
            if (rowData.userId) {
                newRow.setAttribute('data-userid', rowData.userId);
                enhanceRowWithWorkSetupData(newRow);
            }
            
            console.log(`✅ Added P1 line manager row ${idx + 1}`);
        });
        
        console.log(`✅ Successfully populated P1 line manager review table with ${lineManagerRows.length} rows`);
    } else {
        const messageRow = document.createElement('tr');
        const messageCell = document.createElement('td');
        messageCell.setAttribute('colspan', '8'); // Updated to 8 columns
        messageCell.className = 'text-center no-data-message';
        messageCell.style.cssText = `
            padding: 30px;
            background-color: #f8f9fa;
            color: #6c757d;
            font-style: italic;
            font-size: 16px;
            border-left: 4px solid #007bff;
        `;
        messageCell.textContent = 'No P1 applicants under line manager review found.';
        messageRow.appendChild(messageCell);
        tbody.appendChild(messageRow);
        
        console.log("❌ No P1 line manager rows - added no data message");
    }
}

// Function to enhance row with actual work setup data from applicants array
async function enhanceRowWithWorkSetupData(row) {
    const userId = row.getAttribute('data-userid');
    if (!userId || row.getAttribute('data-worksetup-enhanced') === 'true') {
        return; // Skip if already enhanced or no userId
    }
    
    console.log(`🔧 FIXED: Enhancing P1 row for userId: ${userId}`);
    
    try {
        // Try to get data from global applicants data first
        const applicantsDataScript = document.getElementById('applicants-data');
        let applicantData = null;
        
        if (applicantsDataScript) {
            try {
                const applicantsData = JSON.parse(applicantsDataScript.textContent);
                applicantData = applicantsData.find(a => a.userId == userId);
            } catch (e) {
                console.warn("Could not parse applicants data:", e);
            }
        }
        
        let totalScore = 'N/A';
        let workSetupPassed = null;
        let availabilityPassed = null;
        
        if (applicantData && applicantData.initialScreeningAssessment) {
            const assessment = applicantData.initialScreeningAssessment;
            totalScore = assessment.totalScore || 'N/A';
            workSetupPassed = assessment.workSetupScore;
            availabilityPassed = assessment.availabilityScore;
            
            console.log(`✅ FIXED: Found data for userId ${userId}:`, {
                totalScore,
                workSetupPassed,
                availabilityPassed
            });
        } else {
            console.log(`⚠️ FIXED: No data found for userId ${userId}, will fetch from server`);
            
            // Fallback: fetch from server
            const response = await fetch(`/hr/get-applicant-assessment/${userId}`);
            if (response.ok) {
                const data = await response.json();
                if (data.success && data.assessment) {
                    totalScore = data.assessment.totalScore || 'N/A';
                    workSetupPassed = data.assessment.workSetupScore;
                    availabilityPassed = data.assessment.availabilityScore;
                    
                    console.log(`✅ FIXED: Fetched from server for userId ${userId}:`, {
                        totalScore,
                        workSetupPassed,
                        availabilityPassed
                    });
                }
            }
        }
        
        // Update the score cell
        const scoreCell = row.querySelector('.score-cell');
        if (scoreCell) {
            if (totalScore !== 'N/A' && totalScore !== null && totalScore !== undefined) {
                scoreCell.textContent = parseFloat(totalScore).toFixed(2);
                scoreCell.style.color = '#333';
                scoreCell.style.fontWeight = 'bold';
            } else {
                scoreCell.textContent = 'N/A';
                scoreCell.style.color = '#999';
            }
        }
        
        // Update the work setup cell with FIXED boolean logic
        const workSetupCell = row.querySelector('.work-setup-cell');
        if (workSetupCell) {
            let workSetupText = 'N/A';
            let workSetupColor = '#999';
            
            // FIXED: Proper boolean handling for workSetupScore and availabilityScore
            const workSetupBool = workSetupPassed === true || workSetupPassed === 'true' || workSetupPassed === 1;
            const availabilityBool = availabilityPassed === true || availabilityPassed === 'true' || availabilityPassed === 1;
            
            console.log(`🔧 FIXED: Boolean conversion for userId ${userId}:`, {
                workSetupPassed,
                availabilityPassed,
                workSetupBool,
                availabilityBool
            });
            
            if (workSetupPassed !== null && workSetupPassed !== undefined && 
                availabilityPassed !== null && availabilityPassed !== undefined) {
                
                if (workSetupBool && availabilityBool) {
                    workSetupText = 'PASSED';
                    workSetupColor = '#28a745';
                } else {
                    workSetupText = 'FAILED';
                    workSetupColor = '#dc3545';
                }
            }
            
            workSetupCell.textContent = workSetupText;
            workSetupCell.style.color = workSetupColor;
            workSetupCell.style.fontWeight = 'bold';
            
            console.log(`✅ FIXED: Set work setup for userId ${userId}: ${workSetupText}`);
        }
        
        // Mark as enhanced
        row.setAttribute('data-worksetup-enhanced', 'true');
        
        console.log(`✅ FIXED: Successfully enhanced P1 row for userId ${userId}`);
        
    } catch (error) {
        console.error(`❌ FIXED: Error enhancing P1 row for userId ${userId}:`, error);
        
        // Set error states
        const scoreCell = row.querySelector('.score-cell');
        const workSetupCell = row.querySelector('.work-setup-cell');
        
        if (scoreCell) {
            scoreCell.textContent = 'Error';
            scoreCell.style.color = '#dc3545';
        }
        
        if (workSetupCell) {
            workSetupCell.textContent = 'Error';
            workSetupCell.style.color = '#dc3545';
        }
    }
}
// Create P1 table row
function createP1TableRow(rowData, tableType) {
   const newRow = document.createElement('tr');
    
    if (rowData.applicantId) {
        newRow.setAttribute('data-applicantid', rowData.applicantId);
    }
    
    const userId = rowData.userId || extractUserIdFromRowData(rowData);
    if (userId) {
        newRow.setAttribute('data-userid', userId);
    }
    
    if (rowData.cells && rowData.cells.length >= 5) {
        // Applicant No, Name, Department, Position (columns 1-4)
        for (let i = 0; i < 4; i++) {
            const cell = document.createElement('td');
            cell.innerHTML = rowData.cells[i];
            newRow.appendChild(cell);
        }
        
        // Total Score (column 5)
        const scoreCell = document.createElement('td');
        scoreCell.className = 'score-cell';
        scoreCell.textContent = 'Loading...';
        scoreCell.style.color = '#6c757d';
        newRow.appendChild(scoreCell);
        
        // Work Setup/Availability (column 6)
        const workSetupCell = document.createElement('td');
        workSetupCell.className = 'work-setup-cell';
        workSetupCell.textContent = 'Loading...';
        workSetupCell.style.color = '#6c757d';
        newRow.appendChild(workSetupCell);
        
        // Status (column 7)
        const statusCell = document.createElement('td');
        const statusMatch = rowData.cells[4].match(/<span><strong>Status:<\/strong>\s*([^<]+)<\/span>/);
        const status = statusMatch ? statusMatch[1] : 'Unknown';
        statusCell.textContent = status;
        newRow.appendChild(statusCell);
        
        // Actions (column 8)
        const actionCell = document.createElement('td');
        
        if (tableType === 'awaiting') {
            // Extract name from rowData for better user experience
            let applicantName = 'Unknown';
            if (rowData.name) {
                applicantName = rowData.name;
            } else if (rowData.cells && rowData.cells[1]) {
                // Extract name from HTML content
                const nameMatch = rowData.cells[1].match(/^([^<\n]+)/);
                if (nameMatch) {
                    applicantName = nameMatch[1].trim();
                }
            }
            
            // Clean the applicant name for safe usage in onclick
            const cleanApplicantName = applicantName.replace(/'/g, "\\'").replace(/"/g, '\\"');
            
            actionCell.innerHTML = `
                <div style="display: flex; flex-direction: column; gap: 5px;">
                    <button 
                        class="btn-view-evaluation" 
                        onclick="openP1EvaluationModal('${userId}', '${rowData.applicantId}', '${status.replace(/'/g, "\\'")}')"
                        style="background-color: white; color: black; border: 1px solid #124A5C; padding: 6px 12px; border-radius: 4px; width: 100%; font-size: 14px; transition: background-color 0.3s ease, color 0.3s ease; cursor: pointer;"
                        onmouseover="this.style.backgroundColor='#124A5C'; this.style.color='white';"
                        onmouseout="this.style.backgroundColor='white'; this.style.color='black';">
                        View Evaluation
                    </button>
                    <div style="display: flex; gap: 5px;">
                        <button 
                            class="btn-pass" 
                            onclick="confirmP1Applicant('${userId}', '${cleanApplicantName}')"
                            style="background-color: #27ae60; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 14px; flex: 1;"
                            title="Pass to Line Manager review">
                            Pass
                        </button>
                        <button 
                            class="btn-reject" 
                            onclick="rejectP1Applicant('${userId}', '${cleanApplicantName}')"
                            style="background-color: #e74c3c; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 14px; flex: 1;"
                            title="Reject applicant">
                            Reject
                        </button>
                    </div>
                </div>
            `;
        } else {
            actionCell.innerHTML = `<span style="color: #666; font-style: italic;">Under Line Manager Review</span>`;
        }
        
        newRow.appendChild(actionCell);
    }
    
    return newRow;
}


// ============================
// ENSURE GLOBAL AVAILABILITY
// ============================

// Explicitly assign to window object to ensure global scope
if (typeof window !== 'undefined') {
    window.confirmP1Applicant = confirmP1Applicant;
    window.rejectP1Applicant = rejectP1Applicant;
    window.createP1TableRow = createP1TableRow;
    
    console.log("✅ [P1 Global] P1 functions assigned to window object");
    console.log("✅ [P1 Global] confirmP1Applicant available:", typeof window.confirmP1Applicant === 'function');
    console.log("✅ [P1 Global] rejectP1Applicant available:", typeof window.rejectP1Applicant === 'function');
}

// Also define them in global scope directly
globalThis.confirmP1Applicant = confirmP1Applicant;
globalThis.rejectP1Applicant = rejectP1Applicant;
globalThis.createP1TableRow = createP1TableRow;

console.log("✅ [P1 Global] P1 functions defined in global scope");

// Test function availability immediately
setTimeout(() => {
    console.log("🔍 [P1 Test] Testing function availability after 1 second:");
    console.log("  confirmP1Applicant:", typeof confirmP1Applicant);
    console.log("  rejectP1Applicant:", typeof rejectP1Applicant);
    console.log("  window.confirmP1Applicant:", typeof window.confirmP1Applicant);
    console.log("  window.rejectP1Applicant:", typeof window.rejectP1Applicant);
}, 1000);

// Function to confirm P1 applicant (directly updates status to P1 Awaiting for Line Manager)
function confirmP1Applicant(userId, applicantName) {
    console.log(`🟢 [P1 Confirm] Confirming P1 applicant userId: ${userId}, name: ${applicantName}`);
    
    if (!userId) {
        console.error('❌ [P1 Confirm] Missing userId');
        alert("Error: Invalid User ID");
        return;
    }
    
    // Show confirmation dialog
    if (!confirm(`Are you sure you want to pass ${applicantName} to the Line Manager review stage?`)) {
        return;
    }
    
    // Show loading state
    const passButtons = document.querySelectorAll(`button[onclick*="confirmP1Applicant('${userId}'"]`);
    passButtons.forEach(button => {
        button.disabled = true;
        button.textContent = 'Processing...';
        button.style.backgroundColor = '#6c757d';
    });
    
    // Call the backend endpoint to update status
    fetch('/hr/applicant-tracker-jobposition/P1AwaitingforLineManager', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId: parseInt(userId) }),
    })
    .then(response => {
        console.log(`📡 [P1 Confirm] API response status: ${response.status}`);
        return response.json();
    })
    .then(data => {
        console.log('📡 [P1 Confirm] API response data:', data);
        
        if (data.success) {
            alert(`✅ Successfully passed ${applicantName} to Line Manager review stage!`);
            console.log(`✅ [P1 Confirm] Successfully updated userId ${userId} to P1 - Awaiting for Line Manager Action; HR PASSED`);
            
            // Refresh the page to show updated status
            setTimeout(() => {
                location.reload();
            }, 1000);
        } else {
            throw new Error(data.message || 'Failed to update applicant status');
        }
    })
    .catch(error => {
        console.error("❌ [P1 Confirm] Error updating applicant status:", error);
        alert(`❌ Error passing ${applicantName}: ${error.message || 'Unknown error'}`);
        
        // Reset button states
        passButtons.forEach(button => {
            button.disabled = false;
            button.textContent = 'Pass';
            button.style.backgroundColor = '#27ae60';
        });
    });
}

// Function to reject P1 applicant (directly calls reject modal)
function rejectP1Applicant(userId, applicantName) {
    console.log(`🔴 [P1 Reject] Rejecting userId: ${userId}, name: ${applicantName}`);
    
    if (!userId) {
        console.error('❌ [P1 Reject] Missing userId');
        alert("Error: Invalid User ID");
        return;
    }
    
    if (!confirm(`Are you sure you want to reject ${applicantName}? This action cannot be undone.`)) {
        return;
    }
    
    // Set the userId in the hidden input before calling the reject function
    const userIdElement = document.getElementById("userId");
    if (userIdElement) {
        userIdElement.value = userId;
        console.log(`🔴 [P1 Reject] Set userId in modal: ${userId}`);
    }
    
    // Call the existing reject function
    if (typeof rejectHRInitialScreeningModal === 'function') {
        console.log(`🔴 [P1 Reject] Calling rejectHRInitialScreeningModal for ${applicantName}`);
        rejectHRInitialScreeningModal();
    } else {
        console.log(`🔴 [P1 Reject] rejectHRInitialScreeningModal not found, using direct API call`);
        // Fallback: direct API call
        fetch('/hr/applicant-tracker-jobposition/P1HRFailed', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userId: parseInt(userId) }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert(`Successfully rejected ${applicantName}!`);
                location.reload();
            } else {
                alert("Error rejecting applicant: " + (data.message || "Unknown error"));
            }
        })
        .catch(error => {
            console.error("❌ [P1 Reject] Network error:", error);
            alert("Failed to reject applicant.");
        });
    }
}

// New function to handle P1 Pass action through modal
function handleP1PassAction(userId, applicantId, status) {
    console.log(`🟢 [P1 Pass] Handling pass action via modal for userId: ${userId}`);
    
    if (!userId) {
        console.error('❌ [P1 Pass] Missing userId');
        alert("Error: Invalid User ID");
        return;
    }
    
    // First open the evaluation modal to review, then confirm
    openP1EvaluationModal(userId, applicantId, status);
    
    // Add a flag to indicate this is for passing
    window.p1ActionType = 'pass';
    window.p1ActionUserId = userId;
}

// New function to handle P1 Reject action through modal
function handleP1RejectAction(userId) {
    console.log(`🔴 [P1 Reject] Handling reject action via modal for userId: ${userId}`);
    
    if (!userId) {
        console.error('❌ [P1 Reject] Missing userId');
        alert("Error: Invalid User ID");
        return;
    }
    
    // Directly call the reject modal function
    if (typeof rejectHRInitialScreeningModal === 'function') {
        // Set the userId in the modal before calling reject
        const userIdElement = document.getElementById("userId");
        if (userIdElement) {
            userIdElement.value = userId;
        }
        
        rejectHRInitialScreeningModal();
    } else {
        console.error('❌ [P1 Reject] rejectHRInitialScreeningModal function not found');
        alert('Error: Reject function not available');
    }
}
// Helper function to extract userId from row data
function extractUserIdFromRowData(rowData) {
    // Try to extract from the original row if available
    if (rowData.originalRow) {
        return rowData.originalRow.getAttribute('data-userid');
    }
    
    // Try to get from applicantId as fallback
    return rowData.applicantId;
}

// P1 Pass/Reject functions
function p1passApplicant(applicantId) {
    console.log(`🟢 [P1 Pass] Starting pass action for applicantId: ${applicantId}`);
    
    if (!confirm("Are you sure you want to pass this P1 applicant? This action cannot be undone.")) {
        return;
    }
    
    // Add your P1 pass logic here
    fetch('/hr/p1-pass-applicant', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ applicantId: applicantId }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("Successfully passed P1 applicant!");
            location.reload();
        } else {
            alert("Error passing P1 applicant: " + (data.message || "Unknown error"));
        }
    })
    .catch(error => {
        console.error("❌ [P1 Pass] Network error:", error);
        alert("Failed to pass P1 applicant.");
    });
}

function p1rejectApplicant(applicantId) {
    console.log(`🔴 [P1 Reject] Starting reject action for applicantId: ${applicantId}`);
    
    if (!confirm("Are you sure you want to reject this P1 applicant? This action cannot be undone.")) {
        return;
    }
    
    // Add your P1 reject logic here
    fetch('/hr/p1-reject-applicant', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ applicantId: applicantId }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("Successfully rejected P1 applicant!");
            location.reload();
        } else {
            alert("Error rejecting P1 applicant: " + (data.message || "Unknown error"));
        }
    })
    .catch(error => {
        console.error("❌ [P1 Reject] Network error:", error);
        alert("Failed to reject P1 applicant.");
    });
}

// Redirect to Review filter for P1 statuses
function redirectToReviewFilter() {
    console.log("🔄 Redirecting to Review filter page");
    document.getElementById("filter-review").click();
}

// Open P1 Evaluation Modal
function openP1EvaluationModal(userId, applicantId, status) {
    console.log(`📋 [P1 Evaluation] Opening modal for userId: ${userId}, status: ${status}`);
    
    if (!userId) {
        alert("Error: Missing user ID");
        return;
    }
    
    // Determine which modal to show based on status
    if (status.includes('Requested for Reupload')) {
        console.log("🔄 Opening P1: Final HR Review for Line Manager Endorsement modal");
        fetchApplicantDataAndShowModal(userId, 'final');
    } else if (status.includes('P1 - Awaiting for HR Action')) {
        console.log("🔄 Opening P1: Initial Screening Score Breakdown modal");
        fetchApplicantDataAndShowModal(userId, 'initial');
    } else {
        console.warn("⚠️ Unknown P1 status:", status);
        fetchApplicantDataAndShowModal(userId, 'initial'); // Default to initial
    }
}

// Fetch applicant data and show appropriate modal
function fetchApplicantDataAndShowModal(userId, modalType) {
    console.log(`📡 Fetching applicant data for userId: ${userId}, modalType: ${modalType}`);
    
    // First try to get data from the current page's applicant data
    const applicantRow = document.querySelector(`tr[data-userid="${userId}"]`);
    
    if (applicantRow) {
        // Extract data from the row first
        const cells = applicantRow.querySelectorAll('td');
        let firstName = '', lastName = '', email = '';
        
        if (cells.length > 1) {
            const nameCell = cells[1];
            const fullContent = nameCell.innerHTML;
            const nameParts = fullContent.split('<br>');
            
            if (nameParts.length > 0) {
                const fullName = nameParts[0].trim();
                const nameComponents = fullName.split(',');
                lastName = nameComponents[0] ? nameComponents[0].trim() : '';
                firstName = nameComponents[1] ? nameComponents[1].trim() : '';
            }
            
            if (nameParts.length > 1) {
                const emailHtml = nameParts[1];
                email = emailHtml.replace(/<[^>]*>/g, '').trim();
            }
        }
        
        // Try to get additional data from the global applicants data
        const applicantsDataScript = document.getElementById('applicants-data');
        let applicantData = null;
        
        if (applicantsDataScript) {
            try {
                const applicantsData = JSON.parse(applicantsDataScript.textContent);
                applicantData = applicantsData.find(a => a.userId == userId);
            } catch (e) {
                console.warn("Could not parse applicants data:", e);
            }
        }
        
        if (applicantData) {
            console.log("✅ Found applicant data:", applicantData);
            
            const scores = {
                degree: applicantData.initialScreeningAssessment?.degreeScore || 'N/A',
                experience: applicantData.initialScreeningAssessment?.experienceScore || 'N/A',
                certifications: applicantData.initialScreeningAssessment?.certificationScore || 'N/A',
                hardSkills: applicantData.initialScreeningAssessment?.hardSkillsScore || 'N/A',
                softSkills: applicantData.initialScreeningAssessment?.softSkillsScore || 'N/A',
                workSetup: applicantData.initialScreeningAssessment?.workSetupScore || 'N/A',
                availability: applicantData.initialScreeningAssessment?.availabilityScore || 'N/A'
            };
            
            // Show the appropriate modal
            if (modalType === 'final') {
                console.log("🎯 Showing P1: Final HR Review modal");
                hrInitialScreeningDecisionModal(
                    userId,
                    applicantData.lastName || lastName,
                    applicantData.firstName || firstName,
                    applicantData.birthDate,
                    applicantData.userEmail || email,
                    applicantData.phoneNo,
                    scores,
                    applicantData.initialScreeningAssessment?.totalScore || 'N/A',
                    applicantData.initialScreeningAssessment?.degree_url,
                    applicantData.initialScreeningAssessment?.cert_url,
                    applicantData.initialScreeningAssessment?.resume_url
                );
            } else {
                console.log("🎯 Showing P1: Initial Screening modal");
                showAppropriateModal(
                    userId,
                    applicantData.lastName || lastName,
                    applicantData.firstName || firstName,
                    applicantData.birthDate,
                    applicantData.userEmail || email,
                    applicantData.phoneNo,
                    scores,
                    applicantData.initialScreeningAssessment?.totalScore || 'N/A',
                    applicantData.initialScreeningAssessment?.degree_url,
                    applicantData.initialScreeningAssessment?.cert_url,
                    applicantData.initialScreeningAssessment?.resume_url,
                    applicantData.applicantStatus
                );
            }
        } else {
            // Fallback: fetch from server
            console.log("⚠️ No local data found, fetching from server...");
            fetchFromServer(userId, modalType);
        }
    } else {
        // Fallback: fetch from server
        console.log("⚠️ No row data found, fetching from server...");
        fetchFromServer(userId, modalType);
    }
}

// Server fetch fallback
function fetchFromServer(userId, modalType) {
    fetch(`/hr/get-applicant-details/${userId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const applicant = data.applicant;
                const scores = {
                    degree: applicant.initialScreeningAssessment?.degreeScore || 'N/A',
                    experience: applicant.initialScreeningAssessment?.experienceScore || 'N/A',
                    certifications: applicant.initialScreeningAssessment?.certificationScore || 'N/A',
                    hardSkills: applicant.initialScreeningAssessment?.hardSkillsScore || 'N/A',
                    softSkills: applicant.initialScreeningAssessment?.softSkillsScore || 'N/A',
                    workSetup: applicant.initialScreeningAssessment?.workSetupScore || 'N/A',
                    availability: applicant.initialScreeningAssessment?.availabilityScore || 'N/A'
                };
                
                if (modalType === 'final') {
                    console.log("🎯 Server data: Showing P1: Final HR Review modal");
                    hrInitialScreeningDecisionModal(
                        userId,
                        applicant.lastName,
                        applicant.firstName,
                        applicant.birthDate,
                        applicant.userEmail,
                        applicant.phoneNo,
                        scores,
                        applicant.initialScreeningAssessment?.totalScore || 'N/A',
                        applicant.initialScreeningAssessment?.degree_url,
                        applicant.initialScreeningAssessment?.cert_url,
                        applicant.initialScreeningAssessment?.resume_url
                    );
                } else {
                    console.log("🎯 Server data: Showing P1: Initial Screening modal");
                    showAppropriateModal(
                        userId,
                        applicant.lastName,
                        applicant.firstName,
                        applicant.birthDate,
                        applicant.userEmail,
                        applicant.phoneNo,
                        scores,
                        applicant.initialScreeningAssessment?.totalScore || 'N/A',
                        applicant.initialScreeningAssessment?.degree_url,
                        applicant.initialScreeningAssessment?.cert_url,
                        applicant.initialScreeningAssessment?.resume_url,
                        applicant.applicantStatus
                    );
                }
            } else {
                alert("Error fetching applicant details: " + data.message);
            }
        })
        .catch(error => {
            console.error("Error fetching applicant details:", error);
            alert("Failed to fetch applicant details");
        });
}

// Make functions globally available
window.redirectToReviewFilter = redirectToReviewFilter;
window.openP1EvaluationModal = openP1EvaluationModal;
window.fetchApplicantDataAndShowModal = fetchApplicantDataAndShowModal;
window.fetchFromServer = fetchFromServer;


// Update section header buttons for P1 and P2 - Fixed positioning with debugging
function updateSectionHeaderButtonsP1AndP2() {
    console.log("🔧 [P1&P2 Header] Updating section header buttons for P1 and P2");
    
    // Debug: Log all headers to see what we're working with
    const allHeaders = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
    console.log("📋 [Debug] All headers found:", Array.from(allHeaders).map(h => h.textContent));
    
    // Find P1 section header with multiple strategies
    let p1Header = Array.from(document.querySelectorAll('h1, h2, h3, h4, h5, h6')).find(h => 
        h.textContent.includes('List of Applicants on P1 Review') || 
        h.textContent.includes('P1 Review') ||
        h.textContent.toLowerCase().includes('p1')
    );
    
    // Find P2 section header with multiple strategies
    let p2Header = Array.from(document.querySelectorAll('h1, h2, h3, h4, h5, h6')).find(h => 
        h.textContent.includes('List of Applicants on P2 Review') || 
        h.textContent.includes('P2 Review') ||
        h.textContent.toLowerCase().includes('p2')
    );
    
    // Alternative: Look for elements with specific text content (not just headers)
    if (!p1Header) {
        p1Header = Array.from(document.querySelectorAll('*')).find(el => 
            el.textContent && el.textContent.includes('List of Applicants on P1 Review')
        );
    }
    
    if (!p2Header) {
        p2Header = Array.from(document.querySelectorAll('*')).find(el => 
            el.textContent && el.textContent.includes('List of Applicants on P2 Review')
        );
    }
    
    console.log("🔍 [Debug] P1 Header found:", p1Header ? p1Header.textContent : "NOT FOUND");
    console.log("🔍 [Debug] P2 Header found:", p2Header ? p2Header.textContent : "NOT FOUND");
    
    if (!p1Header && !p2Header) {
        console.warn("⚠️ [P1&P2 Header] Neither P1 nor P2 section headers found");
        // Fallback: try to use the old container method
        const rightSection = document.querySelector('#finalizeButtonContainer');
        if (rightSection) {
            console.log("🔄 [Fallback] Using original container method");
            // Clear existing buttons
            rightSection.innerHTML = '';
            
            // Add both buttons to the container
            // const p1Button = createButton('finalizeP1Button', 'Finalize P1 Review', function() {
            //     console.log("🎯 [P1 Button] Finalize P1 Review button clicked");
            //     alert("P1 Review finalization - to be implemented");
            // });
            
            const p2Button = createButton('finalizeP2Button', 'Finalize P2 Review', function() {
                console.log("🎯 [P2 Button] Finalize P2 Review button clicked");
                if (checkAllP2ApplicantsMarked()) {
                    console.log("✅ [P2 Button] All P2 applicants marked, showing modal");
                    document.getElementById('notifyApplicantsModal').style.display = 'block';
                } else {
                    console.warn("⚠️ [P2 Button] Not all P2 applicants marked");
                    alert("Not all P2 applicants have been marked as passed or failed. Please make a decision for all applicants first.");
                }
            });
            
            rightSection.appendChild(p1Button);
            rightSection.appendChild(p2Button);
            console.log("✅ [Fallback] Added both buttons to container");
            return;
        }
    }
    
    // Helper function to create buttons
    function createButton(id, text, clickHandler) {
        const button = document.createElement('button');
        button.id = id;
        button.textContent = text;
        button.style.cssText = `
            padding: 10px 15px;
            font-size: 16px;
            font-weight: bold;
            border: none;
            background-color: #124A5C;
            color: white;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease;
            margin-left: 20px;
            vertical-align: middle;
        `;
        button.addEventListener('click', clickHandler);
        return button;
    }
    
    // Create and place P1 button
    if (p1Header) {
        // Remove existing P1 button if it exists
        const existingP1Button = document.getElementById('finalizeP1Button');
        if (existingP1Button) {
            existingP1Button.remove();
        }
        
        // const p1Button = createButton('finalizeP1Button', 'Finalize P1 Review', function() {
        //     console.log("🎯 [P1 Button] Finalize P1 Review button clicked");
        //     alert("P1 Review finalization - to be implemented");
        // });
        
        // Make the header container flexible if it isn't already
        p1Header.style.display = 'flex';
        p1Header.style.alignItems = 'center';
        p1Header.style.justifyContent = 'space-between';
        
        // Append button to P1 header
        p1Header.appendChild(p1Button);
        console.log("✅ [P1&P2 Header] Added P1 finalize button next to P1 header");
    }
    
    // Create and place P2 button
    if (p2Header) {
        // Remove existing P2 button if it exists
        const existingP2Button = document.getElementById('finalizeP2Button');
        if (existingP2Button) {
            existingP2Button.remove();
        }
        
        const p2Button = createButton('finalizeP2Button', 'Finalize P2 Review', function() {
            console.log("🎯 [P2 Button] Finalize P2 Review button clicked");
            
            if (checkAllP2ApplicantsMarked()) {
                console.log("✅ [P2 Button] All P2 applicants marked, showing modal");
                document.getElementById('notifyApplicantsModal').style.display = 'block';
            } else {
                console.warn("⚠️ [P2 Button] Not all P2 applicants marked");
                alert("Not all P2 applicants have been marked as passed or failed. Please make a decision for all applicants first.");
            }
        });
        
        // Make the header container flexible if it isn't already
        p2Header.style.display = 'flex';
        p2Header.style.alignItems = 'center';
        p2Header.style.justifyContent = 'space-between';
        
        // Append button to P2 header
        p2Header.appendChild(p2Button);
        console.log("✅ [P1&P2 Header] Added P2 finalize button next to P2 header");
    }
    
    console.log("✅ [P1&P2 Header] Finished updating section header buttons");
}

// Make P1 functions globally available
window.handleP1AndP2ReviewFilter = handleP1AndP2ReviewFilter;
window.updateP1AwaitingActionTable = updateP1AwaitingActionTable;
window.updateP1LineManagerReviewTable = updateP1LineManagerReviewTable;
window.createP1TableRow = createP1TableRow;
window.p1passApplicant = p1passApplicant;
window.p1rejectApplicant = p1rejectApplicant;
window.openP1EvaluationModal = openP1EvaluationModal;
window.fetchApplicantDataAndShowModal = fetchApplicantDataAndShowModal;
window.updateSectionHeaderButtonsP1AndP2 = updateSectionHeaderButtonsP1AndP2;

    // Handle the "For Review" filter for P2
    function handleP2ReviewFilter() {
        const mainTable = document.getElementById('mainApplicantTable');
        const applicantStatusSection = document.getElementById('applicantStatusSection');
        const allMainRows = mainTable ? Array.from(mainTable.querySelectorAll('tbody tr')) : [];
        
        // Update the current phase
        const phaseSpans = document.querySelectorAll('#currentPhase, #currentPhase2');
        phaseSpans.forEach(span => span.textContent = "P2 Review");
        
        // Arrays to store rows
        const awaitingRowsP2 = [];
        const declaredRowsP2 = [];
        
        // Process each row and categorize it
        allMainRows.forEach((row, index) => {
            const lastCell = row.querySelector('td:last-child');
            if (!lastCell) return;
            
            const statusSpan = lastCell.querySelector('span');
            if (!statusSpan) return;
            
            const statusText = statusSpan.textContent.trim();
            
            // Extract row data
            const rowData = extractRowData(row, index);
            
            // Check for P2 - HR Evaluation Accomplished
            if (statusText.includes("P2 - HR Evaluation Accomplished")) {
                awaitingRowsP2.push(rowData);
            }
            // Check for P2 - PASSED or P2 - FAILED (including pending)
            else if (statusText.includes("P2 - PASSED") || statusText.includes("P2 - FAILED")) {
                declaredRowsP2.push(rowData);
            }
        });
        
        // Update tables
        updateAwaitingActionTableP2(awaitingRowsP2);
        updateDeclaredResultsTableP2(declaredRowsP2);
        
        // Update section header buttons
        updateSectionHeaderButtonsP2();
    }

    // Extract row data for P1 and P2 (ENHANCED VERSION)
function extractRowData(row, index) {
    const cells = Array.from(row.querySelectorAll('td'));
    const cellData = cells.map(cell => cell.innerHTML);
    
    // Get applicantId, userId and score from row attributes
    const applicantId = row.getAttribute('data-applicantid');
    const userId = row.getAttribute('data-userid'); // This is crucial
    const totalScore = row.getAttribute('data-score') || 'N/A';
    
    // Get name and email
    let applicantName = '';
    let applicantEmail = '';
    
    if (cells.length > 1) {
        const nameCell = cells[1];
        const fullContent = nameCell.innerHTML;
        const nameParts = fullContent.split('<br>');
        
        if (nameParts.length > 0) {
            applicantName = nameParts[0].trim();
        }
        
        if (nameParts.length > 1) {
            const emailHtml = nameParts[1];
            applicantEmail = emailHtml.replace(/<[^>]*>/g, '').trim();
        }
    }
    
    return {
        index: index + 1,
        cells: cellData,
        applicantId: applicantId,
        userId: userId, // Added this
        totalScore: totalScore,
        name: applicantName,
        email: applicantEmail,
        originalRow: row // Keep reference to original row
    };
}
    // Update Awaiting Action table for P2
    function updateAwaitingActionTableP2(awaitingRows) {
        const awaitingActionTable = document.getElementById('awaitingActionTable');
        if (!awaitingActionTable) return;
        
        const awaitingTbody = awaitingActionTable.querySelector('tbody');
        if (!awaitingTbody) return;
        
        // Empty the tbody first
        awaitingTbody.innerHTML = '';
        
        if (awaitingRows.length > 0) {
            // Add the section header
            const headerRow = document.createElement('tr');
            headerRow.classList.add('section-header-row');
            headerRow.innerHTML = `<td colspan="7" style="background-color: #f0f0f0; font-weight: bold; padding: 8px;">List of P2 Applicants Awaiting Review</td>`;
            awaitingTbody.appendChild(headerRow);
            
            // Add each row with Pass/Reject buttons
            awaitingRows.forEach((rowData) => {
                const newRow = createTableRowP2(rowData, false, true); // third parameter for showing action buttons
                awaitingTbody.appendChild(newRow);
            });
        } else {
            // Display no data message
            const messageRow = document.createElement('tr');
            messageRow.innerHTML = `<td colspan="7" class="no-data-message">No applicants awaiting P2 review.</td>`;
            awaitingTbody.appendChild(messageRow);
        }
    }

    // Update Declared Results table for P2
    function updateDeclaredResultsTableP2(declaredRows) {
        const declaredResultsTable = document.getElementById('declaredResultsTable');
        if (!declaredResultsTable) return;
        
        const declaredTbody = declaredResultsTable.querySelector('tbody');
        if (!declaredTbody) return;
        
        // Empty the tbody first
        declaredTbody.innerHTML = '';
        
        if (declaredRows.length > 0) {
            // Add the section header
            const headerRow = document.createElement('tr');
            headerRow.classList.add('section-header-row');
            headerRow.innerHTML = `<td colspan="7" style="background-color: #f0f0f0; font-weight: bold; padding: 8px;">List of P2 Applicants - Declared Results</td>`;
            declaredTbody.appendChild(headerRow);
            
            // Add each row with Toggle Status button
            declaredRows.forEach((rowData) => {
                const newRow = createTableRowP2(rowData, true);
                declaredTbody.appendChild(newRow);
            });
            
            // Setup toggle buttons
            setupToggleStatusButtonsP2();
        } else {
            // Display no data message
            const messageRow = document.createElement('tr');
            messageRow.innerHTML = `<td colspan="7" class="no-data-message">No P2 applicants with declared results.</td>`;
            declaredTbody.appendChild(messageRow);
        }
    }

    // Create table row for P2
    function createTableRowP2(rowData, isForDeclaredResults = false, isForAwaitingAction = false) {
        const newRow = document.createElement('tr');
        
        // Add applicantId as data attribute
        if (rowData.applicantId) {
            newRow.setAttribute('data-applicantid', rowData.applicantId);
        }
        
        // Create cells from stored data
        if (rowData.cells && rowData.cells.length >= 5) {
            // Applicant No
            const cell1 = document.createElement('td');
            cell1.innerHTML = rowData.cells[0];
            newRow.appendChild(cell1);
            
            // Name
            const cell2 = document.createElement('td');
            cell2.innerHTML = rowData.cells[1];
            newRow.appendChild(cell2);
            
            // Department
            const cell3 = document.createElement('td');
            cell3.innerHTML = rowData.cells[2];
            newRow.appendChild(cell3);
            
            // Position
            const cell4 = document.createElement('td');
            cell4.innerHTML = rowData.cells[3];
            newRow.appendChild(cell4);
            
            // Total Score
            const cell5 = document.createElement('td');
            cell5.textContent = rowData.totalScore || 'N/A';
            newRow.appendChild(cell5);
            
            // Status
            const cell6 = document.createElement('td');
            const statusMatch = rowData.cells[4].match(/<span><strong>Status:<\/strong>\s*([^<]+)<\/span>/);
            const status = statusMatch ? statusMatch[1] : 'Unknown';
            cell6.textContent = status;
            newRow.appendChild(cell6);
            
            // Add action column based on table type
            if (isForAwaitingAction) {
                // Add View Evaluation and Pass/Reject buttons for awaiting action
                const actionCell = document.createElement('td');
                actionCell.innerHTML = `
                    <div style="display: flex; flex-direction: column; gap: 5px;">
                        <a href="/hr/view-evaluation/${rowData.applicantId}" target="_blank">
                            <button class="btn-view-evaluation" style="background-color: white; color: black; border: 1px solid #124A5C; padding: 6px 12px; border-radius: 4px; width: 100%; font-size: 14px; transition: background-color 0.3s ease, color 0.3s ease; cursor: pointer;"
                                onmouseover="this.style.backgroundColor='#124A5C'; this.style.color='white';"
                                onmouseout="this.style.backgroundColor='white'; this.style.color='black';">
                                View Evaluation
                            </button>
                        </a>
                        <div style="display: flex; gap: 5px;">
                            <button 
                                class="btn-pass" 
                                onclick="p2passApplicant('${rowData.applicantId}')"
                                style="background-color: #27ae60; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 14px; flex: 1;">
                                Pass
                            </button>
                            <button 
                                class="btn-reject" 
                                onclick="p2rejectApplicant('${rowData.applicantId}')"
                                style="background-color: #e74c3c; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 14px; flex: 1;">
                                Reject
                            </button>
                        </div>
                    </div>
                `;
                newRow.appendChild(actionCell);
            } else if (isForDeclaredResults) {
                // Add Toggle Status button for declared results
                const toggleCell = document.createElement('td');
                toggleCell.innerHTML = `
                    <button 
                        class="btn-toggle-status" 
                        data-applicantid="${rowData.applicantId}"
                        onclick="toggleP2ApplicantStatus(this)"
                    >
                        ${status.includes('PASSED') ? 'Passed' : 'Failed'}
                    </button>
                `;
                newRow.appendChild(toggleCell);
            }
        }
        
        return newRow;
    }

    // Setup toggle status buttons for P2
    function setupToggleStatusButtonsP2() {
        const buttons = document.querySelectorAll('.btn-toggle-status:not([data-has-listener])');
        
        buttons.forEach(button => {
            button.setAttribute('data-has-listener', 'true');
            
            // Set initial button state based on current status
            const row = button.closest('tr');
            if (row) {
                const statusCell = row.querySelector('td:nth-child(6)');
                if (statusCell) {
                    const currentStatus = statusCell.textContent.trim();
                    if (currentStatus.includes('PASSED')) {
                        button.textContent = 'Passed';
                        button.classList.add('status-passed');
                        button.classList.remove('status-failed');
                    } else if (currentStatus.includes('FAILED')) {
                        button.textContent = 'Failed';
                        button.classList.add('status-failed');
                        button.classList.remove('status-passed');
                    }
                }
            }
        });
    }

    // Function to filter table based on search input
    function filterTable() {
        const searchValue = document.getElementById("searchBar").value.toLowerCase();
        const rows = document.querySelectorAll('.tracking-table tbody tr');

        rows.forEach(row => {
            const cells = row.querySelectorAll("td");
            const rowText = Array.from(cells)
                .map(cell => cell.textContent.toLowerCase())
                .join(" ");
            
            if (rowText.includes(searchValue)) {
                row.style.display = ""; // Show if search term matches
            } else {
                row.style.display = "none"; // Hide otherwise
            }
        });
    }

    function highlightActiveFilter(status) {
        const buttons = document.querySelectorAll(".filter-button");
        buttons.forEach(button => {
            button.classList.remove("active");
        });
        
        const activeButton = document.getElementById(`filter-${status === "review" ? "review" : status}`);
        if (activeButton) {
            activeButton.classList.add("active");
        }
    }

    // Initialize buttons for filtering by status
    const buttons = {
        all: document.getElementById("filter-all"),
        review: document.getElementById("filter-review"),
        evaluation: document.getElementById("filter-evaluation"),
        onboarding: document.getElementById("filter-onboarding"),
    };

    // Add event listeners to filter buttons
    buttons.all.addEventListener("click", () => filterRowsByStatus("all"));
    buttons.review.addEventListener("click", () => filterRowsByStatus("review"));
    buttons.evaluation.addEventListener("click", () => filterRowsByStatus("for-evaluation"));
    buttons.onboarding.addEventListener("click", () => filterRowsByStatus("for-onboarding"));

    // Search functionality
    document.querySelector(".search-button").addEventListener("click", filterTable);
    document.getElementById("searchBar").addEventListener("keypress", function(e) {
        if (e.key === "Enter") {
            e.preventDefault(); // Prevent form submission if inside a form
            filterTable();
        }
    });

    // Set button text dynamically based on row class
    const rows = document.querySelectorAll('.tracking-table tbody tr');
    rows.forEach(row => {
        const statusCell = row.querySelector('td:last-child');
        const button = statusCell.querySelector('button');
        if (row.classList.contains('status-for-review')) {
            button.textContent = "For Review";
        } else if (row.classList.contains('status-for-onboarding')) {
            button.textContent = "For Onboarding";
        } else if (row.classList.contains('status-for-evaluation')) {
            button.textContent = "For Evaluation";
        }
    });

    // Display all rows initially
    // filterRowsByStatus("all");
    const allButton = document.getElementById("filter-all");
    if (allButton) {
        allButton.classList.add("active");
    }
    
    // Show all elements by default without running filters
    const mainTable = document.getElementById('mainApplicantTable');
    const onboardingTable = document.getElementById('onboardingTable');
    const applicantStatusSection = document.getElementById('applicantStatusSection');
    
    if (mainTable) mainTable.style.display = "";
    if (onboardingTable) onboardingTable.style.display = "";
    if (applicantStatusSection) applicantStatusSection.style.display = "none";
});


document.addEventListener("DOMContentLoaded", function () {
    const evaluationButtons = document.querySelectorAll(".btn-evaluation");

    evaluationButtons.forEach(button => {
        button.addEventListener("click", function () {
            window.location.href = "/hr/evaluation-form";
        });
    });
});

// Function to open the modal
function openModal(modalId) {
    document.getElementById(modalId).style.display = "block";
}

// Function to close the modal
function closeModal(modalId) {
    document.getElementById(modalId).style.display = "none";
}

// Function for sending notification to the applicant
function sendNotification() {
    alert("Sent notification to applicant");
    closeModal('releaseJobOfferModal');
}

document.addEventListener('DOMContentLoaded', function() {
    // Add click event listener for onboarding buttons
    document.addEventListener('click', function(event) {
        if (event.target.classList.contains('onboarding-trigger')) {
            const row = event.target.closest('tr');
            if (!row) {
                console.error('❌ Could not find parent row');
                alert('Error: Could not find applicant data');
                return;
            }
            
            // Extract data from row attributes
            const userId = row.getAttribute('data-userid') || '';
            const applicantId = row.getAttribute('data-applicantid') || '';
            const firstName = row.getAttribute('data-firstname') || '';
            const lastName = row.getAttribute('data-lastname') || '';
            const birthDate = row.getAttribute('data-birthdate') || '';
            const email = row.getAttribute('data-email') || '';
            const phoneNo = row.getAttribute('data-phone') || '';
            const jobId = row.getAttribute('data-jobid') || '';
            const jobTitle = row.getAttribute('data-jobtitle') || '';
            
            console.log('🔍 Extracted data from row:', {
                userId, applicantId, firstName, lastName, birthDate, email, phoneNo, jobId, jobTitle
            });
            
            // Validate that we have the essential data
            if (!userId) {
                console.error('❌ Missing userId in row data');
                alert('Error: Missing user ID. Please refresh the page and try again.');
                return;
            }
            
            if (!jobId) {
                console.error('❌ Missing jobId in row data');
                console.log('🔍 All row attributes:', {
                    userId: row.getAttribute('data-userid'),
                    applicantId: row.getAttribute('data-applicantid'),
                    jobId: row.getAttribute('data-jobid'),
                    firstName: row.getAttribute('data-firstname'),
                    lastName: row.getAttribute('data-lastname')
                });
                alert('Error: Missing job ID. Please ensure the applicant has a valid job assignment.');
                return;
            }
            
            // Use userId as applicantId fallback if needed
            const finalApplicantId = applicantId || userId;
            
            // Call the modal function
            openOnboardingModal(userId, finalApplicantId, firstName, lastName, birthDate, email, phoneNo, jobId, jobTitle);
        }
    });
});

function openOnboardingModal(userId, applicantId, firstName, lastName, birthDate, email, phoneNo, jobId, jobTitle) {
    console.log('🔧 DEBUG: Opening onboarding modal with parameters:');
    console.log('  userId:', userId, typeof userId);
    console.log('  applicantId:', applicantId, typeof applicantId);
    console.log('  firstName:', firstName, typeof firstName);
    console.log('  lastName:', lastName, typeof lastName);
    console.log('  birthDate:', birthDate, typeof birthDate);
    console.log('  email:', email, typeof email);
    console.log('  phoneNo:', phoneNo, typeof phoneNo);
    console.log('  jobId:', jobId, typeof jobId);
    console.log('  jobTitle:', jobTitle, typeof jobTitle);
    
    // Check if modal element exists
    const modal = document.getElementById('moveToOnboardingModal');
    if (!modal) {
        console.error('❌ Modal element "moveToOnboardingModal" not found!');
        alert('Error: Onboarding modal not found in the DOM');
        return;
    }
    
    // Validate required parameters with better error handling
    if (!userId || userId === 'undefined' || userId === '' || userId === 'null') {
        console.error('❌ Missing or invalid userId:', userId);
        alert('Error: Invalid User ID. Please check if the applicant data is complete.');
        return;
    }
    
    if (!applicantId || applicantId === 'undefined' || applicantId === '' || applicantId === 'null') {
        console.error('❌ Missing or invalid applicantId:', applicantId);
        console.log('🔍 Available applicant data:', { userId, firstName, lastName, email, jobId, jobTitle });
        
        // Try to continue with userId if applicantId is missing
        console.warn('⚠️ Using userId as fallback for applicantId');
        applicantId = userId;
    }
    
    if (!jobId || jobId === 'undefined' || jobId === '' || jobId === 'null') {
        console.error('❌ Missing or invalid jobId:', jobId);
        alert('Error: Invalid Job ID. Please ensure the job position data is complete.');
        return;
    }
    
    // Set the hidden input values
    const userIdInput = document.getElementById('onboarding-user-id');
    const applicantIdInput = document.getElementById('onboarding-applicant-id');
    const jobIdInput = document.getElementById('onboarding-job-id');
    
    if (!userIdInput || !applicantIdInput || !jobIdInput) {
        console.error('❌ Missing hidden input elements');
        alert('Error: Modal form elements not found');
        return;
    }
    
    userIdInput.value = userId;
    applicantIdInput.value = applicantId;
    jobIdInput.value = jobId;
    
    console.log('✅ Set hidden inputs:', {
        userId: userIdInput.value,
        applicantId: applicantIdInput.value,
        jobId: jobIdInput.value
    });

    // Set the visible applicant information
    const nameElement = document.getElementById('applicant-name-onboarding');
    const birthdayElement = document.getElementById('applicant-birthday-onboarding');
    const emailElement = document.getElementById('applicant-email-onboarding');
    const contactElement = document.getElementById('applicant-contact-onboarding');
    const positionElement = document.getElementById('applicant-position-onboarding');
    
    if (nameElement) nameElement.textContent = `${lastName}, ${firstName}`;
    if (birthdayElement) birthdayElement.textContent = birthDate || 'Not available';
    if (emailElement) emailElement.textContent = email || 'Not available';
    if (contactElement) contactElement.textContent = phoneNo || 'Not available';
    if (positionElement) positionElement.textContent = jobTitle || 'Not available';

    console.log('✅ Set visible information:', {
        name: nameElement?.textContent,
        birthday: birthdayElement?.textContent,
        email: emailElement?.textContent,
        contact: contactElement?.textContent,
        position: positionElement?.textContent
    });

    // Fetch start date
    const lmSetDateElement = document.getElementById('lm-set-date');
    if (lmSetDateElement) {
        lmSetDateElement.textContent = 'Loading start date...';
        lmSetDateElement.style.color = '#6c757d';
    }

    console.log('📡 Fetching start date for userId:', userId);
    
    fetch(`/hr/get-start-date?userId=${encodeURIComponent(userId)}`)
        .then(response => {
            console.log('📡 Start date response status:', response.status);
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('📡 Start date response data:', data);
            
            if (data.success && data.startDate) {
                const date = new Date(data.startDate);
                const formattedDate = date.toLocaleDateString('en-US', { 
                    weekday: 'long', 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                });

                if (lmSetDateElement) {
                    lmSetDateElement.textContent = formattedDate;
                    lmSetDateElement.style.color = '#28a745';
                    lmSetDateElement.style.fontWeight = 'bold';
                }

                const startDateInput = document.getElementById('start-date-input');
                if (startDateInput) {
                    const formattedInputDate = date.toISOString().split('T')[0];
                    startDateInput.value = formattedInputDate;
                }
                
                console.log('✅ Successfully set start date:', formattedDate);
            } else {
                console.log('ℹ️ No start date found');
                handleNoStartDate();
            }
        })
        .catch(error => {
            console.error('❌ Error fetching start date:', error);
            if (lmSetDateElement) {
                lmSetDateElement.textContent = 'Error loading date';
                lmSetDateElement.style.color = '#dc3545';
            }
            setDefaultStartDate();
        });

    // Display the modal
    modal.style.display = 'block';
    console.log('✅ Modal displayed successfully');
}

// Helper function to set default start date if none found
function setDefaultStartDate() {
    const startDateInput = document.getElementById('start-date-input');
    if (startDateInput) {
        const nextWeek = new Date();
        nextWeek.setDate(nextWeek.getDate() + 7);
        startDateInput.value = nextWeek.toISOString().split('T')[0];
        console.log('✅ Set default start date:', startDateInput.value);
    }
}

function handleNoStartDate() {
    const lmSetDateElement = document.getElementById('lm-set-date');
    if (lmSetDateElement) {
        lmSetDateElement.textContent = 'No start date set by Line Manager yet';
        lmSetDateElement.style.color = '#ffc107';
    }
    setDefaultStartDate();
}
// Helper function to set default start date
function setDefaultStartDate() {
    console.log('🔧 Setting default start date');
    const startDateInput = document.getElementById('start-date-input');
    if (startDateInput) {
        // Set default to next Monday or a week from today
        const today = new Date();
        const nextWeek = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);
        startDateInput.value = nextWeek.toISOString().split('T')[0];
        console.log('✅ Default start date set:', startDateInput.value);
    } else {
        console.warn('⚠️ Start date input element not found');
    }
}
function confirmOnboarding() {
    console.log('🔧 ENHANCED: Starting onboarding confirmation...');
    
    // Get values from the modal with null checks
    const userIdInput = document.getElementById('onboarding-user-id');
    const applicantIdInput = document.getElementById('onboarding-applicant-id');
    const jobIdInput = document.getElementById('onboarding-job-id');
    const startDateInput = document.getElementById('start-date-input');
    
    if (!userIdInput || !applicantIdInput || !jobIdInput || !startDateInput) {
        console.error('❌ Required modal elements not found');
        alert('Error: Modal form elements not found. Please try refreshing the page.');
        return;
    }
    
    const userId = userIdInput.value;
    const applicantId = applicantIdInput.value;
    const jobId = jobIdInput.value;
    const startDate = startDateInput.value;
    
    console.log('Onboarding data:', { userId, applicantId, jobId, startDate });
    
    // Validate required fields
    if (!userId || !applicantId || !jobId || !startDate) {
        alert('Missing required information. Please ensure all fields are filled.');
        console.error('❌ Missing required fields:', { userId, applicantId, jobId, startDate });
        return;
    }
    
    // Validate start date is not in the past
    const selectedDate = new Date(startDate);
    const today = new Date();
    today.setHours(0, 0, 0, 0); // Reset time to start of day for comparison
    
    if (selectedDate < today) {
        alert('Start date cannot be in the past. Please select a valid future date.');
        return;
    }
    
    // Show loading state
    const confirmButton = document.getElementById('confirmButton');
    if (confirmButton) {
        const originalButtonText = confirmButton.textContent;
        confirmButton.disabled = true;
        confirmButton.textContent = 'Processing...';
        confirmButton.style.backgroundColor = '#6c757d';
    }
    
    // Send the onboarding checklist
    fetch('/hr/send-onboarding-checklist', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            userId: userId,
            applicantId: applicantId,
            jobId: jobId,
            startDate: startDate
        }),
    })
    .then(response => {
        console.log('✅ Onboarding API response status:', response.status);
        
        if (!response.ok) {
            return response.text().then(text => {
                throw new Error(`HTTP ${response.status}: ${response.statusText} - ${text}`);
            });
        }
        
        return response.json();
    })
    .then(data => {
        console.log('✅ Onboarding API response data:', data);
        
        if (data.success) {
            // Success message
            alert(`✅ Success! ${data.message || 'Applicant has been moved to onboarding and the checklist has been sent.'}`);
            
            // Close the modal
            closeModal('moveToOnboardingModal');
            
            // Refresh the page or update the UI
            setTimeout(() => {
                window.location.reload(); // Refresh to show updated status
            }, 1000);
            
        } else {
            throw new Error(data.message || 'Failed to send onboarding checklist');
        }
    })
    .catch(error => {
        console.error('❌ Error sending onboarding checklist:', error);
        alert(`❌ Error: ${error.message || 'Failed to send onboarding checklist. Please try again.'}`);
    })
    .finally(() => {
        // Reset button state
        const confirmButton = document.getElementById('confirmButton');
        if (confirmButton) {
            confirmButton.disabled = false;
            confirmButton.textContent = 'Confirm';
            confirmButton.style.backgroundColor = '#124A5C';
        }
    });
}
function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'none';
        console.log(`✅ Closed modal: ${modalId}`);
    } else {
        console.warn(`⚠️ Modal not found: ${modalId}`);
    }
}

document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 Initializing enhanced onboarding system...');
    
    // Check if required elements exist
    const requiredElements = [
        'moveToOnboardingModal',
        'onboarding-user-id', 
        'onboarding-applicant-id',
        'onboarding-job-id',
        'start-date-input'
    ];
    
    const missingElements = requiredElements.filter(id => !document.getElementById(id));
    
    if (missingElements.length > 0) {
        console.warn('⚠️ Missing required elements:', missingElements);
    } else {
        console.log('✅ All required modal elements found');
    }
    
    // Fix for addEventListener error - check if elements exist before adding listeners
    const searchButton = document.querySelector(".search-button");
    if (searchButton) {
        searchButton.addEventListener("click", function() {
            // Search functionality if needed
            console.log('Search button clicked');
        });
    }
    
    const searchBar = document.getElementById("searchBar");
    if (searchBar) {
        searchBar.addEventListener("keypress", function(e) {
            if (e.key === "Enter") {
                e.preventDefault();
                console.log('Search triggered from Enter key');
            }
        });
    }
    
    // Fix for element with textContent error
    const phaseElements = document.querySelectorAll('#currentPhase, #currentPhase2');
    phaseElements.forEach(element => {
        if (element) {
            // Only set textContent if element exists
            console.log('Found phase element:', element.id);
        }
    });
    
    // Update onboarding buttons after a delay to ensure data is loaded
    setTimeout(() => {
        try {
            updateOnboardingButtonsForUserIdEnhanced();
        } catch (error) {
            console.error('❌ Error updating onboarding buttons:', error);
        }
    }, 2000);
    
    // Re-update buttons when filters are applied
    const filterButtons = document.querySelectorAll('.filter-button');
    filterButtons.forEach(button => {
        if (button) {
            button.addEventListener('click', function() {
                setTimeout(() => {
                    try {
                        updateOnboardingButtonsForUserIdEnhanced();
                    } catch (error) {
                        console.error('❌ Error updating onboarding buttons after filter:', error);
                    }
                }, 1000);
            });
        }
    });
});

// Make functions globally available
if (typeof window !== 'undefined') {
    window.openOnboardingModal = openOnboardingModal;
    window.confirmOnboarding = confirmOnboarding;
    window.updateOnboardingButtonsForUserIdEnhanced = updateOnboardingButtonsForUserIdEnhanced;
    window.handleNoStartDate = handleNoStartDate;
    window.setDefaultStartDate = setDefaultStartDate;
    window.closeModal = closeModal;
}

function updateOnboardingButtonsForUserIdEnhanced() {
   console.log('🔧 ENHANCED: Updating onboarding buttons to use correct data...');
    
    // Find all onboarding buttons
    const onboardingButtons = document.querySelectorAll('.btn-onboarding, button[onclick*="openOnboardingModal"]');
    console.log(`Found ${onboardingButtons.length} onboarding buttons to update`);
    
    if (onboardingButtons.length === 0) {
        console.log('ℹ️ No onboarding buttons found to update');
        return;
    }
    
    onboardingButtons.forEach((button, index) => {
        const row = button.closest('tr');
        if (!row) {
            console.warn(`Button ${index}: No parent row found`);
            return;
        }
        
        // Try to get userId from data attribute first
        let userId = row.getAttribute('data-userid');
        
        // If no userId in data attribute, try to extract from existing onclick
        if (!userId) {
            const currentOnclick = button.getAttribute('onclick');
            if (currentOnclick) {
                const userIdMatch = currentOnclick.match(/openOnboardingModal\s*\(\s*['"]([^'"]*)['"]/);
                if (userIdMatch && userIdMatch[1]) {
                    userId = userIdMatch[1];
                    row.setAttribute('data-userid', userId); // Cache it for future use
                }
            }
        }
        
        if (!userId) {
            console.warn(`Button ${index}: No userId found - skipping`);
            return;
        }
        
        // Extract other data from the row
        const cells = row.querySelectorAll('td');
        let applicantId = '';
        let firstName = '';
        let lastName = '';
        let email = '';
        let phoneNo = '';
        let jobId = '';
        let jobTitle = '';
        let birthDate = '';
        
        // Try to get data from row attributes first
        applicantId = row.getAttribute('data-applicant-id') || '';
        jobId = row.getAttribute('data-job-id') || '';
        
        // Extract from cell content
        if (cells.length >= 2) {
            const nameCell = cells[1];
            if (nameCell) {
                const nameContent = nameCell.innerHTML || nameCell.textContent;
                const lines = nameContent.split(/\n|<br\s*\/?>/i).map(line => line.trim()).filter(line => line);
                
                if (lines.length > 0) {
                    const fullName = lines[0];
                    const nameParts = fullName.split(',');
                    lastName = nameParts[0] ? nameParts[0].trim() : '';
                    firstName = nameParts[1] ? nameParts[1].trim() : '';
                }
                
                if (lines.length > 1) {
                    // Extract email from second line
                    const emailMatch = lines[1].match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/);
                    if (emailMatch) {
                        email = emailMatch[1];
                    }
                }
            }
        }
        
        // Get job title from position column
        if (cells.length >= 4) {
            const positionCell = cells[3];
            if (positionCell) {
                jobTitle = positionCell.textContent.trim();
            }
        }
        
        // Try to get missing data from global applicantsData if available
        if (typeof window !== 'undefined' && window.applicantsData && (!applicantId || !jobId || !email)) {
            const applicantData = window.applicantsData.find(a => a.userId == userId);
            if (applicantData) {
                if (!applicantId) applicantId = applicantData.applicantId || '';
                if (!jobId) jobId = applicantData.jobId || '';
                if (!email) email = applicantData.userEmail || '';
                if (!jobTitle) jobTitle = applicantData.jobTitle || '';
                if (!birthDate) birthDate = applicantData.birthDate || '';
                if (!phoneNo) phoneNo = applicantData.phoneNo || '';
                
                console.log(`Button ${index}: Enhanced data from applicantsData for userId ${userId}`);
            }
        }
        
        // Update button onclick with all available data
        const newOnclick = `openOnboardingModal('${userId}', '${applicantId}', '${firstName}', '${lastName}', '${birthDate}', '${email}', '${phoneNo}', '${jobId}', '${jobTitle}')`;
        button.setAttribute('onclick', newOnclick);
        
        console.log(`✅ Button ${index} updated for userId: ${userId}`);
        console.log(`  Data: ${firstName} ${lastName}, ${email}, ${jobTitle}`);
    });
    
    console.log('✅ Onboarding buttons update completed');
}


document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 Initializing enhanced onboarding system...');
    
    // Update onboarding buttons after a delay to ensure data is loaded
    setTimeout(() => {
        updateOnboardingButtonsForUserIdEnhanced();
    }, 2000);
    
    // Re-update buttons when filters are applied
    const filterButtons = document.querySelectorAll('.filter-button');
    filterButtons.forEach(button => {
        button.addEventListener('click', function() {
            setTimeout(() => {
                updateOnboardingButtonsForUserIdEnhanced();
            }, 1000);
        });
    });
});


// Make functions globally available
window.openOnboardingModal = openOnboardingModal;
window.confirmOnboarding = confirmOnboarding;
window.updateOnboardingButtonsForUserIdEnhanced = updateOnboardingButtonsForUserIdEnhanced;
window.handleNoStartDate = handleNoStartDate;
window.setDefaultStartDate = setDefaultStartDate;
// Function for confirming account setup
function confirmAccountSetup() {
    alert("Account setup confirmed");
    closeModal('accountSetupReminderModal');
}

document.addEventListener("DOMContentLoaded", function() {
    // Modal functionality for the notify applicants modal
    const notifyModal = document.getElementById("notifyApplicantsModal");
    
    if (notifyModal) {
        const closeButton = notifyModal.querySelector(".close-button");
        const backButton = notifyModal.querySelector("#backButton");
        
        // Close the modal when the close button (X) is clicked
        if (closeButton) {
            closeButton.addEventListener("click", function() {
                notifyModal.style.display = "none";
            });
        }
        
        // Close the modal when the back button is clicked
        if (backButton) {
            backButton.addEventListener("click", function() {
                notifyModal.style.display = "none";
            });
        }
        
        // Close the modal if the user clicks outside of it
        window.addEventListener("click", function(event) {
            if (event.target == notifyModal) {
                notifyModal.style.display = "none";
            }
        });
    }
});

// Function to open the modal
function openModal(name, age, email, contact) {
    document.getElementById("applicant-name").value = name;
    document.getElementById("applicant-birthday").value = age;
    document.getElementById("applicant-email").value = email;
    document.getElementById("applicant-contact").value = contact;
    // document.getElementById("hrInitialScreeningModalHtml").style.display = "block";
}

// Add event listeners to all "For Review" buttons
document.querySelectorAll(".btn-review").forEach(button => {
    button.addEventListener("click", function() {
        const parentRow = button.closest("tr");
        const name = parentRow.querySelector("td:nth-child(2)").innerText.split("\n")[0];
        const email = parentRow.querySelector("td:nth-child(2)").innerText.split("\n")[1];
        const age = "N/A";  // Placeholder for age
        const contact = "N/A";  // Placeholder for contact
        openModal(name, age, email, contact);
    });
});


// Close modal when clicking outside of the modal content
window.addEventListener("click", function(event) {
    if (event.target == document.getElementById("reviewModal")) {
        document.getElementById("reviewModal").style.display = "none";
    }
});

// Back button functionality
document.getElementById("backButton").addEventListener("click", function() {
    document.getElementById("reviewModal").style.display = "none";
});

// Confirm button functionality
document.getElementById("confirmButton").addEventListener("click", function() {
    alert("Applicant has been selected and recommended for panel interview.");
    document.getElementById("reviewModal").style.display = "none";
});

document.querySelectorAll('.action-required-btn').forEach(button => {
    button.addEventListener('click', function() {
        const mrfId = this.getAttribute('data-mrfid');
        window.location.href = `/hr/view-mrf/${mrfId}`;  // Redirect to the MRF page
    });
});

// Toggle active class for sidebar links
document.querySelectorAll('.sidebar ul li a').forEach(link => {
    link.addEventListener('click', function() {
        document.querySelectorAll('.sidebar ul li a').forEach(link => link.classList.remove('active'));
        this.classList.add('active');
    });
});

// Toggle collapsible content
document.querySelectorAll('.collapsible-header').forEach(header => {
    header.addEventListener('click', function() {
        var content = this.nextElementSibling;
        if (content.style.display === 'block') {
            content.style.display = 'none';
        } else {
            // Hide all other collapsible contents
            document.querySelectorAll('.collapsible-content').forEach(item => {
                if (item !== content) {
                    item.style.display = 'none';
                }
            });
            content.style.display = 'block';
        }
    });
});

function rejectHRInitialScreeningModal() {
    const userIdElement = document.getElementById("userId");
    if (!userIdElement) {
        alert("Error: userId is missing. Please try again.");
        return;
    }

    const userIdRaw = userIdElement.value.trim();
    console.log("User ID (raw):", userIdRaw);

    const userId = parseInt(userIdRaw, 10);
    console.log("User ID (parsed):", userId);

    if (isNaN(userId)) {
        alert("Error: User ID is invalid. Please try again.");
        return;
    }

    // Confirm reject action
    if (confirm("Are you sure you want to reject this applicant? This action cannot be undone.")) {
        fetch('/hr/applicant-tracker-jobposition/P1HRFailed', {
            method: 'POST', 
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userId }), // Only send userId
        })
        .then(response => response.json())
        .then(data => {
            console.log("Server Response:", data);

            if (data.success) {
                const modal = document.getElementById('hrInitialScreeningModalHtml');
                if (modal) {
                    modal.style.display = 'none';
                }
                alert("Successfully updated applicant status to P1 - HR FAILED!");
                location.reload(); // Reload the page to reflect the changes
            } else {
                alert("Error updating applicant status: " + data.message);
            }
        })
        .catch(error => {
            console.error("Fetch Error:", error);
            alert("Failed to update applicant status.");
        });
    }
}


// Enhanced close button handlers
document.addEventListener('DOMContentLoaded', function() {
    // Close buttons for both modals
    document.querySelectorAll('.review-close-button').forEach(button => {
        button.addEventListener('click', function() {
            const modal = this.closest('.review-modal');
            if (modal) {
                modal.style.display = 'none';
            }
        });
    });
    
    // Back buttons
    const backButton = document.getElementById('backButton');
    if (backButton) {
        backButton.addEventListener('click', function() {
            document.getElementById('hrInitialScreeningModalHtml').style.display = 'none';
        });
    }
    
    const finalBackButton = document.getElementById('finalBackButton');
    if (finalBackButton) {
        finalBackButton.addEventListener('click', function() {
            document.getElementById('hrInitialScreeningDecisionModal').style.display = 'none';
        });
    }
    
    // Close modals when clicking outside
    window.addEventListener('click', function(event) {
        const initialModal = document.getElementById('hrInitialScreeningModalHtml');
        const finalModal = document.getElementById('hrInitialScreeningDecisionModal');
        
        if (event.target === initialModal) {
            initialModal.style.display = 'none';
        }
        if (event.target === finalModal) {
            finalModal.style.display = 'none';
        }
    });
});

// Enhanced console logging for debugging
console.log("✅ [P2 Integration] P2 Email Integration JavaScript loaded successfully");
console.log("📧 [P2 Integration] Available P2 functions:", [
    'p2passApplicant',
    'p2rejectApplicant', 
    'toggleP2ApplicantStatus',
    'finalizeP2Review',
    'showP2PassedEmailModal',
    'showP2FailedEmailModal',
    'openGmailForP2Passed',
    'openGmailForP2Failed',
    'updateP2ApplicantStatuses',
    'checkAllP2ApplicantsMarked',
    'startP2GmailIntegrationFlow'
]);
</script>

</body>
</html>

