<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Applicant Tracker - Job Position</title>
    <link rel="stylesheet" href="/css/sidebar.css"> <!-- Linking Sidebar CSS -->
    <link rel="stylesheet" href="/css/linemanager.css"> <!-- Linking Main Content CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"> <!-- FontAwesome for icons -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <style>

.review-modal-reject-button {
    background-color: #e74c3c;
    color: white;
    border: none;
    padding: 10px 20px;
    margin: 0 10px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s ease;
}

.review-modal-reject-button:hover {
    opacity: 0.8;
}


        /* Add this CSS to your existing styles */

/* Center the scores table and enhance its appearance */
.scores-table {
    margin: 0 auto;  /* Center the table horizontally */
    width: 80%;      /* Control the width of the table */
    border-collapse: collapse;
    margin-bottom: 20px;
    text-align: center; /* Center text within the table */
}

.scores-table th, 
.scores-table td {
    padding: 8px 12px;
    border: 1px solid #ddd;
}

.scores-table th {
    background-color: #f2f2f2;
}

.scores-table tr:nth-child(even) {
    background-color: #f9f9f9;
}

/* Add a container around the scores section to center all elements within */
.scores-section {
    text-align: center;
    margin: 15px 0;
}

/* Style for the computation verdict section */
.computation-verdict {
    text-align: center;
    margin: 15px 0;
    padding: 10px;
    font-size: 16px;
    background-color: #f9f9f9;
    border-radius: 5px;
}

        body {
            font-family: 'Inter', sans-serif;
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        .main-content {
            margin-left: 350px;
            padding: 20px;
            width: calc(100% - 350px);
            background-color: #FFFFFF;
        }

        .header-section {
            margin-bottom: 10px;
            margin-left: 5px;
            font-size: 24px;
            text-align: left;
        }

        .subheader {
            font-size: 20px;
            margin-left: 5px;
            margin-bottom: 20px;
            color: #555;
        }

        .tracking-section {
            background-color: #FFFFFF;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            margin: 10px 5px;
        }

        .search-container {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 15px;
        }

        .search-bar {
            padding: 8px;
            width: 370px;
            font-size: 16px;
            border: 1px solid #ddd;
        }

        .search-button {
            margin-left: 10px;
            background-color: #124A5C;
            color: white;
            border: none;
            padding: 10px;
            cursor: pointer;
            font-size: 16px;
        }

        .right-section {
            display: flex;
            gap: 10px;
        }

        .right-section button {
            padding: 10px 15px;
            font-size: 16px;
            font-weight: bold;
            border: none;
            background-color:#124A5C;
            color: white;
            transition: background-color 0.3s ease;
        }

        .right-section button:hover {
            background-color: #B4E3E3       ;
            color: white;
        }

        .tracking-table {
            width: 100%;
            border-collapse: collapse;
        }

        .tracking-table th, 
        .tracking-table td {
            padding: 10px 10px;
            border: 1px solid #ddd;
        }

        .tracking-table th,
        .tracking-table td {
            text-align: left;
        }

        .tracking-table th:nth-child(1),
        .tracking-table td:nth-child(1) {
            width: 10%; 
        }

        .tracking-table th:nth-child(2),
        .tracking-table td:nth-child(2) {
            width: 20%;
        }

        .tracking-table th:nth-child(3),
        .tracking-table td:nth-child(3) {
            width: 15%; 
        }

        .tracking-table th:nth-child(4),
        .tracking-table td:nth-child(4) {
            width: 15%; 
        }

        .tracking-table td:last-child {
            display: flex;
            justify-content: space-between; 
            align-items: center;
        }

        .tracking-table td:last-child span {
            text-align: left; 
            flex-grow: 1;
        }

        .tracking-table th,
        .tracking-table td {
            text-align: left;
        }

        .tracking-table td:last-child button {
            margin-left: 10px; 
        }
        .tracking-table tr:hover {
            background-color: #f1f1f1;
        }
       
        .job-title-container {
            display: flex;
            align-items: center;
        }

        /* Style for status circle */
        .status-circle {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px; 
        }

        /* Green status circle */
        .status-circle.green {
            background-color: green;
        }

        /* Gray status circle */
        .status-circle.gray {
            background-color: gray;
        }

        /* Button styling for status actions */
        .status-button {
            background-color: white; 
            color: black; 
            border: 1px solid #124A5C; 
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 14px;
            cursor: pointer;
            text-align: center;
            width: auto;
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        .status-button:hover {
            background-color: #124A5C; 
            color: white; 
        }

        .btn-review, .btn-evaluation, .btn-onboarding {
            background-color: white;
            color: black;
            border: 1px solid #124A5C;
            padding: 10px 20px;
            cursor: pointer;
            border-radius: 5px;
            font-size: 14px;
            transition: background-color 0.3s ease, color 0.3s ease;
            width: 150px;
            text-align: center; 
        }

        .btn-review:hover, .btn-evaluation:hover, .btn-onboarding:hover {
            background-color: #124A5C;
            color: white;
        }
        .set-interview-button {
                    padding: 10px 20px;
                    background-color: #124A5C;
                    color: white;
                    border: none;
                    cursor: pointer;
                    font-size: 16px;
                    margin-top: 20px;
                    display: block;
                    width: 20%;
                    text-align: center;
                }
                .set-interview-button:hover {
                    background-color: #B4E3E3       ;
                    color: white;
                }


        .set-finalize-review-button {
            position: relative; 
            margin: 5px 10px;
            background-color: #124A5C;
            color: white;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            border-radius: 5px;
            width: auto; 
            min-width: 200px; 
            white-space: nowrap;
            text-align: center; 
            font-size: 16px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); 
            transition: background-color 0.3s ease;
        }

        .set-finalize-review-button:hover {
            background-color: #B4E3E3;
            color: #124A5C; 
        }


        .finalize-container {
            position: fixed;
            bottom: 20px; 
            right: 20px;  
            display: none;
            background-color: rgba(255, 255, 255, 0.9); 
            border: 1px solid #ccc; 
            padding: 10px; 
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            z-index: 1000; 
        }

        /* Styling for the Modals */
        .modal {
            display: none; 
            position: fixed; 
            z-index: 1000; 
            left: 0;
            top: 0;
            width: 100%; 
            height: 100%; 
            overflow: auto; 
            background-color: rgba(0,0,0,0.4); 
        }

        .modal-content {
            background-color: #fefefe;
            margin: 10% auto; 
            padding: 20px;
            border: 1px solid #888;
            border-radius: 8px; 
            width: 80%; 
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); 
        }

        .modal-header, .modal-body, .modal-footer {
            text-align: center;
        }

        .close-button {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close-button:hover,
        .close-button:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

        .modal-buttons {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

        .modal-buttons button {
            padding: 10px 20px;
            margin: 0 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s ease;
        }

        .modal-buttons button#backButton {
            background-color: rgba(18, 74, 92, 0.5); 
            color: white;
        }

        .modal-buttons button#confirmButton {
            background-color: #124A5C; 
            color: white;
        }

        .modal-buttons button:hover {
            opacity: 0.8; 
        }

        .divider {
            height: 2px; 
            background-color: #124A5C; 
            margin: 10px 0; 
        }

        .modal-question {
            display: flex;
            justify-content: center;  
            align-items: center;
            text-align: center;
            margin-top: 20px;  
            margin-bottom: 20px; 
            font-size: 16px;
        }

        /* Modal Styling */
.modal {
    display: none; /* Hidden by default */
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    overflow: auto;
}

.modal-content {
    background-color: #fefefe;
    margin: 10% auto;
    padding: 20px;
    border-radius: 8px;
    width: 60%; /* Adjust as necessary */
    text-align: center; /* Center content inside modal */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.modal-content h2, .modal-content p {
    color: #124A5C;
    margin-bottom: 20px;
}

.modal-buttons {
    display: flex;
    justify-content: center;
    gap: 20px; /* Space between buttons */
}

.modal-buttons button {
    padding: 10px 20px;
    font-size: 16px;
    font-weight: bold;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.back-button {
    background-color: rgba(18, 74, 92, 0.5); /* Transparent background */
    color: white;
}

.confirm-button {
    background-color: #124A5C;
    color: white;
}

.modal-buttons button:hover {
    opacity: 0.8;
}

/* Close Button (X) */
.close-button {
    color: #aaa;
    font-size: 28px;
    font-weight: bold;
    float: right;
    cursor: pointer;
}

.close-button:hover {
    color: black;
}

.review-modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.4);
}

.review-modal-content {
    background-color: #fefefe;
    margin: 10% auto;
    padding: 20px;
    border: 1px solid #888;
    border-radius: 8px;
    width: 50%;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    text-align: center;
}

.review-close-button {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
}

.review-close-button:hover,
.review-close-button:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
}

.review-modal-buttons {
    display: flex;
    justify-content: center;
    margin-top: 20px;
}

.review-modal-buttons button {
    padding: 10px 20px;
    margin: 0 10px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s ease;
}

.review-modal-back-button {
    background-color: rgba(18, 74, 92, 0.5);
    color: white;
}

.review-modal-confirm-button {
    background-color: #124A5C;
    color: white;
}

.review-modal-buttons button:hover {
    opacity: 0.8;
}


/*USER ID CSS*/
#applicant-userId {
    display: none;
}


    </style>
</head>
<body>

<%- include('../../partials/hr_partials') %>

<!-- Main Content Section -->
<div class="main-content">

    <!-- Header Section -->
    <div class="header-section">
        <h2>Applicant Tracking</h2>
        <% if (applicants && applicants.length > 0) { %>
          <div class="subheader">
            <%= applicants[0].jobTitle %>
          </div>
        <% } else { %>
          <p>No applicant found.</p>
        <% } %>
      </div>
      

  <!-- Applicant Tracking Section -->
    <div class="tracking-section">
        <div class="search-container">
            <div class="left-section">
                <input type="text" class="search-bar" id="searchBar" placeholder="Search by Application No., Name, Email, or Status">
                <button class="search-button"><i class="fas fa-search"></i> Search</button>
            </div>
            <div class="right-section">
                <button id="filter-all">All</button>
                <button id="filter-review">For Review</button>
                <button id="filter-evaluation">For Evaluation</button>
                <button id="filter-onboarding">For Onboarding</button>
            </div>            
        </div>

        
<!-- Table for Applicant Data -->
<table class="tracking-table" style="width: 100%; margin-bottom: 20px; border-collapse: collapse;">
    <thead>
        <tr>
            <th>Applicant No.</th>
            <th>Last Name, First Name</th>
            <th>Department</th>
            <th>Position Applied</th>
            <th>Applicant Status & Actions</th>
        </tr>
    </thead>
    <tbody>
        <% if (applicants && applicants.length) { %>
            <% applicants.forEach((applicant, index) => { %>
                <tr>
                    <td><%= index + 1 %></td>
                    <td>
                        <%= applicant.lastName %>, <%= applicant.firstName %>
                        <br>
                        <small style="color: #555;"><%= applicant.userEmail || 'Email not available' %></small>
                    </td>
                    
                    <td><%= applicant.deptName %></td> <!-- Display department name -->
                    <td><%= applicant.jobTitle %></td> <!-- Display job title -->
                    <td>
<!-- Display Applicant Status -->
<span><strong>Status:</strong> <%= applicant.applicantStatus || 'Pending' %></span>

<div style="margin-top: 10px;">
    <% if (applicant.applicantStatus.startsWith('P1 - Awaiting for HR Action')) { %>
        <!-- For Review Button -->
        <button 
        class="btn-review" 
        onclick="
            console.log('Opening Modal with:', {
                lastName: '<%= applicant.lastName %>',
                firstName: '<%= applicant.firstName %>',
                birthDate: '<%= applicant.birthDate %>',
                email: '<%= applicant.userEmail %>',
                phoneNo: '<%= applicant.phoneNo %>',
                scores: {
                    degree: '<%= applicant.initialScreeningAssessment.degreeScore %>',
                    experience: '<%= applicant.initialScreeningAssessment.experienceScore %>',
                    certifications: '<%= applicant.initialScreeningAssessment.certificationScore %>',
                    hardSkills: '<%= applicant.initialScreeningAssessment.hardSkillsScore %>',
                    softSkills: '<%= applicant.initialScreeningAssessment.softSkillsScore %>',
                    workSetup: '<%= applicant.initialScreeningAssessment.workSetupScore %>',
                    availability: '<%= applicant.initialScreeningAssessment.availabilityScore %>'
                },
                totalScore: '<%= applicant.initialScreeningAssessment.totalScore %>',
                resumeURL: '<%= applicant.initialScreeningAssessment.resume_url %>'
            });

            hrInitialScreeningModal(
                '<%= applicant.userId %>', 
                '<%= applicant.lastName %>', 
                '<%= applicant.firstName %>', 
                '<%= applicant.birthDate %>', 
                '<%= applicant.userEmail %>', 
                '<%= applicant.phoneNo %>', 
                {
                    degree: '<%= applicant.initialScreeningAssessment.degreeScore %>',
                    experience: '<%= applicant.initialScreeningAssessment.experienceScore %>',
                    certifications: '<%= applicant.initialScreeningAssessment.certificationScore %>',
                    hardSkills: '<%= applicant.initialScreeningAssessment.hardSkillsScore %>',
                    softSkills: '<%= applicant.initialScreeningAssessment.softSkillsScore %>',
                    workSetup: '<%= applicant.initialScreeningAssessment.workSetupScore %>',
                    availability: '<%= applicant.initialScreeningAssessment.availabilityScore %>'
                }, 
                '<%= applicant.initialScreeningAssessment.totalScore %>', 
                '<%= applicant.initialScreeningAssessment.degree_url %>',
                '<%= applicant.initialScreeningAssessment.cert_url %>',
                '<%= applicant.initialScreeningAssessment.resume_url %>'
            )
        ">
        For Review
        </button>
    
                            <% } else if (applicant.applicantStatus === 'P2 - Awaiting for HR Evaluation') { %>
    <!-- For Evaluation Button -->
    <a href="/hr/evaluation-form/<%= applicant.applicantId %>">
        <button class="btn-evaluation">For Evaluation</button>
    </a>
    <% } else if (applicant.applicantStatus.startsWith('P2 - HR Evaluation Accomplished')) { %>
        <!-- View Evaluation, Reject and Pass Buttons -->
        <div style="display: flex; flex-direction: column; gap: 10px;">
            <a href="/hr/view-evaluation/<%= applicant.applicantId %>">
                <button class="btn-view-evaluation" style="background-color: white; color: black; border: 1px solid #124A5C; padding: 8px 15px; border-radius: 5px; width: 150px; transition: background-color 0.3s ease, color 0.3s ease;">View Evaluation</button>
            </a>
            <div style="display: flex; gap: 10px;">
                <button 
                    class="btn-reject" 
                    onclick="rejectApplicant('<%= applicant.applicantId %>')"
                    style="background-color: #e74c3c; color: white; border: none; padding: 8px 15px; border-radius: 5px; cursor: pointer; width: 70px;">
                    Reject
                </button>
                <button 
                    class="btn-pass" 
                    onclick="passApplicant('<%= applicant.applicantId %>')"
                    style="background-color: #27ae60; color: white; border: none; padding: 8px 15px; border-radius: 5px; cursor: pointer; width: 70px;">
                    Pass
                </button>
            </div>
        </div>
    <% } %>
</div>
                            
                        </div>
                    </td>   
                </tr>
            <% }); %>
        <% } else { %>
            <tr>
                <td colspan="5">No applicants found.</td>
            </tr>
        <% } %>
    </tbody>
    
    
    
</table>

<h2 class="header-section" style="margin-top: 30px; margin-bottom: 10px;">Onboarding</h2>

<table class="tracking-table" style="width: 100%; border-collapse: collapse;">
    <thead>
        <tr>
            <th>Application No.</th>
            <th>Last Name, First Name</th>
            <th>Department</th>
            <th>Position Applied</th>
            <th>Application Status & Actions</th>
        </tr>
    </thead>
    <tbody>
        <% if (applicants && applicants.length) { %>
            <% applicants.forEach((applicant, index) => { %>
                <% if (applicant.applicantStatus === 'P3 - PASSED - Job Offer Sent') { %>
                    <tr>
                        <td><%= index + 1 %></td>
                        <td>
                            <%= applicant.lastName %>, <%= applicant.firstName %>
                            <br>
                            <small style="color: #555;"><%= applicant.userEmail || 'Email not available' %></small>
                        </td>
                        <td><%= applicant.deptName %></td>
                        <td><%= applicant.jobTitle %></td>
                        <td>
                            <span><strong>Status:</strong> <%= applicant.applicantStatus %></span>
                            <div style="margin-top: 10px;">
                                <button class="btn-onboarding" onclick="openOnboardingModal(
                                    '<%= applicant.userId %>',
                                    '<%= applicant.applicantId %>',
                                    '<%= applicant.firstName %>',
                                    '<%= applicant.lastName %>',
                                    '<%= applicant.birthDate %>',
                                    '<%= applicant.userEmail %>',
                                    '<%= applicant.phoneNo %>',
                                    '<%= applicant.jobId %>',
                                    '<%= applicant.jobTitle %>'
                                )">For Onboarding</button>
                            </div>
                        </td>
                    </tr>
                <% } %>
            <% }); %>
        <% } else { %>
            <tr>
                <td colspan="5">No applicants for onboarding found.</td>
            </tr>
        <% } %>
    </tbody>
</table>

<!--Frontend Modals-->

<!-- Modal for Confirm Release of Job Offer -->
<div id="releaseJobOfferModal" class="modal">
    <div class="modal-content">
        <span class="close-button" onclick="closeModal('releaseJobOfferModal')">&times;</span>
        <h2 style="color: #07ACB9;">Name</h2>
        <p><strong>Age:</strong> Text</p>
        <p><strong>Email:</strong> Text</p>
        <p><strong>Contact No:</strong> Text</p>
        
        <div class="divider"></div>
        
        <h3>Panel Assessment Form Breakdown</h3>
        <p>[INSERT SUBMITTED FORM HERE]</p>
        
        <div class="modal-question">
            <p><strong>Would you like to release the job offer and notify the applicant they are being considered for hiring?</strong></p>
        </div>
        
        <div class="modal-buttons">
            <button id="backButton" onclick="closeModal('releaseJobOfferModal')">Back</button>
            <button id="confirmButton" onclick="sendNotification()">Notify Applicant</button>
        </div>
    </div>
</div>

<!-- Modal for Account Setup Creation Reminder -->
<div id="accountSetupReminderModal" class="modal">
    <div class="modal-content">
        <span class="close-button" onclick="closeModal('accountSetupReminderModal')">&times;</span>
        <h1>Account Setup Creation Reminder</h1>
        
        <h2><strong>Applicant Personal Information</strong></h2>
        <h3><strong>Name</strong></h3>
        <p><strong>Age:</strong> Text</p>
        <p><strong>Email:</strong> Text</p>
        <p><strong>Contact No:</strong> Text</p>
        
        <div class="modal-question">
            <p><strong>Have you created an account for the employee through the Manage Employees page and emailed them the account details?</strong></p>
        </div>
        
        <div class="modal-buttons">
            <button id="backButton" onclick="closeModal('accountSetupReminderModal')">Back</button>
            <button id="confirmButton" onclick="confirmAccountSetup()">Confirm</button>
        </div>
    </div>
</div>


<button class="set-interview-button" onclick="setInterviewAvailabilities()">Set Interview Availabilities on Calendly</button>

<!-- Finalize button for review -->
<div class="finalize-container">
    <button class="set-finalize-review-button" id="finalize-p1">P1: Finalize Review and Notify Applicants</button>
    <button class="set-finalize-review-button" id="finalize-p2">P2: Finalize Review and Notify Applicants</button>
    <button class="set-finalize-review-button" id="finalize-p3">P3: Finalize Review and Notify Applicants</button>
</div>

<!-- Modal for P1: Finalize Review and Notify Applicants -->
<div id="finalizeModalP1" class="modal">
    <div class="modal-content">
        <span class="close-button">&times;</span>
        <h2>Confirm Final Review and Notify Applicants</h2>
        <p>You are about to finalize the review process and notify all applicants who were not selected that they have not advanced to the next stage. This action is irreversible. Are you sure you want to proceed?</p>
        <div class="modal-buttons">
            <button id="backButtonP1" class="back-button">Back</button>
            <button id="confirmButtonP1" class="confirm-button">Confirm</button>
        </div>
    </div>
</div>

<!-- Modal for P2: Finalize Review and Notify Applicants -->
<div id="finalizeModalP2" class="modal">
    <div class="modal-content">
        <span class="close-button">&times;</span>
        <h2>Confirm Final Review and Notify Applicants</h2>
        <p>You are about to finalize the review process and notify all applicants who were not selected that they have not advanced to the next stage. This action is irreversible. Are you sure you want to proceed?</p>
        <div class="modal-buttons">
            <button id="backButtonP2" class="back-button">Back</button>
            <button id="confirmButtonP2" class="confirm-button">Confirm</button>
        </div>
    </div>
</div>

<!-- Modal for P3: Finalize Review and Notify Applicants -->
<div id="finalizeModalP3" class="modal">
    <div class="modal-content">
        <span class="close-button">&times;</span>
        <h2>Confirm Final Review and Notify Applicants</h2>
        <p>You are about to finalize the review process and notify all applicants who were not selected that they have not advanced to the next stage. This action is irreversible. Are you sure you want to proceed?</p>
        <div class="modal-buttons">
            <button id="backButtonP3" class="back-button">Back</button>
            <button id="confirmButtonP3" class="confirm-button">Confirm</button>
        </div>
    </div>
</div>


<!-- P1 - HR Choosing Modal -->
<div id="hrInitialScreeningModalHtml" class="review-modal">
    <div class="review-modal-content">
        <span class="review-close-button">&times;</span>
        <h2>P1: Initial Screening Score Breakdown</h2> 
        <div class="divider"></div>
        <div class="applicant-details">
            <input type="hidden" id="userId">
            <input type="hidden" id="jobId">            
            <input type="hidden" id="applicantId">

            <p><strong>Name:</strong> <span id="applicant-name"></span></p>
            <p><strong>Birthday:</strong> <span id="applicant-birthday"></span></p>
            <p><strong>Email:</strong> <span id="applicant-email"></span></p>
            <p><strong>Contact No.:</strong> <span id="applicant-contact"></span></p>
        </div>
        <h4>HR Online Assessment Form Breakdown</h4>
        <div class="scores-section">
            <h4>Initial Screening Scores</h4> 
        
            <table class="scores-table"> 
                <thead> 
                    <tr> 
                        <th>Criteria</th> 
                        <th>Score</th> 
                    </tr> 
                </thead> 
                <tbody> 
                    <tr> 
                        <td>Industry Specific Degree</td> 
                        <td id="score-degree"></td> 
                    </tr> 
                    <tr> 
                        <td>Experiences</td> 
                        <td id="score-experience"></td> 
                    </tr> 
                    <tr> 
                        <td>Certifications</td> 
                        <td id="score-certifications"></td> 
                    </tr> 
                    <tr> 
                        <td>Hard Skills</td> 
                        <td id="score-hard-skills"></td> 
                    </tr> 
                    <tr> 
                        <td>Soft Skills</td> 
                        <td id="score-soft-skills"></td> 
                    </tr> 
                    <tr> 
                        <td>Work Setup</td> 
                        <td id="score-work-setup"></td> 
                    </tr> 
                    <tr> 
                        <td>Availability</td> 
                        <td id="score-availability"></td> 
                    </tr> 
                </tbody> 
            </table> 
        
            <div class="computation-verdict"> 
                <strong>Computation Verdict - <span id="computation-verdict"></span></strong> 
            </div>
        </div>

        <h4>Uploaded Documents</h4>
        <p><strong>Degree:</strong> <a id="degree-doc" href="#" target="_blank">No document uploaded</a></p>
        <div id="degree-preview" style="margin-top: 10px;"></div>
        
        <p><strong>Certification:</strong> <a id="cert-doc" href="#" target="_blank">No document uploaded</a></p>
        <div id="cert-preview" style="margin-top: 10px;"></div>
        
        <p><strong>Resume:</strong> <a id="resume-doc" href="#" target="_blank">No document uploaded</a></p>
        <div id="resume-preview" style="margin-top: 10px;"></div>

<!-- HR Verification Statement and Comments -->
<div class="verification-section" style="margin-top: 20px; padding: 10px; border-top: 1px solid #ccc;">
    <label style="display: flex; align-items: flex-start; gap: 10px; font-weight: normal;">
        <input type="checkbox" id="hr-verification-checkbox" style="margin-top: 3px;">
        <span>
            I confirm that the applicant is eligible for endorsement to the Line Manager after a review of the submitted documents.
        </span>
    </label>
    <p style="color: #d9534f; margin: 5px 0 15px 25px; font-size: 0.9em;">
        * This checkbox must be ticked to proceed with confirmation and endorsement to the Line Manager.
    </p>

    <label for="hr-verification-comments" style="display: block; margin-top: 10px;"><strong>HR Comments (optional):</strong></label>
    <textarea id="hr-verification-comments" rows="3" style="width: 100%; padding: 8px; resize: vertical;" placeholder="Enter any remarks or notes..."></textarea>
</div>


        <div class="review-modal-buttons">
            <button id="backButton" class="review-modal-back-button">Back</button>
            <button id="rejectButton" class="review-modal-reject-button" onclick="rejectHRInitialScreeningModal()">Reject</button>
            <button id="confirmButton" class="review-modal-confirm-button" onclick="confirmHRInitialScreeningModal()">Confirm</button>
        </div>
    </div>
</div>

    </div>
</div>
<div id="moveToOnboardingModal" class="modal">
    <div class="modal-content" style="width: 70%; max-width: 1200px; background-color: white; border-radius: 8px; box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2); padding: 30px;">
        <span class="close-button" onclick="closeModal('moveToOnboardingModal')" style="color: #666; font-size: 28px; font-weight: bold; position: absolute; right: 20px; top: 15px; cursor: pointer;">&times;</span>
        
        <h1 style="color: #07ACB9; text-align: center; margin-bottom: 30px; font-weight: 600;">
            Move Applicant to Onboarding and Send First Day Checklist?
        </h1>
                
        <input type="hidden" id="onboarding-user-id">
        <input type="hidden" id="onboarding-applicant-id">
        <input type="hidden" id="onboarding-job-id">
        
        <div class="applicant-info-section" style="margin-bottom: 30px; background-color: #f8f9fa; padding: 20px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);">
            <h2 style="color: #124A5C; margin-top: 0; font-weight: 600; margin-bottom: 15px;"><strong>Applicant Personal Information</strong></h2>
            <h3 style="color: #333; margin-top: 0; font-weight: 600; margin-bottom: 15px;"><strong id="applicant-name-onboarding">Name</strong></h3>
            <p style="margin: 10px 0; line-height: 1.6;"><strong>Birthday:</strong> <span id="applicant-birthday-onboarding">Text</span></p>
            <p style="margin: 10px 0; line-height: 1.6;"><strong>Email:</strong> <span id="applicant-email-onboarding">Text</span></p>
            <p style="margin: 10px 0; line-height: 1.6;"><strong>Contact No:</strong> <span id="applicant-contact-onboarding">Text</span></p>
            <p style="margin: 10px 0; line-height: 1.6;"><strong>Position:</strong> <span id="applicant-position-onboarding">Text</span></p>
        </div>
        
<!-- Updated Start Date Section in moveToOnboardingModal -->
<div class="start-date-section" style="margin-bottom: 30px; background-color: #f0f8ff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);">
    <h2 style="color: #124A5C; margin-top: 0; font-weight: 600; margin-bottom: 15px;"><strong>Start Date Information</strong></h2>
    
    <!-- Line Manager's Set Date -->
    <div style="margin-bottom: 15px; padding: 10px; background-color: #e8f4f8; border-radius: 5px; border-left: 4px solid #07ACB9;">
        <p style="margin: 0 0 5px 0; font-weight: 600;">Line Manager's Set Date:</p>
        <p style="margin: 0; font-size: 16px;" id="lm-set-date">Loading...</p>
    </div>
    
    <!-- HR can confirm or modify the date -->
    <p style="margin: 15px 0;">You can confirm or modify the start date for the applicant:</p>
    
    <div style="margin-bottom: 20px;">
        <label for="start-date-input" style="display: block; font-weight: 600; margin-bottom: 10px;">Confirmed Start Date:</label>
        <input type="date" id="start-date-input" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 4px; font-size: 16px;" min="<%= new Date().toISOString().split('T')[0] %>">
    </div>
</div>
        
        <div class="checklist-section" style="margin-bottom: 30px; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); border: 1px solid #e9ecef;">
            <h2 style="color: #124A5C; margin-top: 0; font-weight: 600; margin-bottom: 15px;"><strong>First Day Onboarding Checklist</strong></h2>
            <p style="margin-bottom: 15px;">The following checklist will be provided to the applicant:</p>
            
            <table style="width: 100%; border-collapse: collapse; margin-bottom: 20px; background: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);">
                <thead>
                    <tr>
                        <th style="background-color: #124A5C; color: white; padding: 15px; text-align: left; font-weight: 500;">Activities</th>
                        <th style="background-color: #124A5C; color: white; padding: 15px; text-align: left; font-weight: 500;">Where</th>
                        <th style="background-color: #124A5C; color: white; padding: 15px; text-align: left; font-weight: 500;">Contact Person</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Finding your workstation + Meeting your team</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Your Department's Floor</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Line Manager</td>
                    </tr>
                    <tr>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Creation of company ID</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">19F Facilities Mgt Room</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Zac Apron</td>
                    </tr>
                    <tr>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Building/Door access</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">19F Security</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Billie Jean</td>
                    </tr>
                    <tr>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Claim IT equipment</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">20th Floor IT Dept, right wing</td>
                        <td style="padding: 15px; border-bottom: 1px solid #e9ecef;">Johnny Legend</td>
                    </tr>
                    <tr>
                        <td style="padding: 15px;">Setting up of company email</td>
                        <td style="padding: 15px;">Your Department's Floor</td>
                        <td style="padding: 15px;">Line Manager</td>
                    </tr>
                </tbody>
            </table>
            
            <div style="background-color: #f8f9fa; border: 1px solid #ddd; border-radius: 8px; padding: 15px; margin-top: 20px;">
                <p style="margin: 0; display: flex; align-items: center;">
                    <span style="display: inline-block; width: 18px; height: 18px; margin-right: 10px; background-color: #07ACB9; color: white; border-radius: 50%; text-align: center; line-height: 18px; font-weight: bold; font-size: 12px;">i</span>
                    Confirming will update the applicant's status to "Onboarding - First Day Checklist Sent" and send them the first day checklist as a requirement for Onboarding.
                </p>
            </div>
        </div>
        
        <div class="modal-question" style="text-align: center; margin: 25px 0;">
            <p style="font-weight: 600; font-size: 1.1rem; color: #124A5C;"><strong>Would you like to move this applicant for onboarding?</strong></p>
        </div>
        
        <div class="modal-buttons" style="display: flex; justify-content: center; gap: 20px; margin-top: 30px;">
            <button id="backButton" onclick="closeModal('moveToOnboardingModal')" style="background-color: #f8f9fa; color: #333; border: 1px solid #ddd; padding: 12px 25px; border-radius: 4px; cursor: pointer; font-weight: 500; font-size: 16px;">Back</button>
            <button id="confirmButton" onclick="confirmOnboarding()" style="background-color: #124A5C; color: white; border: none; padding: 12px 25px; border-radius: 4px; cursor: pointer; font-weight: 500; font-size: 16px;">Confirm</button>
        </div>
    </div>
</div>


<script>

// Function to handle rejecting an applicant
function rejectApplicant(applicantId) {
    if (!confirm("Are you sure you want to reject this applicant? This action cannot be undone.")) {
        return;
    }

    fetch('/hr/reject-applicant', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ applicantId }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("Applicant has been rejected successfully.");
            location.reload(); // Reload to update the UI
        } else {
            alert("Failed to reject applicant: " + (data.message || "Unknown error"));
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert("An error occurred while rejecting the applicant.");
    });
}

// Function to handle passing an applicant
function passApplicant(applicantId) {
    if (!confirm("Are you sure you want to pass this applicant to the next stage? This action cannot be undone.")) {
        return;
    }

    fetch('/hr/pass-applicant', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ applicantId }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("Applicant has been passed to the next stage successfully.");
            location.reload(); // Reload to update the UI
        } else {
            alert("Failed to pass applicant: " + (data.message || "Unknown error"));
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert("An error occurred while passing the applicant.");
    });
}

function handleFailedAction(applicantId) {
        alert('Action required for P2 - FAILED applicant: ' + applicantId);
        // Implement logic for failed status (e.g., notify applicant, reject process)
    }

    function handlePassedAction(applicantId) {
        alert('Action required for P2 - PASSED applicant: ' + applicantId);
        // Implement logic for passed status (e.g., schedule next steps, notify team)
    }

    function handleP3FailedAction(applicantId) {
        alert('Action required for P3 - FAILED applicant: ' + applicantId);
        // Implement logic for P3 failed status
    }

    function handleP3PassedAction(applicantId) {
        alert('Action required for P3 - PASSED applicant: ' + applicantId);
        // Implement logic for P3 passed status
    }

    function handleJobOfferAction(applicantId) {
        alert('Action required for Job Offer Sent applicant: ' + applicantId);
        // Implement logic for job offer status (e.g., follow-up, onboarding)
    }

function handleFailedAction(applicantId) {
        alert('Action required for FAILED applicant: ' + applicantId);
        // Implement logic for failed status (e.g., notify applicant, reject process)
    }

    function handlePassedAction(applicantId) {
        alert('Action required for PASSED applicant: ' + applicantId);
        // Implement logic for passed status (e.g., schedule next steps, notify team)
    }

function notifyLineManager(applicantId) {
        fetch('/notify-line-manager', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ applicantId: applicantId }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert(data.message);  // Success message
            } else {
                alert(data.error);    // Error message
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred.');
        });
    }
    
     // Function to extract applicantId from URL
     function getApplicantIdFromURL() {
            const path = window.location.pathname;
            const parts = path.split('/'); // Split the URL into parts
            const applicantId = parts[3]; // Assuming the URL is like /hr/evaluation-form/{applicantId}
            return applicantId;
        }

       

        // Display the applicantId from the URL (if any) when the page is loaded
        document.addEventListener('DOMContentLoaded', function () {
            const applicantId = getApplicantIdFromURL(); // Extract applicantId from the URL
            if (applicantId) {
                document.getElementById('applicantIdDisplay').textContent = `Applicant ID from URL: ${applicantId}`;
            } else {
                document.getElementById('applicantIdDisplay').textContent = 'No Applicant ID found in URL.';
            }
        });



        function hrInitialScreeningModal(userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl) {
    console.log('Opening Modal with Data:', { userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl });

    if (!userId || userId === "undefined") {
        console.error("Invalid userId passed to modal:", userId);
        alert("Error: Invalid User ID. Cannot display applicant details.");
        return;
    }
    
    document.getElementById('userId').value = userId;

    document.getElementById('applicant-name').textContent = `${lastName}, ${firstName}`;
    document.getElementById('applicant-birthday').textContent = birthday || 'N/A';
    document.getElementById('applicant-email').textContent = email || 'N/A';
    document.getElementById('applicant-contact').textContent = phoneNo || 'N/A';

    document.getElementById('score-degree').textContent = scores.degree || 'N/A';
    document.getElementById('score-experience').textContent = scores.experience || 'N/A';
    document.getElementById('score-certifications').textContent = scores.certifications || 'N/A';
    document.getElementById('score-hard-skills').textContent = scores.hardSkills || 'N/A';
    document.getElementById('score-soft-skills').textContent = scores.softSkills || 'N/A';
    document.getElementById('score-work-setup').textContent = scores.workSetup || 'N/A';
    document.getElementById('score-availability').textContent = scores.availability || 'N/A';

    document.getElementById('computation-verdict').textContent = verdict || 'N/A';

    // Display documents separately
    displayUploadedDocument(degreeUrl, "degree-doc", "degree-preview");
    displayUploadedDocument(certUrl, "cert-doc", "cert-preview");
    displayUploadedDocument(resumeUrl, "resume-doc", "resume-preview");

    document.getElementById('hrInitialScreeningModalHtml').style.display = 'block';
}

function displayUploadedDocument(fileUrl, linkId, previewId) {
    const docLink = document.getElementById(linkId);
    const docPreview = document.getElementById(previewId);

    if (!fileUrl) {
        docLink.href = "#";
        docLink.textContent = "No document uploaded";
        docPreview.innerHTML = ""; // Clear preview
        return;
    }

    docLink.href = fileUrl;
    docLink.textContent = "View Uploaded Document";

    const fileExtension = fileUrl.split('.').pop().toLowerCase();

    if (["jpg", "jpeg", "png"].includes(fileExtension)) {
        docPreview.innerHTML = `<img src="${fileUrl}" alt="Uploaded Image" style="max-width: 300px; border: 1px solid #ccc; padding: 5px;">`;
    } else if (fileExtension === "pdf") {
        docPreview.innerHTML = `<iframe src="${fileUrl}" width="100%" height="400px" style="border: none;"></iframe>`;
    } else {
        docPreview.innerHTML = ""; // No preview for other file types
    }
}



function confirmHRInitialScreeningModal() {
    const userIdElement = document.getElementById("userId");
    if (!userIdElement) {
        alert("Error: userId is missing. Please try again.");
        return;
    }

    const userIdRaw = userIdElement.value.trim();
    console.log("User  ID (raw):", userIdRaw);

    const userId = parseInt(userIdRaw, 10);
    console.log("User  ID (parsed):", userId);

    if (isNaN(userId)) {
        alert("Error: User ID is invalid. Please try again.");
        return;
    }

    fetch('/hr/applicant-tracker-jobposition/P1AwaitingforLineManager', {
        method: 'POST', 
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId }), // Only send userId
    })
    .then(response => response.json())
    .then(data => {
        console.log("Server Response:", data);

        if (data.success) {
            const modal = document.getElementById('hrInitialScreeningModalHtml');
            if (modal) {
                modal.style.display = 'none';
            }
            alert("Successfully updated applicant status!");
        } else {
            alert("Error updating applicant status: " + data.message);
        }
    })
    .catch(error => {
        console.error("Fetch Error:", error);
        alert("Failed to update applicant status.");
    });
}
    // Close the modal
    document.querySelector('.review-close-button').addEventListener('click', function () {
        document.getElementById('hrInitialScreeningModalHtml').style.display = 'none';
    });

    // Close modal if clicked outside the modal content
    window.addEventListener('click', function (event) {
        const modal = document.getElementById('hrInitialScreeningModalHtml');
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });
    
    document.addEventListener("DOMContentLoaded", function () {
// Function to filter rows based on status
function filterRowsByStatus(status) {
    const rows = document.querySelectorAll('.tracking-table tbody tr');
    
    rows.forEach(row => {
        // Get the status text from the cell
        const statusCell = row.querySelector('td:last-child');
        const statusText = statusCell ? statusCell.textContent : '';
        
        if (status === "all") {
            // Show all rows
            row.style.display = "";
        } else if (status === "for-review") {
            // Check if status contains "P1 - Awaiting for HR Action"
            if (statusText.includes('P1 - Awaiting for HR Action')) {
                row.style.display = "";
            } else {
                row.style.display = "none";
            }
        } else if (status === "for-evaluation") {
            // Check if status contains "P2 - Awaiting for HR Evaluation"
            if (statusText.includes('P2 - Awaiting for HR Evaluation')) {
                row.style.display = "";
            } else {
                row.style.display = "none";
            }
            
            // Also check for button-based filtering as a fallback
            const evaluationButton = row.querySelector('.btn-evaluation');
            if (evaluationButton && row.style.display === "none") {
                row.style.display = "";
            }
        } else if (status === "for-onboarding") {
            // Check for onboarding status
            if (statusText.includes('For Onboarding')) {
                row.style.display = "";
            } else {
                row.style.display = "none";
            }
        } else {
            row.style.display = "none";
        }
    });

    // Show/hide finalize container based on filter
    if (status === "for-review") {
        document.querySelector(".finalize-container").style.display = "block";
    } else {
        document.querySelector(".finalize-container").style.display = "none";
    }

    // Highlight the active filter button
    highlightActiveFilter(status);
}


    // Event listeners for finalize buttons
    document.getElementById("finalize-p1").addEventListener("click", function () {
        finalizeReview("P1");
    });

    document.getElementById("finalize-p2").addEventListener("click", function () {
        finalizeReview("P2");
    });

    document.getElementById("finalize-p3").addEventListener("click", function () {
        finalizeReview("P3");
    });

    // Finalize review function
    function finalizeReview(phase) {
        alert(`${phase}: Finalizing review and notifying applicants.`);
        // Add logic to handle finalization for the specified phase
        // Example: Update database, send notifications, etc.
        console.log(`${phase}: Review finalized. Notifications sent.`);
    }


       // Function to filter table based on search input
function filterTable() {
    const searchValue = document.getElementById("searchBar").value.toLowerCase();
    const rows = document.querySelectorAll('.tracking-table tbody tr');

    rows.forEach(row => {
        const cells = row.querySelectorAll("td");
        const rowText = Array.from(cells)
            .map(cell => cell.textContent.toLowerCase())
            .join(" ");
        
        if (rowText.includes(searchValue)) {
            row.style.display = ""; // Show if search term matches
        } else {
            row.style.display = "none"; // Hide otherwise
        }
    });
}

 // Function to highlight the active filter button
function highlightActiveFilter(status) {
    const buttons = document.querySelectorAll(".right-section button");
    buttons.forEach(button => {
        if (button.id === `filter-${status}`) {
            button.style.backgroundColor = "#B4E3E3";
            button.style.color = "#124A5C";
        } else {
            button.style.backgroundColor = "#124A5C";
            button.style.color = "white";
        }
    });
}

        // Initialize buttons for filtering by status
        const buttons = {
        all: document.getElementById("filter-all"),
        review: document.getElementById("filter-review"),
        evaluation: document.getElementById("filter-evaluation"),
        onboarding: document.getElementById("filter-onboarding"),
    };

    // Add event listeners to filter buttons
    buttons.all.addEventListener("click", () => filterRowsByStatus("all"));
    buttons.review.addEventListener("click", () => filterRowsByStatus("for-review"));
    buttons.evaluation.addEventListener("click", () => filterRowsByStatus("for-evaluation"));
    buttons.onboarding.addEventListener("click", () => filterRowsByStatus("for-onboarding"));

    // Search functionality
    document.querySelector(".search-button").addEventListener("click", filterTable);
    document.getElementById("searchBar").addEventListener("keypress", function(e) {
        if (e.key === "Enter") {
            e.preventDefault(); // Prevent form submission if inside a form
            filterTable();
        }
    });

        // Set button text dynamically based on row class
        const rows = document.querySelectorAll('.tracking-table tbody tr');
        rows.forEach(row => {
            const statusCell = row.querySelector('td:last-child');
            const button = statusCell.querySelector('button');
            if (row.classList.contains('status-for-review')) {
                button.textContent = "For Review";
            } else if (row.classList.contains('status-for-onboarding')) {
                button.textContent = "For Onboarding";
            } else if (row.classList.contains('status-for-evaluation')) {
                button.textContent = "For Evaluation";
            }
        });

        // Display all rows initially
        filterRowsByStatus("all");
    });

    document.addEventListener("DOMContentLoaded", function () {
        const evaluationButtons = document.querySelectorAll(".btn-evaluation");

        evaluationButtons.forEach(button => {
            button.addEventListener("click", function () {
                window.location.href = "/hr/evaluation-form";
            });
        });
    });

    // Function to open the modal
    function openModal(modalId) {
        document.getElementById(modalId).style.display = "block";
    }

    // Function to close the modal
    function closeModal(modalId) {
        document.getElementById(modalId).style.display = "none";
    }

    // Function for sending notification to the applicant
    function sendNotification() {
        alert("Sent notification to applicant");
        closeModal('releaseJobOfferModal');
    }

    function openOnboardingModal(userId, applicantId, firstName, lastName, birthDate, email, phoneNo, jobId, jobTitle) {
    // Set the hidden input values
    document.getElementById('onboarding-user-id').value = userId;
    document.getElementById('onboarding-applicant-id').value = applicantId;
    document.getElementById('onboarding-job-id').value = jobId;
    
    // Set the visible applicant information
    document.getElementById('applicant-name-onboarding').textContent = lastName + ', ' + firstName;
    document.getElementById('applicant-birthday-onboarding').textContent = birthDate || 'Not available';
    document.getElementById('applicant-email-onboarding').textContent = email || 'Not available';
    document.getElementById('applicant-contact-onboarding').textContent = phoneNo || 'Not available';
    document.getElementById('applicant-position-onboarding').textContent = jobTitle || 'Not available';
    
    // Fetch the Line Manager's set date from the database
    fetch(`/hr/get-start-date?jobId=${jobId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success && data.startDate) {
                // Format the date for display
                const date = new Date(data.startDate);
                const formattedDate = date.toLocaleDateString('en-US', { 
                    weekday: 'long', 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                });
                
                // Display Line Manager's set date
                document.getElementById('lm-set-date').textContent = formattedDate;
                
                // Set the default value for HR's confirmation field
                document.getElementById('start-date-input').value = data.startDate;
            } else {
                document.getElementById('lm-set-date').textContent = 'No date set by Line Manager';
                
                // Set a default start date (2 weeks from today)
                const twoWeeksFromNow = new Date();
                twoWeeksFromNow.setDate(twoWeeksFromNow.getDate() + 14);
                const formattedDate = twoWeeksFromNow.toISOString().split('T')[0];
                document.getElementById('start-date-input').value = formattedDate;
            }
        })
        .catch(error => {
            console.error('Error fetching start date:', error);
            document.getElementById('lm-set-date').textContent = 'Error loading date';
            
            // Set a default start date (2 weeks from today)
            const twoWeeksFromNow = new Date();
            twoWeeksFromNow.setDate(twoWeeksFromNow.getDate() + 14);
            const formattedDate = twoWeeksFromNow.toISOString().split('T')[0];
            document.getElementById('start-date-input').value = formattedDate;
        });
    
    // Display the modal
    document.getElementById('moveToOnboardingModal').style.display = 'block';
}
    
    // Function for confirming onboarding - Updated version
    function confirmOnboarding() {
        const userId = document.getElementById('onboarding-user-id').value;
        const applicantId = document.getElementById('onboarding-applicant-id').value;
        const jobId = document.getElementById('onboarding-job-id').value;
        const startDate = document.getElementById('start-date-input').value;
        
        if (!userId || !applicantId || !jobId || !startDate) {
            alert('Error: Missing required information. Please make sure all fields are filled.');
            return;
        }
        
        // Send request to update applicant status and save start date
        fetch('/hr/send-onboarding-checklist', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ 
                userId: userId,
                applicantId: applicantId,
                jobId: jobId,
                startDate: startDate
            }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Status updated and job offer sent successfully. Start date has been set for ' + startDate);
                closeModal('moveToOnboardingModal');
                location.reload(); // Reload to update the UI
            } else {
                alert('Error: ' + (data.message || 'Failed to update status.'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while processing your request. Please try again.');
        });
    }

    // Function for confirming account setup
    function confirmAccountSetup() {
        alert("Account setup confirmed");
        closeModal('accountSetupReminderModal');
    }

    document.addEventListener("DOMContentLoaded", function() {
    const finalizeP1Button = document.getElementById("finalize-p1");
    const finalizeP2Button = document.getElementById("finalize-p2");
    const finalizeP3Button = document.getElementById("finalize-p3");

    const modalP1 = document.getElementById("finalizeModalP1");
    const modalP2 = document.getElementById("finalizeModalP2");
    const modalP3 = document.getElementById("finalizeModalP3");

    const closeButtonP1 = modalP1.querySelector(".close-button");
    const backButtonP1 = modalP1.querySelector("#backButtonP1");
    const confirmButtonP1 = modalP1.querySelector("#confirmButtonP1");

    const closeButtonP2 = modalP2.querySelector(".close-button");
    const backButtonP2 = modalP2.querySelector("#backButtonP2");
    const confirmButtonP2 = modalP2.querySelector("#confirmButtonP2");

    const closeButtonP3 = modalP3.querySelector(".close-button");
    const backButtonP3 = modalP3.querySelector("#backButtonP3");
    const confirmButtonP3 = modalP3.querySelector("#confirmButtonP3");

    // Show the modal for P1 when the "P1: Finalize Review and Notify Applicants" button is clicked
    finalizeP1Button.addEventListener("click", function() {
        modalP1.style.display = "block";
    });

    // Show the modal for P2 when the "P2: Finalize Review and Notify Applicants" button is clicked
    finalizeP2Button.addEventListener("click", function() {
        modalP2.style.display = "block";
    });

    // Show the modal for P3 when the "P3: Finalize Review and Notify Applicants" button is clicked
    finalizeP3Button.addEventListener("click", function() {
        modalP3.style.display = "block";
    });

    // Close the modal for P1 when the close button (X) is clicked
    closeButtonP1.addEventListener("click", function() {
        modalP1.style.display = "none";
    });

    // Close the modal for P2 when the close button (X) is clicked
    closeButtonP2.addEventListener("click", function() {
        modalP2.style.display = "none";
    });

    // Close the modal for P3 when the close button (X) is clicked
    closeButtonP3.addEventListener("click", function() {
        modalP3.style.display = "none";
    });

    // Close the modal for P1 when the back button is clicked
    backButtonP1.addEventListener("click", function() {
        modalP1.style.display = "none";
    });

    // Close the modal for P2 when the back button is clicked
    backButtonP2.addEventListener("click", function() {
        modalP2.style.display = "none";
    });

    // Close the modal for P3 when the back button is clicked
    backButtonP3.addEventListener("click", function() {
        modalP3.style.display = "none";
    });

    // Handle the confirm action for P1 (you can add your own confirmation logic here)
    confirmButtonP1.addEventListener("click", function() {
        // Add your confirmation action here (e.g., notify applicants)
        alert("P1 Review finalized and applicants notified.");
        modalP1.style.display = "none"; // Close the modal after confirming
    });

    // Handle the confirm action for P2 (you can add your own confirmation logic here)
    confirmButtonP2.addEventListener("click", function() {
        // Add your confirmation action here (e.g., notify applicants)
        alert("P2 Review finalized and applicants notified.");
        modalP2.style.display = "none"; // Close the modal after confirming
    });

    // Handle the confirm action for P3 (you can add your own confirmation logic here)
    confirmButtonP3.addEventListener("click", function() {
        // Add your confirmation action here (e.g., notify applicants)
        alert("P3 Review finalized and applicants notified.");
        modalP3.style.display = "none"; // Close the modal after confirming
    });

    // Close the modal if the user clicks outside of it (for P1)
    window.addEventListener("click", function(event) {
        if (event.target == modalP1) {
            modalP1.style.display = "none";
        }
    });

    // Close the modal if the user clicks outside of it (for P2)
    window.addEventListener("click", function(event) {
        if (event.target == modalP2) {
            modalP2.style.display = "none";
        }
    });

    // Close the modal if the user clicks outside of it (for P3)
    window.addEventListener("click", function(event) {
        if (event.target == modalP3) {
            modalP3.style.display = "none";
        }
    });
});

// Function to open the modal
function openModal(name, age, email, contact) {
    document.getElementById("applicant-name").value = name;
    document.getElementById("applicant-birthday").value = age;
    document.getElementById("applicant-email").value = email;
    document.getElementById("applicant-contact").value = contact;
    // document.getElementById("hrInitialScreeningModalHtml").style.display = "block";
}

// Add event listeners to all "For Review" buttons
document.querySelectorAll(".btn-review").forEach(button => {
    button.addEventListener("click", function() {
        const parentRow = button.closest("tr");
        const name = parentRow.querySelector("td:nth-child(2)").innerText.split("\n")[0];
        const email = parentRow.querySelector("td:nth-child(2)").innerText.split("\n")[1];
        const age = "N/A";  // Placeholder for age
        const contact = "N/A";  // Placeholder for contact
        openModal(name, age, email, contact);
    });
});

// Function to close the modal
document.querySelector(".review-close-button").addEventListener("click", function() {
    document.getElementById("hrInitialScreeningModalHtml").style.display = "none";
});

// Close modal when clicking outside of the modal content
window.addEventListener("click", function(event) {
    if (event.target == document.getElementById("reviewModal")) {
        document.getElementById("reviewModal").style.display = "none";
    }
});

// Back button functionality
document.getElementById("backButton").addEventListener("click", function() {
    document.getElementById("reviewModal").style.display = "none";
});

// Confirm button functionality
document.getElementById("confirmButton").addEventListener("click", function() {
    alert("Applicant has been selected and recommended for panel interview.");
    document.getElementById("reviewModal").style.display = "none";
});

document.querySelectorAll('.action-required-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const mrfId = this.getAttribute('data-mrfid');
                    window.location.href = `/hr/view-mrf/${mrfId}`;  // Redirect to the MRF page
                });
            });

            // Toggle active class for sidebar links
            document.querySelectorAll('.sidebar ul li a').forEach(link => {
                link.addEventListener('click', function() {
                    document.querySelectorAll('.sidebar ul li a').forEach(link => link.classList.remove('active'));
                    this.classList.add('active');
                });
            });

            // Toggle collapsible content
            document.querySelectorAll('.collapsible-header').forEach(header => {
                header.addEventListener('click', function() {
                    var content = this.nextElementSibling;
                    if (content.style.display === 'block') {
                        content.style.display = 'none';
                    } else {
                        // Hide all other collapsible contents
                        document.querySelectorAll('.collapsible-content').forEach(item => {
                            if (item !== content) {
                                item.style.display = 'none';
                            }
                        });
                        content.style.display = 'block';
                    }
                });
            });

            function rejectHRInitialScreeningModal() {
    const userIdElement = document.getElementById("userId");
    if (!userIdElement) {
        alert("Error: userId is missing. Please try again.");
        return;
    }

    const userIdRaw = userIdElement.value.trim();
    console.log("User ID (raw):", userIdRaw);

    const userId = parseInt(userIdRaw, 10);
    console.log("User ID (parsed):", userId);

    if (isNaN(userId)) {
        alert("Error: User ID is invalid. Please try again.");
        return;
    }

    // Confirm reject action
    if (confirm("Are you sure you want to reject this applicant? This action cannot be undone.")) {
        fetch('/hr/applicant-tracker-jobposition/P1HRFailed', {
            method: 'POST', 
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userId }), // Only send userId
        })
        .then(response => response.json())
        .then(data => {
            console.log("Server Response:", data);

            if (data.success) {
                const modal = document.getElementById('hrInitialScreeningModalHtml');
                if (modal) {
                    modal.style.display = 'none';
                }
                alert("Successfully updated applicant status to P1 - HR FAILED!");
                location.reload(); // Reload the page to reflect the changes
            } else {
                alert("Error updating applicant status: " + data.message);
            }
        })
        .catch(error => {
            console.error("Fetch Error:", error);
            alert("Failed to update applicant status.");
        });
    }
}

</script>


</body>
</html>
