<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HR Records & Performance Tracker - Company-Wide</title>
    <link rel="stylesheet" href="/css/sidebar.css">
    <link rel="stylesheet" href="/css/hr_page.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
    /* Basic Layout */
    .main-content {
        margin-left: 300px;
        padding: 20px;
        font-family: 'Inter', sans-serif;
        min-height: 100vh;
        box-sizing: border-box;
        overflow-x: auto;
    }

    /* Header Styles */
    .dashboard-header {
        background: linear-gradient(135deg, #124A5C 0%, #07ACB9 100%);
        color: white;
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(18, 74, 92, 0.3);
        margin-bottom: 30px;
    }

    .dashboard-header h2 {
        font-size: 28px;
        font-weight: 700;
        margin-bottom: 8px;
        text-shadow: 0 2px 4px rgba(0,0,0,0.3);
    }

    .dashboard-header p {
        font-size: 16px;
        margin: 0;
        opacity: 0.9;
    }

    /* Overview Cards */
    .overview-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .overview-card {
        background: white;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        text-align: center;
        border-left: 4px solid #07ACB9;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .overview-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 16px rgba(0,0,0,0.15);
    }

    .overview-card h3 {
        font-size: 32px;
        font-weight: 700;
        color: #124A5C;
        margin-bottom: 8px;
    }

    .overview-card p {
        color: #64748b;
        font-size: 14px;
        margin: 0;
    }

    .overview-card.highlight {
        border-left-color: #f59e0b;
    }

    .overview-card.highlight h3 {
        color: #f59e0b;
    }

    /* Tab Styles */
    .tab-container {
        margin-bottom: 20px;
    }

    .tab-buttons {
        display: flex;
        border-bottom: 2px solid #e0e4e8;
        margin-bottom: 20px;
    }

    .tab-button {
        padding: 12px 24px;
        background: none;
        border: none;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        color: #6c757d;
        border-bottom: 2px solid transparent;
        transition: all 0.2s ease;
    }

    .tab-button.active {
        color: #07ACB9;
        border-bottom-color: #07ACB9;
    }

    .tab-button:hover {
        color: #07ACB9;
    }

    .tab-content {
        display: none;
    }

    .tab-content.active {
        display: block;
    }

    /* Department Filter */
    .department-filter {
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        margin-bottom: 20px;
    }

    .filter-row {
        display: flex;
        align-items: center;
        gap: 15px;
        flex-wrap: wrap;
    }

    .filter-group {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .filter-label {
        font-weight: 600;
        color: #374151;
        font-size: 14px;
    }

    .filter-select {
        padding: 8px 12px;
        border: 2px solid #e5e7eb;
        border-radius: 6px;
        font-size: 14px;
        background: white;
        min-width: 180px;
        transition: border-color 0.2s;
    }

    .filter-select:focus {
        outline: none;
        border-color: #07ACB9;
        box-shadow: 0 0 0 3px rgba(7, 172, 185, 0.1);
    }

    /* Department Header Styles */
    .department-header {
        color: #124A5C;
        font-size: 1.5em;
        font-weight: bold;
        margin-top: 20px;
        padding: 15px 20px;
        background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
        border-radius: 8px;
        border-left: 4px solid #07ACB9;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .department-header i {
        color: #07ACB9;
    }

    /* Staff Table Styles */
    .staff-table-container {
        margin-top: 10px;
    }

    .staff-table {
        width: 100%;
        margin-top: 10px;
        table-layout: auto;
        border-collapse: collapse;
        max-width: 100%;
        overflow-x: auto;
        margin-left: 20px;
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .staff-table th, .staff-table td {
        padding: 12px;
        border: 1px solid #e5e7eb;
        text-align: left;
        vertical-align: middle;
        word-wrap: break-word;
    }

    .staff-table th {
        background-color: #f8fafc;
        font-weight: 600;
        text-align: center;
        color: #374151;
    }

    .staff-table tbody tr {
        transition: background-color 0.2s ease;
        cursor: pointer;
    }

    .staff-table tbody tr:hover {
        background-color: #f0f9ff;
    }

    .staff-table tbody tr:nth-child(even) {
        background-color: #f9fafb;
    }

    .staff-table tbody tr:nth-child(even):hover {
        background-color: #f0f9ff;
    }

    /* Job Title Header */
    .job-title-header {
        font-size: 1.2em;
        font-weight: bold;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px 20px;
        margin-top: 20px;
        background: #f8fafc;
        border-radius: 6px;
        border-left: 3px solid #6b7280;
    }

    .job-title-header i {
        color: #6b7280;
        margin-right: 8px;
    }

    /* Company-Wide Charts */
    .company-charts-container {
        background: linear-gradient(135deg, #124A5C 0%, #07ACB9 100%);
        padding: 30px;
        border-radius: 16px;
        box-shadow: 0 8px 32px rgba(18, 74, 92, 0.3);
        margin-bottom: 30px;
        position: relative;
        overflow: hidden;
    }

    .company-charts-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(45deg, rgba(255,255,255,0.1) 0%, transparent 100%);
        pointer-events: none;
    }

    .company-charts-container h2 {
        color: white;
        text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        margin-bottom: 25px;
        position: relative;
        z-index: 1;
    }

    .company-charts-container .section-title i {
        color: #fbbf24;
        text-shadow: 0 2px 4px rgba(0,0,0,0.3);
    }

    .charts-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
        margin-top: 25px;
        position: relative;
        z-index: 1;
    }

    .chart-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 12px;
        padding: 20px;
        text-align: center;
        transition: all 0.3s ease;
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
        position: relative;
        overflow: hidden;
    }

    .chart-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(90deg, #07ACB9, #124A5C, #f59e0b, #ef4444);
        border-radius: 12px 12px 0 0;
    }

    .chart-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        background: rgba(255, 255, 255, 1);
    }

    .chart-card h4 {
        color: #124A5C;
        font-size: 14px;
        font-weight: 700;
        margin-bottom: 15px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .chart-card canvas {
        max-width: 100%;
        height: 200px !important;
        border-radius: 6px;
    }

    /* Report Generation Section */
    .report-generation {
        background: white;
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        margin-bottom: 30px;
    }

    .section-title {
        font-size: 20px;
        font-weight: 600;
        color: #124A5C;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .section-title i {
        color: #07ACB9;
    }

    /* Form Styles */
    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin-bottom: 20px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
    }

    .form-label {
        font-weight: 600;
        color: #374151;
        margin-bottom: 8px;
        font-size: 14px;
    }

    .form-select {
        padding: 12px 16px;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        font-size: 14px;
        background: white;
        transition: border-color 0.2s, box-shadow 0.2s;
    }

    .form-select:focus {
        outline: none;
        border-color: #07ACB9;
        box-shadow: 0 0 0 3px rgba(7, 172, 185, 0.1);
    }

    /* Report Types */
    .report-types {
        margin-bottom: 30px;
    }

    .report-types h3 {
        margin-bottom: 15px;
        color: #374151;
        font-size: 16px;
        font-weight: 600;
    }

    .report-options {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
    }

    .report-option {
        border: 2px solid #e5e7eb;
        border-radius: 12px;
        padding: 20px;
        cursor: pointer;
        transition: all 0.2s;
        background: white;
        position: relative;
    }

    .report-option:hover {
        border-color: #07ACB9;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(7, 172, 185, 0.15);
    }

    .report-option.selected {
        border-color: #07ACB9;
        background: #f0f9ff;
    }

    .report-title {
        font-weight: 600;
        color: #124A5C;
        margin-bottom: 8px;
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 14px;
    }

    .report-desc {
        color: #64748b;
        font-size: 13px;
        line-height: 1.4;
    }

    /* Action Buttons */
    .action-buttons {
        display: flex;
        justify-content: center;
        gap: 15px;
        margin-top: 30px;
        padding-top: 20px;
        border-top: 1px solid #e5e7eb;
    }

    .btn {
        padding: 12px 24px;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
        font-size: 14px;
        display: flex;
        align-items: center;
        gap: 8px;
        text-decoration: none;
    }

    .btn-primary {
        background: #07ACB9;
        color: white;
    }

    .btn-primary:hover {
        background: #0891b2;
        transform: translateY(-1px);
    }

    .btn-secondary {
        background: #6b7280;
        color: white;
    }

    .btn-secondary:hover {
        background: #4b5563;
    }

    .btn-success {
        background: #10b981;
        color: white;
    }

    .btn-success:hover {
        background: #059669;
    }

    /* Loading and Messages */
    .loading {
        display: none;
        text-align: center;
        padding: 20px;
        color: #6c757d;
    }

    .loading.show {
        display: block;
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #07ACB9;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 1s linear infinite;
        margin: 0 auto 15px;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .error-message {
        background-color: #fef2f2;
        color: #991b1b;
        padding: 12px;
        border: 1px solid #fecaca;
        border-radius: 8px;
        margin-bottom: 20px;
        display: none;
    }

    .error-message.show {
        display: block;
    }

    .success-message {
        background-color: #f0fdf4;
        color: #166534;
        padding: 12px;
        border: 1px solid #bbf7d0;
        border-radius: 8px;
        margin-bottom: 20px;
        display: none;
    }

    .success-message.show {
        display: block;
    }

    /* Hidden class */
    .hidden {
        display: none;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .main-content {
            margin-left: 0;
            padding: 15px;
        }
        
        .overview-cards {
            grid-template-columns: 1fr;
        }
        
        .form-row {
            grid-template-columns: 1fr;
        }
        
        .report-options {
            grid-template-columns: 1fr;
        }
        
        .action-buttons {
            flex-direction: column;
            align-items: center;
        }

        .charts-grid {
            grid-template-columns: 1fr;
        }

        .filter-row {
            flex-direction: column;
            align-items: stretch;
        }

        .filter-group {
            flex-direction: column;
            align-items: stretch;
        }

        .filter-select {
            min-width: auto;
        }
    }
    </style>
</head>
<body>
    <%- include('../../partials/hr_partials') %>
    
    <div class="main-content">
        <!-- Tab Navigation -->
        <div class="tab-container">
            <div class="tab-buttons">
                <button class="tab-button active" onclick="showTab('records')">Employee Records</button>
                <button class="tab-button" onclick="showTab('feedback-reports')">360 Feedback Reports</button>
            </div>
        </div>

        <!-- Employee Records Tab -->
        <div id="records" class="tab-content active">
            <h1>HR Records & Performance Tracker - Company-Wide</h1>
            
            <!-- Department Filter -->
            <div class="department-filter">
                <div class="filter-row">
                    <div class="filter-group">
                        <label class="filter-label">Filter by Department:</label>
                        <select id="departmentFilter" class="filter-select">
                            <option value="">All Departments</option>
                            <!-- Will be populated by JavaScript -->
                        </select>
                    </div>
                    <div class="filter-group">
                        <label class="filter-label">Filter by Job Title:</label>
                        <select id="jobTitleFilter" class="filter-select">
                            <option value="">All Job Titles</option>
                            <!-- Will be populated by JavaScript -->
                        </select>
                    </div>
                    <div class="filter-group">
                        <button class="btn btn-secondary" onclick="clearFilters()">
                            <i class="fas fa-times"></i> Clear Filters
                        </button>
                    </div>
                </div>
            </div>

            <div id="staffTableContainer">
                <!-- Department sections will be populated here -->
                <% if (departments && Object.keys(departments).length > 0) { %>
                    <% Object.keys(departments).forEach(function(departmentName) { %>
                        <div class="department-section" data-department="<%= departmentName %>">
                            <div class="department-header">
                                <i class="fas fa-building"></i>
                                <%= departmentName %>
                            </div>
                            <div class="staff-table-container">
                                <% let department = departments[departmentName]; %>
                                <% if (department && department.length > 0) { %>
                                    <% let groupedByJobTitle = {}; %>
                                    <% department.forEach(function(staff) { %>
                                        <% if (!groupedByJobTitle[staff.jobTitle]) { %>
                                            <% groupedByJobTitle[staff.jobTitle] = []; %>
                                        <% } %>
                                        <% groupedByJobTitle[staff.jobTitle].push(staff); %>
                                    <% }); %>
        
                                    <% Object.keys(groupedByJobTitle).forEach(function(jobTitle) { %>
                                        <% let staffGroup = groupedByJobTitle[jobTitle]; %>
                                        <div class="job-title-section" data-job-title="<%= jobTitle %>">
                                            <div class="job-title-header">
                                                <span class="indent-job-title">
                                                    <i class="fas fa-users"></i>
                                                    <%= jobTitle %>
                                                </span>
                                            </div>
                                            <table class="staff-table">
                                                <thead>
                                                    <tr>
                                                        <th>Last Name</th>
                                                        <th>First Name</th>
                                                        <th>Email</th>
                                                        <th>Department</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <% staffGroup.forEach(function(staff) { %>
                                                        <tr class="staff-row" data-department="<%= departmentName %>" data-job-title="<%= jobTitle %>" onclick="window.location.href='/hr/records-performance-tracker/<%= staff.userId %>'">
                                                            <td><%= staff.lastName %></td>
                                                            <td><%= staff.firstName %></td>
                                                            <td><%= staff.userEmail %></td>
                                                            <td><%= departmentName %></td>
                                                        </tr>
                                                    <% }); %>
                                                </tbody>
                                            </table>
                                        </div>
                                    <% }); %>
                                <% } else { %>
                                    <p>No staff members available in this department</p>
                                <% } %>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <p>No departments available</p>
                <% } %>
            </div>
        </div>

        <!-- 360 Feedback Reports Tab -->
        <div id="feedback-reports" class="tab-content">
            <!-- Dashboard Header -->
            <div class="dashboard-header">
                <h2><i class="fas fa-chart-line"></i> HR Performance Analytics - Company-Wide</h2>
                <p>Monitor and analyze performance across all departments and employees</p>
            </div>

            <!-- Overview Cards -->
            <div class="overview-cards">
                <div class="overview-card">
                    <h3 id="totalEmployeesCard">0</h3>
                    <p>Total Company Employees</p>
                </div>
                <div class="overview-card">
                    <h3 id="totalDepartmentsCard">0</h3>
                    <p>Total Departments</p>
                </div>
                <div class="overview-card">
                    <h3 id="employeesWithFeedbackCard">0</h3>
                    <p>Employees with Feedback</p>
                </div>
                <div class="overview-card highlight">
                    <h3 id="companyPerformanceCard">0.0</h3>
                    <p>Company Performance Score</p>
                </div>
            </div>

            <!-- Company-Wide Charts -->
            <div class="company-charts-container">
                <h2 class="section-title">
                    <i class="fas fa-chart-bar"></i>
                    Company-Wide Performance Overview
                </h2>
                <div class="charts-grid">
                    <div class="chart-card">
                        <h4><i class="fas fa-building"></i> Department Performance</h4>
                        <canvas id="departmentPerformanceChart"></canvas>
                    </div>
                    <div class="chart-card">
                        <h4><i class="fas fa-users"></i> Performance Distribution</h4>
                        <canvas id="performanceDistributionChart"></canvas>
                    </div>
                    <div class="chart-card">
                        <h4><i class="fas fa-chart-line"></i> Company Trends</h4>
                        <canvas id="companyTrendsChart"></canvas>
                    </div>
                    <div class="chart-card">
                        <h4><i class="fas fa-cogs"></i> Skills Analysis</h4>
                        <canvas id="skillsAnalysisChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Report Generation Section -->
            <div class="report-generation">
                <h2 class="section-title">
                    <i class="fas fa-file-alt"></i>
                    Generate Performance Report
                </h2>

                <!-- Error/Success Messages -->
                <div id="errorMessage" class="error-message"></div>
                <div id="successMessage" class="success-message"></div>

                <!-- Form -->
                <form id="reportForm">
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Select Department</label>
                            <select id="departmentSelect" class="form-select" name="departmentId">
                                <option value="">All Departments</option>
                                <!-- Will be populated by JavaScript -->
                            </select>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Select Employee</label>
                            <select id="employeeSelect" class="form-select" name="employeeId" required>
                                <option value="">Choose an employee...</option>
                                <!-- Will be populated by JavaScript -->
                            </select>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Report Year</label>
                            <select id="yearSelect" class="form-select" name="year" required>
                                <option value="2025" selected>2025</option>
                                <option value="2024">2024</option>
                                <option value="2023">2023</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Report Type</label>
                            <select id="reportTypeSelect" class="form-select" name="reportType" required>
                                <option value="">Select report type...</option>
                                <option value="quarterly">Quarterly Report</option>
                                <option value="midyear">Mid-Year Report</option>
                                <option value="finalyear">Final-Year Report</option>
                                <option value="comparison">Comparison Report</option>
                            </select>
                        </div>
                    </div>

                    <!-- Quarter Selection (shown when quarterly is selected) -->
                    <div id="quarterSelection" class="form-group hidden">
                        <label class="form-label">Select Quarter</label>
                        <select id="quarterSelect" class="form-select" name="quarter">
                            <option value="">Select quarter...</option>
                            <option value="Q1">Q1 (January - March)</option>
                            <option value="Q2">Q2 (April - June)</option>
                            <option value="Q3">Q3 (July - September)</option>
                            <option value="Q4">Q4 (October - December)</option>
                        </select>
                    </div>

                    <!-- Action Buttons -->
                    <div class="action-buttons">
                        <button type="button" id="previewBtn" class="btn btn-secondary">
                            <i class="fas fa-eye"></i>
                            Preview Report
                        </button>
                        <button type="button" id="generatePdfBtn" class="btn btn-primary">
                            <i class="fas fa-download"></i>
                            Generate PDF
                        </button>
                        <button type="button" id="refreshDataBtn" class="btn btn-secondary">
                            <i class="fas fa-sync-alt"></i>
                            Refresh Data
                        </button>
                    </div>
                </form>
            </div>

            <!-- Loading Indicator -->
            <div id="loadingIndicator" class="loading">
                <div class="spinner"></div>
                <p>Loading company performance data...</p>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let allEmployees = [];
        let allDepartments = [];
        let companyStats = {};
        
        // Tab functionality
        function showTab(tabName) {
            // Hide all tab contents
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            
            // Remove active class from all tab buttons
            document.querySelectorAll('.tab-button').forEach(button => {
                button.classList.remove('active');
            });
            
            // Show selected tab content
            document.getElementById(tabName).classList.add('active');
            
            // Add active class to clicked button
            event.target.classList.add('active');
            
            // Initialize feedback reports if switching to that tab
            if (tabName === 'feedback-reports') {
                initializeFeedbackReports();
            }
        }
        
        // Initialize feedback reports functionality
        function initializeFeedbackReports() {
            console.log('🔄 Initializing HR 360 Feedback Reports...');
            loadCompanyWideData();
            setupEventListeners();
        }
        
        // Load company-wide data
        async function loadCompanyWideData() {
            console.log('🔄 Loading company-wide performance data...');
            
            try {
                showLoading(true);
                hideMessages();
                
                // TODO: Replace with actual API call
                // const response = await fetch('/hr/reports/company-wide-employees');
                
                // Mock data for now
                const mockData = {
                    success: true,
                    employees: [
                        { 
                            userId: 1, 
                            firstName: 'John', 
                            lastName: 'Doe',
                            fullName: 'John Doe',
                            jobTitle: 'Software Engineer',
                            department: 'IT Department',
                            departmentId: 1,
                            feedbackAvailability: { Q1: true, Q2: true, Q3: false, Q4: false }
                        },
                        { 
                            userId: 2, 
                            firstName: 'Jane', 
                            lastName: 'Smith',
                            fullName: 'Jane Smith',
                            jobTitle: 'Marketing Manager',
                            department: 'Marketing Department',
                            departmentId: 2,
                            feedbackAvailability: { Q1: true, Q2: false, Q3: true, Q4: false }
                        },
                        { 
                            userId: 3, 
                            firstName: 'Bob', 
                            lastName: 'Johnson',
                            fullName: 'Bob Johnson',
                            jobTitle: 'Sales Representative',
                            department: 'Sales Department',
                            departmentId: 3,
                            feedbackAvailability: { Q1: false, Q2: true, Q3: true, Q4: true }
                        }
                    ],
                    departments: [
                        { id: 1, name: 'IT Department', employeeCount: 15 },
                        { id: 2, name: 'Marketing Department', employeeCount: 10 },
                        { id: 3, name: 'Sales Department', employeeCount: 20 }
                    ],
                    companyStats: {
                        totalEmployees: 45,
                        totalDepartments: 3,
                        employeesWithFeedback: 38,
                        companyPerformanceScore: 4.2
                    }
                };
                
                if (mockData.success) {
                    allEmployees = mockData.employees || [];
                    allDepartments = mockData.departments || [];
                    companyStats = mockData.companyStats || {};
                    
                    populateEmployeeDropdown(allEmployees);
                    populateDepartmentDropdown(allDepartments);
                    updateOverviewCards(companyStats);
                    generateCompanyCharts(allEmployees, allDepartments);
                    showSuccessMessage(`Loaded ${allEmployees.length} employees from ${allDepartments.length} departments`);
                    console.log('✅ Company data loaded successfully');
                } else {
                    throw new Error('Failed to load company data');
                }
                
            } catch (error) {
                console.error('❌ Error loading company data:', error);
                showErrorMessage('Error loading company performance data: ' + error.message);
                allEmployees = [];
                allDepartments = [];
                companyStats = {};
            } finally {
                showLoading(false);
            }
        }
        
        // Populate employee dropdown with department info
        function populateEmployeeDropdown(employees) {
            const employeeSelect = document.getElementById('employeeSelect');
            employeeSelect.innerHTML = '<option value="">Choose an employee...</option>';
            
            // Group employees by department for better organization
            const employeesByDept = {};
            employees.forEach(employee => {
                const deptName = employee.department || 'Unknown Department';
                if (!employeesByDept[deptName]) {
                    employeesByDept[deptName] = [];
                }
                employeesByDept[deptName].push(employee);
            });
            
            // Create optgroups for each department
            Object.keys(employeesByDept).sort().forEach(deptName => {
                const optgroup = document.createElement('optgroup');
                optgroup.label = deptName;
                
                employeesByDept[deptName].forEach(employee => {
                    const option = document.createElement('option');
                    option.value = employee.userId;
                    option.textContent = `${employee.fullName} (${employee.jobTitle})`;
                    option.dataset.department = employee.department;
                    option.dataset.departmentId = employee.departmentId;
                    option.dataset.feedbackAvailability = JSON.stringify(employee.feedbackAvailability || {});
                    optgroup.appendChild(option);
                });
                
                employeeSelect.appendChild(optgroup);
            });
            
            console.log('✅ Employee dropdown populated with', employees.length, 'employees');
        }
        
        // Populate department dropdown
        function populateDepartmentDropdown(departments) {
            const departmentSelect = document.getElementById('departmentSelect');
            departmentSelect.innerHTML = '<option value="">All Departments</option>';
            
            departments.forEach(dept => {
                const option = document.createElement('option');
                option.value = dept.id;
                option.textContent = `${dept.name} (${dept.employeeCount} employees)`;
                departmentSelect.appendChild(option);
            });
            
            console.log('✅ Department dropdown populated with', departments.length, 'departments');
        }
        
        // Update overview cards with company stats
        function updateOverviewCards(stats) {
            document.getElementById('totalEmployeesCard').textContent = stats.totalEmployees || 0;
            document.getElementById('totalDepartmentsCard').textContent = stats.totalDepartments || 0;
            document.getElementById('employeesWithFeedbackCard').textContent = stats.employeesWithFeedback || 0;
            document.getElementById('companyPerformanceCard').textContent = (stats.companyPerformanceScore || 0).toFixed(1);
            
            console.log('✅ Overview cards updated with company stats');
        }
        
        // Generate company-wide charts
        function generateCompanyCharts(employees, departments) {
            console.log('🔄 Generating company-wide performance charts...');
            
            try {
                generateDepartmentPerformanceChart(departments);
                generatePerformanceDistributionChart(employees);
                generateCompanyTrendsChart();
                generateSkillsAnalysisChart(employees);
                
                console.log('✅ All company charts generated successfully');
            } catch (error) {
                console.error('❌ Error generating company charts:', error);
                showErrorMessage('Error generating performance charts: ' + error.message);
            }
        }
        
        // Department Performance Chart
        function generateDepartmentPerformanceChart(departments) {
            const ctx = document.getElementById('departmentPerformanceChart');
            if (!ctx) return;
            
            // Mock performance data for departments
            const performanceData = departments.map(dept => ({
                department: dept.name,
                score: (Math.random() * 2 + 3).toFixed(1) // Random score between 3-5
            }));
            
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: performanceData.map(d => d.department.replace(' Department', '')),
                    datasets: [{
                        label: 'Department Performance',
                        data: performanceData.map(d => parseFloat(d.score)),
                        backgroundColor: [
                            '#07ACB9',
                            '#124A5C',
                            '#10b981',
                            '#f59e0b',
                            '#ef4444'
                        ],
                        borderRadius: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: { 
                        legend: { display: false },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `${context.label}: ${context.raw}/5.0`;
                                }
                            }
                        }
                    },
                    scales: {
                        y: { 
                            beginAtZero: true, 
                            max: 5,
                            ticks: { font: { size: 10 } }
                        },
                        x: { 
                            ticks: { font: { size: 10 } }
                        }
                    }
                }
            });
        }
        
        // Performance Distribution Chart
        function generatePerformanceDistributionChart(employees) {
            const ctx = document.getElementById('performanceDistributionChart');
            if (!ctx) return;
            
            // Mock performance distribution
            const distribution = {
                'Excellent (4.5-5.0)': Math.floor(employees.length * 0.3),
                'Good (3.5-4.4)': Math.floor(employees.length * 0.4),
                'Average (2.5-3.4)': Math.floor(employees.length * 0.2),
                'Needs Improvement (0-2.4)': Math.floor(employees.length * 0.1)
            };
            
            new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: Object.keys(distribution),
                    datasets: [{
                        data: Object.values(distribution),
                        backgroundColor: [
                            '#10b981', // Green
                            '#07ACB9', // Teal
                            '#f59e0b', // Orange
                            '#ef4444'  // Red
                        ],
                        borderWidth: 2,
                        borderColor: '#ffffff'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { 
                            position: 'bottom',
                            labels: { font: { size: 10 } }
                        }
                    }
                }
            });
        }
        
        // Company Trends Chart
        function generateCompanyTrendsChart() {
            const ctx = document.getElementById('companyTrendsChart');
            if (!ctx) return;
            
            // Mock quarterly trend data
            const quarters = ['Q1 2024', 'Q2 2024', 'Q3 2024', 'Q4 2024'];
            const trendData = quarters.map(() => (Math.random() * 1.5 + 3.5).toFixed(1));
            
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: quarters,
                    datasets: [{
                        label: 'Company Performance',
                        data: trendData,
                        borderColor: '#07ACB9',
                        backgroundColor: 'rgba(7, 172, 185, 0.1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: { 
                        legend: { display: false }
                    },
                    scales: {
                        y: { 
                            beginAtZero: true, 
                            max: 5,
                            ticks: { font: { size: 10 } }
                        },
                        x: { 
                            ticks: { font: { size: 10 } }
                        }
                    }
                }
            });
        }
        
        // Skills Analysis Chart
        function generateSkillsAnalysisChart(employees) {
            const ctx = document.getElementById('skillsAnalysisChart');
            if (!ctx) return;
            
            // Mock skills data
            const skills = ['Leadership', 'Communication', 'Technical', 'Problem Solving', 'Teamwork'];
            const skillScores = skills.map(() => (Math.random() * 1.5 + 3.0).toFixed(1));
            
            new Chart(ctx, {
                type: 'radar',
                data: {
                    labels: skills,
                    datasets: [{
                        label: 'Company Average',
                        data: skillScores,
                        borderColor: '#124A5C',
                        backgroundColor: 'rgba(18, 74, 92, 0.2)',
                        borderWidth: 2,
                        pointBackgroundColor: '#124A5C',
                        pointBorderColor: '#ffffff',
                        pointBorderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: { 
                        legend: { display: false }
                    },
                    scales: {
                        r: {
                            beginAtZero: true,
                            max: 5,
                            ticks: { font: { size: 8 } }
                        }
                    }
                }
            });
        }
        
        // Department filter functionality for employee records
        function setupRecordFilters() {
            // Populate department and job title filters
            const departments = [...new Set(Array.from(document.querySelectorAll('.department-section')).map(el => el.dataset.department))];
            const jobTitles = [...new Set(Array.from(document.querySelectorAll('.job-title-section')).map(el => el.dataset.jobTitle))];
            
            const departmentFilter = document.getElementById('departmentFilter');
            const jobTitleFilter = document.getElementById('jobTitleFilter');
            
            // Populate department filter
            departments.forEach(dept => {
                const option = document.createElement('option');
                option.value = dept;
                option.textContent = dept;
                departmentFilter.appendChild(option);
            });
            
            // Populate job title filter
            jobTitles.forEach(title => {
                const option = document.createElement('option');
                option.value = title;
                option.textContent = title;
                jobTitleFilter.appendChild(option);
            });
            
            // Add event listeners
            departmentFilter.addEventListener('change', applyFilters);
            jobTitleFilter.addEventListener('change', applyFilters);
        }
        
        // Apply filters to employee records
        function applyFilters() {
            const departmentFilter = document.getElementById('departmentFilter').value;
            const jobTitleFilter = document.getElementById('jobTitleFilter').value;
            
            // Show/hide department sections
            document.querySelectorAll('.department-section').forEach(deptSection => {
                const deptName = deptSection.dataset.department;
                const shouldShowDept = !departmentFilter || deptName === departmentFilter;
                deptSection.style.display = shouldShowDept ? 'block' : 'none';
                
                if (shouldShowDept) {
                    // Show/hide job title sections within department
                    deptSection.querySelectorAll('.job-title-section').forEach(jobSection => {
                        const jobTitle = jobSection.dataset.jobTitle;
                        const shouldShowJob = !jobTitleFilter || jobTitle === jobTitleFilter;
                        jobSection.style.display = shouldShowJob ? 'block' : 'none';
                    });
                }
            });
        }
        
        // Clear all filters
        function clearFilters() {
            document.getElementById('departmentFilter').value = '';
            document.getElementById('jobTitleFilter').value = '';
            applyFilters();
        }
        
        // Filter employees in feedback reports by department
        function filterEmployeesByDepartment() {
            const departmentSelect = document.getElementById('departmentSelect');
            const employeeSelect = document.getElementById('employeeSelect');
            const selectedDeptId = departmentSelect.value;
            
            // Clear current options
            employeeSelect.innerHTML = '<option value="">Choose an employee...</option>';
            
            if (!selectedDeptId) {
                // Show all employees
                populateEmployeeDropdown(allEmployees);
                return;
            }
            
            // Filter employees by selected department
            const filteredEmployees = allEmployees.filter(emp => emp.departmentId.toString() === selectedDeptId);
            populateEmployeeDropdown(filteredEmployees);
        }
        
        // Setup event listeners
        function setupEventListeners() {
            console.log('🔄 Setting up HR feedback reports event listeners...');
            
            // Department filter for employee selection
            document.getElementById('departmentSelect').addEventListener('change', filterEmployeesByDepartment);
            
            // Report type selection
            document.getElementById('reportTypeSelect').addEventListener('change', function() {
                const quarterSelection = document.getElementById('quarterSelection');
                if (this.value === 'quarterly') {
                    quarterSelection.classList.remove('hidden');
                } else {
                    quarterSelection.classList.add('hidden');
                }
            });
            
            // Preview button
            document.getElementById('previewBtn').addEventListener('click', function() {
                generateReport('preview');
            });
            
            // Generate PDF button
            document.getElementById('generatePdfBtn').addEventListener('click', function() {
                generateReport('pdf');
            });
            
            // Refresh data button
            document.getElementById('refreshDataBtn').addEventListener('click', function() {
                loadCompanyWideData();
            });
            
            console.log('✅ Event listeners set up successfully');
        }
        
        // Generate report (placeholder)
        function generateReport(format) {
            const employeeId = document.getElementById('employeeSelect').value;
            const reportType = document.getElementById('reportTypeSelect').value;
            const year = document.getElementById('yearSelect').value;
            const quarter = document.getElementById('quarterSelect').value;
            
            if (!employeeId || !reportType || !year) {
                showErrorMessage('Please select employee, report type, and year');
                return;
            }
            
            if (reportType === 'quarterly' && !quarter) {
                showErrorMessage('Please select a quarter for quarterly reports');
                return;
            }
            
            console.log(`🔄 Generating ${format} report:`, { employeeId, reportType, year, quarter });
            
            // TODO: Implement actual report generation
            showSuccessMessage(`${format} report generation will be implemented with backend API`);
        }
        
        // Utility functions
        function showLoading(show, message = 'Loading company performance data...') {
            const loading = document.getElementById('loadingIndicator');
            if (show) {
                loading.classList.add('show');
                loading.querySelector('p').textContent = message;
            } else {
                loading.classList.remove('show');
            }
        }
        
        function showErrorMessage(message) {
            const errorDiv = document.getElementById('errorMessage');
            errorDiv.textContent = message;
            errorDiv.classList.add('show');
            setTimeout(() => errorDiv.classList.remove('show'), 5000);
        }
        
        function showSuccessMessage(message) {
            const successDiv = document.getElementById('successMessage');
            successDiv.textContent = message;
            successDiv.classList.add('show');
            setTimeout(() => successDiv.classList.remove('show'), 3000);
        }
        
        function hideMessages() {
            document.getElementById('errorMessage').classList.remove('show');
            document.getElementById('successMessage').classList.remove('show');
        }
        
        // Initialize page when DOM loads
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🔄 HR Records & Performance Tracker loaded');
            setupRecordFilters();
        });
    </script>

    <!-- Original Sidebar Toggle Scripts -->
    <script>
        // Toggle active class for sidebar links
        document.querySelectorAll('.sidebar ul li a').forEach(link => {
            link.addEventListener('click', function() {
                document.querySelectorAll('.sidebar ul li a').forEach(link => link.classList.remove('active'));
                this.classList.add('active');
            });
        });

        // Toggle collapsible content
        document.querySelectorAll('.collapsible-header').forEach(header => {
            header.addEventListener('click', function() {
                var content = this.nextElementSibling;
                if (content.style.display === 'block') {
                    content.style.display = 'none';
                } else {
                    document.querySelectorAll('.collapsible-content').forEach(item => {
                        if (item !== content) {
                            item.style.display = 'none';
                        }
                    });
                    content.style.display = 'block';
                }
            });
        });
    </script>
</body>
</html>