<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/sidebar.css">
    <link rel="stylesheet" href="/css/hr_pages.css">
    <title>Add a Job Posting</title>
</head>
<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f9f9f9;
        margin: 0;
        padding: 20px;
    }

    .container {
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        max-width: 800px;
        margin: auto;
    }

    h1, h3 {
        text-align: center;
        color: #07ACB9;
    }

    .form-group {
        margin-bottom: 20px;
    }

    label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    input[type="text"],
    input[type="date"],
    textarea,
    select {
        width: calc(100% - 22px); /* Adjust for padding and border */
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    textarea {
        height: 100px;
    }

    .small-input {
        width: calc(40% - 22px); /* Smaller width for degree type, adjusted for padding */
    }

    .submit-btn {
        background-color: #07ACB9;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-weight: bold;
        margin-top: 20px;
        width: 100%;
    }

    .submit-btn:hover {
        background-color: #009b9f; /* Change on hover */
    }

    .section {
        margin-top: 30px;
    }

    .add-more, .remove-btn {
        color: #07ACB9;
        cursor: pointer;
        margin-top: 10px;
        display: inline-block;
        border: 1px solid #07ACB9; /* Add border to match input styling */
        border-radius: 5px; /* Rounded corners for the button */
        padding: 8px 12px; /* Consistent padding for buttons */
        text-align: center; /* Center text in buttons */
    }

    .remove-btn {
        color: #ff4d4d;
        margin-left: 10px; /* Space between Add More and Remove button */
    }

    .form-group.inline-group {
        display: flex;
        flex-direction: column; /* Align items vertically */
        gap: 10px; /* Space between input elements */
        align-items: flex-start; /* Align items to the left */
    }

    .form-group.inline-group > div {
        width: 100%; /* Make inner divs take full width */
        display: flex; /* Enable flexbox for inner div */
        align-items: center; /* Align items vertically */
    }

    .form-group.inline-group > div > label {
        flex: 1; /* Allow label to take full width */
    }

    .form-group.inline-group > div > .add-more,
    .form-group.inline-group > div > .remove-btn {
        margin-left: 10px; /* Space next to input fields */
    }

    .form-group + .form-group {
        margin-top: 25px;
    }

    .toggle-label {
        display: flex;
        align-items: center;
        margin-top: 10px;
    }

    .toggle-label input {
        margin-left: 10px;
        margin-right: 10px;
    }

    .toggle-label span {
        margin: 0 10px;
    }
</style>


<body>
    <%- include('../../partials/hr_partials') %>
    <div class="container">
        <h1 class="title">Add a Job Posting</h1>
        <form id="addJobForm" action="/hr/addjoboffer" method="POST">


            <div class="form-group">
                <label for="departmentId">Department</label>
                <select id="departmentId" name="departmentId" class="form-control" required>
                    <option value="">Select Department</option>
                </select>
            </div>
    
            <div class="form-group">
                <label for="jobTitle">Job Title:</label>
                <select id="jobTitle" name="jobTitle" class="selectpicker" data-live-search="true" required>
                    <option value="">Select Job Title</option>
                </select>
            </div>
            <!-- Job Type -->
            <div class="form-group">
                <label for="jobType">Job Type</label>
                <select id="jobType" name="jobType" required>
                    <option value="">Select Job Type</option>
                    <option value="Onsite">Onsite</option>
                    <option value="Hybrid">Hybrid</option>
                    <option value="Remote">Remote</option>
                </select>
            </div>

            <!-- Employment Type -->
            <div class="form-group">
                <label for="jobTimeCommitment">Employment Type</label>
                <select id="jobTimeCommitment" name="jobTimeCommitment" required>
                    <option value="">Select Employment Type</option>
                    <option value="Full-time">Full-time</option>
                    <option value="Part-time">Part-time</option>
                </select>
            </div>

            <!-- Job Description -->
            <div class="form-group">
                <label for="jobDescrpt">Job Description</label>
                <textarea id="jobDescrpt" name="jobDescrpt" placeholder="Enter job description" required></textarea>
            </div>

            <!-- Hiring Start Date -->
            <div class="form-group">
                <label for="hiringStartDate">Hiring Start Date</label>
                <input type="date" id="hiringStartDate" name="hiringStartDate" required>
            </div>

            <!-- Hiring End Date -->
            <div class="form-group">
                <label for="hiringEndDate">Hiring End Date</label>
                <input type="date" id="hiringEndDate" name="hiringEndDate" required>
            </div>

            <!-- Remove Job Posting Status Toggle -->

            <!-- Job Requirements Section -->
            <div class="section">
                <h2>Job Requirements</h2>

               <!-- Certifications Section -->
<div id="certification-section">
    <label>Certifications</label>
    <div class="form-group inline-group">
        <input type="text" name="jobReqCertificateType[]" placeholder="Enter certification type (e.g., AWS)">
        <input type="text" name="jobReqCertificateDescrpt[]" placeholder="Enter certification description (e.g., Must be AWS certified)">
        <span class="add-more" onclick="addMoreInput('certification-section', 'jobReqCertificateDescrpt', 'Certification Description')">Add More</span>
    </div>
</div>


                <!-- Degrees Section -->
                <div id="degree-section">
                    <label>Degrees</label>
                    <div class="form-group inline-group">
                        <input type="text" class="smaller-input" name="jobReqDegreeType[]" placeholder="Enter degree type (e.g., Bachelor's Degree)">
                        <input type="text" class="smaller-input" name="jobReqDegreeDescrpt[]" placeholder="Enter degree description (e.g., Must be any graduate of Bachelor's degree in Finance)">
                        <span class="add-more" onclick="addMoreInput('degree-section', 'degree', 'Degree')">Add More</span>
                    </div>
                </div>

                <!-- Experiences Section -->
                <div id="experience-section">
                    <label>Experiences</label>
                    <div class="form-group inline-group">
                        <input type="text" class="smaller-input" name="jobReqExperienceType[]" placeholder="Enter experience type (e.g., Relevant Industry Experience)">
                        <input type="text" class="smaller-input" name="jobReqExperienceDescrpt[]" placeholder="Enter experience description (e.g., Must have experience in a relevant industry, such as oil and gas)">
                        <span class="add-more" onclick="addMoreInput('experience-section', 'experience', 'Experience')">Add More</span>
                    </div>
                </div>

                <!-- Skills Section -->
                <div id="skill-section">
                    <label>Skills</label>
                    <div class="form-group inline-group">
                        <select name="jobReqSkillType[]" class="smaller-input" placeholder="Add a Hard or Soft Skill">
                            <option value="Hard">Hard Skill</option>
                            <option value="Soft">Soft Skill</option>
                        </select>
                        <input type="text" class="smaller-input" name="jobReqSkillName[]" placeholder="Enter skill name (e.g., Building and Maintaining Financial Models for Hard Skills or Communication for Soft Skills)">
                        <span class="add-more" onclick="addMoreInput('skill-section', 'skill', 'Skill')">Add More</span>
                    </div>
                </div>
            </div>

            <button type="submit" class="submit-btn">Submit</button>
        </form>
    </div>

        <!-- jQuery and Bootstrap JS -->
        <!-- <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.1/js/bootstrap-select.min.js"></script> -->
        <script>


// Populate departments dropdown
async function populateDepartments() {
        try {
            console.log('Fetching departments...');
            const response = await fetch('/hr/api/departments');
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const departments = await response.json();
            console.log('Departments fetched:', departments);

            const departmentSelect = document.getElementById('departmentId');
            departmentSelect.innerHTML = ''; // Clear existing options

            const defaultOption = document.createElement('option');
            defaultOption.value = '';
            defaultOption.text = 'Select Department';
            departmentSelect.appendChild(defaultOption);

            departments.forEach(dept => {
                const option = document.createElement('option');
                option.value = dept.departmentId;
                option.text = dept.deptName;
                departmentSelect.appendChild(option);
            });

            // Add "Add New" option
            const addNewOption = document.createElement('option');
            addNewOption.value = 'add-new';
            addNewOption.text = 'Add New Department';
            departmentSelect.appendChild(addNewOption);

            $('#departmentId').selectpicker('refresh');
        } catch (error) {
            console.error('Error fetching departments:', error);
        }
    }

    // Populate job titles dropdown based on selected department
    async function populateJobTitles(departmentId) {
        try {
            console.log('Fetching job titles for department ID:', departmentId);
            const response = await fetch(`/hr/api/job-titles?departmentId=${departmentId}`);
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const jobTitles = await response.json();
            console.log('Job titles fetched:', jobTitles);

            const jobTitleSelect = document.getElementById('jobTitle');
            jobTitleSelect.innerHTML = ''; // Clear existing options

            if (jobTitles.length === 0) {
                const noJobTitleOption = document.createElement('option');
                noJobTitleOption.value = '';
                noJobTitleOption.text = 'No Job Titles Available';
                jobTitleSelect.appendChild(noJobTitleOption);
            } else {
                jobTitles.forEach(job => {
                    const option = document.createElement('option');
                    option.value = job.jobId;
                    option.text = job.jobTitle;
                    jobTitleSelect.appendChild(option);
                });
            }

            // Add "Add New" option
            const addNewOption = document.createElement('option');
            addNewOption.value = 'add-new';
            addNewOption.text = 'Add New Job Title';
            jobTitleSelect.appendChild(addNewOption);

            $('#jobTitle').selectpicker('refresh');
        } catch (error) {
            console.error('Error fetching job titles:', error);
        }
    }

    // Dynamically fetch departments from the backend
    document.addEventListener('DOMContentLoaded', function() {
        populateDepartments(); // Fetch departments on page load

        document.getElementById('departmentId').addEventListener('change', async function() {
            const departmentId = this.value;
            await populateJobTitles(departmentId);
        });

        document.getElementById('jobTitle').addEventListener('change', async function() {
            const jobId = this.value;

            if (jobId === 'add-new') {
                const newJobTitle = prompt('Enter the new job title:');
                if (newJobTitle) {
                    const departmentId = document.getElementById('departmentId').value;
                    try {
                        const response = await fetch('/hr/api/job-titles', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ departmentId, jobTitle: newJobTitle })
                        });
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        const newJob = await response.json();
                        console.log('New job title added:', newJob);
                        await populateJobTitles(departmentId); // Refresh job titles dropdown after adding a new job title
                    } catch (error) {
                        console.error('Error adding new job title:', error);
                    }
                }
                return;
            }
        });
    });

        function addMoreInput(sectionId, inputName, placeholderText) {
            const section = document.getElementById(sectionId);
            const newDiv = document.createElement('div');
            newDiv.className = "form-group inline-group";

            if (inputName === 'jobReqCertificateDescrpt') {
                newDiv.innerHTML = `
                    <input type="text" name="jobReqCertificateDescrpt[]" placeholder="Enter certification description">
                    <span class="remove-btn" onclick="this.parentElement.remove()">Remove</span>
                `;
            } else if (inputName === 'degree') {
                newDiv.innerHTML = `
                    <input type="text" class="small-input" name="jobReqDegreeType[]" placeholder="Enter degree type">
                    <input type="text" name="jobReqDegreeDescrpt[]" placeholder="Enter degree description">
                    <span class="remove-btn" onclick="this.parentElement.remove()">Remove</span>
                `;
            } else if (inputName === 'experience') {
                newDiv.innerHTML = `
                    <input type="text" name="jobReqExperienceType[]" placeholder="Enter experience type">
                    <input type="text" name="jobReqExperienceDescrpt[]" placeholder="Enter experience description">
                    <span class="remove-btn" onclick="this.parentElement.remove()">Remove</span>
                `;
            } else if (inputName === 'skill') {
                newDiv.innerHTML = `
                    <select name="jobReqSkillType[]">
                        <option value="">Select Skill Type</option>
                        <option value="Hard">Hard Skill</option>
                        <option value="Soft">Soft Skill</option>
                    </select>
                    <input type="text" name="jobReqSkillName[]" placeholder="Enter skill name">
                    <span class="remove-btn" onclick="this.parentElement.remove()">Remove</span>
                `;
            }

            section.appendChild(newDiv);
        }
    </script>
</body>
</html>
