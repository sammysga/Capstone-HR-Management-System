<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/sidebar.css">
    <link rel="stylesheet" href="/css/hr_pages.css">
    <title>Add a Job Posting</title>
</head>
<style>
    /* Enhanced CSS for the job posting form */
/* Enhanced CSS for the job posting form - Premium Version */
:root {
    --primary: #07ACB9;
    --primary-hover: #059AA6;
    --primary-light: #E0F7F9;
    --primary-ultra-light: #F0FBFC;
    --text-dark: #333333;
    --text-medium: #555555;
    --text-light: #777777;
    --danger: #ff4d4d;
    --danger-hover: #e53e3e;
    --danger-light: #FFE5E5;
    --success: #28a745;
    --success-light: #E3F9E5;
    --white: #ffffff;
    --off-white: #fafafa;
    --bg-light: #f5f7f9;
    --border: #dddddd;
    --border-light: #eeeeee;
    --shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
    --shadow-hover: 0 5px 20px rgba(0, 0, 0, 0.12);
    --radius: 8px;
    --radius-sm: 4px;
    --transition: all 0.3s ease;
}

/* Base styles that won't affect partials */
.container {
    background-color: var(--white);
    padding: 30px;
    border-radius: 12px;
    box-shadow: var(--shadow);
    max-width: 850px;
    margin: 25px auto;
    border: 1px solid var(--border-light);
}

.container h1.title {
    color: var(--primary);
    margin-bottom: 30px;
    text-align: center;
    font-size: 28px;
    font-weight: 700;
    position: relative;
    padding-bottom: 15px;
}

.container h1.title:after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 60px;
    height: 3px;
    background-color: var(--primary);
    border-radius: 3px;
}

/* Form group styling with improved spacing */
.form-group {
    margin-bottom: 25px;
    position: relative;
}

.form-group + .form-group {
    margin-top: 0;
}

.form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 600;
    color: var(--text-dark);
    font-size: 15px;
    letter-spacing: 0.3px;
}

/* Visual indicator for required fields */
label.required:after {
    content: "*";
    color: var(--danger);
    margin-left: 4px;
}

/* Form control styling with improved aesthetics */
.form-control,
input[type="text"],
input[type="date"],
textarea,
select {
    width: 100%;
    padding: 12px 15px;
    border: 1px solid var(--border);
    border-radius: var(--radius);
    font-size: 15px;
    transition: var(--transition);
    background-color: var(--white);
    color: var(--text-dark);
    box-shadow: inset 0 1px 2px rgba(0,0,0,0.05);
}

input[type="text"]:focus,
input[type="date"]:focus,
textarea:focus,
select:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(7, 172, 185, 0.15);
    background-color: var(--primary-ultra-light);
}

input[type="text"]::placeholder,
textarea::placeholder {
    color: var(--text-light);
    opacity: 0.8;
}

textarea {
    height: 130px;
    resize: vertical;
    line-height: 1.5;
}

/* Section headings with improved visual hierarchy */
.section {
    margin-top: 40px;
    padding-top: 20px;
    border-top: 1px solid var(--border-light);
    position: relative;
}

.section:before {
    content: "";
    position: absolute;
    top: -1px;
    left: 0;
    width: 50px;
    height: 3px;
    background-color: var(--primary);
    border-radius: 3px;
}

.section h2 {
    color: var(--primary);
    margin-bottom: 25px;
    font-size: 22px;
    font-weight: 600;
}

/* Label styling for requirement sections */
#certification-section label,
#degree-section label,
#experience-section label,
#skill-section label {
    font-size: 17px;
    color: var(--text-medium);
    margin-bottom: 12px;
    font-weight: 600;
}

/* Input groups for requirements with better alignment */
.inline-group {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    margin-bottom: 20px;
    align-items: center;
    padding: 15px;
    background-color: var(--off-white);
    border-radius: var(--radius);
    border: 1px solid var(--border-light);
    transition: var(--transition);
}

.inline-group:hover {
    background-color: var(--primary-ultra-light);
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}

.inline-group input,
.inline-group select {
    flex: 1;
    min-width: 0; /* Prevents flex items from expanding beyond container */
}

.smaller-input {
    max-width: 220px;
}

/* Enhanced Add More and Remove buttons */
.add-more, 
.remove-btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 10px 15px;
    border-radius: var(--radius);
    cursor: pointer;
    font-weight: 500;
    transition: var(--transition);
    min-width: 100px;
    white-space: nowrap;
    font-size: 14px;
}

.add-more {
    background-color: var(--primary-light);
    color: var(--primary);
    border: 1px solid var(--primary);
}

.add-more:hover {
    background-color: var(--primary);
    color: var(--white);
    transform: translateY(-2px);
    box-shadow: 0 3px 10px rgba(7, 172, 185, 0.2);
}

.remove-btn {
    background-color: var(--danger-light);
    color: var(--danger);
    border: 1px solid var(--danger);
}

.remove-btn:hover {
    background-color: var(--danger);
    color: var(--white);
    transform: translateY(-2px);
    box-shadow: 0 3px 10px rgba(255, 77, 77, 0.2);
}

/* Premium Submit button */
.submit-btn {
    background-color: var(--primary);
    color: var(--white);
    padding: 15px 20px;
    border: none;
    border-radius: var(--radius);
    cursor: pointer;
    font-weight: 600;
    font-size: 16px;
    width: 100%;
    margin-top: 35px;
    transition: var(--transition);
    position: relative;
    overflow: hidden;
    letter-spacing: 0.5px;
    box-shadow: 0 4px 10px rgba(7, 172, 185, 0.2);
}

.submit-btn:hover {
    background-color: var(--primary-hover);
    transform: translateY(-3px);
    box-shadow: 0 6px 15px rgba(7, 172, 185, 0.25);
}

.submit-btn:active {
    transform: translateY(-1px);
    box-shadow: 0 2px 5px rgba(7, 172, 185, 0.2);
}

/* Submit button ripple effect */
.submit-btn:after {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    width: 10px;
    height: 10px;
    background: rgba(255, 255, 255, 0.3);
    opacity: 0;
    border-radius: 100%;
    transform: scale(1, 1) translate(-50%, -50%);
    transform-origin: 50% 50%;
}

.submit-btn:focus:not(:active)::after {
    animation: ripple 1s ease-out;
}

@keyframes ripple {
    0% {
        transform: scale(0, 0);
        opacity: 0.5;
    }
    20% {
        transform: scale(25, 25);
        opacity: 0.3;
    }
    100% {
        opacity: 0;
        transform: scale(40, 40);
    }
}

/* Enhanced help text styling */
.help-text {
    color: var(--text-light);
    font-size: 13px;
    margin-top: 6px;
    font-style: italic;
}

/* Card-style design for form sections */
.card-styled {
    background-color: var(--white);
    border-radius: var(--radius);
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    border: 1px solid var(--border-light);
    transition: var(--transition);
}

.card-styled:hover {
    box-shadow: var(--shadow-hover);
}

/* Add smooth animations */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(15px); }
    to { opacity: 1; transform: translateY(0); }
}

.form-group.inline-group {
    animation: fadeIn 0.4s ease;
}

/* Responsive design with improved mobile experience */
@media (max-width: 768px) {
    .container {
        padding: 20px 15px;
        margin: 15px;
    }
    
    .inline-group {
        flex-direction: column;
        align-items: flex-start;
        padding: 12px;
    }
    
    .inline-group input,
    .inline-group select {
        width: 100%;
        margin-bottom: 10px;
    }
    
    .add-more, 
    .remove-btn {
        width: 100%;
        justify-content: center;
    }
    
    .smaller-input {
        max-width: 100%;
    }
    
    .section h2 {
        font-size: 20px;
    }
    
    .container h1.title {
        font-size: 24px;
    }
}

/* Custom select styling */
select {
    appearance: none;
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23555' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 12px center;
    background-size: 16px;
    padding-right: 40px;
}

/* Date input styling */
input[type="date"] {
    appearance: none;
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23555' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3crect x='3' y='4' width='18' height='18' rx='2' ry='2'%3e%3c/rect%3e%3cline x1='16' y1='2' x2='16' y2='6'%3e%3c/line%3e%3cline x1='8' y1='2' x2='8' y2='6'%3e%3c/line%3e%3cline x1='3' y1='10' x2='21' y2='10'%3e%3c/line%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 12px center;
    background-size: 16px;
    padding-right: 40px;
}
</style>


<body>
    <%- include('../../partials/hr_partials') %>
    <div class="container">
        <h1 class="title">Add a Job Posting</h1>
        <form id="addJobForm" action="/hr/addjoboffer" method="POST">


            <div class="form-group">
                <label for="departmentId">Department</label>
                <select id="departmentId" name="departmentId" class="form-control" required>
                    <option value="">Select Department</option>
                </select>
            </div>
    
            <div class="form-group">
                <label for="jobTitle">Job Title:</label>
                <select id="jobTitle" name="jobTitle" class="selectpicker" data-live-search="true" required>
                    <option value="">Select Job Title</option>
                </select>
            </div>
          <!-- Job Type (renamed to Work Setup) -->
<!-- Work Setup (formerly Job Type) -->
<div class="form-group">
    <label for="jobType">Work Setup</label>
    <select id="jobType" name="jobType" required>
        <option value="">Select Work Setup</option>
        <option value="Onsite">Onsite</option>
        <option value="Online">Online</option>
        <option value="Hybrid">Hybrid</option>
    </select>
</div>

<!-- Availability Section -->
<div class="form-group">
    <label for="jobTimeCommitment">Availability</label>
    <select id="jobTimeCommitment" name="jobTimeCommitment" required>
        <option value="">Select Availability</option>
        <option value="Full-time">Full-time</option>
        <option value="Part-time">Part-time</option>
    </select>
</div>

<!-- Work Hours -->
<div class="form-group">
    <label for="jobTimeCommitment_startTime">Start Time</label>
    <input type="time" id="jobTimeCommitment_startTime" name="jobTimeCommitment_startTime" required>
    <p class="help-text">Enter the expected start time for this position</p>
</div>

<div class="form-group">
    <label for="jobTimeCommitment_endTime">End Time</label>
    <input type="time" id="jobTimeCommitment_endTime" name="jobTimeCommitment_endTime" required>
    <p class="help-text">Enter the expected end time for this position</p>
</div>
            <!-- Job Description -->
            <div class="form-group">
                <label for="jobDescrpt">Job Description</label>
                <textarea id="jobDescrpt" name="jobDescrpt" placeholder="Enter job description" required></textarea>
            </div>

            <!-- Hiring Start Date -->
            <div class="form-group">
                <label for="hiringStartDate">Hiring Start Date</label>
                <input type="date" id="hiringStartDate" name="hiringStartDate" required>
            </div>

            <!-- Hiring End Date -->
            <div class="form-group">
                <label for="hiringEndDate">Hiring End Date</label>
                <input type="date" id="hiringEndDate" name="hiringEndDate" required>
            </div>

            <!-- Remove Job Posting Status Toggle -->

            <!-- Job Requirements Section -->
            <div class="section">
                <h2>Job Requirements</h2>

               <!-- Certifications Section -->
<div id="certification-section">
    <label>Certifications</label>
    <div class="form-group inline-group">
        <input type="text" name="jobReqCertificateType[]" placeholder="Enter certification type (e.g., AWS)">
        <input type="text" name="jobReqCertificateDescrpt[]" placeholder="Enter certification description (e.g., Must be AWS certified)">
        <span class="add-more" onclick="addMoreInput('certification-section', 'jobReqCertificateDescrpt', 'Certification Description')">Add More</span>
    </div>
</div>


                <!-- Degrees Section -->
                <div id="degree-section">
                    <label>Degrees</label>
                    <div class="form-group inline-group">
                        <input type="text" class="smaller-input" name="jobReqDegreeType[]" placeholder="Enter degree type (e.g., Bachelor's Degree)">
                        <input type="text" class="smaller-input" name="jobReqDegreeDescrpt[]" placeholder="Enter degree description (e.g., Must be any graduate of Bachelor's degree in Finance)">
                        <span class="add-more" onclick="addMoreInput('degree-section', 'degree', 'Degree')">Add More</span>
                    </div>
                </div>

                <!-- Experiences Section -->
                <div id="experience-section">
                    <label>Experiences</label>
                    <div class="form-group inline-group">
                        <input type="text" class="smaller-input" name="jobReqExperienceType[]" placeholder="Enter experience type (e.g., Relevant Industry Experience)">
                        <input type="text" class="smaller-input" name="jobReqExperienceDescrpt[]" placeholder="Enter experience description (e.g., Must have experience in a relevant industry, such as oil and gas)">
                        <span class="add-more" onclick="addMoreInput('experience-section', 'experience', 'Experience')">Add More</span>
                    </div>
                </div>

                <!-- Skills Section -->
                <div id="skill-section">
                    <label>Skills</label>
                    <div class="form-group inline-group">
                        <select name="jobReqSkillType[]" class="smaller-input" placeholder="Add a Hard or Soft Skill">
                            <option value="Hard">Hard Skill</option>
                            <option value="Soft">Soft Skill</option>
                        </select>
                        <input type="text" class="smaller-input" name="jobReqSkillName[]" placeholder="Enter skill name (e.g., Building and Maintaining Financial Models for Hard Skills or Communication for Soft Skills)">
                        <span class="add-more" onclick="addMoreInput('skill-section', 'skill', 'Skill')">Add More</span>
                    </div>
                </div>
            </div>

            <button type="submit" class="submit-btn">Submit</button>
        </form>
    </div>

        <!-- jQuery and Bootstrap JS -->
        <!-- <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.1/js/bootstrap-select.min.js"></script> -->
<script>


// Populate departments dropdown
async function populateDepartments() {
        try {
            console.log('Fetching departments...');
            const response = await fetch('/hr/api/departments');
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const departments = await response.json();
            console.log('Departments fetched:', departments);

            const departmentSelect = document.getElementById('departmentId');
            departmentSelect.innerHTML = ''; // Clear existing options

            const defaultOption = document.createElement('option');
            defaultOption.value = '';
            defaultOption.text = 'Select Department';
            departmentSelect.appendChild(defaultOption);

            departments.forEach(dept => {
                const option = document.createElement('option');
                option.value = dept.departmentId;
                option.text = dept.deptName;
                departmentSelect.appendChild(option);
            });

            // Add "Add New" option
            const addNewOption = document.createElement('option');
            addNewOption.value = 'add-new';
            addNewOption.text = 'Add New Department';
            departmentSelect.appendChild(addNewOption);

            $('#departmentId').selectpicker('refresh');
        } catch (error) {
            console.error('Error fetching departments:', error);
        }
    }

    // Populate job titles dropdown based on selected department
    async function populateJobTitles(departmentId) {
        try {
            console.log('Fetching job titles for department ID:', departmentId);
            const response = await fetch(`/hr/api/job-titles?departmentId=${departmentId}`);
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const jobTitles = await response.json();
            console.log('Job titles fetched:', jobTitles);

            const jobTitleSelect = document.getElementById('jobTitle');
            jobTitleSelect.innerHTML = ''; // Clear existing options

            if (jobTitles.length === 0) {
                const noJobTitleOption = document.createElement('option');
                noJobTitleOption.value = '';
                noJobTitleOption.text = 'No Job Titles Available';
                jobTitleSelect.appendChild(noJobTitleOption);
            } else {
                jobTitles.forEach(job => {
                    const option = document.createElement('option');
                    option.value = job.jobId;
                    option.text = job.jobTitle;
                    jobTitleSelect.appendChild(option);
                });
            }

            // Add "Add New" option
            const addNewOption = document.createElement('option');
            addNewOption.value = 'add-new';
            addNewOption.text = 'Add New Job Title';
            jobTitleSelect.appendChild(addNewOption);

            $('#jobTitle').selectpicker('refresh');
        } catch (error) {
            console.error('Error fetching job titles:', error);
        }
    }

    // Dynamically fetch departments from the backend
    document.addEventListener('DOMContentLoaded', function() {
        populateDepartments(); // Fetch departments on page load

        document.getElementById('departmentId').addEventListener('change', async function() {
            const departmentId = this.value;
            await populateJobTitles(departmentId);
        });

        document.getElementById('jobTitle').addEventListener('change', async function() {
            const jobId = this.value;

            if (jobId === 'add-new') {
                const newJobTitle = prompt('Enter the new job title:');
                if (newJobTitle) {
                    const departmentId = document.getElementById('departmentId').value;
                    try {
                        const response = await fetch('/hr/api/job-titles', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ departmentId, jobTitle: newJobTitle })
                        });
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        const newJob = await response.json();
                        console.log('New job title added:', newJob);
                        await populateJobTitles(departmentId); // Refresh job titles dropdown after adding a new job title
                    } catch (error) {
                        console.error('Error adding new job title:', error);
                    }
                }
                return;
            }
        });
    });

        function addMoreInput(sectionId, inputName, placeholderText) {
            const section = document.getElementById(sectionId);
            const newDiv = document.createElement('div');
            newDiv.className = "form-group inline-group";

            if (inputName === 'jobReqCertificateDescrpt') {
                newDiv.innerHTML = `
                    <input type="text" name="jobReqCertificateType[]" placeholder="Enter certification type">
                    <input type="text" name="jobReqCertificateDescrpt[]" placeholder="Enter certification description">
                    <span class="remove-btn" onclick="this.parentElement.remove()">Remove</span>
                `;
            } else if (inputName === 'degree') {
                newDiv.innerHTML = `
                    <input type="text" class="smaller-input" name="jobReqDegreeType[]" placeholder="Enter degree type">
                    <input type="text" name="jobReqDegreeDescrpt[]" placeholder="Enter degree description">
                    <span class="remove-btn" onclick="this.parentElement.remove()">Remove</span>
                `;
            } else if (inputName === 'experience') {
                newDiv.innerHTML = `
                    <input type="text" class="smaller-input" name="jobReqExperienceType[]" placeholder="Enter experience type">
                    <input type="text" class="smaller-input" name="jobReqExperienceDescrpt[]" placeholder="Enter experience description">
                    <span class="remove-btn" onclick="this.parentElement.remove()">Remove</span>
                `;
            } else if (inputName === 'skill') {
                newDiv.innerHTML = `
                    <select name="jobReqSkillType[]" class="smaller-input">
                        <option value="Hard">Hard Skill</option>
                        <option value="Soft">Soft Skill</option>
                    </select>
                    <input type="text" class="smaller-input" name="jobReqSkillName[]" placeholder="Enter skill name">
                    <span class="remove-btn" onclick="this.parentElement.remove()">Remove</span>
                `;
            }

            section.appendChild(newDiv);
        }

         // Toggle active class for sidebar links
         document.querySelectorAll('.sidebar ul li a').forEach(link => {
            link.addEventListener('click', function() {
                document.querySelectorAll('.sidebar ul li a').forEach(link => link.classList.remove('active'));
                this.classList.add('active');
            });
        });
        
        // Toggle collapsible content in sidebar
        document.querySelectorAll('.collapsible-header').forEach(header => {
            header.addEventListener('click', function() {
                var content = this.nextElementSibling;
                if (content.style.display === 'block') {
                    content.style.display = 'none';
                } else {
                    // Hide all other collapsible contents
                    document.querySelectorAll('.collapsible-content').forEach(item => {
                        if (item !== content) {
                            item.style.display = 'none';
                        }
                    });
                    content.style.display = 'block';
                }
            });
        });
        
    </script>
</body>
</html>
