<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HR Manage Staff</title>
    <link rel="stylesheet" href="/css/sidebar.css">
    <link rel="stylesheet" href="/css/hr_pages.css">
    <style>
        /* Existing CSS */
        .staff-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        .staff-table th, .staff-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        .staff-table th {
            background-color: #f4f4f4;
            font-weight: bold;
        }
        .staff-table tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        .staff-table tr:hover {
            background-color: #f1f1f1;
        }
        .staff-table input[type="text"] {
            border: none;
            background: none;
            width: 100%;
        }
        .staff-table button {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 5px 10px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 14px;
            cursor: pointer;
        }
        .staff-table button:hover {
            background-color: #45a049;
        }
        .about-us {
            padding: 20px;
        }
        button.add-new-staff {
            margin-top: 10px;
            background-color: #007BFF;
            color: white;
            border: none;
            padding: 10px 20px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            cursor: pointer;
        }
        button.add-new-staff:hover {
            background-color: #0056b3;
        }

        /* Updated CSS for modal */
        .modal {
            display: none; 
            position: fixed; 
            z-index: 1; 
            left: 0; 
            top: 0; 
            width: 100%; 
            height: 100%; 
            overflow: auto; 
            background-color: rgba(0,0,0,0.4); 
            padding-top: 60px; 
        }
        .modal-content {
            background-color: #fefefe;
            margin: 5% auto; /* Center horizontally */
            padding: 20px;
            border: 1px solid #888;
            width: 50%; /* Adjust width as needed */
            max-width: 600px; /* Ensure it doesn't get too wide on large screens */
        }
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }
        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <%- include('../../partials/hr_partials') %>
    <div class="main-content">
        <section class="about-us">
            <div class="purpose-mission">
                <div class="purpose">
                    <h2>Manage Staff</h2>
                    <p>View staff details categorized by departments.</p>

                    <div id="staffTableContainer">
                        <% departments.forEach(function(department) { %>
                            <h3><%= department.deptName %></h3>
                            <table class="staff-table">
                                <thead>
                                    <tr>
                                        <th>Job Title</th>
                                        <th>Last Name</th>
                                        <th>First Name</th>
                                        <th>Email</th>
                                        <th>Role</th>
                                        <th>Original Default Password</th>
                                        <th>Active Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% department.staff.forEach(function(staff) { %>
                                        <tr>
                                            <td><%= staff.jobpositions ? staff.jobpositions.jobTitle : 'N/A' %></td>
                                            <td><%= staff.lastName %></td>
                                            <td><%= staff.firstName %></td>
                                            <td><%= staff.userEmail %></td>
                                            <td><%= staff.userRole %></td>
                                            <td>
                                                <input type="password" value="<%= staff.userStaffOgPass ? staff.userStaffOgPass : '' %>" readonly>
                                                <button onclick="copyPassword(this)" data-password="<%= staff.userStaffOgPass %>">Copy</button>
                                            </td>
                                            <td><%= staff.activeStatus %></td>
                                        </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                            <button class="add-new-staff" onclick="openModal()">Add New Staff</button>
                        <% }); %>
                    </div>
                </div>
            </div>
        </section>
    </div>

    <!-- Modal for adding new staff -->
    <div id="staffModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h2>Add New Staff</h2>
            <form id="newStaffForm">
                <label for="lastName">Last Name:</label>
                <input type="text" id="lastName" name="lastName" required><br>
                <label for="firstName">First Name:</label>
                <input type="text" id="firstName" name="firstName" required><br>
                <label for="email">Email:</label>
                <input type="email" id="email" name="email" required><br>
                <label for="department">Department:</label>
                <select id="department" name="department" required>
                    <!-- Options will be populated via JavaScript -->
                </select><br>
                <label for="jobTitle">Job Title:</label>
                <select id="jobTitle" name="jobTitle" required>
                    <!-- Options will be populated via JavaScript -->
                </select><br>
                <label for="role">Role:</label>
                <select id="role" name="role" required>
                    <option value="">Select Role</option>
                    <option value="HR">HR</option>
                    <option value="Employee">Employee</option>
                    <option value="Line Manager">Line Manager</option>
                </select><br>

                <label for="passwordOption">Set Password:</label>
                <select id="passwordOption" name="passwordOption" required onchange="togglePasswordFields()">
                    <option value="custom">Custom Password</option>
                    <option value="random">Randomly Generated Password</option>
                </select><br>
                <div id="passwordFields">
                    <label for="customPassword">Custom Password:</label>
                    <input type="password" id="customPassword" name="customPassword" style="display: block;"><br>
                    <label for="generatedPassword">Generated Password:</label>
                    <input type="text" id="generatedPassword" name="generatedPassword" readonly>
                    <button type="button" onclick="generateRandomPassword()">Generate</button>
                    <button type="button" onclick="copyGeneratedPassword()">Copy</button><br>
                </div>

                <button type="submit">Save</button>
            </form>
        </div>
    </div>

    <script>
        // Function to open modal
        function openModal() {
            console.log('Opening modal...');
            document.getElementById('staffModal').style.display = 'block';
            populateDepartments(); // Populate departments when modal opens
        }
    
        // Function to close modal
        function closeModal() {
            console.log('Closing modal...');
            document.getElementById('staffModal').style.display = 'none';
        }
    
        // Function to populate the departments dropdown
        function populateDepartments() {
            console.log('Fetching departments...');
            fetch('/hr/api/departments')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(departments => {
                    console.log('Departments fetched:', departments);
                    const departmentSelect = document.getElementById('department');
                    departmentSelect.innerHTML = ''; // Clear existing options
                    const defaultOption = document.createElement('option');
                    defaultOption.value = '';
                    defaultOption.text = 'Select Department';
                    departmentSelect.add(defaultOption);
                    departments.forEach(dept => {
                        const option = document.createElement('option');
                        option.value = dept.departmentId;
                        option.text = dept.deptName;
                        departmentSelect.add(option);
                    });
                })
                .catch(error => {
                    console.error('Error fetching departments:', error);
                });
        }
    
        // Function to populate job titles based on selected department
        document.getElementById('department').addEventListener('change', async function() {
            const departmentId = this.value;
            console.log('Selected department ID:', departmentId);
            const jobTitleSelect = document.getElementById('jobTitle');
            jobTitleSelect.innerHTML = ''; // Clear existing options
    
            if (!departmentId) {
                // Add a default option
                const defaultOption = document.createElement('option');
                defaultOption.value = '';
                defaultOption.text = 'Select Job Title';
                jobTitleSelect.add(defaultOption);
                return;
            }
    
            try {
                console.log('Fetching job titles for department ID:', departmentId);
                // Fetch job titles for the selected department
                const response = await fetch(`/hr/api/get-job-titles?departmentId=${departmentId}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const jobTitles = await response.json();
                console.log('Job titles fetched:', jobTitles);
    
                // Add job titles to the dropdown
                if (jobTitles.length === 0) {
                    const noJobTitleOption = document.createElement('option');
                    noJobTitleOption.value = '';
                    noJobTitleOption.text = 'No Job Titles Available';
                    jobTitleSelect.add(noJobTitleOption);
                } else {
                    jobTitles.forEach(job => {
                        const option = document.createElement('option');
                        option.value = job.jobTitleId;
                        option.text = job.jobTitle;
                        jobTitleSelect.add(option);
                    });
                }
            } catch (error) {
                console.error('Error fetching job titles:', error);
            }
        });
    
        // Function to generate random password
        function generateRandomPassword() {
            const password = Math.random().toString(36).slice(-8); // Simple random password generation
            console.log('Generated random password:', password);
            document.getElementById('generatedPassword').value = password;
        }
    
        // Function to copy generated password to clipboard
        function copyGeneratedPassword() {
            const generatedPasswordField = document.getElementById('generatedPassword');
            generatedPasswordField.select();
            document.execCommand('copy');
            console.log('Copied generated password to clipboard.');
        }
    
        // Function to copy password to clipboard
        function copyPassword(button) {
            const password = button.getAttribute('data-password');
            console.log('Copying password:', password);
            navigator.clipboard.writeText(password).then(() => {
                alert('Password copied to clipboard!');
            });
        }
    
        // Function to toggle password fields based on selected option
        function togglePasswordFields() {
            const passwordOption = document.getElementById('passwordOption').value;
            const customPasswordField = document.getElementById('customPassword');
            const generatedPasswordField = document.getElementById('generatedPassword');
            const passwordFields = document.getElementById('passwordFields');
    
            console.log('Selected password option:', passwordOption);
    
            if (passwordOption === 'custom') {
                customPasswordField.style.display = 'block';
                generatedPasswordField.style.display = 'none';
            } else {
                customPasswordField.style.display = 'none';
                generatedPasswordField.style.display = 'block';
                generateRandomPassword(); // Generate a password if option is random
            }
        }
    
        // Form submission handler
        document.getElementById('newStaffForm').addEventListener('submit', function(event) {
            event.preventDefault(); // Prevent default form submission
    
            console.log('Form submitted. Collecting data...');
            const formData = new FormData(this);
            const data = Object.fromEntries(formData.entries());
            console.log('Form data:', data);
    
            fetch('/hr/api/add-staff', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(result => {
                console.log('Staff added successfully:', result);
                closeModal();
                location.reload(); // Reload page to update staff list
            })
            .catch(error => {
                console.error('Error adding staff:', error);
            });
        });
    </script>
    
</body>
</html>


