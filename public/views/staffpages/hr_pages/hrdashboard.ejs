<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HR Home</title>
    <link rel="stylesheet" href="/css/sidebar.css"> <!-- Linking Sidebar CSS -->
    <link rel="stylesheet" href="/css/hr_pages.css"> <!-- Linking Main Content CSS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>

    <style>
        /* Adding styles for the dashboard */
        h2 {
            color: #2385B0; /* Color for the dashboard title */
            margin-left: 40px; /* Increased space from the left */
        }
        h3 {
            margin-left: 40px; /* Increased space from the left for the sub-header */
        }
        .content {
            margin-left: 220px; /* Adjust based on your sidebar width to prevent overlap */
            padding: 20px; /* Adding some padding for better spacing */
            background-color: white; /* Set background color to white for the entire content area */
        }
        table {
            width: 80%; /* Full width for the table */
            border-collapse: collapse; /* Collapse borders */
            margin: 10px auto 30px; /* Center table and add space above and below */
        }
        th, td {
            border: 1px solid #ddd; /* Border for table cells */
            padding: 10px; /* Padding for table cells */
            text-align: left; /* Left-align text */
        }
        th {
            background-color: #f2f2f2; /* Light gray background for headers */
        }
        tr:hover {
            background-color: #f1f1f1; /* Hover effect for table rows */
        }
        .manage-leaves-button {
            padding: 10px 15px;
            background-color: #2385B0; /* Your preferred color */
            color: white;
            text-decoration: none;
            border-radius: 5px;
            transition: background-color 0.3s;
        }
        .manage-leaves-button:hover {
            background-color: #1a5f78; /* Darker shade for hover effect */
        }
        .action-required-btn {
            background-color: #2385B0;
            color: white;
            border-radius: 5px;
            text-decoration: none;
            transition: background-color 0.3s;
            padding: 5px 10px;
            cursor: pointer;
            border: none;
        }
        .action-required-btn:hover {
            background-color: #1a5f78;
        }
        
        /* Enhanced Dashboard Styles */
        .kpi-cards {
            display: grid;
            grid-template-columns: repeat(1, 1fr);
            gap: 20px;
            margin: 20px auto;
            width: 90%;
            max-width: 1400px;
        }
        
        @media (min-width: 768px) {
            .kpi-cards {
                grid-template-columns: repeat(2, 1fr);
            }
        }
        
        @media (min-width: 1024px) {
            .kpi-cards {
                grid-template-columns: repeat(4, 1fr);
            }
        }
        
        .kpi-card {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            padding: 15px;
            position: relative;
            overflow: hidden;
        }
        
        .kpi-card-icon {
            position: absolute;
            top: 12px;
            right: 12px;
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .kpi-card-title {
            font-size: 14px;
            color: #666;
            margin-bottom: 8px;
        }
        
        .kpi-card-value {
            font-size: 24px;
            font-weight: bold;
            color: #333;
        }
        
        .chart-container {
            display: flex;
            flex-direction: column;
            gap: 20px;
            margin: 20px auto;
            padding: 15px;
            background-color: #f9f9f9; 
            border: 1px solid #ddd; 
            border-radius: 8px;
            width: 90%;
            max-width: 1400px; 
            box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1); 
        }
        
        @media (min-width: 1024px) {
            .chart-container {
                flex-direction: row;
            }
        }
        
        .chart-box {
            flex: 1; 
            margin: 8px;
            text-align: center; 
            background-color: #fff; 
            padding: 12px;
            border-radius: 8px;
            border: 1px solid #ddd;
            box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.1); 
        }
        
        .chart-box canvas {
            max-width: 100%;
            height: 200px; /* Reduced chart height */
        }

        .chart-box canvas, .chart-card canvas {
            max-height: 180px !important; /* Make charts even smaller */
        }
        
        .chart-header {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }
        
        .chart-icon {
            width: 18px;
            height: 18px;
            margin-right: 8px;
            background-color: #2385B0;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 10px;
        }
        
        .tab-navigation {
            display: flex;
            border-bottom: 1px solid #ddd;
            margin: 0 auto 15px;
            width: 90%;
            max-width: 1400px;
            background-color: #fff;
            border-radius: 8px 8px 0 0;
            overflow: hidden;
            position: sticky;
            top: 0;
            z-index: 100;
        }
        
        .tab-button {
            padding: 10px 15px;
            border: none;
            background: none;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            color: #666;
            position: relative;
        }
        
        .tab-button.active {
            color: #2385B0;
        }
        
        .tab-button.active:after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 2px;
            background-color: #2385B0;
        }
        
        .tab-button:hover {
            background-color: #f9f9f9;
        }
        
        .tab-content {
            display: none;
            width: 90%;
            max-width: 1400px;
            margin: 0 auto;
            margin-bottom: 20px;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .dual-chart-container {
            display: grid;
            grid-template-columns: 1fr;
            gap: 15px;
            margin-bottom: 10px;
        }
        
        @media (min-width: 1024px) {
            .dual-chart-container {
                grid-template-columns: 1fr 1fr;
            }
        }
        
        .chart-card {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            padding: 15px;
        }

        .chart-card h3 {
            margin-left: 0;
            margin-bottom: 10px;
            font-size: 16px;
            color: #333;
        }

        /* Attendance Reports Integration Styling */
        .attendance-reports-section {
            margin: 30px 0;
            padding: 20px;
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .reports-section-header {
            display: flex;
            align-items: center;
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 2px solid #2385B0;
        }

        .reports-section-header h3 {
            margin: 0;
            color: #2385B0;
            font-size: 20px;
            font-weight: 600;
            margin-left: 0;
        }

        .reports-section-header i {
            margin-right: 10px;
            font-size: 20px;
            color: #2385B0;
        }

        .reports-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 20px;
        }

        @media (min-width: 768px) {
            .reports-grid {
                grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            }
        }

        .report-item {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .report-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
        }

        .report-header {
            display: flex;
            align-items: center;
            padding: 15px 20px;
            background: linear-gradient(135deg, #2385B0 0%, #1a5f78 100%);
            color: white;
        }

        .report-icon {
            width: 40px;
            height: 40px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
            background: rgba(255, 255, 255, 0.2);
            font-size: 18px;
        }

        .report-info h4 {
            margin: 0 0 5px 0;
            font-size: 16px;
            font-weight: 600;
        }

        .report-info p {
            margin: 0;
            font-size: 13px;
            opacity: 0.9;
            line-height: 1.4;
        }

        .report-form {
            padding: 20px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
            color: #495057;
            font-size: 13px;
        }

        .form-group input,
        .form-group select {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #ced4da;
            border-radius: 6px;
            font-size: 13px;
            transition: border-color 0.2s ease;
        }

        .form-group input:focus,
        .form-group select:focus {
            outline: none;
            border-color: #2385B0;
            box-shadow: 0 0 0 0.2rem rgba(35, 133, 176, 0.25);
        }

        .form-actions {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        .btn-report {
            flex: 1;
            padding: 10px 15px;
            border: none;
            border-radius: 6px;
            font-size: 13px;
            font-weight: 500;
            cursor: pointer;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 6px;
            transition: all 0.2s ease;
        }

        .btn-report:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .btn-report.loading {
            position: relative;
            color: transparent;
        }

        .btn-report.loading::after {
            content: '';
            position: absolute;
            width: 14px;
            height: 14px;
            top: 50%;
            left: 50%;
            margin-left: -7px;
            margin-top: -7px;
            border: 2px solid transparent;
            border-top: 2px solid currentColor;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .btn-primary {
            background: linear-gradient(135deg, #2385B0 0%, #1a5f78 100%);
            color: white;
        }

        .btn-primary:hover:not(:disabled) {
            background: linear-gradient(135deg, #1a5f78 0%, #144a5e 100%);
            transform: translateY(-1px);
        }

        .btn-secondary {
            background: white;
            color: #2385B0;
            border: 1px solid #2385B0;
        }

        .btn-secondary:hover:not(:disabled) {
            background: #2385B0;
            color: white;
            transform: translateY(-1px);
        }

        .report-results {
            display: none;
            margin-top: 20px;
            padding: 20px;
            background: #f8f9fa;
            border-top: 1px solid #dee2e6;
            border-radius: 0 0 8px 8px;
        }

        .results-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #2385B0;
        }

        .results-header h5 {
            color: #2385B0;
            margin: 0;
            font-size: 16px;
            font-weight: 600;
        }

        .results-summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 12px;
            margin-bottom: 20px;
            padding: 15px;
            background: white;
            border-radius: 6px;
            border: 1px solid #dee2e6;
        }

        .summary-stat {
            text-align: center;
            padding: 12px;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 6px;
            border: 1px solid #dee2e6;
        }

        .summary-stat-value {
            font-size: 20px;
            font-weight: 700;
            color: #2385B0;
            margin-bottom: 4px;
        }

        .summary-stat-label {
            font-size: 11px;
            color: #6c757d;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .data-table-container {
            background: white;
            border-radius: 6px;
            overflow: hidden;
            border: 1px solid #dee2e6;
            margin-bottom: 15px;
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 12px;
        }

        .data-table th {
            background: linear-gradient(135deg, #2385B0 0%, #1a5f78 100%);
            color: white;
            padding: 10px 8px;
            text-align: left;
            font-weight: 600;
            font-size: 11px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .data-table td {
            padding: 8px;
            border-bottom: 1px solid #e9ecef;
            vertical-align: middle;
        }

        .data-table tr:nth-child(even) {
            background-color: #f8f9fa;
        }

        .data-table tr:hover {
            background-color: #e3f2fd;
        }

        .department-section {
            margin: 20px 0;
        }

        .department-title {
            background: linear-gradient(135deg, #495057 0%, #343a40 100%);
            color: white;
            padding: 10px 15px;
            font-weight: 600;
            font-size: 13px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            border-radius: 6px 6px 0 0;
            margin: 0;
        }

        .status-badge {
            padding: 3px 6px;
            border-radius: 10px;
            font-size: 10px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-present {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .status-late {
            background-color: #fff3cd;
            color: #856404;
            border: 1px solid #ffeaa7;
        }

        .status-early-out {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .status-on-leave {
            background-color: #cce5ff;
            color: #004085;
            border: 1px solid #b8daff;
        }

        .status-absent {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .leave-badge {
            background-color: #e7f3ff;
            color: #0066cc;
            padding: 2px 5px;
            border-radius: 6px;
            font-size: 9px;
            font-weight: 500;
        }

        .hours-display {
            font-weight: 600;
            color: #495057;
        }

        .late-time {
            color: #856404;
            font-weight: 600;
        }

        .early-out-time {
            color: #721c24;
            font-weight: 600;
        }

        .no-data {
            text-align: center;
            padding: 30px 20px;
            color: #6c757d;
            font-style: italic;
            background: white;
            border-radius: 6px;
            border: 1px solid #dee2e6;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .reports-grid {
                grid-template-columns: 1fr;
            }
            
            .form-actions {
                flex-direction: column;
            }
            
            .results-summary {
                grid-template-columns: repeat(2, 1fr);
                gap: 8px;
                padding: 12px;
            }
            
            .data-table {
                font-size: 10px;
            }
            
            .data-table th,
            .data-table td {
                padding: 6px 4px;
            }
        }

        .employee-report-enhanced {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .employee-report-enhanced .report-icon {
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(10px);
        }

        .period-selection-info {
            background: #e3f2fd;
            border: 1px solid #2196f3;
            border-radius: 4px;
            padding: 8px 12px;
            margin-top: 8px;
            font-size: 12px;
            color: #1976d2;
        }

        .period-selection-info i {
            margin-right: 6px;
            color: #2196f3;
        }

        .form-group.enhanced-select {
            position: relative;
        }

        .form-group.enhanced-select::after {
            content: '\f107';
            font-family: 'Font Awesome 5 Free';
            font-weight: 900;
            position: absolute;
            right: 12px;
            top: 32px;
            pointer-events: none;
            color: #2385B0;
        }

        .form-group select {
            appearance: none;
            background: white;
            cursor: pointer;
        }

        .employee-info-preview {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 6px;
            padding: 12px;
            margin-top: 10px;
            display: none;
        }

        .employee-info-preview.show {
            display: block;
        }

        .employee-info-preview h6 {
            margin: 0 0 8px 0;
            color: #2385B0;
            font-size: 14px;
            font-weight: 600;
        }

        .employee-info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 8px;
        }

        .employee-info-item {
            font-size: 12px;
        }

        .employee-info-item strong {
            color: #495057;
        }

        .leave-requests-report-container {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        margin-bottom: 20px;
    }

    /* Report header */
    .leave-report-header {
        background: linear-gradient(135deg, #2385B0 0%, #1a5f78 100%);
        color: white;
        padding: 20px;
        text-align: center;
    }

    .leave-report-title {
        font-size: 20px;
        font-weight: 700;
        margin: 0 0 8px 0;
        letter-spacing: 0.5px;
    }

    .leave-report-subtitle {
        font-size: 14px;
        opacity: 0.9;
        margin: 0;
    }

    .leave-report-date {
        font-size: 12px;
        opacity: 0.8;
        margin: 8px 0 0 0;
        font-style: italic;
    }

    /* Summary statistics section */
    .leave-summary-section {
        padding: 25px;
        background: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }

    .leave-summary-title {
        color: #2385B0;
        font-size: 18px;
        font-weight: 600;
        margin: 0 0 20px 0;
        display: flex;
        align-items: center;
        border-bottom: 2px solid #2385B0;
        padding-bottom: 10px;
    }

    .leave-summary-title i {
        margin-right: 10px;
        font-size: 20px;
    }

    .leave-summary-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
        margin-bottom: 20px;
    }

    .leave-summary-stat {
        background: white;
        border-radius: 8px;
        padding: 20px;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        border: 1px solid #e9ecef;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .leave-summary-stat:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .leave-summary-stat-value {
        font-size: 28px;
        font-weight: 700;
        color: #2385B0;
        margin-bottom: 8px;
        display: block;
    }

    .leave-summary-stat-label {
        font-size: 13px;
        color: #6c757d;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        line-height: 1.3;
    }

    /* Detailed requests section */
    .leave-detailed-section {
        padding: 25px;
    }

    .leave-detailed-title {
        color: #2385B0;
        font-size: 18px;
        font-weight: 600;
        margin: 0 0 25px 0;
        display: flex;
        align-items: center;
        border-bottom: 2px solid #2385B0;
        padding-bottom: 10px;
    }

    .leave-detailed-title i {
        margin-right: 10px;
        font-size: 20px;
    }

    /* Department sections */
    .leave-department-section {
        margin-bottom: 30px;
        background: #f8f9fa;
        border-radius: 8px;
        overflow: hidden;
        border: 1px solid #dee2e6;
    }

    .leave-department-header {
        background: linear-gradient(135deg, #495057 0%, #343a40 100%);
        color: white;
        padding: 15px 20px;
        font-weight: 600;
        font-size: 16px;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .leave-department-header i {
        margin-right: 10px;
        font-size: 18px;
    }

    .leave-department-count {
        background: rgba(255, 255, 255, 0.2);
        padding: 4px 12px;
        border-radius: 15px;
        font-size: 12px;
        font-weight: 500;
    }

    /* Department table */
    .leave-department-table-container {
        background: white;
        overflow-x: auto;
    }

    .leave-department-table {
        width: 100%;
        border-collapse: collapse;
        font-size: 12px;
        min-width: 900px;
    }

    .leave-department-table th {
        background: linear-gradient(135deg, #2385B0 0%, #1a5f78 100%);
        color: white;
        padding: 12px 8px;
        text-align: left;
        font-weight: 600;
        font-size: 11px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        white-space: nowrap;
    }

    .leave-department-table td {
        padding: 10px 8px;
        border-bottom: 1px solid #e9ecef;
        vertical-align: middle;
        white-space: nowrap;
    }

    .leave-department-table tr:nth-child(even) {
        background-color: #f8f9fa;
    }

    .leave-department-table tr:hover {
        background-color: #e3f2fd;
    }

    /* Department summary row */
    .leave-department-summary {
        background: linear-gradient(135deg, #e9ecef 0%, #dee2e6 100%) !important;
        font-weight: 600;
        color: #495057;
    }

    .leave-department-summary td {
        padding: 15px 8px;
        border-top: 2px solid #adb5bd;
        font-size: 13px;
    }

    /* Status badges */
    .leave-status-badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 10px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        display: inline-block;
        min-width: 60px;
        text-align: center;
    }

    .leave-status-approved {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .leave-status-pending {
        background-color: #fff3cd;
        color: #856404;
        border: 1px solid #ffeaa7;
    }

    .leave-status-rejected {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    /* Leave type badges */
    .leave-type-badge {
        background: linear-gradient(135deg, #e7f3ff 0%, #cce5ff 100%);
        color: #0066cc;
        padding: 4px 8px;
        border-radius: 8px;
        font-size: 10px;
        font-weight: 600;
        border: 1px solid #b8daff;
        display: inline-block;
    }

    /* Balance display */
    .leave-balance-display {
        font-weight: 600;
        color: #495057;
        font-size: 11px;
    }

    .leave-balance-positive {
        color: #28a745;
    }

    .leave-balance-warning {
        color: #ffc107;
    }

    .leave-balance-negative {
        color: #dc3545;
    }

    /* Timestamp formatting */
    .leave-timestamp {
        color: #6c757d;
        font-size: 11px;
        font-family: 'Courier New', monospace;
    }

    /* Duration display */
    .leave-duration {
        font-weight: 600;
        color: #495057;
        text-align: center;
    }

    /* Date range display */
    .leave-date-range {
        font-size: 11px;
        color: #495057;
        white-space: nowrap;
    }

    /* Remarks display */
    .leave-remarks {
        max-width: 150px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        color: #6c757d;
        font-style: italic;
        font-size: 11px;
    }

    .leave-remarks:hover {
        overflow: visible;
        white-space: normal;
        background: #f8f9fa;
        padding: 4px;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        position: relative;
        z-index: 10;
    }

    /* Total summary */
    .leave-total-summary {
        margin-top: 25px;
        padding: 20px;
        background: linear-gradient(135deg, #2385B0 0%, #1a5f78 100%);
        color: white;
        border-radius: 8px;
        text-align: center;
    }

    .leave-total-summary-title {
        font-size: 16px;
        font-weight: 600;
        margin: 0 0 10px 0;
    }

    .leave-total-summary-value {
        font-size: 24px;
        font-weight: 700;
        margin: 0;
    }

    /* No data state */
    .leave-no-data {
        text-align: center;
        padding: 40px 20px;
        color: #6c757d;
        font-style: italic;
        background: white;
        border-radius: 8px;
        border: 2px dashed #dee2e6;
        margin: 20px 0;
    }

    .leave-no-data i {
        font-size: 48px;
        color: #dee2e6;
        margin-bottom: 15px;
        display: block;
    }

    /* Responsive design */
    @media (max-width: 768px) {
        .leave-summary-stats {
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
        }
    }
    </style>
</head>
<body>
    <%- include('../../partials/hr_partials') %>
    <!-- Main content -->
    <div class="main-content">
        <h2>HR Dashboard</h2>
        
        <!-- KPI Summary Cards -->
        <div class="kpi-cards">
            <div class="kpi-card">
                <div class="kpi-card-icon" style="background-color: rgba(35, 133, 176, 0.1); color: #2385B0;">
                    <i class="fas fa-users"></i>
                </div>
                <div class="kpi-card-title">Attendance Rate</div>
                <div class="kpi-card-value" id="attendance-rate">--</div>
            </div>
            
            <div class="kpi-card">
                <div class="kpi-card-icon" style="background-color: rgba(40, 167, 69, 0.1); color: #28a745;">
                    <i class="fas fa-clock"></i>
                </div>
                <div class="kpi-card-title">Avg Working Hours</div>
                <div class="kpi-card-value" id="avg-working-hours">--</div>
            </div>
            
            <div class="kpi-card">
                <div class="kpi-card-icon" style="background-color: rgba(255, 193, 7, 0.1); color: #ffc107;">
                    <i class="fas fa-calendar"></i>
                </div>
                <div class="kpi-card-title">Pending Leave Requests</div>
                <div class="kpi-card-value" id="pending-leaves">--</div>
            </div>
            
            <div class="kpi-card">
                <div class="kpi-card-icon" style="background-color: rgba(111, 66, 193, 0.1); color: #6f42c1;">
                    <i class="fas fa-file-alt"></i>
                </div>
                <div class="kpi-card-title">Pending Requisitions</div>
                <div class="kpi-card-value" id="pending-requisitions">--</div>
            </div>
        </div>
        
        <!-- Tab Navigation -->
        <div class="tab-navigation">
            <button class="tab-button active" data-tab="attendance">Attendance Analytics</button>
            <button class="tab-button" data-tab="leaves">Leave Management</button>
            <button class="tab-button" data-tab="requisitions">Requisitions</button>
            <button class="tab-button" data-tab="departments">Department Analytics</button>
        </div>
        
        <!-- Attendance Tab Content -->
        <div class="tab-content active" id="attendance-tab">
            <div class="dual-chart-container">
                <div class="chart-card">
                    <div class="chart-header">
                        <div class="chart-icon">
                            <i class="fas fa-chart-line"></i>
                        </div>
                        <h3>Daily Attendance Trend</h3>
                    </div>
                    <canvas id="attendanceTrendChart"></canvas>
                </div>
                
                <div class="chart-card">
                    <div class="chart-header">
                        <div class="chart-icon">
                            <i class="fas fa-user-clock"></i>
                        </div>
                        <h3>Department Attendance Breakdown</h3>
                    </div>
                    <canvas id="deptAttendanceBreakdownChart"></canvas>
                </div>
            </div>

            <!-- Attendance Reports Section -->
            <div class="attendance-reports-section">
                <div class="reports-section-header">
                    <i class="fas fa-file-chart-line"></i>
                    <h3>Attendance & Leave Reports</h3>
                </div>
                
                <div class="reports-grid">
                    <!-- Daily Attendance Report -->
                    <div class="report-item">
                        <div class="report-header">
                            <div class="report-icon">
                                <i class="fas fa-calendar-day"></i>
                            </div>
                            <div class="report-info">
                                <h4>Daily Attendance Report</h4>
                                <p>Complete daily attendance overview with department breakdowns and detailed employee lists</p>
                            </div>
                        </div>
                        
                        <form class="report-form" id="daily-attendance-form">
                            <div class="form-group">
                                <label for="daily-attendance-date">Select Date</label>
                                <input type="date" id="daily-attendance-date" name="attendanceDate" required>
                            </div>
                            
                            <div class="form-actions">
                                <button type="button" class="btn-report btn-primary" onclick="generateAttendanceReport('daily-attendance', 'view')">
                                    <i class="fas fa-eye"></i> View Report
                                </button>
                                <button type="button" class="btn-report btn-secondary" onclick="generateAttendanceReport('daily-attendance', 'pdf')">
                                    <i class="fas fa-file-pdf"></i> PDF
                                </button>
                            </div>
                        </form>
                        
                        <div class="report-results" id="daily-attendance-results"></div>
                    </div>
                    
                    <!-- Individual Employee Report -->
                    <div class="report-item">
                        <div class="report-header">
                            <div class="report-icon">
                                <i class="fas fa-user-clock"></i>
                            </div>
                            <div class="report-info">
                                <h4>Individual Employee Attendance & Leave</h4>
                                <p>Comprehensive weekly or monthly report for individual employees with detailed attendance patterns, leave usage, and performance metrics</p>
                            </div>
                        </div>
                        
                        <form class="report-form" id="employee-report-form">
                            <div class="form-group">
                                <label for="employee-select">Select Employee</label>
                                <select id="employee-select" name="employeeId" required>
                                    <option value="">Choose an employee...</option>
                                    <!-- Options will be populated dynamically -->
                                </select>
                            </div>
                            
                            <div class="form-group">
                                <label for="employee-report-type">Report Period</label>
                                <select id="employee-report-type" name="reportType" required>
                                    <option value="weekly">Weekly Report</option>
                                    <option value="monthly">Monthly Report</option>
                                </select>
                            </div>
                            
                            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                                <div class="form-group">
                                    <label for="employee-start-date">Start Date</label>
                                    <input type="date" id="employee-start-date" name="startDate" required>
                                </div>
                                <div class="form-group">
                                    <label for="employee-end-date">End Date</label>
                                    <input type="date" id="employee-end-date" name="endDate" required>
                                </div>
                            </div>
                            
                            <div class="form-actions">
                                <button type="button" class="btn-report btn-primary" onclick="generateAttendanceReport('employee-report', 'view')">
                                    <i class="fas fa-eye"></i> View Report
                                </button>
                                <button type="button" class="btn-report btn-secondary" onclick="generateAttendanceReport('employee-report', 'pdf')">
                                    <i class="fas fa-file-pdf"></i> Download PDF
                                </button>
                            </div>
                        </form>
                        
                        <div class="report-results" id="employee-report-results"></div>
                    </div>
                    
                    <!-- Leave Requests & Balances Report -->
                    <div class="report-item">
                        <div class="report-header">
                            <div class="report-icon">
                                <i class="fas fa-calendar-times"></i>
                            </div>
                            <div class="report-info">
                                <h4>Weekly/Monthly Leave Requests & Balances</h4>
                                <p>Comprehensive HR report with leave statistics, department breakdowns, and detailed request tracking</p>
                            </div>
                        </div>
                        
                        <form class="report-form" id="leave-requests-report-form">
                            <div class="form-group">
                                <label for="leave-requests-report-type">Report Period</label>
                                <select id="leave-requests-report-type" name="reportType" required>
                                    <option value="weekly">Weekly Report</option>
                                    <option value="monthly">Monthly Report</option>
                                </select>
                            </div>
                            
                            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                                <div class="form-group">
                                    <label for="leave-requests-start-date">Start Date</label>
                                    <input type="date" id="leave-requests-start-date" name="startDate" required>
                                </div>
                                <div class="form-group">
                                    <label for="leave-requests-end-date">End Date</label>
                                    <input type="date" id="leave-requests-end-date" name="endDate" required>
                                </div>
                            </div>
                            
                            <div class="form-actions">
                                <button type="button" class="btn-report btn-primary" onclick="generateLeaveRequestsReport('view')">
                                    <i class="fas fa-eye"></i> View Report
                                </button>
                                <button type="button" class="btn-report btn-secondary" onclick="generateLeaveRequestsReport('pdf')">
                                    <i class="fas fa-file-pdf"></i> Download PDF
                                </button>
                            </div>
                        </form>
                        
                        <div class="report-results" id="leave-requests-report-results"></div>
                    </div>

                    <!-- Report Results Display Template (hidden by default) -->
                    <template id="leave-requests-report-template">
                        <div class="leave-requests-report-container">
                            <!-- Report Header -->
                            <div class="leave-report-header">
                                <h2 class="leave-report-title">Weekly/Monthly Leave Requests & Balances Report (HR)</h2>
                                <p class="leave-report-subtitle">Comprehensive Leave Management Overview</p>
                                <p class="leave-report-date">Generated on <span id="report-generation-date"></span></p>
                            </div>
                            
                            <!-- Summary Statistics Section -->
                            <div class="leave-summary-section">
                                <h3 class="leave-summary-title">
                                    <i class="fas fa-chart-bar"></i>
                                    Leave Summary Statistics
                                </h3>
                                
                                <div class="leave-summary-stats">
                                    <div class="leave-summary-stat">
                                        <span class="leave-summary-stat-value" id="total-requests">0</span>
                                        <div class="leave-summary-stat-label">Total Leave Requests</div>
                                    </div>
                                    <div class="leave-summary-stat">
                                        <span class="leave-summary-stat-value" id="approved-requests">0</span>
                                        <div class="leave-summary-stat-label">Approved Requests</div>
                                    </div>
                                    <div class="leave-summary-stat">
                                        <span class="leave-summary-stat-value" id="pending-requests">0</span>
                                        <div class="leave-summary-stat-label">Pending Requests</div>
                                    </div>
                                    <div class="leave-summary-stat">
                                        <span class="leave-summary-stat-value" id="total-days-requested">0</span>
                                        <div class="leave-summary-stat-label">Total Leave Days Requested</div>
                                    </div>
                                    <div class="leave-summary-stat">
                                        <span class="leave-summary-stat-value" id="total-days-approved">0</span>
                                        <div class="leave-summary-stat-label">Total Leave Days Approved</div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Detailed Requests Section -->
                            <div class="leave-detailed-section">
                                <h3 class="leave-detailed-title">
                                    <i class="fas fa-list-alt"></i>
                                    Detailed Leave Requests List
                                </h3>
                                
                                <!-- Department sections will be populated here -->
                                <div id="department-sections-container">
                                    <!-- Dynamic department sections -->
                                </div>
                                
                                <!-- Total Summary -->
                                <div class="leave-total-summary">
                                    <h4 class="leave-total-summary-title">Total Leave Requests</h4>
                                    <p class="leave-total-summary-value" id="final-total-requests">0</p>
                                </div>
                            </div>
                        </div>
                    </template>

                    <!-- Department Section Template -->
                    <template id="department-section-template">
                        <div class="leave-department-section">
                            <div class="leave-department-header">
                                <span>
                                    <i class="fas fa-building"></i>
                                    <span class="department-name"></span>
                                </span>
                                <span class="leave-department-count">
                                    <span class="department-request-count">0</span> requests
                                </span>
                            </div>
                            
                            <div class="leave-department-table-container">
                                <table class="leave-department-table">
                                    <thead>
                                        <tr>
                                            <th>Timestamp</th>
                                            <th>Last Name</th>
                                            <th>First Name</th>
                                            <th>Leave Type</th>
                                            <th>Requested Dates</th>
                                            <th>Duration</th>
                                            <th>Approved (Y/N)</th>
                                            <th>Total Balance after Approval</th>
                                            <th>Leave Remarks</th>
                                        </tr>
                                    </thead>
                                    <tbody class="department-table-body">
                                        <!-- Dynamic rows -->
                                    </tbody>
                                    <tfoot>
                                        <tr class="leave-department-summary">
                                            <td colspan="8" style="text-align: right; font-weight: bold;">
                                                Total Department Requested Leaves:
                                            </td>
                                            <td style="font-weight: bold;" class="department-total-days">0</td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        </div>
                    </template>

                    <!-- Leave Request Row Template -->
                    <template id="leave-request-row-template">
                        <tr>
                            <td class="leave-timestamp"></td>
                            <td class="employee-last-name"></td>
                            <td class="employee-first-name"></td>
                            <td>
                                <span class="leave-type-badge leave-type-name"></span>
                            </td>
                            <td class="leave-date-range"></td>
                            <td class="leave-duration"></td>
                            <td>
                                <span class="leave-status-badge leave-approval-status"></span>
                            </td>
                            <td class="leave-balance-display leave-remaining-balance"></td>
                            <td class="leave-remarks leave-request-remarks"></td>
                        </tr>
                    </template>
                </div>
            </div>
            
            <!-- Attendance Logs Section -->
            <section class="attendance-logs">
                <h2>Attendance Logs</h2>
                <table>
                    <thead>
                        <tr>
                            <th>Last Name</th>
                            <th>First Name</th>
                            <th>Date</th>
                            <th>Department</th>
                            <th>Job Position</th>
                            <th>Time In</th>
                            <th>Time Out</th>
                            <th>Location</th>
                            <th>Active Working Hours</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (attendanceLogs && attendanceLogs.length) { %>
                            <% attendanceLogs.forEach(log => { %>
                                <tr>
                                    <td><%= log.lastName %></td>
                                    <td><%= log.firstName %></td>
                                    <td><%= log.date %></td>
                                    <td><%= log.department %></td>
                                    <td><%= log.jobTitle %></td>
                                    <td><%= log.timeIn %></td>
                                    <td><%= log.timeOut %></td>
                                    <td><%= log.city || 'Unknown' %></td>
                                    <td><%= log.activeWorkingHours %></td>
                                </tr>
                            <% }); %>
                        <% } else { %>
                            <tr>
                                <td colspan="9">No attendance logs available.</td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </section>
        </div>
        
        <!-- Leaves Tab Content -->
        <div class="tab-content" id="leaves-tab">
            <div class="dual-chart-container">
                <div class="chart-card">
                    <div class="chart-header">
                        <div class="chart-icon">
                            <i class="fas fa-chart-pie"></i>
                        </div>
                        <h3>Leave Types Distribution</h3>
                    </div>
                    <canvas id="leaveTypesChart"></canvas>
                </div>
                
                <div class="chart-card">
                    <div class="chart-header">
                        <div class="chart-icon">
                            <i class="fas fa-calendar-check"></i>
                        </div>
                        <h3>Leave Status</h3>
                    </div>
                    <canvas id="leaveStatusChart"></canvas>
                </div>
            </div>
            
            <!-- Approved Leave Requests Table -->
            <div class="approvedLeaves">
                <h3>Approved Leave Requests</h3>
                <table>
                    <thead>
                        <tr>
                            <th>Full Name</th>
                            <th>Filed Date</th>
                            <th>Department</th>
                            <th>Leave Type</th>
                            <th>Start Date</th>
                            <th>End Date</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (approvedLeaves && approvedLeaves.length > 0) { %>
                            <% approvedLeaves.forEach(leave => { %>
                                <tr>
                                    <td><%= leave.lastName %>, <%= leave.firstName %></td>
                                    <td><%= leave.filedDate %></td>
                                    <td><%= leave.department %></td>
                                    <td><%= leave.type %></td>
                                    <td><%= leave.startDate %></td>
                                    <td><%= leave.endDate %></td>
                                    <td><%= leave.status %></td>
                                </tr>
                            <% }); %>
                        <% } else { %>
                            <tr>
                                <td colspan="7">No approved leave requests found.</td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </div>
            
            <!-- All Leave Requests Table -->
            <div class="allLeaves">
                <div style="display: flex; align-items: center;">
                    <h3 style="margin-right: 10px;">All Leave Requests</h3>
                    <!-- Manage Leaves Button -->
                    <a href="/hr/manageleavetypes" class="manage-leaves-button">Manage Leave Types</a>
                </div>

                <table>
                    <thead>
                        <tr>
                            <th>Full Name</th>
                            <th>Filed Date</th>
                            <th>Department</th>
                            <th>Leave Type</th>
                            <th>Start Date</th>
                            <th>End Date</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (allLeaves && allLeaves.length > 0) { %>
                            <% allLeaves.forEach(leave => { %>
                                <tr>
                                    <td><%= leave.lastName %>, <%= leave.firstName %></td>
                                    <td><%= leave.filedDate %></td>
                                    <td><%= leave.department %></td>
                                    <td><%= leave.type %></td>
                                    <td><%= leave.startDate %></td>
                                    <td><%= leave.endDate %></td>
                                    <td><%= leave.status %></td>
                                </tr>
                            <% }); %>
                        <% } else { %>
                            <tr>
                                <td colspan="7">No leave requests found.</td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </div>
        </div>
        
        <!-- Requisitions Tab Content -->
        <div class="tab-content" id="requisitions-tab">
            <div class="chart-card">
                <div class="chart-header">
                    <div class="chart-icon">
                        <i class="fas fa-chart-pie"></i>
                    </div>
                    <h3>Manpower Requisition Status</h3>
                </div>
                <canvas id="manpowerRequisitionChart"></canvas>
            </div>
            
            <!-- Manpower Requisition Forms Section -->
            <div class="manpower-requisition">
                <h3>Manpower Requisition Forms</h3>
                <table>
                    <thead>
                        <tr>
                            <th>Requisitioner</th>
                            <th>Department</th>
                            <th>Job Position</th>
                            <th>Request Date</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (manpowerRequisitions && manpowerRequisitions.length > 0) { %>
                            <% manpowerRequisitions.forEach(req => { %>
                                <tr>
                                    <td><%= req.requisitioner %></td>
                                    <td><%= req.department %></td>
                                    <td><%= req.jobPosition %></td>
                                    <td><%= req.requestDate %></td>
                                    <td>
                                        <!-- Show button for pending requisitions -->
                                        <% if (req.status === 'Pending') { %>
                                            <!-- Button for pending requisition -->
                                            <button class="action-required-btn" data-mrfid="<%= req.mrfId %>"><%= req.actionButtonText %></button>
                                        <% } else { %>
                                            <!-- Display status for approved/disapproved requisition -->
                                            <%= req.status %>
                                        <% } %>
                                    </td>
                                </tr>
                            <% }); %>
                        <% } else { %>
                            <tr>
                                <td colspan="5">No manpower requisition forms available.</td>
                            </tr>
                        <% } %>
                    </tbody>                
                </table>
            </div>
        </div>
        
        <!-- Departments Tab Content -->
        <div class="tab-content" id="departments-tab">
            <div class="dual-chart-container">
                <div class="chart-card">
                    <div class="chart-header">
                        <div class="chart-icon">
                            <i class="fas fa-users"></i>
                        </div>
                        <h3>Department Attendance Rate</h3>
                    </div>
                    <canvas id="departmentAttendanceChart"></canvas>
                </div>
                
                <div class="chart-card">
                    <div class="chart-header">
                        <div class="chart-icon">
                            <i class="fas fa-clock"></i>
                        </div>
                        <h3>Average Working Hours by Department</h3>
                    </div>
                    <canvas id="departmentHoursChart"></canvas>
                </div>
            </div>
            
            <!-- Offboarding Requests -->
            <div class="offboarding-requests">
                <h3>Offboarding Requests</h3>
                <table>
                    <thead>
                        <tr>
                            <th>Employee Name</th>
                            <th>Department</th>
                            <th>Request Date</th>
                            <th>Status</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>nadine lustre</td>
                            <td>Marketing</td>
                            <td>12-06-2024</td>
                            <td>Pending</td>
                            <td><a href="/hr/offboarding-request">View Request</a></td>
                        </tr>
                    </tbody>                
                </table>
            </div>
        </div>

        <!--Script for the Chart.js-->
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <!-- Font Awesome for icons -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/js/all.min.js"></script>

        <script>
            // Add this to your JavaScript
            const MAX_ROWS = 5; // Show only 5 rows by default

            document.querySelectorAll('table tbody').forEach(tbody => {
                const rows = tbody.querySelectorAll('tr');
                if (rows.length > MAX_ROWS) {
                    // Hide extra rows
                    for (let i = MAX_ROWS; i < rows.length; i++) {
                        rows[i].style.display = 'none';
                    }
                    
                    // Add "Show More" link
                    const tfoot = document.createElement('tfoot');
                    const footerRow = document.createElement('tr');
                    const cell = document.createElement('td');
                    cell.colSpan = tbody.parentElement.querySelectorAll('th').length;
                    cell.innerHTML = '<a href="#" class="show-more-link">Show More...</a>';
                    cell.style.textAlign = 'center';
                    
                    footerRow.appendChild(cell);
                    tfoot.appendChild(footerRow);
                    tbody.parentElement.appendChild(tfoot);
                    
                    // Add click handler
                    cell.querySelector('.show-more-link').addEventListener('click', function(e) {
                        e.preventDefault();
                        for (let i = 0; i < rows.length; i++) {
                            rows[i].style.display = '';
                        }
                        this.parentElement.parentElement.style.display = 'none';
                    });
                }
            });
            // Enhanced Dashboard JavaScript
            document.addEventListener('DOMContentLoaded', function() {
                // Get data from backend
                const attendanceLogs = <%- JSON.stringify(attendanceLogs || []) %>;
                const allLeaves = <%- JSON.stringify(allLeaves || []) %>;
                const approvedLeaves = <%- JSON.stringify(approvedLeaves || []) %>;
                const manpowerRequisitions = <%- JSON.stringify(manpowerRequisitions || []) %>;
                
                // Department list
                const departments = [
                    'HR', 
                    'IT', 
                    'Marketing', 
                    'Partnerships', 
                    'Investor Relations', 
                    'Finance'
                ];

                initializeAttendanceReports();
                
                // Calculate KPI values
                function calculateKPIs() {
                    // Calculate attendance rate based on actual data
                    if (attendanceLogs && attendanceLogs.length) {
                        // Group attendance logs by department to calculate rates
                        const deptAttendance = {};
                        departments.forEach(dept => {
                            deptAttendance[dept] = { total: 0, present: 0 };
                        });
                        
                        // Simple calculation - count all logs as present employees
                        // In a real app, you would compare against total expected employees
                        const totalEmployees = 50; // Placeholder - would be calculated from staff data
                        const presentEmployees = new Set(attendanceLogs.map(log => `${log.firstName} ${log.lastName}`)).size;
                        
                        const attendanceRate = ((presentEmployees / totalEmployees) * 100).toFixed(1);
                        document.getElementById('attendance-rate').textContent = `${attendanceRate}%`;
                    } else {
                        document.getElementById('attendance-rate').textContent = 'N/A';
                    }
                    
                    // Calculate average working hours from real data
                    if (attendanceLogs && attendanceLogs.length) {
                        let totalHours = 0;
                        let validLogs = 0;
                        
                        attendanceLogs.forEach(log => {
                            if (log.activeWorkingHours && !isNaN(parseFloat(log.activeWorkingHours))) {
                                totalHours += parseFloat(log.activeWorkingHours);
                                validLogs++;
                            }
                        });
                        
                        if (validLogs > 0) {
                            const avgHours = (totalHours / validLogs).toFixed(1);
                            document.getElementById('avg-working-hours').textContent = `${avgHours} hrs`;
                        } else {
                            document.getElementById('avg-working-hours').textContent = 'N/A';
                        }
                    } else {
                        document.getElementById('avg-working-hours').textContent = 'N/A';
                    }
                    
                    // Count pending leave requests from real data
                    if (allLeaves && allLeaves.length) {
                        const pendingLeaves = allLeaves.filter(leave => leave.status === 'Pending').length;
                        document.getElementById('pending-leaves').textContent = pendingLeaves;
                    } else {
                        document.getElementById('pending-leaves').textContent = '0';
                    }
                    
                    // Count pending requisitions from real data
                    if (manpowerRequisitions && manpowerRequisitions.length) {
                        const pendingReqs = manpowerRequisitions.filter(req => req.status === 'Pending').length;
                        document.getElementById('pending-requisitions').textContent = pendingReqs;
                    } else {
                        document.getElementById('pending-requisitions').textContent = '0';
                    }
                }
                
                // Tab Navigation
                const tabButtons = document.querySelectorAll('.tab-button');
                const tabContents = document.querySelectorAll('.tab-content');
                
                tabButtons.forEach(button => {
                    button.addEventListener('click', () => {
                        // Remove active class from all buttons and contents
                        tabButtons.forEach(btn => btn.classList.remove('active'));
                        tabContents.forEach(content => content.classList.remove('active'));
                        
                        // Add active class to clicked button and corresponding content
                        button.classList.add('active');
                        const tabId = `${button.dataset.tab}-tab`;
                        document.getElementById(tabId).classList.add('active');
                    });
                });
                
                // Call KPI calculations
                calculateKPIs();
                
                // Process attendance data for visualizations
                function processAttendanceData() {
                    // Group by date
                    const dateAttendance = {};
                    
                    attendanceLogs.forEach(log => {
                        if (log.date && log.date !== 'N/A') {
                            dateAttendance[log.date] = (dateAttendance[log.date] || 0) + 1;
                        }
                    });
                    
                    // Group by department 
                    const deptAttendance = {};
                    departments.forEach(dept => {
                        deptAttendance[dept] = 0;
                    });
                    
                    attendanceLogs.forEach(log => {
                        if (log.department && departments.includes(log.department)) {
                            deptAttendance[log.department] = (deptAttendance[log.department] || 0) + 1;
                        }
                    });
                    
                    return { dateAttendance, deptAttendance };
                }
                
                // Process leave data for visualizations
                function processLeaveData() {
                    // Group by leave type
                    const leaveTypes = {};
                    
                    if (allLeaves && allLeaves.length) {
                        allLeaves.forEach(leave => {
                            if (leave.type) {
                                leaveTypes[leave.type] = (leaveTypes[leave.type] || 0) + 1;
                            }
                        });
                    }
                    
                    // Group by status
                    const leaveStatus = {
                        'Pending': 0,
                        'Approved': 0,
                        'Rejected': 0
                    };
                    
                    if (allLeaves && allLeaves.length) {
                        allLeaves.forEach(leave => {
                            if (leave.status && leaveStatus.hasOwnProperty(leave.status)) {
                                leaveStatus[leave.status]++;
                            }
                        });
                    }
                    
                    return { leaveTypes, leaveStatus };
                }
                
                // Process department data for visualizations
                function processDepartmentData() {
                    // Initialize departmental metrics
                    const deptMetrics = {};
                    departments.forEach(dept => {
                        deptMetrics[dept] = {
                            attendanceRate: 0,
                            averageHours: 0,
                            employeeCount: 0,
                            totalHours: 0
                        };
                    });
                    
                    // Calculate metrics from attendance logs
                    if (attendanceLogs && attendanceLogs.length) {
                        // Track employees per department
                        const deptEmployees = {};
                        departments.forEach(dept => {
                            deptEmployees[dept] = new Set();
                        });
                        
                        attendanceLogs.forEach(log => {
                            if (log.department && departments.includes(log.department)) {
                                // Add employee to department set
                                const empKey = `${log.firstName} ${log.lastName}`;
                                deptEmployees[log.department].add(empKey);
                                
                                // Add hours to department total
                                if (log.activeWorkingHours && !isNaN(parseFloat(log.activeWorkingHours))) {
                                    deptMetrics[log.department].totalHours += parseFloat(log.activeWorkingHours);
                                }
                            }
                        });
                        
                        // Calculate average hours and set employee count
                        departments.forEach(dept => {
                            deptMetrics[dept].employeeCount = deptEmployees[dept].size;
                            
                            if (deptMetrics[dept].employeeCount > 0) {
                                deptMetrics[dept].averageHours = (
                                    deptMetrics[dept].totalHours / deptMetrics[dept].employeeCount
                                ).toFixed(1);
                            }
                            
                            // Simplified attendance rate - using placeholder logic
                            // In a real app, you would compare against expected attendance
                            const expectedAttendance = 10; // Placeholder
                            deptMetrics[dept].attendanceRate = Math.min(100, 
                                Math.round((deptMetrics[dept].employeeCount / expectedAttendance) * 100)
                            );
                        });
                    }
                    
                    return deptMetrics;
                }
                
                // Get processed data for charts
                const attendanceData = processAttendanceData();
                const leaveData = processLeaveData();
                const departmentData = processDepartmentData();
                
                // Create Attendance Trend Chart
                const trendCtx = document.getElementById('attendanceTrendChart').getContext('2d');
                new Chart(trendCtx, {
                    type: 'line',
                    data: {
                        labels: Object.keys(attendanceData.dateAttendance).slice(-7),
                        datasets: [{
                            label: 'Daily Attendance',
                            data: Object.values(attendanceData.dateAttendance).slice(-7),
                            borderColor: '#2385B0',
                            backgroundColor: 'rgba(35, 133, 176, 0.1)',
                            borderWidth: 2,
                            tension: 0.3,
                            fill: true,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: { 
                            legend: { display: true, position: 'top' },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        return `Attendance: ${context.raw} employees`;
                                    }
                                }
                            }
                        },
                        scales: { 
                            x: { 
                                title: { display: true, text: 'Date' },
                                ticks: { maxRotation: 45, minRotation: 45 }
                            }, 
                            y: { 
                                title: { display: true, text: 'Employee Count' },
                                beginAtZero: true
                            } 
                        }
                    }
                });
                
                // Department Attendance Breakdown Chart
                const deptBreakdownCtx = document.getElementById('deptAttendanceBreakdownChart').getContext('2d');
                new Chart(deptBreakdownCtx, {
                    type: 'bar',
                    data: {
                        labels: departments,
                        datasets: [{
                            label: 'Attendance by Department',
                            data: departments.map(dept => attendanceData.deptAttendance[dept] || 0),
                            backgroundColor: '#4CAF50',
                            borderColor: '#4CAF50',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: { 
                            legend: { display: true, position: 'top' }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: { display: true, text: 'Employee Count' }
                            }
                        }
                    }
                });
                
                // Leave Types Chart (Pie Chart)
                const leaveTypeCtx = document.getElementById('leaveTypesChart').getContext('2d');
                new Chart(leaveTypeCtx, {
                    type: 'pie',
                    data: {
                        labels: Object.keys(leaveData.leaveTypes),
                        datasets: [{
                            data: Object.values(leaveData.leaveTypes),
                            backgroundColor: [
                                '#8884d8',
                                '#82ca9d',
                                '#ffc658',
                                '#ff8042',
                                '#0088FE',
                                '#00C49F'
                            ],
                            hoverOffset: 4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: { 
                            legend: { position: 'right', labels: { boxWidth: 12, font: { size: 11 } } },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.label || '';
                                        const value = context.raw || 0;
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percentage = Math.round((value / total) * 100);
                                        return `${label}: ${value} (${percentage}%)`;
                                    }
                                }
                            }
                        }
                    }
                });
                
                // Leave Status Chart (Pie Chart)
                const leaveStatusCtx = document.getElementById('leaveStatusChart').getContext('2d');
                new Chart(leaveStatusCtx, {
                    type: 'pie',
                    data: {
                        labels: Object.keys(leaveData.leaveStatus),
                        datasets: [{
                            data: Object.values(leaveData.leaveStatus),
                            backgroundColor: [
                                '#FFCE56', // Pending
                                '#2385B0', // Approved
                                '#FF6384'  // Rejected
                            ],
                            hoverOffset: 4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: { 
                            legend: { position: 'right', labels: { boxWidth: 12, font: { size: 11 } } },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.label || '';
                                        const value = context.raw || 0;
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percentage = Math.round((value / total) * 100);
                                        return `${label}: ${value} (${percentage}%)`;
                                    }
                                }
                            }
                        }
                    }
                });
                
                // Manpower Requisition Chart
                const manpowerStatusCounts = {
                    'Pending': 0,
                    'Approved': 0,
                    'Rejected': 0
                };
                
                if (manpowerRequisitions && manpowerRequisitions.length) {
                    manpowerRequisitions.forEach(req => {
                        if (req.status && manpowerStatusCounts.hasOwnProperty(req.status)) {
                            manpowerStatusCounts[req.status]++;
                        }
                    });
                }
                
                const requisitionCtx = document.getElementById('manpowerRequisitionChart').getContext('2d');
                new Chart(requisitionCtx, {
                    type: 'pie',
                    data: {
                        labels: Object.keys(manpowerStatusCounts),
                        datasets: [{
                            data: Object.values(manpowerStatusCounts),
                            backgroundColor: [
                                '#FFCE56', // Pending
                                '#2385B0', // Approved
                                '#FF6384'  // Rejected
                            ],
                            hoverOffset: 4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: { 
                            legend: { position: 'right', labels: { boxWidth: 12, font: { size: 11 } } },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.label || '';
                                        const value = context.raw || 0;
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
                                        return `${label}: ${value} (${percentage}%)`;
                                    }
                                }
                            }
                        }
                    }
                });
                
                // Department Attendance Rate Chart
                const deptAttendanceCtx = document.getElementById('departmentAttendanceChart').getContext('2d');
                new Chart(deptAttendanceCtx, {
                    type: 'bar',
                    data: {
                        labels: departments,
                        datasets: [{
                            label: 'Attendance Rate (%)',
                            data: departments.map(dept => departmentData[dept].attendanceRate || 0),
                            backgroundColor: '#2385B0',
                            borderColor: '#2385B0',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: { 
                            legend: { display: true, position: 'top' }
                        },
                        scales: {
                            y: {
                                min: 0,
                                max: 100,
                                title: { display: true, text: 'Attendance Rate (%)' }
                            }
                        }
                    }
                });
                
                // Department Working Hours Chart
                const deptHoursCtx = document.getElementById('departmentHoursChart').getContext('2d');
                new Chart(deptHoursCtx, {
                    type: 'bar',
                    data: {
                        labels: departments,
                        datasets: [{
                            label: 'Average Working Hours',
                            data: departments.map(dept => parseFloat(departmentData[dept].averageHours) || 0),
                            backgroundColor: '#82ca9d',
                            borderColor: '#82ca9d',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: { 
                            legend: { display: true, position: 'top' }
                        },
                        scales: {
                            y: {
                                min: 0,
                                max: 10,
                                title: { display: true, text: 'Hours' }
                            }
                        }
                    }
                });
            });

            // Initialize attendance reports
            function initializeAttendanceReports() {
                console.log('🔄 Initializing attendance reports...');
                
                // Set default dates for attendance reports
                setAttendanceReportDefaultDates();
                
                // Load employees for the dropdown
                loadEmployeesForAttendanceReport();

                // Setup employee report handlers
                setupEmployeeReportHandlers();

                // Initialize leave requests report
                initializeLeaveRequestsReport();
            }

            // Set default dates for attendance report forms
            function setAttendanceReportDefaultDates() {
                const today = new Date();
                const todayString = today.toISOString().split('T')[0];
                
                // Set today for daily attendance report
                const dailyDateInput = document.getElementById('daily-attendance-date');
                if (dailyDateInput) {
                    dailyDateInput.value = todayString;
                    console.log('✅ Set daily attendance date to today');
                }
                
                // Set current week for employee reports
                const currentWeekStart = new Date(today);
                currentWeekStart.setDate(today.getDate() - today.getDay());
                const currentWeekEnd = new Date(currentWeekStart);
                currentWeekEnd.setDate(currentWeekStart.getDate() + 6);
                
                const employeeStartDate = document.getElementById('employee-start-date');
                const employeeEndDate = document.getElementById('employee-end-date');
                if (employeeStartDate && employeeEndDate) {
                    employeeStartDate.value = currentWeekStart.toISOString().split('T')[0];
                    employeeEndDate.value = currentWeekEnd.toISOString().split('T')[0];
                    console.log('✅ Set employee report dates to current week');
                }
                
                // Set current month for leave reports
                const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
                const lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 0);
                
                const leaveStartDate = document.getElementById('leave-start-date');
                const leaveEndDate = document.getElementById('leave-end-date');
                if (leaveStartDate && leaveEndDate) {
                    leaveStartDate.value = firstDay.toISOString().split('T')[0];
                    leaveEndDate.value = lastDay.toISOString().split('T')[0];
                    console.log('✅ Set leave report dates to current month');
                }
            }

            // Load employees for the employee report dropdown
            async function loadEmployeesForAttendanceReport() {
                try {
                    console.log('🔄 Loading employees for attendance report dropdown...');
                    
                    const response = await fetch('/hr/reports/employees');
                    
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    
                    const result = await response.json();
                    
                    if (!result.success) {
                        throw new Error(result.message || 'Failed to load employees');
                    }
                    
                    const employeeSelect = document.getElementById('employee-select');
                    if (employeeSelect && result.employees) {
                        // Clear existing options except the first one
                        employeeSelect.innerHTML = '<option value="">Choose an employee...</option>';
                        
                        // Add employee options
                        result.employees.forEach(employee => {
                            const option = document.createElement('option');
                            option.value = employee.userId;
                            option.textContent = `${employee.firstName} ${employee.lastName} - ${employee.department}`;
                            employeeSelect.appendChild(option);
                        });
                        
                        console.log(`✅ Loaded ${result.employees.length} employees for dropdown`);
                    }
                    
                } catch (error) {
                    console.error('❌ Error loading employees:', error);
                    
                    const employeeSelect = document.getElementById('employee-select');
                    if (employeeSelect) {
                        employeeSelect.innerHTML = '<option value="">Error loading employees</option>';
                    }
                }
            }

            // Main function to generate attendance reports
            async function generateAttendanceReport(reportType, format) {
                const form = document.getElementById(`${reportType}-form`);
                const button = event.target;
                const resultsDiv = document.getElementById(`${reportType}-results`);
                
                // Add loading state
                button.classList.add('loading');
                button.disabled = true;
                
                try {
                    console.log(`🔄 [Frontend] Generating ${reportType} report in ${format} format...`);
                    
                    // Get form data
                    const formData = new FormData(form);
                    const params = new URLSearchParams();
                    
                    // Add all form data to params
                    for (let [key, value] of formData.entries()) {
                        if (value) {
                            params.append(key, value);
                            console.log(`📋 [Frontend] Form field ${key}: ${value}`);
                        }
                    }
                    
                    // Add format parameter
                    if (format) params.append('format', format);
                    
                    // Special validation for employee report
                    if (reportType === 'employee-report') {
                        const employeeId = formData.get('employeeId');
                        if (!employeeId) {
                            throw new Error('Please select an employee before generating the report.');
                        }
                        console.log(`👤 [Frontend] Selected employee ID: ${employeeId}`);
                    }
                    
                    console.log(`📋 [Frontend] Final parameters:`, Object.fromEntries(params));
                    
                    // Determine endpoint based on report type
                    let endpoint = '';
                    switch(reportType) {
                        case 'daily-attendance':
                            endpoint = '/hr/reports/daily-attendance';
                            break;
                        case 'employee-report':
                            endpoint = '/hr/reports/employee-attendance';
                            break;
                        case 'leave-report':
                            endpoint = '/hr/reports/leave-requests';
                            break;
                        default:
                            throw new Error('Unknown report type: ' + reportType);
                    }
                    
                    console.log(`🌐 [Frontend] Making request to: ${endpoint}?${params.toString()}`);
                    
                    if (format === 'pdf') {
                        console.log(`📄 [Frontend] PDF generation requested for ${reportType}`);
                        
                        // Fetch data first
                        const response = await fetch(`${endpoint}?${params.toString()}`);
                        
                        if (!response.ok) {
                            const errorText = await response.text();
                            console.error(`❌ [Frontend] HTTP Error ${response.status}:`, errorText);
                            throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
                        }
                        
                        const data = await response.json();
                        
                        if (!data.success) {
                            throw new Error(data.message || 'Failed to generate report');
                        }
                        
                        // Generate PDF based on report type
                        try {
                            if (typeof window.jspdf === 'undefined') {
                                throw new Error('jsPDF library is not loaded. Please refresh the page and try again.');
                            }
                            
                            let jsPDF;
                            if (window.jspdf && window.jspdf.jsPDF) {
                                jsPDF = window.jspdf.jsPDF;
                            } else if (window.jsPDF) {
                                jsPDF = window.jsPDF;
                            } else {
                                throw new Error('jsPDF not found. Please refresh the page.');
                            }
                            
                            const doc = new jsPDF();
                            
                            if (reportType === 'daily-attendance') {
                                generateDailyAttendancePDF(doc, data);
                            } else if (reportType === 'employee-report') {
                                generateEmployeeReportPDF(doc, data);
                            } else if (reportType === 'leave-report') {
                                generateLeaveReportPDF(doc, data);
                            }
                            
                            // Download the PDF
                            const filename = `${reportType.replace('-', '_')}_${new Date().toISOString().split('T')[0]}.pdf`;
                            doc.save(filename);
                            
                            console.log(`✅ PDF generated and downloaded: ${filename}`);
                            
                        } catch (pdfError) {
                            console.error('❌ Error generating PDF:', pdfError);
                            alert('Error generating PDF: ' + pdfError.message);
                        }
                        
                    } else {
                        console.log(`👁️ [Frontend] View mode requested for ${reportType}`);
                        
                        // Fetch data for viewing
                        const response = await fetch(`${endpoint}?${params.toString()}`);
                        
                        if (!response.ok) {
                            const errorText = await response.text();
                            console.error(`❌ [Frontend] HTTP Error ${response.status}:`, errorText);
                            throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
                        }
                        
                        const data = await response.json();
                        console.log(`✅ [Frontend] Received data:`, data);
                        
                        if (!data.success) {
                            throw new Error(data.message || 'Failed to fetch report data');
                        }
                        
                        // Display the data
                        displayAttendanceReportResults(resultsDiv, data, reportType);
                        console.log(`✅ [Frontend] ${reportType} report displayed successfully`);
                    }
                    
                } catch (error) {
                    console.error(`❌ [Frontend] Error generating ${reportType} report:`, error);
                    alert('Error generating report: ' + error.message);
                } finally {
                    // Remove loading state
                    button.classList.remove('loading');
                    button.disabled = false;
                }
            }

            // Display report results in the UI
            function displayAttendanceReportResults(resultsDiv, data, reportType) {
                resultsDiv.style.display = 'block';
                
                let html = '<div class="results-header"><h5>Report Results</h5></div>';
                
                if (reportType === 'daily-attendance') {
                    // Daily attendance report display (existing code)
                    if (data.summary) {
                        html += '<div class="results-summary">';
                        html += `
                            <div class="summary-stat">
                                <div class="summary-stat-value">${data.summary.totalEmployees}</div>
                                <div class="summary-stat-label">Total Employees</div>
                            </div>
                            <div class="summary-stat">
                                <div class="summary-stat-value">${data.summary.present}</div>
                                <div class="summary-stat-label">Present</div>
                            </div>
                            <div class="summary-stat">
                                <div class="summary-stat-value">${data.summary.onLeave}</div>
                                <div class="summary-stat-label">On Leave</div>
                            </div>
                            <div class="summary-stat">
                                <div class="summary-stat-value">${data.summary.late}</div>
                                <div class="summary-stat-label">Late</div>
                            </div>
                            <div class="summary-stat">
                                <div class="summary-stat-value">${data.summary.earlyOut}</div>
                                <div class="summary-stat-label">Early Out</div>
                            </div>
                        `;
                        html += '</div>';
                    }
                    
                    // Department breakdown and detailed attendance (existing code)
                    if (data.departmentBreakdown && data.departmentBreakdown.length > 0) {
                        html += `
                            <div class="data-table-container">
                                <h4 class="department-title">Department Breakdown</h4>
                                <table class="data-table">
                                    <thead>
                                        <tr>
                                            <th>Department</th>
                                            <th>Total</th>
                                            <th>Present</th>
                                            <th>Late</th>
                                            <th>On Leave</th>
                                            <th>Early Out</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                        `;
                        
                        data.departmentBreakdown.forEach(dept => {
                            html += `
                                <tr>
                                    <td><strong>${dept.department}</strong></td>
                                    <td>${dept.totalEmployees}</td>
                                    <td>${dept.present}</td>
                                    <td>${dept.late}</td>
                                    <td>${dept.onLeave}</td>
                                    <td>${dept.earlyOut}</td>
                                </tr>
                            `;
                        });
                        
                        html += '</tbody></table></div>';
                    }
                    
                    // Detailed attendance by department (existing code continues...)
                    if (data.detailedAttendance && Object.keys(data.detailedAttendance).length > 0) {
                        Object.keys(data.detailedAttendance).forEach(department => {
                            const employees = data.detailedAttendance[department];
                            
                            if (employees && employees.length > 0) {
                                html += `
                                    <div class="department-section">
                                        <h4 class="department-title">${department}</h4>
                                        <div class="data-table-container">
                                            <table class="data-table">
                                                <thead>
                                                    <tr>
                                                        <th>Last Name</th>
                                                        <th>First Name</th>
                                                        <th>Time In</th>
                                                        <th>Time Out</th>
                                                        <th>Hours Worked</th>
                                                        <th>Status</th>
                                                        <th>Late (mins)</th>
                                                        <th>Early Out (mins)</th>
                                                        <th>On Leave</th>
                                                        <th>Leave Remarks</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                `;
                                
                                employees.forEach(emp => {
                                    const statusClass = getAttendanceStatusClass(emp.status);
                                    html += `
                                        <tr>
                                            <td>${emp.lastName}</td>
                                            <td>${emp.firstName}</td>
                                            <td>${emp.timeIn || 'N/A'}</td>
                                            <td>${emp.timeOut || 'N/A'}</td>
                                            <td class="hours-display">${emp.hoursWorked || 'N/A'}</td>
                                            <td><span class="status-badge ${statusClass}">${emp.status}</span></td>
                                            <td class="late-time">${emp.lateMinutes || '0'}</td>
                                            <td class="early-out-time">${emp.earlyOutMinutes || '0'}</td>
                                            <td>${emp.onLeave ? 'Yes' : 'No'}</td>
                                            <td>${emp.leaveRemarks ? `<span class="leave-badge">${emp.leaveRemarks}</span>` : 'N/A'}</td>
                                        </tr>
                                    `;
                                });
                                
                                html += '</tbody></table></div></div>';
                            }
                        });
                    }
                } 
                else if (reportType === 'employee-report') {
                    // NEW: Employee report display
                    if (data.employee) {
                        // Employee Information Section
                        html += `
                            <div class="employee-info-section" style="background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 8px; padding: 20px; margin-bottom: 20px;">
                                <h4 style="color: #2385B0; margin: 0 0 15px 0; border-bottom: 2px solid #2385B0; padding-bottom: 10px;">
                                    <i class="fas fa-user-circle" style="margin-right: 8px;"></i>Employee Information
                                </h4>
                                <div class="employee-info-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                                    <div class="info-item">
                                        <strong style="color: #495057;">Employee Name:</strong><br>
                                        <span style="font-size: 16px; color: #2385B0; font-weight: 600;">${data.employee.employeeName}</span>
                                    </div>
                                    <div class="info-item">
                                        <strong style="color: #495057;">Position:</strong><br>
                                        <span>${data.employee.position}</span>
                                    </div>
                                    <div class="info-item">
                                        <strong style="color: #495057;">Department:</strong><br>
                                        <span>${data.employee.department}</span>
                                    </div>
                                    <div class="info-item">
                                        <strong style="color: #495057;">Reporting Period:</strong><br>
                                        <span>${data.reportingPeriod.startDate} - ${data.reportingPeriod.endDate}</span>
                                    </div>
                                    <div class="info-item">
                                        <strong style="color: #495057;">Report Generated:</strong><br>
                                        <span>${data.reportGenerated}</span>
                                    </div>
                                </div>
                            </div>
                        `;
                    }
                    
                    // Period Overview Section
                    if (data.periodOverview) {
                        html += `
                            <div class="period-overview-section" style="margin-bottom: 20px;">
                                <h4 style="color: #2385B0; margin: 0 0 15px 0; border-bottom: 2px solid #2385B0; padding-bottom: 10px;">
                                    <i class="fas fa-chart-bar" style="margin-right: 8px;"></i>Period Overview
                                </h4>
                                <div class="results-summary">
                                    <div class="summary-stat">
                                        <div class="summary-stat-value">${data.periodOverview.workingDaysInPeriod}</div>
                                        <div class="summary-stat-label">Working Days in Period</div>
                                    </div>
                                    <div class="summary-stat">
                                        <div class="summary-stat-value">${data.periodOverview.daysPresent}</div>
                                        <div class="summary-stat-label">Days Present</div>
                                    </div>
                                    <div class="summary-stat">
                                        <div class="summary-stat-value">${data.periodOverview.daysOnLeave}</div>
                                        <div class="summary-stat-label">Days on Leave</div>
                                    </div>
                                    <div class="summary-stat">
                                        <div class="summary-stat-value">${data.periodOverview.lateArrivals}</div>
                                        <div class="summary-stat-label">Late Arrivals</div>
                                    </div>
                                    <div class="summary-stat">
                                        <div class="summary-stat-value">${data.periodOverview.earlyOuts}</div>
                                        <div class="summary-stat-label">Early Outs</div>
                                    </div>
                                    <div class="summary-stat">
                                        <div class="summary-stat-value">${data.periodOverview.totalWorkHours}</div>
                                        <div class="summary-stat-label">Total Work Hours</div>
                                    </div>
                                </div>
                            </div>
                        `;
                    }
                    
                    // Current Leave Balances Section
                    if (data.currentLeaveBalances && data.currentLeaveBalances.length > 0) {
                        html += `
                            <div class="leave-balances-section" style="margin-bottom: 20px;">
                                <h4 style="color: #2385B0; margin: 0 0 15px 0; border-bottom: 2px solid #2385B0; padding-bottom: 10px;">
                                    <i class="fas fa-balance-scale" style="margin-right: 8px;"></i>Current Leave Balances
                                </h4>
                                <div class="data-table-container">
                                    <table class="data-table">
                                        <thead>
                                            <tr>
                                                <th>Leave Type</th>
                                                <th>Annual Entitlement</th>
                                                <th>Used</th>
                                                <th>Remaining</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                        `;
                        
                        data.currentLeaveBalances.forEach(balance => {
                            html += `
                                <tr>
                                    <td><strong>${balance.leaveType}</strong></td>
                                    <td style="text-align: center;">${balance.annualEntitlement}</td>
                                    <td style="text-align: center;">${balance.used}</td>
                                    <td style="text-align: center; font-weight: 600; color: ${balance.remaining > 0 ? '#28a745' : '#dc3545'};">${balance.remaining}</td>
                                </tr>
                            `;
                        });
                        
                        html += '</tbody></table></div></div>';
                    }
                    
                    // Detailed Attendance Record Section
                    if (data.detailedAttendanceRecord && data.detailedAttendanceRecord.length > 0) {
                        html += `
                            <div class="detailed-attendance-section" style="margin-bottom: 20px;">
                                <h4 style="color: #2385B0; margin: 0 0 15px 0; border-bottom: 2px solid #2385B0; padding-bottom: 10px;">
                                    <i class="fas fa-calendar-check" style="margin-right: 8px;"></i>Detailed Attendance Record
                                </h4>
                                <div class="data-table-container">
                                    <table class="data-table">
                                        <thead>
                                            <tr>
                                                <th>Date</th>
                                                <th>Time In</th>
                                                <th>Time Out</th>
                                                <th>Hours Worked</th>
                                                <th>Status</th>
                                                <th>Late (mins)</th>
                                                <th>Early Out (mins)</th>
                                                <th>On Leave</th>
                                                <th>Leave Remarks</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                        `;
                        
                        data.detailedAttendanceRecord.forEach(record => {
                            const statusClass = getAttendanceStatusClass(record.status);
                            html += `
                                <tr>
                                    <td style="font-weight: 600;">${record.date}</td>
                                    <td>${record.timeIn}</td>
                                    <td>${record.timeOut}</td>
                                    <td class="hours-display">${record.hoursWorked}</td>
                                    <td><span class="status-badge ${statusClass}">${record.status}</span></td>
                                    <td class="late-time">${record.lateMinutes || '0'}</td>
                                    <td class="early-out-time">${record.earlyOutMinutes || '0'}</td>
                                    <td>${record.onLeave ? 'Yes' : 'No'}</td>
                                    <td>${record.leaveRemarks !== 'N/A' ? `<span class="leave-badge">${record.leaveRemarks}</span>` : 'N/A'}</td>
                                </tr>
                            `;
                        });
                        
                        html += '</tbody></table></div></div>';
                    }
                    
                    // Leave Taken Section
                    if (data.leaveTaken && data.leaveTaken.length > 0) {
                        html += `
                            <div class="leave-taken-section" style="margin-bottom: 20px;">
                                <h4 style="color: #2385B0; margin: 0 0 15px 0; border-bottom: 2px solid #2385B0; padding-bottom: 10px;">
                                    <i class="fas fa-calendar-times" style="margin-right: 8px;"></i>Leave Taken
                                </h4>
                                <div class="data-table-container">
                                    <table class="data-table">
                                        <thead>
                                            <tr>
                                                <th>Date</th>
                                                <th>Leave Type</th>
                                                <th>Requested Dates</th>
                                                <th>Duration</th>
                                                <th>Status</th>
                                                <th>Approved By</th>
                                                <th>Approval Date</th>
                                                <th>Remarks</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                        `;
                        
                        data.leaveTaken.forEach(leave => {
                            html += `
                                <tr>
                                    <td style="font-weight: 600;">${leave.date}</td>
                                    <td><span class="leave-badge">${leave.leaveType}</span></td>
                                    <td>${leave.requestedDates}</td>
                                    <td style="text-align: center;">${leave.duration} day(s)</td>
                                    <td><span class="status-badge status-present">${leave.status}</span></td>
                                    <td>${leave.approvedBy}</td>
                                    <td>${leave.approvalDate}</td>
                                    <td>${leave.remarks}</td>
                                </tr>
                            `;
                        });
                        
                        html += '</tbody></table></div></div>';
                    }
                    
                    // Pending Leave Requests Section
                    if (data.pendingLeaveRequests && data.pendingLeaveRequests.length > 0) {
                        html += `
                            <div class="pending-leave-section" style="margin-bottom: 20px;">
                                <h4 style="color: #2385B0; margin: 0 0 15px 0; border-bottom: 2px solid #2385B0; padding-bottom: 10px;">
                                    <i class="fas fa-hourglass-half" style="margin-right: 8px;"></i>Pending Leave Requests
                                </h4>
                                <div class="data-table-container">
                                    <table class="data-table">
                                        <thead>
                                            <tr>
                                                <th>Date</th>
                                                <th>Leave Type</th>
                                                <th>Requested Dates</th>
                                                <th>Duration</th>
                                                <th>Status</th>
                                                <th>Decision By</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                        `;
                        
                        data.pendingLeaveRequests.forEach(leave => {
                            html += `
                                <tr>
                                    <td style="font-weight: 600;">${leave.date}</td>
                                    <td><span class="leave-badge">${leave.leaveType}</span></td>
                                    <td>${leave.requestedDates}</td>
                                    <td style="text-align: center;">${leave.duration} day(s)</td>
                                    <td><span class="status-badge status-late">${leave.status}</span></td>
                                    <td>${leave.decisionBy}</td>
                                </tr>
                            `;
                        });
                        
                        html += '</tbody></table></div></div>';
                    }
                }
                else if (reportType === 'leave-report') {
                    // Leave report display (implement as needed)
                    html += '<div class="no-data">Leave report display coming soon...</div>';
                }
                
                if (html === '<div class="results-header"><h5>Report Results</h5></div>') {
                    html += '<div class="no-data">No data available for the selected criteria.</div>';
                }
                
                resultsDiv.innerHTML = html;
            }

            // Initialize leave requests report when page loads
            function initializeLeaveRequestsReport() {
                console.log('🔄 Initializing leave requests report...');
                
                // Set default dates
                setLeaveRequestsReportDefaultDates();
                
                // Setup report type change handler
                setupLeaveRequestsReportHandlers();
            }

            // Set default dates for leave requests report
            function setLeaveRequestsReportDefaultDates() {
                const today = new Date();
                
                // Set current month for leave reports (default to monthly)
                const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
                const lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 0);
                
                const startDateInput = document.getElementById('leave-requests-start-date');
                const endDateInput = document.getElementById('leave-requests-end-date');
                
                if (startDateInput && endDateInput) {
                    startDateInput.value = firstDay.toISOString().split('T')[0];
                    endDateInput.value = lastDay.toISOString().split('T')[0];
                    console.log('✅ Set leave requests report dates to current month');
                }
            }

            // Setup event handlers for leave requests report
            function setupLeaveRequestsReportHandlers() {
                const reportTypeSelect = document.getElementById('leave-requests-report-type');
                const startDateInput = document.getElementById('leave-requests-start-date');
                const endDateInput = document.getElementById('leave-requests-end-date');
                
                if (reportTypeSelect) {
                    reportTypeSelect.addEventListener('change', function() {
                        const reportType = this.value;
                        const today = new Date();
                        
                        if (reportType === 'weekly') {
                            // Set current week
                            const currentWeekStart = new Date(today);
                            currentWeekStart.setDate(today.getDate() - today.getDay());
                            const currentWeekEnd = new Date(currentWeekStart);
                            currentWeekEnd.setDate(currentWeekStart.getDate() + 6);
                            
                            if (startDateInput) startDateInput.value = currentWeekStart.toISOString().split('T')[0];
                            if (endDateInput) endDateInput.value = currentWeekEnd.toISOString().split('T')[0];
                        } else if (reportType === 'monthly') {
                            // Set current month
                            const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
                            const lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 0);
                            
                            if (startDateInput) startDateInput.value = firstDay.toISOString().split('T')[0];
                            if (endDateInput) endDateInput.value = lastDay.toISOString().split('T')[0];
                        }
                    });
                }
            }

            // Main function to generate leave requests report
            async function generateLeaveRequestsReport(format) {
                const form = document.getElementById('leave-requests-report-form');
                const button = event.target;
                const resultsDiv = document.getElementById('leave-requests-report-results');
                
                // Add loading state
                button.classList.add('loading');
                button.disabled = true;
                
                try {
                    console.log(`🔄 [Frontend] Generating leave requests report in ${format} format...`);
                    
                    // Get form data
                    const formData = new FormData(form);
                    const params = new URLSearchParams();
                    
                    // Add all form data to params
                    for (let [key, value] of formData.entries()) {
                        if (value) {
                            params.append(key, value);
                            console.log(`📋 [Frontend] Form field ${key}: ${value}`);
                        }
                    }
                    
                    // Add format parameter
                    if (format) params.append('format', format);
                    
                    console.log(`📋 [Frontend] Final parameters:`, Object.fromEntries(params));
                    
                    const endpoint = '/hr/reports/leave-requests';
                    console.log(`🌐 [Frontend] Making request to: ${endpoint}?${params.toString()}`);
                    
                    if (format === 'pdf') {
                        console.log(`📄 [Frontend] PDF generation requested for leave requests report`);
                        
                        // Fetch data first
                        const response = await fetch(`${endpoint}?${params.toString()}`);
                        
                        if (!response.ok) {
                            const errorText = await response.text();
                            console.error(`❌ [Frontend] HTTP Error ${response.status}:`, errorText);
                            throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
                        }
                        
                        const data = await response.json();
                        
                        if (!data.success) {
                            throw new Error(data.message || 'Failed to generate report');
                        }
                        
                        // Generate PDF
                        try {
                            if (typeof window.jspdf === 'undefined') {
                                throw new Error('jsPDF library is not loaded. Please refresh the page and try again.');
                            }
                            
                            let jsPDF;
                            if (window.jspdf && window.jspdf.jsPDF) {
                                jsPDF = window.jspdf.jsPDF;
                            } else if (window.jsPDF) {
                                jsPDF = window.jsPDF;
                            } else {
                                throw new Error('jsPDF not found. Please refresh the page.');
                            }
                            
                            const doc = new jsPDF();
                            generateLeaveRequestsReportPDF(doc, data);
                            
                            // Download the PDF
                            const filename = `leave_requests_report_${new Date().toISOString().split('T')[0]}.pdf`;
                            doc.save(filename);
                            
                            console.log(`✅ PDF generated and downloaded: ${filename}`);
                            
                        } catch (pdfError) {
                            console.error('❌ Error generating PDF:', pdfError);
                            alert('Error generating PDF: ' + pdfError.message);
                        }
                        
                    } else {
                        console.log(`👁️ [Frontend] View mode requested for leave requests report`);
                        
                        // Fetch data for viewing
                        const response = await fetch(`${endpoint}?${params.toString()}`);
                        
                        if (!response.ok) {
                            const errorText = await response.text();
                            console.error(`❌ [Frontend] HTTP Error ${response.status}:`, errorText);
                            throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
                        }
                        
                        const data = await response.json();
                        console.log(`✅ [Frontend] Received data:`, data);
                        
                        if (!data.success) {
                            throw new Error(data.message || 'Failed to fetch report data');
                        }
                        
                        // Display the data
                        displayLeaveRequestsReport(resultsDiv, data);
                        console.log(`✅ [Frontend] Leave requests report displayed successfully`);
                    }
                    
                } catch (error) {
                    console.error(`❌ [Frontend] Error generating leave requests report:`, error);
                    alert('Error generating report: ' + error.message);
                } finally {
                    // Remove loading state
                    button.classList.remove('loading');
                    button.disabled = false;
                }
            }

            // Display leave requests report in the UI
            function displayLeaveRequestsReport(resultsDiv, data) {
                resultsDiv.style.display = 'block';
                
                // Get the template
                const template = document.getElementById('leave-requests-report-template');
                if (!template) {
                    console.error('❌ Leave requests report template not found');
                    return;
                }
                
                // Clone the template
                const reportContent = template.content.cloneNode(true);
                
                // Set generation date
                const generationDate = reportContent.getElementById('report-generation-date');
                if (generationDate) {
                    generationDate.textContent = new Date().toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                    });
                }
                
                // Process and calculate statistics
                const stats = calculateLeaveRequestsStatistics(data.leaveRequests || []);
                
                // Update summary statistics
                updateSummaryStatistics(reportContent, stats);
                
                // Group requests by department
                const departmentGroups = groupLeaveRequestsByDepartment(data.leaveRequests || []);
                
                // Generate department sections
                generateDepartmentSections(reportContent, departmentGroups, data.leaveBalances || []);
                
                // Update final total
                const finalTotal = reportContent.getElementById('final-total-requests');
                if (finalTotal) {
                    finalTotal.textContent = stats.totalRequests;
                }
                
                // Clear and append to results div
                resultsDiv.innerHTML = '';
                resultsDiv.appendChild(reportContent);
            }

            // Calculate statistics from leave requests data
            function calculateLeaveRequestsStatistics(leaveRequests) {
                const stats = {
                    totalRequests: 0,
                    approvedRequests: 0,
                    pendingRequests: 0,
                    rejectedRequests: 0,
                    totalDaysRequested: 0,
                    totalDaysApproved: 0
                };
                
                leaveRequests.forEach(request => {
                    stats.totalRequests++;
                    
                    // Calculate duration
                    const fromDate = new Date(request.fromDate);
                    const untilDate = new Date(request.untilDate);
                    const duration = Math.ceil((untilDate - fromDate) / (1000 * 60 * 60 * 24)) + 1;
                    
                    stats.totalDaysRequested += duration;
                    
                    // Count by status
                    const status = (request.status || '').toLowerCase();
                    if (status === 'approved') {
                        stats.approvedRequests++;
                        stats.totalDaysApproved += duration;
                    } else if (status === 'pending') {
                        stats.pendingRequests++;
                    } else if (status === 'rejected') {
                        stats.rejectedRequests++;
                    }
                });
                
                return stats;
            }

            // Update summary statistics in the report
            function updateSummaryStatistics(reportContent, stats) {
                const elements = {
                    'total-requests': stats.totalRequests,
                    'approved-requests': stats.approvedRequests,
                    'pending-requests': stats.pendingRequests,
                    'total-days-requested': stats.totalDaysRequested,
                    'total-days-approved': stats.totalDaysApproved
                };
                
                Object.entries(elements).forEach(([id, value]) => {
                    const element = reportContent.getElementById(id);
                    if (element) {
                        element.textContent = value;
                    }
                });
            }

            // Group leave requests by department
            function groupLeaveRequestsByDepartment(leaveRequests) {
                const groups = {};
                
                leaveRequests.forEach(request => {
                    const dept = request.department || 'Unknown';
                    if (!groups[dept]) {
                        groups[dept] = [];
                    }
                    groups[dept].push(request);
                });
                
                // Sort departments alphabetically
                const sortedGroups = {};
                Object.keys(groups).sort().forEach(dept => {
                    sortedGroups[dept] = groups[dept];
                });
                
                return sortedGroups;
            }

            // Generate department sections
            function generateDepartmentSections(reportContent, departmentGroups, leaveBalances) {
                const container = reportContent.getElementById('department-sections-container');
                const deptTemplate = document.getElementById('department-section-template');
                const rowTemplate = document.getElementById('leave-request-row-template');
                
                if (!container || !deptTemplate || !rowTemplate) {
                    console.error('❌ Required templates not found');
                    return;
                }
                
                // Create balances lookup
                const balancesLookup = {};
                leaveBalances.forEach(balance => {
                    const key = `${balance.firstName}_${balance.lastName}_${balance.leaveType}`;
                    balancesLookup[key] = balance;
                });
                
                Object.entries(departmentGroups).forEach(([deptName, requests]) => {
                    // Clone department section template
                    const deptSection = deptTemplate.content.cloneNode(true);
                    
                    // Set department name
                    const deptNameElement = deptSection.querySelector('.department-name');
                    if (deptNameElement) {
                        deptNameElement.textContent = deptName;
                    }
                    
                    // Set request count
                    const countElement = deptSection.querySelector('.department-request-count');
                    if (countElement) {
                        countElement.textContent = requests.length;
                    }
                    
                    // Get table body
                    const tableBody = deptSection.querySelector('.department-table-body');
                    let totalDepartmentDays = 0;
                    
                    if (tableBody) {
                        requests.forEach(request => {
                            // Clone row template
                            const row = rowTemplate.content.cloneNode(true);
                            
                            // Calculate duration
                            const fromDate = new Date(request.fromDate);
                            const untilDate = new Date(request.untilDate);
                            const duration = Math.ceil((untilDate - fromDate) / (1000 * 60 * 60 * 24)) + 1;
                            totalDepartmentDays += duration;
                            
                            // Get remaining balance
                            const balanceKey = `${request.firstName}_${request.lastName}_${request.leaveType}`;
                            const balance = balancesLookup[balanceKey];
                            const remainingBalance = balance ? balance.remainingLeaves : 'N/A';
                            
                            // Populate row data
                            populateLeaveRequestRow(row, request, duration, remainingBalance);
                            
                            tableBody.appendChild(row);
                        });
                    }
                    
                    // Set total department days
                    const totalElement = deptSection.querySelector('.department-total-days');
                    if (totalElement) {
                        totalElement.textContent = totalDepartmentDays;
                    }
                    
                    container.appendChild(deptSection);
                });
            }

            // Populate individual leave request row
            function populateLeaveRequestRow(row, request, duration, remainingBalance) {
                // Format dates
                const fromDate = new Date(request.fromDate);
                const untilDate = new Date(request.untilDate);
                const dateRange = `${fromDate.toLocaleDateString()} - ${untilDate.toLocaleDateString()}`;
                
                // Set timestamp (using updatedDate or fromDate)
                const timestamp = request.updatedDate ? 
                    new Date(request.updatedDate).toLocaleString() : 
                    new Date(request.fromDate).toLocaleString();
                
                // Get approval status
                const isApproved = (request.status || '').toLowerCase() === 'approved' ? 'Y' : 'N';
                const statusClass = getLeaveStatusClass(request.status);
                
                // Populate all fields
                const fields = {
                    '.leave-timestamp': timestamp,
                    '.employee-last-name': request.lastName || 'Unknown',
                    '.employee-first-name': request.firstName || 'Unknown',
                    '.leave-type-name': request.leaveType || 'Unknown',
                    '.leave-date-range': dateRange,
                    '.leave-duration': duration.toString(),
                    '.leave-approval-status': isApproved,
                    '.leave-remaining-balance': remainingBalance.toString(),
                    '.leave-request-remarks': request.reason || 'No remarks'
                };
                
                Object.entries(fields).forEach(([selector, value]) => {
                    const element = row.querySelector(selector);
                    if (element) {
                        element.textContent = value;
                    }
                });
                
                // Add status class
                const statusElement = row.querySelector('.leave-approval-status');
                if (statusElement && statusClass) {
                    statusElement.classList.add(statusClass);
                }
                
                // Add balance styling
                const balanceElement = row.querySelector('.leave-remaining-balance');
                if (balanceElement && typeof remainingBalance === 'number') {
                    if (remainingBalance > 5) {
                        balanceElement.classList.add('leave-balance-positive');
                    } else if (remainingBalance > 0) {
                        balanceElement.classList.add('leave-balance-warning');
                    } else {
                        balanceElement.classList.add('leave-balance-negative');
                    }
                }
            }

            // Get status CSS class
            function getLeaveStatusClass(status) {
                if (!status) return 'leave-status-pending';
                
                const statusLower = status.toLowerCase();
                if (statusLower === 'approved') return 'leave-status-approved';
                if (statusLower === 'pending') return 'leave-status-pending';
                if (statusLower === 'rejected') return 'leave-status-rejected';
                
                return 'leave-status-pending';
            }

            // Get status CSS class for attendance
            function getAttendanceStatusClass(status) {
                if (!status) return 'status-absent';
                
                const statusLower = status.toLowerCase();
                if (statusLower.includes('present')) return 'status-present';
                if (statusLower.includes('late')) return 'status-late';
                if (statusLower.includes('early')) return 'status-early-out';
                if (statusLower.includes('leave')) return 'status-on-leave';
                if (statusLower.includes('absent')) return 'status-absent';
                
                return 'status-present';
            }

            // PDF Generation function for Daily Attendance Report
            function generateDailyAttendancePDF(doc, data) {
                // Set up document header
                doc.setFontSize(20);
                doc.setTextColor(35, 133, 176);
                doc.text('Daily Attendance Report', 20, 20);
                
                // Add date and generation info
                doc.setFontSize(12);
                doc.setTextColor(0, 0, 0);
                doc.text(`Date: ${data.reportDate}`, 20, 35);
                doc.setFontSize(10);
                doc.setTextColor(100, 100, 100);
                doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 45);
                
                let yPosition = 60;
                
                // Attendance Summary Statistics
                if (data.summary) {
                    doc.setFontSize(14);
                    doc.setTextColor(0, 0, 0);
                    doc.text('Attendance Summary Statistics', 20, yPosition);
                    yPosition += 10;
                    
                    const summaryData = [
                        ['Total Employees', data.summary.totalEmployees.toString()],
                        ['Present', data.summary.present.toString()],
                        ['On Leave', data.summary.onLeave.toString()],
                        ['Late', data.summary.late.toString()],
                        ['Early Out', data.summary.earlyOut.toString()]
                    ];
                    
                    doc.autoTable({
                        startY: yPosition,
                        head: [['Summary Statistics', 'Count']],
                        body: summaryData,
                        styles: { fontSize: 10 },
                        headStyles: { fillColor: [35, 133, 176] },
                        columnStyles: {
                            0: { fontStyle: 'bold', cellWidth: 60 },
                            1: { halign: 'center', cellWidth: 30 }
                        },
                        margin: { top: 60 }
                    });
                    
                    yPosition = doc.lastAutoTable.finalY + 20;
                }
                
                // Department Breakdown
                if (data.departmentBreakdown && data.departmentBreakdown.length > 0) {
                    if (yPosition > 180) {
                        doc.addPage();
                        yPosition = 20;
                    }
                    
                    doc.setFontSize(14);
                    doc.setTextColor(0, 0, 0);
                    doc.text('Department Breakdown', 20, yPosition);
                    yPosition += 10;
                    
                    const deptData = data.departmentBreakdown.map(dept => [
                        dept.department || 'N/A',
                        (dept.totalEmployees || 0).toString(),
                        (dept.present || 0).toString(),
                        (dept.late || 0).toString(),
                        (dept.onLeave || 0).toString(),
                        (dept.earlyOut || 0).toString()
                    ]);
                    
                    doc.autoTable({
                        startY: yPosition,
                        head: [['Department', 'Total', 'Present', 'Late', 'On Leave', 'Early Out']],
                        body: deptData,
                        styles: { fontSize: 9 },
                        headStyles: { fillColor: [35, 133, 176] },
                        margin: { top: 60 }
                    });
                    
                    yPosition = doc.lastAutoTable.finalY + 20;
                }
                
                // Detailed Attendance by Department
                if (data.detailedAttendance && Object.keys(data.detailedAttendance).length > 0) {
                    Object.keys(data.detailedAttendance).forEach(department => {
                        const employees = data.detailedAttendance[department];
                        
                        if (employees && employees.length > 0) {
                            // Check if we need a new page
                            if (yPosition > 150) {
                                doc.addPage();
                                yPosition = 20;
                            }
                            
                            doc.setFontSize(12);
                            doc.setTextColor(0, 0, 0);
                            doc.text(department, 20, yPosition);
                            yPosition += 10;
                            
                            const empData = employees.map(emp => [
                                emp.lastName || 'N/A',
                                emp.firstName || 'N/A',
                                emp.timeIn || 'N/A',
                                emp.timeOut || 'N/A',
                                emp.hoursWorked || 'N/A',
                                emp.status || 'N/A',
                                (emp.lateMinutes || 0).toString(),
                                (emp.earlyOutMinutes || 0).toString(),
                                emp.onLeave ? 'Y' : 'N',
                                emp.leaveRemarks || 'N/A'
                            ]);
                            
                            doc.autoTable({
                                startY: yPosition,
                                head: [['Last Name', 'First Name', 'Time In', 'Time Out', 'Hours', 'Status', 'Late', 'Early', 'Leave', 'Remarks']],
                                body: empData,
                                styles: { fontSize: 7 },
                                headStyles: { fillColor: [35, 133, 176], fontSize: 7 },
                                margin: { left: 10, right: 10 }
                            });
                            
                            yPosition = doc.lastAutoTable.finalY + 15;
                        }
                    });
                }
            }

            function generateEmployeeReportPDF(doc, data) {
                // Set up document header
                doc.setFontSize(20);
                doc.setTextColor(35, 133, 176);
                doc.text('Employee Attendance & Leave Report', 20, 20);
                
                // Employee Information
                if (data.employee) {
                    doc.setFontSize(14);
                    doc.setTextColor(0, 0, 0);
                    doc.text('Employee Information', 20, 40);
                    
                    doc.setFontSize(10);
                    doc.text(`Name: ${data.employee.employeeName}`, 20, 50);
                    doc.text(`Position: ${data.employee.position}`, 20, 55);
                    doc.text(`Department: ${data.employee.department}`, 20, 60);
                    doc.text(`Reporting Period: ${data.reportingPeriod.startDate} - ${data.reportingPeriod.endDate}`, 20, 65);
                    doc.text(`Report Generated: ${data.reportGenerated}`, 20, 70);
                }
                
                let yPosition = 85;
                
                // Period Overview
                if (data.periodOverview) {
                    doc.setFontSize(14);
                    doc.setTextColor(0, 0, 0);
                    doc.text('Period Overview', 20, yPosition);
                    yPosition += 10;
                    
                    const overviewData = [
                        ['Working Days in Period', data.periodOverview.workingDaysInPeriod.toString()],
                        ['Days Present', data.periodOverview.daysPresent.toString()],
                        ['Days on Leave', data.periodOverview.daysOnLeave.toString()],
                        ['Late Arrivals', data.periodOverview.lateArrivals.toString()],
                        ['Early Outs', data.periodOverview.earlyOuts.toString()],
                        ['Total Work Hours', data.periodOverview.totalWorkHours]
                    ];
                    
                    doc.autoTable({
                        startY: yPosition,
                        head: [['Metric', 'Count']],
                        body: overviewData,
                        styles: { fontSize: 10 },
                        headStyles: { fillColor: [35, 133, 176] },
                        columnStyles: {
                            0: { fontStyle: 'bold', cellWidth: 80 },
                            1: { halign: 'center', cellWidth: 40 }
                        }
                    });
                    
                    yPosition = doc.lastAutoTable.finalY + 20;
                }
                
                // Current Leave Balances
                if (data.currentLeaveBalances && data.currentLeaveBalances.length > 0) {
                    if (yPosition > 200) {
                        doc.addPage();
                        yPosition = 20;
                    }
                    
                    doc.setFontSize(14);
                    doc.setTextColor(0, 0, 0);
                    doc.text('Current Leave Balances', 20, yPosition);
                    yPosition += 10;
                    
                    const balanceData = data.currentLeaveBalances.map(balance => [
                        balance.leaveType,
                        balance.annualEntitlement.toString(),
                        balance.used.toString(),
                        balance.remaining.toString()
                    ]);
                    
                    doc.autoTable({
                        startY: yPosition,
                        head: [['Leave Type', 'Annual Entitlement', 'Used', 'Remaining']],
                        body: balanceData,
                        styles: { fontSize: 10 },
                        headStyles: { fillColor: [35, 133, 176] }
                    });
                    
                    yPosition = doc.lastAutoTable.finalY + 20;
                }
                
                // Detailed Attendance Record
                if (data.detailedAttendanceRecord && data.detailedAttendanceRecord.length > 0) {
                    if (yPosition > 150) {
                        doc.addPage();
                        yPosition = 20;
                    }
                    
                    doc.setFontSize(14);
                    doc.setTextColor(0, 0, 0);
                    doc.text('Detailed Attendance Record', 20, yPosition);
                    yPosition += 10;
                    
                    const attendanceData = data.detailedAttendanceRecord.map(record => [
                        record.date,
                        record.timeIn,
                        record.timeOut,
                        record.hoursWorked,
                        record.status,
                        record.lateMinutes.toString(),
                        record.earlyOutMinutes.toString(),
                        record.onLeave ? 'Y' : 'N'
                    ]);
                    
                    doc.autoTable({
                        startY: yPosition,
                        head: [['Date', 'Time In', 'Time Out', 'Hours', 'Status', 'Late', 'Early', 'Leave']],
                        body: attendanceData,
                        styles: { fontSize: 8 },
                        headStyles: { fillColor: [35, 133, 176], fontSize: 8 },
                        margin: { left: 10, right: 10 }
                    });
                    
                    yPosition = doc.lastAutoTable.finalY + 15;
                }
                
                // Leave Taken
                if (data.leaveTaken && data.leaveTaken.length > 0) {
                    if (yPosition > 150) {
                        doc.addPage();
                        yPosition = 20;
                    }
                    
                    doc.setFontSize(14);
                    doc.setTextColor(0, 0, 0);
                    doc.text('Leave Taken', 20, yPosition);
                    yPosition += 10;
                    
                    const leaveData = data.leaveTaken.map(leave => [
                        leave.date,
                        leave.leaveType,
                        leave.requestedDates,
                        leave.duration.toString(),
                        leave.status,
                        leave.approvedBy,
                        leave.approvalDate
                    ]);
                    
                    doc.autoTable({
                        startY: yPosition,
                        head: [['Date', 'Type', 'Requested Dates', 'Duration', 'Status', 'Approved By', 'Approval Date']],
                        body: leaveData,
                        styles: { fontSize: 8 },
                        headStyles: { fillColor: [35, 133, 176], fontSize: 8 },
                        margin: { left: 5, right: 5 }
                    });
                }
            }

            function generateLeaveRequestsReportPDF(doc, data) {
                // Set up document header
                doc.setFontSize(18);
                doc.setTextColor(35, 133, 176);
                doc.text('Weekly/Monthly Leave Requests & Balances Report (HR)', 20, 20);
                
                // Add generation date
                doc.setFontSize(10);
                doc.setTextColor(100, 100, 100);
                doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 30);
                doc.text(`Period: ${data.startDate} to ${data.endDate}`, 20, 35);
                
                let yPosition = 50;
                
                // Calculate and add summary statistics
                const stats = calculateLeaveRequestsStatistics(data.leaveRequests || []);
                
                doc.setFontSize(14);
                doc.setTextColor(0, 0, 0);
                doc.text('Leave Summary Statistics', 20, yPosition);
                yPosition += 10;
                
                const summaryData = [
                    ['Total Leave Requests', stats.totalRequests.toString()],
                    ['Approved Requests', stats.approvedRequests.toString()],
                    ['Pending Requests', stats.pendingRequests.toString()],
                    ['Total Leave Days Requested', stats.totalDaysRequested.toString()],
                    ['Total Leave Days Approved', stats.totalDaysApproved.toString()]
                ];
                
                doc.autoTable({
                    startY: yPosition,
                    head: [['Summary Statistics', 'Count']],
                    body: summaryData,
                    styles: { fontSize: 10 },
                    headStyles: { fillColor: [35, 133, 176] },
                    columnStyles: {
                        0: { fontStyle: 'bold', cellWidth: 80 },
                        1: { halign: 'center', cellWidth: 30 }
                    }
                });
                
                yPosition = doc.lastAutoTable.finalY + 20;
                
                // Group and display by department
                const departmentGroups = groupLeaveRequestsByDepartment(data.leaveRequests || []);
                
                Object.entries(departmentGroups).forEach(([deptName, requests]) => {
                    if (yPosition > 200) {
                        doc.addPage();
                        yPosition = 20;
                    }
                    
                    doc.setFontSize(12);
                    doc.setTextColor(0, 0, 0);
                    doc.text(deptName, 20, yPosition);
                    yPosition += 10;
                    
                    const requestData = requests.map(request => {
                        const fromDate = new Date(request.fromDate);
                        const untilDate = new Date(request.untilDate);
                        const duration = Math.ceil((untilDate - fromDate) / (1000 * 60 * 60 * 24)) + 1;
                        const isApproved = (request.status || '').toLowerCase() === 'approved' ? 'Y' : 'N';
                        
                        return [
                            request.updatedDate ? new Date(request.updatedDate).toLocaleDateString() : new Date(request.fromDate).toLocaleDateString(),
                            request.lastName || 'Unknown',
                            request.firstName || 'Unknown',
                            request.leaveType || 'Unknown',
                            `${fromDate.toLocaleDateString()} - ${untilDate.toLocaleDateString()}`,
                            duration.toString(),
                            isApproved,
                            'N/A', // Balance after approval
                            (request.reason || 'No remarks').substring(0, 20) + '...'
                        ];
                    });
                    
                    doc.autoTable({
                        startY: yPosition,
                        head: [['Timestamp', 'Last Name', 'First Name', 'Type', 'Dates', 'Days', 'Approved', 'Balance', 'Remarks']],
                        body: requestData,
                        styles: { fontSize: 7 },
                        headStyles: { fillColor: [35, 133, 176], fontSize: 7 },
                        margin: { left: 5, right: 5 }
                    });
                    
                    yPosition = doc.lastAutoTable.finalY + 15;
                });
            }


            function setupEmployeeReportHandlers() {
                const employeeSelect = document.getElementById('employee-select');
                const reportTypeSelect = document.getElementById('employee-report-type');
                const startDateInput = document.getElementById('employee-start-date');
                const endDateInput = document.getElementById('employee-end-date');
                
                // Handle report type change to adjust date ranges
                if (reportTypeSelect) {
                    reportTypeSelect.addEventListener('change', function() {
                        const reportType = this.value;
                        const today = new Date();
                        
                        if (reportType === 'weekly') {
                            // Set current week
                            const currentWeekStart = new Date(today);
                            currentWeekStart.setDate(today.getDate() - today.getDay());
                            const currentWeekEnd = new Date(currentWeekStart);
                            currentWeekEnd.setDate(currentWeekStart.getDate() + 6);
                            
                            if (startDateInput) startDateInput.value = currentWeekStart.toISOString().split('T')[0];
                            if (endDateInput) endDateInput.value = currentWeekEnd.toISOString().split('T')[0];
                        } else if (reportType === 'monthly') {
                            // Set current month
                            const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
                            const lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 0);
                            
                            if (startDateInput) startDateInput.value = firstDay.toISOString().split('T')[0];
                            if (endDateInput) endDateInput.value = lastDay.toISOString().split('T')[0];
                        }
                    });
                }
                
                // Handle employee selection change
                if (employeeSelect) {
                    employeeSelect.addEventListener('change', function() {
                        const selectedEmployeeId = this.value;
                        const employeePreview = document.getElementById('employee-info-preview');
                        
                        if (selectedEmployeeId && employeePreview) {
                            // Show employee info preview (optional feature)
                            const selectedOption = this.options[this.selectedIndex];
                            const employeeName = selectedOption.textContent;
                            
                            employeePreview.innerHTML = `
                                <h6>Selected Employee</h6>
                                <div class="employee-info-grid">
                                    <div class="employee-info-item">
                                        <strong>Name:</strong> ${employeeName}
                                    </div>
                                </div>
                            `;
                            employeePreview.classList.add('show');
                        } else if (employeePreview) {
                            employeePreview.classList.remove('show');
                        }
                    });
                }
            }

            // Original functionality from your template
            document.querySelectorAll('.action-required-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const mrfId = this.getAttribute('data-mrfid');
                    window.location.href = `/hr/view-mrf/${mrfId}`;  // Redirect to the MRF page
                });
            });

            // Toggle active class for sidebar links
            document.querySelectorAll('.sidebar ul li a').forEach(link => {
                link.addEventListener('click', function() {
                    document.querySelectorAll('.sidebar ul li a').forEach(link => link.classList.remove('active'));
                    this.classList.add('active');
                });
            });

            // Toggle collapsible content
            document.querySelectorAll('.collapsible-header').forEach(header => {
                header.addEventListener('click', function() {
                    var content = this.nextElementSibling;
                    if (content.style.display === 'block') {
                        content.style.display = 'none';
                    } else {
                        // Hide all other collapsible contents
                        document.querySelectorAll('.collapsible-content').forEach(item => {
                            if (item !== content) {
                                item.style.display = 'none';
                            }
                        });
                        content.style.display = 'block';
                    }
                });
            });
        </script>
    </div>
</body>
</html>