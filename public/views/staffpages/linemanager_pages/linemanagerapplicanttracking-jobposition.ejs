<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Applicant Tracker - Job Position</title>
    <link rel="stylesheet" href="/css/sidebar.css"> <!-- Linking Sidebar CSS -->
    <link rel="stylesheet" href="/css/linemanager.css"> <!-- Linking Main Content CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"> <!-- FontAwesome for icons -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <style>
/* Main Layout Styles */
body {
    font-family: 'Inter', sans-serif;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

.main-content {
    margin-left: 350px;
    padding: 20px;
    width: calc(100% - 350px);
    background-color: #FFFFFF;
}

/* Header Styles */
.header-section {
    margin-bottom: 10px;
    margin-left: 5px;
    font-size: 24px;
    text-align: left;
}

.subheader {
    font-size: 20px;
    margin-left: 5px;
    margin-bottom: 20px;
    color: #555;
}

/* Filter Section Styles */
.filter-section {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.right-section {
    display: flex;
    gap: 10px;
    margin-bottom: 15px;
}

.right-section button, 
.filter-button {
    padding: 10px 15px;
    font-size: 16px;
    font-weight: bold;
    border: none;
    background-color: #124A5C;
    color: white;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.right-section button:hover, 
.filter-button:hover {
    background-color: #B4E3E3;
    color: #124A5C;
}

.filter-button.active {
    background-color: #07ACB9;
    color: white;
}

/* Search Container Styles */
.search-container {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
}

.search-bar {
    padding: 8px;
    width: 370px;
    font-size: 16px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.search-button {
    margin-left: 10px;
    background-color: #124A5C;
    color: white;
    border: none;
    padding: 10px;
    cursor: pointer;
    font-size: 16px;
    border-radius: 4px;
}

.search-button:hover {
    background-color: #B4E3E3;
    color: #124A5C;
}

/* Divider Style */
.divider {
    height: 2px;
    background-color: #124A5C;
    margin: 10px 0;
}

/* Sort Section Styles */
.sort-section {
    display: flex;
    align-items: center;
    margin: 10px 0;
}

.sort-section label {
    margin-right: 10px;
    font-weight: bold;
}

.sort-section select {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: white;
}

/* Table Styles */
.tracking-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
}

.tracking-table th, 
.tracking-table td {
    padding: 10px;
    border: 1px solid #ddd;
    text-align: left;
}

.tracking-table th {
    background-color: #f5f5f5;
    font-weight: bold;
}

.tracking-table th:nth-child(1),
.tracking-table td:nth-child(1) {
    width: 10%;
}

.tracking-table th:nth-child(2),
.tracking-table td:nth-child(2) {
    width: 20%;
}

.tracking-table th:nth-child(3),
.tracking-table td:nth-child(3),
.tracking-table th:nth-child(4),
.tracking-table td:nth-child(4) {
    width: 15%;
}

.tracking-table tr:hover {
    background-color: #f1f1f1;
}

/* Status Circle Styles */
.status-circle {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    display: inline-block;
    margin-right: 8px;
}

.status-circle.green {
    background-color: green;
}

.status-circle.gray {
    background-color: gray;
}

/* Button Styles */
.btn-review, 
.btn-evaluation, 
.btn-onboarding, 
.btn-approve {
    background-color: white;
    color: black;
    border: 1px solid #124A5C;
    padding: 10px 20px;
    cursor: pointer;
    border-radius: 5px;
    font-size: 14px;
    transition: background-color 0.3s ease, color 0.3s ease;
    min-width: 150px;
    text-align: center;
    margin-top: 5px;
}

.btn-review:hover, 
.btn-evaluation:hover, 
.btn-onboarding:hover, 
.btn-approve:hover {
    background-color: #124A5C;
    color: white;
}

.set-interview-button {
    padding: 10px 20px;
    background-color: #124A5C;
    color: white;
    border: none;
    cursor: pointer;
    font-size: 16px;
    margin-top: 20px;
    display: block;
    width: 20%;
    text-align: center;
    border-radius: 5px;
}

.set-interview-button:hover {
    background-color: #B4E3E3;
    color: #124A5C;
}

.set-finalize-review-button {
    margin: 5px 10px;
    background-color: #124A5C;
    color: white;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
    border-radius: 5px;
    width: auto;
    min-width: 200px;
    white-space: nowrap;
    text-align: center;
    font-size: 16px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: background-color 0.3s ease;
}

.set-finalize-review-button:hover {
    background-color: #B4E3E3;
    color: #124A5C;
}

.finalize-container {
    display: flex;
    flex-direction: column;
    position: fixed;
    bottom: 20px;
    right: 20px;
    background-color: rgba(255, 255, 255, 0.9);
    border: 1px solid #ccc;
    padding: 10px;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    z-index: 1000;
}

/* Modal Styles */
.modal, .review-modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.4);
}

.modal-content, .review-modal-content {
    background-color: #fefefe;
    margin: 10% auto;
    padding: 20px;
    border: 1px solid #888;
    border-radius: 8px;
    width: 50%;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    text-align: center;
}

.close-button, .review-close-button {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
}

.close-button:hover,
.close-button:focus,
.review-close-button:hover,
.review-close-button:focus {
    color: black;
    text-decoration: none;
}

.modal-header, 
.modal-body, 
.modal-footer {
    text-align: center;
}

.modal-buttons, .review-modal-buttons {
    display: flex;
    justify-content: center;
    margin-top: 20px;
    gap: 10px;
}

.modal-buttons button, 
.review-modal-buttons button {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s ease;
}

.back-button, .review-modal-back-button {
    background-color: rgba(18, 74, 92, 0.5);
    color: white;
}

.confirm-button, .review-modal-pass-button {
    background-color: #124A5C;
    color: white;
}

.review-modal-reject-button {
    background-color: #dc3545;
    color: white;
}

.modal-buttons button:hover, 
.review-modal-buttons button:hover {
    opacity: 0.8;
}

.modal-question {
    text-align: center;
    margin: 20px 0;
    font-size: 16px;
}

/* Decision Disclaimer */
.decision-disclaimer {
    background-color: #f8f9fa;
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 10px;
    margin: 15px 0;
    text-align: left;
    font-size: 14px;
}

/* Scores Table Styles */
.scores-table {
    width: 100%;
    border-collapse: collapse;
    margin: 15px 0;
}

.scores-table th, 
.scores-table td {
    padding: 8px;
    border: 1px solid #ddd;
    text-align: left;
}

.scores-table th {
    background-color: #f5f5f5;
}

.computation-verdict {
    margin: 15px 0;
    padding: 10px;
    background-color: #e9f7fe;
    border-radius: 5px;
    text-align: center;
    font-size: 16px;
}

/* Styling for applicant status section */
.applicant-status-section {
    background-color: #FFFFFF;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    margin: 10px 5px 20px;
    display: none; /* Hidden by default */
}

/* Improved heading visibility */
.applicant-status-section h3.subheader {
    color: #124A5C;
    margin-bottom: 15px;
    font-size: 20px;
    font-weight: bold;
}
/* CSS to fix the header layout */
/* Enhanced CSS for section header and divider */
.applicant-status-section .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0; /* Remove bottom margin to place divider closer */
    width: 100%;
}

.applicant-status-section .section-header h3.subheader {
    margin: 0;
    color: #124A5C;
    font-weight: bold;
}

.applicant-status-section .right-section {
    display: flex;
    gap: 10px;
}

.applicant-status-section .right-section button {
    padding: 10px 15px;
    font-size: 16px;
    font-weight: bold;
    border: none;
    background-color: #124A5C;
    color: white;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.applicant-status-section .right-section button:hover {
    background-color: #B4E3E3;
    color: #124A5C;
}

/* Improved divider styles */
.applicant-status-section .divider {
    height: 2px;
    background-color: #124A5C;
    margin: 15px 0;
    width: 100%;
    display: block;
    clear: both;
}
/* Filter button styling */
.filter-button {
    padding: 10px 15px;
    font-size: 15px;
    font-weight: bold;
    border: none;
    background-color: #124A5C;
    color: white;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    min-width: 130px;
}

.filter-button:hover {
    background-color: #0d3a47;
}

.filter-button.active {
    background-color: #07ACB9;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

/* Make buttons in last column more prominent */
.btn-review, 
.btn-evaluation, 
.btn-onboarding, 
.btn-approve {
    background-color: white;
    color: #124A5C;
    border: 1px solid #124A5C;
    padding: 8px 15px;
    cursor: pointer;
    border-radius: 5px;
    font-size: 14px;
    font-weight: bold;
    transition: background-color 0.3s ease, color 0.3s ease;
    min-width: 120px;
    display: inline-block;
    text-align: center;
    margin-top: 5px;
}

.btn-review:hover, 
.btn-evaluation:hover, 
.btn-onboarding:hover, 
.btn-approve:hover {
    background-color: #124A5C;
    color: white;
}

/* Improved table styles */
.tracking-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.tracking-table th {
    background-color: #f5f5f5;
    color: #124A5C;
    font-weight: bold;
    padding: 12px 10px;
    border: 1px solid #ddd;
    text-align: left;
}

.tracking-table td {
    padding: 12px 10px;
    border: 1px solid #ddd;
    vertical-align: middle;
}

/* Better positioning of buttons in the last column */
.tracking-table td:last-child {
    position: relative;
}

.tracking-table td:last-child span {
    display: block;
    margin-bottom: 10px;
}

.tracking-table td:last-child div {
    text-align: right;
}

/* Sort section styling */
.sort-section {
    display: flex;
    align-items: center;
    margin: 10px 0;
}

.sort-section label {
    margin-right: 10px;
    font-weight: bold;
}

.sort-section select {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: white;
    min-width: 180px;
}

/* Additional Helper Classes */
.text-center {
    text-align: center;
}

.mt-10 {
    margin-top: 10px;
}

.mb-10 {
    margin-bottom: 10px;
}

/* Responsive adjustments */
@media (max-width: 1200px) {
    .main-content {
        margin-left: 250px;
        width: calc(100% - 250px);
    }
    
    .set-interview-button {
        width: 30%;
    }
}

@media (max-width: 768px) {
    .main-content {
        margin-left: 0;
        width: 100%;
    }
    
    .filter-section {
        flex-direction: column;
    }
    
    .search-bar {
        width: 100%;
    }
    
    .modal-content, .review-modal-content {
        width: 90%;
    }
    
    .set-interview-button {
        width: 100%;
    }

    .btn-toggle-status {
        padding: 6px 12px;
        background-color: #6c757d;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
    }
    
    .btn-toggle-status:hover {
        background-color: #5a6268;
    }
    
    .btn-toggle-status.status-passed {
        background-color: #28a745;
    }
    
    .btn-toggle-status.status-failed {
        background-color: #dc3545;
    }


/* Styling for no data message */
.no-data-message {
    padding: 20px;
    background-color: #f8f9fa;
    border-left: 4px solid #07ACB9;
    color: #555;
    font-size: 16px;
    font-style: italic;
}
.no-data-message p {
    margin: 0;
}


/* Improved table empty state */
table.tracking-table tbody:empty::after {
    content: "No data available";
    display: block;
    text-align: center;
    padding: 20px;
    color: #6c757d;
    font-style: italic;
}
}
    </style>
</head>
<body>

<%- include('../../partials/linemanager_partials') %>

<!-- Main Content Section -->
<div class="main-content">

    <!-- Header Section -->
    <div class="header-section">
        <h2>Applicant Tracking</h2>
        <% if (applicants && applicants.length > 0) { %>
          <div class="subheader">
            <%= applicants[0].jobTitle %>
          </div>
        <% } else { %>
          <p>No applicant found.</p>
        <% } %>
    </div>
      
    <!-- Filter Buttons Section -->
    <div class="filter-section">
        <div class="right-section">
            <button id="filter-all" class="filter-button active">All</button>
            <button id="filter-forreview" class="filter-button">For Review</button>
            <button id="filter-forevaluation" class="filter-button">For Evaluation</button>
            <button id="filter-foronboarding" class="filter-button">For Onboarding</button>
        </div>
        <div class="search-container">
            <input type="text" id="searchBar" class="search-bar" placeholder="Search...">
            <button class="search-button">Search</button>
        </div>
    </div>


    <!-- Updated Applicant Status Section with fixed header layout and divider -->
<div class="applicant-status-section" id="applicantStatusSection">
    <!-- Header section with flexbox -->
    <div class="section-header">
        <h3 class="subheader">List of Applicants on <span id="currentPhase">Review</span></h3>
        <div class="right-section">
            <button id="notifyAllApplicants">Notify All Applicants</button>
        </div>
    </div>
    <!-- Divider placed immediately after the section-header -->
    <div class="divider"></div>
    
    <h4>Awaiting for Action</h4>
    <table class="tracking-table" id="awaitingActionTable">
        <thead>
            <tr>
                <th>Applicant No.</th>
                <th>Last Name, First Name</th>
                <th>Department</th>
                <th>Position Applied</th>
                <th>Total Score</th>
                <th>Applicant Status</th>
            </tr>
        </thead>
        <tbody>
            <!-- Will be populated dynamically -->
        </tbody>
    </table>

    <h4>Applicants on <span id="currentPhase">Review</span> Declared Results</h4>
    <div class="sort-section">
        <label for="sortOptions">Sort By:</label>
        <select id="sortOptions">
            <option value="ascending">Ranking - Ascending</option>
            <option value="descending">Ranking - Descending</option>
            <option value="alphabetical">Alphabetically</option>
        </select>
    </div>
    <table class="tracking-table" id="declaredResultsTable">
        <thead>
            <tr>
                <th>Applicant No.</th>
                <th>Last Name, First Name</th>
                <th>Department</th>
                <th>Position Applied</th>
                <th>Total Score</th>
                <th>Applicant Status</th>
            </tr>
        </thead>
        <tbody>
            <!-- Will be populated dynamically -->
        </tbody>
    </table>
    <!-- Job Offer Sent section will be created dynamically when needed -->
</div>

    <!-- Table for Applicant Data (shown by default) -->
    <table class="tracking-table" id="mainApplicantTable" style="width: 100%; margin-bottom: 20px; border-collapse: collapse;">
        <thead>
            <tr>
                <th>Applicant No.</th>
                <th>Last Name, First Name</th>
                <th>Department</th>
                <th>Position Applied</th>
                <th>Applicant Status & Actions</th>
            </tr>
        </thead>
        <tbody>
            <% if (applicants && applicants.length) { %>
                <% applicants.forEach((applicant, index) => { %>
                    <tr class="applicant-row" data-phase="<%= applicant.applicantStatus.startsWith('P1') ? 'P1' : applicant.applicantStatus.startsWith('P2') ? 'P2' : applicant.applicantStatus.startsWith('P3') ? 'P3' : 'other' %>" data-status="<%= applicant.applicantStatus %>">
                        <td><%= index + 1 %></td>
                        <td>
                            <%= applicant.lastName %>, <%= applicant.firstName %>
                            <br>
                            <small style="color: #555;"><%= applicant.userEmail || 'Email not available' %></small>
                        </td>
                        
                        <td><%= applicant.deptName %></td> <!-- Display department name -->
                        <td><%= applicant.jobTitle %></td> <!-- Display job title -->
                        <td>
                            <!-- Display Applicant Status -->
                            <span><strong>Status:</strong> <%= applicant.applicantStatus || 'Pending' %></span>
                            <div style="margin-top: 10px;">
                                <% if (applicant.applicantStatus.startsWith('P1 - Awaiting for Line Manager Action; HR PASSED')) { %>
                                    <!-- For Review Button -->
                                    <button 
                                        class="btn-review" 
                                        onclick="lineManagerInitialScreeningModal(
                                              '<%= applicant.userId %>', 
                                            '<%= applicant.lastName %>', 
                                            '<%= applicant.firstName %>', 
                                            '<%= applicant.birthDate %>', 
                                            '<%= applicant.userEmail %>', 
                                            '<%= applicant.phoneNo %>', 
                                            {
                                                degree: '<%= applicant.initialScreeningAssessment.degreeScore %>',
                                                experience: '<%= applicant.initialScreeningAssessment.experienceScore %>',
                                                certifications: '<%= applicant.initialScreeningAssessment.certificationScore %>',
                                                hardSkills: '<%= applicant.initialScreeningAssessment.hardSkillsScore %>',
                                                softSkills: '<%= applicant.initialScreeningAssessment.softSkillsScore %>',
                                                workSetup: '<%= applicant.initialScreeningAssessment.workSetupScore %>',
                                                availability: '<%= applicant.initialScreeningAssessment.availabilityScore %>'
                                            }, 
                                            '<%= applicant.initialScreeningAssessment.totalScore %>', 
                                            '<%= applicant.initialScreeningAssessment.degree_url %>',
                                            '<%= applicant.initialScreeningAssessment.cert_url %>',
                                            '<%= applicant.initialScreeningAssessment.resume_url %>'
                                        )
                                    ">
                                    For Review
                                    </button>
                                <% } else if (applicant.applicantStatus === 'P2 - Awaiting for HR Evaluation') { %>
                                    <!-- For Evaluation Button -->
                                    <a href="/hr/evaluation-form/<%= applicant.applicantId %>">
                                        <button class="btn-evaluation">For Evaluation</button>
                                    </a>
                                <% } else if (applicant.applicantStatus.startsWith('P1 - Awaiting for Line Manager Action')) { %>
                                    <!-- Approve Button for Line Manager Action -->
                                    <button 
                                        class="btn-approve" 
                                        onclick="approveLineManager('<%= applicant.applicantId %>')">
                                        Approve
                                    </button>
                                <% } else if (applicant.applicantStatus === 'P3 - Awaiting for Line Manager Evaluation') { %>
                                    <!-- For Evaluation Button -->
                                    <a href="/linemanager/evaluation-form/<%= applicant.applicantId %>">
                                        <button class="btn-evaluation">For Evaluation</button>
                                    </a>
                                <% } else if (applicant.applicantStatus === 'P3 - Line Manager Evaluation Accomplished') { %>
                                    <!-- For Review Button -->
                                    <button 
                                        class="btn-review" 
                                        onclick="openModal('releaseJobOfferModal', '<%= applicant.lastName %>, <%= applicant.firstName %>')">
                                        For Review
                                    </button>
                                <% } %>
                            </div>
                        </td>   
                    </tr>
                <% }); %>
            <% } else { %>
                <tr>
                    <td colspan="5">No applicants found.</td>
                </tr>
            <% } %>
        </tbody>
    </table>

    <h2 class="header-section" id="onboardingHeader" style="margin-top: 30px; margin-bottom: 10px;">Onboarding</h2>

    <table class="tracking-table" id="onboardingTable" style="width: 100%; border-collapse: collapse;">
        <thead>
            <tr>
                <th>Application No.</th>
                <th>Last Name, First Name</th>
                <th>Department</th>
                <th>Position Applied</th>
                <th>Application Status & Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>APP00018</td>
                <td>William Scott<br>williamscott@gmail.com</td>
                <td>IT</td>
                <td>Data Analyst</td>
                <td>First Day Checklist Sent</td>
            </tr>
            <tr class="status-for-onboarding">
                <td>APP00019</td>
                <td>Grace Taylor<br>gracetaylor@gmail.com</td>
                <td>IT</td>
                <td>Data Analyst</td>
                <td>Checklist Accomplished <button class="btn-onboarding" onclick="openModal('accountSetupReminderModal')">For Onboarding</button></td>
            </tr>
            <tr>
                <td>APP00020</td>
                <td>Ella Martinez<br>ellamartinez@gmail.com</td>
                <td>IT</td>
                <td>Data Analyst</td>
                <td>Account Created</td>
            </tr>
        </tbody>
    </table>

    <button class="set-interview-button" onclick="setInterviewAvailabilities()">Set Interview Availabilities on Calendly</button>

    <!-- Modal for notifying applicants -->
<!-- Modal for finalizing review and notifying applicants -->
<div id="notifyApplicantsModal" class="modal">
    <div class="modal-content">
        <span class="close-button" onclick="closeModal('notifyApplicantsModal')">&times;</span>
        <h2>Confirm Finalization</h2>
        <p>You are about to finalize the review process and notify all applicants who were not selected that they have not advanced to the next stage. This action is irreversible. Are you sure you want to proceed?</p>
        <div class="modal-buttons">
            <button id="backButton" class="back-button" onclick="closeModal('notifyApplicantsModal')">Back</button>
            <button id="confirmButton" class="confirm-button">Confirm</button>
        </div>
    </div>
</div>
    <!-- Modal for P1: Finalize Review and Notify Applicants -->
    <div id="finalizeModalP1" class="modal">
        <div class="modal-content">
            <span class="close-button">&times;</span>
            <h2>Confirm Final Review and Notify Applicants</h2>
            <p>You are about to finalize the review process and notify all applicants who were not selected that they have not advanced to the next stage. This action is irreversible. Are you sure you want to proceed?</p>
            <div class="modal-buttons">
                <button id="backButtonP1" class="back-button">Back</button>
                <button id="confirmButtonP1" class="confirm-button">Confirm</button>
            </div>
        </div>
    </div>

    <!-- P1 - Line Manager Review Modal -->
    <div id="lineManagerInitialScreeningModalHtml" class="review-modal">
        <div class="review-modal-content">
            <span class="review-close-button">&times;</span>
            <h2>P1: Initial Screening Score Breakdown</h2> 
            <div class="divider"></div>
            <div class="applicant-details">
                <input type="hidden" id="userId">
                <input type="hidden" id="jobId">            
                <input type="hidden" id="applicantId">

                <p><strong>Name:</strong> <span id="applicant-name"></span></p>
                <p><strong>Birthday:</strong> <span id="applicant-birthday"></span></p>
                <p><strong>Email:</strong> <span id="applicant-email"></span></p>
                <p><strong>Contact No.:</strong> <span id="applicant-contact"></span></p>
            </div>

            <h4>HR Online Assessment Form Breakdown</h4>
            <h4>Initial Screening Scores</h4> 

            <table class="scores-table"> 
                <thead> 
                    <tr> 
                        <th>Criteria</th> 
                        <th>Score</th> 
                    </tr> 
                </thead> 
                <tbody> 
                    <tr> 
                        <td>Industry Specific Degree</td> 
                        <td id="score-degree"></td> 
                    </tr> 
                    <tr> 
                        <td>Experiences</td> 
                        <td id="score-experience"></td> 
                    </tr> 
                    <tr> 
                        <td>Certifications</td> 
                        <td id="score-certifications"></td> 
                    </tr> 
                    <tr> 
                        <td>Hard Skills</td> 
                        <td id="score-hard-skills"></td> 
                    </tr> 
                    <tr> 
                        <td>Soft Skills</td> 
                        <td id="score-soft-skills"></td> 
                    </tr> 
                    <tr> 
                        <td>Work Setup</td> 
                        <td id="score-work-setup"></td> 
                    </tr> 
                    <tr> 
                        <td>Availability</td> 
                        <td id="score-availability"></td> 
                    </tr> 
                </tbody> 
            </table> 

            <div class="computation-verdict"> 
                <strong>Computation Verdict - <span id="computation-verdict"></span></strong> 
            </div> 

            <h4>Uploaded Documents</h4>
            <p><strong>Degree:</strong> <a id="degree-doc" href="#" target="_blank">No document uploaded</a></p>
            <div id="degree-preview" style="margin-top: 10px;"></div>
            
            <p><strong>Certification:</strong> <a id="cert-doc" href="#" target="_blank">No document uploaded</a></p>
            <div id="cert-preview" style="margin-top: 10px;"></div>
            
            <p><strong>Resume:</strong> <a id="resume-doc" href="#" target="_blank">No document uploaded</a></p>
            <div id="resume-preview" style="margin-top: 10px;"></div>
            
            
            <h4>Decision</h4>
            <p>
                <strong>Would you like to pass or reject this applicant for the HR interview?</strong>
            </p>

            <div class="decision-disclaimer">
                <p>💡 <strong>Important:</strong> Pressing <strong>"Pass"</strong> will mark the applicant as likely to proceed to the HR interview stage, but this decision can still be changed before finalizing. Likewise, pressing <strong>"Reject"</strong> will mark the applicant as failed, but this can also be modified until the finalization step.</p>
                <p>⚠️ <strong>Finalization Note:</strong> Once you press "Finalize," all passed and failed applicants will be officially informed of their status. Please double-check before proceeding.</p>
            </div>

            <div class="review-modal-buttons">
                <button id="backButton" class="review-modal-back-button">Back</button>
                <button id="rejectButton" class="review-modal-reject-button" onclick="rejectApplicant()">Reject</button>
                <button id="passButton" class="review-modal-pass-button" onclick="passApplicant()">Pass</button>
            </div>
        </div>
    </div>

    <!-- Modal for P2: Finalize Review and Notify Applicants -->
    <div id="finalizeModalP2" class="modal">
        <div class="modal-content">
            <span class="close-button">&times;</span>
            <h2>Confirm Final Review and Notify Applicants</h2>
            <p>You are about to finalize the review process and notify all applicants who were not selected that they have not advanced to the next stage. This action is irreversible. Are you sure you want to proceed?</p>
            <div class="modal-buttons">
                <button id="backButtonP2" class="back-button">Back</button>
                <button id="confirmButtonP2" class="confirm-button">Confirm</button>
            </div>
        </div>
    </div>

    <!-- Modal for P3: Finalize Review and Notify Applicants -->
    <div id="finalizeModalP3" class="modal">
        <div class="modal-content">
            <span class="close-button">&times;</span>
            <h2>Confirm Final Review and Notify Applicants</h2>
            <p>You are about to finalize the review process and notify all applicants who were not selected that they have not advanced to the next stage. This action is irreversible. Are you sure you want to proceed?</p>
            <div class="modal-buttons">
                <button id="backButtonP3" class="back-button">Back</button>
                <button id="confirmButtonP3" class="confirm-button">Confirm</button>
            </div>
        </div>
    </div>

    <!-- Other modals for account setup, job offers, etc. -->
    <div id="releaseJobOfferModal" class="modal">
        <div class="modal-content">
            <span class="close-button" onclick="closeModal('releaseJobOfferModal')">&times;</span>
            <h2 style="color: #07ACB9;" id="applicant-name-job-offer">Name</h2>
            <p><strong>Age:</strong> <span id="applicant-age-job-offer">Text</span></p>
            <p><strong>Email:</strong> <span id="applicant-email-job-offer">Text</span></p>
            <p><strong>Contact No:</strong> <span id="applicant-contact-job-offer">Text</span></p>
            
            <div class="divider"></div>
            
            <h3>Panel Assessment Form Breakdown</h3>
            <p>[INSERT SUBMITTED FORM HERE]</p>
            
            <div class="modal-question">
                <p><strong>Would you like to release the job offer and notify the applicant they are being considered for hiring?</strong></p>
            </div>
            
            <div class="modal-buttons">
                <button id="backButton" onclick="closeModal('releaseJobOfferModal')">Back</button>
                <button id="confirmButton" onclick="sendNotification()">Notify Applicant</button>
            </div>
        </div>
    </div>

    <!-- Modal for Moving Applicant for Onboarding -->
    <div id="moveToOnboardingModal" class="modal">
        <div class="modal-content">
            <span class="close-button" onclick="closeModal('moveToOnboardingModal')">&times;</span>
            <h1>Job Offer Confirmation</h1>
            
            <h2><strong>Applicant Personal Information</strong></h2>
            <h3><strong id="applicant-name-onboarding">Name</strong></h3>
            <p><strong>Age:</strong> <span id="applicant-age-onboarding">Text</span></p>
            <p><strong>Email:</strong> <span id="applicant-email-onboarding">Text</span></p>
            <p><strong>Contact No:</strong> <span id="applicant-contact-onboarding">Text</span></p>
            
            <div class="modal-question">
                <p><strong>Would you like to move this applicant for onboarding?</strong></p>
            </div>
            
            <div class="modal-buttons">
                <button id="backButton" onclick="closeModal('moveToOnboardingModal')">Back</button>
                <button id="confirmButton" onclick="confirmOnboarding()">Confirm</button>
            </div>
        </div>
    </div>

    <!-- Modal for Account Setup Creation Reminder -->
    <div id="accountSetupReminderModal" class="modal">
        <div class="modal-content">
            <span class="close-button" onclick="closeModal('accountSetupReminderModal')">&times;</span>
            <h1>Account Setup Creation Reminder</h1>
            
            <h2><strong>Applicant Personal Information</strong></h2>
            <h3><strong id="applicant-name-account">Name</strong></h3>
            <p><strong>Age:</strong> <span id="applicant-age-account">Text</span></p>
            <p><strong>Email:</strong> <span id="applicant-email-account">Text</span></p>
            <p><strong>Contact No:</strong> <span id="applicant-contact-account">Text</span></p>
            
            <div class="modal-question">
                <p><strong>Have you created an account for the employee through the Manage Employees page and emailed them the account details?</strong></p>
            </div>
            
            <div class="modal-buttons">
                <button id="backButton" onclick="closeModal('accountSetupReminderModal')">Back</button>
                <button id="confirmButton" onclick="confirmAccountSetup()">Confirm</button>
            </div>
        </div>
    </div>
</div>

<script>

document.addEventListener("DOMContentLoaded", function() {
    // Add styling for toggle status buttons - can skip this since you already have CSS
    
    // Initialize global caches for scores and name mappings
    window.applicantsScores = {};
    window.applicantNameMapping = {};
    
    // Get references to filter buttons
    const filterAllButton = document.getElementById("filter-all");
    const filterForReviewButton = document.getElementById("filter-forreview");
    const filterForEvaluationButton = document.getElementById("filter-forevaluation");
    const filterForOnboardingButton = document.getElementById("filter-foronboarding");
    
    // Get references to sections and tables
    const applicantStatusSection = document.getElementById("applicantStatusSection");
    const awaitingActionTable = document.getElementById("awaitingActionTable");
    const declaredResultsTable = document.getElementById("declaredResultsTable");
    const notifyAllButton = document.getElementById("notifyAllApplicants");
    const sortOptions = document.getElementById("sortOptions");
    
    // Add event listeners for filter buttons
    if (filterAllButton) filterAllButton.addEventListener("click", () => filterRowsByStatus("all"));
    if (filterForReviewButton) filterForReviewButton.addEventListener("click", () => filterRowsByStatus("forreview"));
    if (filterForEvaluationButton) filterForEvaluationButton.addEventListener("click", () => filterRowsByStatus("forevaluation"));
    if (filterForOnboardingButton) filterForOnboardingButton.addEventListener("click", () => filterRowsByStatus("foronboarding"));
    
    // Notify all applicants button functionality
    if (notifyAllButton) {
        notifyAllButton.addEventListener("click", function() {
            const currentPhase = document.querySelector("#currentPhase").textContent;
            
            if (checkAllApplicantsMarked()) {
                openModal('notifyApplicantsModal');
            } else {
                alert(`Not all applicants in ${currentPhase} have been marked as passed or failed. Please make a decision first.`);
            }
        });
    }
    
    // Sort options change event
    if (sortOptions) {
        sortOptions.addEventListener("change", function() {
            sortDeclaredResults(this.value);
        });
    }
    
    // Setup the search functionality
    const searchBar = document.getElementById("searchBar");
    const searchButton = document.querySelector(".search-button");
    
    if (searchBar && searchButton) {
        // Search button click event
        searchButton.addEventListener("click", filterTable);
        
        // Enter key press in search bar
        searchBar.addEventListener("keypress", function(e) {
            if (e.key === "Enter") {
                e.preventDefault();
                filterTable();
            }
        });
    }
    
    // Setup modal event listeners
    setupModalEventListeners();
    
    // Ensure all tables have proper headers
    ensureTableHeaders();
    
    // Fix the header structure
    fixHeaderStructure();
    
    // Capture applicant data early to ensure we have scores ready
    captureApplicantsDataEnhanced();
    
    // Close modal when the close button is clicked
    const closeButton = document.querySelector('.review-close-button');
    if (closeButton) {
        closeButton.addEventListener('click', function () {
            document.getElementById('lineManagerInitialScreeningModalHtml').style.display = 'none';
        });
    }
    
    // Close modal if clicked outside the modal content
    window.addEventListener('click', function (event) {
        const modal = document.getElementById('lineManagerInitialScreeningModalHtml');
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });
    
    // Start with "All" filter by default
    // Trigger the first filter to ensure correct data display
    setTimeout(() => {
        filterRowsByStatus("all");
        
        // After everything is set up, run one initial fix
        setTimeout(fixAllTableScores, 500);
        
        // Setup toggle status buttons after tables are populated
        setTimeout(setupToggleStatusButtons, 800);
        
        // Final fix for declared results table scores
        setTimeout(fixScoresInDeclaredResults, 1000);
    }, 200);
});

// Function to fix all scores in all tables
function fixAllTableScores() {
    // First, make sure we've captured all available data
    captureApplicantsDataEnhanced();
    
    const tables = [
        document.getElementById('awaitingActionTable'),
        document.getElementById('declaredResultsTable'),
        document.getElementById('jobOfferTable')
    ].filter(table => table !== null);
    
    tables.forEach(table => {
        const rows = table.querySelectorAll('tbody tr:not(.section-header-row)');
        console.log(`Fixing scores for ${rows.length} rows in ${table.id}`);
        
        rows.forEach((row, idx) => {
            // Skip rows with no content or message rows
            if (row.querySelector('td[colspan]')) return;
            
            // Try to get userId from the row attribute
            let userId = row.getAttribute('data-userid');
            
            if (!userId) {
                // Try to find userId by name
                const nameCell = row.querySelector('td:nth-child(2)');
                if (nameCell) {
                    const name = nameCell.textContent.replace(/\s+/g, ' ').trim();
                    const foundUserId = findUserIdByNameImproved(name);
                    if (foundUserId) {
                        row.setAttribute('data-userid', foundUserId);
                        userId = foundUserId;
                    }
                }
            }
            
            if (userId) {
                // When we have a userId, use the aggressive score fetch method
                forceDatabaseScoreFetch(userId, row);
            }
        });
    });
    
    console.log("All table scores have been fixed");
}

// CRITICAL FIX: More precise extraction of userId and score pairings
function captureApplicantsDataEnhanced() {
    console.log("Enhanced capture of all applicants data with improved user-specific score tracking");
    
    // Initialize the global caches if they don't exist
    window.applicantsScores = window.applicantsScores || {};
    window.applicantNameMapping = window.applicantNameMapping || {};
    
    // Get the main table where all applicant data is displayed
    const mainTable = document.getElementById('mainApplicantTable');
    if (!mainTable) {
        console.log("Main table not found");
        return;
    }
    
    // Process all rows in the main table
    const rows = mainTable.querySelectorAll('tbody tr');
    
    rows.forEach((row, idx) => {
        // Get the name for mapping
        const nameCell = row.querySelector('td:nth-child(2)');
        const applicantName = nameCell ? nameCell.textContent.replace(/\s+/g, ' ').trim() : '';
        
        // Extract userId and score from review buttons
        const reviewButton = row.querySelector('.btn-review');
        if (reviewButton) {
            const onclickAttr = reviewButton.getAttribute('onclick') || '';
            
            if (onclickAttr.includes('lineManagerInitialScreeningModal')) {
                try {
                    // Extract userId from the first parameter
                    const userIdMatch = onclickAttr.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
                    if (userIdMatch && userIdMatch[1]) {
                        const userId = userIdMatch[1];
                        
                        // Store name to userId mapping
                        if (applicantName) {
                            window.applicantNameMapping[applicantName] = userId;
                        }
                        
                        // Extract totalScore - it's the parameter after the closing curly brace }
                        // This is the applicant_initialscreening_assessment.totalScore value
                        const scoreMatch = onclickAttr.match(/},\s*['"]([^'"]*)['"]/);
                        if (scoreMatch && scoreMatch[1]) {
                            const totalScore = scoreMatch[1];
                            
                            // Store in score cache with userId as key
                            window.applicantsScores[userId] = totalScore;
                            console.log(`Row ${idx+1}: Stored score ${totalScore} for userId ${userId}, name ${applicantName}`);
                        } else {
                            console.log(`Row ${idx+1}: No score found in onclick attribute for userId ${userId}`);
                        }
                    }
                } catch (error) {
                    console.error(`Error processing row ${idx+1}:`, error);
                }
            }
        }
    });
    
    console.log(`Enhanced capture completed: Found ${Object.keys(window.applicantsScores).length} user-specific scores`);
}

// Function to filter table rows based on search input
function filterTable() {
    const searchBar = document.getElementById("searchBar");
    if (!searchBar) return;
    
    const searchValue = searchBar.value.toLowerCase();
    const rows = document.querySelectorAll('.tracking-table tbody tr');
    
    rows.forEach(row => {
        // Skip header rows
        if (row.classList.contains('section-header-row')) return;
        
        const rowText = Array.from(row.querySelectorAll('td'))
            .map(cell => cell.textContent.toLowerCase())
            .join(' ');
            
        row.style.display = rowText.includes(searchValue) ? '' : 'none';
    });
}

// Function to check if all applicants in the current phase have been marked
function checkAllApplicantsMarked() {
    const awaitingActionTable = document.getElementById("awaitingActionTable");
    if (!awaitingActionTable) return true;
    
    const rows = awaitingActionTable.querySelectorAll('tbody tr');
    if (rows.length === 0) return true; // No rows to check
    
    // Check each row for PASSED/FAILED status
    return Array.from(rows).every(row => {
        // Skip section header rows or message rows
        if (row.classList.contains('section-header-row') || row.querySelector('td[colspan="5"]') || row.querySelector('td[colspan="6"]') || row.querySelector('td[colspan="7"]')) {
            return true;
        }
        
        const statusCell = row.querySelector('td:last-child');
        if (!statusCell) return true;
        
        const statusText = statusCell.textContent;
        return statusText.indexOf('PASSED') !== -1 || statusText.indexOf('FAILED') !== -1;
    });
}

// Function to ensure all tables have the right headers
function ensureTableHeaders() {
    // Get all tables that need headers
    const tables = [
        document.getElementById('awaitingActionTable'),
        document.getElementById('declaredResultsTable'),
        document.getElementById('jobOfferTable')
    ].filter(table => table !== null);
    
    tables.forEach(table => {
        // Check if table has header
        const thead = table.querySelector('thead');
        if (!thead || !thead.querySelector('tr th')) {
            // Create header if it doesn't exist
            const newThead = document.createElement('thead');
            
            // Different headers based on table ID
            if (table.id === 'declaredResultsTable') {
                // Declared Results table gets Toggle Status column
                newThead.innerHTML = `
                    <tr>
                        <th>Applicant No.</th>
                        <th>Last Name, First Name</th>
                        <th>Department</th>
                        <th>Position Applied</th>
                        <th>Total Score</th>
                        <th>Work Setup/Availability</th>
                        <th>Applicant Status</th>
                        <th>Toggle Status</th>
                    </tr>
                `;
            } else {
                // Other tables (awaiting action, job offer) don't get Toggle Status
                newThead.innerHTML = `
                    <tr>
                        <th>Applicant No.</th>
                        <th>Last Name, First Name</th>
                        <th>Department</th>
                        <th>Position Applied</th>
                        <th>Total Score</th>
                        <th>Work Setup/Availability</th>
                        <th>Applicant Status</th>
                    </tr>
                `;
            }
            
            // Replace existing thead or add to beginning of table
            if (thead) {
                table.replaceChild(newThead, thead);
            } else {
                table.insertBefore(newThead, table.firstChild);
            }
        } else {
            // Check and update existing headers
            const headerRow = thead.querySelector('tr');
            const headers = headerRow.querySelectorAll('th');
            
            // Add the Work Setup/Availability column if it doesn't exist
            if (headers.length === 6 && !Array.from(headers).some(h => h.textContent.includes('Work Setup'))) {
                const newTh = document.createElement('th');
                newTh.textContent = 'Work Setup/Availability';
                
                // Insert before the last column (Applicant Status)
                headerRow.insertBefore(newTh, headers[5]);
            }
            
            // Only add Toggle Status to declared results table
            if (table.id === 'declaredResultsTable' && !Array.from(headers).some(h => h.textContent.includes('Toggle Status'))) {
                const toggleTh = document.createElement('th');
                toggleTh.textContent = 'Toggle Status';
                
                // Add as the last column
                headerRow.appendChild(toggleTh);
            }
        }
    });
}

// Function to create a table row with proper structure
function createTableRow(rowData, isForDeclaredResults = false) {
    const newRow = document.createElement('tr');
    
    // Add data-userid attribute if available
    if (rowData.userId) {
        newRow.setAttribute('data-userid', rowData.userId);
    }
    
    // Add criteria status data attribute
    newRow.setAttribute('data-criteria', rowData.criteriaStatus || 'unknown');
    
    // For each cell in the stored data, create a new td element
    rowData.cells.forEach(cellHTML => {
        const cell = document.createElement('td');
        cell.innerHTML = cellHTML;
        newRow.appendChild(cell);
    });
    
    // Only add Toggle Status column if this is for the declared results table
    if (isForDeclaredResults) {
        const toggleCell = document.createElement('td');
        toggleCell.innerHTML = `<button class="btn-toggle-status" onclick="toggleApplicantStatus(this)">Toggle Status</button>`;
        
        // If we have a userId, set it on the button for reference
        if (rowData.userId) {
            const toggleButton = toggleCell.querySelector('.btn-toggle-status');
            if (toggleButton) toggleButton.setAttribute('data-userid', rowData.userId);
        }
        
        newRow.appendChild(toggleCell);
    }
    
    return newRow;
}

// Function to find userId by name
function findUserIdByNameImproved(name) {
    if (!name) return null;
    
    // Clean up the name (remove newlines, extra spaces)
    const cleanName = name.replace(/\s+/g, ' ').trim();
    
    // Check if we already have a mapping
    if (window.applicantNameMapping && window.applicantNameMapping[cleanName]) {
        return window.applicantNameMapping[cleanName];
    }
    
    // Get the main table
    const mainTable = document.getElementById('mainApplicantTable');
    if (!mainTable) return null;
    
    // Search all rows
    const rows = mainTable.querySelectorAll('tbody tr');
    for (const row of rows) {
        const nameCell = row.querySelector('td:nth-child(2)');
        if (!nameCell) continue;
        
        const cellNameText = nameCell.textContent.replace(/\s+/g, ' ').trim();
        
        // Check for exact match first
        if (cellNameText === cleanName) {
            // Try to get userId from review button
            const reviewButton = row.querySelector('.btn-review');
            if (reviewButton) {
                const onclickAttr = reviewButton.getAttribute('onclick') || '';
                const userIdMatch = onclickAttr.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
                if (userIdMatch && userIdMatch[1]) {
                    // Save to mapping for future lookups
                    if (!window.applicantNameMapping) window.applicantNameMapping = {};
                    window.applicantNameMapping[cleanName] = userIdMatch[1];
                    
                    return userIdMatch[1];
                }
            }
        }
    }
    
    return null;
}
// Function to filter rows by status
function filterRowsByStatus(status) {
    console.log("Filtering by status:", status);
    
    // Get references to elements
    const mainTable = document.getElementById('mainApplicantTable');
    const onboardingTable = document.getElementById('onboardingTable');
    const onboardingHeader = document.getElementById('onboardingHeader');
    const applicantStatusSection = document.getElementById('applicantStatusSection');
    
    // Get all rows
    const allMainRows = mainTable ? Array.from(mainTable.querySelectorAll('tbody tr')) : [];
    const allOnboardingRows = onboardingTable ? Array.from(onboardingTable.querySelectorAll('tbody tr')) : [];
    
    // Hide/show applicant status section based on filter
    if (applicantStatusSection) {
        applicantStatusSection.style.display = (status === 'all') ? 'none' : 'block';
    }
    
    // "All" filter: Show everything in the main table
    if (status === 'all') {
        // Show all rows in main table
        allMainRows.forEach(row => row.style.display = '');
        
        // Show all rows in onboarding table
        allOnboardingRows.forEach(row => row.style.display = '');
        
        // Show onboarding section header
        if (onboardingHeader) onboardingHeader.style.display = '';
        
        // Show onboarding table
        if (onboardingTable) onboardingTable.style.display = '';
        
        // Highlight the active filter button
        highlightActiveFilter(status);
        return;
    }
    
    // Hide all rows in the main table by default
    allMainRows.forEach(row => row.style.display = 'none');
    
    // Special handling for "For Review" button
if (status === 'forreview') {
    // Hide onboarding section for review filter
    if (onboardingHeader) onboardingHeader.style.display = 'none';
    if (onboardingTable) onboardingTable.style.display = 'none';
    
    // Ensure we have the most up-to-date data
    captureApplicantsDataEnhanced();
    
    // Update the current phase
    const phaseSpans = document.querySelectorAll('#currentPhase');
    phaseSpans.forEach(span => span.textContent = "Review");
    
    // Ensure the tables have proper headers
    ensureTableHeaders();
    
    // Arrays to store rows from main table
    const awaitingRowsP1 = [];
    const declaredRowsP1 = [];
    const awaitingRowsP3 = [];
    const declaredRowsP3 = [];
    const jobOfferRowsP3 = [];
    
    // Process each row and categorize it
    allMainRows.forEach((row, index) => {
        const lastCell = row.querySelector('td:last-child');
        if (!lastCell) return;
        
        // Get status text from the span element in the last cell
        const statusSpan = lastCell.querySelector('span');
        if (!statusSpan) return;
        
        const statusText = statusSpan.textContent.trim();
        
        // Extract row data with proper score - enhanced to better extract userId
        const rowData = extractRowData(row, index);
        
        // Check for P1 - Awaiting for Line Manager Action; HR PASSED
        if (statusText.indexOf("P1 - Awaiting for Line Manager Action; HR PASSED") !== -1) {
            awaitingRowsP1.push(rowData);
        }
        // Check for P1 - PASSED or P1: PASSED
        else if (statusText.indexOf("P1 - PASSED") !== -1 || statusText.indexOf("P1: PASSED") !== -1) {
            declaredRowsP1.push(rowData);
        }
        // Check for P1 - FAILED or P1: FAILED
        else if (statusText.indexOf("P1 - FAILED") !== -1 || statusText.indexOf("P1: FAILED") !== -1) {
            declaredRowsP1.push(rowData);
        }
        // Check for P3 - Line Manager Evaluation Accomplished
        else if (statusText.indexOf("P3 - Line Manager Evaluation Accomplished") !== -1) {
            awaitingRowsP3.push(rowData);
        }
        // Check for P3 - PASSED or P3: PASSED (not Job Offer)
        else if ((statusText.indexOf("P3 - PASSED") !== -1 || statusText.indexOf("P3: PASSED") !== -1) && 
                 statusText.indexOf("Job Offer") === -1) {
            declaredRowsP3.push(rowData);
        }
        // Check for P3 - FAILED or P3: FAILED
        else if (statusText.indexOf("P3 - FAILED") !== -1 || statusText.indexOf("P3: FAILED") !== -1) {
            declaredRowsP3.push(rowData);
        }
        // Check for P3 - PASSED - Job Offer Sent
        else if (statusText.indexOf("P3 - PASSED - Job Offer Sent") !== -1) {
            jobOfferRowsP3.push(rowData);
        }
        // Check for "For Review" button as a fallback
        else {
            const hasReviewButton = Array.from(lastCell.querySelectorAll('button')).some(button => 
                button.textContent.trim() === 'For Review'
            );
            
            if (hasReviewButton) {
                if (statusText.indexOf("P1") !== -1) {
                    awaitingRowsP1.push(rowData);
                } else if (statusText.indexOf("P3") !== -1) {
                    awaitingRowsP3.push(rowData);
                }
            }
        }
    });
    
    // Update Awaiting Action table
    updateAwaitingActionTable(awaitingRowsP1, awaitingRowsP3);
    
    // Update Declared Results table
    updateDeclaredResultsTable(declaredRowsP1, declaredRowsP3);
    
    // Handle Job Offer section
    updateJobOfferSection(jobOfferRowsP3, applicantStatusSection);
    
    // Update section visibilities based on data presence
    updateReviewSectionsVisibility(
        awaitingRowsP1.length + awaitingRowsP3.length > 0,
        declaredRowsP1.length + declaredRowsP3.length > 0,
        jobOfferRowsP3.length > 0,
        awaitingRowsP1.length > 0,  // Has P1 data flag
        hasP3Data = awaitingRowsP3.length > 0   // Has P3 data flag
    );
    

    
    // Fix scores after a short delay to ensure tables have been populated
    setTimeout(window.fixAllTableScores, 300);
    
    // Highlight the active filter button
    highlightActiveFilter(status);

        // Update the header buttons based on data
        updateSectionHeaderButtons();

    return;
}
    
    // For "For Evaluation" button
    if (status === 'forevaluation') {
        // Hide onboarding section for evaluation filter
        if (onboardingHeader) onboardingHeader.style.display = 'none';
        if (onboardingTable) onboardingTable.style.display = 'none';
        
        // Update the current phase display
        const phaseSpans = document.querySelectorAll('#currentPhase');
        phaseSpans.forEach(span => span.textContent = 'Evaluation');
        
        // Show the applicant status section even if empty
        if (applicantStatusSection) {
            applicantStatusSection.style.display = 'block';
        }
        
        // Clear previous rows in both tables
        const awaitingActionTable = document.getElementById("awaitingActionTable");
        const declaredResultsTable = document.getElementById("declaredResultsTable");
        const declaredHeader = document.querySelector('h4:nth-of-type(2)');
        
        if (awaitingActionTable) {
            const tbody = awaitingActionTable.querySelector('tbody');
            if (tbody) tbody.innerHTML = '';
        }
        
        if (declaredResultsTable) {
            const tbody = declaredResultsTable.querySelector('tbody');
            if (tbody) tbody.innerHTML = '';
        }
        
        // Filter rows with "For Evaluation" button or specific status
        const evaluationRows = [];
        
        allMainRows.forEach((row, index) => {
            const lastCell = row.querySelector('td:last-child');
            if (!lastCell) return;
            
            // Check status text
            const statusSpan = lastCell.querySelector('span');
            if (!statusSpan) return;
            
            const statusText = statusSpan.textContent.trim();
            let matched = false;
            
            // Check for P2 and P3 evaluation statuses
            if (statusText.indexOf("P2 - Awaiting for HR Evaluation") !== -1 || 
                statusText.indexOf("P3 - Awaiting for Line Manager Evaluation") !== -1) {
                matched = true;
            }
            
            // If not matched by status, check for button
            if (!matched) {
                // Look for "For Evaluation" button
                const hasEvaluationButton = Array.from(lastCell.querySelectorAll('button')).some(button => 
                    button.textContent.trim() === 'For Evaluation'
                );
                
                // Also check for buttons inside anchor tags
                const hasEvaluationLinkButton = Array.from(lastCell.querySelectorAll('a')).some(a => {
                    const button = a.querySelector('button');
                    return button && button.textContent.trim() === 'For Evaluation';
                });
                
                if (hasEvaluationButton || hasEvaluationLinkButton) {
                    matched = true;
                }
            }
            
            if (matched) {
                evaluationRows.push(extractRowData(row, index));
            }
        });
        
        // Ensure the awaiting section and table are displayed
        const awaitingHeader = document.querySelector('h4:nth-of-type(1)');
        if (awaitingHeader) {
            awaitingHeader.textContent = 'Applicants Awaiting Evaluation';
            awaitingHeader.style.display = 'block';
        }
        
        if (awaitingActionTable) {
            awaitingActionTable.style.display = 'table';
        }
        
        // Ensure the tables have proper headers
        ensureTableHeaders();
        
        // Add rows to awaiting action table
        if (awaitingActionTable) {
            const tbody = awaitingActionTable.querySelector('tbody');
            if (tbody) {
                // Empty the tbody first
                tbody.innerHTML = '';
                
                if (evaluationRows.length > 0) {
                    evaluationRows.forEach((rowData, idx) => {
                        const newRow = createTableRow(rowData, false);  // No toggle for evaluation
                        tbody.appendChild(newRow);
                        
                        // Set userId attribute on the row for score lookup
                        if (rowData.userId) {
                            newRow.setAttribute('data-userid', rowData.userId);
                        }
                        
                        // Use actual score for this user
                        updateScoreCellWithFormatting(newRow, rowData.totalScore);
                    });
                } else {
                    tbody.innerHTML = `<tr><td colspan="7" class="text-center">No applicants awaiting evaluation.</td></tr>`;
                }
            }
        }
        
        // Hide declared results section as it's not needed for "For Evaluation"
        if (declaredHeader) {
            declaredHeader.style.display = 'none';
        }
        
        if (declaredResultsTable) {
            declaredResultsTable.style.display = 'none';
        }
        
        const sortSection = document.querySelector('.sort-section');
        if (sortSection) {
            sortSection.style.display = 'none';
        }
        
        // Fix scores after a short delay
        setTimeout(window.fixAllTableScores, 300);
        
        // Highlight the active filter button
        highlightActiveFilter(status);
        return;
    }
    
    // For "For Onboarding" filter - UPDATED VERSION
    if (status === 'foronboarding') {
        // Hide applicant status section for onboarding filter
        if (applicantStatusSection) {
            applicantStatusSection.style.display = 'none';
        }
        
        // Show onboarding section header
        if (onboardingHeader) {
            onboardingHeader.style.display = 'block';
            onboardingHeader.textContent = 'Onboarding';
        }
        
        // Show onboarding table
        if (onboardingTable) {
            onboardingTable.style.display = 'table';
        }
        
        // Define all possible onboarding statuses
        const onboardingStatuses = [
            'Onboarding - First Day Checklist Sent', 
            'Onboarding - Checklist Accomplished', 
            'Onboarding - Account Created',
            'First Day Checklist Sent',
            'Checklist Accomplished',
            'Account Created'
        ];
        
        // Count visible rows to check if we have data
        let visibleRowCount = 0;
        
        // Show rows with onboarding statuses and hide others
        allOnboardingRows.forEach(row => {
            const lastCell = row.querySelector('td:last-child');
            const statusText = lastCell ? lastCell.textContent.trim() : '';
            
            let showRow = false;
            
            // Check if status matches any onboarding status
            for (const onboardingStatus of onboardingStatuses) {
                if (statusText.includes(onboardingStatus)) {
                    showRow = true;
                    break;
                }
            }
            
            // Also check for "For Onboarding" button
            if (!showRow && lastCell && lastCell.querySelector('.btn-onboarding')) {
                showRow = true;
            }
            
            // Show or hide the row
            row.style.display = showRow ? '' : 'none';
            
            if (showRow) {
                visibleRowCount++;
            }
        });
        
        // If no rows are visible, display a message
        if (onboardingTable && visibleRowCount === 0) {
            const tbody = onboardingTable.querySelector('tbody');
            
            if (tbody) {
                // Clear the table first
                tbody.innerHTML = '';
                
                // Add a message row
                const messageRow = document.createElement('tr');
                const messageCell = document.createElement('td');
                
                messageCell.setAttribute('colspan', '5');
                messageCell.className = 'text-center no-data-message';
                messageCell.textContent = 'No applicants awaiting for onboarding.';
                
                messageRow.appendChild(messageCell);
                tbody.appendChild(messageRow);
            }
        }
        
        // Highlight the active filter button
        highlightActiveFilter(status);
        return;
    }
    
    // Highlight the active filter button
    highlightActiveFilter(status);
}

// Helper function to display "no data" message in a table
function displayNoDataMessage(table, message) {
    if (!table) return;
    
    const tbody = table.querySelector('tbody');
    if (!tbody) return;
    
    // Check if we already have a message row
    const existingMessage = tbody.querySelector('tr td[colspan].text-center');
    
    if (existingMessage) {
        // Update existing message
        existingMessage.textContent = message;
    } else {
        // Create message row
        const messageRow = document.createElement('tr');
        const messageCell = document.createElement('td');
        
        // Get the correct colspan from table headers
        const headerCells = table.querySelectorAll('thead th');
        const colspan = headerCells.length || 5;
        
        messageCell.setAttribute('colspan', colspan.toString());
        messageCell.className = 'text-center no-data-message';
        messageCell.textContent = message;
        
        messageRow.appendChild(messageCell);
        
        // Clear the tbody first
        tbody.innerHTML = '';
        
        // Add the message row
        tbody.appendChild(messageRow);
    }
}

// Function to fix the header structure
function fixHeaderStructure() {
    // Fix the applicant status section headers
    const awaitingHeader = document.querySelector('h4:nth-of-type(1)');
    const declaredHeader = document.querySelector('h4:nth-of-type(2)');
    
    if (awaitingHeader) {
        awaitingHeader.textContent = 'Awaiting for Action';
    }
    
    if (declaredHeader) {
        const currentPhaseSpan = declaredHeader.querySelector('#currentPhase') || 
                                document.createElement('span');
        currentPhaseSpan.id = 'currentPhase';
        currentPhaseSpan.textContent = 'Review';
        
        // If the header doesn't have the span, add it
        if (!declaredHeader.querySelector('#currentPhase')) {
            declaredHeader.innerHTML = 'Applicants on ';
            declaredHeader.appendChild(currentPhaseSpan);
            declaredHeader.innerHTML += ' Declared Results';
        }
    }
    
    // Ensure all currentPhase spans have the same content
    document.querySelectorAll('#currentPhase').forEach(span => {
        span.textContent = 'Review';
    });
}
// Function to update section header buttons based on data

// Function to update section header buttons based on data
function updateSectionHeaderButtons() {
    const currentPhase = document.querySelector("#currentPhase")?.textContent || "Review";
    const rightSection = document.querySelector('.section-header .right-section');
    
    if (!rightSection) return;
    
    // Clear existing buttons
    rightSection.innerHTML = '';
    
    // Add the appropriate button based on current phase
    if (currentPhase === "Review") {
        // For P1 Reviews
        const p1Rows = document.querySelectorAll('#declaredResultsTable tbody tr:not(.section-header-row)');
        const hasP1Data = Array.from(p1Rows).some(row => {
            const statusCell = row.querySelector('td:nth-child(7)');
            return statusCell && statusCell.textContent.includes('P1');
        });
        
        // For P3 Reviews
        const hasP3Data = Array.from(p1Rows).some(row => {
            const statusCell = row.querySelector('td:nth-child(7)');
            return statusCell && statusCell.textContent.includes('P3');
        });
        
        // Add P1 button if we have P1 data
        if (hasP1Data) {
            const p1Button = document.createElement('button');
            p1Button.id = 'finalizeP1Button';
            p1Button.textContent = 'Finalize P1 Review';
            p1Button.addEventListener('click', function() {
                if (checkAllApplicantsMarked('P1')) {
                    document.getElementById('notifyApplicantsModal').style.display = 'block';
                    
                    // Update modal title and content
                    const modalTitle = document.querySelector('#notifyApplicantsModal h2');
                    if (modalTitle) {
                        modalTitle.textContent = "Confirm P1 Review Finalization";
                    }
                    
                    // Update confirm button
                    const confirmButton = document.getElementById('confirmButton');
                    if (confirmButton) {
                        // Remove existing event listeners
                        const newConfirmButton = confirmButton.cloneNode(true);
                        confirmButton.parentNode.replaceChild(newConfirmButton, confirmButton);
                        
                        // Add new event listener
                        newConfirmButton.addEventListener('click', finalizeP1Review);
                    }
                } else {
                    alert("Not all P1 applicants have been marked as passed or failed. Please make a decision for all applicants first.");
                }
            });
            rightSection.appendChild(p1Button);
        }
        
        // Add P3 button if we have P3 data
        if (hasP3Data) {
            const p3Button = document.createElement('button');
            p3Button.id = 'finalizeP3Button';
            p3Button.textContent = 'Finalize P3 Review';
            p3Button.addEventListener('click', function() {
                if (checkAllApplicantsMarked('P3')) {
                    document.getElementById('notifyApplicantsModal').style.display = 'block';
                    
                    // Update modal title and content
                    const modalTitle = document.querySelector('#notifyApplicantsModal h2');
                    if (modalTitle) {
                        modalTitle.textContent = "Confirm P3 Review Finalization";
                    }
                    
                    // Update confirm button
                    const confirmButton = document.getElementById('confirmButton');
                    if (confirmButton) {
                        // Remove existing event listeners
                        const newConfirmButton = confirmButton.cloneNode(true);
                        confirmButton.parentNode.replaceChild(newConfirmButton, confirmButton);
                        
                        // Add new event listener
                        newConfirmButton.addEventListener('click', finalizeP3Review);
                    }
                } else {
                    alert("Not all P3 applicants have been marked as passed or failed. Please make a decision for all applicants first.");
                }
            });
            rightSection.appendChild(p3Button);
        }
    }
}
// Enhanced version of checkAllApplicantsMarked that can filter by phase
function checkAllApplicantsMarked(phase = null) {
    const declaredResultsTable = document.getElementById("declaredResultsTable");
    if (!declaredResultsTable) return true;
    
    const rows = declaredResultsTable.querySelectorAll('tbody tr:not(.section-header-row)');
    if (rows.length === 0) return true; // No rows to check
    
    let relevantRows = Array.from(rows);
    
    // Filter rows by phase if specified
    if (phase) {
        relevantRows = relevantRows.filter(row => {
            const statusCell = row.querySelector('td:nth-child(7)');
            return statusCell && statusCell.textContent.includes(phase);
        });
        
        if (relevantRows.length === 0) return true; // No relevant rows
    }
    
    // Check each row for PASSED/FAILED status
    return relevantRows.every(row => {
        // Skip message rows
        if (row.classList.contains('section-header-row') || 
            row.querySelector('td[colspan="5"]') || 
            row.querySelector('td[colspan="6"]') || 
            row.querySelector('td[colspan="7"]') || 
            row.querySelector('td[colspan="8"]')) {
            return true;
        }
        
        const statusCell = row.querySelector('td:nth-child(7)');
        if (!statusCell) return true;
        
        const statusText = statusCell.textContent;
        return statusText.indexOf('PASSED') !== -1 || statusText.indexOf('FAILED') !== -1;
    });
}
// Extract data from a row for use in other tables
function extractRowData(row, index) {
    const cells = Array.from(row.querySelectorAll('td'));
    const cellData = cells.map(cell => cell.innerHTML);
    
    // Extract userId from various sources
    let userId = row.getAttribute('data-userid') || row.getAttribute('data-applicantid');
    
    if (!userId) {
        const reviewButton = row.querySelector('.btn-review');
        if (reviewButton) {
            const onclickAttr = reviewButton.getAttribute('onclick') || '';
            const userIdMatch = onclickAttr.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
            if (userIdMatch && userIdMatch[1]) {
                userId = userIdMatch[1];
            }
        }
    }
    
    if (!userId) {
        const approveButton = row.querySelector('.btn-approve');
        if (approveButton) {
            const onclickAttr = approveButton.getAttribute('onclick') || '';
            const applicantIdMatch = onclickAttr.match(/approveLineManager\(['"]([^'"]*)['"]\)/);
            if (applicantIdMatch && applicantIdMatch[1]) {
                userId = applicantIdMatch[1];
            }
        }
    }
    
    // Extract totalScore from onclick
    let totalScore = 'N/A';
    
    if (userId && window.applicantsScores && window.applicantsScores[userId]) {
        totalScore = window.applicantsScores[userId];
    } else {
        const reviewButton = row.querySelector('.btn-review');
        if (reviewButton) {
            const onclickAttr = reviewButton.getAttribute('onclick') || '';
            const scoreMatch = onclickAttr.match(/},\s*['"]([^'"]*)['"]/);
            if (scoreMatch && scoreMatch[1]) {
                totalScore = scoreMatch[1];
                
                // Store in cache for future use
                if (userId) {
                    if (!window.applicantsScores) window.applicantsScores = {};
                    window.applicantsScores[userId] = totalScore;
                }
            }
        }
    }
    
    // Get the name from row for possible lookups
    let applicantName = '';
    if (cells.length > 1) {
        applicantName = cells[1].textContent.trim();
    }
    
    // Build the cells array for the new row
    const result = [
        cellData[0], // Applicant No
        cellData[1], // Last Name, First Name
        cellData[2], // Department
        cellData[3], // Position Applied
        totalScore,  // Total Score
        '<span class="criteria-passed">Passed</span>', // Work Setup/Availability
        cellData[4]  // Applicant Status
    ];
    
    return {
        index: index + 1,
        cells: result,
        userId: userId,
        totalScore: totalScore,
        criteriaStatus: 'passed',
        name: applicantName  // Include name for possible lookups
    };
}

// Highlight the active filter button
function highlightActiveFilter(status) {
    document.querySelectorAll(".filter-button").forEach(button => {
        button.classList.remove("active");
    });
    
    const buttonId = status === "all" ? "filter-all" : `filter-${status}`;
    const activeButton = document.getElementById(buttonId);
    
    if (activeButton) {
        activeButton.classList.add("active");
    }
}

// Update the score cell with formatting
function updateScoreCellWithFormatting(row, score) {
    if (!row) {
        console.log("Missing row in updateScoreCellWithFormatting");
        return;
    }
    
    const scoreCell = row.querySelector('td:nth-child(5)');
    if (!scoreCell) {
        console.log("Score cell not found in row");
        return;
    }
    
    // Format and display the score
    let formattedScore;
    if (score === 'N/A' || score === undefined || score === null || score === '') {
        formattedScore = 'N/A';
    } else {
        const scoreValue = parseFloat(score);
        formattedScore = isNaN(scoreValue) ? 'N/A' : scoreValue.toFixed(1);
    }
    
    // Store the score value as a data attribute on the row
    row.setAttribute('data-score', formattedScore);
    
    // Update the cell content
    scoreCell.innerHTML = `<span class="score">${formattedScore}</span>`;
    
    // Add color based on score
    if (formattedScore !== 'N/A') {
        const scoreValue = parseFloat(formattedScore);
        
        // Remove any existing color classes
        scoreCell.classList.remove('high-score', 'medium-score', 'low-score');
        
        // Apply appropriate color based on score value
        if (scoreValue >= 85) {
            scoreCell.classList.add('high-score');
            scoreCell.style.color = 'green';
        } else if (scoreValue >= 75) {
            scoreCell.classList.add('medium-score');
            scoreCell.style.color = 'blue';
        } else {
            scoreCell.classList.add('low-score');
            scoreCell.style.color = 'orange';
        }
    }
    
    // Cache the score if we have a userId
    const userId = row.getAttribute('data-userid');
    if (userId && formattedScore !== 'N/A') {
        if (!window.applicantsScores) window.applicantsScores = {};
        window.applicantsScores[userId] = formattedScore;
    }
}

// Legacy function for backward compatibility
function updateScoreCell(row, score) {
    updateScoreCellWithFormatting(row, score);
}
// Update Awaiting Action table with rows from P1 and P3
function updateAwaitingActionTable(awaitingRowsP1, awaitingRowsP3) {
    const awaitingActionTable = document.getElementById('awaitingActionTable');
    if (!awaitingActionTable) return;
    
    const awaitingTbody = awaitingActionTable.querySelector('tbody');
    if (!awaitingTbody) return;
    
    // Empty the tbody first
    awaitingTbody.innerHTML = '';
    
    // Update section heading to "Awaiting for Action"
    const awaitingHeader = document.querySelector('h4:nth-of-type(1)');
    if (awaitingHeader) {
        awaitingHeader.textContent = 'Awaiting for Action';
    }
    
    // Add content depending on whether we have rows
    if (awaitingRowsP1.length > 0 || awaitingRowsP3.length > 0) {
        // Add P1 rows if we have any
        if (awaitingRowsP1.length > 0) {
            // Add the section header
            const p1HeaderRow = document.createElement('tr');
            p1HeaderRow.classList.add('section-header-row');
            p1HeaderRow.innerHTML = `<td colspan="7" style="background-color: #f0f0f0; font-weight: bold; padding: 8px;">List of P1 Applicants on Review</td>`;
            awaitingTbody.appendChild(p1HeaderRow);
            
            // Add each P1 row WITHOUT Toggle Status column
            awaitingRowsP1.forEach((rowData, idx) => {
                // Create row without Toggle Status column
                const newRow = createTableRow(rowData, false);
                awaitingTbody.appendChild(newRow);
                
                // Set userId attribute on the row
                if (rowData.userId) {
                    newRow.setAttribute('data-userid', rowData.userId);
                }
                
                // Get the score directly from database for this userId
                if (rowData.userId) {
                    getTotalScoreDirectly(rowData.userId, newRow);
                }
            });
        }
        
        // Add P3 rows if we have any
        if (awaitingRowsP3.length > 0) {
            // Add the section header
            const p3HeaderRow = document.createElement('tr');
            p3HeaderRow.classList.add('section-header-row');
            p3HeaderRow.innerHTML = `<td colspan="7" style="background-color: #f0f0f0; font-weight: bold; padding: 8px;">List of P3 Applicants on Review</td>`;
            awaitingTbody.appendChild(p3HeaderRow);
            
            // Add each P3 row WITHOUT Toggle Status column
            awaitingRowsP3.forEach((rowData, idx) => {
                const newRow = createTableRow(rowData, false);
                awaitingTbody.appendChild(newRow);
                
                // Set userId attribute on the row
                if (rowData.userId) {
                    newRow.setAttribute('data-userid', rowData.userId);
                }
                
                // Get the score directly from database for this userId
                if (rowData.userId) {
                    getTotalScoreDirectly(rowData.userId, newRow);
                }
            });
        }
    } else {
        // If no rows, display a message
        awaitingTbody.innerHTML = `<tr><td colspan="7" class="text-center">No applicants awaiting review.</td></tr>`;
    }
}

// Update Declared Results table with P1 and P3 rows, including Toggle Status column
function updateDeclaredResultsTable(declaredRowsP1, declaredRowsP3) {
    console.log("Updating declared results table with improved score fetching");
    
    const declaredResultsTable = document.getElementById('declaredResultsTable');
    if (!declaredResultsTable) {
        console.log("Declared results table not found");
        return;
    }
    
    // Make sure the table has proper headers including Toggle Status column
    ensureTableHeaders();
    
    const declaredTbody = declaredResultsTable.querySelector('tbody');
    if (!declaredTbody) {
        console.log("Tbody not found in declared results table");
        return;
    }
    
    // Empty the tbody first
    declaredTbody.innerHTML = '';
    
    // Update section heading
    const currentPhaseSpan = document.querySelector('#currentPhase');
    if (currentPhaseSpan) {
        currentPhaseSpan.textContent = "Review";
    }
    
    const declaredHeader = document.querySelector('h4:nth-of-type(2)');
    if (declaredHeader) {
        declaredHeader.innerHTML = 'Applicants on <span id="currentPhase">Review</span> Declared Results';
    }
    
    // Make sure we've captured all available data
    captureApplicantsDataEnhanced();
    
    // Add content depending on whether we have rows
    if (declaredRowsP1.length > 0 || declaredRowsP3.length > 0) {
        // Process P1 rows first if we have any
        if (declaredRowsP1.length > 0) {
            // Add the section header
            const p1HeaderRow = document.createElement('tr');
            p1HeaderRow.classList.add('section-header-row');
            p1HeaderRow.innerHTML = `<td colspan="8" style="background-color: #f0f0f0; font-weight: bold; padding: 8px;">List of P1 Applicants on Review - Declared Results</td>`;
            declaredTbody.appendChild(p1HeaderRow);
            
            // Add each P1 row with better score handling and toggle button
            declaredRowsP1.forEach((rowData, idx) => {
                // Create a new row WITH Toggle Status column
                const newRow = createTableRow(rowData, true);
                declaredTbody.appendChild(newRow);
                
                // Extract userId from rowData or try to find it
                let userId = rowData.userId;
                if (!userId) {
                    // Try to find userId from the name
                    const nameCell = newRow.querySelector('td:nth-child(2)');
                    const name = nameCell ? nameCell.textContent.trim() : '';
                    userId = findUserIdByNameImproved(name);
                    
                    if (userId) {
                        newRow.setAttribute('data-userid', userId);
                        
                        // Also set userId on the toggle button
                        const toggleButton = newRow.querySelector('.btn-toggle-status');
                        if (toggleButton) toggleButton.setAttribute('data-userid', userId);
                    }
                }
                
                // Get the score directly from database for this userId
                if (userId) {
                    getTotalScoreDirectly(userId, newRow);
                }
            });
        }
        
        // Process P3 rows with similar logic
        if (declaredRowsP3.length > 0) {
            // Add the section header
            const p3HeaderRow = document.createElement('tr');
            p3HeaderRow.classList.add('section-header-row');
            p3HeaderRow.innerHTML = `<td colspan="8" style="background-color: #f0f0f0; font-weight: bold; padding: 8px;">List of P3 Applicants on Review - Declared Results</td>`;
            declaredTbody.appendChild(p3HeaderRow);
            
            declaredRowsP3.forEach((rowData, idx) => {
                // Create a new row WITH Toggle Status column
                const newRow = createTableRow(rowData, true);
                declaredTbody.appendChild(newRow);
                
                // Get userId or try to find it
                let userId = rowData.userId;
                if (!userId) {
                    const nameCell = newRow.querySelector('td:nth-child(2)');
                    const name = nameCell ? nameCell.textContent.trim() : '';
                    userId = findUserIdByNameImproved(name);
                    
                    if (userId) {
                        newRow.setAttribute('data-userid', userId);
                        
                        // Also set userId on the toggle button
                        const toggleButton = newRow.querySelector('.btn-toggle-status');
                        if (toggleButton) toggleButton.setAttribute('data-userid', userId);
                    }
                }
                
                // Get the score directly from database for this userId
                if (userId) {
                    getTotalScoreDirectly(userId, newRow);
                }
            });
        }
    } else {
        // If no rows, display a message - note the colspan is now 8 to account for the toggle column
        declaredTbody.innerHTML = `<tr><td colspan="8" class="text-center">No applicants with declared review results.</td></tr>`;
    }
    
    // Fix any scores that weren't properly set
    setTimeout(() => {
        fixScoresInDeclaredResults();
    }, 300);
}

// Handle the Toggle Status button click
function toggleApplicantStatus(button) {
    const row = button.closest('tr');
    if (!row) return;
    
    const userId = button.getAttribute('data-userid') || row.getAttribute('data-userid');
    if (!userId) {
        console.error("Cannot toggle status: Missing userId");
        alert("Error: Cannot identify the applicant to update status");
        return;
    }
    
    // Get current status
    const statusCell = row.querySelector('td:nth-child(7)');
    if (!statusCell) return;
    
    const currentStatus = statusCell.textContent.trim();
    console.log(`Toggling status for userId ${userId}, current status: ${currentStatus}`);
    
    // Toggle between PASSED and FAILED
    let newStatus;
    if (currentStatus.includes('PASSED')) {
        newStatus = currentStatus.replace('PASSED', 'FAILED');
        button.classList.remove('status-passed');
        button.classList.add('status-failed');
        button.textContent = 'Failed';
    } else if (currentStatus.includes('FAILED')) {
        newStatus = currentStatus.replace('FAILED', 'PASSED');
        button.classList.remove('status-failed');
        button.classList.add('status-passed');
        button.textContent = 'Passed';
    } else {
        // Default to PASSED if status doesn't contain either keyword
        newStatus = currentStatus.includes('P1') ? 'P1 - PASSED' : 'P3 - PASSED';
        button.classList.add('status-passed');
        button.textContent = 'Passed';
    }
    
    // Update the status cell
    statusCell.textContent = newStatus;
    
    // Store the pending status change in a global object
    if (!window.pendingStatusChanges) {
        window.pendingStatusChanges = {};
    }
    
    // Record whether this is a PASS or FAIL
    window.pendingStatusChanges[userId] = newStatus.includes('PASSED') ? 'PASSED' : 'FAILED';
    
    console.log(`Status change for userId ${userId} to ${newStatus} is pending finalization`);
    console.log('Current pending changes:', window.pendingStatusChanges);
    
    // Make API call to update the temporary status in the database
    // This makes the UI consistent until finalization
    fetch(`/linemanager/applicant-tracker-jobposition/markAsP1${newStatus.includes('PASSED') ? 'Passed' : 'Failed'}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId: userId }),
    })
    .then(response => response.json())
    .then(data => {
        if (!data.success) {
            console.error(`Error updating temporary status: ${data.message || 'Unknown error'}`);
        }
    })
    .catch(error => {
        console.error('Error calling temporary status API:', error);
    });
}


// Get score directly from button attributes with userId
function forceDatabaseScoreFetch(userId, row) {
    if (!userId || !row) {
        console.log("Missing userId or row in forceDatabaseScoreFetch");
        return;
    }
    
    console.log(`Forcing database score fetch for userId: ${userId}`);
    
    // Extract score directly from button attributes with userId
    const score = extractScoreFromButton(userId);
    
    if (score) {
        // Cache the score
        if (!window.applicantsScores) window.applicantsScores = {};
        window.applicantsScores[userId] = score;
        
        // Update the row
        updateScoreCellWithFormatting(row, score);
        console.log(`Set score ${score} from database for userId ${userId}`);
        return;
    }
    
    // If score not found in buttons, try the cache
    if (window.applicantsScores && window.applicantsScores[userId]) {
        const cachedScore = window.applicantsScores[userId];
        updateScoreCellWithFormatting(row, cachedScore);
        console.log(`Used cached score ${cachedScore} for userId ${userId}`);
        return;
    }
    
    // If still not found, use N/A
    console.log(`No database score found for userId ${userId}`);
    updateScoreCellWithFormatting(row, 'N/A');
}

// Function to directly get score from applicant_initialscreening_assessment.totalScore
function getTotalScoreDirectly(userId, targetRow) {
    if (!userId || !targetRow) {
        console.log("Missing userId or targetRow, cannot get score");
        return;
    }
    
    console.log(`Looking for direct score for userId: ${userId}`);
    
    // Add data-userid attribute to the row for future reference
    targetRow.setAttribute('data-userid', userId);
    
    // 1. Search in mainApplicantTable for exact matches to get the correct score from the onclick attribute
    const mainTable = document.getElementById('mainApplicantTable');
    if (mainTable) {
        const mainTableRows = mainTable.querySelectorAll('tbody tr');
        
        for (const row of mainTableRows) {
            const reviewButton = row.querySelector('.btn-review');
            if (reviewButton) {
                const onclickAttr = reviewButton.getAttribute('onclick') || '';
                
                // Look for lineManagerInitialScreeningModal with this userId as first parameter
                if (onclickAttr.includes(`lineManagerInitialScreeningModal('${userId}'`) || 
                    onclickAttr.includes(`lineManagerInitialScreeningModal("${userId}"`)) {
                    
                    // Extract totalScore - it's passed after all the nested objects and before document URLs
                    // Pattern: }, 'scoreValue', 'degreeUrl', etc
                    const scoreMatch = onclickAttr.match(/},\s*['"]([^'"]*)['"]/);
                    if (scoreMatch && scoreMatch[1]) {
                        const totalScore = scoreMatch[1];
                        console.log(`Found totalScore ${totalScore} from lineManagerInitialScreeningModal`);
                        
                        // Cache the score
                        if (!window.applicantsScores) window.applicantsScores = {};
                        window.applicantsScores[userId] = totalScore;
                        
                        // Update the cell
                        updateScoreCellWithFormatting(targetRow, totalScore);
                        return;
                    }
                }
            }
        }
    }
    
    // 2. Try cached scores as fallback
    if (window.applicantsScores && window.applicantsScores[userId]) {
        const cachedScore = window.applicantsScores[userId];
        console.log(`Using cached score ${cachedScore} for userId ${userId}`);
        updateScoreCellWithFormatting(targetRow, cachedScore);
        return;
    }
    
    // 3. Search ALL buttons in the document for this userId as last resort
    const allButtons = document.querySelectorAll('button[onclick*="' + userId + '"]');
    for (const button of allButtons) {
        const onclickAttr = button.getAttribute('onclick') || '';
        
        if (onclickAttr.includes('lineManagerInitialScreeningModal')) {
            const scoreMatch = onclickAttr.match(/},\s*['"]([^'"]*)['"]/);
            if (scoreMatch && scoreMatch[1]) {
                const totalScore = scoreMatch[1];
                console.log(`Found totalScore ${totalScore} from any button in the document`);
                
                // Cache the score
                if (!window.applicantsScores) window.applicantsScores = {};
                window.applicantsScores[userId] = totalScore;
                
                // Update the cell
                updateScoreCellWithFormatting(targetRow, totalScore);
                return;
            }
        }
    }
    
    // 4. If all methods fail, display N/A
    console.log(`No score found for userId ${userId}, using N/A`);
    updateScoreCellWithFormatting(targetRow, 'N/A');
}

// Extract score from button
function extractScoreFromButton(userId) {
    // This function specifically extracts the applicant_initialscreening_assessment.totalScore
    // from the lineManagerInitialScreeningModal button attributes
    
    // Look for any button containing this userId
    const buttons = document.querySelectorAll(`button[onclick*="'${userId}'"]`);
    for (const button of buttons) {
        const onclickAttr = button.getAttribute('onclick') || '';
        
        // If this is the screening modal function
        if (onclickAttr.includes('lineManagerInitialScreeningModal')) {
            // The score is the parameter after all the nested objects
            // It's typically in the format: }, 'score', 'doc1', 'doc2', 'doc3'
            // or: }, 'score')
            
            // Try to match the score parameter (should be after the closing curly brace)
            const scoreMatch = onclickAttr.match(/},\s*['"]([^'"]*)['"]/);
            if (scoreMatch && scoreMatch[1]) {
                return scoreMatch[1];
            }
        }
    }
    
    return null;
}

// Setup modal event listeners
function setupModalEventListeners() {
    console.log("Setting up modal event listeners");
    
    // Event listeners for notifyAllApplicants modal
    document.getElementById('notifyAllApplicants')?.addEventListener('click', function() {
        document.getElementById('notifyApplicantsModal').style.display = 'block';
    });
    
    // Close buttons for all modals
    document.querySelectorAll('.close-button').forEach(button => {
        button.addEventListener('click', function() {
            const modalId = this.closest('.modal').id;
            document.getElementById(modalId).style.display = 'none';
        });
    });
    
    // Back buttons for all modals
    document.querySelectorAll('.back-button, .review-modal-back-button').forEach(button => {
        button.addEventListener('click', function() {
            const modalId = this.closest('.modal')?.id || this.closest('.review-modal')?.id;
            if (modalId) {
                document.getElementById(modalId).style.display = 'none';
            }
        });
    });
}

// Update Job Offer section
function updateJobOfferSection(jobOfferRows, container) {
    console.log("Updating job offer section with", jobOfferRows.length, "rows");
    
    // Check if job offer section already exists
    let jobOfferSection = document.getElementById('jobOfferSection');
    let jobOfferTable = document.getElementById('jobOfferTable');
    
    // If we have job offer rows, create or update the section
    if (jobOfferRows.length > 0) {
        if (!jobOfferSection) {
            // Create the job offer section if it doesn't exist
            jobOfferSection = document.createElement('div');
            jobOfferSection.id = 'jobOfferSection';
            jobOfferSection.innerHTML = `
                <h4>Job Offer Sent</h4>
                <table class="tracking-table" id="jobOfferTable">
                    <thead>
                        <tr>
                            <th>Applicant No.</th>
                            <th>Last Name, First Name</th>
                            <th>Department</th>
                            <th>Position Applied</th>
                            <th>Total Score</th>
                            <th>Work Setup/Availability</th>
                            <th>Applicant Status</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            `;
            
            // Add the section after the declared results table
            const declaredResultsTable = document.getElementById('declaredResultsTable');
            if (declaredResultsTable && container) {
                container.insertBefore(jobOfferSection, declaredResultsTable.nextSibling);
            }
            
            // Get reference to the new table
            jobOfferTable = document.getElementById('jobOfferTable');
        }
        
        // Update the table content
        if (jobOfferTable) {
            const jobOfferTbody = jobOfferTable.querySelector('tbody');
            if (jobOfferTbody) {
                // Clear existing rows
                jobOfferTbody.innerHTML = '';
                
                // Add each job offer row
                jobOfferRows.forEach((rowData, idx) => {
                    const newRow = createTableRow(rowData, false); // No toggle status for job offers
                    jobOfferTbody.appendChild(newRow);
                    
                    // Set userId attribute for score lookup
                    if (rowData.userId) {
                        newRow.setAttribute('data-userid', rowData.userId);
                        getTotalScoreDirectly(rowData.userId, newRow);
                    }
                });
            }
        }
        
        // Show the section
        if (jobOfferSection) {
            jobOfferSection.style.display = 'block';
        }
    } else if (jobOfferSection) {
        // Hide the section if no job offer rows
        jobOfferSection.style.display = 'none';
    }
}

// Update section visibilities
function updateReviewSectionsVisibility(hasAwaitingRows, hasDeclaredRows, hasJobOfferRows, hasP1Data, hasP3Data) {
    console.log("Updating section visibility:", {
        hasAwaitingRows, hasDeclaredRows, hasJobOfferRows, hasP1Data, hasP3Data
    });
    
    // Get references to elements
    const awaitingHeader = document.querySelector('h4:nth-of-type(1)');
    const declaredHeader = document.querySelector('h4:nth-of-type(2)');
    const jobOfferHeader = document.querySelector('h4:nth-of-type(3)');
    
    const awaitingActionTable = document.getElementById('awaitingActionTable');
    const declaredResultsTable = document.getElementById('declaredResultsTable');
    const jobOfferTable = document.getElementById('jobOfferTable');
    
    const sortSection = document.querySelector('.sort-section');
    
    // Show/hide awaiting action section
    if (awaitingHeader) {
        awaitingHeader.style.display = hasAwaitingRows ? 'block' : 'none';
    }
    
    if (awaitingActionTable) {
        awaitingActionTable.style.display = hasAwaitingRows ? 'table' : 'none';
    }
    
    // Show/hide declared results section
    if (declaredHeader) {
        declaredHeader.style.display = hasDeclaredRows ? 'block' : 'none';
    }
    
    if (declaredResultsTable) {
        declaredResultsTable.style.display = hasDeclaredRows ? 'table' : 'none';
    }
    
    if (sortSection) {
        sortSection.style.display = hasDeclaredRows ? 'block' : 'none';
    }
    
    // Show/hide job offer section
    if (jobOfferHeader) {
        jobOfferHeader.style.display = hasJobOfferRows ? 'block' : 'none';
    }
    
    if (jobOfferTable) {
        jobOfferTable.style.display = hasJobOfferRows ? 'table' : 'none';
    }
    // Handle the notifyAllApplicants button if it exists (for backward compatibility)
// We're now using dynamic buttons instead of updating text
// Call updateSectionHeaderButtons to refresh the button state
updateSectionHeaderButtons();
// Call updateSectionHeaderButtons if we're already on the review filter
const activeFilter = document.querySelector(".filter-button.active");
if (activeFilter && activeFilter.id === 'filter-forreview') {
    setTimeout(updateSectionHeaderButtons, 500); // Small delay to ensure data is loaded
}
}

// Fix scores in declared results table specifically
function fixScoresInDeclaredResults() {
    console.log("Fixing scores in declared results table");
    
    const declaredResultsTable = document.getElementById('declaredResultsTable');
    if (!declaredResultsTable) return;
    
    // Get all rows (excluding headers)
    const rows = declaredResultsTable.querySelectorAll('tbody tr:not(.section-header-row)');
    console.log(`Checking ${rows.length} rows in declared results table`);
    
    rows.forEach((row, idx) => {
        // Skip rows with message (colspan)
        if (row.querySelector('td[colspan]')) return;
        
        // Try getting userId from data attribute
        let userId = row.getAttribute('data-userid');
        
        if (!userId) {
            // If no userId, try to extract from name
            const nameCell = row.querySelector('td:nth-child(2)');
            if (nameCell) {
                const name = nameCell.textContent.trim().replace(/\s+/g, ' ');
                userId = findUserIdByNameImproved(name);
                
                // Set the userId on the row if found
                if (userId) {
                    row.setAttribute('data-userid', userId);
                    
                    // Also set userId on toggle button if it exists
                    const toggleButton = row.querySelector('.btn-toggle-status');
                    if (toggleButton) toggleButton.setAttribute('data-userid', userId);
                }
            }
        }
        
        // If we now have a userId, update the score
        if (userId) {
            console.log(`Row ${idx}: Using userId ${userId} to get score`);
            // Try to get the score from database
            getTotalScoreDirectly(userId, row);
        }
    });
}

// Set up toggle status buttons
function setupToggleStatusButtons() {
    const buttons = document.querySelectorAll('.btn-toggle-status:not([data-has-listener])');
    console.log(`Setting up ${buttons.length} toggle status buttons`);
    
    buttons.forEach(button => {
        // Mark that we've added a listener to avoid duplicates
        button.setAttribute('data-has-listener', 'true');
        
        // Get the userId - either from the button's data attribute or from the parent row
        const userId = button.getAttribute('data-userid') || 
                       button.closest('tr').getAttribute('data-userid');
        
        if (userId) {
            // Set initial button state based on current status
            const row = button.closest('tr');
            if (row) {
                const statusCell = row.querySelector('td:nth-child(7)');
                if (statusCell) {
                    const currentStatus = statusCell.textContent.trim();
                    // Set initial button text and style
                    if (currentStatus.includes('PASSED')) {
                        button.textContent = 'Passed';
                        button.classList.add('status-passed');
                    } else if (currentStatus.includes('FAILED')) {
                        button.textContent = 'Failed';
                        button.classList.add('status-failed');
                    } else {
                        button.textContent = 'Toggle';
                    }
                }
            }
            
            // Add click event listener
            button.addEventListener('click', function() {
                toggleApplicantStatus(this);
            });
        } else {
            console.log(`Button missing userId, cannot set up toggle functionality`);
        }
    });
    
    return buttons.length;
}

// Function to sort declared results
function sortDeclaredResults(sortType) {
    const table = document.getElementById('declaredResultsTable');
    if (!table) return;
    
    const tbody = table.querySelector('tbody');
    if (!tbody) return;
    
    const rows = Array.from(tbody.querySelectorAll('tr:not(.section-header-row)'));
    
    // Keep section header rows in place
    const headerRows = Array.from(tbody.querySelectorAll('tr.section-header-row'));
    
    // Group rows by section (P1 and P3)
    const p1Rows = rows.filter(row => {
        const statusCell = row.querySelector('td:nth-child(7)');
        return statusCell && statusCell.textContent.includes('P1');
    });
    
    const p3Rows = rows.filter(row => {
        const statusCell = row.querySelector('td:nth-child(7)');
        return statusCell && statusCell.textContent.includes('P3');
    });
    
    // Sort rows based on selected option
    if (sortType === 'ascending' || sortType === 'descending') {
        // Sort by score
        const sortFn = (a, b) => {
            const scoreA = parseFloat(a.getAttribute('data-score') || '0');
            const scoreB = parseFloat(b.getAttribute('data-score') || '0');
            return sortType === 'ascending' ? scoreA - scoreB : scoreB - scoreA;
        };
        
        p1Rows.sort(sortFn);
        p3Rows.sort(sortFn);
    } else if (sortType === 'alphabetical') {
        // Sort alphabetically by name
        const sortFn = (a, b) => {
            const nameA = a.querySelector('td:nth-child(2)')?.textContent.trim() || '';
            const nameB = b.querySelector('td:nth-child(2)')?.textContent.trim() || '';
            return nameA.localeCompare(nameB);
        };
        
        p1Rows.sort(sortFn);
        p3Rows.sort(sortFn);
    }
    
    // Clear the tbody
    tbody.innerHTML = '';
    
    // Add P1 header and rows if we have any
    if (p1Rows.length > 0) {
        const p1Header = headerRows.find(row => row.textContent.includes('P1'));
        if (p1Header) tbody.appendChild(p1Header);
        p1Rows.forEach(row => tbody.appendChild(row));
    }
    
    // Add P3 header and rows if we have any
    if (p3Rows.length > 0) {
        const p3Header = headerRows.find(row => row.textContent.includes('P3'));
        if (p3Header) tbody.appendChild(p3Header);
        p3Rows.forEach(row => tbody.appendChild(row));
    }
}

// Add missing toggle columns for declared results table only
function addMissingToggleColumns() {
    console.log("Checking for missing Toggle Status columns...");
    
    // ONLY target the declared results table
    const declaredResultsTable = document.getElementById('declaredResultsTable');
    if (!declaredResultsTable) return;
    
    const rows = declaredResultsTable.querySelectorAll('tbody tr:not(.section-header-row)');
    console.log(`Checking ${rows.length} rows in declaredResultsTable`);
    
    rows.forEach(row => {
        // Skip message rows (those with colspan)
        if (row.querySelector('td[colspan]')) return;
        
        // Check if the row already has enough columns
        const cells = row.querySelectorAll('td');
        if (cells.length < 8) {
            console.log("Found row missing Toggle Status column");
            
            // Get the userId from the row
            const userId = row.getAttribute('data-userid');
            
            // Create the toggle button cell
            const toggleCell = document.createElement('td');
            toggleCell.innerHTML = `<button class="btn-toggle-status">Toggle Status</button>`;
            row.appendChild(toggleCell);
            
            // If we have a userId, set it on the button
            if (userId) {
                const button = toggleCell.querySelector('.btn-toggle-status');
                if (button) {
                    button.setAttribute('data-userid', userId);
                }
            }
        }
    });
    
    // After adding missing columns, set up the event listeners
    setupToggleStatusButtons();
}

// Function for displaying uploaded documents in modal
function displayUploadedDocument(fileUrl, linkId, previewId) {
    const docLink = document.getElementById(linkId);
    const docPreview = document.getElementById(previewId);

    if (!fileUrl || fileUrl === '#') {
        docLink.href = "#";
        docLink.textContent = "No document uploaded";
        docPreview.innerHTML = ""; // Clear preview
        return;
    }

    docLink.href = fileUrl;
    docLink.textContent = "View Uploaded Document";

    const fileExtension = fileUrl.split('.').pop().toLowerCase();

    if (["jpg", "jpeg", "png"].includes(fileExtension)) {
        docPreview.innerHTML = `<img src="${fileUrl}" alt="Uploaded Image" style="max-width: 300px; border: 1px solid #ccc; padding: 5px;">`;
    } else if (fileExtension === "pdf") {
        docPreview.innerHTML = `<iframe src="${fileUrl}" width="100%" height="400px" style="border: none;"></iframe>`;
    } else {
        docPreview.innerHTML = ""; // No preview for other file types
    }
}

// Function for the Line Manager Initial Screening Modal
function lineManagerInitialScreeningModal(userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl) {
    console.log('Modal Data:', { userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl });
    
    // If userId is missing or "undefined", log an error and stop further processing.
    if (!userId || userId === "undefined") {
        console.error("Invalid userId passed to modal:", userId);
        alert("Error: Invalid User ID. Cannot display applicant details.");
        return;
    }
    
    // Set the hidden input value for userId
    document.getElementById('userId').value = userId;

    // Set the hidden input value for jobId if it exists
    const jobIdElement = document.getElementById('jobId');
    if (jobIdElement && typeof jobId !== 'undefined') {
        jobIdElement.value = jobId;
    }

    // Optionally hide the applicantId container if not needed
    let applicantIdContainer = document.getElementById("applicantId")?.parentElement;
    if (applicantIdContainer) {
        applicantIdContainer.style.display = "none";
    }

    // Populate visible applicant details
    document.getElementById('applicant-name').textContent = `${lastName}, ${firstName}`;
    document.getElementById('applicant-birthday').textContent = birthday || 'N/A';
    document.getElementById('applicant-email').textContent = email || 'N/A';
    document.getElementById('applicant-contact').textContent = phoneNo || 'N/A';

    // Populate score details
    document.getElementById('score-degree').textContent = scores.degree || 'N/A';
    document.getElementById('score-experience').textContent = scores.experience || 'N/A';
    document.getElementById('score-certifications').textContent = scores.certifications || 'N/A';
    document.getElementById('score-hard-skills').textContent = scores.hardSkills || 'N/A';
    document.getElementById('score-soft-skills').textContent = scores.softSkills || 'N/A';
    document.getElementById('score-work-setup').textContent = scores.workSetup || 'N/A';
    document.getElementById('score-availability').textContent = scores.availability || 'N/A';

    document.getElementById('computation-verdict').textContent = verdict || 'N/A';

    // Display documents separately
    displayUploadedDocument(degreeUrl, "degree-doc", "degree-preview");
    displayUploadedDocument(certUrl, "cert-doc", "cert-preview");
    displayUploadedDocument(resumeUrl, "resume-doc", "resume-preview");

    // Display the modal
    document.getElementById('lineManagerInitialScreeningModalHtml').style.display = 'block';
    
    // Store this score in our global cache - this is the applicant_initialscreening_assessment.totalScore
    if (!window.applicantsScores) window.applicantsScores = {};
    window.applicantsScores[userId] = verdict;
}
// Function to open standard modals
function openModal(modalId, applicantName) {
    const modal = document.getElementById(modalId);
    if (!modal) {
        console.error(`Modal ${modalId} not found`);
        return;
    }
    
    // If this is the job offer modal, update the name
    if (modalId === 'releaseJobOfferModal' && applicantName) {
        const nameElement = document.getElementById('applicant-name-job-offer');
        if (nameElement) {
            nameElement.textContent = applicantName;
        }
    }
    
    // Display the modal
    modal.style.display = 'block';
}

// Function to close standard modals
function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'none';
    }
}

// Function to approve Line Manager
function approveLineManager(applicantId) {
    if (!applicantId) {
        alert("Error: Missing applicant ID");
        return;
    }
    
    // Make API call to approve
    fetch('/linemanager/applicant-tracker-jobposition/postApproveLineManager', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ applicantId: applicantId }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("Successfully approved applicant!");
            
            // Refresh the view
            setTimeout(() => {
                const activeFilter = document.querySelector(".filter-button.active");
                if (activeFilter) {
                    activeFilter.click();
                } else {
                    document.getElementById("filter-all").click();
                }
            }, 500);
        } else {
            alert("Error approving applicant: " + (data.message || "Unknown error"));
        }
    })
    .catch(error => {
        console.error("Error:", error);
        alert("Failed to approve applicant.");
    });
}

// Function to handle notification for job offers
function sendNotification() {
    // This would normally send notifications to applicants
    alert("Notification sent to applicant!");
    closeModal('releaseJobOfferModal');
    
    // Refresh the view after sending notification
    setTimeout(() => {
        const activeFilter = document.querySelector(".filter-button.active");
        if (activeFilter) {
            activeFilter.click();
        }
    }, 500);
}

// Function to handle onboarding confirmation
function confirmOnboarding() {
    alert("Applicant moved to onboarding");
    closeModal('moveToOnboardingModal');
    
    // Refresh the view
    setTimeout(() => {
        document.getElementById("filter-foronboarding").click();
    }, 500);
}

// Function to handle account setup confirmation
function confirmAccountSetup() {
    alert("Account setup confirmed");
    closeModal('accountSetupReminderModal');
}

// Function to set interview availabilities (placeholder)
function setInterviewAvailabilities() {
    // This would normally open Calendly or another scheduling tool
    alert("Opening Calendly to set interview availabilities...");
    // window.open('https://calendly.com/your-calendly-link', '_blank');
}

// Function to finalize P1 Review
function finalizeP1Review() {
    console.log("Finalizing P1 review process...");
    
    // Extract status updates from rows in the declared results table
    const declaredResultsTable = document.getElementById("declaredResultsTable");
    const rows = declaredResultsTable?.querySelectorAll('tbody tr:not(.section-header-row)') || [];
    
    // Arrays to store passed and failed user IDs
    const passedUserIds = [];
    const failedUserIds = [];
    
    // Process each row to determine which users passed and which failed
    rows.forEach(row => {
        // Skip message rows
        if (row.querySelector('td[colspan]')) return;
        
        const statusCell = row.querySelector('td:nth-child(7)');
        const userId = row.getAttribute('data-userid');
        
        if (statusCell && userId) {
            const statusText = statusCell.textContent.trim();
            
            // Only include P1 rows
            if (statusText.includes('P1')) {
                if (statusText.includes('PASSED')) {
                    passedUserIds.push(userId);
                } else if (statusText.includes('FAILED')) {
                    failedUserIds.push(userId);
                }
            }
        }
    });
    
    console.log(`Finalizing P1 Review: ${passedUserIds.length} passed, ${failedUserIds.length} failed`);
    
    // Send API request for P1 finalization
    fetch('/linemanager/applicant-tracker-jobposition/finalizeP1Review', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            passedUserIds: passedUserIds,
            failedUserIds: failedUserIds
        }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("P1 Review finalization complete! All applicants have been notified of their status.");
            
            // Clear the pending status changes after finalization
            window.pendingStatusChanges = {};
            
            closeModal('notifyApplicantsModal');
            
            // Refresh the view after finalization
            setTimeout(() => {
                // Trigger current filter to refresh the view
                const activeFilter = document.querySelector(".filter-button.active");
                if (activeFilter) {
                    activeFilter.click();
                } else {
                    // Default to "all" if no active filter found
                    document.getElementById("filter-all").click();
                }
            }, 500);
        } else {
            alert("Error finalizing P1 review: " + (data.message || "Unknown error"));
        }
    })
    .catch(error => {
        console.error("Error finalizing P1 review:", error);
        alert("Failed to finalize P1 review. Please try again.");
    });
    
    // Close the modal
    closeModal('notifyApplicantsModal');
}

// Function for the Line Manager Initial Screening Modal actions
function passApplicant() {
    const userId = document.getElementById('userId').value;
    if (!userId) {
        alert("Error: Invalid User ID");
        return;
    }
    
    // Make API call to update status in line manager's view
    fetch('/linemanager/applicant-tracker-jobposition/markAsP1Passed', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId: userId }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Close the modal
            document.getElementById('lineManagerInitialScreeningModalHtml').style.display = 'none';
            
            // Record this in the pending changes
            if (!window.pendingStatusChanges) {
                window.pendingStatusChanges = {};
            }
            window.pendingStatusChanges[userId] = 'PASSED';
            
            // Move the row from awaiting action to declared results
            const moveResult = moveRowToSection(userId, 'awaitingActionTable', 'declaredResultsTable');
            
            if (moveResult) {
                console.log(`Successfully moved row for user ${userId} to declared results table`);
            } else {
                console.log(`Row movement failed for user ${userId}, refreshing view`);
                // If movement fails, refresh the entire view
                setTimeout(() => {
                    const activeFilter = document.querySelector(".filter-button.active");
                    if (activeFilter) {
                        activeFilter.click();
                    } else {
                        document.getElementById("filter-all").click();
                    }
                }, 500);
            }
            
            // Show success message
            alert("Successfully marked applicant status as PASSED! The applicant will be notified when you finalize the review.");
            
        } else {
            alert("Error updating applicant status: " + (data.message || "Unknown error"));
        }
    })
    .catch(error => {
        console.error("Error:", error);
        alert("Failed to update applicant status.");
    });
}

// Handle the Reject button click in the modal
function rejectApplicant() {
    const userId = document.getElementById('userId').value;
    if (!userId) {
        alert("Error: Invalid User ID");
        return;
    }
    
    // Make API call to update status in line manager's view
    fetch('/linemanager/applicant-tracker-jobposition/markAsP1Failed', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId: userId }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Close the modal
            document.getElementById('lineManagerInitialScreeningModalHtml').style.display = 'none';
            
            // Record this in the pending changes
            if (!window.pendingStatusChanges) {
                window.pendingStatusChanges = {};
            }
            window.pendingStatusChanges[userId] = 'FAILED';
            
            // Move the row from awaiting action to declared results
            const moveResult = moveRowToSection(userId, 'awaitingActionTable', 'declaredResultsTable');
            
            if (moveResult) {
                console.log(`Successfully moved row for user ${userId} to declared results table`);
            } else {
                console.log(`Row movement failed for user ${userId}, refreshing view`);
                // If movement fails, refresh the entire view
                setTimeout(() => {
                    const activeFilter = document.querySelector(".filter-button.active");
                    if (activeFilter) {
                        activeFilter.click();
                    } else {
                        document.getElementById("filter-all").click();
                    }
                }, 500);
            }
            
            // Show success message
            alert("Successfully marked applicant status as FAILED! The applicant will be notified when you finalize the review.");
            
        } else {
            alert("Error updating applicant status: " + (data.message || "Unknown error"));
        }
    })
    .catch(error => {
        console.error("Error:", error);
        alert("Failed to update applicant status.");
    });
}

// Function for finalizing P3 Review (updated to match P1 pattern)
function finalizeP3Review() {
    console.log("Finalizing P3 review process...");
    
    // Extract status updates from rows in the declared results table
    const declaredResultsTable = document.getElementById("declaredResultsTable");
    const rows = declaredResultsTable?.querySelectorAll('tbody tr:not(.section-header-row)') || [];
    
    // Arrays to store passed and failed user IDs
    const passedUserIds = [];
    const failedUserIds = [];
    
    // Process each row to determine which users passed and which failed
    rows.forEach(row => {
        // Skip message rows
        if (row.querySelector('td[colspan]')) return;
        
        const statusCell = row.querySelector('td:nth-child(7)');
        const userId = row.getAttribute('data-userid');
        
        if (statusCell && userId) {
            const statusText = statusCell.textContent.trim();
            
            // Only include P3 rows
            if (statusText.includes('P3')) {
                if (statusText.includes('PASSED')) {
                    passedUserIds.push(userId);
                } else if (statusText.includes('FAILED')) {
                    failedUserIds.push(userId);
                }
            }
        }
    });
    
    console.log(`Finalizing P3 Review: ${passedUserIds.length} passed, ${failedUserIds.length} failed`);
    
    if (passedUserIds.length === 0 && failedUserIds.length === 0) {
        alert("No P3 applicants found with PASSED or FAILED status.");
        closeModal('notifyApplicantsModal');
        return;
    }
    
    // Send API request for P3 finalization
    fetch('/linemanager/applicant-tracker-jobposition/finalizeP3Review', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            passedUserIds: passedUserIds,
            failedUserIds: failedUserIds
        }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("P3 Review finalization complete! All applicants have been notified of their status.");
            
            // Clear the pending status changes after finalization
            window.pendingStatusChanges = {};
            
            closeModal('notifyApplicantsModal');
            
            // Refresh the view after finalization
            setTimeout(() => {
                // Trigger current filter to refresh the view
                const activeFilter = document.querySelector(".filter-button.active");
                if (activeFilter) {
                    activeFilter.click();
                } else {
                    // Default to "all" if no active filter found
                    document.getElementById("filter-all").click();
                }
            }, 500);
        } else {
            alert("Error finalizing P3 review: " + (data.message || "Unknown error"));
        }
    })
    .catch(error => {
        console.error("Error finalizing P3 review:", error);
        alert("Failed to finalize P3 review. Please try again.");
    });
    
    // Close the modal
    closeModal('notifyApplicantsModal');
}

// Function to handle moving rows between sections
function moveRowToSection(userId, fromSection, toSection) {
    console.log(`Moving user ${userId} from ${fromSection} to ${toSection}`);
    
    if (!userId || !fromSection || !toSection) {
        console.error("Missing required parameters for row movement");
        return false;
    }
    
    // Get source and target tables
    const sourceTable = document.getElementById(fromSection);
    const targetTable = document.getElementById(toSection);
    
    if (!sourceTable || !targetTable) {
        console.error(`Tables not found: ${fromSection} or ${toSection}`);
        return false;
    }
    
    // Find the row in the source table
    const sourceRows = sourceTable.querySelectorAll('tbody tr');
    let rowToMove = null;
    let rowData = null;
    
    for (const row of sourceRows) {
        // Skip section headers and message rows
        if (row.classList.contains('section-header-row') || row.querySelector('td[colspan]')) {
            continue;
        }
        
        const rowUserId = row.getAttribute('data-userid');
        if (rowUserId === userId) {
            rowToMove = row;
            // Extract the row data before removing it
            rowData = extractRowData(row, 0);
            break;
        }
    }
    
    if (!rowToMove || !rowData) {
        console.error(`Row for user ${userId} not found in ${fromSection}`);
        return false;
    }
    
    // Remove the row from source table
    rowToMove.remove();
    
    // Check if we need to add a "no data" message to source table if it's now empty
    const remainingSourceRows = Array.from(sourceTable.querySelectorAll('tbody tr')).filter(
        row => !row.classList.contains('section-header-row') && !row.querySelector('td[colspan]')
    );
    
    if (remainingSourceRows.length === 0) {
        const sourceTbody = sourceTable.querySelector('tbody');
        if (sourceTbody) {
            // Get column count from table headers
            const headerCount = sourceTable.querySelectorAll('thead th').length;
            const messageRow = document.createElement('tr');
            const messageCell = document.createElement('td');
            messageCell.setAttribute('colspan', headerCount.toString());
            messageCell.className = 'text-center';
            messageCell.textContent = 'No applicants awaiting review.';
            messageRow.appendChild(messageCell);
            sourceTbody.appendChild(messageRow);
        }
    }
    
    // Add row to target table with appropriate modifications
    const targetTbody = targetTable.querySelector('tbody');
    if (!targetTbody) {
        console.error(`Target tbody not found in ${toSection}`);
        return false;
    }
    
    // Clear any "no data" message in the target table
    const noDataRow = targetTbody.querySelector('tr td[colspan].text-center');
    if (noDataRow) {
        noDataRow.closest('tr').remove();
    }
    
    // Create new row for target table
    // Special handling for declaredResultsTable - add Toggle Status column
    const needsToggleColumn = (toSection === 'declaredResultsTable');
    const newRow = createTableRow(rowData, needsToggleColumn);
    
    // Set the same userId on the new row
    newRow.setAttribute('data-userid', userId);
    
    // Add the row to the target tbody
    targetTbody.appendChild(newRow);
    
    // If moving to declared results, set up the toggle button
    if (needsToggleColumn) {
        const toggleButton = newRow.querySelector('.btn-toggle-status');
        if (toggleButton) {
            toggleButton.setAttribute('data-userid', userId);
            setupToggleStatusButtons();
        }
    }
    
    // Update the score in the new row
    if (window.applicantsScores && window.applicantsScores[userId]) {
        updateScoreCellWithFormatting(newRow, window.applicantsScores[userId]);
    } else {
        getTotalScoreDirectly(userId, newRow);
    }
    
    return true;
}


// document.addEventListener("DOMContentLoaded", function () {
//     // Function to filter rows based on status and phase
//     function filterRowsByStatus(status) {
//         const rows = document.querySelectorAll('.tracking-table tbody tr');
//         const applicantStatusSection = document.getElementById('applicantStatusSection');
//         applicantStatusSection.style.display = (status === 'all') ? 'none' : 'block';
        
//         if (status !== 'all') {
//             // Update the current phase display
//             const phaseMatch = status.match(/(p\d+)/i);
//             const phase = phaseMatch ? phaseMatch[0].toUpperCase() : '';
//             const phaseSpans = document.querySelectorAll('#currentPhase');
//             phaseSpans.forEach(span => span.textContent = phase);
            
//             // Clear previous rows
//             document.querySelector('#awaitingActionTable tbody').innerHTML = '';
//             document.querySelector('#declaredResultsTable tbody').innerHTML = '';
            
//             // Filter and populate the specific tables
//             rows.forEach(row => {
//                 const statusCell = row.querySelector('td:last-child');
//                 const statusText = statusCell.querySelector('span').textContent;
//                 const hasActionButton = statusCell.querySelector('button') !== null;
                
//                 // Check if row matches the current filter
//                 if (row.classList.contains(`status-${status}`) || 
//                     (status.startsWith('for-') && row.classList[0] && row.classList[0].includes(status))) {
                    
//                     const rowClone = row.cloneNode(true);
                    
//                     // Determine which table to add the row to
//                     if (hasActionButton && statusText.includes('Awaiting')) {
//                         document.querySelector('#awaitingActionTable tbody').appendChild(rowClone);
//                     } else if (statusText.includes('PASSED') || statusText.includes('FAILED')) {
//                         document.querySelector('#declaredResultsTable tbody').appendChild(rowClone);
//                     }
//                 }
                
//                 // Show/hide original rows
//                 if (status === 'all' || 
//                     row.classList.contains(`status-${status}`) || 
//                     (status.startsWith('for-') && row.classList[0] && row.classList[0].includes(status))) {
//                     row.style.display = '';
//                 } else {
//                     row.style.display = 'none';
//                 }
//             });
//         } else {
//             // Show all rows when "All" is selected
//             rows.forEach(row => row.style.display = '');
//         }
        
//         // Highlight the active filter button
//         highlightActiveFilter(status);
//     }
    
//     // Function to highlight the active filter button
//     function highlightActiveFilter(status) {
//         const buttons = document.querySelectorAll(".right-section button");
//         buttons.forEach(button => {
//             button.classList.toggle("active", button.id === `filter-${status}`);
//         });
//     }
    
//     // Function to check if all applicants in the current phase have been marked
//     function checkAllApplicantsMarked() {
//         const rows = document.querySelectorAll('#awaitingActionTable tbody tr');
//         return Array.from(rows).every(row => {
//             const statusText = row.querySelector('td:last-child span').textContent;
//             return statusText.includes('PASSED') || statusText.includes('FAILED');
//         });
//     }
    
//     // Notify all applicants button functionality
//     document.getElementById('notifyAllApplicants').addEventListener('click', function() {
//         if (checkAllApplicantsMarked()) {
//             openModal('notifyApplicantsModal');
//         } else {
//             alert("Not all applicants have been marked as passed or failed. Please make a decision first.");
//         }
//     });
    
//     // Function to sort the declared results table
//     function sortDeclaredResults(sortOption) {
//         const resultsTable = document.querySelector('#declaredResultsTable tbody');
//         const rows = Array.from(resultsTable.querySelectorAll('tr'));
        
//         rows.sort((a, b) => {
//             if (sortOption === 'ascending') {
//                 const scoreA = parseFloat(a.querySelector('td:last-child').textContent.match(/\d+(\.\d+)?/)) || 0;
//                 const scoreB = parseFloat(b.querySelector('td:last-child').textContent.match(/\d+(\.\d+)?/)) || 0;
//                 return scoreA - scoreB;
//             } else if (sortOption === 'descending') {
//                 const scoreA = parseFloat(a.querySelector('td:last-child').textContent.match(/\d+(\.\d+)?/)) || 0;
//                 const scoreB = parseFloat(b.querySelector('td:last-child').textContent.match(/\d+(\.\d+)?/)) || 0;
//                 return scoreB - scoreA;
//             } else if (sortOption === 'alphabetical') {
//                 const nameA = a.querySelector('td:nth-child(2)').textContent.toLowerCase();
//                 const nameB = b.querySelector('td:nth-child(2)').textContent.toLowerCase();
//                 return nameA.localeCompare(nameB);
//             }
//             return 0;
//         });
        
//         // Clear the table and append sorted rows
//         resultsTable.innerHTML = '';
//         rows.forEach(row => resultsTable.appendChild(row));
//     }
    
//     // Sort options change event
//     document.getElementById('sortOptions').addEventListener('change', function() {
//         sortDeclaredResults(this.value);
//     });
    
//     // Event listeners for filter buttons
//     document.getElementById("filter-all").addEventListener("click", () => filterRowsByStatus("all"));
//     document.getElementById("filter-review").addEventListener("click", () => filterRowsByStatus("for-review"));
//     document.getElementById("filter-evaluation").addEventListener("click", () => filterRowsByStatus("for-evaluation"));
//     document.getElementById("filter-onboarding").addEventListener("click", () => filterRowsByStatus("for-onboarding"));
    
//     // Function to finalize notification
//     window.finalizeNotification = function() {
//         alert("All applicants have been notified.");
//         closeModal('notifyApplicantsModal');
//     };
    
//     // Function to open a modal
//     window.openModal = function(modalId) {
//         document.getElementById(modalId).style.display = 'block';
//     };
    
//     // Function to close a modal
//     window.closeModal = function(modalId) {
//         document.getElementById(modalId).style.display = 'none';
//     };
    
//     // Search functionality
//     function filterTable() {
//         const searchValue = document.getElementById("searchBar").value.toLowerCase();
//         const rows = document.querySelectorAll('.tracking-table tbody tr');
        
//         rows.forEach(row => {
//             const rowText = Array.from(row.querySelectorAll('td'))
//                 .map(cell => cell.textContent.toLowerCase())
//                 .join(' ');
                
//             row.style.display = rowText.includes(searchValue) ? '' : 'none';
//         });
//     }
    
//     // Add search button event listener
//     document.querySelector(".search-button").addEventListener("click", filterTable);
    
//     // Add search bar enter key event listener
//     document.getElementById("searchBar").addEventListener("keypress", function(e) {
//         if (e.key === "Enter") {
//             e.preventDefault();
//             filterTable();
//         }
//     });
    
//     // Initialize with "All" filter
//     filterRowsByStatus("all");
    
//     // Close modal listeners for the applicant notification modal
//     document.querySelectorAll(".modal .close-button").forEach(button => {
//         button.addEventListener("click", function() {
//             this.closest(".modal").style.display = "none";
//         });
//     });
    
//     // Close modal when clicking outside
//     window.addEventListener("click", function(event) {
//         document.querySelectorAll(".modal").forEach(modal => {
//             if (event.target === modal) {
//                 modal.style.display = "none";
//             }
//         });
//     });
// });

// function approveLineManager(applicantId) {
//     fetch('/linemanager/approve-line-manager', {
//         method: 'POST',
//         headers: {
//             'Content-Type': 'application/json',
//         },
//         body: JSON.stringify({ applicantId })
//     })
//     .then(response => response.json())
//     .then(data => {
//         if (data.success) {
//             alert('Line Manager Approved!');
//             location.reload(); // Reload page to reflect the changes
//         } else {
//             alert('Failed to approve line manager.');
//         }
//     })
//     .catch(error => {
//         console.error('Error:', error);
//         alert('An error occurred.');
//     });
// }


//      // Function to extract applicantId from URL
//      function getApplicantIdFromURL() {
//             const path = window.location.pathname;
//             const parts = path.split('/'); // Split the URL into parts
//             const applicantId = parts[3]; // Assuming the URL is like /hr/evaluation-form/{applicantId}
//             return applicantId;
//         }

       

//         // Display the applicantId from the URL (if any) when the page is loaded
//         document.addEventListener('DOMContentLoaded', function () {
//             const applicantId = getApplicantIdFromURL(); // Extract applicantId from the URL
//             if (applicantId) {
//                 document.getElementById('applicantIdDisplay').textContent = `Applicant ID from URL: ${applicantId}`;
//             } else {
//                 document.getElementById('applicantIdDisplay').textContent = 'No Applicant ID found in URL.';
//             }
//         });

    

// // confirm button for modal for review
//         // Handle Confirm button click in the modal
//         function confirmSelection() {
//     const applicantName = document.getElementById("applicant-name").textContent.split(", ");
//     const lastName = applicantName[0];
//     const firstName = applicantName[1];

//     fetch("/update-applicant", {
//         method: "POST",
//         headers: {
//             "Content-Type": "application/json",
//         },
//         body: JSON.stringify({ lastName, firstName }),
//     })
//         .then(response => response.json())
//         .then(result => {
//             if (result.success) {
//                 alert(result.message);
//                 location.reload(); // Refresh the page
//             } else {
//                 alert("Failed to update applicant status. Please try again.");
//             }
//         })
//         .catch(error => {
//             console.error("Error:", error);
//             alert("An error occurred while updating the applicant status.");
//         });
// }




// function lineManagerInitialScreeningModal(userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl) {
//     console.log('Modal Data:', { userId, lastName, firstName, birthday, email, phoneNo, scores, verdict,  degreeUrl, certUrl, resumeUrl });
    
//     // If userId is missing or "undefined", log an error and stop further processing.
//     if (!userId || userId === "undefined") {
//         console.error("Invalid userId passed to modal:", userId);
//         alert("Error: Invalid User ID. Cannot display applicant details.");
//         return;
//     }
    
//     // Set the hidden input value for userId
//     document.getElementById('userId').value = userId;

//     // Set the hidden input value for jobId
//     document.getElementById('jobId').value = jobId; // Ensure jobId is passed to this function

//     // Optionally hide the applicantId container if not needed
//     let applicantIdContainer = document.getElementById("applicantId")?.parentElement;
//     if (applicantIdContainer) {
//         applicantIdContainer.style.display = "none";
//     }


//     // Populate visible applicant details
//     document.getElementById('applicant-name').textContent = `${lastName}, ${firstName}`;
//     document.getElementById('applicant-birthday').textContent = birthday || 'N/A';
//     document.getElementById('applicant-email').textContent = email || 'N/A';
//     document.getElementById('applicant-contact').textContent = phoneNo || 'N/A';

//     // Populate score details
//     document.getElementById('score-degree').textContent = scores.degree || 'N/A';
//     document.getElementById('score-experience').textContent = scores.experience || 'N/A';
//     document.getElementById('score-certifications').textContent = scores.certifications || 'N/A';
//     document.getElementById('score-hard-skills').textContent = scores.hardSkills || 'N/A';
//     document.getElementById('score-soft-skills').textContent = scores.softSkills || 'N/A';
//     document.getElementById('score-work-setup').textContent = scores.workSetup || 'N/A';
//     document.getElementById('score-availability').textContent = scores.availability || 'N/A';

//     document.getElementById('computation-verdict').textContent = verdict || 'N/A';

//     // Display documents separately
//     displayUploadedDocument(degreeUrl, "degree-doc", "degree-preview");
//     displayUploadedDocument(certUrl, "cert-doc", "cert-preview");
//     displayUploadedDocument(resumeUrl, "resume-doc", "resume-preview");

//     // Display the modal
//     document.getElementById('lineManagerInitialScreeningModalHtml').style.display = 'block';
// }


// function displayUploadedDocument(fileUrl, linkId, previewId) {
//     const docLink = document.getElementById(linkId);
//     const docPreview = document.getElementById(previewId);

//     if (!fileUrl) {
//         docLink.href = "#";
//         docLink.textContent = "No document uploaded";
//         docPreview.innerHTML = ""; // Clear preview
//         return;
//     }

//     docLink.href = fileUrl;
//     docLink.textContent = "View Uploaded Document";

//     const fileExtension = fileUrl.split('.').pop().toLowerCase();

//     if (["jpg", "jpeg", "png"].includes(fileExtension)) {
//         docPreview.innerHTML = `<img src="${fileUrl}" alt="Uploaded Image" style="max-width: 300px; border: 1px solid #ccc; padding: 5px;">`;
//     } else if (fileExtension === "pdf") {
//         docPreview.innerHTML = `<iframe src="${fileUrl}" width="100%" height="400px" style="border: none;"></iframe>`;
//     } else {
//         docPreview.innerHTML = ""; // No preview for other file types
//     }
// }

// function confirmP1LineManagerPassed() {
//     const userIdElement = document.getElementById("userId");
//     if (!userIdElement) {
//         alert("Error: userId is missing. Please try again.");
//         return;
//     }

//     const userIdRaw = userIdElement.value.trim();
//     console.log("User  ID (raw):", userIdRaw);

//     const userId = parseInt(userIdRaw, 10);
//     console.log("User  ID (parsed):", userId);

//     if (isNaN(userId)) {
//         alert("Error: User ID is invalid. Please try again.");
//         return;
//     }

//     fetch('/linemanager/applicant-tracker-jobposition/P1LineManagerPassed', {
//         method: 'POST', 
//         headers: {
//             'Content-Type': 'application/json',
//         },
//         body: JSON.stringify({ userId }), // Only send userId
//     })
//     .then(response => response.json())
//     .then(data => {
//         console.log("Server Response:", data);

//         if (data.success) {
//             const modal = document.getElementById('hrInitialScreeningModalHtml');
//             if (modal) {
//                 modal.style.display = 'none';
//             }
//             alert("Successfully updated applicant status!");
//         } else {
//             alert("Error updating applicant status: " + data.message);
//         }
//     })
//     .catch(error => {
//         console.error("Fetch Error:", error);
//         alert("Failed to update applicant status.");
//     });
// }

//     // Close the modal
//     document.querySelector('.review-close-button').addEventListener('click', function () {
//         document.getElementById('lineManagerInitialScreeningModalHtml').style.display = 'none';
//     });

//     // Close modal if clicked outside the modal content
//     window.addEventListener('click', function (event) {
//         const modal = document.getElementById('lineManagerInitialScreeningModalHtml');
//         if (event.target === modal) {
//             modal.style.display = 'none';
//         }
//     });
    
//     function sendNotification() {
//         alert("Sent notification to applicant");
//         closeModal('releaseJobOfferModal');
//     }

//     // Function for confirming onboarding
//     function confirmOnboarding() {
//         alert("Applicant moved to onboarding");
//         closeModal('moveToOnboardingModal');
//     }

//     // Function for confirming account setup
//     function confirmAccountSetup() {
//         alert("Account setup confirmed");
//         closeModal('accountSetupReminderModal');
//     }

//     document.addEventListener("DOMContentLoaded", function() {
//     const finalizeP1Button = document.getElementById("finalize-p1");
//     const finalizeP2Button = document.getElementById("finalize-p2");
//     const finalizeP3Button = document.getElementById("finalize-p3");

//     const modalP1 = document.getElementById("finalizeModalP1");
//     const modalP2 = document.getElementById("finalizeModalP2");
//     const modalP3 = document.getElementById("finalizeModalP3");

//     const closeButtonP1 = modalP1.querySelector(".close-button");
//     const backButtonP1 = modalP1.querySelector("#backButtonP1");
//     const confirmButtonP1 = modalP1.querySelector("#confirmButtonP1");

//     const closeButtonP2 = modalP2.querySelector(".close-button");
//     const backButtonP2 = modalP2.querySelector("#backButtonP2");
//     const confirmButtonP2 = modalP2.querySelector("#confirmButtonP2");

//     const closeButtonP3 = modalP3.querySelector(".close-button");
//     const backButtonP3 = modalP3.querySelector("#backButtonP3");
//     const confirmButtonP3 = modalP3.querySelector("#confirmButtonP3");

//     // Show the modal for P1 when the "P1: Finalize Review and Notify Applicants" button is clicked
//     finalizeP1Button.addEventListener("click", function() {
//         modalP1.style.display = "block";
//     });

//     // Show the modal for P2 when the "P2: Finalize Review and Notify Applicants" button is clicked
//     finalizeP2Button.addEventListener("click", function() {
//         modalP2.style.display = "block";
//     });

//     // Show the modal for P3 when the "P3: Finalize Review and Notify Applicants" button is clicked
//     finalizeP3Button.addEventListener("click", function() {
//         modalP3.style.display = "block";
//     });

//     // Close the modal for P1 when the close button (X) is clicked
//     closeButtonP1.addEventListener("click", function() {
//         modalP1.style.display = "none";
//     });

//     // Close the modal for P2 when the close button (X) is clicked
//     closeButtonP2.addEventListener("click", function() {
//         modalP2.style.display = "none";
//     });

//     // Close the modal for P3 when the close button (X) is clicked
//     closeButtonP3.addEventListener("click", function() {
//         modalP3.style.display = "none";
//     });

//     // Close the modal for P1 when the back button is clicked
//     backButtonP1.addEventListener("click", function() {
//         modalP1.style.display = "none";
//     });

//     // Close the modal for P2 when the back button is clicked
//     backButtonP2.addEventListener("click", function() {
//         modalP2.style.display = "none";
//     });

//     // Close the modal for P3 when the back button is clicked
//     backButtonP3.addEventListener("click", function() {
//         modalP3.style.display = "none";
//     });

//     // Handle the confirm action for P1 (you can add your own confirmation logic here)
//     confirmButtonP1.addEventListener("click", function() {
//         // Add your confirmation action here (e.g., notify applicants)
//         alert("P1 Review finalized and applicants notified.");
//         modalP1.style.display = "none"; // Close the modal after confirming
//     });

//     // Handle the confirm action for P2 (you can add your own confirmation logic here)
//     confirmButtonP2.addEventListener("click", function() {
//         // Add your confirmation action here (e.g., notify applicants)
//         alert("P2 Review finalized and applicants notified.");
//         modalP2.style.display = "none"; // Close the modal after confirming
//     });

//     // Handle the confirm action for P3 (you can add your own confirmation logic here)
//     confirmButtonP3.addEventListener("click", function() {
//         // Add your confirmation action here (e.g., notify applicants)
//         alert("P3 Review finalized and applicants notified.");
//         modalP3.style.display = "none"; // Close the modal after confirming
//     });

//     // Close the modal if the user clicks outside of it (for P1)
//     window.addEventListener("click", function(event) {
//         if (event.target == modalP1) {
//             modalP1.style.display = "none";
//         }
//     });

//     // Close the modal if the user clicks outside of it (for P2)
//     window.addEventListener("click", function(event) {
//         if (event.target == modalP2) {
//             modalP2.style.display = "none";
//         }
//     });

//     // Close the modal if the user clicks outside of it (for P3)
//     window.addEventListener("click", function(event) {
//         if (event.target == modalP3) {
//             modalP3.style.display = "none";
//         }
//     });
// });

// // Function to open the modal
// function openModal(name, age, email, contact) {
//     document.getElementById("applicant-name").value = name;
//     document.getElementById("applicant-age").value = age;
//     document.getElementById("applicant-email").value = email;
//     document.getElementById("applicant-contact").value = contact;
//     document.getElementById("reviewModal").style.display = "block";
// }

// // Add event listeners to all "For Review" buttons
// document.querySelectorAll(".btn-review").forEach(button => {
//     button.addEventListener("click", function() {
//         const parentRow = button.closest("tr");
//         const name = parentRow.querySelector("td:nth-child(2)").innerText.split("\n")[0];
//         const email = parentRow.querySelector("td:nth-child(2)").innerText.split("\n")[1];
//         const age = "N/A";  // Placeholder for age
//         const contact = "N/A";  // Placeholder for contact
//         openModal(name, age, email, contact);
//     });
// });

// // Function to close the modal
// document.querySelector(".review-close-button").addEventListener("click", function() {
//     document.getElementById("reviewModal").style.display = "none";
// });

// // Close modal when clicking outside of the modal content
// window.addEventListener("click", function(event) {
//     if (event.target == document.getElementById("reviewModal")) {
//         document.getElementById("reviewModal").style.display = "none";
//     }
// });

// // Back button functionality
// document.getElementById("backButton").addEventListener("click", function() {
//     document.getElementById("reviewModal").style.display = "none";
// });

// // Confirm button functionality
// document.getElementById("confirmButton").addEventListener("click", function() {
//     alert("Applicant has been selected and recommended for panel interview.");
//     document.getElementById("reviewModal").style.display = "none";
// });

</script>


</body>
</html>
