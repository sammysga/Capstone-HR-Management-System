 <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Applicant Tracker - Job Position</title>
    <link rel="stylesheet" href="/css/sidebar.css"> <!-- Linking Sidebar CSS -->
    <link rel="stylesheet" href="/css/linemanager.css"> <!-- Linking Main Content CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"> <!-- FontAwesome for icons -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <style>
/* Main Layout Styles */
body {
    font-family: 'Inter', sans-serif;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

.main-content {
    margin-left: 350px;
    padding: 20px;
    width: calc(100% - 350px);
    background-color: #FFFFFF;
}

/* Header Styles */
.header-section {
    margin-bottom: 10px;
    margin-left: 5px;
    font-size: 24px;
    text-align: left;
}

.subheader {
    font-size: 20px;
    margin-left: 5px;
    margin-bottom: 20px;
    color: #555;
}

/* Filter Section Styles */
.filter-section {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.right-section {
    display: flex;
    gap: 10px;
    margin-bottom: 15px;
}

.right-section button, 
.filter-button {
    padding: 10px 15px;
    font-size: 16px;
    font-weight: bold;
    border: none;
    background-color: #124A5C;
    color: white;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.right-section button:hover, 
.filter-button:hover {
    background-color: #B4E3E3;
    color: #124A5C;
}

.filter-button.active {
    background-color: #07ACB9;
    color: white;
}

/* Search Container Styles */
.search-container {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
}

.search-bar {
    padding: 8px;
    width: 370px;
    font-size: 16px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.search-button {
    margin-left: 10px;
    background-color: #124A5C;
    color: white;
    border: none;
    padding: 10px;
    cursor: pointer;
    font-size: 16px;
    border-radius: 4px;
}

.search-button:hover {
    background-color: #B4E3E3;
    color: #124A5C;
}

/* Divider Style */
.divider {
    height: 2px;
    background-color: #124A5C;
    margin: 10px 0;
}

/* Sort Section Styles */
.sort-section {
    display: flex;
    align-items: center;
    margin: 10px 0;
}

.sort-section label {
    margin-right: 10px;
    font-weight: bold;
}

.sort-section select {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: white;
}

/* Table Styles */
.tracking-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
}

.tracking-table th, 
.tracking-table td {
    padding: 10px;
    border: 1px solid #ddd;
    text-align: left;
}

.tracking-table th {
    background-color: #f5f5f5;
    font-weight: bold;
}

.tracking-table th:nth-child(1),
.tracking-table td:nth-child(1) {
    width: 10%;
}

.tracking-table th:nth-child(2),
.tracking-table td:nth-child(2) {
    width: 20%;
}

.tracking-table th:nth-child(3),
.tracking-table td:nth-child(3),
.tracking-table th:nth-child(4),
.tracking-table td:nth-child(4) {
    width: 15%;
}

.tracking-table tr:hover {
    background-color: #f1f1f1;
}

/* Status Circle Styles */
.status-circle {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    display: inline-block;
    margin-right: 8px;
}

.status-circle.green {
    background-color: green;
}

.status-circle.gray {
    background-color: gray;
}

/* Button Styles */
.btn-review, 
.btn-evaluation, 
.btn-onboarding, 
.btn-approve {
    background-color: white;
    color: black;
    border: 1px solid #124A5C;
    padding: 10px 20px;
    cursor: pointer;
    border-radius: 5px;
    font-size: 14px;
    transition: background-color 0.3s ease, color 0.3s ease;
    min-width: 150px;
    text-align: center;
    margin-top: 5px;
}

.btn-review:hover, 
.btn-evaluation:hover, 
.btn-onboarding:hover, 
.btn-approve:hover {
    background-color: #124A5C;
    color: white;
}

.set-interview-button {
    padding: 10px 20px;
    background-color: #124A5C;
    color: white;
    border: none;
    cursor: pointer;
    font-size: 16px;
    margin-top: 20px;
    display: block;
    width: 20%;
    text-align: center;
    border-radius: 5px;
}

.set-interview-button:hover {
    background-color: #B4E3E3;
    color: #124A5C;
}

.set-finalize-review-button {
    margin: 5px 10px;
    background-color: #124A5C;
    color: white;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
    border-radius: 5px;
    width: auto;
    min-width: 200px;
    white-space: nowrap;
    text-align: center;
    font-size: 16px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: background-color 0.3s ease;
}

.set-finalize-review-button:hover {
    background-color: #B4E3E3;
    color: #124A5C;
}

.finalize-container {
    display: flex;
    flex-direction: column;
    position: fixed;
    bottom: 20px;
    right: 20px;
    background-color: rgba(255, 255, 255, 0.9);
    border: 1px solid #ccc;
    padding: 10px;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    z-index: 1000;
}

/* Modal Styles */
.modal, .review-modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.4);
}

.modal-content, .review-modal-content {
    background-color: #fefefe;
    margin: 10% auto;
    padding: 20px;
    border: 1px solid #888;
    border-radius: 8px;
    width: 50%;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    text-align: center;
}

.close-button, .review-close-button {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
}

.close-button:hover,
.close-button:focus,
.review-close-button:hover,
.review-close-button:focus {
    color: black;
    text-decoration: none;
}

.modal-header, 
.modal-body, 
.modal-footer {
    text-align: center;
}

.modal-buttons, .review-modal-buttons {
    display: flex;
    justify-content: center;
    margin-top: 20px;
    gap: 10px;
}

.modal-buttons button, 
.review-modal-buttons button {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s ease;
}

.back-button, .review-modal-back-button {
    background-color: rgba(18, 74, 92, 0.5);
    color: white;
}

.confirm-button, .review-modal-pass-button {
    background-color: #124A5C;
    color: white;
}

.review-modal-reject-button {
    background-color: #dc3545;
    color: white;
}

.modal-buttons button:hover, 
.review-modal-buttons button:hover {
    opacity: 0.8;
}

.modal-question {
    text-align: center;
    margin: 20px 0;
    font-size: 16px;
}

/* Decision Disclaimer */
.decision-disclaimer {
    background-color: #f8f9fa;
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 10px;
    margin: 15px 0;
    text-align: left;
    font-size: 14px;
}

/* Scores Table Styles */
.scores-table {
    width: 100%;
    border-collapse: collapse;
    margin: 15px 0;
}

.scores-table th, 
.scores-table td {
    padding: 8px;
    border: 1px solid #ddd;
    text-align: left;
}

.scores-table th {
    background-color: #f5f5f5;
}

.computation-verdict {
    margin: 15px 0;
    padding: 10px;
    background-color: #e9f7fe;
    border-radius: 5px;
    text-align: center;
    font-size: 16px;
}

/* Styling for applicant status section */
.applicant-status-section {
    background-color: #FFFFFF;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    margin: 10px 5px 20px;
    display: none; /* Hidden by default */
}

/* Improved heading visibility */
.applicant-status-section h3.subheader {
    color: #124A5C;
    margin-bottom: 15px;
    font-size: 20px;
    font-weight: bold;
}
/* CSS to fix the header layout */
/* Enhanced CSS for section header and divider */
.applicant-status-section .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0; /* Remove bottom margin to place divider closer */
    width: 100%;
}

.applicant-status-section .section-header h3.subheader {
    margin: 0;
    color: #124A5C;
    font-weight: bold;
}

.applicant-status-section .right-section {
    display: flex;
    gap: 10px;
}

.applicant-status-section .right-section button {
    padding: 10px 15px;
    font-size: 16px;
    font-weight: bold;
    border: none;
    background-color: #124A5C;
    color: white;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.applicant-status-section .right-section button:hover {
    background-color: #B4E3E3;
    color: #124A5C;
}

/* Improved divider styles */
.applicant-status-section .divider {
    height: 2px;
    background-color: #124A5C;
    margin: 15px 0;
    width: 100%;
    display: block;
    clear: both;
}
/* Filter button styling */
.filter-button {
    padding: 10px 15px;
    font-size: 15px;
    font-weight: bold;
    border: none;
    background-color: #124A5C;
    color: white;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    min-width: 130px;
}

.filter-button:hover {
    background-color: #0d3a47;
}

.filter-button.active {
    background-color: #07ACB9;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

/* Make buttons in last column more prominent */
.btn-review, 
.btn-evaluation, 
.btn-onboarding, 
.btn-approve {
    background-color: white;
    color: #124A5C;
    border: 1px solid #124A5C;
    padding: 8px 15px;
    cursor: pointer;
    border-radius: 5px;
    font-size: 14px;
    font-weight: bold;
    transition: background-color 0.3s ease, color 0.3s ease;
    min-width: 120px;
    display: inline-block;
    text-align: center;
    margin-top: 5px;
}

.btn-review:hover, 
.btn-evaluation:hover, 
.btn-onboarding:hover, 
.btn-approve:hover {
    background-color: #124A5C;
    color: white;
}

/* Improved table styles */
.tracking-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.tracking-table th {
    background-color: #f5f5f5;
    color: #124A5C;
    font-weight: bold;
    padding: 12px 10px;
    border: 1px solid #ddd;
    text-align: left;
}

.tracking-table td {
    padding: 12px 10px;
    border: 1px solid #ddd;
    vertical-align: middle;
}

/* Better positioning of buttons in the last column */
.tracking-table td:last-child {
    position: relative;
}

.tracking-table td:last-child span {
    display: block;
    margin-bottom: 10px;
}

.tracking-table td:last-child div {
    text-align: right;
}

/* Sort section styling */
.sort-section {
    display: flex;
    align-items: center;
    margin: 10px 0;
}

.sort-section label {
    margin-right: 10px;
    font-weight: bold;
}

.sort-section select {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: white;
    min-width: 180px;
}

/* Additional Helper Classes */
.text-center {
    text-align: center;
}

.mt-10 {
    margin-top: 10px;
}

.mb-10 {
    margin-bottom: 10px;
}

/* Responsive adjustments */
@media (max-width: 1200px) {
    .main-content {
        margin-left: 250px;
        width: calc(100% - 250px);
    }
    
    .set-interview-button {
        width: 30%;
    }
}

@media (max-width: 768px) {
    .main-content {
        margin-left: 0;
        width: 100%;
    }
    
    .filter-section {
        flex-direction: column;
    }
    
    .search-bar {
        width: 100%;
    }
    
    .modal-content, .review-modal-content {
        width: 90%;
    }
    
    .set-interview-button {
        width: 100%;
    }

    .btn-toggle-status {
        padding: 6px 12px;
        background-color: #6c757d;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
    }
    
    .btn-toggle-status:hover {
        background-color: #5a6268;
    }
    .btn-toggle-status.status-passed {
    background-color: #28a745;
}

.btn-toggle-status.status-failed {
    background-color: #dc3545;
}

/* Styling for no data message */
.no-data-message {
    padding: 20px;
    background-color: #f8f9fa;
    border-left: 4px solid #07ACB9;
    color: #555;
    font-size: 16px;
    font-style: italic;
}
.no-data-message p {
    margin: 0;
}

/* Improved table empty state */
table.tracking-table tbody:empty::after {
    content: "No data available";
    display: block;
    text-align: center;
    padding: 20px;
    color: #6c757d;
    font-style: italic;
}

/* Score cell coloring */
td.high-score {
    color: green !important;
    font-weight: bold;
}

td.medium-score {
    color: blue !important;
}

td.low-score {
    color: orange !important;
}

/* Styling for no data message */
.no-data-message {
    padding: 20px;
    background-color: #f8f9fa;
    border-left: 4px solid #07ACB9;
    color: #555;
    font-size: 16px;
    font-style: italic;
}
.no-data-message p {
    margin: 0;
}


/* Improved table empty state */
table.tracking-table tbody:empty::after {
    content: "No data available";
    display: block;
    text-align: center;
    padding: 20px;
    color: #6c757d;
    font-style: italic;
}
}

.btn-change-status {
    background-color: #dc3545;
    color: white;
    border: 1px solid #c82333;
    padding: 10px 20px;
    cursor: pointer;
    border-radius: 5px;
    font-size: 14px;
    transition: background-color 0.3s ease, color 0.3s ease;
    min-width: 150px;
    text-align: center;
    margin-top: 5px;
}

.btn-change-status:hover {
    background-color: #bd2130;
    color: white;
}

/* Add these styles to your existing CSS section */

.applicant-info-section {
    background-color: #f9f9f9;
    padding: 15px;
    border-radius: 5px;
    margin-bottom: 20px;
}

.checklist-section {
    background-color: #f0f8ff;
    padding: 15px;
    border-radius: 5px;
    margin-bottom: 20px;
}

.onboarding-checklist {
    list-style-type: none;
    padding-left: 0;
    margin: 15px 0;
}

.onboarding-checklist li {
    padding: 5px 0;
}

.info-box {
    background-color: #e8f4f8;
    padding: 10px;
    border-left: 4px solid #07ACB9;
    margin-top: 15px;
    border-radius: 0 5px 5px 0;
}

.modal-content h1 {
    color: #124A5C;
    text-align: center;
    margin-bottom: 20px;
}

.modal-content h2 {
    color: #124A5C;
    margin-top: 0;
}

        /* P2 Email Modal Styles - Adding these for the Gmail integration */
        .recipient-item {
            padding: 10px;
            border-bottom: 1px solid rgba(255,255,255,0.3);
        }

        .recipient-item:last-child {
            border-bottom: none;
        }

        .recipient-name {
            font-weight: bold;
            margin-bottom: 2px;
        }

        .recipient-email {
            font-size: 14px;
            opacity: 0.8;
            margin-bottom: 2px;
        }

        .recipient-job {
            font-size: 12px;
            opacity: 0.7;
            font-style: italic;
        }



        btn-review:hover {
    background-color: #124A5C !important;
    color: white !important;
}

.btn-view-evaluation {
    background-color: #28a745;
    color: white;
    border: 1px solid #28a745;
    padding: 10px 20px;
    cursor: pointer;
    border-radius: 5px;
    font-size: 14px;
    transition: background-color 0.3s ease;
    width: 150px;
    text-align: center;
    margin-top: 5px;
}

.btn-view-evaluation:hover {
    background-color: #218838;
    color: white;
}

    </style>
</head>
<body>

<%- include('../../partials/linemanager_partials') %>

<!-- Main Content Section -->
<div class="main-content">

    <!-- Header Section -->
    <div class="header-section">
        <h2>Applicant Tracking</h2>
        <% if (applicants && applicants.length > 0) { %>
          <div class="subheader">
            <%= applicants[0].jobTitle %>
          </div>
        <% } else { %>
          <p>No applicant found.</p>
        <% } %>
    </div>
      
    <!-- Filter Buttons Section -->
    <div class="filter-section">
        <div class="right-section">
            <button id="filter-all" class="filter-button active">All</button>
            <button id="filter-forreview" class="filter-button">For Review</button>
            <button id="filter-forevaluation" class="filter-button">For Evaluation</button>
            <button id="filter-foronboarding" class="filter-button">For Onboarding</button>
        </div>
        <div class="search-container">
            <input type="text" id="searchBar" class="search-bar" placeholder="Search...">
            <button class="search-button">Search</button>
        </div>
    </div>
<!-- REPLACE the existing applicant-status-section with this updated structure -->
<div class="applicant-status-section" id="applicantStatusSection">
    <!-- Header section with flexbox -->
    <div class="section-header">
        <h3 class="subheader">Applicant Review Management</h3>
    </div>
    <!-- Divider placed immediately after the section-header -->
    <div class="divider"></div>
    
    <!-- P1 Review Section -->
    <div id="p1ReviewSection">
        <h3>List of Applicants on P1 Review</h3>
        <div class="right-section" id="p1FinalizeButtonContainer" style="display: none;">
            <button id="finalizeP1Button" class="set-finalize-review-button">Finalize P1 Review</button>
        </div>
        
        <h4>Awaiting for Action - P1</h4>
        <table class="tracking-table" id="p1AwaitingActionTable">
            <thead>
                <tr>
                    <th>Applicant No.</th>
                    <th>Last Name, First Name</th>
                    <th>Department</th>
                    <th>Position Applied</th>
                    <th>Total Score</th>
                    <th>Work Setup/Availability</th>
                    <th>Applicant Status</th>
                </tr>
            </thead>
            <tbody>
                <!-- Will be populated dynamically -->
            </tbody>
        </table>
        
       <h4 id="p1DeclaredResultsHeader">List of P1 Applicants on Review - Declared Results</h4>
        <table class="tracking-table" id="p1DeclaredResultsTable">
            <thead>
                <tr>
                    <th>Applicant No.</th>
                    <th>Last Name, First Name</th>
                    <th>Department</th>
                    <th>Position Applied</th>
                    <th>Total Score</th>
                    <th>Work Setup/Availability</th>
                    <th>Applicant Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <!-- Will be populated dynamically -->
            </tbody>
        </table>
    </div>
<!-- P3 Review Section -->
<div id="p3ReviewSection">
    <h3>List of Applicants on P3 Review</h3>
<div class="right-section" id="p3FinalizeButtonContainer" style="display: none;">
    <button id="finalizeP3Button" class="set-finalize-review-button">Finalize P3 Review</button>
</div>

    
    <h4>Awaiting for Action - P3</h4>
    <table class="tracking-table" id="p3AwaitingActionTable">
        <thead>
            <tr>
                <th>Applicant No.</th>
                <th>Last Name, First Name</th>
                <th>Department</th>
                <th>Position Applied</th>
                <th>Applicant Status</th>
            </tr>
        </thead>
        <tbody>
            <!-- Will be populated dynamically -->
        </tbody>
    </table>
    
    <h4>List of P3 Applicants on Review - Declared Results</h4>
    <table class="tracking-table" id="p3DeclaredResultsTable">
        <thead>
            <tr>
                <th>Applicant No.</th>
                <th>Last Name, First Name</th>
                <th>Department</th>
                <th>Position Applied</th>
                <th>Applicant Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <!-- Will be populated dynamically -->
        </tbody>
    </table>
</div>

    <div class="sort-section">
        <label for="sortOptions">Sort By:</label>
        <select id="sortOptions">
            <option value="ascending">Score - Ascending</option>
            <option value="descending">Score - Descending</option>
            <option value="alphabetical">Alphabetically</option>
        </select>
    </div>
</div>
    <!-- Table for Applicant Data (shown by default) -->
    <table class="tracking-table" id="mainApplicantTable" style="width: 100%; margin-bottom: 20px; border-collapse: collapse;">
        <thead>
            <tr>
                <th>Applicant No.</th>
                <th>Last Name, First Name</th>
                <th>Department</th>
                <th>Position Applied</th>
                <th>Applicant Status & Actions</th>
            </tr>
        </thead>
        <tbody>
            <% if (applicants && applicants.length) { %>
                <% applicants.forEach((applicant, index) => { %>
                    <tr class="applicant-row" 
                        data-phase="<%= applicant.applicantStatus && applicant.applicantStatus.startsWith('P1') ? 'P1' : applicant.applicantStatus && applicant.applicantStatus.startsWith('P2') ? 'P2' : applicant.applicantStatus && applicant.applicantStatus.startsWith('P3') ? 'P3' : 'other' %>" 
                        data-status="<%= applicant.applicantStatus %>"
                        data-userid="<%= applicant.userId %>"
                        data-name="<%= applicant.lastName %>, <%= applicant.firstName %>"
                        data-score="<%= applicant.initialScreeningAssessment && applicant.initialScreeningAssessment.totalScore !== 'N/A' ? applicant.initialScreeningAssessment.totalScore : '' %>">
                        <td><%= index + 1 %></td>
                        <td>
                            <%= applicant.lastName %>, <%= applicant.firstName %>
                            <br>
                            <small style="color: #555;"><%= applicant.userEmail || 'Email not available' %></small>
                        </td>
                        
                        <td><%= applicant.deptName %></td> <!-- Display department name -->
                        <td><%= applicant.jobTitle %></td> <!-- Display job title -->
                        <td>
<!-- Display Applicant Status -->
<span><strong>Status:</strong> <%= applicant.applicantStatus || 'Pending' %></span>
<div style="margin-top: 10px;">
    <% if (applicant.applicantStatus && applicant.applicantStatus.startsWith('P1 - Awaiting for Line Manager Action; HR PASSED')) { %>
        <!-- For Review Button -->
        <button 
            class="btn-review" 
            onclick="lineManagerInitialScreeningModal(
                    '<%= applicant.userId %>', 
                    '<%= applicant.lastName %>', 
                    '<%= applicant.firstName %>', 
                    '<%= applicant.birthDate %>', 
                    '<%= applicant.userEmail %>', 
                    '<%= applicant.phoneNo %>', 
                    {
                        degree: '<%= applicant.initialScreeningAssessment.degreeScore %>',
                        experience: '<%= applicant.initialScreeningAssessment.experienceScore %>',
                        certifications: '<%= applicant.initialScreeningAssessment.certificationScore %>',
                        hardSkills: '<%= applicant.initialScreeningAssessment.hardSkillsScore %>',
                        softSkills: '<%= applicant.initialScreeningAssessment.softSkillsScore %>',
                        workSetup: '<%= applicant.initialScreeningAssessment.workSetupScore %>',
                        availability: '<%= applicant.initialScreeningAssessment.availabilityScore %>'
                    }, 
                    '<%= applicant.initialScreeningAssessment.totalScore %>', 
                    '<%= applicant.initialScreeningAssessment.degree_url %>',
                    '<%= applicant.initialScreeningAssessment.cert_url %>',
                    '<%= applicant.initialScreeningAssessment.resume_url %>'
                )
            ">
            For Review
        </button>
    <% } else if (applicant.applicantStatus === 'P2 - Awaiting for HR Evaluation') { %>
        <!-- For Evaluation Button -->
        <a href="/hr/evaluation-form/<%= applicant.applicantId %>">
            <button class="btn-evaluation">For Evaluation</button>
        </a>
    <% } else if (applicant.applicantStatus && applicant.applicantStatus.startsWith('P1 - Awaiting for Line Manager Action')) { %>
        <!-- Approve Button for Line Manager Action -->
        <button 
            class="btn-approve" 
            onclick="approveLineManager('<%= applicant.applicantId %>')">
            Approve
        </button>
    <% } else if (applicant.applicantStatus === 'P3 - Awaiting for Line Manager Evaluation') { %>
        <!-- For Evaluation Button -->
         <a href="/interview-form/<%= applicant.applicantId %>">
            <button class="btn-evaluation">For Evaluation</button>
        </a>
    <% } else if (applicant.applicantStatus && applicant.applicantStatus.startsWith('P3 - Line Manager Evaluation Accomplished')) { %>
        <!-- For Review Button that redirects to review filter -->
        <button 
            class="btn-review" 
            onclick="goToP3ReviewFilter()"
            style="background-color: white; color: black; border: 1px solid #124A5C; padding: 10px 20px; cursor: pointer; border-radius: 5px; font-size: 14px; transition: background-color 0.3s ease, color 0.3s ease; width: 150px; text-align: center;">
            For Review
        </button>
    <% } else if (applicant.applicantStatus === 'P3 - PASSED') { %>
        <!-- Job Offer Button -->
        <button 
            class="btn-job-offer" 
            onclick="openSendJobOfferModal('<%= applicant.applicantId %>', '<%= applicant.lastName %>, <%= applicant.firstName %>', '<%= applicant.userEmail %>', '<%= applicant.jobTitle %>', '<%= applicant.deptName %>')">
            Send Job Offer
        </button>
    <% } %>
</div>
</td>   
                    </tr>
                <% }); %>
            <% } else { %>
                <tr>
                    <td colspan="5">No applicants found.</td>
                </tr>
            <% } %>
        </tbody>
    </table>

    <h2 class="header-section" id="onboardingHeader" style="margin-top: 30px; margin-bottom: 10px;">Onboarding</h2>

    <table class="tracking-table" id="onboardingTable" style="width: 100%; border-collapse: collapse;">
        <thead>
            <tr>
                <th>Application No.</th>
                <th>Last Name, First Name</th>
                <th>Department</th>
                <th>Position Applied</th>
                <th>Application Status & Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>APP00018</td>
                <td>William Scott<br>williamscott@gmail.com</td>
                <td>IT</td>
                <td>Data Analyst</td>
                <td>First Day Checklist Sent</td>
            </tr>
            <tr class="status-for-onboarding">
                <td>APP00019</td>
                <td>Grace Taylor<br>gracetaylor@gmail.com</td>
                <td>IT</td>
                <td>Data Analyst</td>
                <td>Checklist Accomplished <button class="btn-onboarding" onclick="openModal('accountSetupReminderModal')">For Onboarding</button></td>
            </tr>
            <tr>
                <td>APP00020</td>
                <td>Ella Martinez<br>ellamartinez@gmail.com</td>
                <td>IT</td>
                <td>Data Analyst</td>
                <td>Account Created</td>
            </tr>
        </tbody>
    </table>

    <button class="set-interview-button" onclick="setInterviewAvailabilities()">Set Interview Availabilities on Calendly</button>

    <!-- Modal for notifying applicants -->
<!-- Modal for finalizing review and notifying applicants -->
<div id="notifyApplicantsModal" class="modal">
    <div class="modal-content">
        <span class="close-button" onclick="closeModal('notifyApplicantsModal')">&times;</span>
        <h2>Confirm Finalization</h2>
        <p>You are about to finalize the review process and notify all applicants who were not selected that they have not advanced to the next stage. This action is irreversible. Are you sure you want to proceed?</p>
        <div class="modal-buttons">
            <button id="backButton" class="back-button" onclick="closeModal('notifyApplicantsModal')">Back</button>
            <button id="confirmButton" class="confirm-button">Confirm</button>
        </div>
    </div>
</div>

    <!-- Automated Email #1 Modal for P1: Finalize Review and Notify Applicants -->
<div id="finalizeModalP1" class="modal">
    <div class="modal-content">
        <span class="close-button" onclick="closeModal('finalizeModalP1')">&times;</span>
        <h2>Confirm P1 Review Finalization</h2>
        <p>You are about to finalize the P1 review process using Gmail compose. This will prepare customizable email templates and open Gmail with pre-filled recipient information for both passed and failed applicants. Are you sure you want to proceed?</p>
        
        <div style="background-color: #e7f3ff; padding: 15px; border-radius: 5px; margin: 15px 0;">
            <h4 style="color: #0066cc; margin-top: 0;">📧 Gmail Integration Process</h4>
            <ol style="color: #0066cc; margin-bottom: 0;">
                <li>Customize email templates for passed applicants</li>
                <li>Gmail will open with all emails pre-filled</li>
                <li>Customize email templates for failed applicants</li>
                <li>Gmail will open with rejection emails pre-filled</li>
                <li>Send emails directly from Gmail</li>
                <li>Return here to update database</li>
            </ol>
        </div>
        
        <div class="modal-buttons">
            <button id="backButtonP1" class="back-button" onclick="closeModal('finalizeModalP1')">Back</button>
            <button id="confirmButtonP1" class="confirm-button" onclick="startGmailIntegrationFlow()">Start Gmail Process</button>
        </div>
    </div>
</div>

<!-- ADD ALL GMAIL MODALS RIGHT AFTER YOUR EXISTING MODAL -->
<!-- Gmail Compose Modal for Passed Applicants -->
<div id="emailPassedModal" class="modal">
    <div class="modal-content" style="width: 85%; max-width: 900px;">
        <span class="close-button" onclick="closeModal('emailPassedModal')">&times;</span>
        <h2 style="color: #28a745;">✅ Gmail Compose - Congratulations Email</h2>
        
        <div style="background-color: #d4edda; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h4 style="color: #155724; margin-top: 0; display: flex; align-items: center;">
                <i class="fas fa-users" style="margin-right: 10px;"></i>
                Recipients (<span id="passedRecipientsCount">0</span> applicants):
            </h4>
            <div id="passedRecipientsList" style="color: #155724; max-height: 180px; overflow-y: auto; background: rgba(255,255,255,0.3); padding: 15px; border-radius: 5px;">
                <!-- Will be populated dynamically -->
            </div>
        </div>
        
        <div style="margin: 25px 0;">
            <label for="passedEmailSubject" style="display: block; font-weight: bold; margin-bottom: 8px;">
                <i class="fas fa-tag" style="margin-right: 8px;"></i>Email Subject:
            </label>
            <input 
                type="text" 
                id="passedEmailSubject" 
                style="width: 100%; padding: 12px; border: 2px solid #28a745; border-radius: 6px; font-size: 16px;"
                value="Congratulations! You've Passed the Initial Screening - Prime Infrastructure"
            >
        </div>
        
        <div style="margin: 25px 0;">
            <label for="passedEmailTemplate" style="display: block; font-weight: bold; margin-bottom: 8px;">
                <i class="fas fa-edit" style="margin-right: 8px;"></i>Email Template:
            </label>
            <div style="margin: 10px 0; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
                <small style="color: #6c757d;">
                    <strong>Available placeholders:</strong> 
                    <code>{applicantName}</code>, <code>{jobTitle}</code>, <code>{companyName}</code>
                </small>
            </div>
            <textarea 
                id="passedEmailTemplate" 
                rows="14" 
                style="width: 100%; padding: 15px; border: 2px solid #28a745; border-radius: 6px; font-family: Arial, sans-serif; font-size: 14px; line-height: 1.5;"
                placeholder="Email template will be loaded here..."
            ></textarea>
        </div>

        <div style="background: linear-gradient(135deg, #e7f3ff, #f0f8ff); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #007bff;">
            <h4 style="color: #0066cc; margin-top: 0; display: flex; align-items: center;">
                <i class="fab fa-google" style="margin-right: 10px; font-size: 20px;"></i>
                Gmail Integration Ready
            </h4>
            <p style="color: #0066cc; margin-bottom: 0; line-height: 1.6;">
                Clicking "Open Gmail Compose" will open Gmail in a new tab with:<br>
                • <strong>All recipient emails</strong> automatically added to "To:" field<br>
                • <strong>Subject line</strong> pre-filled<br>
                • <strong>Email template</strong> ready in the message body
            </p>
        </div>
        
        <div class="modal-buttons">
            <button class="back-button" onclick="closeModal('emailPassedModal')">
                <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
            </button>
            <button class="confirm-button" onclick="openGmailForPassed()" style="background: linear-gradient(135deg, #db4437, #c23321); border: none; font-size: 16px; padding: 12px 25px;">
                <i class="fab fa-google" style="margin-right: 8px;"></i>
                Open Gmail Compose
            </button>
        </div>
    </div>
</div>

<!-- Gmail Compose Modal for Failed Applicants -->
<div id="emailFailedModal" class="modal">
    <div class="modal-content" style="width: 85%; max-width: 900px;">
        <span class="close-button" onclick="closeModal('emailFailedModal')">&times;</span>
        <h2 style="color: #dc3545;">❌ Gmail Compose - Notification Email</h2>
        
        <div style="background-color: #f8d7da; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h4 style="color: #721c24; margin-top: 0; display: flex; align-items: center;">
                <i class="fas fa-users" style="margin-right: 10px;"></i>
                Recipients (<span id="failedRecipientsCount">0</span> applicants):
            </h4>
            <div id="failedRecipientsList" style="color: #721c24; max-height: 180px; overflow-y: auto; background: rgba(255,255,255,0.3); padding: 15px; border-radius: 5px;">
                <!-- Will be populated dynamically -->
            </div>
        </div>
        
        <div style="margin: 25px 0;">
            <label for="failedEmailSubject" style="display: block; font-weight: bold; margin-bottom: 8px;">
                <i class="fas fa-tag" style="margin-right: 8px;"></i>Email Subject:
            </label>
            <input 
                type="text" 
                id="failedEmailSubject" 
                style="width: 100%; padding: 12px; border: 2px solid #dc3545; border-radius: 6px; font-size: 16px;"
                value="Thank You for Your Interest - Prime Infrastructure"
            >
        </div>
        
        <div style="margin: 25px 0;">
            <label for="failedEmailTemplate" style="display: block; font-weight: bold; margin-bottom: 8px;">
                <i class="fas fa-edit" style="margin-right: 8px;"></i>Email Template:
            </label>
            <div style="margin: 10px 0; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
                <small style="color: #6c757d;">
                    <strong>Available placeholders:</strong> 
                    <code>{applicantName}</code>, <code>{jobTitle}</code>, <code>{companyName}</code>
                </small>
            </div>
            <textarea 
                id="failedEmailTemplate" 
                rows="14" 
                style="width: 100%; padding: 15px; border: 2px solid #dc3545; border-radius: 6px; font-family: Arial, sans-serif; font-size: 14px; line-height: 1.5;"
                placeholder="Email template will be loaded here..."
            ></textarea>
        </div>

        <div style="background: linear-gradient(135deg, #e7f3ff, #f0f8ff); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #007bff;">
            <h4 style="color: #0066cc; margin-top: 0; display: flex; align-items: center;">
                <i class="fab fa-google" style="margin-right: 10px; font-size: 20px;"></i>
                Gmail Integration Ready
            </h4>
            <p style="color: #0066cc; margin-bottom: 0; line-height: 1.6;">
                Clicking "Open Gmail Compose" will open Gmail in a new tab with:<br>
                • <strong>All recipient emails</strong> automatically added to "To:" field<br>
                • <strong>Subject line</strong> pre-filled<br>
                • <strong>Email template</strong> ready in the message body
            </p>
        </div>
        
        <div class="modal-buttons">
            <button class="back-button" onclick="closeModal('emailFailedModal')">
                <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
            </button>
            <button class="confirm-button" onclick="openGmailForFailed()" style="background: linear-gradient(135deg, #db4437, #c23321); border: none; font-size: 16px; padding: 12px 25px;">
                <i class="fab fa-google" style="margin-right: 8px;"></i>
                Open Gmail Compose
            </button>
        </div>
    </div>
</div>

<!-- Status Update Modal -->
<div id="statusUpdateModal" class="modal">
    <div class="modal-content" style="width: 70%; max-width: 600px;">
        <h2 style="text-align: center; color: #007bff;">
            <i class="fab fa-google" style="color: #db4437; margin-right: 10px;"></i>
            Gmail Compose Opened
        </h2>
        
        <div style="margin: 30px 0; text-align: center;">
            <div style="font-size: 64px; color: #db4437; margin-bottom: 20px;">
                <i class="fab fa-google"></i>
            </div>
            <p style="font-size: 18px; margin-bottom: 20px;">Gmail compose window has been opened in a new tab with your email pre-filled.</p>
            
            <div style="background-color: #e3f2fd; padding: 25px; border-radius: 10px; margin: 25px 0; border-left: 5px solid #2196f3;">
                <h4 style="color: #1976d2; margin-top: 0;">📋 Next Steps:</h4>
                <ol style="text-align: left; margin: 15px 0; color: #1976d2; line-height: 1.8;">
                    <li><strong>Switch to Gmail tab</strong> - Check if Gmail opened correctly</li>
                    <li><strong>Review recipient list</strong> - Verify all emails are in "To:" field</li>
                    <li><strong>Check subject line</strong> - Modify if needed</li>
                    <li><strong>Review email content</strong> - Make final adjustments</li>
                    <li><strong>Send emails</strong> - Click Gmail's send button</li>
                    <li><strong>Return here</strong> - Click "Update Database" below</li>
                </ol>
            </div>
        </div>
        
        <div style="background: linear-gradient(135deg, #fff3cd, #ffeaa7); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #f39c12;">
            <h4 style="color: #856404; margin-top: 0; display: flex; align-items: center;">
                <i class="fas fa-exclamation-triangle" style="margin-right: 10px;"></i>
                Important
            </h4>
            <p style="color: #856404; margin-bottom: 0; line-height: 1.6;">
                <strong>After sending emails in Gmail</strong>, return here and click "Update Database" to finalize the applicant statuses in your system.
            </p>
        </div>
        
        <div class="modal-buttons">
            <button class="back-button" onclick="closeModal('statusUpdateModal')">
                <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel Process
            </button>
            <button class="confirm-button" onclick="updateApplicantStatuses()" style="background: linear-gradient(135deg, #28a745, #20c997); font-size: 16px; padding: 12px 25px;">
                <i class="fas fa-database" style="margin-right: 8px;"></i>
                Update Database
            </button>
        </div>
    </div>
</div>
<!-- P1 - Line Manager Review Modal -->
<div id="lineManagerInitialScreeningModalHtml" class="review-modal">
    <div class="review-modal-content">
        <span class="review-close-button">&times;</span>
        <h2>P1: Initial Screening Score Breakdown</h2> 
        <div class="divider"></div>
        <div class="applicant-details">
            <input type="hidden" id="userId">
            <input type="hidden" id="jobId">            
            <input type="hidden" id="applicantId">

            <p><strong>Name:</strong> <span id="applicant-name"></span></p>
            <p><strong>Birthday:</strong> <span id="applicant-birthday"></span></p>
            <p><strong>Email:</strong> <span id="applicant-email"></span></p>
            <p><strong>Contact No.:</strong> <span id="applicant-contact"></span></p>
        </div>

    <h4>HR Online Assessment Form Breakdown</h4>         
<h4>Initial Screening Scores</h4>           
<table class="scores-table">              
    <thead>                  
        <tr>                      
            <th>Criteria</th>                      
            <th>Score</th>                  
        </tr>              
    </thead>              
    <tbody>                  
        <tr> 
            <td>Industry Specific Degree</td> 
            <td id="score-degree"></td> 
        </tr>                  
        <tr> 
            <td>Experiences</td> 
            <td id="score-experience"></td> 
        </tr>                  
        <tr> 
            <td>Certifications</td> 
            <td id="score-certifications"></td> 
        </tr>                  
        <tr> 
            <td>Hard Skills</td> 
            <td id="score-hard-skills"></td> 
        </tr>                  
        <tr> 
            <td>Soft Skills</td> 
            <td id="score-soft-skills"></td> 
        </tr>                  
        <tr> 
            <td>Work Setup</td> 
            <td id="score-work-setup"></td> 
        </tr>                  
        <tr> 
            <td>Availability</td> 
            <td id="score-availability"></td> 
        </tr>              
    </tbody>          
</table>           

<div class="computation-verdict">              
    <strong>Computation Verdict - <span id="computation-verdict"></span></strong>          
</div>           

<h4>Uploaded Documents</h4>         
<p><strong>Degree:</strong> <a id="degree-doc" href="#" target="_blank">No document uploaded</a></p>         
<div id="degree-preview" style="margin-top: 10px;"></div>          

<p><strong>Certification:</strong> <a id="cert-doc" href="#" target="_blank">No document uploaded</a></p>         
<div id="cert-preview" style="margin-top: 10px;"></div>          

<p><strong>Resume:</strong> <a id="resume-doc" href="#" target="_blank">No document uploaded</a></p>         
<div id="resume-preview" style="margin-top: 10px;"></div>  

<!-- ADDED: Additional Document Section (only show if exists) -->
<div id="lm-addtl-document-section" style="display: none;">
    <p><strong>Additional Document:</strong> <a id="lm-addtl-doc" href="#" target="_blank">No additional document</a></p>
    <div id="lm-addtl-preview" style="margin-top: 10px;"></div>
    <div class="addtl-document-section" style="background-color: #e8f4f8; padding: 15px; border-radius: 5px; margin-top: 15px;">
        <h5 style="margin-top: 0; color: #124A5C;">HR Remarks for Additional Document:</h5>
        <p id="lm-hr-remarks-display" style="font-style: italic; color: #555;"></p>
    </div>
</div>

<h4>Line Manager Verification</h4> 
<div style="margin: 10px 0;">     
    <label>         
        <input type="checkbox" id="lineManagerVerificationCheckbox" required>         
        I confirm that I have further reviewed the applicant's documents and confirm the applicant is eligible to proceed to the next phase for interview.     
    </label>     
    <p style="font-size: 0.9em; color: #c00; margin-top: 5px;">         
        * This checkbox must be ticked to proceed with endorsing the applicant for interview.     
    </p> 
</div>  

<div style="margin-top: 10px;">     
    <label for="lineManagerComments"><strong>Comments:</strong></label><br>     
    <textarea id="lineManagerComments" rows="4" style="width: 100%;"></textarea> 
</div>           

<h4>Decision</h4>         
<p><strong>Would you like to pass or reject this applicant for the HR interview?</strong></p>          

<div class="decision-disclaimer">             
    <p>💡 <strong>Important:</strong> Pressing <strong>"Pass"</strong> will mark the applicant as likely to proceed to the HR interview stage, but this decision can still be changed before finalizing. Likewise, pressing <strong>"Reject"</strong> will mark the applicant as failed, but this can also be modified until the finalization step.</p>             
    <p>⚠️ <strong>Finalization Note:</strong> Once you press "Finalize," all passed and failed applicants will be officially informed of their status. Please double-check before proceeding.</p>         
</div>          

<div class="review-modal-buttons">             
    <button id="backButton" class="review-modal-back-button">Back</button>             
    <button id="rejectButton" class="review-modal-reject-button" onclick="rejectApplicant()">Reject</button>             
    <button id="passButton" class="review-modal-pass-button" onclick="passApplicant()">Pass</button>         
</div>
    </div>
</div>


    <!-- Modal for P2: Finalize Review and Notify Applicants -->
    <div id="finalizeModalP2" class="modal">
        <div class="modal-content">
            <span class="close-button">&times;</span>
            <h2>Confirm Final Review and Notify Applicants</h2>
            <p>You are about to finalize the review process and notify all applicants who were not selected that they have not advanced to the next stage. This action is irreversible. Are you sure you want to proceed?</p>
            <div class="modal-buttons">
                <button id="backButtonP2" class="back-button">Back</button>
                <button id="confirmButtonP2" class="confirm-button">Confirm</button>
            </div>
        </div>
    </div>

<!-- FIXED: P3 Gmail Finalization Modal (add this after the P1 modal) -->
<div id="finalizeModalP3" class="modal">
    <div class="modal-content">
        <span class="close-button" onclick="closeModal('finalizeModalP3')">&times;</span>
        <h2>Confirm P3 Review Finalization</h2>
        <p>You are about to finalize the P3 review process using Gmail compose. This will prepare customizable email templates and open Gmail with pre-filled recipient information for both passed and failed applicants. Are you sure you want to proceed?</p>
        
        <div style="background-color: #e7f3ff; padding: 15px; border-radius: 5px; margin: 15px 0;">
            <h4 style="color: #0066cc; margin-top: 0;">📧 Gmail Integration Process</h4>
            <ol style="color: #0066cc; margin-bottom: 0;">
                <li>Customize email templates for passed applicants</li>
                <li>Gmail will open with all emails pre-filled</li>
                <li>Customize email templates for failed applicants</li>
                <li>Gmail will open with rejection emails pre-filled</li>
                <li>Send emails directly from Gmail</li>
                <li>Return here to update database</li>
            </ol>
        </div>
        
        <div class="modal-buttons">
            <button id="backButtonP3" class="back-button" onclick="closeModal('finalizeModalP3')">Back</button>
            <button id="confirmButtonP3" class="confirm-button" onclick="startP3GmailIntegrationFlow()">Start Gmail Process</button>
        </div>
    </div>
</div>

<!-- FIXED: Add P3 Gmail Compose Modal for Passed Applicants -->
<div id="emailP3PassedModal" class="modal">
    <div class="modal-content" style="width: 85%; max-width: 900px;">
        <span class="close-button" onclick="closeModal('emailP3PassedModal')">&times;</span>
        <h2 style="color: #28a745;">✅ Gmail Compose - P3 Congratulations Email</h2>
        
        <div style="background-color: #d4edda; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h4 style="color: #155724; margin-top: 0; display: flex; align-items: center;">
                <i class="fas fa-users" style="margin-right: 10px;"></i>
                Recipients (<span id="p3PassedRecipientsCount">0</span> applicants):
            </h4>
            <div id="p3PassedRecipientsList" style="color: #155724; max-height: 180px; overflow-y: auto; background: rgba(255,255,255,0.3); padding: 15px; border-radius: 5px;">
                <!-- Will be populated dynamically -->
            </div>
        </div>
        
        <div style="margin: 25px 0;">
            <label for="p3PassedEmailSubject" style="display: block; font-weight: bold; margin-bottom: 8px;">
                <i class="fas fa-tag" style="margin-right: 8px;"></i>Email Subject:
            </label>
            <input 
                type="text" 
                id="p3PassedEmailSubject" 
                style="width: 100%; padding: 12px; border: 2px solid #28a745; border-radius: 6px; font-size: 16px;"
                value="Congratulations! Job Offer - Prime Infrastructure"
            >
        </div>
        
        <div style="margin: 25px 0;">
            <label for="p3PassedEmailTemplate" style="display: block; font-weight: bold; margin-bottom: 8px;">
                <i class="fas fa-edit" style="margin-right: 8px;"></i>Email Template:
            </label>
            <div style="margin: 10px 0; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
                <small style="color: #6c757d;">
                    <strong>Available placeholders:</strong> 
                    <code>{applicantName}</code>, <code>{jobTitle}</code>, <code>{companyName}</code>
                </small>
            </div>
            <textarea 
                id="p3PassedEmailTemplate" 
                rows="14" 
                style="width: 100%; padding: 15px; border: 2px solid #28a745; border-radius: 6px; font-family: Arial, sans-serif; font-size: 14px; line-height: 1.5;"
                placeholder="Email template will be loaded here..."
            ></textarea>
        </div>

        <div style="background: linear-gradient(135deg, #e7f3ff, #f0f8ff); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #007bff;">
            <h4 style="color: #0066cc; margin-top: 0; display: flex; align-items: center;">
                <i class="fab fa-google" style="margin-right: 10px; font-size: 20px;"></i>
                Gmail Integration Ready
            </h4>
            <p style="color: #0066cc; margin-bottom: 0; line-height: 1.6;">
                Clicking "Open Gmail Compose" will open Gmail in a new tab with:<br>
                • <strong>All recipient emails</strong> automatically added to "To:" field<br>
                • <strong>Subject line</strong> pre-filled<br>
                • <strong>Email template</strong> ready in the message body
            </p>
        </div>
        
        <div class="modal-buttons">
            <button class="back-button" onclick="closeModal('emailP3PassedModal')">
                <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
            </button>
            <button class="confirm-button" onclick="openGmailForP3Passed()" style="background: linear-gradient(135deg, #db4437, #c23321); border: none; font-size: 16px; padding: 12px 25px;">
                <i class="fab fa-google" style="margin-right: 8px;"></i>
                Open Gmail Compose
            </button>
        </div>
    </div>
</div>

<!-- FIXED: Add P3 Gmail Compose Modal for Failed Applicants -->
<div id="emailP3FailedModal" class="modal">
    <div class="modal-content" style="width: 85%; max-width: 900px;">
        <span class="close-button" onclick="closeModal('emailP3FailedModal')">&times;</span>
        <h2 style="color: #dc3545;">❌ Gmail Compose - P3 Notification Email</h2>
        
        <div style="background-color: #f8d7da; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h4 style="color: #721c24; margin-top: 0; display: flex; align-items: center;">
                <i class="fas fa-users" style="margin-right: 10px;"></i>
                Recipients (<span id="p3FailedRecipientsCount">0</span> applicants):
            </h4>
            <div id="p3FailedRecipientsList" style="color: #721c24; max-height: 180px; overflow-y: auto; background: rgba(255,255,255,0.3); padding: 15px; border-radius: 5px;">
                <!-- Will be populated dynamically -->
            </div>
        </div>
        
        <div style="margin: 25px 0;">
            <label for="p3FailedEmailSubject" style="display: block; font-weight: bold; margin-bottom: 8px;">
                <i class="fas fa-tag" style="margin-right: 8px;"></i>Email Subject:
            </label>
            <input 
                type="text" 
                id="p3FailedEmailSubject" 
                style="width: 100%; padding: 12px; border: 2px solid #dc3545; border-radius: 6px; font-size: 16px;"
                value="Thank You for Your Interest - Interview Process Complete"
            >
        </div>
        
        <div style="margin: 25px 0;">
            <label for="p3FailedEmailTemplate" style="display: block; font-weight: bold; margin-bottom: 8px;">
                <i class="fas fa-edit" style="margin-right: 8px;"></i>Email Template:
            </label>
            <div style="margin: 10px 0; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
                <small style="color: #6c757d;">
                    <strong>Available placeholders:</strong> 
                    <code>{applicantName}</code>, <code>{jobTitle}</code>, <code>{companyName}</code>
                </small>
            </div>
            <textarea 
                id="p3FailedEmailTemplate" 
                rows="14" 
                style="width: 100%; padding: 15px; border: 2px solid #dc3545; border-radius: 6px; font-family: Arial, sans-serif; font-size: 14px; line-height: 1.5;"
                placeholder="Email template will be loaded here..."
            ></textarea>
        </div>

        <div style="background: linear-gradient(135deg, #e7f3ff, #f0f8ff); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #007bff;">
            <h4 style="color: #0066cc; margin-top: 0; display: flex; align-items: center;">
                <i class="fab fa-google" style="margin-right: 10px; font-size: 20px;"></i>
                Gmail Integration Ready
            </h4>
            <p style="color: #0066cc; margin-bottom: 0; line-height: 1.6;">
                Clicking "Open Gmail Compose" will open Gmail in a new tab with:<br>
                • <strong>All recipient emails</strong> automatically added to "To:" field<br>
                • <strong>Subject line</strong> pre-filled<br>
                • <strong>Email template</strong> ready in the message body
            </p>
        </div>
        
        <div class="modal-buttons">
            <button class="back-button" onclick="closeModal('emailP3FailedModal')">
                <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
            </button>
            <button class="confirm-button" onclick="openGmailForP3Failed()" style="background: linear-gradient(135deg, #db4437, #c23321); border: none; font-size: 16px; padding: 12px 25px;">
                <i class="fab fa-google" style="margin-right: 8px;"></i>
                Open Gmail Compose
            </button>
        </div>
    </div>
</div>

<!-- FIXED: P3 Status Update Modal -->
<div id="p3StatusUpdateModal" class="modal">
    <div class="modal-content" style="width: 70%; max-width: 600px;">
        <h2 style="text-align: center; color: #007bff;">
            <i class="fab fa-google" style="color: #db4437; margin-right: 10px;"></i>
            P3 Gmail Compose Opened
        </h2>
        
        <div style="margin: 30px 0; text-align: center;">
            <div style="font-size: 64px; color: #db4437; margin-bottom: 20px;">
                <i class="fab fa-google"></i>
            </div>
            <p style="font-size: 18px; margin-bottom: 20px;">Gmail compose window has been opened in a new tab with your P3 email pre-filled.</p>
            
            <div style="background-color: #e3f2fd; padding: 25px; border-radius: 10px; margin: 25px 0; border-left: 5px solid #2196f3;">
                <h4 style="color: #1976d2; margin-top: 0;">📋 Next Steps:</h4>
                <ol style="text-align: left; margin: 15px 0; color: #1976d2; line-height: 1.8;">
                    <li><strong>Switch to Gmail tab</strong> - Check if Gmail opened correctly</li>
                    <li><strong>Review recipient list</strong> - Verify all emails are in "To:" field</li>
                    <li><strong>Check subject line</strong> - Modify if needed</li>
                    <li><strong>Review email content</strong> - Make final adjustments</li>
                    <li><strong>Send emails</strong> - Click Gmail's send button</li>
                    <li><strong>Return here</strong> - Click "Update Database" below</li>
                </ol>
            </div>
        </div>
        
        <div style="background: linear-gradient(135deg, #fff3cd, #ffeaa7); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #f39c12;">
            <h4 style="color: #856404; margin-top: 0; display: flex; align-items: center;">
                <i class="fas fa-exclamation-triangle" style="margin-right: 10px;"></i>
                Important
            </h4>
            <p style="color: #856404; margin-bottom: 0; line-height: 1.6;">
                <strong>After sending emails in Gmail</strong>, return here and click "Update Database" to finalize the P3 applicant statuses in your system.
            </p>
        </div>
        
        <div class="modal-buttons">
            <button class="back-button" onclick="closeModal('p3StatusUpdateModal')">
                <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel Process
            </button>
            <button class="confirm-button" onclick="updateP3ApplicantStatuses()" style="background: linear-gradient(135deg, #28a745, #20c997); font-size: 16px; padding: 12px 25px;">
                <i class="fas fa-database" style="margin-right: 8px;"></i>
                Update Database
            </button>
        </div>
    </div>
</div>

    <!-- Other modals for account setup, job offers, etc. -->
    <div id="releaseJobOfferModal" class="modal">
        <div class="modal-content">
            <span class="close-button" onclick="closeModal('releaseJobOfferModal')">&times;</span>
            <h2 style="color: #07ACB9;" id="applicant-name-job-offer">Name</h2>
            <p><strong>Age:</strong> <span id="applicant-age-job-offer">Text</span></p>
            <p><strong>Email:</strong> <span id="applicant-email-job-offer">Text</span></p>
            <p><strong>Contact No:</strong> <span id="applicant-contact-job-offer">Text</span></p>
            
            <div class="divider"></div>
            
            <h3>Panel Assessment Form Breakdown</h3>
            <p>[INSERT SUBMITTED FORM HERE]</p>
            
            <div class="modal-question">
                <p><strong>Would you like to release the job offer and notify the applicant they are being considered for hiring?</strong></p>
            </div>
            
            <div class="modal-buttons">
                <button id="backButton" onclick="closeModal('releaseJobOfferModal')">Back</button>
                <button id="confirmButton" onclick="sendNotification()">Notify Applicant</button>
            </div>
        </div>
    </div>

    <!-- Modal for Moving Applicant for Onboarding -->
    <div id="moveToOnboardingModal" class="modal">
        <div class="modal-content">
            <span class="close-button" onclick="closeModal('moveToOnboardingModal')">&times;</span>
            <h1>Job Offer Confirmation</h1>
            
            <h2><strong>Applicant Personal Information</strong></h2>
            <h3><strong id="applicant-name-onboarding">Name</strong></h3>
            <p><strong>Age:</strong> <span id="applicant-age-onboarding">Text</span></p>
            <p><strong>Email:</strong> <span id="applicant-email-onboarding">Text</span></p>
            <p><strong>Contact No:</strong> <span id="applicant-contact-onboarding">Text</span></p>
            
            <div class="modal-question">
                <p><strong>Would you like to move this applicant for onboarding?</strong></p>
            </div>
            
            <div class="modal-buttons">
                <button id="backButton" onclick="closeModal('moveToOnboardingModal')">Back</button>
                <button id="confirmButton" onclick="confirmOnboarding()">Confirm</button>
            </div>
        </div>
    </div>

    <!-- Modal for Sending Job Offer -->
<div id="sendJobOfferModal" class="modal">
  <div class="modal-content">
      <span class="close-button" onclick="closeModal('sendJobOfferModal')">&times;</span>
      <h2>Send Job Offer</h2>
      
      <div class="applicant-details" style="margin-bottom: 20px;">
          <h3 id="applicant-name-job-offer" style="color: #124A5C; margin-bottom: 5px;"></h3>
          <p><strong>Email:</strong> <span id="applicant-email-job-offer"></span></p>
          <p><strong>Position:</strong> <span id="applicant-position-job-offer"></span></p>
          <p><strong>Department:</strong> <span id="applicant-department-job-offer"></span></p>
      </div>
      
      <div class="divider"></div>
      
      <div style="margin: 20px 0;">
          <p><strong>Job Offer Details:</strong></p>
          <div style="margin: 15px 0;">
              <label for="startDate" style="display: block; margin-bottom: 5px;"><strong>Start Date:</strong></label>
              <input type="date" id="startDate" class="search-bar" style="width: 100%;" required>
          </div>
          
          <div style="margin: 15px 0;">
              <label for="offerNotes" style="display: block; margin-bottom: 5px;"><strong>Additional Notes:</strong></label>
              <textarea id="offerNotes" class="search-bar" style="width: 100%; height: 100px; resize: vertical;" placeholder="Enter any additional details for the job offer..."></textarea>
          </div>
      </div>
      
      <div class="modal-question">
          <p><strong>Are you sure you want to send a job offer to this applicant?</strong></p>
      </div>
      
      <div class="modal-buttons">
          <button id="backButton" class="back-button" onclick="closeModal('sendJobOfferModal')">Cancel</button>
          <button id="sendOfferButton" class="confirm-button" onclick="sendJobOffer()">Send Job Offer</button>
      </div>
  </div>
</div>

    <!-- Modal for Account Setup Creation Reminder -->
    <div id="accountSetupReminderModal" class="modal">
        <div class="modal-content">
            <span class="close-button" onclick="closeModal('accountSetupReminderModal')">&times;</span>
            <h1>Account Setup Creation Reminder</h1>
            
            <h2><strong>Applicant Personal Information</strong></h2>
            <h3><strong id="applicant-name-account">Name</strong></h3>
            <p><strong>Age:</strong> <span id="applicant-age-account">Text</span></p>
            <p><strong>Email:</strong> <span id="applicant-email-account">Text</span></p>
            <p><strong>Contact No:</strong> <span id="applicant-contact-account">Text</span></p>
            
            <div class="modal-question">
                <p><strong>Have you created an account for the employee through the Manage Employees page and emailed them the account details?</strong></p>
            </div>
            
            <div class="modal-buttons">
                <button id="backButton" onclick="closeModal('accountSetupReminderModal')">Back</button>
                <button id="confirmButton" onclick="confirmAccountSetup()">Confirm</button>
            </div>
        </div>
    </div>
</div>

<!-- Add this right after the head tag, before any scripts -->
<script id="applicants-data" type="application/json">
    <% if (typeof applicants !== 'undefined') { %>
      <%- JSON.stringify(applicants) %>
    <% } else { %>
      []
    <% } %>
    </script>

<script>

// ============================
// GLOBAL VARIABLES & INITIALIZATION
// ============================

// Global data structures
window.allUserIds = [];
window.applicantsScores = {};
window.applicantNameMapping = {};
window.nameToUserId = {};
window.emailToUserId = {};
window.displayNameToUserId = {};
window.applicantRegistry = {};
window.mainTableScores = {};
window.mainTableUserIds = {};
window.applicantStatusMap = {};
window.applicantsData = [];

// Gmail integration variables
let currentPassedApplicants = [];
let currentFailedApplicants = [];
let emailTemplates = {};
let emailsToUpdate = { passed: [], failed: [] };

let currentP3PassedApplicants = [];
let currentP3FailedApplicants = [];
let p3EmailsToUpdate = { passed: [], failed: [] };

// ============================
// SINGLE DOMCONTENTLOADED EVENT
// ============================

document.addEventListener("DOMContentLoaded", function () {
  console.log("=== APPLICANT TRACKER INITIALIZATION START ===");
  
  // Initialize all systems
  initializeApplicantTracker();
});

function initializeApplicantTracker() {
  console.log("Initializing applicant tracker systems...");
  
  // Step 1: Load applicants data
  loadApplicantsData();
  
  // Step 2: Extract and build registries
  buildApplicantRegistry();
  extractScoresFromMainTable();
  captureInitialScreeningScores();
  
  // Step 3: Set up event listeners
  setupAllEventListeners();
  
  // Step 4: Initialize UI
  initializeUI();
  
  // Step 5: Fix any missing data with timeouts
  setTimeout(() => {
    ensureUserIdAttributes();
    fixAllTableScores();
    setupToggleStatusButtons();
  }, 500);
  
  setTimeout(() => {
    fixChangeStatusButtons();
    emergencyButtonFix();
  }, 1000);
  
  console.log("=== APPLICANT TRACKER INITIALIZATION COMPLETE ===");
}

function loadApplicantsData() {
  try {
    const dataScript = document.getElementById('applicants-data');
    if (dataScript) {
      window.applicantsData = JSON.parse(dataScript.textContent);
      console.log(`Loaded ${window.applicantsData.length} applicants from embedded data`);
      
      // Create mappings
      window.applicantsData.forEach(applicant => {
        if (applicant.userId) {
          const fullName = `${applicant.lastName}, ${applicant.firstName}`;
          window.applicantNameMapping[fullName] = applicant.userId;
          window.nameToUserId[fullName] = applicant.userId;
          window.mainTableUserIds[fullName] = applicant.userId;
          
          if (applicant.initialScreeningAssessment && 
              applicant.initialScreeningAssessment.totalScore !== 'N/A') {
            window.applicantsScores[applicant.userId] = applicant.initialScreeningAssessment.totalScore;
            window.mainTableScores[fullName] = applicant.initialScreeningAssessment.totalScore;
            window.mainTableScores[applicant.userId] = applicant.initialScreeningAssessment.totalScore;
          }

          window.applicantRegistry[applicant.userId] = {
            userId: applicant.userId,
            fullName: fullName,
            email: applicant.userEmail || '',
            department: applicant.deptName || '',
            position: applicant.jobTitle || '',
            status: applicant.applicantStatus || '',
            score: applicant.initialScreeningAssessment?.totalScore || 'N/A'
          };
        }
      });
      
      return true;
    }
  } catch (error) {
    console.error("Error loading applicants data:", error);
  }
  return false;
}

function ensureUserIdAttributes() {
  console.log("Ensuring userId attributes are set on all rows and buttons...");
  
  const reviewButtons = document.querySelectorAll('.btn-review[onclick*="lineManagerInitialScreeningModal"]');
  console.log(`Found ${reviewButtons.length} review buttons to extract userIds from`);
  
  reviewButtons.forEach(button => {
    const onclick = button.getAttribute('onclick') || '';
    const match = onclick.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
    
    if (match && match[1]) {
      const userId = match[1];
      const row = button.closest('tr');
      
      if (row) {
        row.setAttribute('data-userid', userId);
        if (!button.getAttribute('data-userid')) {
          button.setAttribute('data-userid', userId);
        }
        
        const nameCell = row.querySelector('td:nth-child(2)');
        if (nameCell) {
          const fullName = nameCell.textContent.split('\n')[0].trim();
          window.nameToUserId[fullName] = userId;
          window.applicantNameMapping[fullName] = userId;
          window.mainTableUserIds[fullName] = userId;
          
          const scoreMatch = onclick.match(/},\s*['"]([^'"]*)['"]/);
          if (scoreMatch && scoreMatch[1]) {
            const score = scoreMatch[1];
            window.applicantsScores[userId] = score;
            window.mainTableScores[userId] = score;
            window.mainTableScores[fullName] = score;
            row.setAttribute('data-score', score);
          }
        }
      }
    }
  });
  
  // Fix change status buttons
  const changeButtons = document.querySelectorAll('.btn-change-status');
  changeButtons.forEach((button, index) => {
    let userId = button.getAttribute('data-userid');
    
    if (!userId || userId === 'undefined' || userId === '') {
      const row = button.closest('tr');
      if (row) {
        userId = row.getAttribute('data-userid');
        
        if (userId && userId !== 'undefined' && userId !== '') {
          button.setAttribute('data-userid', userId);
          button.setAttribute('onclick', `changeApplicantStatus('${userId}')`);
        } else {
          const nameCell = row.querySelector('td:nth-child(2)');
          if (nameCell) {
            const fullName = nameCell.textContent.split('\n')[0].trim();
            
            if (window.nameToUserId[fullName]) {
              userId = window.nameToUserId[fullName];
              row.setAttribute('data-userid', userId);
              button.setAttribute('data-userid', userId);
              button.setAttribute('onclick', `changeApplicantStatus('${userId}')`);
            }
          }
        }
      }
    }
  });
}

// ============================
// EVENT LISTENERS SETUP
// ============================

function setupAllEventListeners() {
  console.log("Setting up all event listeners...");
  
  // Filter buttons
  const filterAllButton = document.getElementById("filter-all");
  const filterForReviewButton = document.getElementById("filter-forreview");
  const filterForEvaluationButton = document.getElementById("filter-forevaluation");
  const filterForOnboardingButton = document.getElementById("filter-foronboarding");
  
  if (filterAllButton) filterAllButton.addEventListener("click", () => filterRowsByStatus("all"));
  if (filterForReviewButton) filterForReviewButton.addEventListener("click", () => filterRowsByStatus("forreview"));
  if (filterForEvaluationButton) filterForEvaluationButton.addEventListener("click", () => filterRowsByStatus("forevaluation"));
  if (filterForOnboardingButton) filterForOnboardingButton.addEventListener("click", () => filterRowsByStatus("foronboarding"));
  
  // Search functionality
  const searchBar = document.getElementById("searchBar");
  const searchButton = document.querySelector(".search-button");
  
  if (searchBar && searchButton) {
    searchButton.addEventListener("click", filterTable);
    searchBar.addEventListener("keypress", function(e) {
      if (e.key === "Enter") {
        e.preventDefault();
        filterTable();
      }
    });
  }
  
  // Sort options
  const sortOptions = document.getElementById("sortOptions");
  if (sortOptions) {
    sortOptions.addEventListener("change", function() {
      sortDeclaredResults(this.value);
    });
  }
  
  // Modal event listeners
  setupModalEventListeners();
  
  // Gmail integration buttons
  setupGmailEventListeners();
}

function setupModalEventListeners() {
  // Close modal when the close button is clicked
  const closeButton = document.querySelector('.review-close-button');
  if (closeButton) {
    closeButton.addEventListener('click', function () {
      document.getElementById('lineManagerInitialScreeningModalHtml').style.display = 'none';
    });
  }
  
  // Close modal if clicked outside the modal content
  window.addEventListener('click', function (event) {
    const modal = document.getElementById('lineManagerInitialScreeningModalHtml');
    if (event.target === modal) {
      modal.style.display = 'none';
    }
  });
  
  // Close buttons for all modals
  document.querySelectorAll('.close-button').forEach(button => {
    button.addEventListener('click', function() {
      const modalId = this.closest('.modal').id;
      document.getElementById(modalId).style.display = 'none';
    });
  });
  
  // Back buttons for all modals
  document.querySelectorAll('.back-button, .review-modal-back-button').forEach(button => {
    button.addEventListener('click', function() {
      const modalId = this.closest('.modal')?.id || this.closest('.review-modal')?.id;
      if (modalId) {
        document.getElementById(modalId).style.display = 'none';
      }
    });
  });
}

function setupGmailEventListeners() {
  // P1 finalization buttons
  const finalizeP1Buttons = document.querySelectorAll('#finalizeP1Button, button[onclick*="finalizeP1"]');
  finalizeP1Buttons.forEach(button => {
    button.addEventListener('click', function() {
      if (checkAllApplicantsMarked('P1')) {
        document.getElementById('finalizeModalP1').style.display = 'block';
      } else {
        alert("Not all P1 applicants have been marked as passed or failed. Please make a decision for all applicants first.");
      }
    });
  });
  
  // Update confirm button for Gmail flow
  const confirmButtonP1 = document.getElementById('confirmButtonP1');
  if (confirmButtonP1) {
    const newConfirmButton = confirmButtonP1.cloneNode(true);
    confirmButtonP1.parentNode.replaceChild(newConfirmButton, confirmButtonP1);
    newConfirmButton.addEventListener('click', startGmailIntegrationFlow);
  }
}

function initializeUI() {
  console.log("Initializing UI components...");
  
  // Show all by default
  filterRowsByStatus("all");
  
  // Enhance tables
  ensureTableHeaders();
  
  // Enhance buttons
  enhanceApplicantTable();
  enhanceForReviewButtons();
  
  // Set initial filter
  highlightActiveFilter('all');
}

// ============================
// CORE FILTER FUNCTIONS
// ============================

function filterRowsByStatus(status) {
  console.log("=== FILTERING BY STATUS:", status, "===");
  
  const mainTable = document.getElementById('mainApplicantTable');
  const onboardingTable = document.getElementById('onboardingTable');
  const onboardingHeader = document.getElementById('onboardingHeader');
  const applicantStatusSection = document.getElementById('applicantStatusSection');

  const allMainRows = mainTable ? Array.from(mainTable.querySelectorAll('tbody tr')) : [];
  const allOnboardingRows = onboardingTable ? Array.from(onboardingTable.querySelectorAll('tbody tr')) : [];

  // Always hide evaluation section first
  hideEvaluationSection();

  if (status === 'all') {
    if (applicantStatusSection) applicantStatusSection.style.display = 'none';
    if (mainTable) mainTable.style.display = '';
    allMainRows.forEach(row => row.style.display = '');
    if (onboardingHeader) onboardingHeader.style.display = 'block';
    if (onboardingTable) onboardingTable.style.display = 'table';
    filterOnboardingRowsByStatus(allOnboardingRows);
    highlightActiveFilter(status);
    return;
  }

  // Hide main table for specific filters
  if (mainTable) mainTable.style.display = '';
  allMainRows.forEach(row => row.style.display = 'none');

  // Handle specific filters
  if (status === 'forreview') {
    if (applicantStatusSection) applicantStatusSection.style.display = 'block';
    if (onboardingHeader) onboardingHeader.style.display = 'block';
    if (onboardingTable) onboardingTable.style.display = 'table';
    filterOnboardingRowsByStatus(allOnboardingRows);
    handleReviewFilter(mainTable, applicantStatusSection, allMainRows);
  } else if (status === 'forevaluation') {
    if (applicantStatusSection) applicantStatusSection.style.display = 'none';
    if (onboardingHeader) onboardingHeader.style.display = 'block';
    if (onboardingTable) onboardingTable.style.display = 'table';
    filterOnboardingRowsByStatus(allOnboardingRows);
    handleEvaluationFilter(onboardingHeader, onboardingTable, allMainRows);
  } else if (status === 'foronboarding') {
    if (applicantStatusSection) applicantStatusSection.style.display = 'none';
    if (onboardingHeader) onboardingHeader.style.display = 'block';
    if (onboardingTable) onboardingTable.style.display = 'table';
    filterOnboardingRowsByStatus(allOnboardingRows);
    handleOnboardingFilter(applicantStatusSection, onboardingHeader, onboardingTable, allOnboardingRows);
  }

  highlightActiveFilter(status);
}

// ============================
// REVIEW FILTER - FIXED VERSION
// ============================

function handleReviewFilter(mainTable, applicantStatusSection, allMainRows) {
  console.log("=== ENHANCED P1/P3 REVIEW FILTER - FIXED VERSION ===");
  
  hideEvaluationSection();
  
  const onboardingHeader = document.getElementById('onboardingHeader');
  const onboardingTable = document.getElementById('onboardingTable');
  
  if (onboardingHeader) onboardingHeader.style.display = 'none';
  if (onboardingTable) onboardingTable.style.display = 'none';
  if (mainTable) mainTable.style.display = 'none';
  if (applicantStatusSection) applicantStatusSection.style.display = 'block';
  
  captureApplicantsDataEnhanced();
  
  const p1AwaitingRows = [];
  const p1DeclaredRows = [];
  const p3AwaitingRows = [];
  const p3DeclaredRows = [];
  
  console.log(`Analyzing ${allMainRows.length} rows for P1/P3 statuses...`);
  
  // FIXED: Enhanced row processing with comprehensive status detection
  allMainRows.forEach((row, index) => {
    const statusCell = row.querySelector('td:nth-child(5)');
    if (!statusCell) return;
    
    // Extract status from multiple sources
    let statusText = '';
    
    // Method 1: Check span element
    const statusSpan = statusCell.querySelector('span');
    if (statusSpan) {
      statusText = statusSpan.textContent.replace(/Status:\s*/g, '').trim();
    }
    
    // Method 2: Check data attributes
    if (!statusText) {
      statusText = row.getAttribute('data-status') || '';
    }
    
    // Method 3: Parse from cell text
    if (!statusText) {
      const cellText = statusCell.textContent.replace(/Status:\s*/g, '').trim();
      const statusMatch = cellText.match(/^([^]*?)(?:\s*(?:For Review|For Evaluation|Send Job Offer|Approve))/);
      statusText = statusMatch ? statusMatch[1].trim() : cellText.split('\n')[0].trim();
    }
    
    console.log(`Row ${index + 1}: Detected status = "${statusText}"`);
    
    const rowData = extractRowDataEnhanced(row, index);
    if (!rowData) return;
    
    // Ensure userId is set
    if (rowData.userId) {
      row.setAttribute('data-userid', rowData.userId);
    }
    
    // FIXED: Comprehensive status categorization including P3 statuses
    
    // P1 - Awaiting for Line Manager Action (with HR PASSED)
    if (statusText.includes('P1') && statusText.includes('Awaiting for Line Manager Action') && statusText.includes('HR PASSED')) {
      p1AwaitingRows.push(rowData);
      console.log(`✅ Added to P1 Awaiting: ${rowData.name} (${statusText})`);
    }
    // P1 - PASSED (Pending Finalization) - FIXED DETECTION
    else if (statusText.includes('P1') && statusText.includes('PASSED') && statusText.includes('Pending Finalization')) {
      p1DeclaredRows.push(rowData);
      console.log(`✅ Added to P1 Declared PASSED: ${rowData.name} (${statusText})`);
    }
    // P1 - FAILED (Pending Finalization) - FIXED DETECTION  
    else if (statusText.includes('P1') && statusText.includes('FAILED') && statusText.includes('Pending Finalization')) {
      p1DeclaredRows.push(rowData);
      console.log(`✅ Added to P1 Declared FAILED: ${rowData.name} (${statusText})`);
    }
    // P1 - PASSED (without "Pending") - Additional catch
    else if (statusText.includes('P1') && statusText.includes('PASSED') && !statusText.includes('Awaiting')) {
      p1DeclaredRows.push(rowData);
      console.log(`✅ Added to P1 Declared PASSED (Final): ${rowData.name} (${statusText})`);
    }
    // P1 - FAILED (without "Pending") - Additional catch
    else if (statusText.includes('P1') && statusText.includes('FAILED') && !statusText.includes('Awaiting')) {
      p1DeclaredRows.push(rowData);
      console.log(`✅ Added to P1 Declared FAILED (Final): ${rowData.name} (${statusText})`);
    }
    // FIXED: P3 - Line Manager Evaluation Accomplished (NEW - for P3 Awaiting)
    else if (statusText.includes('P3') && statusText.includes('Line Manager Evaluation Accomplished')) {
      p3AwaitingRows.push(rowData);
      console.log(`✅ Added to P3 Awaiting: ${rowData.name} (${statusText})`);
    }
    // ALTERNATIVE P3 Detection: Check for exact match
    else if (statusText === 'P3 - Line Manager Evaluation Accomplished') {
      p3AwaitingRows.push(rowData);
      console.log(`✅ Added to P3 Awaiting (exact match): ${rowData.name} (${statusText})`);
    }
    // FIXED: P3 - PASSED (Pending Finalization) (NEW - for P3 Declared)
    else if (statusText.includes('P3') && statusText.includes('PASSED') && statusText.includes('Pending Finalization')) {
      p3DeclaredRows.push(rowData);
      console.log(`✅ Added to P3 Declared PASSED: ${rowData.name} (${statusText})`);
    }
    // FIXED: P3 - FAILED (Pending Finalization) (NEW - for P3 Declared)
    else if (statusText.includes('P3') && statusText.includes('FAILED') && statusText.includes('Pending Finalization')) {
      p3DeclaredRows.push(rowData);
      console.log(`✅ Added to P3 Declared FAILED: ${rowData.name} (${statusText})`);
    }
    // P3 - PASSED (without "Pending") - Additional catch
    else if (statusText.includes('P3') && statusText.includes('PASSED') && !statusText.includes('Awaiting')) {
      p3DeclaredRows.push(rowData);
      console.log(`✅ Added to P3 Declared PASSED (Final): ${rowData.name} (${statusText})`);
    }
    // P3 - FAILED (without "Pending") - Additional catch
    else if (statusText.includes('P3') && statusText.includes('FAILED') && !statusText.includes('Awaiting')) {
      p3DeclaredRows.push(rowData);
      console.log(`✅ Added to P3 Declared FAILED (Final): ${rowData.name} (${statusText})`);
    }
    else {
      console.log(`❌ Row ${index + 1} not categorized: "${statusText}"`);
    }
  });

  console.log(`\n=== CATEGORIZATION RESULTS ===`);
  console.log(`P1 Awaiting: ${p1AwaitingRows.length}`);
  console.log(`P1 Declared: ${p1DeclaredRows.length}`);
  console.log(`P3 Awaiting: ${p3AwaitingRows.length}`);
  console.log(`P3 Declared: ${p3DeclaredRows.length}`);

  // FIXED: Populate tables with corrected headers
  populateP1AwaitingActionTableEnhanced(p1AwaitingRows);
  populateP1DeclaredResultsTableEnhanced(p1DeclaredRows);
  populateP3AwaitingActionTableFixed(p3AwaitingRows); // FIXED FUNCTION
  populateP3DeclaredResultsTableFixed(p3DeclaredRows); // FIXED FUNCTION
  
  // Update section visibilities
  updateP1P3SectionsVisibility(
    p1AwaitingRows.length > 0, 
    p1DeclaredRows.length > 0, 
    p3AwaitingRows.length > 0, 
    p3DeclaredRows.length > 0
  );
  
  // FIXED: Update headers to show correct text
  updateSectionHeaders(p1DeclaredRows.length > 0, p3DeclaredRows.length > 0);
  
  // Fix scores and buttons
  setTimeout(() => {
    fixAllTableScores();
    fixChangeStatusButtons();
  }, 300);
  
  highlightActiveFilter('forreview');
  updateSectionHeaderButtons();
}

// FIXED: Update section headers with correct text
function updateSectionHeaders(hasP1Declared, hasP3Declared) {
  console.log("=== UPDATING SECTION HEADERS (FIXED) ===");
  
  // FIXED: Update P1 declared results header
  let p1Header = document.getElementById('p1DeclaredResultsHeader');
  
  if (!p1Header) {
    // Find by text content
    const allH4s = document.querySelectorAll('#applicantStatusSection h4');
    allH4s.forEach(h4 => {
      const text = h4.textContent.trim();
      if (text.includes('Declared Results') || text.includes('P1 Applicants')) {
        p1Header = h4;
      }
    });
  }
  
  if (p1Header && hasP1Declared) {
    p1Header.textContent = 'List of P1 Applicants on Review - Declared Results';
    p1Header.id = 'p1DeclaredResultsHeader';
    p1Header.style.display = 'block';
    console.log("✅ Updated P1 declared results header");
  }
  
  // FIXED: Update P3 declared results header
  let p3Header = document.getElementById('p3DeclaredResultsHeader');
  
  if (!p3Header) {
    const p3Section = document.getElementById('p3ReviewSection');
    if (p3Section) {
      const p3H4s = p3Section.querySelectorAll('h4');
      p3H4s.forEach(h4 => {
        if (h4.textContent.includes('Declared Results') || h4.textContent.includes('P3 Applicants')) {
          p3Header = h4;
        }
      });
    }
  }
  
  if (p3Header && hasP3Declared) {
    p3Header.textContent = 'List of P3 Applicants on Review - Declared Results';
    p3Header.id = 'p3DeclaredResultsHeader';
    p3Header.style.display = 'block';
    console.log("✅ Updated P3 declared results header");
  }
  
  // Hide headers for sections with no data
  if (!hasP1Declared && p1Header) {
    p1Header.style.display = 'none';
  }
  
  if (!hasP3Declared && p3Header) {
    p3Header.style.display = 'none';
  }
}
// ============================
// DATA EXTRACTION & TABLE POPULATION
// ============================
function extractRowDataEnhanced(row, index) {
  console.log(`=== EXTRACTING ENHANCED DATA FOR ROW ${index + 1} ===`);
  
  const cells = Array.from(row.querySelectorAll('td'));
  if (cells.length < 5) {
    console.log(`Row ${index + 1}: Not enough cells (${cells.length})`);
    return null;
  }
  
  // Get userId using multiple methods
  let userId = row.getAttribute('data-userid');
  
  if (!userId || userId === 'undefined' || userId === '') {
    const reviewButton = row.querySelector('.btn-review, button[onclick*="lineManagerInitialScreeningModal"]');
    if (reviewButton) {
      const onclick = reviewButton.getAttribute('onclick') || '';
      const userIdMatch = onclick.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
      if (userIdMatch && userIdMatch[1]) {
        userId = userIdMatch[1];
        row.setAttribute('data-userid', userId);
        console.log(`Row ${index + 1}: Extracted userId ${userId} from button`);
      }
    }
  }
  
  // Extract name and email
  let applicantName = '';
  let applicantEmail = '';
  
  if (cells[1]) {
    const nameCell = cells[1];
    const fullContent = nameCell.innerHTML;
    const nameParts = fullContent.split('<br>');
    
    if (nameParts.length > 0) {
      applicantName = nameParts[0].replace(/<[^>]*>/g, '').trim();
    }
    
    if (nameParts.length > 1) {
      applicantEmail = nameParts[1].replace(/<[^>]*>/g, '').trim();
    }
  }
  
  const department = cells[2] ? cells[2].textContent.trim() : 'Unknown Department';
  const position = cells[3] ? cells[3].textContent.trim() : 'Unknown Position';
  
  // FIXED: Enhanced status extraction
  let status = '';
  if (cells[4]) {
    const statusCell = cells[4];
    
    const statusSpan = statusCell.querySelector('span');
    if (statusSpan) {
      const spanText = statusSpan.textContent.trim();
      status = spanText.replace(/^Status:\s*/g, '').trim();
    } else {
      const cellText = statusCell.textContent.trim();
      const lines = cellText.split('\n');
      for (const line of lines) {
        const cleanLine = line.trim();
        if (cleanLine.startsWith('Status:')) {
          status = cleanLine.replace(/^Status:\s*/g, '').trim();
          break;
        } else if (cleanLine.includes('P1') || cleanLine.includes('P2') || cleanLine.includes('P3')) {
          status = cleanLine;
          break;
        }
      }
      
      if (!status) {
        const statusMatch = cellText.match(/(P[123]\s*-[^(\n]*(?:\([^)]*\))?)/);
        if (statusMatch) {
          status = statusMatch[1].trim();
        }
      }
    }
  }
  
  console.log(`Row ${index + 1}: Extracted status = "${status}"`);
  
  // Get score from various sources - but only for P1 rows
  let totalScore = 'N/A';
  
  // Only try to get score if this is NOT a P3 row
  if (!status.includes('P3')) {
    if (userId && window.applicantsScores && window.applicantsScores[userId]) {
      totalScore = window.applicantsScores[userId];
    } else if (userId && window.mainTableScores && window.mainTableScores[userId]) {
      totalScore = window.mainTableScores[userId];
    } else if (applicantName && window.mainTableScores && window.mainTableScores[applicantName]) {
      totalScore = window.mainTableScores[applicantName];
    } else {
      const reviewButton = row.querySelector('button[onclick*="lineManagerInitialScreeningModal"]');
      if (reviewButton) {
        const onclick = reviewButton.getAttribute('onclick') || '';
        const scoreMatch = onclick.match(/},\s*['"]([^'"]*)['"]/);
        if (scoreMatch && scoreMatch[1]) {
          totalScore = scoreMatch[1];
          if (userId) {
            if (!window.applicantsScores) window.applicantsScores = {};
            window.applicantsScores[userId] = totalScore;
          }
        }
      }
    }
  }
  
  // FIXED: Create proper cell structure based on whether it's P3 or P1
  let rowCells;
  
  if (status.includes('P3')) {
    // P3 rows - 5 columns (no score columns)
    rowCells = [
      cells[0] ? cells[0].innerHTML : `APP${(index + 1).toString().padStart(5, '0')}`,
      cells[1] ? cells[1].innerHTML : applicantName,
      department,
      position,
      status  // Just the status, no score for P3
    ];
  } else {
    // P1 rows - 7 columns (includes score columns)
    rowCells = [
      cells[0] ? cells[0].innerHTML : `APP${(index + 1).toString().padStart(5, '0')}`,
      cells[1] ? cells[1].innerHTML : applicantName,
      department,
      position,
      totalScore,
      '<span class="criteria-passed">Passed</span>',
      status
    ];
  }
  
  const rowData = {
    index: index + 1,
    cells: rowCells,
    userId: userId,
    totalScore: totalScore,
    name: applicantName,
    email: applicantEmail,
    status: status,
    department: department,
    position: position
  };
  
  console.log(`Row ${index + 1} final extracted data:`, {
    name: rowData.name,
    userId: rowData.userId,
    status: rowData.status,
    score: rowData.totalScore,
    isP3: status.includes('P3')
  });
  
  return rowData;
}
// ============================
// P1 TABLE MANAGEMENT FUNCTIONS
// ============================


function populateP1AwaitingActionTableEnhanced(awaitingRowsP1) {
  console.log(`Populating P1 awaiting action table with ${awaitingRowsP1.length} rows`);
  
  const awaitingActionTable = document.getElementById('p1AwaitingActionTable');
  if (!awaitingActionTable) {
    console.error("❌ P1 awaiting action table not found");
    return;
  }
  
  const awaitingTbody = awaitingActionTable.querySelector('tbody');
  if (!awaitingTbody) {
    console.error("❌ Tbody not found in P1 awaiting action table");
    return;
  }
  
  // Empty the tbody first
  awaitingTbody.innerHTML = '';
  
  if (awaitingRowsP1.length > 0) {
    awaitingRowsP1.forEach((rowData, idx) => {
      console.log(`Processing P1 awaiting row ${idx + 1}: ${rowData.name}`);
      
      const newRow = createP1AwaitingRowEnhanced(rowData);
      awaitingTbody.appendChild(newRow);
      
      if (rowData.userId) {
        newRow.setAttribute('data-userid', rowData.userId);
        getTotalScoreDirectly(rowData.userId, newRow);
      }
      
      console.log(`✅ Added P1 awaiting row ${idx + 1}`);
    });
    
    console.log(`✅ Successfully populated P1 awaiting action table with ${awaitingRowsP1.length} rows`);
  } else {
    displayNoDataMessage(awaitingActionTable, 'No P1 applicants awaiting for action.');
  }
}

function populateP1DeclaredResultsTableEnhanced(declaredRowsP1) {
  console.log(`=== POPULATING P1 DECLARED RESULTS (${declaredRowsP1.length} rows) ===`);
  
  const declaredResultsTable = document.getElementById('p1DeclaredResultsTable');
  if (!declaredResultsTable) {
    console.error("❌ P1 declared results table not found");
    return;
  }
  
  const declaredTbody = declaredResultsTable.querySelector('tbody');
  if (!declaredTbody) {
    console.error("❌ Tbody not found");
    return;
  }
  
  // Clear existing content
  declaredTbody.innerHTML = '';
  
  if (declaredRowsP1.length > 0) {
    declaredRowsP1.forEach((rowData, idx) => {
      console.log(`Processing P1 declared row ${idx + 1}:`, {
        name: rowData.name,
        status: rowData.status,
        userId: rowData.userId,
        score: rowData.totalScore
      });
      
      // Ensure we have proper score data
      if (rowData.totalScore !== 'N/A') {
        console.log(`Row already has score: ${rowData.totalScore}`);
      } else {
        if (rowData.userId) {
          if (window.applicantsScores && window.applicantsScores[rowData.userId]) {
            rowData.totalScore = window.applicantsScores[rowData.userId];
            console.log(`Found score ${rowData.totalScore} for userId ${rowData.userId} from applicantsScores`);
          } else if (window.mainTableScores && window.mainTableScores[rowData.userId]) {
            rowData.totalScore = window.mainTableScores[rowData.userId];
            console.log(`Found score ${rowData.totalScore} for userId ${rowData.userId} from mainTableScores`);
          }
        }
        
        if (rowData.totalScore === 'N/A' && rowData.name) {
          const name = rowData.name.trim();
          if (window.mainTableScores && window.mainTableScores[name]) {
            rowData.totalScore = window.mainTableScores[name];
            console.log(`Found score ${rowData.totalScore} for '${name}' from main table by name`);
          }
        }
      }
      
      const newRow = createP1DeclaredRowEnhanced(rowData);
      declaredTbody.appendChild(newRow);
      
      if (rowData.userId) {
        newRow.setAttribute('data-userid', rowData.userId);
        
        const changeButton = newRow.querySelector('.btn-change-status');
        if (changeButton) {
          changeButton.setAttribute('data-userid', rowData.userId);
          changeButton.setAttribute('onclick', `changeApplicantStatus('${rowData.userId}')`);
        }
        
        if (rowData.totalScore && rowData.totalScore !== 'N/A') {
          updateScoreCellWithFormatting(newRow, rowData.totalScore);
        }
      }
      
      console.log(`✅ Added P1 declared row ${idx + 1} to table`);
    });
    
    console.log(`✅ Successfully populated P1 declared results table`);
    
    // Show the table and its header
    declaredResultsTable.style.display = 'table';
    const p1Header = document.getElementById('p1DeclaredResultsHeader');
    if (p1Header) {
      p1Header.style.display = 'block';
      p1Header.textContent = 'List of P1 Applicants on Review - Declared Results';
    }
  } else {
    displayNoDataMessage(declaredResultsTable, 'No P1 applicants with declared review results found.');
    
    // Hide the table and its header
    declaredResultsTable.style.display = 'none';
    const p1Header = document.getElementById('p1DeclaredResultsHeader');
    if (p1Header) {
      p1Header.style.display = 'none';
    }
  }
}

function createP1AwaitingRowEnhanced(rowData) {
  const newRow = document.createElement('tr');
  
  if (rowData.userId) {
    newRow.setAttribute('data-userid', rowData.userId);
  }
  
  const cells = [
    rowData.cells[0] || 'N/A',
    rowData.cells[1] || 'Unknown Applicant',
    rowData.cells[2] || 'Unknown Department',
    rowData.cells[3] || 'Unknown Position',
    rowData.totalScore || 'N/A',
    '<span class="criteria-passed">Passed</span>',
    createP1AwaitingStatusCellEnhanced(rowData)
  ];
  
  cells.forEach(cellHTML => {
    const cell = document.createElement('td');
    cell.innerHTML = cellHTML;
    newRow.appendChild(cell);
  });
  
  return newRow;
}
function createP1DeclaredRowEnhanced(rowData) {
  console.log("Creating enhanced P1 declared row for:", rowData.name);
  
  const newRow = document.createElement('tr');
  
  if (rowData.userId) {
    newRow.setAttribute('data-userid', rowData.userId);
  }
  
  // Extract and clean up the status
  let statusText = '';
  if (rowData.status) {
    statusText = rowData.status;
  } else if (rowData.cells && rowData.cells[6]) {
    const originalStatus = rowData.cells[6];
    const statusMatches = [
      /P1 - PASSED \(Pending Finalization\)/,
      /P1 - FAILED \(Pending Finalization\)/,
      /P1 - PASSED/,
      /P1 - FAILED/
    ];
    
    for (const regex of statusMatches) {
      const match = originalStatus.match(regex);
      if (match) {
        statusText = match[0];
        break;
      }
    }
    
    if (!statusText) {
      const p1Match = originalStatus.match(/P1[^<\n]*/);
      if (p1Match) {
        statusText = p1Match[0].trim();
      }
    }
  }
  
  if (!statusText) {
    statusText = 'P1 - UNKNOWN STATUS';
  }
  
  console.log(`Row status determined as: "${statusText}"`);
  
  const cells = [
    rowData.cells[0] || 'N/A',
    rowData.cells[1] || 'Unknown Applicant',
    rowData.cells[2] || 'Unknown Department',
    rowData.cells[3] || 'Unknown Position',
    rowData.totalScore || 'N/A',
    '<span class="criteria-passed">Passed</span>',
    `<span><strong>Status:</strong> ${statusText}</span>`
  ];
  
  cells.forEach((cellHTML, index) => {
    const cell = document.createElement('td');
    
    // FIXED: Handle both string and non-string cell content
    if (typeof cellHTML === 'string') {
      cell.innerHTML = cellHTML;
    } else {
      cell.textContent = String(cellHTML);
    }
    
    newRow.appendChild(cell);
    console.log(`Added cell ${index + 1}: ${String(cellHTML).substring(0, 50)}...`);
  });
  
  // Add Actions column
  const actionsCell = document.createElement('td');
  const userId = rowData.userId || '';
  
  actionsCell.innerHTML = `
    <button 
      class="btn-change-status" 
      data-userid="${userId}"
      onclick="changeApplicantStatus('${userId}')"
    >
      Change Status
    </button>
  `;
  
  newRow.appendChild(actionsCell);
  console.log(`Added actions cell with userId: ${userId}`);
  
  return newRow;
}

function createP1AwaitingStatusCellEnhanced(rowData) {
  const userId = rowData.userId || '';
  
  let modalParams = '';
  if (rowData.cells && rowData.cells[6]) {
    const originalCell = rowData.cells[6];
    const buttonMatch = originalCell.match(/onclick="([^"]*lineManagerInitialScreeningModal[^"]*)"/);
    if (buttonMatch && buttonMatch[1]) {
      modalParams = buttonMatch[1];
    }
  }
  
  if (!modalParams) {
    modalParams = `lineManagerInitialScreeningModal('${userId}', '', '', '', '', '', {}, 'N/A', '', '', '')`;
  }
  
  return `
    <span><strong>Status:</strong> P1 - Awaiting for Line Manager Action; HR PASSED</span>
    <div style="margin-top: 10px;">
      <button 
        class="btn-view-evaluation" 
        onclick="${modalParams}"
      >
        View Evaluation
      </button>
      <div style="margin-top: 5px;">
        <button 
          class="btn-review" 
          onclick="passApplicant()"
          style="background-color: #28a745; color: white; margin-right: 5px; min-width: 70px;"
        >
          Pass
        </button>
        <button 
          class="btn-review" 
          onclick="rejectApplicant()"
          style="background-color: #dc3545; color: white; min-width: 70px;"
        >
          Reject
        </button>
      </div>
    </div>
  `;
}

// ============================
// P3 TABLE MANAGEMENT FUNCTIONS
// ============================
function populateP3AwaitingActionTableFixed(awaitingRowsP3) {
  console.log(`=== POPULATING P3 AWAITING ACTION TABLE (${awaitingRowsP3.length} rows) ===`);
  
  const awaitingActionTable = document.getElementById('p3AwaitingActionTable');
  if (!awaitingActionTable) {
    console.error("❌ P3 awaiting action table not found");
    return;
  }
  
  const awaitingTbody = awaitingActionTable.querySelector('tbody');
  if (!awaitingTbody) {
    console.error("❌ Tbody not found in P3 awaiting action table");
    return;
  }
  
  // Empty the tbody first
  awaitingTbody.innerHTML = '';
  
  if (awaitingRowsP3.length > 0) {
    awaitingRowsP3.forEach((rowData, idx) => {
      console.log(`Processing P3 awaiting row ${idx + 1}: ${rowData.name}`);
      
      const newRow = createP3AwaitingRowFixed(rowData);
      awaitingTbody.appendChild(newRow);
      
      if (rowData.userId) {
        newRow.setAttribute('data-userid', rowData.userId);
      }
      
      console.log(`✅ Added P3 awaiting row ${idx + 1}`);
    });
    
    console.log(`✅ Successfully populated P3 awaiting action table with ${awaitingRowsP3.length} rows`);
  } else {
    // FIXED: Add no data message for P3 awaiting
    console.log("❌ No P3 awaiting rows found - adding no data message");
    
    const messageRow = document.createElement('tr');
    const messageCell = document.createElement('td');
    
    // Get the number of columns from the header
    const headerCells = awaitingActionTable.querySelectorAll('thead th');
    const colspan = headerCells.length || 5;
    
    messageCell.setAttribute('colspan', colspan.toString());
    messageCell.className = 'text-center no-data-message';
    messageCell.style.padding = '20px';
    messageCell.style.backgroundColor = '#f8f9fa';
    messageCell.style.borderLeft = '4px solid #07ACB9';
    messageCell.style.color = '#555';
    messageCell.style.fontSize = '16px';
    messageCell.style.fontStyle = 'italic';
    messageCell.textContent = 'No P3 applicants awaiting for action.';
    
    messageRow.appendChild(messageCell);
    awaitingTbody.appendChild(messageRow);
    
    console.log("Added no data message to P3 awaiting table");
  }
}function createP3AwaitingRowFixed(rowData) {
  console.log("Creating fixed P3 awaiting row for:", rowData.name);
  
  const newRow = document.createElement('tr');
  
  if (rowData.userId) {
    newRow.setAttribute('data-userid', rowData.userId);
  }
  
  // FIXED: P3 awaiting rows have 5 columns with proper status display
  const cells = [
    rowData.cells[0] || 'N/A',                    // Applicant No.
    rowData.cells[1] || 'Unknown Applicant',      // Name
    rowData.cells[2] || 'Unknown Department',     // Department  
    rowData.cells[3] || 'Unknown Position',       // Position
    // FIXED: Display the actual status instead of trying to show score
    `<span><strong>Status:</strong> ${rowData.status || 'P3 - Line Manager Evaluation Accomplished'}</span>
     <div style="margin-top: 10px;">
       <a href="/view-interview-form/${rowData.userId}" style="text-decoration: none;">
         <button class="btn-view-evaluation">View Evaluation</button>
       </a>
       <div style="margin-top: 5px;">
         <button 
           class="btn-review" 
           onclick="p3passApplicant('${rowData.userId}')"
           style="background-color: #28a745; color: white; margin-right: 5px; min-width: 70px;"
         >
           Pass
         </button>
         <button 
           class="btn-review" 
           onclick="p3rejectApplicant('${rowData.userId}')"
           style="background-color: #dc3545; color: white; min-width: 70px;"
         >
           Reject
         </button>
       </div>
     </div>`                                      // Status & Actions
  ];
  
  cells.forEach((cellHTML, index) => {
    const cell = document.createElement('td');
    
    if (typeof cellHTML === 'string') {
      cell.innerHTML = cellHTML;
    } else {
      cell.textContent = String(cellHTML);
    }
    
    newRow.appendChild(cell);
    console.log(`Added P3 cell ${index + 1}: ${String(cellHTML).substring(0, 50)}...`);
  });
  
  return newRow;
}


function populateP3DeclaredResultsTableFixed(declaredRowsP3) {
  console.log(`=== POPULATING P3 DECLARED RESULTS (${declaredRowsP3.length} rows) ===`);
  
  const declaredResultsTable = document.getElementById('p3DeclaredResultsTable');
  if (!declaredResultsTable) {
    console.error("❌ P3 declared results table not found");
    return;
  }
  
  const declaredTbody = declaredResultsTable.querySelector('tbody');
  if (!declaredTbody) {
    console.error("❌ Tbody not found");
    return;
  }
  
  // Clear existing content
  declaredTbody.innerHTML = '';
  
  if (declaredRowsP3.length > 0) {
    declaredRowsP3.forEach((rowData, idx) => {
      console.log(`Processing P3 declared row ${idx + 1}:`, {
        name: rowData.name,
        status: rowData.status,
        userId: rowData.userId
      });
      
      const newRow = createP3DeclaredRowFixed(rowData);
      declaredTbody.appendChild(newRow);
      
      if (rowData.userId) {
        newRow.setAttribute('data-userid', rowData.userId);
        
        const changeButton = newRow.querySelector('.btn-change-status');
        if (changeButton) {
          changeButton.setAttribute('data-userid', rowData.userId);
          changeButton.setAttribute('onclick', `changeApplicantStatus('${rowData.userId}')`);
        }
      }
      
      console.log(`✅ Added P3 declared row ${idx + 1} to table`);
    });
    
    console.log(`✅ Successfully populated P3 declared results table`);
    
    // Show the table and its header
    declaredResultsTable.style.display = 'table';
    const p3Header = document.getElementById('p3DeclaredResultsHeader');
    if (p3Header) {
      p3Header.style.display = 'block';
      p3Header.textContent = 'List of P3 Applicants on Review - Declared Results';
    }
  } else {
    displayNoDataMessage(declaredResultsTable, 'No P3 applicants with declared review results found.');
    
    // Hide the table and its header
    declaredResultsTable.style.display = 'none';
    const p3Header = document.getElementById('p3DeclaredResultsHeader');
    if (p3Header) {
      p3Header.style.display = 'none';
    }
  }
}




function createP3DeclaredRowFixed(rowData) {
  console.log("Creating fixed P3 declared row for:", rowData.name);
  
  const newRow = document.createElement('tr');
  
  if (rowData.userId) {
    newRow.setAttribute('data-userid', rowData.userId);
  }
  
  // Extract and clean up the status for P3
  let statusText = '';
  if (rowData.status) {
    statusText = rowData.status;
  } else if (rowData.cells && rowData.cells[6]) {
    const originalStatus = rowData.cells[6];
    const statusMatches = [
      /P3 - PASSED \(Pending Finalization\)/,
      /P3 - FAILED \(Pending Finalization\)/,
      /P3 - PASSED/,
      /P3 - FAILED/
    ];
    
    for (const regex of statusMatches) {
      const match = originalStatus.match(regex);
      if (match) {
        statusText = match[0];
        break;
      }
    }
    
    if (!statusText) {
      const p3Match = originalStatus.match(/P3[^<\n]*/);
      if (p3Match) {
        statusText = p3Match[0].trim();
      }
    }
  }
  
  if (!statusText) {
    statusText = 'P3 - UNKNOWN STATUS';
  }
  
  console.log(`P3 row status determined as: "${statusText}"`);
  
  // P3 declared rows have 6 columns (5 + actions)
  const cells = [
    rowData.cells[0] || 'N/A',                    // Applicant No.
    rowData.cells[1] || 'Unknown Applicant',      // Name
    rowData.cells[2] || 'Unknown Department',     // Department
    rowData.cells[3] || 'Unknown Position',       // Position
    `<span><strong>Status:</strong> ${statusText}</span>` // Status
  ];
  
  cells.forEach((cellHTML, index) => {
    const cell = document.createElement('td');
    cell.innerHTML = cellHTML;
    newRow.appendChild(cell);
  });
  
  // Add Actions column
  const actionsCell = document.createElement('td');
  const userId = rowData.userId || '';
  
  actionsCell.innerHTML = `
    <button 
      class="btn-change-status" 
      data-userid="${userId}"
      onclick="changeApplicantStatus('${userId}')"
    >
      Change Status
    </button>
  `;
  
  newRow.appendChild(actionsCell);
  
  return newRow;
}

function createP3AwaitingStatusCellFixed(rowData) {
  const userId = rowData.userId || '';
  const applicantId = rowData.applicantId || userId; // For interview form links
  
  // FIXED: Use the actual applicant status from rowData.status instead of hardcoded text
  const actualStatus = rowData.status || 'P3 - Line Manager Evaluation Accomplished';
  
  console.log(`Creating P3 status cell for userId: ${userId}, applicantId: ${applicantId}, status: ${actualStatus}`);
  
  return `
    <span><strong>Status:</strong> ${actualStatus}</span>
    <div style="margin-top: 10px;">
      <a href="/view-interview-form/${applicantId}" style="text-decoration: none;">
        <button class="btn-view-evaluation">View Evaluation</button>
      </a>
      <div style="margin-top: 5px;">
        <button 
          class="btn-review" 
          onclick="p3passApplicant('${userId}')"
          style="background-color: #28a745; color: white; margin-right: 5px; min-width: 70px;"
        >
          Pass
        </button>
        <button 
          class="btn-review" 
          onclick="p3rejectApplicant('${userId}')"
          style="background-color: #dc3545; color: white; min-width: 70px;"
        >
          Reject
        </button>
      </div>
    </div>
  `;
}

// FIXED: Start P3 Gmail Integration Flow
function startP3GmailIntegrationFlow() {
  console.log("Starting P3 Gmail integration flow...");
  
  closeModal('finalizeModalP3');
  finalizeP3Review();
}


function finalizeP3Review() {
  console.log("Starting P3 review finalization with Gmail compose integration...");

  const p3DeclaredResultsTable = document.getElementById("p3DeclaredResultsTable");
  const rows = p3DeclaredResultsTable?.querySelectorAll('tbody tr:not(.section-header-row)') || [];

  const passedUserIds = [];
  const failedUserIds = [];

  rows.forEach(row => {
    if (row.querySelector('td[colspan]')) return;
    
    const statusCell = row.querySelector('td:nth-child(5)'); // P3 has 5 columns + actions
    const userId = row.getAttribute('data-userid');
    
    if (statusCell && userId) {
      const statusText = statusCell.textContent.trim();
      
      if (statusText.includes('P3')) {
        if (statusText.includes('PASSED')) {
          passedUserIds.push(userId);
          console.log(`Added ${userId} to P3 passed list (${statusText})`);
        } else if (statusText.includes('FAILED')) {
          failedUserIds.push(userId);
          console.log(`Added ${userId} to P3 failed list (${statusText})`);
        }
      }
    }
  });

  if (passedUserIds.length === 0 && failedUserIds.length === 0) {
    alert("No P3 applicants found with PASSED or FAILED status.");
    return;
  }

  console.log(`Preparing P3 Gmail compose for: ${passedUserIds.length} passed, ${failedUserIds.length} failed`);

  p3EmailsToUpdate = {
    passed: passedUserIds,
    failed: failedUserIds
  };

  Promise.all([
    fetchP3ApplicantDataForEmails(passedUserIds, failedUserIds),
    fetchP3EmailTemplates()
  ])
  .then(([applicantData, templates]) => {
    currentP3PassedApplicants = applicantData.passedApplicants || [];
    currentP3FailedApplicants = applicantData.failedApplicants || [];
    
    if (currentP3PassedApplicants.length > 0) {
      showP3PassedEmailModal();
    } else if (currentP3FailedApplicants.length > 0) {
      showP3FailedEmailModal();
    } else {
      alert("No P3 applicant data found for email composition.");
    }
  })
  .catch(error => {
    console.error("Error preparing P3 email composition:", error);
    alert("Error preparing P3 email composition: " + error.message);
  });
}

// FIXED: Fetch P3 Applicant Data for Emails
async function fetchP3ApplicantDataForEmails(passedUserIds, failedUserIds) {
  try {
    const response = await fetch('/linemanager/applicant-tracker-jobposition/finalizeP3ReviewGmail', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        passedUserIds: passedUserIds,
        failedUserIds: failedUserIds
      }),
    });
    
    const data = await response.json();
    
    if (!data.success) {
      throw new Error(data.message || 'Failed to fetch P3 applicant data');
    }
    
    return {
      passedApplicants: data.passedApplicants || [],
      failedApplicants: data.failedApplicants || []
    };
    
  } catch (error) {
    console.error("Error fetching P3 applicant data:", error);
    throw error;
  }
}

async function fetchP3EmailTemplates() {
  try {
    const response = await fetch('/linemanager/applicant-tracker-jobposition/getP3EmailTemplates');
    const data = await response.json();
    
    if (!data.success) {
      throw new Error(data.message || 'Failed to fetch P3 email templates');
    }
    
    return data.templates;
    
  } catch (error) {
    console.error("Error fetching P3 email templates:", error);
    return {
      passed: {
        subject: 'Congratulations! Job Offer - Prime Infrastructure',
        template: 'Dear {applicantName},\n\nCongratulations! We are pleased to extend a job offer for the {jobTitle} position at {companyName}.\n\nBest regards,\n{companyName} Team'
      },
      failed: {
        subject: 'Thank You for Your Interest - Interview Process Complete',
        template: 'Dear {applicantName},\n\nThank you for participating in our interview process for the {jobTitle} position at {companyName}. We regret to inform you that we have decided to proceed with another candidate.\n\nBest regards,\n{companyName} Team'
      }
    };
  }
}

// FIXED: Show P3 Passed Email Modal
function showP3PassedEmailModal() {
  console.log("Showing P3 passed applicants Gmail compose modal");
  
  const recipientsList = document.getElementById('p3PassedRecipientsList');
  const recipientsCount = document.getElementById('p3PassedRecipientsCount');
  
  if (recipientsList && currentP3PassedApplicants.length > 0) {
    recipientsCount.textContent = currentP3PassedApplicants.length;
    
    recipientsList.innerHTML = currentP3PassedApplicants.map(applicant => `
      <div class="recipient-item">
        <div>
          <div class="recipient-name">${applicant.name}</div>
          <div class="recipient-email">${applicant.email}</div>
          <div class="recipient-job" style="font-size: 12px; color: #28a745; margin-top: 4px;">${applicant.jobTitle}</div>
        </div>
      </div>
    `).join('');
  }
  
  document.getElementById('p3PassedEmailSubject').value = 'Congratulations! Job Offer - Prime Infrastructure';
  document.getElementById('p3PassedEmailTemplate').value = 'Congratulations! You have passed the final interview stage.';
  
  document.getElementById('emailP3PassedModal').style.display = 'block';
}
function showP3FailedEmailModal() {
  console.log("Showing P3 failed applicants Gmail compose modal"); 
  
  const recipientsList = document.getElementById('p3FailedRecipientsList');
  const recipientsCount = document.getElementById('p3FailedRecipientsCount');
  
  if (recipientsList && currentP3FailedApplicants.length > 0) {
    recipientsCount.textContent = currentP3FailedApplicants.length;
    
    recipientsList.innerHTML = currentP3FailedApplicants.map(applicant => `
      <div class="recipient-item">
        <div>
          <div class="recipient-name">${applicant.name}</div>
          <div class="recipient-email">${applicant.email}</div>
          <div class="recipient-job" style="font-size: 12px; color: #dc3545; margin-top: 4px;">${applicant.jobTitle}</div>
        </div>
      </div>
    `).join('');
  }
  
  document.getElementById('p3FailedEmailSubject').value = 'Thank You for Your Interest - Interview Process Complete';
  document.getElementById('p3FailedEmailTemplate').value = 'Thank you for your interest in our position.';
  
  document.getElementById('emailP3FailedModal').style.display = 'block';
}

// FIXED: Open Gmail for P3 Passed
function openGmailForP3Passed() {
  const subject = document.getElementById('p3PassedEmailSubject').value;
  const template = document.getElementById('p3PassedEmailTemplate').value;
  
  if (!subject || !template) {
    alert("Please fill in both subject and template fields.");
    return;
  }
  
  if (!confirm(`This will open Gmail with ${currentP3PassedApplicants.length} passed P3 applicants in the "To:" field. Continue?`)) {
    return;
  }
  
  const gmailUrl = buildGmailComposeUrl(currentP3PassedApplicants, subject, template);
  
  console.log('Opening Gmail for P3 passed applicants:', gmailUrl);
  
  const gmailWindow = window.open(gmailUrl, '_blank');
  
  if (!gmailWindow) {
    alert('Please allow pop-ups for this site to open Gmail compose window.');
    return;
  }
  
  closeModal('emailP3PassedModal');
  
  if (currentP3FailedApplicants.length > 0) {
    setTimeout(() => {
      showP3FailedEmailModal();
    }, 1000);
  } else {
    setTimeout(() => {
      showP3StatusUpdateModal();
    }, 2000);
  }
}
function openGmailForP3Failed() {
  const subject = document.getElementById('p3FailedEmailSubject').value;
  const template = document.getElementById('p3FailedEmailTemplate').value;
  
  if (!subject || !template) {
    alert("Please fill in both subject and template fields.");
    return;
  }
  
  if (!confirm(`This will open Gmail with ${currentP3FailedApplicants.length} failed P3 applicants in the "To:" field. Continue?`)) {
    return;
  }
  
  const gmailUrl = buildGmailComposeUrl(currentP3FailedApplicants, subject, template);
  
  console.log('Opening Gmail for P3 failed applicants:', gmailUrl);
  
  const gmailWindow = window.open(gmailUrl, '_blank');
  
  if (!gmailWindow) {
    alert('Please allow pop-ups for this site to open Gmail compose window.');
    return;
  }
  
  closeModal('emailP3FailedModal');
  
  setTimeout(() => {
    showP3StatusUpdateModal();
  }, 2000);
}

// FIXED: Show P3 Status Update Modal
function showP3StatusUpdateModal() {
  console.log('Showing P3 status update modal');
  document.getElementById('p3StatusUpdateModal').style.display = 'block';
}

// FIXED: Update P3 Applicant Statuses
function updateP3ApplicantStatuses() {
  if (!confirm('Have you successfully sent the P3 emails via Gmail? This will update the P3 applicant statuses in the database.')) {
    return;
  }
  
  console.log('Updating P3 applicant statuses in database...');
  console.log('P3 Passed userIds:', p3EmailsToUpdate.passed);
  console.log('P3 Failed userIds:', p3EmailsToUpdate.failed);
  
  const updateButton = document.querySelector('#p3StatusUpdateModal .confirm-button');
  const originalText = updateButton.textContent;
  updateButton.textContent = 'Updating Database...';
  updateButton.disabled = true;
  
  fetch('/linemanager/applicant-tracker-jobposition/updateP3Statuses', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      passedUserIds: p3EmailsToUpdate.passed,
      failedUserIds: p3EmailsToUpdate.failed
    }),
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      alert(`P3 applicant statuses updated successfully!\n\nUpdated:\n- ${data.passedUpdated || 0} passed applicants\n- ${data.failedUpdated || 0} failed applicants`);
      
      closeModal('p3StatusUpdateModal');
      
      currentP3PassedApplicants = [];
      currentP3FailedApplicants = [];
      p3EmailsToUpdate = { passed: [], failed: [] };
      
      setTimeout(() => {
        const activeFilter = document.querySelector(".filter-button.active");
        if (activeFilter) {
          activeFilter.click();
        } else {
          document.getElementById("filter-all").click();
        }
      }, 500);
    } else {
      throw new Error(data.message || 'Failed to update P3 statuses');
    }
  })
  .catch(error => {
    console.error('Error updating P3 statuses:', error);
    alert('Error updating P3 applicant statuses: ' + error.message);
    
    updateButton.textContent = originalText;
    updateButton.disabled = false;
  });
}

// FIXED: Setup P3 Finalize Button Event Listener
document.addEventListener('DOMContentLoaded', function() {
  // P3 finalization buttons
  const finalizeP3Buttons = document.querySelectorAll('#finalizeP3Button, button[onclick*="finalizeP3"]');
  finalizeP3Buttons.forEach(button => {
    button.addEventListener('click', function() {
      if (checkAllP3ApplicantsMarked()) {
        document.getElementById('finalizeModalP3').style.display = 'block';
      } else {
        alert("Not all P3 applicants have been marked as passed or failed. Please make a decision for all applicants first.");
      }
    });
  });
});

// FIXED: Check if all P3 applicants are marked
function checkAllP3ApplicantsMarked() {
  const p3DeclaredResultsTable = document.getElementById("p3DeclaredResultsTable");
  if (!p3DeclaredResultsTable) return true;
  
  const rows = p3DeclaredResultsTable.querySelectorAll('tbody tr:not(.section-header-row)');
  if (rows.length === 0) return true;
  
  const relevantRows = Array.from(rows).filter(row => {
    const statusCell = row.querySelector('td:nth-child(5)');
    return statusCell && statusCell.textContent.includes('P3');
  });
  
  if (relevantRows.length === 0) return true;
  
  return relevantRows.every(row => {
    if (row.classList.contains('section-header-row') || 
        row.querySelector('td[colspan]')) {
      return true;
    }
    
    const statusCell = row.querySelector('td:nth-child(5)');
    if (!statusCell) return true;
    
    const statusText = statusCell.textContent;
    return statusText.indexOf('PASSED') !== -1 || statusText.indexOf('FAILED') !== -1;
  });
}

console.log('✅ P3 Gmail Integration Functions Loaded Successfully');
// ============================
// VISIBILITY & SECTION MANAGEMENT
// ============================

function updateP1P3SectionsVisibility(hasP1Awaiting, hasP1Declared, hasP3Awaiting, hasP3Declared) {
  console.log("Updating P1/P3 section visibility:", {
    hasP1Awaiting, hasP1Declared, hasP3Awaiting, hasP3Declared
  });

  // P1 Section visibility
  const p1ReviewSection = document.getElementById('p1ReviewSection');
  const p1AwaitingTable = document.getElementById('p1AwaitingActionTable');
  const p1DeclaredTable = document.getElementById('p1DeclaredResultsTable');
  const p1FinalizeButton = document.getElementById('p1FinalizeButtonContainer');
  
  if (p1ReviewSection) {
    p1ReviewSection.style.display = (hasP1Awaiting || hasP1Declared) ? 'block' : 'none';
  }
  
  if (p1AwaitingTable) {
    p1AwaitingTable.style.display = hasP1Awaiting ? 'table' : 'none';
  }
  
  if (p1DeclaredTable) {
    p1DeclaredTable.style.display = hasP1Declared ? 'table' : 'none';
  }
  
  if (p1FinalizeButton) {
    p1FinalizeButton.style.display = hasP1Declared ? 'block' : 'none';
  }
  
  // P3 Section visibility
  const p3ReviewSection = document.getElementById('p3ReviewSection');
  const p3AwaitingTable = document.getElementById('p3AwaitingActionTable');
  const p3DeclaredTable = document.getElementById('p3DeclaredResultsTable');
  const p3FinalizeButton = document.getElementById('p3FinalizeButtonContainer');
  
  if (p3ReviewSection) {
    p3ReviewSection.style.display = (hasP3Awaiting || hasP3Declared) ? 'block' : 'none';
  }
  
  if (p3AwaitingTable) {
    p3AwaitingTable.style.display = hasP3Awaiting ? 'table' : 'none';
  }
  
  if (p3DeclaredTable) {
    p3DeclaredTable.style.display = hasP3Declared ? 'table' : 'none';
  }
  
  if (p3FinalizeButton) {
    p3FinalizeButton.style.display = hasP3Declared ? 'block' : 'none';
  }
}

function displayNoDataMessage(table, message) {
  if (!table) return;
  
  const tbody = table.querySelector('tbody');
  if (!tbody) return;
  
  const existingMessage = tbody.querySelector('tr td[colspan].no-data-message');
  
  if (existingMessage) {
    existingMessage.textContent = message;
  } else {
    tbody.innerHTML = '';
    
    const messageRow = document.createElement('tr');
    const messageCell = document.createElement('td');
    
    const headerCells = table.querySelectorAll('thead th');
    const colspan = headerCells.length || 7;
    
    messageCell.setAttribute('colspan', colspan.toString());
    messageCell.className = 'text-center no-data-message';
    messageCell.style.padding = '20px';
    messageCell.style.backgroundColor = '#f8f9fa';
    messageCell.style.borderLeft = '4px solid #07ACB9';
    messageCell.style.color = '#555';
    messageCell.style.fontSize = '16px';
    messageCell.style.fontStyle = 'italic';
    messageCell.textContent = message;
    
    messageRow.appendChild(messageCell);
    tbody.appendChild(messageRow);
  }
}

function highlightActiveFilter(status) {
  document.querySelectorAll('.filter-button').forEach(btn => btn.classList.remove('active'));
  if (status === 'all') {
    document.getElementById('filter-all').classList.add('active');
  } else if (status === 'forreview') {
    document.getElementById('filter-forreview').classList.add('active');
  } else if (status === 'forevaluation') {
    document.getElementById('filter-forevaluation').classList.add('active');
  } else if (status === 'foronboarding') {
    document.getElementById('filter-foronboarding').classList.add('active');
  }
}


// Add this function to debug P3 detection issues
function debugP3Detection() {
  console.log("=== DEBUGGING P3 DETECTION ISSUES ===");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("❌ Main table not found");
    return;
  }
  
  const rows = Array.from(mainTable.querySelectorAll('tbody tr'));
  console.log(`Found ${rows.length} total rows in main table`);
  
  let p3Count = 0;
  let evaluationCount = 0;
  
  rows.forEach((row, index) => {
    const statusCell = row.querySelector('td:nth-child(5)');
    if (!statusCell) {
      console.log(`Row ${index + 1}: No status cell found`);
      return;
    }
    
    // Method 1: Check span element
    const statusSpan = statusCell.querySelector('span');
    let statusFromSpan = '';
    if (statusSpan) {
      statusFromSpan = statusSpan.textContent.replace(/Status:\s*/g, '').trim();
    }
    
    // Method 2: Full cell text
    const fullCellText = statusCell.textContent.trim();
    
    // Method 3: Cell innerHTML
    const cellHTML = statusCell.innerHTML;
    
    console.log(`\n=== ROW ${index + 1} ANALYSIS ===`);
    console.log(`Status from span: "${statusFromSpan}"`);
    console.log(`Full cell text: "${fullCellText.substring(0, 100)}..."`);
    console.log(`Cell HTML: "${cellHTML.substring(0, 150)}..."`);
    
    // Check for P3 in any form
    const hasP3 = statusFromSpan.includes('P3') || fullCellText.includes('P3') || cellHTML.includes('P3');
    const hasEvaluation = statusFromSpan.includes('Line Manager Evaluation Accomplished') || 
                         fullCellText.includes('Line Manager Evaluation Accomplished') || 
                         cellHTML.includes('Line Manager Evaluation Accomplished');
    
    if (hasP3) {
      p3Count++;
      console.log(`✅ Found P3 status in row ${index + 1}`);
      
      if (hasEvaluation) {
        evaluationCount++;
        console.log(`✅ Found "Line Manager Evaluation Accomplished" in row ${index + 1}`);
        
        // Check if this row has userId
        const userId = row.getAttribute('data-userid');
        console.log(`Row ${index + 1} userId: ${userId || 'NOT FOUND'}`);
        
        // Try to extract rowData
        try {
          const rowData = extractRowDataEnhanced(row, index);
          console.log(`Row ${index + 1} extracted data:`, {
            name: rowData?.name || 'NO NAME',
            userId: rowData?.userId || 'NO USERID',
            status: rowData?.status || 'NO STATUS'
          });
        } catch (error) {
          console.error(`Error extracting row data for row ${index + 1}:`, error);
        }
      }
    }
  });
  
  console.log(`\n=== SUMMARY ===`);
  console.log(`Total rows with P3: ${p3Count}`);
  console.log(`Total rows with "Line Manager Evaluation Accomplished": ${evaluationCount}`);
  
  // Check if P3 tables exist
  const p3AwaitingTable = document.getElementById('p3AwaitingActionTable');
  const p3DeclaredTable = document.getElementById('p3DeclaredResultsTable');
  
  console.log(`P3 Awaiting table exists: ${p3AwaitingTable ? 'YES' : 'NO'}`);
  console.log(`P3 Declared table exists: ${p3DeclaredTable ? 'YES' : 'NO'}`);
  
  if (p3AwaitingTable) {
    const p3Rows = p3AwaitingTable.querySelectorAll('tbody tr');
    console.log(`P3 Awaiting table currently has ${p3Rows.length} rows`);
    
    if (p3Rows.length > 0) {
      p3Rows.forEach((row, idx) => {
        const cells = row.querySelectorAll('td');
        console.log(`P3 Awaiting Row ${idx + 1}: ${cells.length} cells`);
        if (cells.length > 0) {
          console.log(`  First cell: ${cells[0].textContent}`);
          console.log(`  Last cell: ${cells[cells.length - 1].textContent.substring(0, 50)}...`);
        }
      });
    }
  }
  
  return {
    totalRows: rows.length,
    p3Count: p3Count,
    evaluationCount: evaluationCount,
    tablesExist: {
      awaiting: !!p3AwaitingTable,
      declared: !!p3DeclaredTable
    }
  };
}

// Function to manually trigger P3 review filter
function testP3ReviewFilter() {
  console.log("=== TESTING P3 REVIEW FILTER ===");
  
  // Click the For Review filter
  const forReviewButton = document.getElementById('filter-forreview');
  if (forReviewButton) {
    console.log("Clicking For Review filter...");
    forReviewButton.click();
    
    // Wait a bit then check results
    setTimeout(() => {
      const p3AwaitingTable = document.getElementById('p3AwaitingActionTable');
      if (p3AwaitingTable) {
        const p3Rows = p3AwaitingTable.querySelectorAll('tbody tr');
        console.log(`After filter click: P3 Awaiting table has ${p3Rows.length} rows`);
        
        p3Rows.forEach((row, idx) => {
          const noDataCell = row.querySelector('.no-data-message');
          if (noDataCell) {
            console.log(`Row ${idx + 1}: No data message - "${noDataCell.textContent}"`);
          } else {
            const cells = row.querySelectorAll('td');
            console.log(`Row ${idx + 1}: ${cells.length} cells with actual data`);
          }
        });
      }
    }, 1000);
  } else {
    console.log("❌ For Review filter button not found");
  }
}

// Make functions globally available
window.debugP3Detection = debugP3Detection;
window.testP3ReviewFilter = testP3ReviewFilter;

// Function to create test P3 data for debugging
function createTestP3Data() {
  console.log("=== CREATING TEST P3 DATA ===");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("❌ Main table not found");
    return;
  }
  
  const tbody = mainTable.querySelector('tbody');
  const rows = Array.from(tbody.querySelectorAll('tr'));
  
  if (rows.length === 0) {
    console.log("❌ No rows found in main table");
    return;
  }
  
  // Take the first row and modify it to have P3 status
  const testRow = rows[0];
  const statusCell = testRow.querySelector('td:nth-child(5)');
  
  if (statusCell) {
    const statusSpan = statusCell.querySelector('span');
    if (statusSpan) {
      const originalStatus = statusSpan.textContent;
      console.log(`Original status: "${originalStatus}"`);
      
      // Update to P3 status
      statusSpan.innerHTML = '<strong>Status:</strong> P3 - Line Manager Evaluation Accomplished';
      
      console.log(`✅ Updated first row status to: "P3 - Line Manager Evaluation Accomplished"`);
      
      // Ensure the row has a userId
      if (!testRow.getAttribute('data-userid')) {
        testRow.setAttribute('data-userid', 'test-user-' + Date.now());
        console.log(`✅ Added test userId to row`);
      }
      
      // Add For Review button if it doesn't exist
      const actionsCell = testRow.querySelector('td:last-child');
      if (actionsCell && !actionsCell.querySelector('.btn-review')) {
        const buttonDiv = document.createElement('div');
        buttonDiv.style.marginTop = '10px';
        buttonDiv.innerHTML = `
          <button class="btn-review" onclick="goToP3ReviewFilter()" 
                  style="background-color: white; color: black; border: 1px solid #124A5C; padding: 10px 20px; cursor: pointer; border-radius: 5px; font-size: 14px; min-width: 150px; text-align: center;">
            For Review
          </button>
        `;
        actionsCell.appendChild(buttonDiv);
        console.log(`✅ Added For Review button to row`);
      }
      
      alert('Test P3 data created! Now try clicking the "For Review" filter to see if it appears in the P3 Awaiting section.');
      
    } else {
      console.log("❌ No status span found in the first row");
    }
  } else {
    console.log("❌ No status cell found in the first row");
  }
}

// Function to reset test data
function resetTestData() {
  console.log("=== RESETTING TEST DATA ===");
  
  // Refresh the page to get original data
  if (confirm('This will refresh the page to reset test data. Continue?')) {
    window.location.reload();
  }
}

// Function to check current status of all rows
function checkAllRowStatuses() {
  console.log("=== CHECKING ALL ROW STATUSES ===");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("❌ Main table not found");
    return;
  }
  
  const rows = Array.from(mainTable.querySelectorAll('tbody tr'));
  console.log(`Found ${rows.length} rows to check`);
  
  const statusCounts = {
    p1: 0,
    p2: 0,
    p3: 0,
    other: 0
  };
  
  rows.forEach((row, index) => {
    const statusCell = row.querySelector('td:nth-child(5)');
    if (!statusCell) return;
    
    const statusSpan = statusCell.querySelector('span');
    const statusText = statusSpan ? statusSpan.textContent : statusCell.textContent;
    
    console.log(`Row ${index + 1}: "${statusText.trim()}"`);
    
    if (statusText.includes('P1')) {
      statusCounts.p1++;
    } else if (statusText.includes('P2')) {
      statusCounts.p2++;
    } else if (statusText.includes('P3')) {
      statusCounts.p3++;
      
      // Log specific P3 statuses
      if (statusText.includes('Line Manager Evaluation Accomplished')) {
        console.log(`  --> P3 Line Manager Evaluation Accomplished found!`);
      }
    } else {
      statusCounts.other++;
    }
  });
  
  console.log(`\n=== STATUS COUNTS ===`);
  console.log(`P1 statuses: ${statusCounts.p1}`);
  console.log(`P2 statuses: ${statusCounts.p2}`);
  console.log(`P3 statuses: ${statusCounts.p3}`);
  console.log(`Other statuses: ${statusCounts.other}`);
  
  return statusCounts;
}

// Make functions globally available
window.createTestP3Data = createTestP3Data;
window.resetTestData = resetTestData;
window.checkAllRowStatuses = checkAllRowStatuses;

// ============================
// DATA EXTRACTION & SCORE MANAGEMENT
// ============================

function extractScoresFromMainTable() {
  console.log("Extracting scores and userIds from main table...");
  
  window.mainTableScores = {};
  window.mainTableUserIds = {};
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("Main table not found");
    return;
  }
  
  const rows = mainTable.querySelectorAll('tbody tr');
  console.log(`Found ${rows.length} rows in main table`);
  
  rows.forEach((row, index) => {
    const nameCell = row.querySelector('td:nth-child(2)');
    if (!nameCell) return;
    
    const fullName = nameCell.textContent.split('\n')[0].trim();
    
    const reviewButton = row.querySelector('.btn-review');
    if (reviewButton) {
      const onclick = reviewButton.getAttribute('onclick') || '';
      if (onclick.includes('lineManagerInitialScreeningModal')) {
        const userIdMatch = onclick.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
        if (userIdMatch && userIdMatch[1]) {
          const userId = userIdMatch[1];
          
          window.mainTableUserIds[fullName] = userId;
          
          const scoreMatch = onclick.match(/},\s*['"]([^'"]*)['"]/);
          if (scoreMatch && scoreMatch[1]) {
            const score = scoreMatch[1];
            
            window.mainTableScores[userId] = score;
            window.mainTableScores[fullName] = score;
            
            console.log(`Extracted - Name: ${fullName}, UserId: ${userId}, Score: ${score}`);
          }
        }
      }
    }
  });
  
  console.log(`Extracted ${Object.keys(window.mainTableScores).length} scores from main table`);
}

function buildApplicantRegistry() {
  console.log("Building comprehensive applicant registry...");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("Main table not found - cannot build registry");
    return;
  }
  
  const rows = mainTable.querySelectorAll('tbody tr');
  
  rows.forEach((row, index) => {
    const reviewButton = row.querySelector('.btn-review');
    if (reviewButton) {
      const onclick = reviewButton.getAttribute('onclick') || '';
      if (onclick.includes('lineManagerInitialScreeningModal')) {
        const userIdMatch = onclick.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
        if (userIdMatch && userIdMatch[1]) {
          const userId = userIdMatch[1];
          
          const nameCell = row.querySelector('td:nth-child(2)');
          if (!nameCell) return;
          
          const fullContent = nameCell.innerHTML;
          const nameParts = fullContent.split('<br>');
          
          let fullName = '';
          if (nameParts.length > 0) {
            fullName = nameParts[0].trim();
          }
          
          let email = '';
          if (nameParts.length > 1) {
            email = nameParts[1].replace(/<[^>]*>/g, '').trim();
          }
          
          const deptCell = row.querySelector('td:nth-child(3)');
          const positionCell = row.querySelector('td:nth-child(4)');
          const department = deptCell ? deptCell.textContent.trim() : '';
          const position = positionCell ? positionCell.textContent.trim() : '';
          
          const statusCell = row.querySelector('td:nth-child(5) span');
          const status = statusCell ? statusCell.textContent.trim() : '';
          
          const scoreMatch = onclick.match(/},\s*['"]([^'"]*)['"]/);
          let score = null;
          if (scoreMatch && scoreMatch[1]) {
            score = scoreMatch[1];
            
            window.applicantsScores[userId] = score;
            window.mainTableScores[userId] = score;
            window.mainTableScores[fullName] = score;
          }
          
          window.applicantRegistry[userId] = {
            userId: userId,
            fullName: fullName,
            email: email,
            department: department,
            position: position,
            status: status,
            score: score
          };
          
          window.nameToUserId[fullName] = userId;
          window.emailToUserId[email] = userId;
          window.mainTableUserIds[fullName] = userId;
          window.applicantNameMapping[fullName] = userId;
          window.applicantStatusMap[userId] = status;
          
          row.setAttribute('data-userid', userId);
          row.setAttribute('data-name', fullName);
          row.setAttribute('data-email', email);
          
          console.log(`Added userId ${userId}, name '${fullName}' to registry`);
        }
      }
    }
  });
  
  console.log(`Applicant registry built with ${Object.keys(window.applicantRegistry).length} entries`);
}

function captureInitialScreeningScores() {
  console.log("Capturing initial screening scores from lineManagerInitialScreeningModal buttons");

  const reviewButtons = document.querySelectorAll('button[onclick*="lineManagerInitialScreeningModal"]');

  if (!window.applicantsScores) {
    window.applicantsScores = {};
  }

  if (!window.applicantNameMapping) {
    window.applicantNameMapping = {};
  }

  reviewButtons.forEach(button => {
    const onclickAttr = button.getAttribute('onclick') || '';
    
    try {
      const userIdMatch = onclickAttr.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
      if (userIdMatch && userIdMatch[1]) {
        const userId = userIdMatch[1];
        
        const row = button.closest('tr');
        if (row) {
          const nameCell = row.querySelector('td:nth-child(2)');
          if (nameCell) {
            const name = nameCell.textContent.replace(/\s+/g, ' ').trim();
            window.applicantNameMapping[name] = userId;
          }
        }
        
        const scoreMatch = onclickAttr.match(/},\s*['"]([^'"]*)['"]/);
        if (scoreMatch && scoreMatch[1]) {
          const score = scoreMatch[1];
          
          window.applicantsScores[userId] = score;
          console.log(`Cached score ${score} for userId ${userId}`);
        }
      }
    } catch (error) {
      console.error('Error parsing button onclick:', error);
    }
  });

  console.log(`Captured ${Object.keys(window.applicantsScores).length} scores`);
}

function captureApplicantsDataEnhanced() {
  console.log("Enhanced capture of all applicants data with improved user-specific score tracking");
  
  window.applicantsScores = window.applicantsScores || {};
  window.applicantNameMapping = window.applicantNameMapping || {};
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("Main table not found");
    return;
  }
  
  const rows = mainTable.querySelectorAll('tbody tr');
  
  rows.forEach((row, idx) => {
    const nameCell = row.querySelector('td:nth-child(2)');
    const applicantName = nameCell ? nameCell.textContent.replace(/\s+/g, ' ').trim() : '';
    
    const reviewButton = row.querySelector('.btn-review');
    if (reviewButton) {
      const onclickAttr = reviewButton.getAttribute('onclick') || '';
      if (onclickAttr.includes('lineManagerInitialScreeningModal')) {
        try {
          const userIdMatch = onclickAttr.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
          if (userIdMatch && userIdMatch[1]) {
            const userId = userIdMatch[1];
            
            if (applicantName) {
              window.applicantNameMapping[applicantName] = userId;
            }
            
            const scoreMatch = onclickAttr.match(/},\s*['"]([^'"]*)['"]/);
            if (scoreMatch && scoreMatch[1]) {
              const totalScore = scoreMatch[1];
              
              window.applicantsScores[userId] = totalScore;
              console.log(`Row ${idx+1}: Stored score ${totalScore} for userId ${userId}, name ${applicantName}`);
            } else {
              console.log(`Row ${idx+1}: No score found in onclick attribute for userId ${userId}`);
            }
          }
        } catch (error) {
          console.error(`Error processing row ${idx+1}:`, error);
        }
      }
    }
  });
  
  console.log(`Enhanced capture completed: Found ${Object.keys(window.applicantsScores).length} user-specific scores`);
}

function getTotalScoreDirectly(userId, targetRow) {
  if (!userId || !targetRow) {
    console.log("Missing userId or targetRow, cannot get score");
    return;
  }
  
  console.log(`Looking for direct score for userId: ${userId}`);
  
  targetRow.setAttribute('data-userid', userId);
  
  // 1. First check the global cache
  if (window.applicantsScores && window.applicantsScores[userId]) {
    const cachedScore = window.applicantsScores[userId];
    console.log(`Using cached score ${cachedScore} for userId ${userId}`);
    updateScoreCellWithFormatting(targetRow, cachedScore);
    return;
  }
  
  // 2. Get all review buttons from the main table and other tables
  const allReviewButtons = document.querySelectorAll('.btn-review');
  let foundScore = false;
  
  for (const button of allReviewButtons) {
    const onclickAttr = button.getAttribute('onclick') || '';
    
    if (onclickAttr.includes(`lineManagerInitialScreeningModal('${userId}'`) || 
        onclickAttr.includes(`lineManagerInitialScreeningModal("${userId}"`)) {
      
      try {
        const params = onclickAttr.match(/lineManagerInitialScreeningModal\s*\((.*?)\)/);
        if (params && params[1]) {
          const paramList = params[1].split(',');
          
          const closingBracketIndex = paramList.findIndex(p => p.includes('}'));
          if (closingBracketIndex >= 0 && paramList.length > closingBracketIndex + 1) {
            const scoreParam = paramList[closingBracketIndex + 1].trim();
            const score = scoreParam.replace(/['"]/g, '');
            
            console.log(`Extracted score from button: ${score}`);
            
            if (!window.applicantsScores) window.applicantsScores = {};
            window.applicantsScores[userId] = score;
            
            updateScoreCellWithFormatting(targetRow, score);
            foundScore = true;
            break;
          }
        }
      } catch (error) {
        console.error('Error parsing button parameters:', error);
      }
    }
  }
  
  // 3. If still not found, try to find it in initial screening data
  if (!foundScore) {
    const allButtons = document.querySelectorAll(`button[onclick*="${userId}"]`);
    
    for (const button of allButtons) {
      const onclickAttr = button.getAttribute('onclick') || '';
      if (onclickAttr.includes('lineManagerInitialScreeningModal')) {
        try {
          const match = onclickAttr.match(/},\s*['"]([^'"]*)['"]/);
          if (match && match[1]) {
            const score = match[1];
            
            console.log(`Found score ${score} from onclick attribute for userId ${userId}`);
            
            if (!window.applicantsScores) window.applicantsScores = {};
            window.applicantsScores[userId] = score;
            
            updateScoreCellWithFormatting(targetRow, score);
            foundScore = true;
            break;
          }
        } catch (error) {
          console.error('Error extracting score from button:', error);
        }
      }
    }
  }
  
  // 4. If score still not found, use N/A
  if (!foundScore) {
    console.log(`No score found for userId ${userId}, using N/A`);
    updateScoreCellWithFormatting(targetRow, 'N/A');
  }
}

function updateScoreCellWithFormatting(row, score) {
  if (!row) {
    console.log("Missing row in updateScoreCellWithFormatting");
    return;
  }
  
  const scoreCell = row.querySelector('td:nth-child(5)');
  if (!scoreCell) {
    console.log("Score cell not found in row");
    return;
  }
  
  let formattedScore;
  if (score === 'N/A' || score === undefined || score === null || score === '') {
    formattedScore = 'N/A';
  } else {
    const scoreValue = parseFloat(score);
    formattedScore = isNaN(scoreValue) ? 'N/A' : scoreValue.toFixed(1);
  }
  
  row.setAttribute('data-score', formattedScore);
  
  scoreCell.innerHTML = `<span class="score">${formattedScore}</span>`;
  
  if (formattedScore !== 'N/A') {
    const scoreValue = parseFloat(formattedScore);
    
    scoreCell.classList.remove('high-score', 'medium-score', 'low-score');
    
    if (scoreValue >= 85) {
      scoreCell.classList.add('high-score');
      scoreCell.style.color = 'green';
    } else if (scoreValue >= 75) {
      scoreCell.classList.add('medium-score');
      scoreCell.style.color = 'blue';
    } else {
      scoreCell.classList.add('low-score');
      scoreCell.style.color = 'orange';
    }
  }
}

function fixAllTableScores() {
  captureApplicantsDataEnhanced();
  
  const tables = [
    document.getElementById('p1AwaitingActionTable'),
    document.getElementById('p1DeclaredResultsTable'),
    document.getElementById('p3AwaitingActionTable'),
    document.getElementById('p3DeclaredResultsTable')
  ].filter(table => table !== null);
  
  tables.forEach(table => {
    const rows = table.querySelectorAll('tbody tr:not(.section-header-row)');
    console.log(`Fixing scores for ${rows.length} rows in ${table.id}`);
    
    rows.forEach((row, idx) => {
      if (row.querySelector('td[colspan]')) return;
      
      let userId = row.getAttribute('data-userid');
      
      if (!userId) {
        const nameCell = row.querySelector('td:nth-child(2)');
        if (nameCell) {
          const name = nameCell.textContent.replace(/\s+/g, ' ').trim();
          const foundUserId = findUserIdByNameImproved(name);
          if (foundUserId) {
            row.setAttribute('data-userid', foundUserId);
            userId = foundUserId;
          }
        }
      }
      
      if (userId) {
        forceDatabaseScoreFetch(userId, row);
      }
    });
  });
  
  console.log("All table scores have been fixed");
}
function forceDatabaseScoreFetch(userId, row) {
  if (!userId || !row) {
    console.log("Missing userId or row in forceDatabaseScoreFetch");
    return;
  }
  
  // FIXED: Check if this is a P3 row and skip score fetching
  const statusCell = row.querySelector('td:nth-child(5)');
  if (statusCell) {
    const statusText = statusCell.textContent || statusCell.innerHTML;
    if (statusText.includes('P3')) {
      console.log(`Skipping score fetch for P3 row (userId: ${userId})`);
      return; // Don't try to fetch scores for P3 rows
    }
  }
  
  console.log(`Forcing database score fetch for userId: ${userId}`);
  
  const score = extractScoreFromButton(userId);
  
  if (score) {
    if (!window.applicantsScores) window.applicantsScores = {};
    window.applicantsScores[userId] = score;
    
    updateScoreCellWithFormatting(row, score);
    console.log(`Set score ${score} from database for userId ${userId}`);
    return;
  }
  
  if (window.applicantsScores && window.applicantsScores[userId]) {
    const cachedScore = window.applicantsScores[userId];
    updateScoreCellWithFormatting(row, cachedScore);
    console.log(`Used cached score ${cachedScore} for userId ${userId}`);
    return;
  }
  
  console.log(`No database score found for userId ${userId}`);
  updateScoreCellWithFormatting(row, 'N/A');
}

function extractScoreFromButton(userId) {
  const buttons = document.querySelectorAll(`button[onclick*="'${userId}'"]`);
  for (const button of buttons) {
    const onclickAttr = button.getAttribute('onclick') || '';
    
    if (onclickAttr.includes('lineManagerInitialScreeningModal')) {
      const scoreMatch = onclickAttr.match(/},\s*['"]([^'"]*)['"]/);
      if (scoreMatch && scoreMatch[1]) {
        return scoreMatch[1];
      }
    }
  }
  
  return null;
}

function findUserIdByNameImproved(name) {
  if (!name) return null;
  
  const cleanName = name.replace(/\s+/g, ' ').trim();
  
  if (window.applicantNameMapping && window.applicantNameMapping[cleanName]) {
    return window.applicantNameMapping[cleanName];
  }
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) return null;
  
  const rows = mainTable.querySelectorAll('tbody tr');
  for (const row of rows) {
    const nameCell = row.querySelector('td:nth-child(2)');
    if (!nameCell) continue;
    
    const cellNameText = nameCell.textContent.replace(/\s+/g, ' ').trim();
    
    if (cellNameText === cleanName) {
      const reviewButton = row.querySelector('.btn-review');
      if (reviewButton) {
        const onclickAttr = reviewButton.getAttribute('onclick') || '';
        const userIdMatch = onclickAttr.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
        if (userIdMatch && userIdMatch[1]) {
          if (!window.applicantNameMapping) window.applicantNameMapping = {};
          window.applicantNameMapping[cleanName] = userIdMatch[1];
          
          return userIdMatch[1];
        }
      }
    }
  }
  
  return null;
}

// ============================
// BUTTON FIXES & STATUS MANAGEMENT
// ============================

function fixChangeStatusButtons() {
  console.log("Fixing Change Status buttons...");
  
  const buttons = document.querySelectorAll('.btn-change-status');
  console.log(`Found ${buttons.length} Change Status buttons`);
  
  buttons.forEach((button, index) => {
    const existingUserId = button.getAttribute('data-userid');
    if (existingUserId && existingUserId !== 'undefined' && existingUserId !== '') {
      return;
    }
    
    const row = button.closest('tr');
    if (!row) {
      console.log(`Button ${index}: No parent row found`);
      return;
    }
    
    const userId = getReliableUserId(row);
    
    if (userId) {
      button.setAttribute('data-userid', userId);
      button.setAttribute('onclick', `changeApplicantStatus('${userId}')`);
      console.log(`Button ${index}: Set userId ${userId} from registry of real data`);
    } else {
      console.log(`Button ${index}: No valid userId found from real data`);
    }
  });
}

function getReliableUserId(row) {
  if (!row) return null;
  
  let userId = row.getAttribute('data-userid');
  if (userId && userId !== 'undefined' && userId !== '') {
    return userId;
  }
  
  if (!window.applicantRegistry || Object.keys(window.applicantRegistry).length === 0) {
    buildApplicantRegistry();
  }
  
  const reviewButton = row.querySelector('.btn-review');
  if (reviewButton) {
    const onclick = reviewButton.getAttribute('onclick') || '';
    const userIdMatch = onclick.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
    if (userIdMatch && userIdMatch[1]) {
      userId = userIdMatch[1];
      row.setAttribute('data-userid', userId);
      return userId;
    }
  }
  
  const nameCell = row.querySelector('td:nth-child(2)');
  if (nameCell) {
    const fullName = nameCell.textContent.split('\n')[0].trim();
    
    for (const [id, data] of Object.entries(window.applicantRegistry)) {
      if (data.fullName === fullName) {
        userId = id;
        row.setAttribute('data-userid', userId);
        console.log(`Found userId ${userId} by name match: "${fullName}"`);
        return userId;
      }
    }
    
    for (const [id, data] of Object.entries(window.applicantRegistry)) {
      if (data.fullName && (data.fullName.includes(fullName) || fullName.includes(data.fullName))) {
        userId = id;
        row.setAttribute('data-userid', userId);
        console.log(`Found userId ${userId} by partial name match`);
        return userId;
      }
    }
    
    if (window.nameToUserId && window.nameToUserId[fullName]) {
      userId = window.nameToUserId[fullName];
      row.setAttribute('data-userid', userId);
      console.log(`Found userId ${userId} from nameToUserId mapping`);
      return userId;
    }
    
    if (window.applicantNameMapping && window.applicantNameMapping[fullName]) {
      userId = window.applicantNameMapping[fullName];
      row.setAttribute('data-userid', userId);
      console.log(`Found userId ${userId} from applicantNameMapping`);
      return userId;
    }
    
    if (window.mainTableUserIds && window.mainTableUserIds[fullName]) {
      userId = window.mainTableUserIds[fullName];
      row.setAttribute('data-userid', userId);
      console.log(`Found userId ${userId} from mainTableUserIds mapping`);
      return userId;
    }
  }
  
  console.log("WARNING: Could not find userId for this row");
  return null;
}

function emergencyButtonFix() {
  console.log("*** EMERGENCY FIX: Direct userId injection for Change Status buttons ***");
  
  const buttons = document.querySelectorAll('.btn-change-status');
  console.log(`Found ${buttons.length} Change Status buttons for direct fix`);
  
  buttons.forEach((button, index) => {
    if (button.getAttribute('data-userid') && 
        button.getAttribute('data-userid') !== 'undefined' && 
        button.getAttribute('data-userid') !== '') {
      return;
    }
    
    const row = button.closest('tr');
    let userId = row ? row.getAttribute('data-userid') : null;
    
    if ((!userId || userId === 'undefined' || userId === '') && typeof getReliableUserId === 'function') {
      userId = getReliableUserId(row);
    }
    
    if (!userId && row) {
      const nameCell = row.querySelector('td:nth-child(2)');
      if (nameCell) {
        const nameCellText = nameCell.textContent.trim();
        console.log(`Button ${index}: Row name cell text: "${nameCellText}"`);
        
        const nameParts = nameCellText.split('\n');
        if (nameParts.length > 0) {
          const name = nameParts[0].trim();
          console.log(`Button ${index}: Extracted name: "${name}"`);
          
          if (window.nameToUserId && window.nameToUserId[name]) {
            userId = window.nameToUserId[name];
          } else if (window.applicantNameMapping && window.applicantNameMapping[name]) {
            userId = window.applicantNameMapping[name];
          } else if (window.displayNameToUserId && window.displayNameToUserId[nameCellText]) {
            userId = window.displayNameToUserId[nameCellText];
          } else if (window.mainTableUserIds && window.mainTableUserIds[name]) {
            userId = window.mainTableUserIds[name];
          } else if (window.applicantRegistry) {
            for (const [id, data] of Object.entries(window.applicantRegistry)) {
              if (data.fullName === name) {
                userId = id;
                break;
              }
            }
          }
        }
      }
    }
    
    if (userId && userId !== 'undefined' && userId !== '') {
      button.setAttribute('data-userid', userId);
      button.setAttribute('onclick', `changeApplicantStatus('${userId}')`);
      console.log(`Button ${index}: DIRECT FIX APPLIED - Set userId to ${userId}`);
      
      if (row) {
        row.setAttribute('data-userid', userId);
      }
    } else {
      console.error(`Button ${index}: Could not find any valid userId - button may not work`);
      button.disabled = true;
      button.title = "Could not identify applicant - please refresh the page";
    }
  });
  
  setTimeout(finalScoresFix, 200);
}

function finalScoresFix() {
  if (typeof extractScoresFromMainTable === 'function') {
    extractScoresFromMainTable();
  }
  
  fixAllTableScores();
  
  const declaredResultsTable = document.getElementById('p1DeclaredResultsTable');
  if (declaredResultsTable) {
    const rows = declaredResultsTable.querySelectorAll('tbody tr:not(.section-header-row)');
    rows.forEach((row) => {
      if (row.querySelector('td[colspan]')) return;
      
      const nameCell = row.querySelector('td:nth-child(2)');
      const scoreCell = row.querySelector('td:nth-child(5)');
      
      if (nameCell && scoreCell && scoreCell.textContent.trim() === 'N/A') {
        const name = nameCell.textContent.split('\n')[0].trim();
        
        if (window.mainTableScores && window.mainTableScores[name]) {
          const score = window.mainTableScores[name];
          scoreCell.innerHTML = `<span class="score">${score}</span>`;
          console.log(`Final fix: Applied score ${score} for row with name '${name}'`);
          
          applyScoreColor(scoreCell, score);
        } else {
          const userId = row.getAttribute('data-userid');
          if (userId && window.mainTableScores && window.mainTableScores[userId]) {
            const score = window.mainTableScores[userId];
            scoreCell.innerHTML = `<span class="score">${score}</span>`;
            console.log(`Final fix: Applied score ${score} for row with userId ${userId}`);
            
            applyScoreColor(scoreCell, score);
          }
        }
      }
    });
  }
}

function applyScoreColor(scoreCell, score) {
  const scoreValue = parseFloat(score);
  if (!isNaN(scoreValue)) {
    if (scoreValue >= 85) {
      scoreCell.classList.add('high-score');
      scoreCell.style.color = 'green';
    } else if (scoreValue >= 75) {
      scoreCell.classList.add('medium-score');
      scoreCell.style.color = 'blue';
    } else {
      scoreCell.classList.add('low-score');
      scoreCell.style.color = 'orange';
    }
  }
}
// ============================
// STATUS CHANGE FUNCTIONS
// ============================

function changeApplicantStatus(userId) {
  console.log(`Change Status: Starting for userId: ${userId}`);
  
  if (!userId || userId === 'undefined' || userId === '') {
    console.error('Change Status: Invalid userId');
    alert("Error: Cannot identify the applicant to change status");
    return;
  }

  const row = document.querySelector(`tr[data-userid="${userId}"]`);
  if (!row) {
    console.error(`Change Status: Row not found for userId ${userId}`);
    alert("Error: Cannot find applicant row");
    return;
  }

  const statusCell = row.querySelector('td:nth-child(7)') || row.querySelector('td:nth-child(5)');
  if (!statusCell) {
    console.error('Change Status: Status cell not found');
    return;
  }

  const currentStatus = statusCell.textContent.trim();
  console.log(`Change Status: Current status for userId ${userId}: ${currentStatus}`);

  let newStatus;
  let apiEndpoint;

  if (currentStatus.includes('P1')) {
    if (currentStatus.includes('PASSED')) {
      newStatus = 'P1 - FAILED (Pending Finalization)';
      apiEndpoint = 'markAsP1Failed';
    } else if (currentStatus.includes('FAILED')) {
      newStatus = 'P1 - PASSED (Pending Finalization)';
      apiEndpoint = 'markAsP1Passed';
    } else {
      newStatus = 'P1 - PASSED (Pending Finalization)';
      apiEndpoint = 'markAsP1Passed';
    }
  } else if (currentStatus.includes('P3')) {
    if (currentStatus.includes('PASSED')) {
      newStatus = 'P3 - FAILED (Pending Finalization)';
      apiEndpoint = 'markAsP3Failed';
    } else if (currentStatus.includes('FAILED')) {
      newStatus = 'P3 - PASSED (Pending Finalization)';
      apiEndpoint = 'markAsP3Passed';
    } else {
      newStatus = 'P3 - PASSED (Pending Finalization)';
      apiEndpoint = 'markAsP3Passed';
    }
  } else {
    console.error('Change Status: Unknown status format');
    alert("Error: Cannot determine how to change this status");
    return;
  }

  statusCell.innerHTML = `<span><strong>Status:</strong> ${newStatus}</span>`;

  if (!window.pendingStatusChanges) {
    window.pendingStatusChanges = {};
  }
  window.pendingStatusChanges[userId] = newStatus.includes('PASSED') ? 'PASSED' : 'FAILED';

  console.log(`Change Status: Updated to ${newStatus} for userId ${userId}`);

  fetch(`/linemanager/applicant-tracker-jobposition/${apiEndpoint}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ userId: userId }),
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      console.log(`Change Status: Successfully updated temporary status for ${userId}`);
    } else {
      console.error(`Change Status: API error: ${data.message || 'Unknown error'}`);
      alert("Error updating status: " + (data.message || "Unknown error"));
      
      statusCell.innerHTML = `<span><strong>Status:</strong> ${currentStatus}</span>`;
    }
  })
  .catch(error => {
    console.error('Change Status: Network error:', error);
    alert("Failed to update applicant status.");
    
    statusCell.innerHTML = `<span><strong>Status:</strong> ${currentStatus}</span>`;
  });
}

function passApplicant() {
  const userId = document.getElementById('userId').value;
  if (!userId) {
    alert("Error: Invalid User ID");
    return;
  }

  fetch('/linemanager/applicant-tracker-jobposition/markAsP1Passed', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ userId: userId }),
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      document.getElementById('lineManagerInitialScreeningModalHtml').style.display = 'none';
      
      if (!window.pendingStatusChanges) {
        window.pendingStatusChanges = {};
      }
      window.pendingStatusChanges[userId] = 'PASSED';
      
      setTimeout(() => {
        const activeFilter = document.querySelector(".filter-button.active");
        if (activeFilter) {
          activeFilter.click();
        } else {
          document.getElementById("filter-all").click();
        }
      }, 300);
      
      alert("Successfully marked applicant status as PASSED! The applicant will be notified when you finalize the review.");
      
    } else {
      alert("Error updating applicant status: " + (data.message || "Unknown error"));
    }
  })
  .catch(error => {
    console.error("Error:", error);
    alert("Failed to update applicant status.");
  });
}

function rejectApplicant() {
  const userId = document.getElementById('userId').value;
  if (!userId) {
    alert("Error: Invalid User ID");
    return;
  }
  
  fetch('/linemanager/applicant-tracker-jobposition/markAsP1Failed', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ userId: userId }),
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      document.getElementById('lineManagerInitialScreeningModalHtml').style.display = 'none';
      
      if (!window.pendingStatusChanges) {
        window.pendingStatusChanges = {};
      }
      window.pendingStatusChanges[userId] = 'FAILED';
      
      setTimeout(() => {
        const activeFilter = document.querySelector(".filter-button.active");
        if (activeFilter) {
          activeFilter.click();
        } else {
          document.getElementById("filter-all").click();
        }
      }, 300);
      
      alert("Successfully marked applicant status as FAILED! The applicant will be notified when you finalize the review.");
      
    } else {
      alert("Error updating applicant status: " + (data.message || "Unknown error"));
    }
  })
  .catch(error => {
    console.error("Error:", error);
    alert("Failed to update applicant status.");
  });
}

function p3passApplicant(userId) {
  console.log(`P3 Pass: Starting pass action for userId: ${userId}`);
  
  if (!userId) {
    console.error('P3 Pass: Missing userId');
    alert("Error: Invalid User ID");
    return;
  }

  fetch('/linemanager/applicant-tracker-jobposition/markAsP3Passed', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ userId: userId }),
  })
  .then(response => {
    console.log(`P3 Pass: API response status: ${response.status}`);
    return response.json();
  })
  .then(data => {
    console.log('P3 Pass: API response data:', data);
    
    if (data.success) {
      if (!window.pendingStatusChanges) {
        window.pendingStatusChanges = {};
      }
      window.pendingStatusChanges[userId] = 'PASSED';
      
      // Move row from awaiting to declared section
      moveP3RowToSection(userId, 'p3AwaitingActionTable', 'p3DeclaredResultsTable');
      
      console.log(`P3 Pass: Successfully marked userId ${userId} as P3 PASSED!`);
      alert("Successfully marked applicant as P3 PASSED!");
      
    } else {
      console.error(`P3 Pass: API error: ${data.message}`);
      alert("Error updating applicant status: " + (data.message || "Unknown error"));
    }
  })
  .catch(error => {
    console.error("P3 Pass: Network error:", error);
    alert("Failed to update applicant status.");
  });
}

function p3rejectApplicant(userId) {
  console.log(`P3 Reject: Starting reject action for userId: ${userId}`);
  
  if (!userId) {
    console.error('P3 Reject: Missing userId');
    alert("Error: Invalid User ID");
    return;
  }

  fetch('/linemanager/applicant-tracker-jobposition/markAsP3Failed', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ userId: userId }),
  })
  .then(response => {
    console.log(`P3 Reject: API response status: ${response.status}`);
    return response.json();
  })
  .then(data => {
    console.log('P3 Reject: API response data:', data);
    
    if (data.success) {
      if (!window.pendingStatusChanges) {
        window.pendingStatusChanges = {};
      }
      window.pendingStatusChanges[userId] = 'FAILED';
      
      // Move row from awaiting to declared section
      moveP3RowToSection(userId, 'p3AwaitingActionTable', 'p3DeclaredResultsTable');
      
      console.log(`P3 Reject: Successfully marked userId ${userId} as P3 FAILED!`);
      alert("Successfully marked applicant as P3 FAILED!");
      
    } else {
      console.error(`P3 Reject: API error: ${data.message}`);
      alert("Error updating applicant status: " + (data.message || "Unknown error"));
    }
  })
  .catch(error => {
    console.error("P3 Reject: Network error:", error);
    alert("Failed to update applicant status.");
  });
}
function moveP3RowToSection(userId, fromTableId, toTableId) {
  console.log(`P3 Move: Moving userId ${userId} from ${fromTableId} to ${toTableId}`);
  
  const fromTable = document.getElementById(fromTableId);
  const toTable = document.getElementById(toTableId);
  
  if (!fromTable || !toTable) {
    console.error(`P3 Move: Tables not found: ${fromTableId} or ${toTableId}`);
    return;
  }
  
  const rows = fromTable.querySelectorAll('tbody tr');
  let rowToMove = null;
  
  for (const row of rows) {
    if (row.getAttribute('data-userid') === userId) {
      rowToMove = row;
      break;
    }
  }
  
  if (!rowToMove) {
    console.error(`P3 Move: Row for userId ${userId} not found in ${fromTableId}`);
    return;
  }
  
  const statusCell = rowToMove.querySelector('td:last-child');
  if (statusCell) {
    const isPassed = window.pendingStatusChanges[userId] === 'PASSED';
    statusCell.innerHTML = `
      <span><strong>Status:</strong> P3 - ${isPassed ? 'PASSED' : 'FAILED'} (Pending Finalization)</span>
    `;
    console.log(`P3 Move: Updated status cell to P3 - ${isPassed ? 'PASSED' : 'FAILED'}`);
  }
  
  if (toTableId === 'p3DeclaredResultsTable') {
    if (rowToMove.querySelectorAll('td').length === 5) {
      const actionsCell = document.createElement('td');
      const isPassed = window.pendingStatusChanges[userId] === 'PASSED';
      actionsCell.innerHTML = `
        <button 
          class="btn-change-status ${isPassed ? 'status-passed' : 'status-failed'}" 
          data-userid="${userId}"
          onclick="changeApplicantStatus('${userId}')"
        >
          Change Status
        </button>
      `;
      rowToMove.appendChild(actionsCell);
      console.log(`P3 Move: Added change status button for userId ${userId}`);
    }
  }
  
  rowToMove.remove();
  
  const targetTbody = toTable.querySelector('tbody');
  
  const noDataRow = targetTbody.querySelector('.no-data-message')?.closest('tr');
  if (noDataRow) {
    noDataRow.remove();
  }
  
  targetTbody.appendChild(rowToMove);
  
  console.log(`P3 Move: Successfully moved userId ${userId} to ${toTableId}`);
  
  // Update the finalize button visibility
  setTimeout(updateSectionHeaderButtons, 100);
}

// ============================
// UTILITY FUNCTIONS
// ============================

function setupToggleStatusButtons() {
  const buttons = document.querySelectorAll('.btn-toggle-status:not([data-has-listener])');
  console.log(`Setting up ${buttons.length} toggle status buttons`);

  buttons.forEach(button => {
    button.setAttribute('data-has-listener', 'true');
    
    const userId = button.getAttribute('data-userid') || 
                   button.closest('tr')?.getAttribute('data-userid');
    
    if (userId) {
      const row = button.closest('tr');
      if (row) {
        const statusCell = row.querySelector('td:nth-child(7)');
        if (statusCell) {
          const currentStatus = statusCell.textContent.trim();
          if (currentStatus.includes('PASSED')) {
            button.textContent = 'Passed';
            button.classList.add('status-passed');
            button.classList.remove('status-failed');
          } else if (currentStatus.includes('FAILED')) {
            button.textContent = 'Failed';
            button.classList.add('status-failed');
            button.classList.remove('status-passed');
          } else {
            button.textContent = 'Toggle';
          }
        }
      }
      
      const newButton = button.cloneNode(true);
      button.parentNode.replaceChild(newButton, button);
      
      newButton.addEventListener('click', function() {
        toggleApplicantStatus(this);
      });
      
      newButton.setAttribute('data-has-listener', 'true');
      
      if (userId) {
        newButton.setAttribute('data-userid', userId);
      }
    } else {
      console.log(`Button missing userId, cannot set up toggle functionality`);
    }
  });

  return buttons.length;
}

function checkAllApplicantsMarked(phase = null) {
  const declaredResultsTable = document.getElementById("p1DeclaredResultsTable") || document.getElementById("p3DeclaredResultsTable");
  if (!declaredResultsTable) return true;
  
  const rows = declaredResultsTable.querySelectorAll('tbody tr:not(.section-header-row)');
  if (rows.length === 0) return true;
  
  let relevantRows = Array.from(rows);
  
  if (phase) {
    relevantRows = relevantRows.filter(row => {
      const statusCell = row.querySelector('td:nth-child(7)') || row.querySelector('td:nth-child(5)');
      return statusCell && statusCell.textContent.includes(phase);
    });
    
    if (relevantRows.length === 0) return true;
  }
  
  return relevantRows.every(row => {
    if (row.classList.contains('section-header-row') || 
        row.querySelector('td[colspan="5"]') || 
        row.querySelector('td[colspan="6"]') || 
        row.querySelector('td[colspan="7"]') || 
        row.querySelector('td[colspan="8"]')) {
      return true;
    }
    
    const statusCell = row.querySelector('td:nth-child(7)') || row.querySelector('td:nth-child(5)');
    if (!statusCell) return true;
    
    const statusText = statusCell.textContent;
    return statusText.indexOf('PASSED') !== -1 || statusText.indexOf('FAILED') !== -1;
  });
}

function updateSectionHeaderButtons() {
  console.log("=== FIXED: Updating section header buttons based on data ===");

  const hasP1Declared = checkForP1DeclaredResultsFixed();
  const hasP3Declared = checkForP3DeclaredResultsFixed();
  
  console.log(`P1 Declared: ${hasP1Declared}, P3 Declared: ${hasP3Declared}`);
  
  updateFinalizeButtonVisibility('p1FinalizeButtonContainer', hasP1Declared);
  updateFinalizeButtonVisibility('p3FinalizeButtonContainer', hasP3Declared);
}


function checkForP1DeclaredResultsFixed() {
  const p1DeclaredTable = document.getElementById('p1DeclaredResultsTable');
  if (!p1DeclaredTable) return false;
  
  const p1Rows = p1DeclaredTable.querySelectorAll('tbody tr:not(.section-header-row)');
  return Array.from(p1Rows).some(row => {
    if (row.querySelector('td[colspan]')) return false;
    const statusCell = row.querySelector('td:nth-child(7)'); // P1 has 7 columns
    return statusCell && (
      statusCell.textContent.includes('P1 - PASSED (Pending Finalization)') ||
      statusCell.textContent.includes('P1 - FAILED (Pending Finalization)')
    );
  });
}

function checkForP3DeclaredResultsFixed() {
  const p3DeclaredTable = document.getElementById('p3DeclaredResultsTable');
  if (!p3DeclaredTable) return false;
  
  const p3Rows = p3DeclaredTable.querySelectorAll('tbody tr:not(.section-header-row)');
  return Array.from(p3Rows).some(row => {
    if (row.querySelector('td[colspan]')) return false;
    const statusCell = row.querySelector('td:nth-child(5)'); // P3 has 5 columns + actions
    return statusCell && (
      statusCell.textContent.includes('P3 - PASSED (Pending Finalization)') ||
      statusCell.textContent.includes('P3 - FAILED (Pending Finalization)')
    );
  });
}

function updateFinalizeButtonVisibility(buttonContainerId, shouldShow) {
  const buttonContainer = document.getElementById(buttonContainerId);
  if (buttonContainer) {
    buttonContainer.style.display = shouldShow ? 'block' : 'none';
  }
}

// ============================
// OTHER FILTER HANDLERS
// ============================

function handleEvaluationFilter(onboardingHeader, onboardingTable, allMainRows) {
  console.log("Handling For Evaluation filter - Looking for P3 - Awaiting for Line Manager Evaluation");
  
  if (onboardingHeader) onboardingHeader.style.display = 'none';
  if (onboardingTable) onboardingTable.style.display = 'none';
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (mainTable) mainTable.style.display = 'none';
  
  const applicantStatusSection = document.getElementById("applicantStatusSection");
  if (applicantStatusSection) {
    applicantStatusSection.style.display = 'none';
  }
  
  let evaluationSection = document.getElementById('evaluationSection');
  if (!evaluationSection) {
    evaluationSection = createEvaluationSection();
  }
  evaluationSection.style.display = 'block';
  
  const evaluationRows = [];
  console.log(`Analyzing ${allMainRows.length} rows for P3 evaluation criteria...`);
  
  allMainRows.forEach((row, index) => {
    const statusCell = row.querySelector('td:nth-child(5)');
    if (!statusCell) return;
    
    const statusSpan = statusCell.querySelector('span');
    const statusText = statusSpan ? statusSpan.textContent.trim() : '';
    
    const targetStatus = 'P3 - Awaiting for Line Manager Evaluation';
    
    let hasP3EvaluationStatus = false;
    if (statusText === targetStatus) {
      hasP3EvaluationStatus = true;
    }
    
    if (!hasP3EvaluationStatus) {
      return;
    }
    
    const lastCell = row.querySelector('td:last-child');
    if (!lastCell) return;
    
    let hasForEvaluationButton = false;
    
    const allButtons = Array.from(lastCell.querySelectorAll('button'));
    allButtons.forEach((button) => {
      const buttonText = button.textContent.trim();
      if (buttonText === 'For Evaluation') {
        hasForEvaluationButton = true;
      }
    });
    
    const allLinks = Array.from(lastCell.querySelectorAll('a'));
    allLinks.forEach((link) => {
      const href = link.getAttribute('href') || '';
      const linkButton = link.querySelector('button');
      const linkText = linkButton ? linkButton.textContent.trim() : '';
      
      if (linkText === 'For Evaluation') {
        hasForEvaluationButton = true;
      }
      
      if (href.includes('/evaluation-form/') || href.includes('/interview-form/')) {
        hasForEvaluationButton = true;
      }
    });
    
    const evalButtons = lastCell.querySelectorAll('.btn-evaluation');
    if (evalButtons.length > 0) {
      hasForEvaluationButton = true;
    }
    
    const lastCellText = lastCell.textContent;
    if (lastCellText.includes('For Evaluation')) {
      hasForEvaluationButton = true;
    }
    
    if (hasP3EvaluationStatus && hasForEvaluationButton) {
      const rowData = extractRowDataForEvaluation(row, index);
      if (rowData) {
        evaluationRows.push(rowData);
      }
    }
  });
  
  console.log(`Found ${evaluationRows.length} rows matching evaluation criteria`);
  
  populateEvaluationSection(evaluationRows);
  
  setTimeout(() => {
    if (typeof window.fixAllTableScores === 'function') {
      window.fixAllTableScores();
    }
  }, 300);
  
  highlightActiveFilter('forevaluation');
}

function handleOnboardingFilter(applicantStatusSection, onboardingHeader, onboardingTable, allOnboardingRows) {
  console.log("Handling For Onboarding filter - checking for onboarding statuses");
  
  if (applicantStatusSection) {
    applicantStatusSection.style.display = 'none';
  }
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (mainTable) {
    mainTable.style.display = 'none';
  }
  
  if (onboardingHeader) {
    onboardingHeader.style.display = 'block';
    onboardingHeader.textContent = 'Onboarding';
  }
  
  if (onboardingTable) {
    onboardingTable.style.display = 'table';
  }
  
  const onboardingStatuses = [
    'First Day Checklist Sent',
    'Checklist Accomplished', 
    'Account Created'
  ];
  
  let visibleRowCount = 0;
  
  allOnboardingRows.forEach(row => {
    const lastCell = row.querySelector('td:last-child');
    const statusText = lastCell ? lastCell.textContent.trim() : '';
    
    let showRow = false;
    
    for (const onboardingStatus of onboardingStatuses) {
      if (statusText === onboardingStatus) {
        showRow = true;
        console.log(`Found onboarding row with status: ${statusText}`);
        break;
      }
    }
    
    if (!showRow && lastCell && lastCell.querySelector('.btn-onboarding')) {
      showRow = true;
      console.log(`Found "For Onboarding" button in row`);
    }
    
    row.style.display = showRow ? '' : 'none';
    
    if (showRow) {
      visibleRowCount++;
    }
  });
  
  console.log(`Found ${visibleRowCount} onboarding rows to display`);
  
  if (onboardingTable && visibleRowCount === 0) {
    const tbody = onboardingTable.querySelector('tbody');
    
    if (tbody) {
      tbody.innerHTML = '';
      
      const messageRow = document.createElement('tr');
      const messageCell = document.createElement('td');
      
      messageCell.setAttribute('colspan', '5');
      messageCell.className = 'text-center no-data-message';
      messageCell.textContent = 'No applicants awaiting for onboarding.';
      
      messageRow.appendChild(messageCell);
      tbody.appendChild(messageRow);
    }
  }
  
  highlightActiveFilter('foronboarding');
}

function filterOnboardingRowsByStatus(allOnboardingRows) {
  console.log("Filtering onboarding rows based on status");
  
  const validOnboardingStatuses = [
    'Onboarding - First Day Checklist Sent',
    'Onboarding - Checklist Accomplished', 
    'Onboarding - Account Created'
  ];
  
  let visibleRowCount = 0;
  
  allOnboardingRows.forEach(row => {
    const lastCell = row.querySelector('td:last-child');
    const statusText = lastCell ? lastCell.textContent.trim() : '';
    
    let showRow = false;
    
    for (const validStatus of validOnboardingStatuses) {
      if (statusText === validStatus || statusText.includes(validStatus)) {
        showRow = true;
        console.log(`Valid onboarding row found: ${statusText}`);
        break;
      }
    }
    
    if (!showRow && lastCell && lastCell.querySelector('.btn-onboarding')) {
      showRow = true;
      console.log(`"For Onboarding" button found in row`);
    }
    
    row.style.display = showRow ? '' : 'none';
    
    if (showRow) {
      visibleRowCount++;
    }
  });
  
  console.log(`Onboarding table: ${visibleRowCount} valid rows displayed`);
  
  const onboardingTable = document.getElementById('onboardingTable');
  if (onboardingTable && visibleRowCount === 0) {
    const tbody = onboardingTable.querySelector('tbody');
    if (tbody && tbody.children.length === 0) {
      tbody.innerHTML = '';
      const messageRow = document.createElement('tr');
      const messageCell = document.createElement('td');
      messageCell.setAttribute('colspan', '5');
      messageCell.className = 'text-center no-data-message';
      messageCell.textContent = 'No applicants in onboarding process.';
      messageRow.appendChild(messageCell);
      tbody.appendChild(messageRow);
    }
  }
}

function createEvaluationSection() {
  console.log("Creating evaluation section...");
  
  let evaluationSection = document.getElementById('evaluationSection');
  if (evaluationSection) {
    return evaluationSection;
  }
  
  evaluationSection = document.createElement('div');
  evaluationSection.id = 'evaluationSection';
  evaluationSection.className = 'applicant-status-section';
  evaluationSection.style.cssText = 'background-color: #FFFFFF; padding: 20px; border-radius: 5px; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); margin: 10px 5px 20px;';
  
  evaluationSection.innerHTML = `
    <div class="section-header">
      <h3 class="subheader" style="color: #124A5C; margin-bottom: 15px; font-size: 20px; font-weight: bold;">
        Applicant Evaluation Management
      </h3>
    </div>
    <div class="divider" style="height: 2px; background-color: #124A5C; margin: 15px 0; width: 100%;"></div>
    
    <h4>Applicants Awaiting Evaluation</h4>
    <table class="tracking-table" id="evaluationTable">
      <thead>
        <tr>
          <th>Applicant No.</th>
          <th>Last Name, First Name</th>
          <th>Department</th>
          <th>Position Applied</th>
          <th>Applicant Status & Actions</th>
        </tr>
      </thead>
      <tbody>
        <!-- Will be populated dynamically -->
      </tbody>
    </table>
  `;
  
  const mainContent = document.querySelector('.main-content');
  const applicantStatusSection = document.getElementById('applicantStatusSection');
  
  if (mainContent && applicantStatusSection) {
    mainContent.insertBefore(evaluationSection, applicantStatusSection.nextSibling);
  } else if (mainContent) {
    mainContent.appendChild(evaluationSection);
  }
  
  console.log("Evaluation section created and added to DOM");
  return evaluationSection;
}

function hideEvaluationSection() {
  const evaluationSection = document.getElementById('evaluationSection');
  if (evaluationSection) {
    evaluationSection.style.display = 'none';
    console.log("Evaluation section hidden");
  }
}

function extractRowDataForEvaluation(row, index) {
  console.log(`Extracting data for evaluation row ${index + 1}`);
  
  const cells = Array.from(row.querySelectorAll('td'));
  if (cells.length < 5) {
    console.log(`Row ${index + 1}: Not enough cells (${cells.length})`);
    return null;
  }
  
  const userId = getReliableUserId(row);
  console.log(`Row ${index + 1}: userId = ${userId}`);
  
  const applicantNo = cells[0] ? cells[0].innerHTML : `APP${(index + 1).toString().padStart(5, '0')}`;
  const nameAndEmail = cells[1] ? cells[1].innerHTML : 'Unknown Applicant';
  const department = cells[2] ? cells[2].innerHTML : 'Unknown Department';
  const position = cells[3] ? cells[3].innerHTML : 'Unknown Position';
  
  const statusCell = cells[4];
  let statusText = '';
  if (statusCell) {
    const statusSpan = statusCell.querySelector('span');
    if (statusSpan) {
      statusText = statusSpan.textContent.trim();
    } else {
      statusText = statusCell.textContent.replace(/Status:\s*/g, '').trim();
    }
  }
  
  console.log(`Row ${index + 1}: Extracted status = "${statusText}"`);
  
  const actionsCell = cells[cells.length - 1];
  let actionsHtml = '';
  if (actionsCell) {
    const actionsClone = actionsCell.cloneNode(true);
    
    const statusParts = actionsClone.querySelectorAll('span');
    statusParts.forEach(span => {
      if (span.textContent.includes('Status:')) {
        span.remove();
      }
    });
    
    actionsHtml = actionsClone.innerHTML;
  }
  
  const statusAndActions = `<span><strong>Status:</strong> ${statusText}</span>` + 
                          (actionsHtml ? `<div style="margin-top: 10px;">${actionsHtml}</div>` : '');
  
  const rowData = {
    index: index + 1,
    cells: [
      applicantNo,
      nameAndEmail,
      department,
      position,
      statusAndActions
    ],
    userId: userId,
    status: statusText
  };
  
  console.log(`Row ${index + 1}: Successfully created row data`);
  return rowData;
}

function populateEvaluationSection(evaluationRows) {
  console.log(`Populating evaluation section with ${evaluationRows.length} rows`);
  
  const evaluationTable = document.getElementById('evaluationTable');
  if (!evaluationTable) {
    console.error("Evaluation table not found");
    return;
  }
  
  const tbody = evaluationTable.querySelector('tbody');
  if (!tbody) {
    console.error("Evaluation table tbody not found");
    return;
  }
  
  tbody.innerHTML = '';
  
  if (evaluationRows.length === 0) {
    const messageRow = document.createElement('tr');
    const messageCell = document.createElement('td');
    messageCell.setAttribute('colspan', '5');
    messageCell.className = 'text-center no-data-message';
    messageCell.textContent = 'No applicants with P3 - Awaiting for Line Manager Evaluation status found.';
    messageRow.appendChild(messageCell);
    tbody.appendChild(messageRow);
    console.log("No P3 evaluation rows found - showing no data message");
    return;
  }
  
  evaluationRows.forEach((rowData, index) => {
    console.log(`Creating row ${index + 1} for evaluation:`, rowData);
    
    const row = document.createElement('tr');
    
    if (rowData.userId) {
      row.setAttribute('data-userid', rowData.userId);
    }
    
    if (!rowData.cells || !Array.isArray(rowData.cells)) {
      console.error(`Row ${index + 1} missing cells data:`, rowData);
      return;
    }
    
    rowData.cells.forEach((cellContent, cellIndex) => {
      const cell = document.createElement('td');
      cell.innerHTML = cellContent;
      row.appendChild(cell);
    });
    
    tbody.appendChild(row);
    
    console.log(`✅ Row ${index + 1} added to evaluation table with status: ${rowData.status}`);
  });
  
  console.log(`✅ Successfully populated evaluation table with ${evaluationRows.length} P3 evaluation applicants`);
}

// ============================
// TABLE UTILITIES
// ============================

function ensureTableHeaders() {
  const tables = [
    document.getElementById('p1AwaitingActionTable'),
    document.getElementById('p1DeclaredResultsTable'),
    document.getElementById('p3AwaitingActionTable'),
    document.getElementById('p3DeclaredResultsTable')
  ].filter(table => table !== null);
  
  tables.forEach(table => {
    const thead = table.querySelector('thead');
    if (!thead || !thead.querySelector('tr th')) {
      const newThead = document.createElement('thead');
      
      if (table.id === 'p1DeclaredResultsTable') {
        newThead.innerHTML = `
          <tr>
            <th>Applicant No.</th>
            <th>Last Name, First Name</th>
            <th>Department</th>
            <th>Position Applied</th>
            <th>Total Score</th>
            <th>Work Setup/Availability</th>
            <th>Applicant Status</th>
            <th>Actions</th>
          </tr>
        `;
      } else if (table.id === 'p3DeclaredResultsTable') {
        newThead.innerHTML = `
          <tr>
            <th>Applicant No.</th>
            <th>Last Name, First Name</th>
            <th>Department</th>
            <th>Position Applied</th>
            <th>Applicant Status</th>
            <th>Actions</th>
          </tr>
        `;
      } else {
        newThead.innerHTML = `
          <tr>
            <th>Applicant No.</th>
            <th>Last Name, First Name</th>
            <th>Department</th>
            <th>Position Applied</th>
            <th>Total Score</th>
            <th>Work Setup/Availability</th>
            <th>Applicant Status</th>
          </tr>
        `;
      }
      
      if (thead) {
        table.replaceChild(newThead, thead);
      } else {
        table.insertBefore(newThead, table.firstChild);
      }
    }
  });
}



function filterTable() {
  const searchBar = document.getElementById("searchBar");
  if (!searchBar) return;
  
  const searchValue = searchBar.value.toLowerCase();
  const rows = document.querySelectorAll('.tracking-table tbody tr');
  
  rows.forEach(row => {
    if (row.classList.contains('section-header-row')) return;
    
    const rowText = Array.from(row.querySelectorAll('td'))
      .map(cell => cell.textContent.toLowerCase())
      .join(' ');
      
    row.style.display = rowText.includes(searchValue) ? '' : 'none';
  });
}

// ============================
// MODAL & DISPLAY FUNCTIONS
// ============================

function displayUploadedDocument(fileUrl, linkId, previewId) {
  const docLink = document.getElementById(linkId);
  const docPreview = document.getElementById(previewId);

  if (!docLink || !docPreview) {
    console.error(`Element not found: linkId=${linkId}, previewId=${previewId}`);
    return;
  }

  if (!fileUrl || fileUrl === '#' || fileUrl === 'undefined' || fileUrl === 'null') {
    docLink.href = "#";
    docLink.textContent = "No document uploaded";
    docPreview.innerHTML = "";
    return;
  }

  docLink.href = fileUrl;
  docLink.textContent = "View Uploaded Document";
  docLink.target = "_blank";
  
  const fileExtension = fileUrl.split('.').pop().toLowerCase();

  if (["jpg", "jpeg", "png", "gif", "webp"].includes(fileExtension)) {
    docPreview.innerHTML = `<img src="${fileUrl}" alt="Document Preview" style="max-width: 100%; max-height: 300px; border: 1px solid #ccc; padding: 5px;">`;
  } else if (fileExtension === "pdf") {
    docPreview.innerHTML = `<iframe src="${fileUrl}" width="100%" height="300px" style="border: 1px solid #ccc;"></iframe>`;
  } else {
    docPreview.innerHTML = `
      <div style="text-align: center; margin: 10px 0;">
        <i class="fas fa-file-download" style="font-size: 24px; color: #124A5C;"></i>
        <p>Preview not available. Click the link above to download.</p>
      </div>
    `;
  }

  console.log(`Document preview setup for ${fileUrl} (${fileExtension})`);
}

function lineManagerInitialScreeningModal(userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl) {
  console.log('Modal Data:', { 
    userId, lastName, firstName, birthday, email, phoneNo, 
    scores, verdict, 
    degreeUrl, certUrl, resumeUrl 
  });

  if (!userId || userId === "undefined") {
    console.error("Invalid userId passed to modal:", userId);
    alert("Error: Invalid User ID. Cannot display applicant details.");
    return;
  }

  document.getElementById('userId').value = userId;

  const jobIdElement = document.getElementById('jobId');
  if (jobIdElement && typeof jobId !== 'undefined') {
    jobIdElement.value = jobId;
  }

  let applicantIdContainer = document.getElementById("applicantId")?.parentElement;
  if (applicantIdContainer) {
    applicantIdContainer.style.display = "none";
  }

  document.getElementById('applicant-name').textContent = `${lastName}, ${firstName}`;
  document.getElementById('applicant-birthday').textContent = birthday || 'N/A';
  document.getElementById('applicant-email').textContent = email || 'N/A';
  document.getElementById('applicant-contact').textContent = phoneNo || 'N/A';

  document.getElementById('score-degree').textContent = scores.degree || 'N/A';
  document.getElementById('score-experience').textContent = scores.experience || 'N/A';
  document.getElementById('score-certifications').textContent = scores.certifications || 'N/A';
  document.getElementById('score-hard-skills').textContent = scores.hardSkills || 'N/A';
  document.getElementById('score-soft-skills').textContent = scores.softSkills || 'N/A';
  document.getElementById('score-work-setup').textContent = scores.workSetup || 'N/A';
  document.getElementById('score-availability').textContent = scores.availability || 'N/A';

  document.getElementById('computation-verdict').textContent = verdict || 'N/A';

  const cleanDegreeUrl = (degreeUrl && degreeUrl !== 'undefined' && degreeUrl !== 'null') ? degreeUrl : '#';
  const cleanCertUrl = (certUrl && certUrl !== 'undefined' && certUrl !== 'null') ? certUrl : '#';
  const cleanResumeUrl = (resumeUrl && resumeUrl !== 'undefined' && resumeUrl !== 'null') ? resumeUrl : '#';

  console.log('Document URLs for preview:', {
    degree: cleanDegreeUrl,
    cert: cleanCertUrl,
    resume: cleanResumeUrl
  });

  displayUploadedDocument(cleanDegreeUrl, "degree-doc", "degree-preview");
  displayUploadedDocument(cleanCertUrl, "cert-doc", "cert-preview");
  displayUploadedDocument(cleanResumeUrl, "resume-doc", "resume-preview");

  document.getElementById('lineManagerInitialScreeningModalHtml').style.display = 'block';

  if (!window.applicantsScores) window.applicantsScores = {};
  window.applicantsScores[userId] = verdict;
}

function openModal(modalId, applicantName) {
  const modal = document.getElementById(modalId);
  if (!modal) {
    console.error(`Modal ${modalId} not found`);
    return;
  }

  if (modalId === 'releaseJobOfferModal' && applicantName) {
    const nameElement = document.getElementById('applicant-name-job-offer');
    if (nameElement) {
      nameElement.textContent = applicantName;
    }
  }

  modal.style.display = 'block';
}

function closeModal(modalId) {
  const modal = document.getElementById(modalId);
  if (modal) {
    modal.style.display = 'none';
  }
}

function approveLineManager(applicantId) {
  if (!applicantId) {
    alert("Error: Missing applicant ID");
    return;
  }

  fetch('/linemanager/applicant-tracker-jobposition/postApproveLineManager', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ applicantId: applicantId }),
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      alert("Successfully approved applicant!");
      
      setTimeout(() => {
        const activeFilter = document.querySelector(".filter-button.active");
        if (activeFilter) {
          activeFilter.click();
        } else {
          document.getElementById("filter-all").click();
        }
      }, 500);
    } else {
      alert("Error approving applicant: " + (data.message || "Unknown error"));
    }
  })
  .catch(error => {
    console.error("Error:", error);
    alert("Failed to approve applicant.");
  });
}

// ============================
// ENHANCED UI FUNCTIONS
// ============================

function enhanceForReviewButtons() {
  console.log("Enhancing For Review buttons for proper redirection...");
  
  const forReviewButtons = document.querySelectorAll('.btn-review');
  
  forReviewButtons.forEach((button, index) => {
    if (button.textContent.trim() === 'For Review') {
      const row = button.closest('tr');
      if (row) {
        const statusCell = row.querySelector('td:nth-child(5) span');
        const statusText = statusCell ? statusCell.textContent.trim() : '';
        
        console.log(`Enhancing For Review button ${index} for status: ${statusText}`);
        
        if (statusText.includes('P3 - Line Manager Evaluation Accomplished') || 
            statusText.includes('P3 - PASSED (Pending Finalization)') ||
            statusText.includes('P3 - FAILED (Pending Finalization)')) {
          
          button.removeAttribute('onclick');
          
          const newButton = button.cloneNode(true);
          button.parentNode.replaceChild(newButton, button);
          
          newButton.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('P3 For Review button clicked - redirecting to review filter');
            goToP3ReviewFilter();
          });
          
          console.log(`Enhanced For Review button ${index} for P3 status: ${statusText}`);
        }
      }
    }
  });
}

function goToP3ReviewFilter() {
  console.log("Redirecting to P3 review filter...");
  
  try {
    const forReviewButton = document.getElementById('filter-forreview');
    if (forReviewButton) {
      console.log("Found For Review filter button, clicking it...");
      forReviewButton.click();
    } else {
      console.error("For Review filter button not found");
      alert("Unable to navigate to review section. Please try clicking the 'For Review' filter manually.");
    }
  } catch (error) {
    console.error("Error in goToP3ReviewFilter:", error);
    alert("An error occurred while navigating to the review section.");
  }
}

function enhanceApplicantTable() {
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) return;
  
  const rows = mainTable.querySelectorAll('tbody tr');
  rows.forEach(row => {
    const statusCell = row.querySelector('td:nth-child(5) span');
    if (!statusCell) return;
    
    const status = statusCell.textContent.trim();
    
    if (status === 'P3 - PASSED') {
      const actionsCell = row.querySelector('td:last-child');
      if (!actionsCell) return;
      
      const userId = row.getAttribute('data-userid');
      const applicantId = row.getAttribute('data-applicant-id') || userId;
      
      const nameCell = row.querySelector('td:nth-child(2)');
      const deptCell = row.querySelector('td:nth-child(3)');
      const positionCell = row.querySelector('td:nth-child(4)');
      
      const name = nameCell ? nameCell.textContent.split('\n')[0].trim() : 'Unknown';
      const email = nameCell && nameCell.textContent.includes('\n') ? 
        nameCell.textContent.split('\n')[1].trim() : 'No email available';
      const department = deptCell ? deptCell.textContent.trim() : 'Unknown Department';
      const position = positionCell ? positionCell.textContent.trim() : 'Unknown Position';
      
      if (!actionsCell.querySelector('.btn-job-offer')) {
        let buttonContainer = actionsCell.querySelector('div');
        if (!buttonContainer) {
          buttonContainer = document.createElement('div');
          buttonContainer.style.marginTop = '10px';
          actionsCell.appendChild(buttonContainer);
        }
        
        const offerButton = document.createElement('button');
        offerButton.className = 'btn-job-offer';
        offerButton.style.backgroundColor = '#28a745';
        offerButton.style.color = 'white';
        offerButton.style.marginTop = '5px';
        offerButton.textContent = 'Send Job Offer';
        
        offerButton.onclick = function() {
          openSendJobOfferModal(applicantId, name, email, position, department);
        };
        
        buttonContainer.appendChild(offerButton);
      }
    }
  });
}

// ============================
// GMAIL INTEGRATION FUNCTIONS
// ============================

function startGmailIntegrationFlow() {
  console.log("Starting Gmail integration flow from existing modal...");
  
  closeModal('finalizeModalP1');
  
  finalizeP1Review();
}

function finalizeP1Review() {
  console.log("Starting P1 review finalization with Gmail compose integration...");

  const declaredResultsTable = document.getElementById("p1DeclaredResultsTable");
  const rows = declaredResultsTable?.querySelectorAll('tbody tr:not(.section-header-row)') || [];

  const passedUserIds = [];
  const failedUserIds = [];

  rows.forEach(row => {
    if (row.querySelector('td[colspan]')) return;
    
    const statusCell = row.querySelector('td:nth-child(7)');
    const userId = row.getAttribute('data-userid');
    
    if (statusCell && userId) {
      const statusText = statusCell.textContent.trim();
      
      if (statusText.includes('P1')) {
        if (statusText.includes('PASSED')) {
          passedUserIds.push(userId);
          console.log(`Added ${userId} to passed list (${statusText})`);
        } else if (statusText.includes('FAILED')) {
          failedUserIds.push(userId);
          console.log(`Added ${userId} to failed list (${statusText})`);
        }
      }
    }
  });

  if (passedUserIds.length === 0 && failedUserIds.length === 0) {
    alert("No P1 applicants found with PASSED or FAILED status.");
    closeModal('notifyApplicantsModal');
    return;
  }

  console.log(`Preparing Gmail compose for: ${passedUserIds.length} passed, ${failedUserIds.length} failed`);

  const confirmButton = document.getElementById('confirmButton');
  if (confirmButton) {
    confirmButton.textContent = "Loading email data...";
    confirmButton.disabled = true;
  }

  emailsToUpdate = {
    passed: passedUserIds,
    failed: failedUserIds
  };

  Promise.all([
    fetchApplicantDataForEmails(passedUserIds, failedUserIds),
    fetchEmailTemplates()
  ])
  .then(([applicantData, templates]) => {
    currentPassedApplicants = applicantData.passedApplicants || [];
    currentFailedApplicants = applicantData.failedApplicants || [];
    emailTemplates = templates;
    
    closeModal('notifyApplicantsModal');
    
    if (currentPassedApplicants.length > 0) {
      showPassedEmailModal();
    } else if (currentFailedApplicants.length > 0) {
      showFailedEmailModal();
    } else {
      alert("No applicant data found for email composition.");
    }
  })
  .catch(error => {
    console.error("Error preparing email composition:", error);
    alert("Error preparing email composition: " + error.message);
    
    if (confirmButton) {
      confirmButton.textContent = "Confirm";
      confirmButton.disabled = false;
    }
  });
}

async function fetchApplicantDataForEmails(passedUserIds, failedUserIds) {
  try {
    const response = await fetch('/linemanager/applicant-tracker-jobposition/finalizeP1Review', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        passedUserIds: passedUserIds,
        failedUserIds: failedUserIds
      }),
    });
    
    const data = await response.json();
    
    if (!data.success) {
      throw new Error(data.message || 'Failed to fetch applicant data');
    }
    
    return {
      passedApplicants: data.passedApplicants || [],
      failedApplicants: data.failedApplicants || []
    };
    
  } catch (error) {
    console.error("Error fetching applicant data:", error);
    throw error;
  }
}

async function fetchEmailTemplates() {
  try {
    const response = await fetch('/linemanager/applicant-tracker-jobposition/getEmailTemplates');
    const data = await response.json();
    
    if (!data.success) {
      throw new Error(data.message || 'Failed to fetch email templates');
    }
    
    return data.templates;
    
  } catch (error) {
    console.error("Error fetching email templates:", error);
    return {
      passed: {
        subject: 'Congratulations! You\'ve Passed the Initial Screening - Prime Infrastructure',
        template: 'Dear {applicantName},\n\nCongratulations! You have passed the initial screening for the {jobTitle} position at {companyName}.\n\nBest regards,\n{companyName} Team'
      },
      failed: {
        subject: 'Thank You for Your Interest - Prime Infrastructure',
        template: 'Dear {applicantName},\n\nThank you for your interest in the {jobTitle} position at {companyName}. We regret to inform you that we have decided to move forward with other candidates.\n\nBest regards,\n{companyName} Team'
      }
    };
  }
}

function showPassedEmailModal() {
  console.log("Showing passed applicants Gmail compose modal");
  
  const recipientsList = document.getElementById('passedRecipientsList');
  const recipientsCount = document.getElementById('passedRecipientsCount');
  
  if (recipientsList && currentPassedApplicants.length > 0) {
    recipientsCount.textContent = currentPassedApplicants.length;
    
    recipientsList.innerHTML = currentPassedApplicants.map(applicant => `
      <div class="recipient-item">
        <div>
          <div class="recipient-name">${applicant.name}</div>
          <div class="recipient-email">${applicant.email}</div>
          <div class="recipient-job" style="font-size: 12px; color: #28a745; margin-top: 4px;">${applicant.jobTitle}</div>
        </div>
      </div>
    `).join('');
  }
  
  document.getElementById('passedEmailSubject').value = emailTemplates.passed?.subject || 'Congratulations! You\'ve Passed the Initial Screening - Prime Infrastructure';
  document.getElementById('passedEmailTemplate').value = emailTemplates.passed?.template || 'Congratulations! You have passed the initial screening.';
  
  document.getElementById('emailPassedModal').style.display = 'block';
}

function showFailedEmailModal() {
  console.log("Showing failed applicants Gmail compose modal"); 
  
  const recipientsList = document.getElementById('failedRecipientsList');
  const recipientsCount = document.getElementById('failedRecipientsCount');
  
  if (recipientsList && currentFailedApplicants.length > 0) {
    recipientsCount.textContent = currentFailedApplicants.length;
    
    recipientsList.innerHTML = currentFailedApplicants.map(applicant => `
      <div class="recipient-item">
        <div>
          <div class="recipient-name">${applicant.name}</div>
          <div class="recipient-email">${applicant.email}</div>
          <div class="recipient-job" style="font-size: 12px; color: #dc3545; margin-top: 4px;">${applicant.jobTitle}</div>
        </div>
      </div>
    `).join('');
  }
  
  document.getElementById('failedEmailSubject').value = emailTemplates.failed?.subject || 'Thank You for Your Interest - Prime Infrastructure';
  document.getElementById('failedEmailTemplate').value = emailTemplates.failed?.template || 'Thank you for your interest in our position.';
  
  document.getElementById('emailFailedModal').style.display = 'block';
}

function openGmailForPassed() {
  const subject = document.getElementById('passedEmailSubject').value;
  const template = document.getElementById('passedEmailTemplate').value;
  
  if (!subject || !template) {
    alert("Please fill in both subject and template fields.");
    return;
  }
  
  if (!confirm(`This will open Gmail with ${currentPassedApplicants.length} passed applicants in the "To:" field. Continue?`)) {
    return;
  }
  
  const gmailUrl = buildGmailComposeUrl(currentPassedApplicants, subject, template);
  
  console.log('Opening Gmail for passed applicants:', gmailUrl);
  
  const gmailWindow = window.open(gmailUrl, '_blank');
  
  if (!gmailWindow) {
    alert('Please allow pop-ups for this site to open Gmail compose window.');
    return;
  }
  
  closeModal('emailPassedModal');
  
  if (currentFailedApplicants.length > 0) {
    setTimeout(() => {
      showFailedEmailModal();
    }, 1000);
  } else {
    setTimeout(() => {
      showStatusUpdateModal();
    }, 2000);
  }
}

function openGmailForFailed() {
  const subject = document.getElementById('failedEmailSubject').value;
  const template = document.getElementById('failedEmailTemplate').value;
  
  if (!subject || !template) {
    alert("Please fill in both subject and template fields.");
    return;
  }
  
  if (!confirm(`This will open Gmail with ${currentFailedApplicants.length} failed applicants in the "To:" field. Continue?`)) {
    return;
  }
  
  const gmailUrl = buildGmailComposeUrl(currentFailedApplicants, subject, template);
  
  console.log('Opening Gmail for failed applicants:', gmailUrl);
  
  const gmailWindow = window.open(gmailUrl, '_blank');
  
  if (!gmailWindow) {
    alert('Please allow pop-ups for this site to open Gmail compose window.');
    return;
  }
  
  closeModal('emailFailedModal');
  
  setTimeout(() => {
    showStatusUpdateModal();
  }, 2000);
}

function buildGmailComposeUrl(applicants, subject, template) {
  const emailAddresses = applicants.map(applicant => applicant.email).join(',');
  
  let processedTemplate = template;
  if (applicants.length > 0) {
    if (applicants.length > 1) {
      processedTemplate = template
        .replace(/\{applicantName\}/g, '[Recipient Name]')
        .replace(/\{jobTitle\}/g, '[Position Applied]')
        .replace(/\{companyName\}/g, 'Prime Infrastructure');
    } else {
      processedTemplate = template
        .replace(/\{applicantName\}/g, applicants[0].name)
        .replace(/\{jobTitle\}/g, applicants[0].jobTitle)
        .replace(/\{companyName\}/g, 'Prime Infrastructure');
    }
  }
  
  const plainTextBody = htmlToPlainText(processedTemplate);
  
  const specificAccount = 'recruitmentprime7@gmail.com';
  
  const gmailUrl = `https://mail.google.com/mail/u/0/?authuser=${encodeURIComponent(specificAccount)}&view=cm&to=${encodeURIComponent(emailAddresses)}&subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(plainTextBody)}`;
  
  console.log('🔥 Trying Gmail URL:', gmailUrl);
  console.log('📧 Target account:', specificAccount);
  
  return gmailUrl;
}

function htmlToPlainText(html) {
  const tempDiv = document.createElement('div');
  tempDiv.innerHTML = html;
  
  const scripts = tempDiv.querySelectorAll('script, style');
  scripts.forEach(element => element.remove());
  
  let plainText = tempDiv.textContent || tempDiv.innerText || '';
  
  plainText = plainText
    .replace(/\s+/g, ' ')
    .replace(/\n\s*\n/g, '\n\n')
    .trim();
  
  plainText = plainText
    .replace(/Dear\s+/gi, '\nDear ')
    .replace(/Best regards/gi, '\n\nBest regards')
    .replace(/Thank you/gi, '\n\nThank you')
    .replace(/Congratulations/gi, '\n\nCongratulations')
    .replace(/What's Next\?/gi, '\n\nWhat\'s Next?')
    .replace(/•/g, '\n• ')
    .replace(/- /g, '\n- ');
  
  return plainText;
}

function showStatusUpdateModal() {
  console.log('Showing status update modal');
  document.getElementById('statusUpdateModal').style.display = 'block';
}

function updateApplicantStatuses() {
  if (!confirm('Have you successfully sent the emails via Gmail? This will update the applicant statuses in the database.')) {
    return;
  }
  
  console.log('Updating applicant statuses in database...');
  console.log('Passed userIds:', emailsToUpdate.passed);
  console.log('Failed userIds:', emailsToUpdate.failed);
  
  const updateButton = document.querySelector('#statusUpdateModal .confirm-button');
  const originalText = updateButton.textContent;
  updateButton.textContent = 'Updating Database...';
  updateButton.disabled = true;
  
  fetch('/linemanager/applicant-tracker-jobposition/updateP1Statuses', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      passedUserIds: emailsToUpdate.passed,
      failedUserIds: emailsToUpdate.failed
    }),
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      alert(`Applicant statuses updated successfully!\n\nUpdated:\n- ${data.passedUpdated || 0} passed applicants\n- ${data.failedUpdated || 0} failed applicants`);
      
      closeModal('statusUpdateModal');
      
      currentPassedApplicants = [];
      currentFailedApplicants = [];
      emailsToUpdate = { passed: [], failed: [] };
      
      setTimeout(() => {
        const activeFilter = document.querySelector(".filter-button.active");
        if (activeFilter) {
          activeFilter.click();
        } else {
          document.getElementById("filter-all").click();
        }
      }, 500);
    } else {
      throw new Error(data.message || 'Failed to update statuses');
    }
  })
  .catch(error => {
    console.error('Error updating statuses:', error);
    alert('Error updating applicant statuses: ' + error.message);
    
    updateButton.textContent = originalText;
    updateButton.disabled = false;
  });
}

console.log('✅ Updated Applicant Tracker JavaScript loaded successfully');

// ============================
// JOB OFFER FUNCTIONS
// ============================

function openSendJobOfferModal(applicantId, name, email, position, department) {
  document.getElementById('sendJobOfferModal').setAttribute('data-applicant-id', applicantId);
  
  document.getElementById('applicant-name-job-offer').textContent = name;
  document.getElementById('applicant-email-job-offer').textContent = email;
  document.getElementById('applicant-position-job-offer').textContent = position;
  document.getElementById('applicant-department-job-offer').textContent = department;
  
  const twoWeeksFromNow = new Date();
  twoWeeksFromNow.setDate(twoWeeksFromNow.getDate() + 14);
  document.getElementById('startDate').valueAsDate = twoWeeksFromNow;
  
  document.getElementById('offerNotes').value = '';
  
  document.getElementById('sendJobOfferModal').style.display = 'block';
}

function sendJobOffer() {
  const modal = document.getElementById('sendJobOfferModal');
  const applicantId = modal.getAttribute('data-applicant-id');
  
  console.log('FRONTEND DEBUG - Job Offer Send:');
  console.log('Applicant ID:', applicantId);
  
  const startDate = document.getElementById('startDate').value;
  const additionalNotes = document.getElementById('offerNotes').value;
  
  console.log('Start Date:', startDate);
  console.log('Additional Notes:', additionalNotes);
  
  if (!startDate) {
    alert('Please select a start date for the job offer');
    return;
  }
  
  const sendButton = document.getElementById('sendOfferButton');
  const originalButtonText = sendButton.textContent;
  sendButton.disabled = true;
  sendButton.textContent = 'Sending...';
  
  fetch('/linemanager/send-job-offer', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      applicantId,
      startDate,
      additionalNotes
    }),
  })
  .then(response => {
    console.log('Response Status:', response.status);
    return response.json();
  })
  .then(data => {
    console.log('Server Response:', data);
    
    if (data.success) {
      closeModal('sendJobOfferModal');
      
      alert('Job offer sent successfully!');
      
      updateApplicantStatus(applicantId, 'P3 - PASSED - Job Offer Sent');
      
      setTimeout(() => {
        const activeFilter = document.querySelector(".filter-button.active");
        if (activeFilter) {
          activeFilter.click();
        } else {
          window.location.reload();
        }
      }, 500);
    } else {
      alert(data.message || 'Failed to send job offer');
    }
    
    sendButton.disabled = false;
    sendButton.textContent = originalButtonText;
  })
  .catch(error => {
    console.error('FRONTEND ERROR:', error);
    alert('An error occurred while sending the job offer');
    
    sendButton.disabled = false;
    sendButton.textContent = originalButtonText;
  });
}

function updateApplicantStatus(applicantId, newStatus) {
  const applicantRow = document.querySelector(`tr[data-applicant-id="${applicantId}"]`);
  if (!applicantRow) return;
  
  const statusSpan = applicantRow.querySelector('td:nth-child(5) span');
  if (statusSpan) {
    statusSpan.textContent = newStatus;
  }
  
  const actionsCell = applicantRow.querySelector('td:last-child');
  if (actionsCell) {
    const buttonContainer = actionsCell.querySelector('div');
    if (buttonContainer) {
      buttonContainer.innerHTML = `
        <a href="/linemanager/job-offer-details/${applicantId}" class="btn-review" style="background-color: #28a745; color: white;">
          View Job Offer
        </a>
      `;
    }
  }
}

// ============================
// ADDITIONAL MODAL FUNCTIONS
// ============================

function sendNotification() {
  alert("Notification sent to applicant!");
  closeModal('releaseJobOfferModal');

  setTimeout(() => {
    const activeFilter = document.querySelector(".filter-button.active");
    if (activeFilter) {
      activeFilter.click();
    }
  }, 500);
}

function confirmOnboarding() {
  alert("Applicant moved to onboarding");
  closeModal('moveToOnboardingModal');

  setTimeout(() => {
    document.getElementById("filter-foronboarding").click();
  }, 500);
}

function confirmAccountSetup() {
  alert("Account setup confirmed");
  closeModal('accountSetupReminderModal');
}

function setInterviewAvailabilities() {
  alert("Opening Calendly to set interview availabilities...");
}

// ============================
// TOGGLE STATUS FUNCTIONS
// ============================

function toggleApplicantStatus(button) {
  const row = button.closest('tr');
  if (!row) return;
  
  const userId = button.getAttribute('data-userid') || row.getAttribute('data-userid');
  if (!userId) {
    console.error("Cannot toggle status: Missing userId");
    alert("Error: Cannot identify the applicant to update status");
    return;
  }
  
  const statusCell = row.querySelector('td:nth-child(7)');
  if (!statusCell) return;
  
  const currentStatus = statusCell.textContent.trim();
  console.log(`Toggling status for userId ${userId}, current status: ${currentStatus}`);
  
  let newStatus;
  let apiEndpoint;
  
  if (currentStatus.includes('PASSED')) {
    newStatus = currentStatus.includes('P1') ? 'P1 - FAILED (Pending Finalization)' : 'P3 - FAILED (Pending Finalization)';
    apiEndpoint = currentStatus.includes('P1') ? 'markAsP1Failed' : 'markAsP3Failed';
    button.classList.remove('status-passed');
    button.classList.add('status-failed');
    button.textContent = 'Failed';
  } else if (currentStatus.includes('FAILED')) {
    newStatus = currentStatus.includes('P1') ? 'P1 - PASSED (Pending Finalization)' : 'P3 - PASSED (Pending Finalization)';
    apiEndpoint = currentStatus.includes('P1') ? 'markAsP1Passed' : 'markAsP3Passed';
    button.classList.remove('status-failed');
    button.classList.add('status-passed');
    button.textContent = 'Passed';
  } else {
    if (currentStatus.includes('P1')) {
      newStatus = 'P1 - PASSED (Pending Finalization)';
      apiEndpoint = 'markAsP1Passed';
    } else {
      newStatus = 'P3 - PASSED (Pending Finalization)';
      apiEndpoint = 'markAsP3Passed';
    }
    button.classList.add('status-passed');
    button.textContent = 'Passed';
  }
  
  statusCell.textContent = newStatus;
  
  if (!window.pendingStatusChanges) {
    window.pendingStatusChanges = {};
  }
  
  window.pendingStatusChanges[userId] = newStatus.includes('PASSED') ? 'PASSED' : 'FAILED';
  
  console.log(`Status change for userId ${userId} to ${newStatus} is pending finalization`);
  
  fetch(`/linemanager/applicant-tracker-jobposition/${apiEndpoint}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ userId: userId }),
  })
  .then(response => response.json())
  .then(data => {
    if (!data.success) {
      console.error(`Error updating temporary status: ${data.message || 'Unknown error'}`);
    }
  })
  .catch(error => {
    console.error('Error calling temporary status API:', error);
  });
}

function toggleP3ApplicantStatus(button) {
  const row = button.closest('tr');
  if (!row) return;
  
  const userId = button.getAttribute('data-userid') || row.getAttribute('data-userid');
  if (!userId) {
    console.error("P3 Toggle: Cannot toggle status: Missing userId");
    alert("Error: Cannot identify the applicant to update status");
    return;
  }
  
  const statusCell = row.querySelector('td:nth-child(5)');
  if (!statusCell) return;
  
  const currentStatus = statusCell.textContent.trim();
  console.log(`P3 Toggle: Toggling P3 status for userId ${userId}, current status: ${currentStatus}`);
  
  let newStatus;
  let apiEndpoint;
  
  if (currentStatus.includes('PASSED')) {
    newStatus = 'P3 - FAILED (Pending Finalization)';
    apiEndpoint = 'markAsP3Failed';
    button.classList.remove('status-passed');
    button.classList.add('status-failed');
    button.textContent = 'Failed';
  } else {
    newStatus = 'P3 - PASSED (Pending Finalization)';
    apiEndpoint = 'markAsP3Passed';
    button.classList.remove('status-failed');
    button.classList.add('status-passed');
    button.textContent = 'Passed';
  }
  
  statusCell.innerHTML = `<span><strong>Status:</strong> ${newStatus}</span>`;
  
  if (!window.pendingStatusChanges) {
    window.pendingStatusChanges = {};
  }
  
  window.pendingStatusChanges[userId] = newStatus.includes('PASSED') ? 'PASSED' : 'FAILED';
  
  console.log(`P3 Toggle: P3 status change for userId ${userId} to ${newStatus} is pending finalization`);
  
  fetch(`/linemanager/applicant-tracker-jobposition/${apiEndpoint}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ userId: userId }),
  })
  .then(response => response.json())
  .then(data => {
    if (!data.success) {
      console.error(`P3 Toggle: Error updating P3 status: ${data.message || 'Unknown error'}`);
    } else {
      console.log(`P3 Toggle: Successfully updated temporary status for ${userId}`);
    }
  })
  .catch(error => {
    console.error('P3 Toggle: Error calling P3 status API:', error);
  });
}

// ============================
// SORT & MOVE FUNCTIONS
// ============================

function sortDeclaredResults(sortType) {
  const table = document.getElementById('p1DeclaredResultsTable') || document.getElementById('p3DeclaredResultsTable');
  if (!table) return;

  const tbody = table.querySelector('tbody');
  if (!tbody) return;

  const rows = Array.from(tbody.querySelectorAll('tr:not(.section-header-row)'));

  const headerRows = Array.from(tbody.querySelectorAll('tr.section-header-row'));

  const p1Rows = rows.filter(row => {
    const statusCell = row.querySelector('td:nth-child(7)');
    return statusCell && statusCell.textContent.includes('P1');
  });

  const p3Rows = rows.filter(row => {
    const statusCell = row.querySelector('td:nth-child(7)');
    return statusCell && statusCell.textContent.includes('P3');
  });

  if (sortType === 'ascending' || sortType === 'descending') {
    const sortFn = (a, b) => {
      const scoreA = parseFloat(a.getAttribute('data-score') || '0');
      const scoreB = parseFloat(b.getAttribute('data-score') || '0');
      return sortType === 'ascending' ? scoreA - scoreB : scoreB - scoreA;
    };
    
    p1Rows.sort(sortFn);
    p3Rows.sort(sortFn);
  } else if (sortType === 'alphabetical') {
    const sortFn = (a, b) => {
      const nameA = a.querySelector('td:nth-child(2)')?.textContent.trim() || '';
      const nameB = b.querySelector('td:nth-child(2)')?.textContent.trim() || '';
      return nameA.localeCompare(nameB);
    };
    
    p1Rows.sort(sortFn);
    p3Rows.sort(sortFn);
  }

  tbody.innerHTML = '';

  if (p1Rows.length > 0) {
    const p1Header = headerRows.find(row => row.textContent.includes('P1'));
    if (p1Header) tbody.appendChild(p1Header);
    p1Rows.forEach(row => tbody.appendChild(row));
  }

  if (p3Rows.length > 0) {
    const p3Header = headerRows.find(row => row.textContent.includes('P3'));
    if (p3Header) tbody.appendChild(p3Header);
    p3Rows.forEach(row => tbody.appendChild(row));
  }
}

function moveRowToSection(userId, fromSection, toSection) {
  console.log(`Moving user ${userId} from ${fromSection} to ${toSection}`);
  
  if (!userId || !fromSection || !toSection) {
    console.error("Missing required parameters for row movement");
    return false;
  }
  
  const sourceTable = document.getElementById(fromSection);
  const targetTable = document.getElementById(toSection);
  
  if (!sourceTable || !targetTable) {
    console.error(`Tables not found: ${fromSection} or ${toSection}`);
    return false;
  }
  
  const sourceRows = sourceTable.querySelectorAll('tbody tr');
  let rowToMove = null;
  let rowData = null;
  
  for (const row of sourceRows) {
    if (row.classList.contains('section-header-row') || row.querySelector('td[colspan]')) {
      continue;
    }
    
    const rowUserId = row.getAttribute('data-userid');
    if (rowUserId === userId) {
      rowToMove = row;
      rowData = extractRowData(row, 0);
      break;
    }
  }
  
  if (!rowToMove || !rowData) {
    console.error(`Row for user ${userId} not found in ${fromSection}`);
    return false;
  }
  
  rowToMove.remove();
  
  const remainingSourceRows = Array.from(sourceTable.querySelectorAll('tbody tr')).filter(
    row => !row.classList.contains('section-header-row') && !row.querySelector('td[colspan]')
  );
  
  if (remainingSourceRows.length === 0) {
    const sourceTbody = sourceTable.querySelector('tbody');
    if (sourceTbody) {
      const headerCount = sourceTable.querySelectorAll('thead th').length;
      const messageRow = document.createElement('tr');
      const messageCell = document.createElement('td');
      messageCell.setAttribute('colspan', headerCount.toString());
      messageCell.className = 'text-center no-data-message';
      messageCell.textContent = 'No applicants awaiting review.';
      messageRow.appendChild(messageCell);
      sourceTbody.appendChild(messageRow);
    }
  }
  
  const targetTbody = targetTable.querySelector('tbody');
  if (!targetTbody) {
    console.error(`Target tbody not found in ${toSection}`);
    return false;
  }
  
  const noDataRow = targetTbody.querySelector('tr td[colspan].text-center');
  if (noDataRow) {
    noDataRow.closest('tr').remove();
  }
  
  const needsToggleColumn = (toSection === 'declaredResultsTable');
  const newRow = createTableRow(rowData, needsToggleColumn);
  
  newRow.setAttribute('data-userid', userId);
  
  const isP1 = rowData.cells[6].includes('P1');
  const headerSelector = isP1 ? 'P1' : 'P3';
  
  const sectionHeaders = targetTbody.querySelectorAll('tr.section-header-row');
  let inserted = false;
  
  for (const header of sectionHeaders) {
    if (header.textContent.includes(headerSelector)) {
      const nextSibling = header.nextSibling;
      if (nextSibling) {
        targetTbody.insertBefore(newRow, nextSibling);
      } else {
        targetTbody.appendChild(newRow);
      }
      inserted = true;
      break;
    }
  }
  
  if (!inserted) {
    targetTbody.appendChild(newRow);
  }
  
  if (needsToggleColumn) {
    const toggleButton = newRow.querySelector('.btn-toggle-status');
    if (toggleButton) {
      toggleButton.setAttribute('data-userid', userId);
      setupToggleStatusButtons();
    }
  }
  
  if (window.applicantsScores && window.applicantsScores[userId]) {
    updateScoreCellWithFormatting(newRow, window.applicantsScores[userId]);
  } else {
    getTotalScoreDirectly(userId, newRow);
  }
  
  return true;
}

function createTableRow(rowData, isForDeclaredResults = false) {
  const newRow = document.createElement('tr');
  
  if (rowData.userId) {
    newRow.setAttribute('data-userid', rowData.userId);
  }
  
  newRow.setAttribute('data-criteria', rowData.criteriaStatus || 'unknown');
  
  rowData.cells.forEach(cellHTML => {
    const cell = document.createElement('td');
    cell.innerHTML = cellHTML;
    newRow.appendChild(cell);
  });
  
  if (isForDeclaredResults) {
    const changeStatusCell = document.createElement('td');
    
    const userId = rowData.userId || '';
    
    changeStatusCell.innerHTML = `
      <button 
        class="btn-change-status" 
        data-userid="${userId}"
        onclick="changeApplicantStatus('${userId}')"
      >
        Change Status
      </button>
    `;
    
    newRow.appendChild(changeStatusCell);
  }
  
  return newRow;
}

// ============================
// EXTRACTION & UTILITY FUNCTIONS
// ============================

function extractRowData(row, index) {
  const cells = Array.from(row.querySelectorAll('td'));
  const cellData = cells.map(cell => cell.innerHTML);
  
  const userId = getReliableUserId(row);
  
  let totalScore = 'N/A';
  
  if (userId && window.applicantRegistry && window.applicantRegistry[userId]) {
    totalScore = window.applicantRegistry[userId].score || 'N/A';
  } else {
    const reviewButton = row.querySelector('.btn-review');
    if (reviewButton) {
      const onclick = reviewButton.getAttribute('onclick') || '';
      const scoreMatch = onclick.match(/},\s*['"]([^'"]*)['"]/);
      if (scoreMatch && scoreMatch[1]) {
        totalScore = scoreMatch[1];
      }
    }
  }
  
  let applicantName = '';
  let applicantEmail = '';
  
  if (cells.length > 1) {
    const nameCell = cells[1];
    const fullContent = nameCell.innerHTML;
    const nameParts = fullContent.split('<br>');
    
    if (nameParts.length > 0) {
      applicantName = nameParts[0].trim();
    }
    
    if (nameParts.length > 1) {
      const emailHtml = nameParts[1];
      applicantEmail = emailHtml.replace(/<[^>]*>/g, '').trim();
    }
  }
  
  const currentStatus = cells[4];
  let statusText = '';
  if (currentStatus) {
    const statusSpan = currentStatus.querySelector('span');
    if (statusSpan) {
      statusText = statusSpan.textContent.trim();
    }
  }
  
  let result;
  
  if (statusText.includes('P3')) {
    result = [
      cellData[0],
      cellData[1],
      cellData[2],
      cellData[3],
      cellData[4]
    ];
  } else {
    result = [
      cellData[0],
      cellData[1],
      cellData[2],
      cellData[3],
      totalScore,
      '<span class="criteria-passed">Passed</span>',
      cellData[4]
    ];
  }
  
  console.log(`Row ${index} data from real source:`, {
    userId: userId,
    totalScore: totalScore,
    name: applicantName,
    email: applicantEmail,
    status: statusText,
    isP3: statusText.includes('P3')
  });
  
  return {
    index: index + 1,
    cells: result,
    userId: userId,
    totalScore: totalScore,
    criteriaStatus: 'passed',
    name: applicantName,
    email: applicantEmail,
    status: statusText
  };
}

function scanAllRowsForUserIds() {
  console.log("Scanning all rows to find any missing userIds...");
  
  const allTables = document.querySelectorAll('table');
  let foundUserIds = 0;
  
  allTables.forEach(table => {
    const rows = table.querySelectorAll('tbody tr');
    rows.forEach(row => {
      let userId = row.getAttribute('data-userid');
      
      if (!userId || userId === 'undefined') {
        // Try to find from buttons
        const buttons = row.querySelectorAll('button[onclick*="lineManagerInitialScreeningModal"]');
        buttons.forEach(button => {
          const onclick = button.getAttribute('onclick') || '';
          const match = onclick.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
          if (match && match[1]) {
            userId = match[1];
            row.setAttribute('data-userid', userId);
            foundUserIds++;
            console.log(`Scan: Found userId ${userId} in table ${table.id || 'unknown'}`);
          }
        });
      }
    });
  });
  
  console.log(`Scan completed: Found ${foundUserIds} additional userIds`);
}

function manuallyExtractUserIdsAndScores() {
  console.log("Manually extracting userIds and scores...");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("Main table not found");
    return;
  }
  
  const rows = mainTable.querySelectorAll('tbody tr');
  console.log(`Found ${rows.length} rows in main table`);
  
  if (!window.applicantsScores) window.applicantsScores = {};
  if (!window.applicantNameMapping) window.applicantNameMapping = {};
  if (!window.applicantEmailMapping) window.applicantEmailMapping = {};
  
  rows.forEach((row, index) => {
    let userId = null;
    let totalScore = null;
    
    const nameCell = row.querySelector('td:nth-child(2)');
    let name = '';
    let email = '';
    
    if (nameCell) {
      const content = nameCell.innerHTML;
      const nameParts = content.split('<br>');
      if (nameParts.length > 0) {
        name = nameParts[0].trim();
      }
      
      if (nameParts.length > 1) {
        email = nameParts[1].replace(/<[^>]*>/g, '').trim();
      }
    }
    
    const reviewButton = row.querySelector('.btn-review');
    if (reviewButton) {
      const onclick = reviewButton.getAttribute('onclick') || '';
      const userIdMatch = onclick.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
      
      if (userIdMatch && userIdMatch[1]) {
        userId = userIdMatch[1];
        console.log(`Row ${index}: Found userId ${userId} in review button`);
        
        const scoreMatch = onclick.match(/},\s*['"]([^'"]*)['"]/);
        if (scoreMatch && scoreMatch[1]) {
          totalScore = scoreMatch[1];
          console.log(`Row ${index}: Found score ${totalScore} in review button`);
        }
      }
    }
    
    if (userId) {
      if (totalScore) {
        window.applicantsScores[userId] = totalScore;
      }
      
      if (name) {
        window.applicantNameMapping[name] = userId;
      }
      
      if (email) {
        window.applicantEmailMapping[email] = userId;
      }
      
      row.setAttribute('data-userid', userId);
      row.setAttribute('data-applicant-userid', userId);
      if (totalScore) {
        row.setAttribute('data-score', totalScore);
      }
    }
  });
  
  console.log("Manually extracted mapping data:");
  console.log("- Scores:", window.applicantsScores);
  console.log("- Names:", window.applicantNameMapping);
  console.log("- Emails:", window.applicantEmailMapping);
}

function extractApplicantsDataFromDOM() {
  console.log("Extracting applicants data from DOM...");
  window.applicantsData = [];
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) return;
  
  const rows = mainTable.querySelectorAll('tbody tr');
  
  rows.forEach((row, index) => {
    if (row.classList.contains('section-header-row')) return;
    
    let userId = row.getAttribute('data-userid');
    if (!userId) {
      const reviewButton = row.querySelector('.btn-review');
      if (reviewButton) {
        const onclick = reviewButton.getAttribute('onclick') || '';
        const match = onclick.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
        if (match && match[1]) {
          userId = match[1];
        }
      }
    }
    
    if (!userId) return;
    
    const nameCell = row.querySelector('td:nth-child(2)');
    const deptCell = row.querySelector('td:nth-child(3)');
    const positionCell = row.querySelector('td:nth-child(4)');
    const scoreCell = row.querySelector('td:nth-child(5)');
    
    const name = nameCell ? nameCell.textContent.split('\n')[0].trim() : '';
    const department = deptCell ? deptCell.textContent.trim() : '';
    const position = positionCell ? positionCell.textContent.trim() : '';
    const score = scoreCell ? scoreCell.textContent.trim() : 'N/A';
    
    window.applicantsData.push({
      userId,
      firstName: name.split(' ')[1] || '',
      lastName: name.split(' ')[0] || '',
      departmentName: department,
      jobTitle: position,
      initialScreeningAssessment: {
        totalScore: score
      }
    });
  });
  
  console.log(`Extracted ${window.applicantsData.length} applicants from DOM`);
}

function debugUserIdExtraction() {
  console.log("=== DEBUG: Analyzing Review Buttons ===");
  
  const reviewButtons = document.querySelectorAll('.btn-review');
  console.log(`Found ${reviewButtons.length} review buttons to analyze`);
  
  reviewButtons.forEach((button, index) => {
    console.log(`\nAnalyzing button ${index}:`);
    
    const onclickAttr = button.getAttribute('onclick') || '';
    console.log(`onClick attribute: ${onclickAttr.substring(0, 100)}...`);
    
    console.log("Trying different extraction patterns:");
    
    const pattern1 = /lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/;
    const match1 = onclickAttr.match(pattern1);
    console.log(`Pattern 1 result: ${match1 ? match1[1] : 'No match'}`);
    
    const pattern2 = /lineManagerInitialScreeningModal\s*\(\s*([^,]+)/;
    const match2 = onclickAttr.match(pattern2);
    console.log(`Pattern 2 result: ${match2 ? match2[1].replace(/['"]/g, '') : 'No match'}`);
    
    const pattern3 = /lineManagerInitialScreeningModal\s*\((.*?)\)/;
    const match3 = onclickAttr.match(pattern3);
    if (match3) {
      const params = match3[1].split(',').map(p => p.trim());
      console.log(`Pattern 3 found ${params.length} parameters:`);
      params.slice(0, 5).forEach((p, i) => console.log(`  Param ${i}: ${p}`));
    } else {
      console.log(`Pattern 3 result: No match`);
    }
    
    const row = button.closest('tr');
    if (row) {
      const nameCell = row.querySelector('td:nth-child(2)');
      if (nameCell) {
        const name = nameCell.textContent.trim();
        console.log(`Row name: ${name}`);
      }
      
      const hiddenInputs = row.querySelectorAll('input[type="hidden"]');
      if (hiddenInputs.length > 0) {
        console.log(`Found ${hiddenInputs.length} hidden inputs in the row`);
        hiddenInputs.forEach(input => {
          console.log(`  Hidden input: name=${input.name}, value=${input.value}`);
        });
      }
      
      const dataAttrs = Array.from(row.attributes)
        .filter(attr => attr.name.startsWith('data-'))
        .map(attr => `${attr.name}="${attr.value}"`);
      
      if (dataAttrs.length > 0) {
        console.log(`Found ${dataAttrs.length} data attributes: ${dataAttrs.join(', ')}`);
      }
    }
  });
  
  console.log("\n=== DEBUG: Checking window.applicantsData ===");
  if (window.applicantsData && Array.isArray(window.applicantsData)) {
    console.log(`Found ${window.applicantsData.length} applicants in window.applicantsData`);
    if (window.applicantsData.length > 0) {
      const sample = window.applicantsData[0];
      console.log("Sample applicant data structure:");
      console.log(JSON.stringify(sample, null, 2).substring(0, 300) + "...");
      
      const userIds = window.applicantsData
        .map(a => a.userId)
        .filter(id => id && id !== 'undefined');
      
      console.log(`Found ${userIds.length} valid userIds in applicantsData`);
      if (userIds.length > 0) {
        console.log(`Sample userIds: ${userIds.slice(0, 5).join(', ')}`);
      }
    }
  } else {
    console.log("window.applicantsData is not available or not an array");
  }
  
  const dataElement = document.getElementById('applicants-data');
  if (dataElement) {
    console.log("Found applicants-data element in the DOM");
    try {
      const data = JSON.parse(dataElement.textContent);
      console.log(`Parsed ${data.length || 0} items from applicants-data element`);
    } catch (err) {
      console.log(`Error parsing applicants-data element: ${err.message}`);
    }
  } else {
    console.log("No applicants-data element found in the DOM");
  }
}

function lastResortUserIdAssignment() {
  console.log("=== LAST RESORT: Manual userId assignment ===");
  
  let userIds = [];
  
  if (window.applicantsData && Array.isArray(window.applicantsData)) {
    userIds = window.applicantsData
      .map(a => a.userId)
      .filter(id => id && id !== 'undefined' && id !== '');
      
    console.log(`Found ${userIds.length} userIds in applicantsData`);
  }
  
  if (userIds.length === 0) {
    console.log("No userIds found in data, creating temporary IDs");
    userIds = ['temp-user-' + Date.now(), 'temp-user-' + (Date.now() + 1)];
  }
  
  const buttons = document.querySelectorAll('.btn-change-status');
  console.log(`Assigning ${userIds.length} userIds to ${buttons.length} buttons`);
  
  buttons.forEach((button, index) => {
    if (index < userIds.length) {
      const userId = userIds[index];
      console.log(`Assigning userId ${userId} to button ${index}`);
      
      button.setAttribute('data-userid', userId);
      button.setAttribute('onclick', `changeApplicantStatus('${userId}')`);
      
      const row = button.closest('tr');
      if (row) {
        row.setAttribute('data-userid', userId);
      }
    }
  });
  
  setTimeout(() => {
    console.log("Checking if assigned userIds are being used");
    buttons.forEach((button, index) => {
      const userId = button.getAttribute('data-userid');
      if (userId && userId !== 'undefined' && !userId.startsWith('undefined')) {
        console.log(`Button ${index} has userId: ${userId}`);
      } else {
        console.log(`Button ${index} STILL has no valid userId!`);
      }
    });
  }, 500);
}

// ============================
// DEBUG FUNCTIONS
// ============================

function debugDeclaredResults() {
  console.log("=== DEBUG: Checking Declared Results ===");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("❌ Main table not found");
    return;
  }
  
  const rows = Array.from(mainTable.querySelectorAll('tbody tr'));
  console.log(`Found ${rows.length} total rows in main table`);
  
  let p1PendingCount = 0;
  let p3PendingCount = 0;
  let p3EvaluationCount = 0;
  
  rows.forEach((row, index) => {
    const statusCell = row.querySelector('td:nth-child(5)');
    if (!statusCell) return;
    
    const statusSpan = statusCell.querySelector('span');
    const statusText = statusSpan ? statusSpan.textContent.trim() : '';
    
    if (statusText.includes('P1') && statusText.includes('Pending Finalization')) {
      p1PendingCount++;
      console.log(`Row ${index}: P1 Pending - ${statusText}`);
    }
    
    if (statusText.includes('P3') && statusText.includes('Pending Finalization')) {
      p3PendingCount++;
      console.log(`Row ${index}: P3 Pending - ${statusText}`);
    }
    
    if (statusText.includes('P3 - HR Evaluation Accomplished')) {
      p3EvaluationCount++;
      console.log(`Row ${index}: P3 HR Evaluation Accomplished - ${statusText}`);
    }
  });
  
  console.log(`\n=== SUMMARY ===`);
  console.log(`P1 Pending Finalization rows: ${p1PendingCount}`);
  console.log(`P3 Pending Finalization rows: ${p3PendingCount}`);
  console.log(`P3 HR Evaluation Accomplished rows: ${p3EvaluationCount}`);
  
  const p1DeclaredTable = document.getElementById('p1DeclaredResultsTable');
  const p3DeclaredTable = document.getElementById('p3DeclaredResultsTable');
  
  if (p1DeclaredTable) {
    const p1Rows = p1DeclaredTable.querySelectorAll('tbody tr:not(.section-header-row)');
    console.log(`P1 Declared table currently has ${p1Rows.length} rows`);
  }
  
  if (p3DeclaredTable) {
    const p3Rows = p3DeclaredTable.querySelectorAll('tbody tr:not(.section-header-row)');
    console.log(`P3 Declared table currently has ${p3Rows.length} rows`);
  }
}

function createTestPendingStatuses() {
  console.log("Creating test pending finalization statuses...");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) return;
  
  const rows = Array.from(mainTable.querySelectorAll('tbody tr'));
  let updatedCount = 0;
  
  rows.forEach((row, index) => {
    const statusCell = row.querySelector('td:nth-child(5)');
    if (!statusCell) return;
    
    const statusSpan = statusCell.querySelector('span');
    if (!statusSpan) return;
    
    const currentStatus = statusSpan.textContent.trim();
    
    if (currentStatus.includes('P1 - Awaiting') && updatedCount < 2) {
      if (updatedCount === 0) {
        statusSpan.textContent = 'P1 - PASSED (Pending Finalization)';
      } else {
        statusSpan.textContent = 'P1 - FAILED (Pending Finalization)';
      }
      console.log(`Updated row ${index} to: ${statusSpan.textContent}`);
      updatedCount++;
    }
    
    if (currentStatus.includes('P3') && updatedCount < 4) {
      if (updatedCount === 2) {
        statusSpan.textContent = 'P3 - PASSED (Pending Finalization)';
      } else if (updatedCount === 3) {
        statusSpan.textContent = 'P3 - FAILED (Pending Finalization)';
      }
      console.log(`Updated row ${index} to: ${statusSpan.textContent}`);
      updatedCount++;
    }
  });
  
  console.log(`Updated ${updatedCount} rows with test pending statuses`);
  
  setTimeout(() => {
    document.getElementById('filter-forreview').click();
  }, 500);
}

function debugP1StatusDetection() {
  console.log("=== DEBUGGING P1 STATUS DETECTION ===");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("❌ Main table not found");
    return;
  }
  
  const rows = Array.from(mainTable.querySelectorAll('tbody tr'));
  console.log(`Found ${rows.length} total rows in main table`);
  
  let foundP1Statuses = {
    awaiting: 0,
    passedPending: 0,
    failedPending: 0,
    other: 0
  };
  
  rows.forEach((row, index) => {
    const statusCell = row.querySelector('td:nth-child(5)');
    if (!statusCell) return;
    
    const statusSpan = statusCell.querySelector('span');
    let statusText = '';
    
    if (statusSpan) {
      statusText = statusSpan.textContent.replace(/Status:\s*/g, '').trim();
    } else {
      const cellText = statusCell.textContent.replace(/Status:\s*/g, '').trim();
      const statusMatch = cellText.match(/^([^]*?)(?:\s*(?:For Review|For Evaluation|Send Job Offer|Approve))/);
      statusText = statusMatch ? statusMatch[1].trim() : cellText.split('\n')[0].trim();
    }
    
    console.log(`\nRow ${index + 1}:`);
    console.log(`  Status text: "${statusText}"`);
    
    if (statusText.includes('P1')) {
      if (statusText.includes('Awaiting for Line Manager Action')) {
        foundP1Statuses.awaiting++;
        console.log(`  ✅ P1 AWAITING detected`);
      } else if (statusText.includes('PASSED') && statusText.includes('Pending Finalization')) {
        foundP1Statuses.passedPending++;
        console.log(`  ✅ P1 PASSED PENDING detected`);
      } else if (statusText.includes('FAILED') && statusText.includes('Pending Finalization')) {
        foundP1Statuses.failedPending++;
        console.log(`  ✅ P1 FAILED PENDING detected`);
      } else {
        foundP1Statuses.other++;
        console.log(`  ⚠️ Other P1 status: "${statusText}"`);
      }
    }
  });
  
  console.log(`\n=== P1 STATUS SUMMARY ===`);
  console.log(`P1 Awaiting: ${foundP1Statuses.awaiting}`);
  console.log(`P1 PASSED Pending: ${foundP1Statuses.passedPending}`);
  console.log(`P1 FAILED Pending: ${foundP1Statuses.failedPending}`);
  console.log(`Other P1 statuses: ${foundP1Statuses.other}`);
  console.log(`Total P1 Declared Expected: ${foundP1Statuses.passedPending + foundP1Statuses.failedPending}`);
  
  return foundP1Statuses;
}

function debugEvaluationData() {
  console.log("=== DEBUGGING EVALUATION DATA ===");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("❌ Main table not found");
    return;
  }
  
  const rows = Array.from(mainTable.querySelectorAll('tbody tr'));
  console.log(`Found ${rows.length} total rows in main table`);
  
  let foundP3Evaluation = false;
  
  rows.forEach((row, index) => {
    const rowText = row.textContent;
    
    if (rowText.includes('P3 - Awaiting for Line Manager Evaluation')) {
      foundP3Evaluation = true;
      console.log(`\n🎯 FOUND P3 EVALUATION ROW ${index + 1}:`);
      
      const cells = Array.from(row.querySelectorAll('td'));
      cells.forEach((cell, cellIndex) => {
        console.log(`  Cell ${cellIndex + 1}: ${cell.textContent.substring(0, 100)}...`);
        if (cellIndex === 4) {
          console.log(`  Status cell HTML: ${cell.innerHTML}`);
        }
        if (cellIndex === cells.length - 1) {
          console.log(`  Actions cell HTML: ${cell.innerHTML}`);
        }
      });
      
      const buttons = row.querySelectorAll('button');
      console.log(`  Found ${buttons.length} buttons:`);
      buttons.forEach((btn, btnIdx) => {
        console.log(`    Button ${btnIdx + 1}: "${btn.textContent.trim()}" (class: ${btn.className})`);
      });
      
      const links = row.querySelectorAll('a');
      console.log(`  Found ${links.length} links:`);
      links.forEach((link, linkIdx) => {
        console.log(`    Link ${linkIdx + 1}: href="${link.href}" text="${link.textContent.trim()}"`);
      });
    }
  });
  
  if (!foundP3Evaluation) {
    console.log("❌ NO ROWS found with 'P3 - Awaiting for Line Manager Evaluation' status");
    console.log("Let's check what P3 statuses we do have:");
    
    rows.forEach((row, index) => {
      const rowText = row.textContent;
      if (rowText.includes('P3')) {
        console.log(`Row ${index + 1} P3 status: ${rowText.match(/P3[^,\n]*/)?.[0] || 'Unknown P3 status'}`);
      }
    });
  } else {
    console.log(`✅ Found ${foundP3Evaluation ? 'at least one' : 'no'} P3 evaluation row(s)`);
  }
}

function debugEvaluationFilter() {
  console.log("=== DEBUG: P3 Evaluation Filter Analysis ===");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("❌ Main table not found");
    return;
  }
  
  const allMainRows = Array.from(mainTable.querySelectorAll('tbody tr'));
  console.log(`Found ${allMainRows.length} total rows in main table`);
  
  let p3EvaluationRows = 0;
  let p3WithButtons = 0;
  
  allMainRows.forEach((row, index) => {
    const statusCell = row.querySelector('td:nth-child(5)');
    const actionsCell = row.querySelector('td:last-child');
    
    if (!statusCell || !actionsCell) return;
    
    const statusSpan = statusCell.querySelector('span');
    const statusText = statusSpan ? statusSpan.textContent.trim() : '';
    
    const isP3Evaluation = statusText === 'P3 - Awaiting for Line Manager Evaluation';
    
    if (isP3Evaluation) {
      p3EvaluationRows++;
      console.log(`📋 Row ${index + 1}: P3 - Awaiting for Line Manager Evaluation`);
      
      const allButtons = Array.from(actionsCell.querySelectorAll('button'));
      const evalButtons = allButtons.filter(btn => btn.textContent.trim() === 'For Evaluation');
      
      const allLinks = Array.from(actionsCell.querySelectorAll('a'));
      const evalLinks = allLinks.filter(a => {
        const href = a.getAttribute('href') || '';
        return href.includes('/evaluation-form/') || href.includes('/interview-form/');
      });
      
      if (evalButtons.length > 0 || evalLinks.length > 0) {
        p3WithButtons++;
        console.log(`✅ Row ${index + 1}: Has For Evaluation button/link`);
        
        if (evalButtons.length > 0) {
          evalButtons.forEach((btn, btnIdx) => {
            console.log(`     Button ${btnIdx + 1}: "${btn.textContent.trim()}"`);
          });
        }
        
        if (evalLinks.length > 0) {
          evalLinks.forEach((link, linkIdx) => {
            console.log(`     Link ${linkIdx + 1}: href="${link.getAttribute('href')}"`);
          });
        }
      } else {
        console.log(`❌ Row ${index + 1}: No For Evaluation button found`);
      }
    }
  });
  
  console.log(`\n=== SUMMARY ===`);
  console.log(`Total rows with P3 - Awaiting for Line Manager Evaluation: ${p3EvaluationRows}`);
  console.log(`P3 rows with For Evaluation buttons: ${p3WithButtons}`);
  console.log(`Expected evaluation table rows: ${p3WithButtons}`);
  
  const evalSection = document.getElementById('evaluationSection');
  console.log(`Evaluation section exists: ${evalSection ? 'Yes' : 'No'}`);
  
  if (evalSection) {
    const evalTable = document.getElementById('evaluationTable');
    const evalRows = evalTable ? evalTable.querySelectorAll('tbody tr') : [];
    console.log(`Actual evaluation table rows: ${evalRows.length}`);
    
    if (evalRows.length > 0) {
      evalRows.forEach((row, idx) => {
        const cells = row.querySelectorAll('td');
        if (cells.length >= 5) {
          const nameCell = cells[1].textContent.trim();
          const statusCell = cells[4].innerHTML;
          console.log(`Row ${idx + 1}: ${nameCell} - ${statusCell.substring(0, 100)}...`);
        }
      });
    }
  }
}

// ============================
// TEST FUNCTIONS (GLOBAL SCOPE)
// ============================

window.debugDeclaredResults = debugDeclaredResults;
window.createTestPendingStatuses = createTestPendingStatuses;
window.debugP1StatusDetection = debugP1StatusDetection;
window.debugEvaluationData = debugEvaluationData;
window.debugEvaluationFilter = debugEvaluationFilter;

window.checkP3EvaluationRows = function() {
  console.log("=== MANUAL P3 EVALUATION CHECK ===");
  
  const mainTable = document.getElementById('mainApplicantTable');
  const rows = Array.from(mainTable.querySelectorAll('tbody tr'));
  
  rows.forEach((row, index) => {
    const statusCell = row.querySelector('td:nth-child(5)');
    const actionsCell = row.querySelector('td:last-child');
    
    if (statusCell && actionsCell) {
      const statusText = statusCell.textContent;
      const actionsText = actionsCell.textContent;
      
      if (statusText.includes('P3') || actionsText.includes('Evaluation')) {
        console.log(`\nRow ${index + 1}:`);
        console.log(`Status: ${statusText.trim()}`);
        console.log(`Actions: ${actionsText.trim()}`);
        console.log(`Has P3 Evaluation Status: ${statusText.includes('P3 - Awaiting for Line Manager Evaluation')}`);
        console.log(`Has For Evaluation Button: ${actionsText.includes('For Evaluation')}`);
      }
    }
  });
};

function testGmailCompose() {
  const testApplicant = {
    name: 'Test User',
    email: 'test@example.com',
    jobTitle: 'Test Position'
  };
  
  const testSubject = 'Test Email Subject';
  const testTemplate = 'Dear {applicantName},\n\nThis is a test email for the {jobTitle} position at {companyName}.\n\nBest regards,\nTest Team';
  
  openGmailForSingleApplicant(testApplicant, testSubject, testTemplate);
}

function openGmailForSingleApplicant(applicant, subject, template) {
  const processedTemplate = template
    .replace(/\{applicantName\}/g, applicant.name)
    .replace(/\{jobTitle\}/g, applicant.jobTitle)
    .replace(/\{companyName\}/g, 'Prime Infrastructure');
  
  const plainTextBody = htmlToPlainText(processedTemplate);
  
  const baseUrl = 'https://mail.google.com/mail/?view=cm';
  const params = new URLSearchParams({
    to: applicant.email,
    subject: subject,
    body: plainTextBody
  });
  
  const gmailUrl = `${baseUrl}&${params.toString()}`;
  console.log('Single applicant Gmail URL:', gmailUrl);
  
  window.open(gmailUrl, '_blank');
}

// ============================
// REMAINING MODAL & UI FUNCTIONS
// ============================

function updateP3StatusDisplay() {
  console.log("Updating P3 status display in main table...");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) return;
  
  const rows = mainTable.querySelectorAll('tbody tr');
  
  rows.forEach((row, index) => {
    const statusCell = row.querySelector('td:nth-child(5)');
    const actionsCell = row.querySelector('td:last-child');
    
    if (!statusCell || !actionsCell) return;
    
    const statusSpan = statusCell.querySelector('span');
    const statusText = statusSpan ? statusSpan.textContent.trim() : '';
    
    if (statusText === 'P3 - HR Evaluation Accomplished') {
      console.log(`Found P3 - HR Evaluation Accomplished row: ${index}`);
      
      let forReviewButton = actionsCell.querySelector('.btn-review');
      
      if (!forReviewButton) {
        const buttonContainer = actionsCell.querySelector('div') || actionsCell;
        
        forReviewButton = document.createElement('button');
        forReviewButton.className = 'btn-review';
        forReviewButton.textContent = 'For Review';
        forReviewButton.style.cssText = `
          background-color: white; 
          color: black; 
          border: 1px solid #124A5C; 
          padding: 10px 20px; 
          cursor: pointer; 
          border-radius: 5px; 
          font-size: 14px; 
          transition: background-color 0.3s ease, color 0.3s ease; 
          width: 150px; 
          text-align: center;
          margin-top: 5px;
        `;
        
        forReviewButton.addEventListener('mouseenter', function() {
          this.style.backgroundColor = '#124A5C';
          this.style.color = 'white';
        });
        
        forReviewButton.addEventListener('mouseleave', function() {
          this.style.backgroundColor = 'white';
          this.style.color = 'black';
        });
        
        forReviewButton.addEventListener('click', function(e) {
          e.preventDefault();
          console.log('P3 For Review button clicked - redirecting to review filter');
          redirectToReviewFilter();
        });
        
        buttonContainer.appendChild(forReviewButton);
        
        console.log(`Added For Review button to P3 - HR Evaluation Accomplished row: ${index}`);
      } else {
        forReviewButton.addEventListener('click', function(e) {
          e.preventDefault();
          console.log('P3 For Review button clicked - redirecting to review filter');
          redirectToReviewFilter();
        });
      }
    }
  });
}

function redirectToReviewFilter() {
  console.log("Redirecting to For Review filter...");
  const forReviewButton = document.getElementById('filter-forreview');
  if (forReviewButton) {
    forReviewButton.click();
  }
}

function goToP1ReviewFilter() {
  console.log("Redirecting to P1 review filter...");
  document.getElementById('filter-forreview').click();
}

function enhanceP3ForReviewButtons() {
  console.log("Enhancing P3 For Review buttons for proper redirection...");
  
  const forReviewButtons = document.querySelectorAll('.btn-review');
  
  forReviewButtons.forEach((button, index) => {
    if (button.textContent.trim() === 'For Review') {
      const row = button.closest('tr');
      if (row) {
        const statusCell = row.querySelector('td:nth-child(5) span');
        const statusText = statusCell ? statusCell.textContent.trim() : '';
        
        console.log(`Enhancing For Review button ${index} for status: ${statusText}`);
        
        if (statusText.includes('P3 - Line Manager Evaluation Accomplished') || 
            statusText.includes('P3 - PASSED (Pending Finalization)') ||
            statusText.includes('P3 - FAILED (Pending Finalization)')) {
          
          button.removeAttribute('onclick');
          
          const newButton = button.cloneNode(true);
          button.parentNode.replaceChild(newButton, button);
          
          newButton.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('P3 For Review button clicked - redirecting to review filter');
            goToP3ReviewFilter();
          });
          
          console.log(`Enhanced For Review button ${index} for P3 status: ${statusText}`);
        }
      }
    }
  });
}

// ============================
// ONBOARDING FUNCTIONS
// ============================

function populateOnboardingTable() {
  console.log("Populating onboarding table with dynamic data...");
  
  const onboardingTable = document.getElementById('onboardingTable');
  if (!onboardingTable) {
    console.log("Onboarding table not found");
    return;
  }
  
  const tbody = onboardingTable.querySelector('tbody');
  if (!tbody) {
    console.log("Onboarding tbody not found");
    return;
  }
  
  const onboardingApplicants = getOnboardingApplicantsFromMain();
  
  if (onboardingApplicants.length === 0) {
    tbody.innerHTML = `
      <tr>
        <td colspan="5" class="text-center no-data-message">No applicants in onboarding process.</td>
      </tr>
    `;
    return;
  }
  
  tbody.innerHTML = '';
  
  onboardingApplicants.forEach((applicant, index) => {
    const row = document.createElement('tr');
    row.innerHTML = `
      <td>APP${(index + 1).toString().padStart(5, '0')}</td>
      <td>${applicant.name}<br>${applicant.email}</td>
      <td>${applicant.department}</td>
      <td>${applicant.position}</td>
      <td>${applicant.status}</td>
    `;
    tbody.appendChild(row);
  });
  
  console.log(`Populated onboarding table with ${onboardingApplicants.length} applicants`);
}

function getOnboardingApplicantsFromMain() {
  console.log("Getting onboarding applicants from main table data...");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("Main table not found");
    return [];
  }
  
  const onboardingRows = [];
  const allMainRows = Array.from(mainTable.querySelectorAll('tbody tr'));
  
  const onboardingStatuses = [
    'First Day Checklist Sent',
    'Checklist Accomplished', 
    'Account Created'
  ];
  
  allMainRows.forEach((row, index) => {
    const statusCell = row.querySelector('td:nth-child(5)');
    if (!statusCell) return;
    
    const statusSpan = statusCell.querySelector('span');
    const statusText = statusSpan ? statusSpan.textContent.trim() : '';
    
    const isOnboardingStatus = onboardingStatuses.some(status => 
      statusText.includes(status)
    );
    
    const hasOnboardingButton = row.querySelector('.btn-onboarding') !== null;
    
    if (isOnboardingStatus || hasOnboardingButton) {
      const rowData = extractRowDataForOnboarding(row, index);
      if (rowData) {
        onboardingRows.push(rowData);
        console.log(`Found onboarding applicant: ${rowData.name} - ${statusText}`);
      }
    }
  });
  
  console.log(`Found ${onboardingRows.length} onboarding applicants from main table`);
  return onboardingRows;
}

function extractRowDataForOnboarding(row, index) {
  const cells = Array.from(row.querySelectorAll('td'));
  if (cells.length < 5) return null;
  
  const nameCell = cells[1];
  let name = 'Unknown Applicant';
  let email = '';
  
  if (nameCell) {
    const content = nameCell.innerHTML;
    const nameParts = content.split('<br>');
    if (nameParts.length > 0) {
      name = nameParts[0].trim();
    }
    if (nameParts.length > 1) {
      email = nameParts[1].replace(/<[^>]*>/g, '').trim();
    }
  }
  
  const department = cells[2] ? cells[2].textContent.trim() : 'Unknown Department';
  const position = cells[3] ? cells[3].textContent.trim() : 'Unknown Position';
  
  const statusCell = cells[4];
  let status = 'Unknown Status';
  if (statusCell) {
    const statusSpan = statusCell.querySelector('span');
    if (statusSpan) {
      status = statusSpan.textContent.trim();
    }
  }
  
  return {
    name: name,
    email: email,
    department: department,
    position: position,
    status: status
  };
}

function filterOnboardingRowsForAll(onboardingTable) {
  if (!onboardingTable) return;
  
  console.log("Filtering onboarding rows for 'all' filter - showing only valid onboarding statuses");
  
  const validOnboardingStatuses = [
    'First Day Checklist Sent',
    'Checklist Accomplished', 
    'Account Created'
  ];
  
  const allOnboardingRows = Array.from(onboardingTable.querySelectorAll('tbody tr'));
  let visibleRowCount = 0;
  
  allOnboardingRows.forEach(row => {
    const lastCell = row.querySelector('td:last-child');
    const statusText = lastCell ? lastCell.textContent.trim() : '';
    
    let showRow = false;
    
    for (const validStatus of validOnboardingStatuses) {
      if (statusText === validStatus) {
        showRow = true;
        console.log(`Valid onboarding row found: ${statusText}`);
        break;
      }
    }
    
    if (!showRow && lastCell && lastCell.querySelector('.btn-onboarding')) {
      showRow = true;
      console.log(`"For Onboarding" button found in row`);
    }
    
    row.style.display = showRow ? '' : 'none';
    
    if (showRow) {
      visibleRowCount++;
    }
  });
  
  console.log(`Onboarding table: ${visibleRowCount} valid rows displayed for "all" filter`);
  
  const onboardingHeader = document.getElementById('onboardingHeader');
  if (visibleRowCount === 0) {
    if (onboardingHeader) onboardingHeader.style.display = 'none';
    onboardingTable.style.display = 'none';
  } else {
    if (onboardingHeader) onboardingHeader.style.display = 'block';
    onboardingTable.style.display = 'table';
  }
}

function initializePageFiltering() {
  console.log("Initializing page with proper filtering...");
  
  populateOnboardingTable();
  
  const onboardingTable = document.getElementById('onboardingTable');
  if (onboardingTable) {
    filterOnboardingRowsForAll(onboardingTable);
  }
  
  highlightActiveFilter('all');
  
  console.log("Page initialization completed with dynamic onboarding data");
}

// ============================
// FINALIZATION FUNCTIONS
// ============================

function updateJobOfferSection(jobOfferRows, container) {
  console.log("Updating job offer section with", jobOfferRows.length, "rows");

  let jobOfferSection = document.getElementById('jobOfferSection');
  let jobOfferTable = document.getElementById('jobOfferTable');

  if (jobOfferRows.length > 0) {
    if (!jobOfferSection) {
      jobOfferSection = document.createElement('div');
      jobOfferSection.id = 'jobOfferSection';
      jobOfferSection.innerHTML = `
        <h4>Job Offer Sent</h4>
        <table class="tracking-table" id="jobOfferTable">
          <thead>
            <tr>
              <th>Applicant No.</th>
              <th>Last Name, First Name</th>
              <th>Department</th>
              <th>Position Applied</th>
              <th>Total Score</th>
              <th>Work Setup/Availability</th>
              <th>Applicant Status</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      `;
      
      const declaredResultsTable = document.getElementById('declaredResultsTable');
      if (declaredResultsTable && container) {
        container.insertBefore(jobOfferSection, declaredResultsTable.nextSibling);
      }
      
      jobOfferTable = document.getElementById('jobOfferTable');
    }
    
    if (jobOfferTable) {
      const jobOfferTbody = jobOfferTable.querySelector('tbody');
      if (jobOfferTbody) {
        jobOfferTbody.innerHTML = '';
        
        jobOfferRows.forEach((rowData, idx) => {
          const newRow = createTableRow(rowData, false);
          jobOfferTbody.appendChild(newRow);
          
          if (rowData.userId) {
            newRow.setAttribute('data-userid', rowData.userId);
            getTotalScoreDirectly(rowData.userId, newRow);
          }
        });
      }
    }
    
    if (jobOfferSection) {
      jobOfferSection.style.display = 'block';
    }
  } else if (jobOfferSection) {
    jobOfferSection.style.display = 'none';
  }
}

function updateReviewSectionsVisibility(hasAwaitingRows, hasDeclaredRows, hasJobOfferRows, hasP1Data, hasP3Data) {
  console.log("Updating section visibility:", {
    hasAwaitingRows, hasDeclaredRows, hasJobOfferRows, hasP1Data, hasP3Data
  });

  const awaitingHeader = document.querySelector('h4:nth-of-type(1)');
  const declaredHeader = document.querySelector('h4:nth-of-type(2)');
  const jobOfferHeader = document.querySelector('h4:nth-of-type(3)');

  const awaitingActionTable = document.getElementById('awaitingActionTable');
  const declaredResultsTable = document.getElementById('declaredResultsTable');
  const jobOfferTable = document.getElementById('jobOfferTable');

  const sortSection = document.querySelector('.sort-section');

  if (awaitingHeader) {
    awaitingHeader.style.display = hasAwaitingRows ? 'block' : 'none';
  }

  if (awaitingActionTable) {
    awaitingActionTable.style.display = hasAwaitingRows ? 'table' : 'none';
  }

  if (declaredHeader) {
    declaredHeader.style.display = hasDeclaredRows ? 'block' : 'none';
  }

  if (declaredResultsTable) {
    declaredResultsTable.style.display = hasDeclaredRows ? 'table' : 'none';
  }

  if (sortSection) {
    sortSection.style.display = hasDeclaredRows ? 'block' : 'none';
  }

  if (jobOfferHeader) {
    jobOfferHeader.style.display = hasJobOfferRows ? 'block' : 'none';
  }

  if (jobOfferTable) {
    jobOfferTable.style.display = hasJobOfferRows ? 'table' : 'none';
  }

  updateSectionHeaderButtons();
  
  const activeFilter = document.querySelector(".filter-button.active");
  if (activeFilter && activeFilter.id === 'filter-forreview') {
    setTimeout(updateSectionHeaderButtons, 500);
  }
}

function fixScoresInDeclaredResults() {
  console.log("Fixing scores in declared results table");

  const declaredResultsTable = document.getElementById('declaredResultsTable');
  if (!declaredResultsTable) return;

  const rows = declaredResultsTable.querySelectorAll('tbody tr:not(.section-header-row)');
  console.log(`Checking ${rows.length} rows in declared results table`);

  rows.forEach((row, idx) => {
    if (row.querySelector('td[colspan]')) return;
    
    let userId = row.getAttribute('data-userid');
    
    if (!userId) {
      const nameCell = row.querySelector('td:nth-child(2)');
      if (nameCell) {
        const name = nameCell.textContent.trim().replace(/\s+/g, ' ');
        userId = findUserIdByNameImproved(name);
        
        if (userId) {
          row.setAttribute('data-userid', userId);
          
          const toggleButton = row.querySelector('.btn-toggle-status');
          if (toggleButton) toggleButton.setAttribute('data-userid', userId);
        }
      }
    }
    
    if (userId) {
      console.log(`Row ${idx}: Using userId ${userId} to get score`);
      getTotalScoreDirectly(userId, row);
    }
  });
}

function addMissingToggleColumns() {
  console.log("Checking for missing Toggle Status columns...");

  const declaredResultsTable = document.getElementById('declaredResultsTable');
  if (!declaredResultsTable) return;

  const rows = declaredResultsTable.querySelectorAll('tbody tr:not(.section-header-row)');
  console.log(`Checking ${rows.length} rows in declaredResultsTable`);

  rows.forEach(row => {
    if (row.querySelector('td[colspan]')) return;
    
    const cells = row.querySelectorAll('td');
    if (cells.length < 8) {
      console.log("Found row missing Toggle Status column");
      
      const userId = row.getAttribute('data-userid');
      
      const toggleCell = document.createElement('td');
      toggleCell.innerHTML = `<button class="btn-toggle-status">Toggle Status</button>`;
      row.appendChild(toggleCell);
      
      if (userId) {
        const button = toggleCell.querySelector('.btn-toggle-status');
        if (button) {
          button.setAttribute('data-userid', userId);
        }
      }
    }
  });

  setupToggleStatusButtons();
}

// ============================
// APPLICANT UPDATE FUNCTIONS
// ============================

function updateApplicantTables(phase) {
  const awaitingActionTable = document.getElementById(phase === 'P1' ? 'p1AwaitingActionTable' : 'p3AwaitingActionTable');
  const tbody = awaitingActionTable.querySelector('tbody');
  tbody.innerHTML = '';

  const applicants = Array.from(document.querySelectorAll('.applicant-row')).filter(row => {
    const status = row.getAttribute('data-status');
    return status.startsWith(phase) && status.includes('Awaiting');
  });

  applicants.forEach((row, index) => {
    const newRow = document.createElement('tr');
  });
}

// ============================
// ENHANCED EVALUATION BUTTONS
// ============================

function setupEvaluationButtons() {
  const evaluationButtons = document.querySelectorAll(".btn-evaluation");

  evaluationButtons.forEach(button => {
    button.addEventListener("click", function () {
      window.location.href = "/linemanager/interview-form";
    });
  });
}

// ============================
// BROWSER STORAGE WARNING FUNCTIONS
// ============================

function warnAboutBrowserStorage() {
  console.warn("CRITICAL: localStorage and sessionStorage are NOT supported in Claude.ai artifacts!");
  console.warn("Use React state (useState, useReducer) or JavaScript variables instead.");
  console.warn("Any attempt to use browser storage APIs will cause the artifact to fail.");
}

// ============================
// ADDITIONAL UTILITY FUNCTIONS
// ============================

function rebuildAllTableRows() {
  console.log("REBUILD: Analyzing all table rows to ensure they have userIds...");
  
  const declaredTable = document.getElementById('declaredResultsTable');
  if (!declaredTable) {
    console.log("REBUILD: Declared results table not found");
    return;
  }
  
  const rows = declaredTable.querySelectorAll('tbody tr');
  console.log(`REBUILD: Checking ${rows.length} rows in declared results table`);
  
  rows.forEach((row, index) => {
    if (row.classList.contains('section-header-row') || row.querySelector('td[colspan]')) {
      return;
    }
    
    let userId = row.getAttribute('data-userid');
    let foundUserId = false;
    
    if (!userId || userId === 'undefined' || userId === '') {
      const nameCell = row.querySelector('td:nth-child(2)');
      if (nameCell) {
        const displayName = nameCell.textContent.replace(/\s+/g, ' ').trim();
        if (displayName && window.displayNameToUserId[displayName]) {
          userId = window.displayNameToUserId[displayName];
          foundUserId = true;
          console.log(`REBUILD: Found userId ${userId} for row ${index} using display name`);
        }
        
        if (!foundUserId) {
          const fullContent = nameCell.innerHTML;
          const nameParts = fullContent.split('<br>');
          if (nameParts.length > 0) {
            const name = nameParts[0].trim();
            if (name && window.nameToUserId[name]) {
              userId = window.nameToUserId[name];
              foundUserId = true;
              console.log(`REBUILD: Found userId ${userId} for row ${index} using name`);
            }
          }
        }
        
        if (!foundUserId) {
          const fullContent = nameCell.innerHTML;
          const nameParts = fullContent.split('<br>');
          if (nameParts.length > 1) {
            const emailHtml = nameParts[1];
            const email = emailHtml.replace(/<[^>]*>/g, '').trim();
            if (email && window.emailToUserId[email]) {
              userId = window.emailToUserId[email];
              foundUserId = true;
              console.log(`REBUILD: Found userId ${userId} for row ${index} using email`);
            }
          }
        }
      }
    } else {
      foundUserId = true;
    }
    
    if (foundUserId && userId) {
      row.setAttribute('data-userid', userId);
      
      const changeButton = row.querySelector('.btn-change-status');
      if (changeButton) {
        changeButton.setAttribute('data-userid', userId);
        changeButton.setAttribute('onclick', `changeApplicantStatus('${userId}')`);
        console.log(`REBUILD: Updated change status button for row ${index} with userId ${userId}`);
      }
    }
  });
  
  console.log("REBUILD: Completed row analysis and updates");
}

function fixAllChangeStatusButtons() {
  console.log("Fixing all Change Status buttons...");
  
  const buttons = document.querySelectorAll('.btn-change-status');
  console.log(`Found ${buttons.length} Change Status buttons`);
  
  buttons.forEach((button, index) => {
    const existingUserId = button.getAttribute('data-userid');
    if (existingUserId && existingUserId !== 'undefined' && existingUserId !== '') {
      return;
    }
    
    const row = button.closest('tr');
    if (!row) {
      console.log(`Button ${index}: No parent row found`);
      return;
    }
    
    const userId = getReliableUserId(row);
    
    if (userId) {
      button.setAttribute('data-userid', userId);
      button.setAttribute('onclick', `changeApplicantStatus('${userId}')`);
      console.log(`Button ${index}: Set userId ${userId} from registry of real data`);
    } else {
      console.log(`Button ${index}: No valid userId found from real data`);
    }
  });
}

// ============================
// INITIALIZATION COMPLETE FUNCTIONS
// ============================

function ensureAllSystemsReady() {
  console.log("=== ENSURING ALL SYSTEMS ARE READY ===");
  
  // Final check of all critical functions
  if (typeof window.applicantsData === 'undefined') {
    window.applicantsData = [];
    console.log("Initialized empty applicantsData array");
  }
  
  if (typeof window.applicantsScores === 'undefined') {
    window.applicantsScores = {};
    console.log("Initialized empty applicantsScores object");
  }
  
  if (typeof window.applicantNameMapping === 'undefined') {
    window.applicantNameMapping = {};
    console.log("Initialized empty applicantNameMapping object");
  }
  
  // Run a final test to ensure core functions work
  try {
    const testFilter = document.getElementById('filter-all');
    if (testFilter) {
      console.log("✅ Filter buttons are accessible");
    }
    
    const testTable = document.getElementById('mainApplicantTable');
    if (testTable) {
      console.log("✅ Main table is accessible");
    }
    
    console.log("✅ All core systems verified and ready");
  } catch (error) {
    console.error("❌ System verification failed:", error);
  }
}

// ============================
// FINAL ERROR HANDLING
// ============================

function handleCriticalErrors() {
  window.addEventListener('error', function(event) {
    console.error('Critical JavaScript Error:', event.error);
    console.error('Error occurred in:', event.filename, 'at line:', event.lineno);
    
    // Don't let errors break the entire application
    event.preventDefault();
    
    // Try to recover by reinitializing basic functions
    setTimeout(() => {
      try {
        if (typeof highlightActiveFilter === 'function') {
          highlightActiveFilter('all');
        }
        
        if (typeof ensureTableHeaders === 'function') {
          ensureTableHeaders();
        }
        
        console.log("Attempted basic error recovery");
      } catch (recoveryError) {
        console.error("Error recovery failed:", recoveryError);
      }
    }, 1000);
  });
}

// ============================
// FINAL INITIALIZATION CALL
// ============================

// Set up error handling
handleCriticalErrors();

// Ensure all systems are ready
ensureAllSystemsReady();

// Set up evaluation buttons when DOM is ready
setTimeout(setupEvaluationButtons, 100);

// Run final P3 status display update
setTimeout(() => {
  updateP3StatusDisplay();
  enhanceForReviewButtons();
  enhanceP3ForReviewButtons();
}, 1500);

// Set up event listeners for when filters are applied
setTimeout(() => {
  const filterButtons = document.querySelectorAll('.filter-button');
  filterButtons.forEach(button => {
    button.addEventListener('click', function() {
      setTimeout(() => {
        enhanceForReviewButtons();
        updateP3StatusDisplay();
        enhanceP3ForReviewButtons();
      }, 500);
    });
  });
  
  const allButton = document.getElementById('filter-all');
  if (allButton) {
    allButton.addEventListener('click', function() {
      setTimeout(updateP3StatusDisplay, 500);
    });
  }
}, 2000);

// ============================
// CONSOLE SUCCESS MESSAGE
// ============================


function debugP3StatusDetection() {
  console.log("=== DEBUGGING P3 STATUS DETECTION ===");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("❌ Main table not found");
    return;
  }
  
  const rows = Array.from(mainTable.querySelectorAll('tbody tr'));
  console.log(`Found ${rows.length} total rows in main table`);
  
  let foundP3Statuses = {
    evaluation: 0,
    passedPending: 0,
    failedPending: 0,
    other: 0
  };
  
  rows.forEach((row, index) => {
    const statusCell = row.querySelector('td:nth-child(5)');
    if (!statusCell) return;
    
    const statusSpan = statusCell.querySelector('span');
    let statusText = '';
    
    if (statusSpan) {
      statusText = statusSpan.textContent.replace(/Status:\s*/g, '').trim();
    } else {
      const cellText = statusCell.textContent.replace(/Status:\s*/g, '').trim();
      const statusMatch = cellText.match(/^([^]*?)(?:\s*(?:For Review|For Evaluation|Send Job Offer|Approve))/);
      statusText = statusMatch ? statusMatch[1].trim() : cellText.split('\n')[0].trim();
    }
    
    console.log(`\nRow ${index + 1}:`);
    console.log(`  Status text: "${statusText}"`);
    
    if (statusText.includes('P3')) {
      if (statusText.includes('Line Manager Evaluation Accomplished')) {
        foundP3Statuses.evaluation++;
        console.log(`  ✅ P3 EVALUATION ACCOMPLISHED detected`);
      } else if (statusText.includes('PASSED') && statusText.includes('Pending Finalization')) {
        foundP3Statuses.passedPending++;
        console.log(`  ✅ P3 PASSED PENDING detected`);
      } else if (statusText.includes('FAILED') && statusText.includes('Pending Finalization')) {
        foundP3Statuses.failedPending++;
        console.log(`  ✅ P3 FAILED PENDING detected`);
      } else {
        foundP3Statuses.other++;
        console.log(`  ⚠️ Other P3 status: "${statusText}"`);
      }
    }
  });
  
  console.log(`\n=== P3 STATUS SUMMARY ===`);
  console.log(`P3 Line Manager Evaluation Accomplished: ${foundP3Statuses.evaluation}`);
  console.log(`P3 PASSED Pending: ${foundP3Statuses.passedPending}`);
  console.log(`P3 FAILED Pending: ${foundP3Statuses.failedPending}`);
  console.log(`Other P3 statuses: ${foundP3Statuses.other}`);
  console.log(`Total P3 Awaiting Expected: ${foundP3Statuses.evaluation}`);
  console.log(`Total P3 Declared Expected: ${foundP3Statuses.passedPending + foundP3Statuses.failedPending}`);
  
  return foundP3Statuses;
}

// Function to manually set P3 status for testing
function testSetP3Status(applicantId) {
  console.log(`🧪 Testing: Setting P3 status for applicantId: ${applicantId}`);
  
  fetch('/linemanager/applicant-tracker-jobposition/setP3EvaluationAccomplished', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ applicantId: applicantId }),
  })
  .then(response => response.json())
  .then(data => {
    console.log('✅ Test response:', data);
    if (data.success) {
      alert(`Successfully set P3 status for applicant ${applicantId}`);
      // Refresh the page to see changes
      setTimeout(() => window.location.reload(), 1000);
    } else {
      alert(`Failed to set P3 status: ${data.message}`);
    }
  })
  .catch(error => {
    console.error('❌ Test error:', error);
    alert('Error testing P3 status update');
  });
}

// Make debug function globally available
window.debugP3StatusDetection = debugP3StatusDetection;
window.testSetP3Status = testSetP3Status;


// Make sure the new functions are globally available
window.populateP3AwaitingActionTableFixed = populateP3AwaitingActionTableFixed;
window.populateP3DeclaredResultsTableFixed = populateP3DeclaredResultsTableFixed;
window.createP3AwaitingRowFixed = createP3AwaitingRowFixed;
window.createP3DeclaredRowFixed = createP3DeclaredRowFixed;
window.createP3AwaitingStatusCellFixed = createP3AwaitingStatusCellFixed;
window.checkForP1DeclaredResultsFixed = checkForP1DeclaredResultsFixed;
window.checkForP3DeclaredResultsFixed = checkForP3DeclaredResultsFixed;

console.log('✅ COMPLETE P3 INTEGRATION LOADED SUCCESSFULLY!');
console.log('🔧 Fixed Features:');
console.log('   ✅ P3 - Line Manager Evaluation Accomplished detection');
console.log('   ✅ P3 - PASSED/FAILED (Pending Finalization) detection');
console.log('   ✅ P3 Awaiting Action table with View Evaluation, Pass, Reject buttons');
console.log('   ✅ P3 Declared Results table with Change Status buttons');
console.log('   ✅ Finalize P3 Results button visibility');
console.log('   ✅ Proper P3 pass/reject API integration using userId');
console.log('   ✅ Row movement between P3 sections');
console.log('   ✅ Status update and database synchronization');

console.log('🎉 COMPLETE APPLICANT TRACKER SYSTEM LOADED SUCCESSFULLY!');
console.log('📊 Total Functions Loaded: 50+');
console.log('🔧 Key Features:');
console.log('   ✅ Single DOMContentLoaded Event Handler');
console.log('   ✅ Fixed P1 Status Detection for "P1 - PASSED (Pending Finalization)"');
console.log('   ✅ Corrected Section Headers (P1 vs P3)');
console.log('   ✅ Enhanced Data Extraction & Score Management');
console.log('   ✅ Gmail Integration for Notifications');
console.log('   ✅ Job Offer Management');
console.log('   ✅ Toggle Status Functions');
console.log('   ✅ Debug & Testing Functions');
console.log('   ✅ Error Handling & Recovery');
console.log('');
console.log('🐛 Available Debug Commands:');
console.log('   - debugP1StatusDetection() - Check P1 status detection');
console.log('   - debugDeclaredResults() - Analyze current table data');
console.log('   - createTestPendingStatuses() - Create test data');
console.log('   - debugEvaluationData() - Check P3 evaluation status');
console.log('   - checkP3EvaluationRows() - Manual P3 check');
console.log('   - testGmailCompose() - Test Gmail integration');
console.log('');


</script>
</body>
</html>
