 <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Applicant Tracker - Job Position</title>
    <link rel="stylesheet" href="/css/sidebar.css"> <!-- Linking Sidebar CSS -->
    <link rel="stylesheet" href="/css/linemanager.css"> <!-- Linking Main Content CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"> <!-- FontAwesome for icons -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <style>
/* Main Layout Styles */
body {
    font-family: 'Inter', sans-serif;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

.main-content {
    margin-left: 350px;
    padding: 20px;
    width: calc(100% - 350px);
    background-color: #FFFFFF;
}

/* Header Styles */
.header-section {
    margin-bottom: 10px;
    margin-left: 5px;
    font-size: 24px;
    text-align: left;
}

.subheader {
    font-size: 20px;
    margin-left: 5px;
    margin-bottom: 20px;
    color: #555;
}

/* Filter Section Styles */
.filter-section {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.right-section {
    display: flex;
    gap: 10px;
    margin-bottom: 15px;
}

.right-section button, 
.filter-button {
    padding: 10px 15px;
    font-size: 16px;
    font-weight: bold;
    border: none;
    background-color: #124A5C;
    color: white;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.right-section button:hover, 
.filter-button:hover {
    background-color: #B4E3E3;
    color: #124A5C;
}

.filter-button.active {
    background-color: #07ACB9;
    color: white;
}

/* Search Container Styles */
.search-container {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
}

.search-bar {
    padding: 8px;
    width: 370px;
    font-size: 16px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.search-button {
    margin-left: 10px;
    background-color: #124A5C;
    color: white;
    border: none;
    padding: 10px;
    cursor: pointer;
    font-size: 16px;
    border-radius: 4px;
}

.search-button:hover {
    background-color: #B4E3E3;
    color: #124A5C;
}

/* Divider Style */
.divider {
    height: 2px;
    background-color: #124A5C;
    margin: 10px 0;
}

/* Sort Section Styles */
.sort-section {
    display: flex;
    align-items: center;
    margin: 10px 0;
}

.sort-section label {
    margin-right: 10px;
    font-weight: bold;
}

.sort-section select {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: white;
}

/* Table Styles */
.tracking-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
}

.tracking-table th, 
.tracking-table td {
    padding: 10px;
    border: 1px solid #ddd;
    text-align: left;
}

.tracking-table th {
    background-color: #f5f5f5;
    font-weight: bold;
}

.tracking-table th:nth-child(1),
.tracking-table td:nth-child(1) {
    width: 10%;
}

.tracking-table th:nth-child(2),
.tracking-table td:nth-child(2) {
    width: 20%;
}

.tracking-table th:nth-child(3),
.tracking-table td:nth-child(3),
.tracking-table th:nth-child(4),
.tracking-table td:nth-child(4) {
    width: 15%;
}

.tracking-table tr:hover {
    background-color: #f1f1f1;
}

/* Status Circle Styles */
.status-circle {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    display: inline-block;
    margin-right: 8px;
}

.status-circle.green {
    background-color: green;
}

.status-circle.gray {
    background-color: gray;
}

/* Send Job Offer Button Styles */
.btn-job-offer {
    background-color: white !important;
    color: #124A5C !important;
    border: 1px solid #124A5C !important;
    padding: 10px 20px !important;
    cursor: pointer !important;
    border-radius: 5px !important;
    font-size: 14px !important;
    font-weight: normal !important;
    transition: background-color 0.3s ease, color 0.3s ease !important;
    width: 150px !important;
    text-align: center !important;
    margin-top: 5px !important;
    display: inline-block !important;
}

.btn-job-offer:hover {
    background-color: #124A5C !important;
    color: white !important;
}

.btn-job-offer:active {
    background-color: #0f3d4f !important;
    color: white !important;
}

.btn-job-offer:focus {
    outline: none !important;
    box-shadow: 0 0 0 2px rgba(18, 74, 92, 0.2) !important;
}

/* Loading state for job offer button */
.btn-job-offer[disabled] {
    background-color: #f8f9fa !important;
    color: #6c757d !important;
    border-color: #dee2e6 !important;
    cursor: not-allowed !important;
}

.btn-job-offer[disabled]:hover {
    background-color: #f8f9fa !important;
    color: #6c757d !important;
}
/* Button Styles */
.btn-review, 
.btn-evaluation, 
.btn-onboarding, 
.btn-approve {
    background-color: white;
    color: black;
    border: 1px solid #124A5C;
    padding: 10px 20px;
    cursor: pointer;
    border-radius: 5px;
    font-size: 14px;
    transition: background-color 0.3s ease, color 0.3s ease;
    min-width: 150px;
    text-align: center;
    margin-top: 5px;
}

.btn-review:hover, 
.btn-evaluation:hover, 
.btn-onboarding:hover, 
.btn-approve:hover {
    background-color: #124A5C;
    color: white;
}

.set-interview-button {
    padding: 10px 20px;
    background-color: #124A5C;
    color: white;
    border: none;
    cursor: pointer;
    font-size: 16px;
    margin-top: 20px;
    display: block;
    width: 20%;
    text-align: center;
    border-radius: 5px;
}

.set-interview-button:hover {
    background-color: #B4E3E3;
    color: #124A5C;
}

.set-finalize-review-button {
    margin: 5px 10px;
    background-color: #124A5C;
    color: white;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
    border-radius: 5px;
    width: auto;
    min-width: 200px;
    white-space: nowrap;
    text-align: center;
    font-size: 16px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: background-color 0.3s ease;
}

.set-finalize-review-button:hover {
    background-color: #B4E3E3;
    color: #124A5C;
}

.finalize-container {
    display: flex;
    flex-direction: column;
    position: fixed;
    bottom: 20px;
    right: 20px;
    background-color: rgba(255, 255, 255, 0.9);
    border: 1px solid #ccc;
    padding: 10px;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    z-index: 1000;
}

/* Modal Styles */
.modal, .review-modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.4);
}

.modal-content, .review-modal-content {
    background-color: #fefefe;
    margin: 10% auto;
    padding: 20px;
    border: 1px solid #888;
    border-radius: 8px;
    width: 50%;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    text-align: center;
}

.close-button, .review-close-button {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
}

.close-button:hover,
.close-button:focus,
.review-close-button:hover,
.review-close-button:focus {
    color: black;
    text-decoration: none;
}

.modal-header, 
.modal-body, 
.modal-footer {
    text-align: center;
}

.modal-buttons, .review-modal-buttons {
    display: flex;
    justify-content: center;
    margin-top: 20px;
    gap: 10px;
}

.modal-buttons button, 
.review-modal-buttons button {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s ease;
}

.back-button, .review-modal-back-button {
    background-color: rgba(18, 74, 92, 0.5);
    color: white;
}

.confirm-button, .review-modal-pass-button {
    background-color: #124A5C;
    color: white;
}

.review-modal-reject-button {
    background-color: #dc3545;
    color: white;
}

.modal-buttons button:hover, 
.review-modal-buttons button:hover {
    opacity: 0.8;
}

.modal-question {
    text-align: center;
    margin: 20px 0;
    font-size: 16px;
}

/* Decision Disclaimer */
.decision-disclaimer {
    background-color: #f8f9fa;
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 10px;
    margin: 15px 0;
    text-align: left;
    font-size: 14px;
}

/* Scores Table Styles */
.scores-table {
    width: 100%;
    border-collapse: collapse;
    margin: 15px 0;
}

.scores-table th, 
.scores-table td {
    padding: 8px;
    border: 1px solid #ddd;
    text-align: left;
}

.scores-table th {
    background-color: #f5f5f5;
}

.computation-verdict {
    margin: 15px 0;
    padding: 10px;
    background-color: #e9f7fe;
    border-radius: 5px;
    text-align: center;
    font-size: 16px;
}

/* Styling for applicant status section */
.applicant-status-section {
    background-color: #FFFFFF;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    margin: 10px 5px 20px;
    display: none; /* Hidden by default */
}

/* Improved heading visibility */
.applicant-status-section h3.subheader {
    color: #124A5C;
    margin-bottom: 15px;
    font-size: 20px;
    font-weight: bold;
}
/* CSS to fix the header layout */
/* Enhanced CSS for section header and divider */
.applicant-status-section .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0; /* Remove bottom margin to place divider closer */
    width: 100%;
}

.applicant-status-section .section-header h3.subheader {
    margin: 0;
    color: #124A5C;
    font-weight: bold;
}

.applicant-status-section .right-section {
    display: flex;
    gap: 10px;
}

.applicant-status-section .right-section button {
    padding: 10px 15px;
    font-size: 16px;
    font-weight: bold;
    border: none;
    background-color: #124A5C;
    color: white;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.applicant-status-section .right-section button:hover {
    background-color: #B4E3E3;
    color: #124A5C;
}

/* Improved divider styles */
.applicant-status-section .divider {
    height: 2px;
    background-color: #124A5C;
    margin: 15px 0;
    width: 100%;
    display: block;
    clear: both;
}
/* Filter button styling */
.filter-button {
    padding: 10px 15px;
    font-size: 15px;
    font-weight: bold;
    border: none;
    background-color: #124A5C;
    color: white;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    min-width: 130px;
}

.filter-button:hover {
    background-color: #0d3a47;
}

.filter-button.active {
    background-color: #07ACB9;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

/* Make buttons in last column more prominent */
.btn-review, 
.btn-evaluation, 
.btn-onboarding, 
.btn-approve {
    background-color: white;
    color: #124A5C;
    border: 1px solid #124A5C;
    padding: 8px 15px;
    cursor: pointer;
    border-radius: 5px;
    font-size: 14px;
    font-weight: bold;
    transition: background-color 0.3s ease, color 0.3s ease;
    min-width: 120px;
    display: inline-block;
    text-align: center;
    margin-top: 5px;
}

.btn-review:hover, 
.btn-evaluation:hover, 
.btn-onboarding:hover, 
.btn-approve:hover {
    background-color: #124A5C;
    color: white;
}

/* Improved table styles */
.tracking-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.tracking-table th {
    background-color: #f5f5f5;
    color: #124A5C;
    font-weight: bold;
    padding: 12px 10px;
    border: 1px solid #ddd;
    text-align: left;
}

.tracking-table td {
    padding: 12px 10px;
    border: 1px solid #ddd;
    vertical-align: middle;
}

/* Better positioning of buttons in the last column */
.tracking-table td:last-child {
    position: relative;
}

.tracking-table td:last-child span {
    display: block;
    margin-bottom: 10px;
}

.tracking-table td:last-child div {
    text-align: right;
}

/* Sort section styling */
.sort-section {
    display: flex;
    align-items: center;
    margin: 10px 0;
}

.sort-section label {
    margin-right: 10px;
    font-weight: bold;
}

.sort-section select {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: white;
    min-width: 180px;
}

/* Additional Helper Classes */
.text-center {
    text-align: center;
}

.mt-10 {
    margin-top: 10px;
}

.mb-10 {
    margin-bottom: 10px;
}

/* Responsive adjustments */
@media (max-width: 1200px) {
    .main-content {
        margin-left: 250px;
        width: calc(100% - 250px);
    }
    
    .set-interview-button {
        width: 30%;
    }
}

@media (max-width: 768px) {
    .main-content {
        margin-left: 0;
        width: 100%;
    }
    
    .filter-section {
        flex-direction: column;
    }
    
    .search-bar {
        width: 100%;
    }
    
    .modal-content, .review-modal-content {
        width: 90%;
    }
    
    .set-interview-button {
        width: 100%;
    }

    .btn-toggle-status {
        padding: 6px 12px;
        background-color: #6c757d;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
    }
    
    .btn-toggle-status:hover {
        background-color: #5a6268;
    }
    .btn-toggle-status.status-passed {
    background-color: #28a745;
}

.btn-toggle-status.status-failed {
    background-color: #dc3545;
}

/* Styling for no data message */
.no-data-message {
    padding: 20px;
    background-color: #f8f9fa;
    border-left: 4px solid #07ACB9;
    color: #555;
    font-size: 16px;
    font-style: italic;
}
.no-data-message p {
    margin: 0;
}

/* Improved table empty state */
table.tracking-table tbody:empty::after {
    content: "No data available";
    display: block;
    text-align: center;
    padding: 20px;
    color: #6c757d;
    font-style: italic;
}

/* Score cell coloring */
td.high-score {
    color: green !important;
    font-weight: bold;
}

td.medium-score {
    color: blue !important;
}

td.low-score {
    color: orange !important;
}

/* Styling for no data message */
.no-data-message {
    padding: 20px;
    background-color: #f8f9fa;
    border-left: 4px solid #07ACB9;
    color: #555;
    font-size: 16px;
    font-style: italic;
}
.no-data-message p {
    margin: 0;
}


/* Improved table empty state */
table.tracking-table tbody:empty::after {
    content: "No data available";
    display: block;
    text-align: center;
    padding: 20px;
    color: #6c757d;
    font-style: italic;
}
}

.btn-change-status {
    background-color: #dc3545;
    color: white;
    border: 1px solid #c82333;
    padding: 10px 20px;
    cursor: pointer;
    border-radius: 5px;
    font-size: 14px;
    transition: background-color 0.3s ease, color 0.3s ease;
    min-width: 150px;
    text-align: center;
    margin-top: 5px;
}

.btn-change-status:hover {
    background-color: #bd2130;
    color: white;
}

/* Add these styles to your existing CSS section */

.applicant-info-section {
    background-color: #f9f9f9;
    padding: 15px;
    border-radius: 5px;
    margin-bottom: 20px;
}

.checklist-section {
    background-color: #f0f8ff;
    padding: 15px;
    border-radius: 5px;
    margin-bottom: 20px;
}

.onboarding-checklist {
    list-style-type: none;
    padding-left: 0;
    margin: 15px 0;
}

.onboarding-checklist li {
    padding: 5px 0;
}

.info-box {
    background-color: #e8f4f8;
    padding: 10px;
    border-left: 4px solid #07ACB9;
    margin-top: 15px;
    border-radius: 0 5px 5px 0;
}

.modal-content h1 {
    color: #124A5C;
    text-align: center;
    margin-bottom: 20px;
}

.modal-content h2 {
    color: #124A5C;
    margin-top: 0;
}

        /* P2 Email Modal Styles - Adding these for the Gmail integration */
        .recipient-item {
            padding: 10px;
            border-bottom: 1px solid rgba(255,255,255,0.3);
        }

        .recipient-item:last-child {
            border-bottom: none;
        }

        .recipient-name {
            font-weight: bold;
            margin-bottom: 2px;
        }

        .recipient-email {
            font-size: 14px;
            opacity: 0.8;
            margin-bottom: 2px;
        }

        .recipient-job {
            font-size: 12px;
            opacity: 0.7;
            font-style: italic;
        }



        btn-review:hover {
    background-color: #124A5C !important;
    color: white !important;
}

.btn-view-evaluation {
    background-color: #28a745;
    color: white;
    border: 1px solid #28a745;
    padding: 10px 20px;
    cursor: pointer;
    border-radius: 5px;
    font-size: 14px;
    transition: background-color 0.3s ease;
    width: 150px;
    text-align: center;
    margin-top: 5px;
}

.btn-view-evaluation:hover {
    background-color: #218838;
    color: white;
}

    </style>
</head>
<body>

<%- include('../../partials/linemanager_partials') %>

<!-- Main Content Section -->
<div class="main-content">

    <!-- Header Section -->
    <div class="header-section">
        <h2>Applicant Tracking</h2>
        <% if (applicants && applicants.length > 0) { %>
          <div class="subheader">
            <%= applicants[0].jobTitle %>
          </div>
        <% } else { %>
          <p>No applicant found.</p>
        <% } %>
    </div>
      
    <!-- Filter Buttons Section -->
    <div class="filter-section">
        <div class="right-section">
            <button id="filter-all" class="filter-button active">All</button>
            <button id="filter-forreview" class="filter-button">For Review</button>
            <button id="filter-forevaluation" class="filter-button">For Evaluation</button>
            <button id="filter-foronboarding" class="filter-button">For Onboarding</button>
        </div>
        <div class="search-container">
            <input type="text" id="searchBar" class="search-bar" placeholder="Search...">
            <button class="search-button">Search</button>
        </div>
    </div>
<!-- REPLACE the existing applicant-status-section with this updated structure -->
<div class="applicant-status-section" id="applicantStatusSection">
    <!-- Header section with flexbox -->
    <div class="section-header">
        <h3 class="subheader">Applicant Review Management</h3>
    </div>
    <!-- Divider placed immediately after the section-header -->
    <div class="divider"></div>
    
    <!-- P1 Review Section -->
    <div id="p1ReviewSection">
        <h3>List of Applicants on P1 Review</h3>
        <div class="right-section" id="p1FinalizeButtonContainer" style="display: none;">
            <button id="finalizeP1Button" class="set-finalize-review-button">Finalize P1 Review</button>
        </div>
        
        <h4>Awaiting for Action - P1</h4>
        <table class="tracking-table" id="p1AwaitingActionTable">
            <thead>
                <tr>
                    <th>Applicant No.</th>
                    <th>Last Name, First Name</th>
                    <th>Department</th>
                    <th>Position Applied</th>
                    <th>Total Score</th>
                    <th>Work Setup/Availability</th>
                    <th>Applicant Status</th>
                </tr>
            </thead>
            <tbody>
                <!-- Will be populated dynamically -->
            </tbody>
        </table>
        
       <h4 id="p1DeclaredResultsHeader">List of P1 Applicants on Review - Declared Results</h4>
        <table class="tracking-table" id="p1DeclaredResultsTable">
            <thead>
                <tr>
                    <th>Applicant No.</th>
                    <th>Last Name, First Name</th>
                    <th>Department</th>
                    <th>Position Applied</th>
                    <th>Total Score</th>
                    <th>Work Setup/Availability</th>
                    <th>Applicant Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <!-- Will be populated dynamically -->
            </tbody>
        </table>
    </div>
<!-- P3 Review Section -->
<div id="p3ReviewSection">
    <h3>List of Applicants on P3 Review</h3>
<div class="right-section" id="p3FinalizeButtonContainer" style="display: none;">
    <button id="finalizeP3Button" class="set-finalize-review-button">Finalize P3 Review</button>
</div>

    
    <h4>Awaiting for Action - P3</h4>
    <table class="tracking-table" id="p3AwaitingActionTable">
        <thead>
            <tr>
                <th>Applicant No.</th>
                <th>Last Name, First Name</th>
                <th>Department</th>
                <th>Position Applied</th>
                <th>Applicant Status</th>
            </tr>
        </thead>
        <tbody>
            <!-- Will be populated dynamically -->
        </tbody>
    </table>
    
    <h4>List of P3 Applicants on Review - Declared Results</h4>
    <table class="tracking-table" id="p3DeclaredResultsTable">
        <thead>
            <tr>
                <th>Applicant No.</th>
                <th>Last Name, First Name</th>
                <th>Department</th>
                <th>Position Applied</th>
                <th>Applicant Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <!-- Will be populated dynamically -->
        </tbody>
    </table>
</div>

    <div class="sort-section">
        <label for="sortOptions">Sort By:</label>
        <select id="sortOptions">
            <option value="ascending">Score - Ascending</option>
            <option value="descending">Score - Descending</option>
            <option value="alphabetical">Alphabetically</option>
        </select>
    </div>
</div>
    <!-- Table for Applicant Data (shown by default) -->
    <table class="tracking-table" id="mainApplicantTable" style="width: 100%; margin-bottom: 20px; border-collapse: collapse;">
        <thead>
            <tr>
                <th>Applicant No.</th>
                <th>Last Name, First Name</th>
                <th>Department</th>
                <th>Position Applied</th>
                <th>Applicant Status & Actions</th>
            </tr>
        </thead>
        <tbody>
            <% if (applicants && applicants.length) { %>
                <% applicants.forEach((applicant, index) => { %>
                    <tr class="applicant-row" 
                        data-phase="<%= applicant.applicantStatus && applicant.applicantStatus.startsWith('P1') ? 'P1' : applicant.applicantStatus && applicant.applicantStatus.startsWith('P2') ? 'P2' : applicant.applicantStatus && applicant.applicantStatus.startsWith('P3') ? 'P3' : 'other' %>" 
                        data-status="<%= applicant.applicantStatus %>"
                        data-userid="<%= applicant.userId %>"
                        data-name="<%= applicant.lastName %>, <%= applicant.firstName %>"
                        data-score="<%= applicant.initialScreeningAssessment && applicant.initialScreeningAssessment.totalScore !== 'N/A' ? applicant.initialScreeningAssessment.totalScore : '' %>">
                        <td><%= index + 1 %></td>
                        <td>
                            <%= applicant.lastName %>, <%= applicant.firstName %>
                            <br>
                            <small style="color: #555;"><%= applicant.userEmail || 'Email not available' %></small>
                        </td>
                        
                        <td><%= applicant.deptName %></td> <!-- Display department name -->
                        <td><%= applicant.jobTitle %></td> <!-- Display job title -->
                        <td>
<!-- Display Applicant Status -->
<span><strong>Status:</strong> <%= applicant.applicantStatus || 'Pending' %></span>
<div style="margin-top: 10px;">
    <% if (applicant.applicantStatus && applicant.applicantStatus.startsWith('P1 - Awaiting for Line Manager Action; HR PASSED')) { %>
        <!-- For Review Button -->
        <button 
            class="btn-review" 
            onclick="lineManagerInitialScreeningModal(
                    '<%= applicant.userId %>', 
                    '<%= applicant.lastName %>', 
                    '<%= applicant.firstName %>', 
                    '<%= applicant.birthDate %>', 
                    '<%= applicant.userEmail %>', 
                    '<%= applicant.phoneNo %>', 
                    {
                        degree: '<%= applicant.initialScreeningAssessment.degreeScore %>',
                        experience: '<%= applicant.initialScreeningAssessment.experienceScore %>',
                        certifications: '<%= applicant.initialScreeningAssessment.certificationScore %>',
                        hardSkills: '<%= applicant.initialScreeningAssessment.hardSkillsScore %>',
                        softSkills: '<%= applicant.initialScreeningAssessment.softSkillsScore %>',
                        workSetup: '<%= applicant.initialScreeningAssessment.workSetupScore %>',
                        availability: '<%= applicant.initialScreeningAssessment.availabilityScore %>'
                    }, 
                    '<%= applicant.initialScreeningAssessment.totalScore %>', 
                    '<%= applicant.initialScreeningAssessment.degree_url %>',
                    '<%= applicant.initialScreeningAssessment.cert_url %>',
                    '<%= applicant.initialScreeningAssessment.resume_url %>'
                )
            ">
            For Review
        </button>
    <% } else if (applicant.applicantStatus === 'P2 - Awaiting for HR Evaluation') { %>
        <!-- For Evaluation Button -->
        <a href="/hr/evaluation-form/<%= applicant.applicantId %>">
            <button class="btn-evaluation">For Evaluation</button>
        </a>
    <% } else if (applicant.applicantStatus && applicant.applicantStatus.startsWith('P1 - Awaiting for Line Manager Action')) { %>
        <!-- Approve Button for Line Manager Action -->
        <button 
            class="btn-approve" 
            onclick="approveLineManager('<%= applicant.applicantId %>')">
            Approve
        </button>
    <% } else if (applicant.applicantStatus === 'P3 - Awaiting for Line Manager Evaluation') { %>
        <!-- For Evaluation Button -->
        <a href="/interview-form/<%= applicant.applicantId %>">
            <button class="btn-evaluation">For Evaluation</button>
        </a>
    <% } else if (applicant.applicantStatus && applicant.applicantStatus.startsWith('P3 - Line Manager Evaluation Accomplished')) { %>
        <!-- For Review Button that redirects to review filter -->
        <button 
            class="btn-review" 
            onclick="goToP3ReviewFilter()"
            style="background-color: white; color: black; border: 1px solid #124A5C; padding: 10px 20px; cursor: pointer; border-radius: 5px; font-size: 14px; transition: background-color 0.3s ease, color 0.3s ease; width: 150px; text-align: center;">
            For Review
        </button>
    <% } else if (applicant.applicantStatus === 'P3 - PASSED') { %>
        <!-- Job Offer Button -->
        <button 
            class="btn-job-offer" 
            onclick="openSendJobOfferModalFixed('<%= applicant.applicantId %>', '<%= applicant.lastName %>, <%= applicant.firstName %>', '<%= applicant.userEmail %>', '<%= applicant.jobTitle %>', '<%= applicant.deptName %>')">
            Send Job Offer
        </button>
    <% } %>
</div>
</td>   
                    </tr>
                <% }); %>
            <% } else { %>
                <tr>
                    <td colspan="5">No applicants found.</td>
                </tr>
            <% } %>
        </tbody>
    </table>

    <h2 class="header-section" id="onboardingHeader" style="margin-top: 30px; margin-bottom: 10px;">Onboarding</h2>

    <table class="tracking-table" id="onboardingTable" style="width: 100%; border-collapse: collapse;">
        <thead>
            <tr>
                <th>Application No.</th>
                <th>Last Name, First Name</th>
                <th>Department</th>
                <th>Position Applied</th>
                <th>Application Status & Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>APP00018</td>
                <td>William Scott<br>williamscott@gmail.com</td>
                <td>IT</td>
                <td>Data Analyst</td>
                <td>First Day Checklist Sent</td>
            </tr>
            <tr class="status-for-onboarding">
                <td>APP00019</td>
                <td>Grace Taylor<br>gracetaylor@gmail.com</td>
                <td>IT</td>
                <td>Data Analyst</td>
                <td>Checklist Accomplished <button class="btn-onboarding" onclick="openModal('accountSetupReminderModal')">For Onboarding</button></td>
            </tr>
            <tr>
                <td>APP00020</td>
                <td>Ella Martinez<br>ellamartinez@gmail.com</td>
                <td>IT</td>
                <td>Data Analyst</td>
                <td>Account Created</td>
            </tr>
        </tbody>
    </table>

    <button class="set-interview-button" onclick="setInterviewAvailabilities()">Set Interview Availabilities on Calendly</button>

    <!-- Modal for notifying applicants -->
<!-- Modal for finalizing review and notifying applicants -->
<div id="notifyApplicantsModal" class="modal">
    <div class="modal-content">
        <span class="close-button" onclick="closeModal('notifyApplicantsModal')">&times;</span>
        <h2>Confirm Finalization</h2>
        <p>You are about to finalize the review process and notify all applicants who were not selected that they have not advanced to the next stage. This action is irreversible. Are you sure you want to proceed?</p>
        <div class="modal-buttons">
            <button id="backButton" class="back-button" onclick="closeModal('notifyApplicantsModal')">Back</button>
            <button id="confirmButton" class="confirm-button">Confirm</button>
        </div>
    </div>
</div>

    <!-- Automated Email #1 Modal for P1: Finalize Review and Notify Applicants -->
<div id="finalizeModalP1" class="modal">
    <div class="modal-content">
        <span class="close-button" onclick="closeModal('finalizeModalP1')">&times;</span>
        <h2>Confirm P1 Review Finalization</h2>
        <p>You are about to finalize the P1 review process using Gmail compose. This will prepare customizable email templates and open Gmail with pre-filled recipient information for both passed and failed applicants. Are you sure you want to proceed?</p>
        
        <div style="background-color: #e7f3ff; padding: 15px; border-radius: 5px; margin: 15px 0;">
            <h4 style="color: #0066cc; margin-top: 0;">📧 Gmail Integration Process</h4>
            <ol style="color: #0066cc; margin-bottom: 0;">
                <li>Customize email templates for passed applicants</li>
                <li>Gmail will open with all emails pre-filled</li>
                <li>Customize email templates for failed applicants</li>
                <li>Gmail will open with rejection emails pre-filled</li>
                <li>Send emails directly from Gmail</li>
                <li>Return here to update database</li>
            </ol>
        </div>
        
        <div class="modal-buttons">
            <button id="backButtonP1" class="back-button" onclick="closeModal('finalizeModalP1')">Back</button>
            <button id="confirmButtonP1" class="confirm-button">Start Gmail Process</button>
        </div>
    </div>
</div>

<!-- Enhanced Progress Modal Template (will be created dynamically) -->
<!-- Email Progress Modal for both P1 and P3 -->
<div id="emailProgressModalTemplate" style="display: none;">
    <div class="modal-content" style="width: 70%; max-width: 600px;">
        <h2 style="text-align: center; color: #007bff;">
            <i class="fas fa-paper-plane" style="color: #28a745; margin-right: 10px;"></i>
            Sending Emails
        </h2>
        
        <div style="margin: 30px 0; text-align: center;">
            <div style="font-size: 48px; color: #28a745; margin-bottom: 20px;">
                <i class="fas fa-spinner fa-spin"></i>
            </div>
            <p id="progressMessage" style="font-size: 18px; margin-bottom: 20px;">Sending emails...</p>
            
            <div style="background-color: #e9ecef; border-radius: 10px; height: 20px; margin: 20px 0; overflow: hidden;">
                <div id="emailProgressBar" style="background: linear-gradient(135deg, #28a745, #20c997); height: 100%; width: 0%; transition: width 0.3s ease;"></div>
            </div>
            
            <div id="emailProgressText" style="font-size: 14px; color: #6c757d;">
                Initializing email sending...
            </div>
            
            <div id="emailProgressDetails" style="margin-top: 20px; background-color: #f8f9fa; padding: 15px; border-radius: 5px; text-align: left; max-height: 200px; overflow-y: auto;">
                <div style="font-weight: bold; margin-bottom: 10px;">📋 Sending Progress:</div>
                <div id="emailProgressLog"></div>
            </div>
        </div>
        
        <div style="background: linear-gradient(135deg, #fff3cd, #ffeaa7); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #f39c12;">
            <h4 style="color: #856404; margin-top: 0; display: flex; align-items: center;">
                <i class="fas fa-info-circle" style="margin-right: 10px;"></i>
                Please Wait
            </h4>
            <p style="color: #856404; margin-bottom: 0; line-height: 1.6;">
                Emails are being sent automatically. This modal will update when the process is complete.
            </p>
        </div>
        
        <div class="modal-buttons" style="display: none;" id="emailProgressButtons">
            <button class="confirm-button" onclick="finishEmailProcess()" 
                    style="background: linear-gradient(135deg, #28a745, #20c997); font-size: 16px; padding: 12px 25px;">
                <i class="fas fa-check" style="margin-right: 8px;"></i>
                Continue to Database Update
            </button>
        </div>
    </div>
</div> 
<!-- P1 - Line Manager Review Modal -->
<div id="lineManagerInitialScreeningModalHtml" class="review-modal">
    <div class="review-modal-content">
        <span class="review-close-button">&times;</span>
        <h2>P1: Initial Screening Score Breakdown</h2> 
        <div class="divider"></div>
        <div class="applicant-details">
            <input type="hidden" id="userId">
            <input type="hidden" id="jobId">            
            <input type="hidden" id="applicantId">

            <p><strong>Name:</strong> <span id="applicant-name"></span></p>
            <p><strong>Birthday:</strong> <span id="applicant-birthday"></span></p>
            <p><strong>Email:</strong> <span id="applicant-email"></span></p>
            <p><strong>Contact No.:</strong> <span id="applicant-contact"></span></p>
        </div>

        <h4>HR Online Assessment Form Breakdown</h4>         
        <h4>Initial Screening Scores</h4>           
        <table class="scores-table">              
            <thead>                  
                <tr>                      
                    <th>Criteria</th>                      
                    <th>Score</th>                  
                </tr>              
            </thead>              
            <tbody>                  
                <tr> 
                    <td>Industry Specific Degree</td> 
                    <td id="score-degree"></td> 
                </tr>                  
                <tr> 
                    <td>Experiences</td> 
                    <td id="score-experience"></td> 
                </tr>                  
                <tr> 
                    <td>Certifications</td> 
                    <td id="score-certifications"></td> 
                </tr>                  
                <tr> 
                    <td>Hard Skills</td> 
                    <td id="score-hard-skills"></td> 
                </tr>                  
                <tr> 
                    <td>Soft Skills</td> 
                    <td id="score-soft-skills"></td> 
                </tr>                  
                <tr> 
                    <td>Work Setup</td> 
                    <td id="score-work-setup"></td> 
                </tr>                  
                <tr> 
                    <td>Availability</td> 
                    <td id="score-availability"></td> 
                </tr>              
            </tbody>          
        </table>           

        <div class="computation-verdict">              
            <strong>Computation Verdict - <span id="computation-verdict"></span></strong>          
        </div>           

        <h4>Uploaded Documents</h4>         
        <p><strong>Degree:</strong> <a id="degree-doc" href="#" target="_blank">No document uploaded</a></p>         
        <div id="degree-preview" style="margin-top: 10px;"></div>          

        <p><strong>Certification:</strong> <a id="cert-doc" href="#" target="_blank">No document uploaded</a></p>         
        <div id="cert-preview" style="margin-top: 10px;"></div>          

        <p><strong>Resume:</strong> <a id="resume-doc" href="#" target="_blank">No document uploaded</a></p>         
        <div id="resume-preview" style="margin-top: 10px;"></div>  

        <!-- ENHANCED: Additional Document Section -->
        <div id="lm-addtl-document-section" style="display: none;">
            <p><strong>Additional Document:</strong> <a id="lm-addtl-doc" href="#" target="_blank">No additional document</a></p>
            <div id="lm-addtl-preview" style="margin-top: 10px;"></div>
            <div class="addtl-document-section" style="background-color: #e8f4f8; padding: 15px; border-radius: 5px; margin-top: 15px;">
                <h5 style="margin-top: 0; color: #124A5C;">HR Remarks for Additional Document:</h5>
                <p id="lm-hr-remarks-display" style="font-style: italic; color: #555;"></p>
            </div>
        </div>

        <h4>Line Manager Endorsement for HR Interview Statement</h4> 
        <div style="margin: 10px 0;">     
            <label>         
                <input type="checkbox" id="lineManagerVerificationCheckbox" required>         
                I confirm that I have further reviewed the applicant's documents and confirm the applicant is eligible to proceed to the next phase for interview.     
            </label>     
            <p style="font-size: 0.9em; color: #c00; margin-top: 5px;">         
                * This checkbox must be ticked to proceed with endorsing the applicant for interview.     
            </p> 
        </div>  

        <div style="margin-top: 10px;">     
            <label for="lineManagerComments"><strong>Comments:</strong></label><br>     
            <textarea id="lineManagerComments" rows="4" style="width: 100%;"></textarea> 
        </div>           

        <h4>Decision</h4>         
        <p><strong>Would you like to pass or reject this applicant for the HR interview?</strong></p>          

        <div class="decision-disclaimer">             
            <p>💡 <strong>Important:</strong> Pressing <strong>"Pass"</strong> will mark the applicant as likely to proceed to the HR interview stage, but this decision can still be changed before finalizing. Likewise, pressing <strong>"Reject"</strong> will mark the applicant as failed, but this can also be modified until the finalization step.</p>             
            <p>⚠️ <strong>Finalization Note:</strong> Once you press "Finalize," all passed and failed applicants will be officially informed of their status. Please double-check before proceeding.</p>         
        </div>          

        <div class="review-modal-buttons">             
            <button id="backButton" class="review-modal-back-button">Back</button>             
            <button id="rejectButton" class="review-modal-reject-button" onclick="rejectApplicant()">Reject</button>             
            <button id="passButton" class="review-modal-pass-button" onclick="passApplicant()">Pass</button>         
        </div>
    </div>
</div>

    <!-- Modal for P2: Finalize Review and Notify Applicants -->
    <div id="finalizeModalP2" class="modal">
        <div class="modal-content">
            <span class="close-button">&times;</span>
            <h2>Confirm Final Review and Notify Applicants</h2>
            <p>You are about to finalize the review process and notify all applicants who were not selected that they have not advanced to the next stage. This action is irreversible. Are you sure you want to proceed?</p>
            <div class="modal-buttons">
                <button id="backButtonP2" class="back-button">Back</button>
                <button id="confirmButtonP2" class="confirm-button">Confirm</button>
            </div>
        </div>
    </div>

<!-- FIXED: P3 Gmail Finalization Modal (add this after the P1 modal) -->
<div id="finalizeModalP3" class="modal">
    <div class="modal-content">
        <span class="close-button" onclick="closeModal('finalizeModalP3')">&times;</span>
        <h2>Confirm P3 Review Finalization</h2>
        <p>You are about to finalize the P3 review process using Gmail compose. This will prepare customizable email templates and open Gmail with pre-filled recipient information for both passed and failed applicants. Are you sure you want to proceed?</p>
        
        <div style="background-color: #e7f3ff; padding: 15px; border-radius: 5px; margin: 15px 0;">
            <h4 style="color: #0066cc; margin-top: 0;">📧 Gmail Integration Process</h4>
            <ol style="color: #0066cc; margin-bottom: 0;">
                <li>Customize email templates for passed applicants</li>
                <li>Gmail will open with all emails pre-filled</li>
                <li>Customize email templates for failed applicants</li>
                <li>Gmail will open with rejection emails pre-filled</li>
                <li>Send emails directly from Gmail</li>
                <li>Return here to update database</li>
            </ol>
        </div>
        
        <div class="modal-buttons">
            <button id="backButtonP3" class="back-button" onclick="closeModal('finalizeModalP3')">Back</button>
            <button id="confirmButtonP3" class="confirm-button">Start Gmail Process</button>
        </div>
    </div>
</div>

<!-- FIXED: Add P3 Gmail Compose Modal for Passed Applicants -->
<div id="emailP3PassedModal" class="modal">
    <div class="modal-content" style="width: 85%; max-width: 900px;">
        <span class="close-button" onclick="closeModal('emailP3PassedModal')">&times;</span>
        <h2 style="color: #28a745;">✅ Gmail Compose - P3 Congratulations Email</h2>
        
        <div style="background-color: #d4edda; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h4 style="color: #155724; margin-top: 0; display: flex; align-items: center;">
                <i class="fas fa-users" style="margin-right: 10px;"></i>
                Recipients (<span id="p3PassedRecipientsCount">0</span> applicants):
            </h4>
            <div id="p3PassedRecipientsList" style="color: #155724; max-height: 180px; overflow-y: auto; background: rgba(255,255,255,0.3); padding: 15px; border-radius: 5px;">
                <!-- Will be populated dynamically -->
            </div>
        </div>
        
        <div style="margin: 25px 0;">
            <label for="p3PassedEmailSubject" style="display: block; font-weight: bold; margin-bottom: 8px;">
                <i class="fas fa-tag" style="margin-right: 8px;"></i>Email Subject:
            </label>
            <input 
                type="text" 
                id="p3PassedEmailSubject" 
                style="width: 100%; padding: 12px; border: 2px solid #28a745; border-radius: 6px; font-size: 16px;"
                value="Congratulations! Job Offer - Company ABC"
            >
        </div>
        
        <div style="margin: 25px 0;">
            <label for="p3PassedEmailTemplate" style="display: block; font-weight: bold; margin-bottom: 8px;">
                <i class="fas fa-edit" style="margin-right: 8px;"></i>Email Template:
            </label>
            <div style="margin: 10px 0; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
                <small style="color: #6c757d;">
                    <strong>Available placeholders:</strong> 
                    <code>{applicantName}</code>, <code>{jobTitle}</code>, <code>{companyName}</code>
                </small>
            </div>
            <textarea 
                id="p3PassedEmailTemplate" 
                rows="14" 
                style="width: 100%; padding: 15px; border: 2px solid #28a745; border-radius: 6px; font-family: Arial, sans-serif; font-size: 14px; line-height: 1.5;"
                placeholder="Email template will be loaded here..."
            ></textarea>
        </div>

        <div style="background: linear-gradient(135deg, #e7f3ff, #f0f8ff); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #007bff;">
            <h4 style="color: #0066cc; margin-top: 0; display: flex; align-items: center;">
                <i class="fab fa-google" style="margin-right: 10px; font-size: 20px;"></i>
                Gmail Integration Ready
            </h4>
            <p style="color: #0066cc; margin-bottom: 0; line-height: 1.6;">
                Clicking "Open Gmail Compose" will open Gmail in a new tab with:<br>
                • <strong>All recipient emails</strong> automatically added to "To:" field<br>
                • <strong>Subject line</strong> pre-filled<br>
                • <strong>Email template</strong> ready in the message body
            </p>
        </div>
        
        <div class="modal-buttons">
            <button class="back-button" onclick="closeModal('emailP3PassedModal')">
                <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
            </button>
            <button class="confirm-button" onclick="openGmailForP3Passed()" style="background: linear-gradient(135deg, #db4437, #c23321); border: none; font-size: 16px; padding: 12px 25px;">
                <i class="fab fa-google" style="margin-right: 8px;"></i>
                Open Gmail Compose
            </button>
        </div>
    </div>
</div>

<!-- FIXED: Add P3 Gmail Compose Modal for Failed Applicants -->
<div id="emailP3FailedModal" class="modal">
    <div class="modal-content" style="width: 85%; max-width: 900px;">
        <span class="close-button" onclick="closeModal('emailP3FailedModal')">&times;</span>
        <h2 style="color: #dc3545;">❌ Gmail Compose - P3 Notification Email</h2>
        
        <div style="background-color: #f8d7da; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h4 style="color: #721c24; margin-top: 0; display: flex; align-items: center;">
                <i class="fas fa-users" style="margin-right: 10px;"></i>
                Recipients (<span id="p3FailedRecipientsCount">0</span> applicants):
            </h4>
            <div id="p3FailedRecipientsList" style="color: #721c24; max-height: 180px; overflow-y: auto; background: rgba(255,255,255,0.3); padding: 15px; border-radius: 5px;">
                <!-- Will be populated dynamically -->
            </div>
        </div>
        
        <div style="margin: 25px 0;">
            <label for="p3FailedEmailSubject" style="display: block; font-weight: bold; margin-bottom: 8px;">
                <i class="fas fa-tag" style="margin-right: 8px;"></i>Email Subject:
            </label>
            <input 
                type="text" 
                id="p3FailedEmailSubject" 
                style="width: 100%; padding: 12px; border: 2px solid #dc3545; border-radius: 6px; font-size: 16px;"
                value="Thank You for Your Interest - Interview Process Complete"
            >
        </div>
        
        <div style="margin: 25px 0;">
            <label for="p3FailedEmailTemplate" style="display: block; font-weight: bold; margin-bottom: 8px;">
                <i class="fas fa-edit" style="margin-right: 8px;"></i>Email Template:
            </label>
            <div style="margin: 10px 0; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
                <small style="color: #6c757d;">
                    <strong>Available placeholders:</strong> 
                    <code>{applicantName}</code>, <code>{jobTitle}</code>, <code>{companyName}</code>
                </small>
            </div>
            <textarea 
                id="p3FailedEmailTemplate" 
                rows="14" 
                style="width: 100%; padding: 15px; border: 2px solid #dc3545; border-radius: 6px; font-family: Arial, sans-serif; font-size: 14px; line-height: 1.5;"
                placeholder="Email template will be loaded here..."
            ></textarea>
        </div>

        <div style="background: linear-gradient(135deg, #e7f3ff, #f0f8ff); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #007bff;">
            <h4 style="color: #0066cc; margin-top: 0; display: flex; align-items: center;">
                <i class="fab fa-google" style="margin-right: 10px; font-size: 20px;"></i>
                Gmail Integration Ready
            </h4>
            <p style="color: #0066cc; margin-bottom: 0; line-height: 1.6;">
                Clicking "Open Gmail Compose" will open Gmail in a new tab with:<br>
                • <strong>All recipient emails</strong> automatically added to "To:" field<br>
                • <strong>Subject line</strong> pre-filled<br>
                • <strong>Email template</strong> ready in the message body
            </p>
        </div>
        
        <div class="modal-buttons">
            <button class="back-button" onclick="closeModal('emailP3FailedModal')">
                <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
            </button>
            <button class="confirm-button" onclick="openGmailForP3Failed()" style="background: linear-gradient(135deg, #db4437, #c23321); border: none; font-size: 16px; padding: 12px 25px;">
                <i class="fab fa-google" style="margin-right: 8px;"></i>
                Open Gmail Compose
            </button>
        </div>
    </div>
</div>

<!-- FIXED: P3 Status Update Modal -->
<div id="p3StatusUpdateModal" class="modal">
    <div class="modal-content" style="width: 70%; max-width: 600px;">
        <h2 style="text-align: center; color: #007bff;">
            <i class="fab fa-google" style="color: #db4437; margin-right: 10px;"></i>
            P3 Gmail Compose Opened
        </h2>
        
        <div style="margin: 30px 0; text-align: center;">
            <div style="font-size: 64px; color: #db4437; margin-bottom: 20px;">
                <i class="fab fa-google"></i>
            </div>
            <p style="font-size: 18px; margin-bottom: 20px;">Gmail compose window has been opened in a new tab with your P3 email pre-filled.</p>
            
            <div style="background-color: #e3f2fd; padding: 25px; border-radius: 10px; margin: 25px 0; border-left: 5px solid #2196f3;">
                <h4 style="color: #1976d2; margin-top: 0;">📋 Next Steps:</h4>
                <ol style="text-align: left; margin: 15px 0; color: #1976d2; line-height: 1.8;">
                    <li><strong>Switch to Gmail tab</strong> - Check if Gmail opened correctly</li>
                    <li><strong>Review recipient list</strong> - Verify all emails are in "To:" field</li>
                    <li><strong>Check subject line</strong> - Modify if needed</li>
                    <li><strong>Review email content</strong> - Make final adjustments</li>
                    <li><strong>Send emails</strong> - Click Gmail's send button</li>
                    <li><strong>Return here</strong> - Click "Update Database" below</li>
                </ol>
            </div>
        </div>
        
        <div style="background: linear-gradient(135deg, #fff3cd, #ffeaa7); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #f39c12;">
            <h4 style="color: #856404; margin-top: 0; display: flex; align-items: center;">
                <i class="fas fa-exclamation-triangle" style="margin-right: 10px;"></i>
                Important
            </h4>
            <p style="color: #856404; margin-bottom: 0; line-height: 1.6;">
                <strong>After sending emails in Gmail</strong>, return here and click "Update Database" to finalize the P3 applicant statuses in your system.
            </p>
        </div>
        
        <div class="modal-buttons">
            <button class="back-button" onclick="closeModal('p3StatusUpdateModal')">
                <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel Process
            </button>
            <button class="confirm-button" onclick="updateP3ApplicantStatuses()" style="background: linear-gradient(135deg, #28a745, #20c997); font-size: 16px; padding: 12px 25px;">
                <i class="fas fa-database" style="margin-right: 8px;"></i>
                Update Database
            </button>
        </div>
    </div>
</div>

    <!-- Other modals for account setup, job offers, etc. -->
    <div id="releaseJobOfferModal" class="modal">
        <div class="modal-content">
            <span class="close-button" onclick="closeModal('releaseJobOfferModal')">&times;</span>
            <h2 style="color: #07ACB9;" id="applicant-name-job-offer">Name</h2>
            <p><strong>Age:</strong> <span id="applicant-age-job-offer">Text</span></p>
            <p><strong>Email:</strong> <span id="applicant-email-job-offer">Text</span></p>
            <p><strong>Contact No:</strong> <span id="applicant-contact-job-offer">Text</span></p>
            
            <div class="divider"></div>
            
            <h3>Panel Assessment Form Breakdown</h3>
            <p>[INSERT SUBMITTED FORM HERE]</p>
            
            <div class="modal-question">
                <p><strong>Would you like to release the job offer and notify the applicant they are being considered for hiring?</strong></p>
            </div>
            
            <div class="modal-buttons">
                <button id="backButton" onclick="closeModal('releaseJobOfferModal')">Back</button>
                <button id="confirmButton" onclick="sendNotification()">Notify Applicant</button>
            </div>
        </div>
    </div>

    <!-- Modal for Moving Applicant for Onboarding -->
    <div id="moveToOnboardingModal" class="modal">
        <div class="modal-content">
            <span class="close-button" onclick="closeModal('moveToOnboardingModal')">&times;</span>
            <h1>Job Offer Confirmation</h1>
            
            <h2><strong>Applicant Personal Information</strong></h2>
            <h3><strong id="applicant-name-onboarding">Name</strong></h3>
            <p><strong>Age:</strong> <span id="applicant-age-onboarding">Text</span></p>
            <p><strong>Email:</strong> <span id="applicant-email-onboarding">Text</span></p>
            <p><strong>Contact No:</strong> <span id="applicant-contact-onboarding">Text</span></p>
            
            <div class="modal-question">
                <p><strong>Would you like to move this applicant for onboarding?</strong></p>
            </div>
            
            <div class="modal-buttons">
                <button id="backButton" onclick="closeModal('moveToOnboardingModal')">Back</button>
                <button id="confirmButton" onclick="confirmOnboarding()">Confirm</button>
            </div>
        </div>
    </div>

    <!-- Modal for Sending Job Offer -->
<!-- Modal for Informing HR of Job Offer and Start Date -->
<div id="sendJobOfferModal" class="modal">
  <div class="modal-content">
      <span class="close-button" onclick="closeModal('sendJobOfferModal')">&times;</span>
      <h2>Inform HR of Job Offer and Start Date</h2>
      
      <p style="color: #555; margin-bottom: 20px;">
        This submission will undergo checking by HR. The job offer will only be sent to the applicant once HR confirms.
      </p>

      <div class="applicant-details" style="margin-bottom: 20px;">
          <h3 id="applicant-name-job-offer" style="color: #124A5C; margin-bottom: 5px;"></h3>
          <!-- <p><strong>Email:</strong> <span id="applicant-email-job-offer"></span></p> -->
          <p><strong>Position:</strong> <span id="applicant-position-job-offer"></span></p>
          <p><strong>Department:</strong> <span id="applicant-department-job-offer"></span></p>
      </div>
      
      <div class="divider"></div>
      
      <div style="margin: 20px 0;">
          <p><strong>Job Offer Details:</strong></p>
          <div style="margin: 15px 0;">
              <label for="startDate" style="display: block; margin-bottom: 5px;"><strong>Start Date:</strong></label>
              <input type="date" id="startDate" class="search-bar" style="width: 100%;" required>
          </div>
          
          <div style="margin: 15px 0;">
              <label for="offerNotes" style="display: block; margin-bottom: 5px;"><strong>Additional Notes:</strong></label>
              <textarea id="offerNotes" class="search-bar" style="width: 100%; height: 100px; resize: vertical;" placeholder="Enter any additional details for the job offer..."></textarea>
          </div>
      </div>
      
      <div class="modal-question">
          <p><strong>Are you sure you want to notify HR of this job offer and start date?</strong></p>
      </div>
      
      <div class="modal-buttons">
          <button id="backButton" class="back-button" onclick="closeModal('sendJobOfferModal')">Cancel</button>
          <button id="sendOfferButton" class="confirm-button" onclick="sendJobOffer()">Submit to HR</button>
      </div>
  </div>
</div>

    <!-- Modal for Account Setup Creation Reminder -->
    <div id="accountSetupReminderModal" class="modal">
        <div class="modal-content">
            <span class="close-button" onclick="closeModal('accountSetupReminderModal')">&times;</span>
            <h1>Account Setup Creation Reminder</h1>
            
            <h2><strong>Applicant Personal Information</strong></h2>
            <h3><strong id="applicant-name-account">Name</strong></h3>
            <p><strong>Age:</strong> <span id="applicant-age-account">Text</span></p>
            <p><strong>Email:</strong> <span id="applicant-email-account">Text</span></p>
            <p><strong>Contact No:</strong> <span id="applicant-contact-account">Text</span></p>
            
            <div class="modal-question">
                <p><strong>Have you created an account for the employee through the Manage Employees page and emailed them the account details?</strong></p>
            </div>
            
            <div class="modal-buttons">
                <button id="backButton" onclick="closeModal('accountSetupReminderModal')">Back</button>
                <button id="confirmButton" onclick="confirmAccountSetup()">Confirm</button>
            </div>
        </div>
    </div>
</div>

<!-- Add this right after the head tag, before any scripts -->
<script id="applicants-data" type="application/json">
    <% if (typeof applicants !== 'undefined') { %>
      <%- JSON.stringify(applicants) %>
    <% } else { %>
      []
    <% } %>
    </script>
<script src="/public/scripts/automatedemails.js"></script>

<script>
  

// ============================
// GLOBAL VARIABLES & INITIALIZATION
// ============================

// Global data structures
window.allUserIds = [];
window.applicantsScores = {};
window.applicantNameMapping = {};
window.nameToUserId = {};
window.emailToUserId = {};
window.displayNameToUserId = {};
window.applicantRegistry = {};
window.mainTableScores = {};
window.mainTableUserIds = {};
window.applicantStatusMap = {};
window.applicantsData = [];

// Gmail integration variables
let currentPassedApplicants = [];
let currentFailedApplicants = [];
let emailTemplates = {};
let emailsToUpdate = { passed: [], failed: [] };

let currentP3PassedApplicants = [];
let currentP3FailedApplicants = [];
let p3EmailsToUpdate = { passed: [], failed: [] };

let emailSendingInProgress = false;
let emailBatchResults = {
    passed: { sent: 0, failed: 0, errors: [] },
    failed: { sent: 0, failed: 0, errors: [] }
};

// P3 specific batch results
if (!window.p3EmailBatchResults) {
    window.p3EmailBatchResults = {
        passed: { sent: 0, failed: 0, errors: [] },
        failed: { sent: 0, failed: 0, errors: [] }
    };
}

let emailSendingState = {
    phase: null, // 'P1' or 'P3'
    passedSent: false,
    failedSent: false,
    currentStep: 'initial', // 'initial', 'passed-complete', 'failed-complete', 'database'
    passedResults: null,
    failedResults: null
};


// ============================
// SINGLE DOMCONTENTLOADED EVENT
// ============================
document.addEventListener("DOMContentLoaded", function () {
    console.log("=== ENHANCED APPLICANT TRACKER INITIALIZATION START ===");
    
    // Initialize all systems
    initializeApplicantTracker();
    
    // ============================
    // CRITICAL FIX: P1 & P3 FINALIZATION BUTTON SETUP
    // ============================
    
    setTimeout(() => {
        console.log("🔧 Setting up P1 and P3 finalization buttons...");
        
        // P1 FINALIZATION BUTTON - FIXED
        const finalizeP1Button = document.getElementById('finalizeP1Button');
        if (finalizeP1Button) {
            console.log("✅ Found P1 finalize button by ID");
            
            // Remove any existing event listeners by cloning
            const newP1Button = finalizeP1Button.cloneNode(true);
            finalizeP1Button.parentNode.replaceChild(newP1Button, finalizeP1Button);
            
            // Add the click event listener
            newP1Button.addEventListener('click', function(e) {
                e.preventDefault();
                console.log("🚀 P1 Finalize button clicked!");
                
                if (checkAllApplicantsMarked('P1')) {
                    console.log("✅ All P1 applicants marked - starting finalization process");
                    startP1FinalizationProcess();
                } else {
                    console.log("⚠️ Not all P1 applicants marked");
                    alert("Not all P1 applicants have been marked as passed or failed. Please make a decision for all applicants first.");
                }
            });
            
            console.log("✅ P1 button event listener attached successfully");
        } else {
            console.error("❌ P1 finalize button not found! Looking for alternatives...");
            
            // Try alternative selectors for P1
            const altP1Buttons = document.querySelectorAll('.set-finalize-review-button, button[class*="finalize"]');
            console.log(`Found ${altP1Buttons.length} alternative finalize buttons`);
            
            altP1Buttons.forEach((btn, idx) => {
                const buttonText = btn.textContent || '';
                if (buttonText.includes('P1') || buttonText.includes('Finalize P1')) {
                    console.log(`Setting up alternative P1 button ${idx}: "${buttonText}"`);
                    btn.addEventListener('click', function(e) {
                        e.preventDefault();
                        console.log("🚀 Alternative P1 button clicked!");
                        
                        if (checkAllApplicantsMarked('P1')) {
                            startP1FinalizationProcess();
                        } else {
                            alert("Not all P1 applicants have been marked as passed or failed. Please make a decision for all applicants first.");
                        }
                    });
                }
            });
        }
        
        // P3 FINALIZATION BUTTON - FIXED
        const finalizeP3Button = document.getElementById('finalizeP3Button');
        if (finalizeP3Button) {
            console.log("✅ Found P3 finalize button by ID");
            
            // Remove any existing event listeners by cloning
            const newP3Button = finalizeP3Button.cloneNode(true);
            finalizeP3Button.parentNode.replaceChild(newP3Button, finalizeP3Button);
            
            // Add the click event listener
            newP3Button.addEventListener('click', function(e) {
                e.preventDefault();
                console.log("🚀 P3 Finalize button clicked!");
                
                if (checkAllP3ApplicantsMarked()) {
                    console.log("✅ All P3 applicants marked - starting finalization process");
                    startP3FinalizationProcess();
                } else {
                    console.log("⚠️ Not all P3 applicants marked");
                    alert("Not all P3 applicants have been marked as passed or failed. Please make a decision for all applicants first.");
                }
            });
            
            console.log("✅ P3 button event listener attached successfully");
        } else {
            console.log("ℹ️ P3 finalize button not found (this is normal if no P3 data exists)");
            
            // Try alternative selectors for P3
            const altP3Buttons = document.querySelectorAll('.set-finalize-review-button, button[class*="finalize"]');
            altP3Buttons.forEach((btn, idx) => {
                const buttonText = btn.textContent || '';
                if (buttonText.includes('P3') || buttonText.includes('Finalize P3')) {
                    console.log(`Setting up alternative P3 button ${idx}: "${buttonText}"`);
                    btn.addEventListener('click', function(e) {
                        e.preventDefault();
                        console.log("🚀 Alternative P3 button clicked!");
                        
                        if (checkAllP3ApplicantsMarked()) {
                            startP3FinalizationProcess();
                        } else {
                            alert("Not all P3 applicants have been marked as passed or failed. Please make a decision for all applicants first.");
                        }
                    });
                }
            });
        }
        
    }, 1000); // FIXED: Single timeout for both P1 and P3 finalization buttons

    // ============================
    // MODAL CONFIRM BUTTONS SETUP - FIXED
    // ============================
    
    setTimeout(() => {
        console.log("🔧 Setting up modal confirm buttons...");
        
        // P1 CONFIRM BUTTON
        const confirmButtonP1 = document.getElementById('confirmButtonP1');
        if (confirmButtonP1) {
            console.log("🔧 Setting up P1 confirm button");
            
            // Remove existing event listeners
            const newConfirmP1Button = confirmButtonP1.cloneNode(true);
            confirmButtonP1.parentNode.replaceChild(newConfirmP1Button, confirmButtonP1);
            
            // Add event listener
            newConfirmP1Button.addEventListener('click', function(e) {
                e.preventDefault();
                console.log("🚀 P1 Gmail process starting...");
                startGmailIntegrationFlow();
            });
            
            console.log("✅ P1 confirm button setup complete");
        } else {
            console.error("❌ P1 confirm button not found");
        }
        
        // P3 CONFIRM BUTTON
        const confirmButtonP3 = document.getElementById('confirmButtonP3');
        if (confirmButtonP3) {
            console.log("🔧 Setting up P3 confirm button");
            
            // Remove existing event listeners
            const newConfirmP3Button = confirmButtonP3.cloneNode(true);
            confirmButtonP3.parentNode.replaceChild(newConfirmP3Button, confirmButtonP3);
            
            // Add event listener - FIXED: Use the correct function
            newConfirmP3Button.addEventListener('click', function(e) {
                e.preventDefault();
                console.log("🚀 P3 Gmail process starting...");
                startP3GmailIntegrationFlow(); // Use the correct function name
            });
            
            console.log("✅ P3 confirm button setup complete");
        } else {
            console.log("ℹ️ P3 confirm button not found (normal if no P3 data)");
        }
        
    }, 1200);
    
    // ============================
    // CLOSE MODAL BUTTONS SETUP - FIXED
    // ============================
    
    setTimeout(() => {
        console.log("🔧 Setting up close modal buttons...");
        
        // P1 Modal Close Buttons
        const p1CloseButtons = document.querySelectorAll('#finalizeModalP1 .close-button, #finalizeModalP1 .back-button');
        p1CloseButtons.forEach(button => {
            button.addEventListener('click', function(e) {
                e.preventDefault();
                console.log("🔄 Closing P1 modal");
                closeModal('finalizeModalP1');
            });
        });
        
        // P3 Modal Close Buttons
        const p3CloseButtons = document.querySelectorAll('#finalizeModalP3 .close-button, #finalizeModalP3 .back-button');
        p3CloseButtons.forEach(button => {
            button.addEventListener('click', function(e) {
                e.preventDefault();
                console.log("🔄 Closing P3 modal");
                closeModal('finalizeModalP3');
            });
        });
        
        console.log("✅ Modal close buttons setup complete");
        
    }, 1300);
    
    // ============================
    // ADDITIONAL SYSTEM INITIALIZATION
    // ============================
    
    // Initialize other systems with proper sequencing
    setTimeout(() => {
        if (typeof forceRefreshWorkSetupDataFixed === 'function') {
            forceRefreshWorkSetupDataFixed();
        } else {
            console.log('⚠️ forceRefreshWorkSetupDataFixed function not found');
        }
    }, 1500);
    
    setTimeout(() => {
        if (typeof setupP1TableFilters === 'function') {
            setupP1TableFilters();
        } else {
            console.log('⚠️ setupP1TableFilters function not found');
        }
    }, 2000);
    
    setTimeout(() => {
        if (typeof createP3FilterControls === 'function') {
            createP3FilterControls();
        } else {
            console.log('⚠️ createP3FilterControls function not found');
        }
    }, 2500);
    
    setTimeout(() => {
        if (typeof initializeP3ViewEvaluationButtons === 'function') {
            initializeP3ViewEvaluationButtons();
        } else {
            console.log('⚠️ initializeP3ViewEvaluationButtons function not found');
        }
    }, 3000);

    // ============================
    // MODAL SETUP
    // ============================
    
    if (typeof setupModalEventListeners === 'function') {
        setupModalEventListeners();
    } else {
        console.log('⚠️ setupModalEventListeners function not found');
    }
    
    if (typeof setupGmailEventListeners === 'function') {
        setupGmailEventListeners();
    } else {
        console.log('⚠️ setupGmailEventListeners function not found');
    }

    // ============================
    // ENHANCED JOB OFFER SYSTEM INITIALIZATION
    // ============================
    
    // Load applicants data for enhanced job offer system
    console.log('🚀 Initializing enhanced job offer system...');
    
    // Load applicants data first
    try {
        const dataScript = document.getElementById('applicants-data');
        if (dataScript) {
            window.applicantsData = JSON.parse(dataScript.textContent);
            console.log(`✅ Loaded ${window.applicantsData.length} applicants for job offer system`);
            
            // Create enhanced email mapping for job offers
            if (!window.applicantEmailMapping) window.applicantEmailMapping = {};
            if (!window.applicantRegistry) window.applicantRegistry = {};
            
            window.applicantsData.forEach(applicant => {
                if (applicant.userId && applicant.userEmail) {
                    // Store email mapping
                    window.applicantEmailMapping[applicant.userEmail] = applicant.userId;
                    
                    // Store in registry with enhanced data
                    window.applicantRegistry[applicant.userId] = {
                        ...window.applicantRegistry[applicant.userId],
                        email: applicant.userEmail,
                        fullName: `${applicant.lastName}, ${applicant.firstName}`,
                        department: applicant.deptName,
                        position: applicant.jobTitle,
                        applicantId: applicant.applicantId
                    };
                    
                    console.log(`Mapped userId ${applicant.userId} to email ${applicant.userEmail} for job offers`);
                }
            });
        } else {
            console.log('⚠️ No applicants-data script tag found');
        }
    } catch (error) {
        console.error('❌ Error loading applicants data for job offer system:', error);
    }

    // Enhanced applicant table setup for job offers
    setTimeout(() => {
        if (typeof loadApplicantsDataEnhanced === 'function') {
            loadApplicantsDataEnhanced();
        } else {
            console.log('⚠️ loadApplicantsDataEnhanced function not found');
        }
    }, 500);
    
    // Set up enhanced job offer buttons after initial load
    setTimeout(() => {
        console.log('🔧 Setting up enhanced job offer buttons...');
        if (typeof enhanceApplicantTableFixed === 'function') {
            enhanceApplicantTableFixed();
        } else if (typeof enhanceApplicantTable === 'function') {
            // Fallback to original function if enhanced version not available
            enhanceApplicantTable();
        } else {
            console.log('⚠️ No enhance applicant table function found');
        }
    }, 1000);
    
    // Re-enhance job offer buttons when filters are applied
    setTimeout(() => {
        const filterButtons = document.querySelectorAll('.filter-button');
        if (filterButtons.length > 0) {
            filterButtons.forEach(button => {
                button.addEventListener('click', function() {
                    setTimeout(() => {
                        console.log('🔄 Re-enhancing job offer buttons after filter...');
                        if (typeof enhanceApplicantTableFixed === 'function') {
                            enhanceApplicantTableFixed();
                        } else if (typeof enhanceApplicantTable === 'function') {
                            enhanceApplicantTable();
                        }
                    }, 500);
                });
            });
            console.log(`✅ Set up filter button listeners for ${filterButtons.length} buttons`);
        } else {
            console.log('⚠️ No filter buttons found');
        }
    }, 4000);
    
    // ============================
    // FINAL INITIALIZATION CHECK
    // ============================
    
    setTimeout(() => {
        console.log("🔍 Running final initialization check...");
        
        // Check if critical functions exist
        const criticalFunctions = [
            'initializeApplicantTracker',
            'checkAllApplicantsMarked',
            'checkAllP3ApplicantsMarked',
            'startP1FinalizationProcess',
            'startP3FinalizationProcess',
            'startGmailIntegrationFlow',
            'startP3GmailIntegrationFlow',
            'closeModal'
        ];
        
        criticalFunctions.forEach(functionName => {
            if (typeof window[functionName] === 'function') {
                console.log(`✅ ${functionName} is available`);
            } else {
                console.error(`❌ ${functionName} is missing - this may cause issues`);
            }
        });
        
        // Check if critical DOM elements exist
        const criticalElements = [
            'finalizeP1Button',
            'finalizeP3Button',
            'confirmButtonP1',
            'confirmButtonP3',
            'finalizeModalP1',
            'finalizeModalP3'
        ];
        
        criticalElements.forEach(elementId => {
            const element = document.getElementById(elementId);
            if (element) {
                console.log(`✅ Element ${elementId} found`);
            } else {
                console.log(`⚠️ Element ${elementId} not found (may be normal depending on current state)`);
            }
        });
        
        console.log("=== ENHANCED APPLICANT TRACKER INITIALIZATION COMPLETE ===");
    }, 5000);
});




function debugFinalizeButton() {
    console.log("=== DEBUGGING FINALIZE BUTTON ===");
    
    // Test if button exists
    const button = document.getElementById('finalizeP1Button');
    console.log("Button found:", button);
    
    if (button) {
        console.log("Button text:", button.textContent);
        console.log("Button class:", button.className);
        console.log("Button parent:", button.parentElement);
        console.log("Button style display:", button.style.display);
        console.log("Button offsetParent:", button.offsetParent);
        
        // Test if button is visible
        const rect = button.getBoundingClientRect();
        console.log("Button position:", rect);
        
        // Try to click it programmatically
        console.log("Trying programmatic click...");
        button.click();
    } else {
        console.log("❌ Button not found! Searching for alternatives...");
        
        // Look for any finalize buttons
        const allButtons = document.querySelectorAll('button');
        const finalizeButtons = Array.from(allButtons).filter(btn => 
            btn.textContent.toLowerCase().includes('finalize')
        );
        
        console.log(`Found ${finalizeButtons.length} buttons with 'finalize' in text:`);
        finalizeButtons.forEach((btn, idx) => {
            console.log(`${idx + 1}. "${btn.textContent}" - ID: ${btn.id} - Class: ${btn.className}`);
        });
    }
}

// ADD this to manually test the modal
function testModal() {
    console.log("Testing modal display...");
    const modal = document.getElementById('finalizeModalP1');
    if (modal) {
        modal.style.display = 'block';
        console.log("✅ Modal should be visible now");
    } else {
        console.log("❌ Modal not found!");
    }
}

    // ============================
    // GMAIL AUTOMATED CODES
    // ============================
    

function startP1FinalizationProcess() {
    console.log("🎯 FIXED P1: Starting P1 finalization process");
    
    try {
        // First show the modal to inform user about the process
        const modal = document.getElementById('finalizeModalP1');
        if (modal) {
            modal.style.display = 'block';
            console.log("✅ P1 Modal displayed successfully");
        } else {
            // If modal doesn't exist, proceed directly to finalization
            console.log("⚠️ P1 Modal not found, proceeding directly to finalization");
            executeP1Finalization();
        }
    } catch (error) {
        console.error("❌ Error in P1 finalization process:", error);
        alert("Error starting P1 finalization process: " + error.message);
    }
}
function startGmailIntegrationFlow() {
    console.log("🔥 UPDATED: Starting Gmail integration flow from finalization modal");
    emailSendingState.phase = 'P1';
    emailSendingState.currentStep = 'initial';
    emailSendingState.passedSent = false;
    emailSendingState.failedSent = false;
    
    // Close the finalization modal first
    closeModal('finalizeModalP1');
    
    // Start the P1 review process
    executeP1Finalization();
}


async function executeP1Finalization() {
    console.log("🔥 FIXED: Starting P1 review finalization with Gmail compose integration");

    try {
        const declaredResultsTable = document.getElementById("p1DeclaredResultsTable");
        if (!declaredResultsTable) {
            throw new Error("P1 declared results table not found");
        }

        const rows = declaredResultsTable.querySelectorAll('tbody tr:not(.section-header-row)') || [];
        console.log(`🔥 FIXED: Found ${rows.length} rows in P1 declared results table`);

        const passedUserIds = [];
        const failedUserIds = [];

        rows.forEach((row, index) => {
            // Skip rows with colspan (no data messages)
            if (row.querySelector('td[colspan]')) {
                console.log(`Row ${index + 1}: Skipping colspan row (no data message)`);
                return;
            }
            
            const userId = row.getAttribute('data-userid');
            console.log(`Row ${index + 1}: userId=${userId}`);
            
            if (!userId) {
                console.log(`❌ Row ${index + 1}: No userId found`);
                return;
            }
            
            // Find the status cell (should be column 7 for P1)
            const statusCell = row.querySelector('td:nth-child(7)');
            if (!statusCell) {
                console.log(`❌ Row ${index + 1}: No status cell found`);
                return;
            }
            
            const statusText = statusCell.textContent.trim();
            console.log(`Row ${index + 1}: Processing status = "${statusText}"`);
            
            if (statusText.includes('P1')) {
                if (statusText.includes('PASSED')) {
                    passedUserIds.push(userId);
                    console.log(`✅ Added ${userId} to P1 passed list (${statusText})`);
                } else if (statusText.includes('FAILED')) {
                    failedUserIds.push(userId);
                    console.log(`✅ Added ${userId} to P1 failed list (${statusText})`);
                } else {
                    console.log(`⚠️ Row ${index + 1}: P1 status found but not PASSED/FAILED: "${statusText}"`);
                }
            } else {
                console.log(`⚠️ Row ${index + 1}: No P1 status found: "${statusText}"`);
            }
        });

        console.log(`🔥 FIXED: Final counts - Passed: ${passedUserIds.length}, Failed: ${failedUserIds.length}`);

        if (passedUserIds.length === 0 && failedUserIds.length === 0) {
            throw new Error("No P1 applicants found with PASSED or FAILED status. Please mark some applicants first.");
        }

        console.log(`🔥 FIXED: Preparing P1 Gmail compose for: ${passedUserIds.length} passed, ${failedUserIds.length} failed`);

        // Store for later use
        window.emailsToUpdate = {
            passed: passedUserIds,
            failed: failedUserIds
        };

        // Fetch applicant data and email templates
        const [applicantData, templates] = await Promise.all([
            fetchApplicantDataForEmails(passedUserIds, failedUserIds),
            fetchEmailTemplates()
        ]);

        window.currentPassedApplicants = applicantData.passedApplicants || [];
        window.currentFailedApplicants = applicantData.failedApplicants || [];
        window.emailTemplates = templates;
        
        console.log("🔥 FIXED: Data loaded successfully");
        console.log("Passed applicants:", window.currentPassedApplicants);
        console.log("Failed applicants:", window.currentFailedApplicants);
        
        // FIXED: Start with passed applicants if any exist
        if (window.currentPassedApplicants.length > 0) {
            showPassedEmailModal();
        } else if (window.currentFailedApplicants.length > 0) {
            showFailedEmailModal();
        } else {
            throw new Error("No applicant data found for email composition.");
        }

    } catch (error) {
        console.error("🔥 FIXED: Error in P1 finalization:", error);
        alert("Error preparing P1 email composition: " + error.message);
    }
}


function finalizeP1Review() {
    console.log("🔥 FIXED: Starting P1 review finalization with Gmail compose integration");

    const declaredResultsTable = document.getElementById("p1DeclaredResultsTable");
    if (!declaredResultsTable) {
        console.error("❌ P1 declared results table not found");
        alert("P1 declared results table not found.");
        return;
    }

    const rows = declaredResultsTable.querySelectorAll('tbody tr:not(.section-header-row)') || [];
    console.log(`🔥 FIXED: Found ${rows.length} rows in P1 declared results table`);

    const passedUserIds = [];
    const failedUserIds = [];

    rows.forEach((row, index) => {
        // Skip rows with colspan (no data messages)
        if (row.querySelector('td[colspan]')) {
            console.log(`Row ${index + 1}: Skipping colspan row (no data message)`);
            return;
        }
        
        const userId = row.getAttribute('data-userid');
        console.log(`Row ${index + 1}: userId=${userId}`);
        
        if (!userId) {
            console.log(`❌ Row ${index + 1}: No userId found`);
            return;
        }
        
        // Find the status cell (should be column 7 for P1)
        const statusCell = row.querySelector('td:nth-child(7)');
        if (!statusCell) {
            console.log(`❌ Row ${index + 1}: No status cell found`);
            return;
        }
        
        const statusText = statusCell.textContent.trim();
        console.log(`Row ${index + 1}: Processing status = "${statusText}"`);
        
        if (statusText.includes('P1')) {
            if (statusText.includes('PASSED')) {
                passedUserIds.push(userId);
                console.log(`✅ Added ${userId} to P1 passed list (${statusText})`);
            } else if (statusText.includes('FAILED')) {
                failedUserIds.push(userId);
                console.log(`✅ Added ${userId} to P1 failed list (${statusText})`);
            } else {
                console.log(`⚠️ Row ${index + 1}: P1 status found but not PASSED/FAILED: "${statusText}"`);
            }
        } else {
            console.log(`⚠️ Row ${index + 1}: No P1 status found: "${statusText}"`);
        }
    });

    console.log(`🔥 FIXED: Final counts - Passed: ${passedUserIds.length}, Failed: ${failedUserIds.length}`);

    if (passedUserIds.length === 0 && failedUserIds.length === 0) {
        alert("No P1 applicants found with PASSED or FAILED status. Please mark some applicants first.");
        return;
    }

    console.log(`🔥 FIXED: Preparing P1 Gmail compose for: ${passedUserIds.length} passed, ${failedUserIds.length} failed`);

    // Store for later use
    window.emailsToUpdate = {
        passed: passedUserIds,
        failed: failedUserIds
    };

    // Fetch applicant data and email templates
    Promise.all([
        fetchApplicantDataForEmails(passedUserIds, failedUserIds),
        fetchEmailTemplates()
    ])
    .then(([applicantData, templates]) => {
        window.currentPassedApplicants = applicantData.passedApplicants || [];
        window.currentFailedApplicants = applicantData.failedApplicants || [];
        window.emailTemplates = templates;
        
        console.log("🔥 FIXED: Data loaded successfully");
        console.log("Passed applicants:", window.currentPassedApplicants);
        console.log("Failed applicants:", window.currentFailedApplicants);
        
        // FIXED: Start with passed applicants if any exist
        if (window.currentPassedApplicants.length > 0) {
            showPassedEmailModal();
        } else if (window.currentFailedApplicants.length > 0) {
            showFailedEmailModal();
        } else {
            alert("No applicant data found for email composition.");
        }
    })
    .catch(error => {
        console.error("🔥 FIXED: Error preparing email composition:", error);
        alert("Error preparing email composition: " + error.message);
    });
}


async function fetchApplicantDataForEmails(passedUserIds, failedUserIds) {
    try {
        console.log("🔥 FIXED: Fetching applicant data for emails...");
        
        const response = await fetch('/linemanager/applicant-tracker-jobposition/finalizeP1Review', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                passedUserIds: passedUserIds,
                failedUserIds: failedUserIds
            }),
        });
        
        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message || 'Failed to fetch applicant data');
        }
        
        console.log("🔥 FIXED: Successfully fetched applicant data");
        
        return {
            passedApplicants: data.passedApplicants || [],
            failedApplicants: data.failedApplicants || []
        };
        
    } catch (error) {
        console.error("🔥 FIXED: Error fetching applicant data:", error);
        throw error;
    }
}

async function fetchEmailTemplates() {
    try {
        console.log("🔥 FIXED: Fetching email templates...");
        
        const response = await fetch('/linemanager/applicant-tracker-jobposition/getEmailTemplates');
        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message || 'Failed to fetch email templates');
        }
        
        console.log("🔥 FIXED: Successfully fetched email templates");
        
        return data.templates;
        
    } catch (error) {
        console.error("🔥 FIXED: Error fetching email templates:", error);
        // Return default templates as fallback
        return {
            passed: {
                subject: 'Congratulations! You\'ve Passed the Initial Screening - Company ABC',
                template: 'Dear {applicantName},\n\nCongratulations! You have passed the initial screening for the {jobTitle} position at {companyName}.\n\nBest regards,\n{companyName} Team'
            },
            failed: {
                subject: 'Thank You for Your Interest - Company ABC',
                template: 'Dear {applicantName},\n\nThank you for your interest in the {jobTitle} position at {companyName}. We regret to inform you that we have decided to move forward with other candidates.\n\nBest regards,\n{companyName} Team'
            }
        };
    }
}

function showPassedEmailModal() {
    console.log("🔥 UPDATED: Showing enhanced passed applicants email modal (P1)");
    
    // Create modal dynamically
    const modal = createEmailModalDynamically('emailPassedModal', 'P1', 'passed');
    
    // Populate recipients list
    const recipientsList = document.getElementById('emailPassedModalRecipientsList');
    const recipientsCount = document.getElementById('emailPassedModalRecipientsCount');
    
    if (recipientsList && window.currentPassedApplicants && window.currentPassedApplicants.length > 0) {
        recipientsCount.textContent = window.currentPassedApplicants.length;
        
        recipientsList.innerHTML = window.currentPassedApplicants.map(applicant => `
            <div class="recipient-item" style="padding: 8px; border-bottom: 1px solid #e0e0e0;">
                <div>
                    <div class="recipient-name" style="font-weight: bold; color: #28a745;">${applicant.name}</div>
                    <div class="recipient-email" style="font-size: 12px; color: #666;">${applicant.email}</div>
                    <div class="recipient-job" style="font-size: 12px; color: #28a745; margin-top: 4px;">${applicant.jobTitle}</div>
                </div>
            </div>
        `).join('');
    }
    
    // Set templates
    const templates = window.emailTemplates || {};
    const subjectField = document.getElementById('emailPassedModalEmailSubject');
    const templateField = document.getElementById('emailPassedModalEmailTemplate');
    
    if (subjectField) {
        subjectField.value = templates.passed?.subject || 'Congratulations! You\'ve Passed the Initial Screening - Company ABC';
    }
    
    if (templateField) {
        templateField.value = templates.passed?.template || `Dear {applicantName},

Congratulations! You have successfully passed the initial screening process for the {jobTitle} position at {companyName}.

We are pleased to inform you that you will be proceeding to the next stage of our recruitment process. Our HR team will be contacting you within the next 1-2 business days to schedule your interview.

What's Next?
• HR will reach out to schedule your interview
• Please prepare for a comprehensive discussion about your experience
• Bring any additional documents that may support your application

We look forward to meeting you and learning more about your qualifications.

Best regards,
The {companyName} Recruitment Team`;
    }
    
    // UPDATED: Enhanced modal buttons with status indication
    const buttonsContainer = document.getElementById('emailPassedModalButtons');
    if (buttonsContainer) {
        buttonsContainer.innerHTML = `
            <button class="back-button" onclick="closeModal('emailPassedModal')">
                <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
            </button>
            <button class="confirm-button" onclick="openGmailForPassed()" 
                    style="background: linear-gradient(135deg, #6c757d, #5a6268); margin-right: 10px;">
                <i class="fab fa-google" style="margin-right: 8px;"></i>Gmail Compose
            </button>
            <button class="confirm-button" onclick="previewEmailTemplate('passed')" 
                    style="background: linear-gradient(135deg, #17a2b8, #138496); margin-right: 10px;">
                <i class="fas fa-eye" style="margin-right: 8px;"></i>Preview & Edit
            </button>
            <button class="confirm-button" onclick="sendAutomatedEmails('passed')" 
                    style="background: linear-gradient(135deg, #28a745, #20c997);" id="sendPassedEmailsBtn">
                <i class="fas fa-paper-plane" style="margin-right: 8px;"></i>Send Automatically
            </button>
        `;
    }
    
    // Show the modal
    modal.style.display = 'block';
}


// FIXED: Enhanced Failed Email Modal Function (creates modal dynamically)
function showFailedEmailModal() {
    console.log("🔥 UPDATED: Showing enhanced failed applicants email modal (P1)");
    
    // Create modal dynamically
    const modal = createEmailModalDynamically('emailFailedModal', 'P1', 'failed');
    
    // Populate recipients list
    const recipientsList = document.getElementById('emailFailedModalRecipientsList');
    const recipientsCount = document.getElementById('emailFailedModalRecipientsCount');
    
    if (recipientsList && window.currentFailedApplicants && window.currentFailedApplicants.length > 0) {
        recipientsCount.textContent = window.currentFailedApplicants.length;
        
        recipientsList.innerHTML = window.currentFailedApplicants.map(applicant => `
            <div class="recipient-item" style="padding: 8px; border-bottom: 1px solid #e0e0e0;">
                <div>
                    <div class="recipient-name" style="font-weight: bold; color: #dc3545;">${applicant.name}</div>
                    <div class="recipient-email" style="font-size: 12px; color: #666;">${applicant.email}</div>
                    <div class="recipient-job" style="font-size: 12px; color: #dc3545; margin-top: 4px;">${applicant.jobTitle}</div>
                </div>
            </div>
        `).join('');
    }
    
    // Set templates
    const templates = window.emailTemplates || {};
    const subjectField = document.getElementById('emailFailedModalEmailSubject');
    const templateField = document.getElementById('emailFailedModalEmailTemplate');
    
    if (subjectField) {
        subjectField.value = templates.failed?.subject || 'Thank You for Your Interest - Company ABC';
    }
    
    if (templateField) {
        templateField.value = templates.failed?.template || `Dear {applicantName},

Thank you for your interest in the {jobTitle} position at {companyName} and for taking the time to complete our initial screening process.

After careful consideration of your application, we regret to inform you that we will not be proceeding with your candidacy for this particular role. This decision was not made lightly, as we received many qualified applications.

We encourage you to continue monitoring our career opportunities, as we may have future positions that better align with your background and experience.

Thank you again for considering {companyName} as a potential employer. We wish you the best of luck in your job search.

Best regards,
The {companyName} Recruitment Team`;
    }
    
    // UPDATED: Enhanced modal buttons for failed applicants
    const buttonsContainer = document.getElementById('emailFailedModalButtons');
    if (buttonsContainer) {
        const stepText = emailSendingState.passedSent ? "Final Step" : "Step 2";
        buttonsContainer.innerHTML = `
            <button class="back-button" onclick="closeModal('emailFailedModal')">
                <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
            </button>
            <button class="confirm-button" onclick="openGmailForFailed()" 
                    style="background: linear-gradient(135deg, #6c757d, #5a6268); margin-right: 10px;">
                <i class="fab fa-google" style="margin-right: 8px;"></i>Gmail Compose
            </button>
            <button class="confirm-button" onclick="previewEmailTemplate('failed')" 
                    style="background: linear-gradient(135deg, #17a2b8, #138496); margin-right: 10px;">
                <i class="fas fa-eye" style="margin-right: 8px;"></i>Preview & Edit
            </button>
            <button class="confirm-button" onclick="sendAutomatedEmails('failed')" 
                    style="background: linear-gradient(135deg, #dc3545, #c82333);" id="sendFailedEmailsBtn">
                <i class="fas fa-paper-plane" style="margin-right: 8px;"></i>Send Automatically (${stepText})
            </button>
        `;
    }
    
    // Show the modal
    modal.style.display = 'block';
}


// Update failed modal buttons to include automation options
function updateFailedModalButtons() {
    const modalButtons = document.querySelector('#emailFailedModal .modal-buttons');
    if (modalButtons) {
        modalButtons.innerHTML = `
            <button class="back-button" onclick="closeModal('emailFailedModal')">
                <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
            </button>
            <button class="confirm-button" onclick="openGmailForFailed()" 
                    style="background: linear-gradient(135deg, #6c757d, #5a6268); margin-right: 10px;">
                <i class="fab fa-google" style="margin-right: 8px;"></i>Gmail Compose
            </button>
            <button class="confirm-button" onclick="previewEmailTemplate('failed')" 
                    style="background: linear-gradient(135deg, #17a2b8, #138496); margin-right: 10px;">
                <i class="fas fa-eye" style="margin-right: 8px;"></i>Preview & Edit
            </button>
            <button class="confirm-button" onclick="sendAutomatedEmails('failed')" 
                    style="background: linear-gradient(135deg, #dc3545, #c82333);">
                <i class="fas fa-paper-plane" style="margin-right: 8px;"></i>Send Automatically
            </button>
        `;
    }
}
function createEmailModalDynamically(modalId, modalType, applicantType) {
    console.log(`🔧 UPDATED: Creating ${modalId} dynamically with progress buttons`);
    
    // Remove existing modal if it exists
    const existingModal = document.getElementById(modalId);
    if (existingModal) {
        existingModal.remove();
    }
    
    const modal = document.createElement('div');
    modal.id = modalId;
    modal.className = 'modal';
    modal.style.display = 'none';
    
    const titleColor = applicantType === 'passed' ? '#28a745' : '#dc3545';
    const borderColor = applicantType === 'passed' ? '#28a745' : '#dc3545';
    const bgColor = applicantType === 'passed' ? '#d4edda' : '#f8d7da';
    const textColor = applicantType === 'passed' ? '#155724' : '#721c24';
    
    const phaseText = modalType === 'P3' ? 'P3' : 'P1';
    const titleText = applicantType === 'passed' 
        ? (modalType === 'P3' ? '✅ Job Offer Email' : '✅ Congratulations Email')
        : (modalType === 'P3' ? '📧 Final Notification' : '📧 Notification Email');
    
    modal.innerHTML = `
        <div class="modal-content" style="width: 85%; max-width: 900px;">
            <span class="close-button" onclick="closeModal('${modalId}')">&times;</span>
            <h2 style="color: ${titleColor};">${phaseText} - ${titleText}</h2>
            
            <!-- UPDATED: Progress Indicator -->
            <div style="background: linear-gradient(135deg, #e3f2fd, #bbdefb); padding: 15px; border-radius: 8px; margin: 15px 0; border-left: 5px solid #2196f3;">
                <h4 style="color: #1976d2; margin-top: 0; display: flex; align-items: center;">
                    <i class="fas fa-route" style="margin-right: 10px;"></i>
                    ${phaseText} Email Process Progress
                </h4>
                <div style="display: flex; align-items: center; color: #1976d2;">
                    <div class="progress-step ${applicantType === 'passed' ? 'active' : 'pending'}" style="flex: 1; text-align: center; padding: 8px; background: ${applicantType === 'passed' ? '#4caf50' : '#e0e0e0'}; color: ${applicantType === 'passed' ? 'white' : '#666'}; border-radius: 4px; margin: 0 2px;">
                        ${applicantType === 'passed' ? '🟢' : '⚪'} Step 1: ${applicantType === 'passed' ? 'Congratulations' : 'Notification'} Emails
                    </div>
                    <div class="progress-step pending" style="flex: 1; text-align: center; padding: 8px; background: #e0e0e0; color: #666; border-radius: 4px; margin: 0 2px;">
                        ⚪ Step 2: ${applicantType === 'passed' ? 'Notification' : 'Database Update'} ${applicantType === 'passed' ? 'Emails' : ''}
                    </div>
                    ${applicantType === 'passed' ? '<div class="progress-step pending" style="flex: 1; text-align: center; padding: 8px; background: #e0e0e0; color: #666; border-radius: 4px; margin: 0 2px;">⚪ Step 3: Database Update</div>' : ''}
                </div>
            </div>
            
            <div style="background-color: ${bgColor}; padding: 20px; border-radius: 8px; margin: 20px 0;">
                <h4 style="color: ${textColor}; margin-top: 0; display: flex; align-items: center;">
                    <i class="fas fa-users" style="margin-right: 10px;"></i>
                    Recipients (<span id="${modalId}RecipientsCount">0</span> applicants):
                </h4>
                <div id="${modalId}RecipientsList" style="color: ${textColor}; max-height: 180px; overflow-y: auto; background: rgba(255,255,255,0.3); padding: 15px; border-radius: 5px;">
                    <!-- Will be populated dynamically -->
                </div>
            </div>
            
            <div style="margin: 25px 0;">
                <label for="${modalId}EmailSubject" style="display: block; font-weight: bold; margin-bottom: 8px;">
                    <i class="fas fa-tag" style="margin-right: 8px;"></i>Email Subject:
                </label>
                <input 
                    type="text" 
                    id="${modalId}EmailSubject" 
                    style="width: 100%; padding: 12px; border: 2px solid ${borderColor}; border-radius: 6px; font-size: 16px;"
                    value=""
                >
            </div>
            
            <div style="margin: 25px 0;">
                <label for="${modalId}EmailTemplate" style="display: block; font-weight: bold; margin-bottom: 8px;">
                    <i class="fas fa-edit" style="margin-right: 8px;"></i>Email Template:
                </label>
                <div style="margin: 10px 0; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
                    <small style="color: #6c757d;">
                        <strong>Available placeholders:</strong> 
                        <code>{applicantName}</code>, <code>{jobTitle}</code>, <code>{companyName}</code>
                    </small>
                </div>
                <textarea 
                    id="${modalId}EmailTemplate" 
                    rows="14" 
                    style="width: 100%; padding: 15px; border: 2px solid ${borderColor}; border-radius: 6px; font-family: Arial, sans-serif; font-size: 14px; line-height: 1.5;"
                    placeholder="Email template will be loaded here..."
                ></textarea>
            </div>

            <div style="background: linear-gradient(135deg, #e7f3ff, #f0f8ff); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #007bff;">
                <h4 style="color: #0066cc; margin-top: 0; display: flex; align-items: center;">
                    <i class="fas fa-magic" style="margin-right: 10px; font-size: 20px;"></i>
                    Choose Your Sending Method
                </h4>
                <p style="color: #0066cc; margin-bottom: 0; line-height: 1.6;">
                    • <strong>Gmail Compose:</strong> Opens Gmail with pre-filled content (manual sending)<br>
                    • <strong>Preview & Edit:</strong> Review template before automatic sending<br>
                    • <strong>Send Automatically:</strong> Sends all emails via SMTP instantly
                </p>
            </div>
            
            <div class="modal-buttons" id="${modalId}Buttons">
                <!-- Buttons will be populated dynamically -->
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    return modal;
}

// ============================
// EMAIL PREVIEW FUNCTION
// ============================
// FIXED: Preview email template function
function previewEmailTemplate(type) {
    console.log(`📧 FIXED: Previewing ${type} email template with formatting`);
    
    let subject, template, applicants;
    let subjectId, templateId;
    
    // Determine the phase and set correct IDs
    if (emailSendingState.phase === 'P3') {
        if (type === 'passed' || type === 'p3passed') {
            subjectId = 'emailP3PassedModalEmailSubject';
            templateId = 'emailP3PassedModalEmailTemplate';
            applicants = window.currentP3PassedApplicants;
        } else if (type === 'failed' || type === 'p3failed') {
            subjectId = 'emailP3FailedModalEmailSubject';
            templateId = 'emailP3FailedModalEmailTemplate';
            applicants = window.currentP3FailedApplicants;
        }
    } else {
        if (type === 'passed') {
            subjectId = 'emailPassedModalEmailSubject';
            templateId = 'emailPassedModalEmailTemplate';
            applicants = window.currentPassedApplicants;
        } else if (type === 'failed') {
            subjectId = 'emailFailedModalEmailSubject';
            templateId = 'emailFailedModalEmailTemplate';
            applicants = window.currentFailedApplicants;
        }
    }
    
    // Get elements with null checks
    const subjectElement = document.getElementById(subjectId);
    const templateElement = document.getElementById(templateId);
    
    if (!subjectElement || !templateElement) {
        console.error(`Missing elements: subject=${subjectId}, template=${templateId}`);
        alert('Error: Could not find email template fields. Please try refreshing the page.');
        return;
    }
    
    subject = subjectElement.value;
    template = templateElement.value;
    
    if (!subject || !template) {
        alert('Please fill in both subject and template fields.');
        return;
    }
    
    if (!applicants || applicants.length === 0) {
        alert('No applicants found for preview.');
        return;
    }
    
    // Use first applicant for preview
    const sampleApplicant = applicants[0];
    
    // FIXED: Process template while preserving formatting
    const processedTemplate = processEmailTemplateWithFormatting(
        template, 
        sampleApplicant.name, 
        sampleApplicant.jobTitle, 
        'Company ABC'
    );
    
    // Create preview modal
    const previewModal = document.createElement('div');
    previewModal.className = 'modal';
    previewModal.style.display = 'block';
    previewModal.innerHTML = `
        <div class="modal-content" style="width: 90%; max-width: 800px;">
            <span class="close-button" onclick="this.closest('.modal').remove()">&times;</span>
            <h2>📧 Email Preview - ${type.charAt(0).toUpperCase() + type.slice(1)} (${emailSendingState.phase || 'P1'})</h2>
            
            <div style="margin: 20px 0;">
                <h4>Recipients: ${applicants.length} applicant(s)</h4>
                <p><strong>Subject:</strong> ${subject}</p>
            </div>
            
            <div style="border: 2px solid #ddd; border-radius: 8px; padding: 20px; background-color: #f9f9f9; margin: 20px 0;">
                <h4 style="margin-top: 0; color: #124A5C;">📝 Email Content Preview (with formatting):</h4>
                <div style="white-space: pre-wrap; font-family: Arial, sans-serif; line-height: 1.6; background: white; padding: 15px; border-radius: 4px; border: 1px solid #ddd;">
${processedTemplate}
                </div>
            </div>
            
            <div style="background-color: #e8f5e8; padding: 15px; border-radius: 5px; margin: 20px 0;">
                <h4 style="color: #2e7d32; margin-top: 0;">✅ Formatting Preserved:</h4>
                <ul style="color: #2e7d32; margin-bottom: 0;">
                    <li>Line breaks and spacing will be maintained</li>
                    <li>Paragraph structure will be preserved</li>
                    <li>${applicants.length} recipient(s) will receive this formatted email</li>
                    <li>All placeholders have been replaced with actual data</li>
                </ul>
            </div>
            
            <div class="modal-buttons">
                <button class="back-button" onclick="this.closest('.modal').remove()">
                    <i class="fas fa-times" style="margin-right: 5px;"></i>Close Preview
                </button>
                <button class="confirm-button" onclick="this.closest('.modal').remove(); sendAutomatedEmails('${type}')" 
                        style="background: linear-gradient(135deg, #28a745, #20c997);">
                    <i class="fas fa-paper-plane" style="margin-right: 8px;"></i>Send Emails Now
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(previewModal);
}
// ============================
// AUTOMATED EMAIL SENDING
// ============================

// Send automated emails for passed or failed applicants
async function sendAutomatedEmails(type) {
    if (emailSendingInProgress) {
        alert('Email sending is already in progress. Please wait.');
        return;
    }
    
    console.log(`📧 FIXED: Starting automated email sending for: ${type}`);
    
    // Initialize batch results first
    if (!window.emailBatchResults) {
        window.emailBatchResults = {
            passed: { sent: 0, failed: 0, errors: [] },
            failed: { sent: 0, failed: 0, errors: [] }
        };
    }
    
    if (!window.p3EmailBatchResults) {
        window.p3EmailBatchResults = {
            passed: { sent: 0, failed: 0, errors: [] },
            failed: { sent: 0, failed: 0, errors: [] }
        };
    }
    
    let applicants, subject, template, phase;
    let subjectId, templateId;
    
    // Determine the phase and set correct IDs
    if (emailSendingState.phase === 'P3') {
        phase = 'P3';
        if (type === 'passed' || type === 'p3passed') {
            subjectId = 'emailP3PassedModalEmailSubject';
            templateId = 'emailP3PassedModalEmailTemplate';
            applicants = window.currentP3PassedApplicants;
            type = 'passed'; // Normalize
        } else if (type === 'failed' || type === 'p3failed') {
            subjectId = 'emailP3FailedModalEmailSubject';
            templateId = 'emailP3FailedModalEmailTemplate';
            applicants = window.currentP3FailedApplicants;
            type = 'failed'; // Normalize
        }
    } else {
        phase = 'P1';
        if (type === 'passed') {
            subjectId = 'emailPassedModalEmailSubject';
            templateId = 'emailPassedModalEmailTemplate';
            applicants = window.currentPassedApplicants;
        } else if (type === 'failed') {
            subjectId = 'emailFailedModalEmailSubject';
            templateId = 'emailFailedModalEmailTemplate';
            applicants = window.currentFailedApplicants;
        }
    }
    
    // Get elements with null checks
    const subjectElement = document.getElementById(subjectId);
    const templateElement = document.getElementById(templateId);
    
    if (!subjectElement || !templateElement) {
        console.error(`❌ FIXED: Missing elements for automated sending: subject=${subjectId}, template=${templateId}`);
        alert('Error: Could not find email template fields. Please try refreshing the page.');
        return;
    }
    
    subject = subjectElement.value;
    template = templateElement.value;
    
    if (!applicants || applicants.length === 0) {
        alert(`No ${type} applicants found to send emails to.`);
        return;
    }
    
    if (!subject || !template) {
        alert('Please fill in both subject and template fields.');
        return;
    }
    
    if (!confirm(`This will automatically send ${applicants.length} emails to ${type} applicants. Continue?`)) {
        return;
    }
    
    console.log(`📧 FIXED: Confirmed sending ${applicants.length} ${phase} ${type} emails`);
    
    // Close current modal
    const modalMap = {
        'passed': phase === 'P3' ? 'emailP3PassedModal' : 'emailPassedModal',
        'failed': phase === 'P3' ? 'emailP3FailedModal' : 'emailFailedModal'
    };
    
    closeModal(modalMap[type]);
    
    // Show progress modal
    showEmailSendingProgress(type, applicants.length, phase);
    
    // FIXED: Use the fixed batch function with guaranteed completion
    await sendEmailBatch(applicants, subject, template, type, phase);
}

// Make functions globally availables
window.emailSendingState = emailSendingState;
window.markEmailsAsSent = markEmailsAsSent;
window.proceedWithFailedEmails = proceedWithFailedEmails;
window.proceedWithDatabaseUpdate = proceedWithDatabaseUpdate;
window.skipToDatabase = skipToDatabase;
window.cancelEmailProcess = cancelEmailProcess;
window.sendEmailBatch = sendEmailBatch;
window.showEmailSendingProgress = showEmailSendingProgress;
window.initializeEmailBatchResults = initializeEmailBatchResults;

console.log('✅ FIXED: Email completion and database update functions loaded with proper modal handling');



// ============================
// MODAL DEBUG AND FORCED UPDATE FIX
// ============================

// FIXED: Force modal update with aggressive element finding
function forceModalUpdate(sentCount, errorCount, errors, type, phase) {
    console.log(`🔧 FORCE UPDATE: Starting forced modal update for ${phase} ${type}`);
    
    // Find the progress modal with multiple selectors
    const possibleModalIds = [
        `${phase.toLowerCase()}EmailProgressModal`,
        'p1EmailProgressModal',
        'p3EmailProgressModal',
        'emailProgressModal'
    ];
    
    let progressModal = null;
    for (const modalId of possibleModalIds) {
        progressModal = document.getElementById(modalId);
        if (progressModal) {
            console.log(`🔧 FORCE UPDATE: Found modal with ID: ${modalId}`);
            break;
        }
    }
    
    if (!progressModal) {
        // Try finding by class or other attributes
        progressModal = document.querySelector('.modal[style*="display: block"]');
        console.log(`🔧 FORCE UPDATE: Found modal by selector:`, progressModal);
    }
    
    if (!progressModal) {
        console.error(`❌ FORCE UPDATE: No progress modal found!`);
        // Create a new completion modal from scratch
        createCompletionModalFromScratch(sentCount, errorCount, type, phase);
        return;
    }
    
    // Find and update progress text
    let progressText = progressModal.querySelector('#emailProgressText');
    if (!progressText) {
        progressText = progressModal.querySelector('[id*="ProgressText"]');
    }
    if (!progressText) {
        progressText = progressModal.querySelector('.modal-content p, .modal-content div[style*="font-size: 18px"]');
    }
    
    if (progressText) {
        if (errorCount === 0) {
            progressText.innerHTML = `<div style="color: #28a745; font-weight: bold; font-size: 18px;">✅ All ${sentCount} ${phase} ${type} emails sent successfully!</div>`;
        } else {
            progressText.innerHTML = `<div style="color: #ffc107; font-weight: bold; font-size: 18px;">⚠️ ${sentCount} ${phase} ${type} emails sent, ${errorCount} failed</div>`;
        }
        console.log(`🔧 FORCE UPDATE: Updated progress text`);
    } else {
        console.error(`❌ FORCE UPDATE: Could not find progress text element`);
    }
    
    // Find and show buttons
    let progressButtons = progressModal.querySelector('#emailProgressButtons');
    if (!progressButtons) {
        progressButtons = progressModal.querySelector('[id*="ProgressButtons"]');
    }
    if (!progressButtons) {
        progressButtons = progressModal.querySelector('.modal-buttons');
    }
    
    if (!progressButtons) {
        // Create buttons container if it doesn't exist
        const modalContent = progressModal.querySelector('.modal-content');
        if (modalContent) {
            progressButtons = document.createElement('div');
            progressButtons.className = 'modal-buttons';
            progressButtons.id = 'emailProgressButtons';
            progressButtons.style.cssText = 'display: flex; justify-content: center; gap: 10px; margin-top: 20px;';
            modalContent.appendChild(progressButtons);
            console.log(`🔧 FORCE UPDATE: Created new buttons container`);
        }
    }
    
    if (progressButtons) {
        const buttonHtml = `
            <button class="back-button" onclick="cancelEmailProcess()" 
                    style="background: #6c757d; color: white; border: none; padding: 12px 20px; border-radius: 5px; cursor: pointer; margin-right: 10px;">
                <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel Process
            </button>
            <button class="confirm-button" onclick="proceedWithDatabaseUpdate()" 
                    style="background: linear-gradient(135deg, #28a745, #20c997); color: white; border: none; padding: 12px 25px; border-radius: 5px; cursor: pointer; font-size: 16px;">
                <i class="fas fa-database" style="margin-right: 8px;"></i>
                Proceed to Database Update
            </button>
        `;
        
        progressButtons.innerHTML = buttonHtml;
        progressButtons.style.display = 'flex';
        console.log(`🔧 FORCE UPDATE: Updated buttons`);
    } else {
        console.error(`❌ FORCE UPDATE: Could not find or create buttons container`);
    }
    
    // Hide the spinner
    const spinner = progressModal.querySelector('.fa-spinner');
    if (spinner) {
        spinner.style.display = 'none';
        console.log(`🔧 FORCE UPDATE: Hidden spinner`);
    }
    
    // Update the progress bar to 100%
    const progressBar = progressModal.querySelector('#emailProgressBar, [id*="ProgressBar"]');
    if (progressBar) {
        progressBar.style.width = '100%';
        console.log(`🔧 FORCE UPDATE: Set progress bar to 100%`);
    }
    
    console.log(`✅ FORCE UPDATE: Modal update completed`);
}

function createCompletionModalFromScratch(sentCount, errorCount, type, phase) {
    console.log(`🔧 SCRATCH MODAL: Creating completion modal from scratch for ${phase} ${type}`);
    
    // Remove any existing modals first
    const existingModals = document.querySelectorAll('.modal');
    existingModals.forEach(modal => {
        if (modal.id.includes('Email') || modal.id.includes('Progress')) {
            modal.remove();
        }
    });
    
    const completionModal = document.createElement('div');
    completionModal.className = 'modal';
    completionModal.style.display = 'block';
    completionModal.id = 'emailCompletionModal';
    
    const titleText = type === 'passed' ? 'Congratulations' : 'Notification';
    
    completionModal.innerHTML = `
        <div class="modal-content" style="width: 70%; max-width: 600px; position: relative; background: white; margin: 5% auto; padding: 0; border-radius: 10px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
            <div style="padding: 30px; text-align: center;">
                <h2 style="color: #007bff; margin-bottom: 20px;">
                    <i class="fas fa-check-circle" style="color: #28a745; margin-right: 10px; font-size: 48px;"></i>
                    <br>${phase} Email Sending Complete!
                </h2>
                
                <div style="font-size: 18px; margin: 20px 0; color: #28a745; font-weight: bold;">
                    ✅ Successfully sent ${sentCount} ${phase} ${titleText} email${sentCount > 1 ? 's' : ''}!
                </div>
                
                ${errorCount > 0 ? `
                <div style="color: #dc3545; margin: 15px 0;">
                    ⚠️ ${errorCount} email${errorCount > 1 ? 's' : ''} failed to send
                </div>` : ''}
                
                <div style="background: linear-gradient(135deg, #d4edda, #c3e6cb); padding: 20px; border-radius: 10px; margin: 20px 0;">
                    <h4 style="color: #155724; margin-top: 0;">📊 Email Summary:</h4>
                    <ul style="color: #155724; text-align: left; margin: 0;">
                        <li><strong>${titleText} emails sent:</strong> ${sentCount}</li>
                        <li><strong>Phase:</strong> ${phase}</li>
                        <li><strong>Status:</strong> ${errorCount === 0 ? 'All emails sent successfully' : 'Some emails failed'}</li>
                    </ul>
                </div>
                
                <div style="background: linear-gradient(135deg, #fff3cd, #ffeaa7); padding: 20px; border-radius: 10px; margin: 20px 0;">
                    <h4 style="color: #856404; margin-top: 0;">📋 Next Step:</h4>
                    <p style="color: #856404; margin: 0;">
                        Click "Proceed to Database Update" below to finalize the ${phase} applicant statuses in your system.
                    </p>
                </div>
                
                <div style="display: flex; justify-content: center; gap: 15px; margin-top: 30px;">
                    <button onclick="cancelEmailProcess()" 
                            style="background: #6c757d; color: white; border: none; padding: 12px 20px; border-radius: 5px; cursor: pointer;">
                        <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
                    </button>
                    <button onclick="showDatabaseUpdateConfirmationModal()" 
                            style="background: linear-gradient(135deg, #28a745, #20c997); color: white; border: none; padding: 12px 25px; border-radius: 5px; cursor: pointer; font-size: 16px;">
                        <i class="fas fa-database" style="margin-right: 8px;"></i>
                        Proceed to Database Update
                    </button>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(completionModal);
    console.log(`✅ SCRATCH MODAL: Completion modal created and displayed for ${phase} ${type}`);
}


// Show email sending progress modal
function showEmailSendingProgress(type, totalCount, phase = 'P1') {
    console.log(`📧 FIXED: Creating progress modal for ${phase} ${type} emails`);
    
    // Remove any existing progress modal
    const existingModal = document.getElementById(`${phase.toLowerCase()}EmailProgressModal`);
    if (existingModal) {
        existingModal.remove();
    }
    
    const progressModal = document.createElement('div');
    progressModal.id = `${phase.toLowerCase()}EmailProgressModal`;
    progressModal.className = 'modal';
    progressModal.style.display = 'block';
    
    const titleText = type === 'passed' ? 
        (phase === 'P3' ? 'Job Offer' : 'Congratulations') : 
        (phase === 'P3' ? 'Final Notification' : 'Notification');
    
    progressModal.innerHTML = `
        <div class="modal-content" style="width: 70%; max-width: 600px;">
            <h2 style="text-align: center; color: #007bff;">
                <i class="fas fa-paper-plane" style="color: #28a745; margin-right: 10px;"></i>
                Sending ${phase} ${titleText} Emails
            </h2>
            
            <div style="margin: 30px 0; text-align: center;">
                <div style="font-size: 48px; color: #28a745; margin-bottom: 20px;">
                    <i class="fas fa-spinner fa-spin"></i>
                </div>
                <p style="font-size: 18px; margin-bottom: 20px;">Sending ${phase} emails to ${totalCount} applicant(s)...</p>
                
                <div style="background-color: #e9ecef; border-radius: 10px; height: 20px; margin: 20px 0; overflow: hidden;">
                    <div id="emailProgressBar" style="background: linear-gradient(135deg, #28a745, #20c997); height: 100%; width: 0%; transition: width 0.3s ease;"></div>
                </div>
                
                <div id="emailProgressText" style="font-size: 14px; color: #6c757d;">
                    Initializing email sending...
                </div>
                
                <div id="emailProgressDetails" style="margin-top: 20px; background-color: #f8f9fa; padding: 15px; border-radius: 5px; text-align: left; max-height: 200px; overflow-y: auto;">
                    <div style="font-weight: bold; margin-bottom: 10px;">📋 Sending Progress:</div>
                    <div id="emailProgressLog"></div>
                </div>
            </div>
            
            <div style="background: linear-gradient(135deg, #fff3cd, #ffeaa7); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #f39c12;">
                <h4 style="color: #856404; margin-top: 0; display: flex; align-items: center;">
                    <i class="fas fa-info-circle" style="margin-right: 10px;"></i>
                    Please Wait
                </h4>
                <p style="color: #856404; margin-bottom: 0; line-height: 1.6;">
                    Emails are being sent automatically. This modal will update when the process is complete.
                </p>
            </div>
            
            <div class="modal-buttons" style="display: none;" id="emailProgressButtons">
                <!-- Buttons will be shown after completion -->
            </div>
        </div>
    `;
    
    document.body.appendChild(progressModal);
    console.log(`📧 FIXED: Progress modal created with ID: ${progressModal.id}`);
}
// ============================
// FIXED: Initialize Email Batch Results
// ============================

// FIXED: Initialize email batch results properly
function initializeEmailBatchResults() {
    if (!window.emailBatchResults) {
        window.emailBatchResults = {
            passed: { sent: 0, failed: 0, errors: [] },
            failed: { sent: 0, failed: 0, errors: [] }
        };
    }
    
    if (!window.p3EmailBatchResults) {
        window.p3EmailBatchResults = {
            passed: { sent: 0, failed: 0, errors: [] },
            failed: { sent: 0, failed: 0, errors: [] }
        };
    }
}

// Send email batch with progress tracking

async function sendEmailBatch(applicants, subject, template, type, phase) {
    console.log(`📧 BATCH FIX: Starting email batch for ${type} (${phase}) - ${applicants.length} applicants`);
    emailSendingInProgress = true;
    
    const progressBar = document.getElementById('emailProgressBar');
    const progressText = document.getElementById('emailProgressText');
    const progressLog = document.getElementById('emailProgressLog');
    
    let sentCount = 0;
    let errorCount = 0;
    const errors = [];
    
    const updateProgress = (current, total, currentApplicant, success) => {
        const percentage = Math.round((current / total) * 100);
        if (progressBar) {
            progressBar.style.width = percentage + '%';
        }
        if (progressText) {
            progressText.textContent = `Sent ${sentCount} of ${total} emails (${errorCount} errors)`;
        }
        
        const status = success ? '✅' : '❌';
        const statusText = success ? 'Sent' : 'Failed';
        if (progressLog) {
            progressLog.innerHTML += `<div style="margin: 2px 0; font-size: 12px;">${status} ${currentApplicant}: ${statusText}</div>`;
            progressLog.scrollTop = progressLog.scrollHeight;
        }
    };
    
    try {
        console.log(`📧 BATCH FIX: Processing ${applicants.length} applicants for ${type} emails`);
        
        for (let i = 0; i < applicants.length; i++) {
            const applicant = applicants[i];
            
            try {
                console.log(`📧 BATCH FIX: Sending email ${i + 1}/${applicants.length} to: ${applicant.email}`);
                
                const response = await fetch('/linemanager/send-automated-email', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        email: applicant.email,
                        subject: subject,
                        template: template,
                        applicantName: applicant.name,
                        jobTitle: applicant.jobTitle,
                        phase: phase,
                        type: type
                    }),
                });
                
                const result = await response.json();
                
                if (result.success) {
                    sentCount++;
                    console.log(`✅ BATCH FIX: Email ${i + 1} sent successfully to ${applicant.email}`);
                    updateProgress(i + 1, applicants.length, applicant.name, true);
                } else {
                    errorCount++;
                    console.error(`❌ BATCH FIX: Email ${i + 1} failed to ${applicant.email}: ${result.message}`);
                    errors.push(`${applicant.name} (${applicant.email}): ${result.message || 'Unknown error'}`);
                    updateProgress(i + 1, applicants.length, applicant.name, false);
                }
                
                // Small delay to avoid overwhelming the server
                await new Promise(resolve => setTimeout(resolve, 500));
                
            } catch (error) {
                console.error(`❌ BATCH FIX: Network error sending email to ${applicant.email}:`, error);
                errorCount++;
                errors.push(`${applicant.name} (${applicant.email}): Network error - ${error.message}`);
                updateProgress(i + 1, applicants.length, applicant.name, false);
            }
        }
        
        console.log(`📧 BATCH FIX: Batch complete - Sent: ${sentCount}, Failed: ${errorCount}`);
        
        // Store results based on phase
        if (phase === 'P3') {
            if (!window.p3EmailBatchResults) {
                window.p3EmailBatchResults = {
                    passed: { sent: 0, failed: 0, errors: [] },
                    failed: { sent: 0, failed: 0, errors: [] }
                };
            }
            window.p3EmailBatchResults[type] = {
                sent: sentCount,
                failed: errorCount,
                errors: errors
            };
        } else {
            if (!window.emailBatchResults) {
                window.emailBatchResults = {
                    passed: { sent: 0, failed: 0, errors: [] },
                    failed: { sent: 0, failed: 0, errors: [] }
                };
            }
            window.emailBatchResults[type] = {
                sent: sentCount,
                failed: errorCount,
                errors: errors
            };
        }
        
        console.log(`📧 BATCH FIX: Results stored for ${phase} ${type}`);
        
        // CRITICAL FIX: Call the correct completion function based on phase
        console.log(`📧 BATCH FIX: Calling completion function for ${type} (${phase})`);
        
        // Add a small delay to ensure all UI updates are complete
        setTimeout(() => {
            showEmailSendingCompletion(sentCount, errorCount, errors, type, phase);
        }, 1000);
        
    } catch (error) {
        console.error('❌ BATCH FIX: Critical error in email batch sending:', error);
        
        // Show error in progress modal
        if (progressText) {
            progressText.innerHTML = `<div style="color: #dc3545; font-weight: bold;">❌ Error: ${error.message}</div>`;
        }
        
        emailSendingInProgress = false;
        
        // Remove progress modal after error
        setTimeout(() => {
            const progressModalId = `${phase.toLowerCase()}EmailProgressModal`;
            const progressModal = document.getElementById(progressModalId);
            if (progressModal) {
                progressModal.remove();
            }
            alert('Critical error sending emails: ' + error.message);
        }, 2000);
    }
}


// Override the existing showEmailSendingCompletion function
function showEmailSendingCompletion(sentCount, errorCount, errors, type, phase) {
    console.log(`📧 COMPLETION OVERRIDE: ${phase} ${type} emails - Sent: ${sentCount}, Errors: ${errorCount}`);
    
    // Update sending state first
    if (type === 'passed') {
        emailSendingState.passedSent = true;
        emailSendingState.currentStep = 'passed-complete';
        emailSendingState.passedResults = { sent: sentCount, failed: errorCount, errors: errors };
    } else {
        emailSendingState.failedSent = true;
        emailSendingState.currentStep = 'failed-complete';
        emailSendingState.failedResults = { sent: sentCount, failed: errorCount, errors: errors };
    }
    
    emailSendingInProgress = false;
    
    // Call the appropriate completion function based on phase
    if (phase === 'P3') {
        showEmailSendingCompletionP3(sentCount, errorCount, errors, type);
    } else {
        showEmailSendingCompletionP1(sentCount, errorCount, errors, type);
    }
}


// 5. ADD: P1 specific completion function
function showEmailSendingCompletionP1(sentCount, errorCount, errors, type) {
    console.log(`📧 P1 COMPLETION FIX: ${type} emails - Sent: ${sentCount}, Errors: ${errorCount}`);
    
    // Find the progress modal - try multiple possible IDs
    let progressModal = document.getElementById('p1EmailProgressModal') || 
                       document.getElementById('emailProgressModal') ||
                       document.querySelector('.modal[style*="display: block"]');
    
    if (!progressModal) {
        console.error('❌ No progress modal found for completion update');
        // Create completion modal from scratch if none found
        createCompletionModalFromScratch(sentCount, errorCount, type, 'P1');
        return;
    }
    
    // Update the modal content
    const progressText = progressModal.querySelector('#emailProgressText') || 
                        progressModal.querySelector('[id*="ProgressText"]') ||
                        progressModal.querySelector('p[style*="font-size: 18px"]');
    
    const progressButtons = progressModal.querySelector('#emailProgressButtons') || 
                           progressModal.querySelector('[id*="ProgressButtons"]') ||
                           progressModal.querySelector('.modal-buttons');
    
    const progressBar = progressModal.querySelector('#emailProgressBar') || 
                       progressModal.querySelector('[id*="ProgressBar"]');
    
    const spinner = progressModal.querySelector('.fa-spinner');
    
    // Hide spinner
    if (spinner) {
        spinner.style.display = 'none';
    }
    
    // Update progress bar to 100%
    if (progressBar) {
        progressBar.style.width = '100%';
        progressBar.style.background = '#28a745';
    }
    
    // Update text
    if (progressText) {
        if (errorCount === 0) {
            progressText.innerHTML = `<div style="color: #28a745; font-weight: bold; font-size: 18px;">✅ All ${sentCount} P1 ${type} emails sent successfully!</div>`;
        } else {
            progressText.innerHTML = `<div style="color: #ffc107; font-weight: bold; font-size: 18px;">⚠️ ${sentCount} P1 ${type} emails sent, ${errorCount} failed</div>`;
        }
    }
    
    // Determine what's next for P1
    const hasPassedApplicants = window.currentPassedApplicants?.length > 0;
    const hasFailedApplicants = window.currentFailedApplicants?.length > 0;
    
    let nextStep = '';
    let nextAction = '';
    
    if (type === 'passed' && hasFailedApplicants && !emailSendingState.failedSent) {
        nextStep = 'Proceed with Notification Emails';
        nextAction = 'proceedWithP1NextStep';
    } else {
        nextStep = 'Proceed to Database Update';
        nextAction = 'showDatabaseUpdateConfirmationModal';
    }
    
    // Update buttons
    if (progressButtons) {
        const buttonHtml = `
            <button class="back-button" onclick="cancelEmailProcess()" style="background: #6c757d; color: white; border: none; padding: 12px 20px; border-radius: 5px; cursor: pointer; margin-right: 10px;">
                <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel Process
            </button>
            <button class="confirm-button" onclick="${nextAction}('${type}')" 
                    style="background: linear-gradient(135deg, #28a745, #20c997); color: white; border: none; padding: 12px 25px; border-radius: 5px; cursor: pointer; font-size: 16px;">
                <i class="fas fa-arrow-right" style="margin-right: 8px;"></i>
                ${nextStep}
            </button>
        `;
        
        progressButtons.innerHTML = buttonHtml;
        progressButtons.style.display = 'flex';
        progressButtons.style.justifyContent = 'center';
        progressButtons.style.gap = '10px';
        progressButtons.style.marginTop = '20px';
    }
    
    console.log(`✅ P1 COMPLETION FIX: Modal updated successfully for ${type}`);
}

// 6. ADD: P1 Next Step Function
function proceedWithP1NextStep(completedType) {
    console.log(`📧 P1 FIX: Proceeding with next step after ${completedType} emails`);
    
    // Close progress modal
    const progressModals = [
        document.getElementById('p1EmailProgressModal'),
        document.getElementById('emailProgressModal'),
        document.querySelector('.modal[style*="display: block"]')
    ].filter(modal => modal !== null);
    
    progressModals.forEach(modal => {
        if (modal) modal.remove();
    });
    
    emailSendingInProgress = false;
    
    // Determine next step for P1
    const hasPassedApplicants = window.currentPassedApplicants?.length > 0;
    const hasFailedApplicants = window.currentFailedApplicants?.length > 0;
    
    if (completedType === 'passed' && hasFailedApplicants && !emailSendingState.failedSent) {
        // Show failed email modal next
        console.log('📧 P1 FIX: Showing failed email modal next');
        setTimeout(() => {
            showFailedEmailModal();
        }, 500);
    } else {
        // Show database update confirmation
        console.log('📧 P1 FIX: Showing database update confirmation');
        setTimeout(() => {
            showDatabaseUpdateConfirmationModal();
        }, 500);
    }
}

window.startP3GmailIntegrationFlow = startP3GmailIntegrationFlow;
window.showEmailSendingCompletionP1 = showEmailSendingCompletionP1;
window.showEmailSendingCompletionP3 = window.showEmailSendingCompletionP3;
window.proceedWithP1NextStep = proceedWithP1NextStep;
window.proceedWithP3NextStep = proceedWithP3NextStep;
window.createCompletionModalFromScratch = createCompletionModalFromScratch;
window.showEmailSendingCompletion = showEmailSendingCompletion;


function showEmailSendingCompletionP3(sentCount, errorCount, errors, type) {
    console.log(`📧 FIXED P3: Email sending completion - ${type} - Sent: ${sentCount}, Errors: ${errorCount}`);
    
    // Update sending state
    if (type === 'passed') {
        emailSendingState.passedSent = true;
        emailSendingState.currentStep = 'passed-complete';
        emailSendingState.passedResults = { sent: sentCount, failed: errorCount, errors: errors };
    } else {
        emailSendingState.failedSent = true;
        emailSendingState.currentStep = 'failed-complete';
        emailSendingState.failedResults = { sent: sentCount, failed: errorCount, errors: errors };
    }
    
    emailSendingInProgress = false;
    
    // Find the progress modal - try multiple possible IDs
    let progressModal = document.getElementById('p3EmailProgressModal') || 
                       document.getElementById('emailProgressModal') ||
                       document.querySelector('.modal[style*="display: block"]');
    
    if (!progressModal) {
        console.error('❌ P3: No progress modal found for completion update');
        createCompletionModalFromScratch(sentCount, errorCount, type, 'P3');
        return;
    }
    
    // Try to update the progress modal
    const progressText = progressModal.querySelector('#emailProgressText') || 
                        progressModal.querySelector('[id*="ProgressText"]') ||
                        progressModal.querySelector('p[style*="font-size: 18px"]');
    
    const progressButtons = progressModal.querySelector('#emailProgressButtons') || 
                           progressModal.querySelector('[id*="ProgressButtons"]') ||
                           progressModal.querySelector('.modal-buttons');
    
    const progressBar = progressModal.querySelector('#emailProgressBar') || 
                       progressModal.querySelector('[id*="ProgressBar"]');
    
    const spinner = progressModal.querySelector('.fa-spinner');
    
    // Hide spinner
    if (spinner) {
        spinner.style.display = 'none';
    }
    
    // Update progress bar to 100%
    if (progressBar) {
        progressBar.style.width = '100%';
        progressBar.style.background = '#28a745';
    }
    
    if (progressText && progressButtons) {
        console.log(`📧 FIXED P3: Updating progress modal normally`);
        
        // Update text
        if (errorCount === 0) {
            progressText.innerHTML = `<div style="color: #28a745; font-weight: bold; font-size: 18px;">✅ All ${sentCount} P3 ${type} emails sent successfully!</div>`;
        } else {
            progressText.innerHTML = `<div style="color: #ffc107; font-weight: bold; font-size: 18px;">⚠️ ${sentCount} P3 ${type} emails sent, ${errorCount} failed</div>`;
        }
        
        // Determine what's next
        const hasPassedApplicants = window.currentP3PassedApplicants?.length > 0;
        const hasFailedApplicants = window.currentP3FailedApplicants?.length > 0;
        
        let nextStep = '';
        let nextAction = '';
        
        if (type === 'passed' && hasFailedApplicants && !emailSendingState.failedSent) {
            nextStep = 'Proceed with Final Notification Emails';
            nextAction = 'proceedWithP3NextStep';
        } else {
            nextStep = 'Proceed to Database Update';
            nextAction = 'showP3DatabaseUpdateConfirmationModal';
        }
        
        // Update buttons
        const buttonHtml = `
            <button class="back-button" onclick="cancelEmailProcess()" style="background: #6c757d; color: white; border: none; padding: 12px 20px; border-radius: 5px; cursor: pointer; margin-right: 10px;">
                <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel Process
            </button>
            <button class="confirm-button" onclick="${nextAction}('${type}')" 
                    style="background: linear-gradient(135deg, #28a745, #20c997); color: white; border: none; padding: 12px 25px; border-radius: 5px; cursor: pointer; font-size: 16px;">
                <i class="fas fa-arrow-right" style="margin-right: 8px;"></i>
                ${nextStep}
            </button>
        `;
        
        progressButtons.innerHTML = buttonHtml;
        progressButtons.style.display = 'flex';
        progressButtons.style.justifyContent = 'center';
        progressButtons.style.gap = '10px';
        progressButtons.style.marginTop = '20px';
        
        console.log(`✅ FIXED P3: Progress modal updated successfully`);
    } else {
        console.log(`📧 FIXED P3: Using scratch modal method`);
        createCompletionModalFromScratch(sentCount, errorCount, type, 'P3');
    }
}
// 9. FIXED: Proceed with P3 Next Step
function proceedWithP3NextStep(completedType) {
    console.log(`📧 FIXED P3: Proceeding with next step after ${completedType} emails`);
    
    // Close progress modal
    const progressModals = [
        document.getElementById('p3EmailProgressModal'),
        document.getElementById('emailProgressModal'),
        document.querySelector('.modal[style*="display: block"]')
    ].filter(modal => modal !== null);
    
    progressModals.forEach(modal => {
        if (modal) modal.remove();
    });
    
    emailSendingInProgress = false;
    
    // Determine next step
    const hasPassedApplicants = window.currentP3PassedApplicants?.length > 0;
    const hasFailedApplicants = window.currentP3FailedApplicants?.length > 0;
    
    if (completedType === 'passed' && hasFailedApplicants && !emailSendingState.failedSent) {
        // Show failed email modal next
        console.log('📧 FIXED P3: Showing failed email modal next');
        setTimeout(() => {
            showP3FailedEmailModal();
        }, 500);
    } else {
        // Show database update confirmation
        console.log('📧 FIXED P3: Showing database update confirmation');
        setTimeout(() => {
            showP3DatabaseUpdateConfirmationModal();
        }, 500);
    }
}

// 10. FIXED: Show P3 Database Update Confirmation Modal
function showP3DatabaseUpdateConfirmationModal() {
    console.log('📧 FIXED P3: Showing P3 database update confirmation modal');
    
    const updateModal = document.createElement('div');
    updateModal.className = 'modal';
    updateModal.style.display = 'block';
    updateModal.id = 'p3DatabaseUpdateConfirmationModal';
    
    const passedResults = emailSendingState.passedResults || { sent: 0, failed: 0 };
    const failedResults = emailSendingState.failedResults || { sent: 0, failed: 0 };
    const totalSent = passedResults.sent + failedResults.sent;
    const totalErrors = passedResults.failed + failedResults.failed;
    
    updateModal.innerHTML = `
        <div class="modal-content" style="width: 70%; max-width: 600px;">
            <h2 style="text-align: center; color: #007bff;">
                <i class="fas fa-database" style="color: #28a745; margin-right: 10px;"></i>
                P3 Email Process Complete - Ready for Database Update
            </h2>
            
            <div style="margin: 30px 0; text-align: center;">
                <div style="font-size: 64px; color: #28a745; margin-bottom: 20px;">
                    <i class="fas fa-check-double"></i>
                </div>
                <p style="font-size: 18px; margin-bottom: 20px;">
                    All P3 emails have been sent successfully!
                </p>
                
                <!-- FIXED: Complete progress indicator -->
                <div style="background: linear-gradient(135deg, #e8f5e8, #c8e6c8); padding: 15px; border-radius: 8px; margin: 15px 0; border-left: 5px solid #4caf50;">
                    <h4 style="color: #2e7d32; margin-top: 0; display: flex; align-items: center;">
                        <i class="fas fa-route" style="margin-right: 10px;"></i>
                        P3 Email Process - COMPLETED
                    </h4>
                    <div style="display: flex; align-items: center; color: #2e7d32;">
                        <div style="flex: 1; text-align: center; padding: 8px; background: #4caf50; color: white; border-radius: 4px; margin: 0 2px;">
                            ✅ Step 1: Job Offer Emails
                        </div>
                        <div style="flex: 1; text-align: center; padding: 8px; background: #4caf50; color: white; border-radius: 4px; margin: 0 2px;">
                            ✅ Step 2: Final Notification Emails
                        </div>
                        <div style="flex: 1; text-align: center; padding: 8px; background: #ffc107; color: #212529; border-radius: 4px; margin: 0 2px;">
                            ⏳ Step 3: Database Update
                        </div>
                    </div>
                </div>
                
                <div style="background-color: #d4edda; padding: 20px; border-radius: 10px; margin: 20px 0; text-align: left;">
                    <h4 style="color: #155724; margin-top: 0;">📊 Complete P3 Email Summary:</h4>
                    <ul style="color: #155724; margin-bottom: 0;">
                        ${emailSendingState.passedSent ? `<li><strong>Job offer emails sent:</strong> ${passedResults.sent}</li>` : ''}
                        ${emailSendingState.failedSent ? `<li><strong>Final notification emails sent:</strong> ${failedResults.sent}</li>` : ''}
                        <li><strong>Total P3 emails processed:</strong> ${totalSent}</li>
                        ${totalErrors > 0 ? `<li style="color: #dc3545;"><strong>Total sending errors:</strong> ${totalErrors}</li>` : ''}
                    </ul>
                </div>
            </div>
            
            <div style="background: linear-gradient(135deg, #fff3cd, #ffeaa7); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #f39c12;">
                <h4 style="color: #856404; margin-top: 0; display: flex; align-items: center;">
                    <i class="fas fa-exclamation-triangle" style="margin-right: 10px;"></i>
                    Final Step Required
                </h4>
                <p style="color: #856404; margin-bottom: 0; line-height: 1.6;">
                    Click "Update P3 Database" below to finalize the P3 applicant statuses in your system. This will mark all passed and failed applicants accordingly.
                </p>
            </div>
            
            <div class="modal-buttons">
                <button class="back-button" onclick="closeModal('p3DatabaseUpdateConfirmationModal')">
                    <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
                </button>
                <button class="confirm-button" onclick="executeP3DatabaseUpdate()" 
                        style="background: linear-gradient(135deg, #28a745, #20c997); font-size: 16px; padding: 12px 25px;">
                    <i class="fas fa-database" style="margin-right: 8px;"></i>
                    Update P3 Database
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(updateModal);
    console.log('📧 FIXED P3: P3 database update confirmation modal displayed');
}

// Finish email process and proceed to database update
function finishEmailProcess(phase = 'P1') {
    const progressModal = document.getElementById(`${phase.toLowerCase()}EmailProgressModal`);
    if (progressModal) {
        progressModal.remove();
    }
    
    // Determine which variables to check based on phase
    const resultsTarget = phase === 'P3' ? window.p3EmailBatchResults : emailBatchResults;
    const passedApplicants = phase === 'P3' ? window.currentP3PassedApplicants : window.currentPassedApplicants;
    const failedApplicants = phase === 'P3' ? window.currentP3FailedApplicants : window.currentFailedApplicants;
    
    // Check if we need to process more emails
    if (passedApplicants?.length > 0 && !resultsTarget.passed.sent && !resultsTarget.passed.failed) {
        // Haven't processed passed emails yet
        return;
    }
    
    if (failedApplicants?.length > 0 && !resultsTarget.failed.sent && !resultsTarget.failed.failed) {
        // Need to process failed emails
        if (phase === 'P3') {
            showP3FailedEmailModal();
        } else {
            showFailedEmailModal();
        }
        return;
    }
    
    // All emails processed, show database update modal
    showDatabaseUpdateModal(phase);
}

// Show database update modal
function showDatabaseUpdateModal(phase = 'P1') {
    const updateModal = document.createElement('div');
    updateModal.className = 'modal';
    updateModal.style.display = 'block';
    
    const resultsTarget = phase === 'P3' ? window.p3EmailBatchResults : emailBatchResults;
    const totalSent = resultsTarget.passed.sent + resultsTarget.failed.sent;
    const totalErrors = resultsTarget.passed.failed + resultsTarget.failed.failed;
    
    updateModal.innerHTML = `
        <div class="modal-content" style="width: 70%; max-width: 600px;">
            <h2 style="text-align: center; color: #007bff;">
                <i class="fas fa-database" style="color: #28a745; margin-right: 10px;"></i>
                ${phase} Email Sending Complete
            </h2>
            
            <div style="margin: 30px 0; text-align: center;">
                <div style="font-size: 64px; color: #28a745; margin-bottom: 20px;">
                    <i class="fas fa-check-circle"></i>
                </div>
                <p style="font-size: 18px; margin-bottom: 20px;">${phase} email sending process completed!</p>
                
                <div style="background-color: #d4edda; padding: 20px; border-radius: 10px; margin: 20px 0; text-align: left;">
                    <h4 style="color: #155724; margin-top: 0;">📊 ${phase} Sending Summary:</h4>
                    <ul style="color: #155724; margin-bottom: 0;">
                        <li><strong>Total emails sent:</strong> ${totalSent}</li>
                        <li><strong>${phase} passed applicants notified:</strong> ${resultsTarget.passed.sent}</li>
                        <li><strong>${phase} failed applicants notified:</strong> ${resultsTarget.failed.sent}</li>
                        ${totalErrors > 0 ? `<li style="color: #dc3545;"><strong>Sending errors:</strong> ${totalErrors}</li>` : ''}
                    </ul>
                </div>
            </div>
            
            <div style="background: linear-gradient(135deg, #fff3cd, #ffeaa7); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #f39c12;">
                <h4 style="color: #856404; margin-top: 0; display: flex; align-items: center;">
                    <i class="fas fa-exclamation-triangle" style="margin-right: 10px;"></i>
                    Final Step
                </h4>
                <p style="color: #856404; margin-bottom: 0; line-height: 1.6;">
                    Click "Update Database" below to finalize the ${phase} applicant statuses in your system.
                </p>
            </div>
            
            <div class="modal-buttons">
                <button class="back-button" onclick="this.closest('.modal').remove()">
                    <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
                </button>
                <button class="confirm-button" onclick="updateApplicantStatusesAutomated('${phase}')" 
                        style="background: linear-gradient(135deg, #28a745, #20c997); font-size: 16px; padding: 12px 25px;">
                    <i class="fas fa-database" style="margin-right: 8px;"></i>
                    Update ${phase} Database
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(updateModal);
}
// Update applicant statuses after automated email sending
function updateApplicantStatusesAutomated() {
    const isP3 = window.location.pathname.includes('p3') || window.currentP3PassedApplicants?.length > 0;
    
    const emailsToUpdate = isP3 ? window.p3EmailsToUpdate : window.emailsToUpdate;
    
    if (!emailsToUpdate || (!emailsToUpdate.passed.length && !emailsToUpdate.failed.length)) {
        alert('No applicant status updates to process.');
        return;
    }
    
    const updateButton = event.target;
    const originalText = updateButton.textContent;
    updateButton.textContent = 'Updating Database...';
    updateButton.disabled = true;
    
    const endpoint = isP3 ? '/linemanager/applicant-tracker-jobposition/updateP3Statuses' : '/linemanager/applicant-tracker-jobposition/updateP1Statuses';
    
    fetch(endpoint, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            passedUserIds: emailsToUpdate.passed,
            failedUserIds: emailsToUpdate.failed
        }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Close modal
            event.target.closest('.modal').remove();
            
            alert(`Applicant statuses updated successfully!\n\nUpdated:\n- ${data.passedUpdated || 0} passed applicants\n- ${data.failedUpdated || 0} failed applicants\n\nEmails sent:\n- ${emailBatchResults.passed.sent} congratulations emails\n- ${emailBatchResults.failed.sent} notification emails`);
            
            // Clear data
            if (isP3) {
                window.currentP3PassedApplicants = [];
                window.currentP3FailedApplicants = [];
                window.p3EmailsToUpdate = { passed: [], failed: [] };
            } else {
                window.currentPassedApplicants = [];
                window.currentFailedApplicants = [];
                window.emailsToUpdate = { passed: [], failed: [] };
            }
            
            // Reset batch results
            emailBatchResults = {
                passed: { sent: 0, failed: 0, errors: [] },
                failed: { sent: 0, failed: 0, errors: [] }
            };
            
            // Refresh view
            setTimeout(() => {
                const activeFilter = document.querySelector(".filter-button.active");
                if (activeFilter) {
                    activeFilter.click();
                } else {
                    document.getElementById("filter-all").click();
                }
            }, 500);
        } else {
            throw new Error(data.message || 'Failed to update statuses');
        }
    })
    .catch(error => {
        console.error('Error updating statuses:', error);
        alert('Error updating applicant statuses: ' + error.message);
        
        updateButton.textContent = originalText;
        updateButton.disabled = false;
    });
}

window.createEmailModalDynamically = createEmailModalDynamically;
window.showPassedEmailModal = showPassedEmailModal;
window.showFailedEmailModal = showFailedEmailModal;
window.previewEmailTemplate = previewEmailTemplate;
window.sendAutomatedEmails = sendAutomatedEmails;
window.finishEmailProcess = finishEmailProcess;
window.updateApplicantStatusesAutomated = updateApplicantStatusesAutomated;

window.startGmailIntegrationFlow = startGmailIntegrationFlow;
window.openGmailForPassed = openGmailForPassed;
window.openGmailForFailed = openGmailForFailed;
window.updateApplicantStatuses = updateApplicantStatuses;

console.log('✅ FIXED: Email batch sending function with proper completion handling loaded');
console.log('✅ Enhanced Email Modal with Automated Sending loaded successfully');

// P3 Passed Email Modal
function showP3PassedEmailModal() {
    console.log("📧 FIXED P3: Showing P3 passed applicants email modal with progress steps");
    
    // Remove existing modal if it exists
    const existingModal = document.getElementById('emailP3PassedModal');
    if (existingModal) {
        existingModal.remove();
    }
    
    const modal = document.createElement('div');
    modal.id = 'emailP3PassedModal';
    modal.className = 'modal';
    modal.style.display = 'block';
    
    modal.innerHTML = `
        <div class="modal-content" style="width: 85%; max-width: 900px;">
            <span class="close-button" onclick="closeModal('emailP3PassedModal')">&times;</span>
            <h2 style="color: #28a745;">✅ P3 Gmail Compose - Job Offer Email</h2>
            
            <!-- FIXED: Progress Indicator for P3 -->
            <div style="background: linear-gradient(135deg, #e3f2fd, #bbdefb); padding: 15px; border-radius: 8px; margin: 15px 0; border-left: 5px solid #2196f3;">
                <h4 style="color: #1976d2; margin-top: 0; display: flex; align-items: center;">
                    <i class="fas fa-route" style="margin-right: 10px;"></i>
                    P3 Email Process Progress
                </h4>
                <div style="display: flex; align-items: center; color: #1976d2;">
                    <div class="progress-step active" style="flex: 1; text-align: center; padding: 8px; background: #4caf50; color: white; border-radius: 4px; margin: 0 2px;">
                        🟢 Step 1: Job Offer Emails
                    </div>
                    <div class="progress-step pending" style="flex: 1; text-align: center; padding: 8px; background: #e0e0e0; color: #666; border-radius: 4px; margin: 0 2px;">
                        ⚪ Step 2: Final Notification Emails
                    </div>
                    <div class="progress-step pending" style="flex: 1; text-align: center; padding: 8px; background: #e0e0e0; color: #666; border-radius: 4px; margin: 0 2px;">
                        ⚪ Step 3: Database Update
                    </div>
                </div>
            </div>
            
            <div style="background-color: #d4edda; padding: 20px; border-radius: 8px; margin: 20px 0;">
                <h4 style="color: #155724; margin-top: 0; display: flex; align-items: center;">
                    <i class="fas fa-users" style="margin-right: 10px;"></i>
                    Recipients (<span id="p3PassedRecipientsCount">0</span> applicants):
                </h4>
                <div id="p3PassedRecipientsList" style="color: #155724; max-height: 180px; overflow-y: auto; background: rgba(255,255,255,0.3); padding: 15px; border-radius: 5px;">
                    <!-- Will be populated dynamically -->
                </div>
            </div>
            
            <div style="margin: 25px 0;">
                <label for="p3PassedEmailSubject" style="display: block; font-weight: bold; margin-bottom: 8px;">
                    <i class="fas fa-tag" style="margin-right: 8px;"></i>Email Subject:
                </label>
                <input 
                    type="text" 
                    id="p3PassedEmailSubject" 
                    style="width: 100%; padding: 12px; border: 2px solid #28a745; border-radius: 6px; font-size: 16px;"
                    value="Congratulations! Job Offer - Company ABC"
                >
            </div>
            
            <div style="margin: 25px 0;">
                <label for="p3PassedEmailTemplate" style="display: block; font-weight: bold; margin-bottom: 8px;">
                    <i class="fas fa-edit" style="margin-right: 8px;"></i>Email Template:
                </label>
                <div style="margin: 10px 0; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
                    <small style="color: #6c757d;">
                        <strong>Available placeholders:</strong> 
                        <code>{applicantName}</code>, <code>{jobTitle}</code>, <code>{companyName}</code>
                    </small>
                </div>
                <textarea 
                    id="p3PassedEmailTemplate" 
                    rows="14" 
                    style="width: 100%; padding: 15px; border: 2px solid #28a745; border-radius: 6px; font-family: Arial, sans-serif; font-size: 14px; line-height: 1.5;"
                    placeholder="Email template will be loaded here..."
                ></textarea>
            </div>

            <div style="background: linear-gradient(135deg, #e7f3ff, #f0f8ff); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #007bff;">
                <h4 style="color: #0066cc; margin-top: 0; display: flex; align-items: center;">
                    <i class="fas fa-magic" style="margin-right: 10px; font-size: 20px;"></i>
                    Choose Your Sending Method
                </h4>
                <p style="color: #0066cc; margin-bottom: 0; line-height: 1.6;">
                    • <strong>Gmail Compose:</strong> Opens Gmail with pre-filled content (manual sending)<br>
                    • <strong>Preview & Edit:</strong> Review template before automatic sending<br>
                    • <strong>Send Automatically:</strong> Sends all emails via SMTP instantly
                </p>
            </div>
            
            <div class="modal-buttons">
                <button class="back-button" onclick="closeModal('emailP3PassedModal')">
                    <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
                </button>
                <button class="confirm-button" onclick="openGmailForP3Passed()" 
                        style="background: linear-gradient(135deg, #6c757d, #5a6268); margin-right: 10px;">
                    <i class="fab fa-google" style="margin-right: 8px;"></i>Gmail Compose
                </button>
                <button class="confirm-button" onclick="previewP3EmailTemplate('passed')" 
                        style="background: linear-gradient(135deg, #17a2b8, #138496); margin-right: 10px;">
                    <i class="fas fa-eye" style="margin-right: 8px;"></i>Preview & Edit
                </button>
                <button class="confirm-button" onclick="sendAutomatedP3Emails('passed')" 
                        style="background: linear-gradient(135deg, #28a745, #20c997);" id="sendP3PassedEmailsBtn">
                    <i class="fas fa-paper-plane" style="margin-right: 8px;"></i>Send Automatically
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // Populate recipients list
    const recipientsList = document.getElementById('p3PassedRecipientsList');
    const recipientsCount = document.getElementById('p3PassedRecipientsCount');
    
    if (recipientsList && window.currentP3PassedApplicants && window.currentP3PassedApplicants.length > 0) {
        recipientsCount.textContent = window.currentP3PassedApplicants.length;
        
        recipientsList.innerHTML = window.currentP3PassedApplicants.map(applicant => `
            <div class="recipient-item" style="padding: 8px; border-bottom: 1px solid #e0e0e0;">
                <div>
                    <div class="recipient-name" style="font-weight: bold; color: #28a745;">${applicant.name}</div>
                    <div class="recipient-email" style="font-size: 12px; color: #666;">${applicant.email}</div>
                    <div class="recipient-job" style="font-size: 12px; color: #28a745; margin-top: 4px;">${applicant.jobTitle}</div>
                </div>
            </div>
        `).join('');
    }
    
    // Set templates from P3 emailService
    const templates = window.p3EmailTemplates || {};
    const subjectField = document.getElementById('p3PassedEmailSubject');
    const templateField = document.getElementById('p3PassedEmailTemplate');
    
    if (subjectField) {
        subjectField.value = templates.passed?.subject || 'Congratulations! Job Offer - Company ABC';
    }
    
    if (templateField) {
        templateField.value = templates.passed?.template || `Dear {applicantName},

🎉 Congratulations! We are thrilled to extend a job offer for the {jobTitle} position at {companyName}.

After careful consideration of all candidates throughout our comprehensive interview process, we believe you are the perfect fit for our team and organization.

📋 Your Job Offer Details:
• Position: {jobTitle}
• Company: {companyName}
• Status: Job Offer Extended
• Next Steps: Please log into your applicant portal to review and respond to the offer

We were particularly impressed with your performance during the final interview stage, and we're excited about the unique skills and perspective you'll bring to our team.

🚀 What's Next?
• Check your applicant portal for detailed offer information
• Review the complete compensation package and benefits
• Respond to the offer within the specified timeframe
• Prepare for an exciting journey with {companyName}

We're excited to welcome you to the {companyName} family and look forward to your contribution to our continued success.

Congratulations once again!

Warm regards,
The {companyName} Recruitment Team`;
    }
    
    console.log("📧 FIXED P3: P3 passed email modal displayed with recipients and templates");
}

// 3. FIXED: P3 Failed Email Modal with proper step progress
function showP3FailedEmailModal() {
    console.log("📧 FIXED P3: Showing P3 failed applicants email modal with progress steps");
    
    // Remove existing modal if it exists
    const existingModal = document.getElementById('emailP3FailedModal');
    if (existingModal) {
        existingModal.remove();
    }
    
    const modal = document.createElement('div');
    modal.id = 'emailP3FailedModal';
    modal.className = 'modal';
    modal.style.display = 'block';
    
    const stepText = window.currentP3PassedApplicants?.length > 0 ? "Step 2" : "Step 1";
    
    modal.innerHTML = `
        <div class="modal-content" style="width: 85%; max-width: 900px;">
            <span class="close-button" onclick="closeModal('emailP3FailedModal')">&times;</span>
            <h2 style="color: #dc3545;">❌ P3 Gmail Compose - Final Notification Email</h2>
            
            <!-- FIXED: Progress Indicator for P3 -->
            <div style="background: linear-gradient(135deg, #e3f2fd, #bbdefb); padding: 15px; border-radius: 8px; margin: 15px 0; border-left: 5px solid #2196f3;">
                <h4 style="color: #1976d2; margin-top: 0; display: flex; align-items: center;">
                    <i class="fas fa-route" style="margin-right: 10px;"></i>
                    P3 Email Process Progress
                </h4>
                <div style="display: flex; align-items: center; color: #1976d2;">
                    <div class="progress-step ${window.currentP3PassedApplicants?.length > 0 ? 'completed' : 'pending'}" style="flex: 1; text-align: center; padding: 8px; background: ${window.currentP3PassedApplicants?.length > 0 ? '#4caf50' : '#e0e0e0'}; color: ${window.currentP3PassedApplicants?.length > 0 ? 'white' : '#666'}; border-radius: 4px; margin: 0 2px;">
                        ${window.currentP3PassedApplicants?.length > 0 ? '✅' : '⚪'} Step 1: Job Offer Emails
                    </div>
                    <div class="progress-step active" style="flex: 1; text-align: center; padding: 8px; background: #4caf50; color: white; border-radius: 4px; margin: 0 2px;">
                        🟢 ${stepText}: Final Notification Emails
                    </div>
                    <div class="progress-step pending" style="flex: 1; text-align: center; padding: 8px; background: #e0e0e0; color: #666; border-radius: 4px; margin: 0 2px;">
                        ⚪ Step 3: Database Update
                    </div>
                </div>
            </div>
            
            <div style="background-color: #f8d7da; padding: 20px; border-radius: 8px; margin: 20px 0;">
                <h4 style="color: #721c24; margin-top: 0; display: flex; align-items: center;">
                    <i class="fas fa-users" style="margin-right: 10px;"></i>
                    Recipients (<span id="p3FailedRecipientsCount">0</span> applicants):
                </h4>
                <div id="p3FailedRecipientsList" style="color: #721c24; max-height: 180px; overflow-y: auto; background: rgba(255,255,255,0.3); padding: 15px; border-radius: 5px;">
                    <!-- Will be populated dynamically -->
                </div>
            </div>
            
            <div style="margin: 25px 0;">
                <label for="p3FailedEmailSubject" style="display: block; font-weight: bold; margin-bottom: 8px;">
                    <i class="fas fa-tag" style="margin-right: 8px;"></i>Email Subject:
                </label>
                <input 
                    type="text" 
                    id="p3FailedEmailSubject" 
                    style="width: 100%; padding: 12px; border: 2px solid #dc3545; border-radius: 6px; font-size: 16px;"
                    value="Thank You for Your Interest - Interview Process Complete"
                >
            </div>
            
            <div style="margin: 25px 0;">
                <label for="p3FailedEmailTemplate" style="display: block; font-weight: bold; margin-bottom: 8px;">
                    <i class="fas fa-edit" style="margin-right: 8px;"></i>Email Template:
                </label>
                <div style="margin: 10px 0; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
                    <small style="color: #6c757d;">
                        <strong>Available placeholders:</strong> 
                        <code>{applicantName}</code>, <code>{jobTitle}</code>, <code>{companyName}</code>
                    </small>
                </div>
                <textarea 
                    id="p3FailedEmailTemplate" 
                    rows="14" 
                    style="width: 100%; padding: 15px; border: 2px solid #dc3545; border-radius: 6px; font-family: Arial, sans-serif; font-size: 14px; line-height: 1.5;"
                    placeholder="Email template will be loaded here..."
                ></textarea>
            </div>

            <div style="background: linear-gradient(135deg, #e7f3ff, #f0f8ff); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #007bff;">
                <h4 style="color: #0066cc; margin-top: 0; display: flex; align-items: center;">
                    <i class="fas fa-magic" style="margin-right: 10px; font-size: 20px;"></i>
                    Choose Your Sending Method
                </h4>
                <p style="color: #0066cc; margin-bottom: 0; line-height: 1.6;">
                    • <strong>Gmail Compose:</strong> Opens Gmail with pre-filled content (manual sending)<br>
                    • <strong>Preview & Edit:</strong> Review template before automatic sending<br>
                    • <strong>Send Automatically:</strong> Sends all emails via SMTP instantly
                </p>
            </div>
            
            <div class="modal-buttons">
                <button class="back-button" onclick="closeModal('emailP3FailedModal')">
                    <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
                </button>
                <button class="confirm-button" onclick="openGmailForP3Failed()" 
                        style="background: linear-gradient(135deg, #6c757d, #5a6268); margin-right: 10px;">
                    <i class="fab fa-google" style="margin-right: 8px;"></i>Gmail Compose
                </button>
                <button class="confirm-button" onclick="previewP3EmailTemplate('failed')" 
                        style="background: linear-gradient(135deg, #17a2b8, #138496); margin-right: 10px;">
                    <i class="fas fa-eye" style="margin-right: 8px;"></i>Preview & Edit
                </button>
                <button class="confirm-button" onclick="sendAutomatedP3Emails('failed')" 
                        style="background: linear-gradient(135deg, #dc3545, #c82333);" id="sendP3FailedEmailsBtn">
                    <i class="fas fa-paper-plane" style="margin-right: 8px;"></i>Send Automatically (${stepText})
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // Populate recipients list
    const recipientsList = document.getElementById('p3FailedRecipientsList');
    const recipientsCount = document.getElementById('p3FailedRecipientsCount');
    
    if (recipientsList && window.currentP3FailedApplicants && window.currentP3FailedApplicants.length > 0) {
        recipientsCount.textContent = window.currentP3FailedApplicants.length;
        
        recipientsList.innerHTML = window.currentP3FailedApplicants.map(applicant => `
            <div class="recipient-item" style="padding: 8px; border-bottom: 1px solid #e0e0e0;">
                <div>
                    <div class="recipient-name" style="font-weight: bold; color: #dc3545;">${applicant.name}</div>
                    <div class="recipient-email" style="font-size: 12px; color: #666;">${applicant.email}</div>
                    <div class="recipient-job" style="font-size: 12px; color: #dc3545; margin-top: 4px;">${applicant.jobTitle}</div>
                </div>
            </div>
        `).join('');
    }
    
    // Set templates from P3 emailService
    const templates = window.p3EmailTemplates || {};
    const subjectField = document.getElementById('p3FailedEmailSubject');
    const templateField = document.getElementById('p3FailedEmailTemplate');
    
    if (subjectField) {
        subjectField.value = templates.failed?.subject || 'Thank You for Your Interest - Interview Process Complete';
    }
    
    if (templateField) {
        templateField.value = templates.failed?.template || `Dear {applicantName},

Thank you for participating in our comprehensive interview process for the {jobTitle} position at {companyName}, including your final interview with our senior management team.

We want to express our sincere appreciation for the time, effort, and enthusiasm you demonstrated throughout our entire recruitment process. Your professionalism and the thoughtful responses you provided during all stages of our interviews were truly impressive.

After extensive deliberation and careful consideration of all candidates, we have made the difficult decision to extend an offer to another candidate whose background and experience align slightly more closely with our current specific requirements for this role.

Please know that this decision was particularly challenging for our team. You demonstrated excellent qualifications, strong technical skills, and would undoubtedly be a valuable addition to any organization.

🌟 Moving Forward:
• Your application details will remain in our talent database for future opportunities
• We may contact you if a suitable position becomes available
• Please feel free to apply for other positions that align with your skills
• Follow our careers page for new openings that might be an excellent fit

We strongly encourage you to apply for future positions with us that align with your career goals and expertise. We believe you have much to offer and would welcome the opportunity to consider you for other roles.

Thank you again for your interest in {companyName} and for the professionalism you demonstrated throughout our process. We wish you tremendous success in your career journey.

Best regards,
The {companyName} Recruitment Team`;
    }
    
    console.log("📧 FIXED P3: P3 failed email modal displayed with recipients and templates");
}

// FIXED: Debug function to inspect modal state
function debugModalState() {
    console.log(`🔍 MODAL DEBUG: Starting modal state inspection`);
    
    const allModals = document.querySelectorAll('.modal');
    console.log(`🔍 MODAL DEBUG: Found ${allModals.length} modals`);
    
    allModals.forEach((modal, index) => {
        console.log(`🔍 MODAL DEBUG: Modal ${index + 1}:`);
        console.log(`  - ID: ${modal.id}`);
        console.log(`  - Display: ${modal.style.display}`);
        console.log(`  - Classes: ${modal.className}`);
        console.log(`  - Visible: ${modal.offsetParent !== null}`);
        
        const progressText = modal.querySelector('#emailProgressText, [id*="ProgressText"]');
        if (progressText) {
            console.log(`  - Progress text: ${progressText.textContent}`);
        }
        
        const progressButtons = modal.querySelector('#emailProgressButtons, [id*="ProgressButtons"], .modal-buttons');
        if (progressButtons) {
            console.log(`  - Buttons display: ${progressButtons.style.display}`);
            console.log(`  - Buttons content: ${progressButtons.innerHTML.length > 0 ? 'Has content' : 'Empty'}`);
        }
    });
}

// FIXED: Manual completion trigger for testing
function manualCompletionTrigger() {
    console.log(`🔧 MANUAL: Triggering manual completion`);
    debugModalState();
    
    setTimeout(() => {
        forceModalUpdate(1, 0, [], 'passed', 'P1');
    }, 100);
}


// Send automated P3 emails
async function sendAutomatedP3Emails(type) {
    if (emailSendingInProgress) {
        alert('Email sending is already in progress. Please wait.');
        return;
    }

    console.log(`📧 FIXED P3: Starting automated P3 email sending for: ${type}`);

    // Set the phase to P3
    emailSendingState.phase = 'P3';

    let applicants, subject, template;
    let subjectId, templateId;

    if (type === 'passed') {
        subjectId = 'p3PassedEmailSubject';
        templateId = 'p3PassedEmailTemplate';
        applicants = window.currentP3PassedApplicants;
    } else if (type === 'failed') {
        subjectId = 'p3FailedEmailSubject';
        templateId = 'p3FailedEmailTemplate';
        applicants = window.currentP3FailedApplicants;
    }

    const subjectElement = document.getElementById(subjectId);
    const templateElement = document.getElementById(templateId);

    if (!subjectElement || !templateElement) {
        console.error(`❌ FIXED P3: Missing elements for automated sending: subject=${subjectId}, template=${templateId}`);
        alert('Error: Could not find P3 email template fields. Please try refreshing the page.');
        return;
    }

    subject = subjectElement.value;
    template = templateElement.value;

    if (!applicants || applicants.length === 0) {
        alert(`No P3 ${type} applicants found to send emails to.`);
        return;
    }

    if (!subject || !template) {
        alert('Please fill in both subject and template fields.');
        return;
    }

    if (!confirm(`This will automatically send ${applicants.length} P3 emails to ${type} applicants. Continue?`)) {
        return;
    }

    console.log(`📧 FIXED P3: Confirmed sending ${applicants.length} P3 ${type} emails`);

    // Close current modal
    const modalMap = {
        'passed': 'emailP3PassedModal',
        'failed': 'emailP3FailedModal'
    };

    closeModal(modalMap[type]);

    // Show progress modal
    showEmailSendingProgress(type, applicants.length, 'P3');

    // Send emails using the fixed batch function
    await sendEmailBatch(applicants, subject, template, type, 'P3');
}

// Show P3 email sending progress modal
function showP3EmailSendingProgress(type, totalCount) {
    const progressModal = document.createElement('div');
    progressModal.id = 'p3EmailProgressModal';
    progressModal.className = 'modal';
    progressModal.style.display = 'block';
    progressModal.innerHTML = `
        <div class="modal-content" style="width: 70%; max-width: 600px;">
            <h2 style="text-align: center; color: #007bff;">
                <i class="fas fa-paper-plane" style="color: #28a745; margin-right: 10px;"></i>
                Sending P3 ${type === 'passed' ? 'Job Offer' : 'Notification'} Emails
            </h2>
            
            <div style="margin: 30px 0; text-align: center;">
                <div style="font-size: 48px; color: #28a745; margin-bottom: 20px;">
                    <i class="fas fa-spinner fa-spin"></i>
                </div>
                <p style="font-size: 18px; margin-bottom: 20px;">Sending P3 emails to ${totalCount} applicant(s)...</p>
                
                <div style="background-color: #e9ecef; border-radius: 10px; height: 20px; margin: 20px 0; overflow: hidden;">
                    <div id="p3EmailProgressBar" style="background: linear-gradient(135deg, #28a745, #20c997); height: 100%; width: 0%; transition: width 0.3s ease;"></div>
                </div>
                
                <div id="p3EmailProgressText" style="font-size: 14px; color: #6c757d;">
                    Initializing P3 email sending...
                </div>
                
                <div id="p3EmailProgressDetails" style="margin-top: 20px; background-color: #f8f9fa; padding: 15px; border-radius: 5px; text-align: left; max-height: 200px; overflow-y: auto;">
                    <div style="font-weight: bold; margin-bottom: 10px;">📋 P3 Sending Progress:</div>
                    <div id="p3EmailProgressLog"></div>
                </div>
            </div>
            
            <div style="background: linear-gradient(135deg, #fff3cd, #ffeaa7); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #f39c12;">
                <h4 style="color: #856404; margin-top: 0; display: flex; align-items: center;">
                    <i class="fas fa-info-circle" style="margin-right: 10px;"></i>
                    Please Wait
                </h4>
                <p style="color: #856404; margin-bottom: 0; line-height: 1.6;">
                    P3 emails are being sent automatically. This modal will update when the process is complete.
                </p>
            </div>
            
            <div class="modal-buttons" style="display: none;" id="p3EmailProgressButtons">
                <button class="confirm-button" onclick="finishP3EmailProcess()" 
                        style="background: linear-gradient(135deg, #28a745, #20c997); font-size: 16px; padding: 12px 25px;">
                    <i class="fas fa-check" style="margin-right: 8px;"></i>
                    Continue to Database Update
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(progressModal);
}

// Send P3 email batch with progress tracking
async function sendP3EmailBatch(applicants, subject, template, type, phase) {
    emailSendingInProgress = true;
    
    const progressBar = document.getElementById('p3EmailProgressBar');
    const progressText = document.getElementById('p3EmailProgressText');
    const progressLog = document.getElementById('p3EmailProgressLog');
    
    let sentCount = 0;
    let errorCount = 0;
    const errors = [];
    
    const updateProgress = (current, total, currentApplicant, success) => {
        const percentage = Math.round((current / total) * 100);
        progressBar.style.width = percentage + '%';
        progressText.textContent = `Sent ${sentCount} of ${total} P3 emails (${errorCount} errors)`;
        
        const status = success ? '✅' : '❌';
        const statusText = success ? 'Sent' : 'Failed';
        progressLog.innerHTML += `<div style="margin: 2px 0; font-size: 12px;">${status} ${currentApplicant}: ${statusText}</div>`;
        progressLog.scrollTop = progressLog.scrollHeight;
    };
    
    try {
        for (let i = 0; i < applicants.length; i++) {
            const applicant = applicants[i];
            
            try {
                console.log(`Sending P3 email ${i + 1}/${applicants.length} to: ${applicant.email}`);
                
                const response = await fetch('/linemanager/send-automated-email', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        email: applicant.email,
                        subject: subject,
                        template: template,
                        applicantName: applicant.name,
                        jobTitle: applicant.jobTitle,
                        phase: phase,
                        type: type
                    }),
                });
                
                const result = await response.json();
                
                if (result.success) {
                    sentCount++;
                    updateProgress(i + 1, applicants.length, applicant.name, true);
                } else {
                    errorCount++;
                    errors.push(`${applicant.name} (${applicant.email}): ${result.message || 'Unknown error'}`);
                    updateProgress(i + 1, applicants.length, applicant.name, false);
                }
                
                // Small delay to avoid overwhelming the server
                await new Promise(resolve => setTimeout(resolve, 500));
                
            } catch (error) {
                console.error(`Error sending P3 email to ${applicant.email}:`, error);
                errorCount++;
                errors.push(`${applicant.name} (${applicant.email}): ${error.message}`);
                updateProgress(i + 1, applicants.length, applicant.name, false);
            }
        }
        
        // Update results for P3
        if (!window.p3EmailBatchResults) {
            window.p3EmailBatchResults = {
                passed: { sent: 0, failed: 0, errors: [] },
                failed: { sent: 0, failed: 0, errors: [] }
            };
        }
        
        window.p3EmailBatchResults[type] = {
            sent: sentCount,
            failed: errorCount,
            errors: errors
        };
        
        // Show completion
        showP3EmailSendingCompletion(sentCount, errorCount, errors, type);
        
    } catch (error) {
        console.error('Error in P3 email batch sending:', error);
        alert('Error sending P3 emails: ' + error.message);
        emailSendingInProgress = false;
        
        const progressModal = document.getElementById('p3EmailProgressModal');
        if (progressModal) {
            progressModal.remove();
        }
    }
}

// Show P3 email sending completion
function showP3EmailSendingCompletion(sentCount, errorCount, errors, type) {
    const progressText = document.getElementById('p3EmailProgressText');
    const progressButtons = document.getElementById('p3EmailProgressButtons');
    const progressLog = document.getElementById('p3EmailProgressLog');
    
    if (progressText) {
        if (errorCount === 0) {
            progressText.innerHTML = `<div style="color: #28a745; font-weight: bold;">✅ All ${sentCount} P3 emails sent successfully!</div>`;
        } else {
            progressText.innerHTML = `<div style="color: #ffc107; font-weight: bold;">⚠️ ${sentCount} P3 emails sent, ${errorCount} failed</div>`;
        }
    }
    
    if (errors.length > 0 && progressLog) {
        progressLog.innerHTML += `<div style="margin-top: 15px; color: #dc3545; font-weight: bold;">❌ P3 Errors:</div>`;
        errors.forEach(error => {
            progressLog.innerHTML += `<div style="margin: 2px 0; font-size: 11px; color: #dc3545;">${error}</div>`;
        });
    }
    
    if (progressButtons) {
        progressButtons.style.display = 'flex';
    }
    
    emailSendingInProgress = false;
}

// Finish P3 email process and proceed to database update
function finishP3EmailProcess() {
    const progressModal = document.getElementById('p3EmailProgressModal');
    if (progressModal) {
        progressModal.remove();
    }
    
    // Check if we need to process failed emails next
    if (!window.p3EmailBatchResults) {
        window.p3EmailBatchResults = {
            passed: { sent: 0, failed: 0, errors: [] },
            failed: { sent: 0, failed: 0, errors: [] }
        };
    }
    
    // Check if we still need to process failed applicants
    if (window.currentP3FailedApplicants?.length > 0 && 
        !window.p3EmailBatchResults.failed.sent && 
        !window.p3EmailBatchResults.failed.failed) {
        // Need to process failed emails
        showP3FailedEmailModalEnhanced();
        return;
    }
    
    // All P3 emails processed, show database update modal
    showP3DatabaseUpdateModal();
}

// Show P3 database update modal
function showP3DatabaseUpdateModal() {
    const updateModal = document.createElement('div');
    updateModal.className = 'modal';
    updateModal.style.display = 'block';
    
    const totalSent = (window.p3EmailBatchResults?.passed?.sent || 0) + (window.p3EmailBatchResults?.failed?.sent || 0);
    const totalErrors = (window.p3EmailBatchResults?.passed?.failed || 0) + (window.p3EmailBatchResults?.failed?.failed || 0);
    
    updateModal.innerHTML = `
        <div class="modal-content" style="width: 70%; max-width: 600px;">
            <h2 style="text-align: center; color: #007bff;">
                <i class="fas fa-database" style="color: #28a745; margin-right: 10px;"></i>
                P3 Email Sending Complete
            </h2>
            
            <div style="margin: 30px 0; text-align: center;">
                <div style="font-size: 64px; color: #28a745; margin-bottom: 20px;">
                    <i class="fas fa-check-circle"></i>
                </div>
                <p style="font-size: 18px; margin-bottom: 20px;">P3 email sending process completed!</p>
                
                <div style="background-color: #d4edda; padding: 20px; border-radius: 10px; margin: 20px 0; text-align: left;">
                    <h4 style="color: #155724; margin-top: 0;">📊 P3 Sending Summary:</h4>
                    <ul style="color: #155724; margin-bottom: 0;">
                        <li><strong>Total P3 emails sent:</strong> ${totalSent}</li>
                        <li><strong>Job offer emails sent:</strong> ${window.p3EmailBatchResults?.passed?.sent || 0}</li>
                        <li><strong>Final notification emails sent:</strong> ${window.p3EmailBatchResults?.failed?.sent || 0}</li>
                        ${totalErrors > 0 ? `<li style="color: #dc3545;"><strong>Sending errors:</strong> ${totalErrors}</li>` : ''}
                    </ul>
                </div>
            </div>
            
            <div style="background: linear-gradient(135deg, #fff3cd, #ffeaa7); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #f39c12;">
                <h4 style="color: #856404; margin-top: 0; display: flex; align-items: center;">
                    <i class="fas fa-exclamation-triangle" style="margin-right: 10px;"></i>
                    Final Step
                </h4>
                <p style="color: #856404; margin-bottom: 0; line-height: 1.6;">
                    Click "Update Database" below to finalize the P3 applicant statuses in your system.
                </p>
            </div>
            
            <div class="modal-buttons">
                <button class="back-button" onclick="this.closest('.modal').remove()">
                    <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
                </button>
                <button class="confirm-button" onclick="updateP3ApplicantStatusesAutomated()" 
                        style="background: linear-gradient(135deg, #28a745, #20c997); font-size: 16px; padding: 12px 25px;">
                    <i class="fas fa-database" style="margin-right: 8px;"></i>
                    Update P3 Database
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(updateModal);
}

// Update P3 applicant statuses after automated email sending
function updateP3ApplicantStatusesAutomated() {
    const emailsToUpdate = window.p3EmailsToUpdate;
    
    if (!emailsToUpdate || (!emailsToUpdate.passed.length && !emailsToUpdate.failed.length)) {
        alert('No P3 applicant status updates to process.');
        return;
    }
    
    const updateButton = event.target;
    const originalText = updateButton.textContent;
    updateButton.textContent = 'Updating P3 Database...';
    updateButton.disabled = true;
    
    fetch('/linemanager/applicant-tracker-jobposition/updateP3Statuses', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            passedUserIds: emailsToUpdate.passed,
            failedUserIds: emailsToUpdate.failed
        }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Close modal
            event.target.closest('.modal').remove();
            
            const passedEmailsSent = window.p3EmailBatchResults?.passed?.sent || 0;
            const failedEmailsSent = window.p3EmailBatchResults?.failed?.sent || 0;
            
            alert(`P3 applicant statuses updated successfully!\n\nDatabase Updates:\n- ${data.passedUpdated || 0} passed applicants\n- ${data.failedUpdated || 0} failed applicants\n\nEmails Sent:\n- ${passedEmailsSent} job offer emails\n- ${failedEmailsSent} final notification emails`);
            
            // Clear data
            window.currentP3PassedApplicants = [];
            window.currentP3FailedApplicants = [];
            window.p3EmailsToUpdate = { passed: [], failed: [] };
            
            // Reset P3 batch results
            window.p3EmailBatchResults = {
                passed: { sent: 0, failed: 0, errors: [] },
                failed: { sent: 0, failed: 0, errors: [] }
            };
            
            // Refresh view
            setTimeout(() => {
                const activeFilter = document.querySelector(".filter-button.active");
                if (activeFilter) {
                    activeFilter.click();
                } else {
                    document.getElementById("filter-all").click();
                }
            }, 500);
        } else {
            throw new Error(data.message || 'Failed to update P3 statuses');
        }
    })
    .catch(error => {
        console.error('Error updating P3 statuses:', error);
        alert('Error updating P3 applicant statuses: ' + error.message);
        
        updateButton.textContent = originalText;
        updateButton.disabled = false;
    });
}

// Enhanced preview function for P3 emails
function previewP3EmailTemplate(type) {
    console.log(`📧 FIXED P3: Previewing P3 ${type} email template with formatting`);
    
    let subject, template, applicants;
    let subjectId, templateId;
    
    if (type === 'passed') {
        subjectId = 'p3PassedEmailSubject';
        templateId = 'p3PassedEmailTemplate';
        applicants = window.currentP3PassedApplicants;
    } else if (type === 'failed') {
        subjectId = 'p3FailedEmailSubject';
        templateId = 'p3FailedEmailTemplate';
        applicants = window.currentP3FailedApplicants;
    }
    
    const subjectElement = document.getElementById(subjectId);
    const templateElement = document.getElementById(templateId);
    
    if (!subjectElement || !templateElement) {
        console.error(`Missing P3 elements: subject=${subjectId}, template=${templateId}`);
        alert('Error: Could not find P3 email template fields. Please try refreshing the page.');
        return;
    }
    
    subject = subjectElement.value;
    template = templateElement.value;
    
    if (!subject || !template) {
        alert('Please fill in both subject and template fields.');
        return;
    }
    
    if (!applicants || applicants.length === 0) {
        alert('No P3 applicants found for preview.');
        return;
    }
    
    // Use first applicant for preview
    const sampleApplicant = applicants[0];
    
    // Process template while preserving formatting
    const processedTemplate = processEmailTemplateWithFormatting(
        template, 
        sampleApplicant.name, 
        sampleApplicant.jobTitle, 
        'Company ABC'
    );
    
    // Create preview modal
    const previewModal = document.createElement('div');
    previewModal.className = 'modal';
    previewModal.style.display = 'block';
    previewModal.innerHTML = `
        <div class="modal-content" style="width: 90%; max-width: 800px;">
            <span class="close-button" onclick="this.closest('.modal').remove()">&times;</span>
            <h2>📧 P3 Email Preview - ${type.charAt(0).toUpperCase() + type.slice(1)}</h2>
            
            <div style="margin: 20px 0;">
                <h4>Recipients: ${applicants.length} P3 applicant(s)</h4>
                <p><strong>Subject:</strong> ${subject}</p>
            </div>
            
            <div style="border: 2px solid #ddd; border-radius: 8px; padding: 20px; background-color: #f9f9f9; margin: 20px 0;">
                <h4 style="margin-top: 0; color: #124A5C;">📝 P3 Email Content Preview (with formatting):</h4>
                <div style="white-space: pre-wrap; font-family: Arial, sans-serif; line-height: 1.6; background: white; padding: 15px; border-radius: 4px; border: 1px solid #ddd;">
${processedTemplate}
                </div>
            </div>
            
            <div style="background-color: #e8f5e8; padding: 15px; border-radius: 5px; margin: 20px 0;">
                <h4 style="color: #2e7d32; margin-top: 0;">✅ P3 Formatting Preserved:</h4>
                <ul style="color: #2e7d32; margin-bottom: 0;">
                    <li>Line breaks and spacing will be maintained</li>
                    <li>Paragraph structure will be preserved</li>
                    <li>${applicants.length} P3 recipient(s) will receive this formatted email</li>
                    <li>All placeholders have been replaced with actual data</li>
                </ul>
            </div>
            
            <div class="modal-buttons">
                <button class="back-button" onclick="this.closest('.modal').remove()">
                    <i class="fas fa-times" style="margin-right: 5px;"></i>Close Preview
                </button>
                <button class="confirm-button" onclick="this.closest('.modal').remove(); sendAutomatedP3Emails('${type}')" 
                        style="background: linear-gradient(135deg, #28a745, #20c997);">
                    <i class="fas fa-paper-plane" style="margin-right: 8px;"></i>Send P3 Emails Now
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(previewModal);
}

// Replace existing P3 modal show functions
window.showP3PassedEmailModal = showP3PassedEmailModal;
console.log('✅ FIXED P3: All P3 email functions updated with proper recipient fetching, step progress, and completion handling');

// Add new P3 functions to global scope
window.sendAutomatedP3Emails = sendAutomatedP3Emails;
window.finishP3EmailProcess = finishP3EmailProcess;
window.updateP3ApplicantStatusesAutomated = updateP3ApplicantStatusesAutomated;
window.previewP3EmailTemplate = previewP3EmailTemplate;
window.sendCustomEmail = sendCustomEmail;
window.previewEmailTemplate = previewEmailTemplateFixed;
window.updateButtonAfterSending = updateButtonAfterSending;
console.log('✅ UPDATED: Enhanced Modal Button Functions loaded successfully');


console.log('✅ P3 Enhanced Email Modal with Automated Sending loaded successfully');

function openGmailForPassed() {
    const subjectId = emailSendingState.phase === 'P3' ? 'emailP3PassedModalEmailSubject' : 'emailPassedModalEmailSubject';
    const templateId = emailSendingState.phase === 'P3' ? 'emailP3PassedModalEmailTemplate' : 'emailPassedModalEmailTemplate';
    
    const subject = document.getElementById(subjectId)?.value;
    const template = document.getElementById(templateId)?.value;
    
    if (!subject || !template) {
        alert("Please fill in both subject and template fields.");
        return;
    }
    
    const applicants = emailSendingState.phase === 'P3' ? window.currentP3PassedApplicants : window.currentPassedApplicants;
    
    if (!confirm(`This will open Gmail with ${applicants.length} passed applicants. The email formatting will be preserved. Continue?`)) {
        return;
    }
    
    const gmailUrl = buildGmailComposeUrl(applicants, subject, template);
    
    console.log(`📧 FIXED: Opening Gmail for ${emailSendingState.phase} passed applicants with formatting`);
    
    const gmailWindow = window.open(gmailUrl, '_blank');
    
    if (!gmailWindow) {
        alert('Please allow pop-ups for this site to open Gmail compose window.');
        return;
    }
    
    // Close current modal
    const modalId = emailSendingState.phase === 'P3' ? 'emailP3PassedModal' : 'emailPassedModal';
    closeModal(modalId);
    
    // Show status update modal
    showEmailSentStatusModal('passed');
}

function openGmailForFailed() {
    const subjectId = emailSendingState.phase === 'P3' ? 'emailP3FailedModalEmailSubject' : 'emailFailedModalEmailSubject';
    const templateId = emailSendingState.phase === 'P3' ? 'emailP3FailedModalEmailTemplate' : 'emailFailedModalEmailTemplate';
    
    const subject = document.getElementById(subjectId)?.value;
    const template = document.getElementById(templateId)?.value;
    
    if (!subject || !template) {
        alert("Please fill in both subject and template fields.");
        return;
    }
    
    const applicants = emailSendingState.phase === 'P3' ? window.currentP3FailedApplicants : window.currentFailedApplicants;
    
    if (!confirm(`This will open Gmail with ${applicants.length} failed applicants. The email formatting will be preserved. Continue?`)) {
        return;
    }
    
    const gmailUrl = buildGmailComposeUrl(applicants, subject, template);
    
    console.log(`📧 FIXED: Opening Gmail for ${emailSendingState.phase} failed applicants with formatting`);
    
    const gmailWindow = window.open(gmailUrl, '_blank');
    
    if (!gmailWindow) {
        alert('Please allow pop-ups for this site to open Gmail compose window.');
        return;
    }
    
    // Close current modal
    const modalId = emailSendingState.phase === 'P3' ? 'emailP3FailedModal' : 'emailFailedModal';
    closeModal(modalId);
    
    // Show status update modal
    showEmailSentStatusModal('failed');
}

// Show status modal after Gmail compose
function showEmailSentStatusModal(type) {
    const statusModal = document.createElement('div');
    statusModal.className = 'modal';
    statusModal.style.display = 'block';
    statusModal.id = `${emailSendingState.phase.toLowerCase()}EmailSentStatusModal`;
    
    const isPassedType = type === 'passed';
    const applicantCount = isPassedType ? 
        (emailSendingState.phase === 'P3' ? window.currentP3PassedApplicants?.length : window.currentPassedApplicants?.length) :
        (emailSendingState.phase === 'P3' ? window.currentP3FailedApplicants?.length : window.currentFailedApplicants?.length);
    
    statusModal.innerHTML = `
        <div class="modal-content" style="width: 70%; max-width: 600px;">
            <h2 style="text-align: center; color: #007bff;">
                <i class="fab fa-google" style="color: #db4437; margin-right: 10px;"></i>
                Gmail Compose Opened - ${isPassedType ? 'Congratulations' : 'Notification'} Emails
            </h2>
            
            <div style="margin: 30px 0; text-align: center;">
                <div style="font-size: 64px; color: #db4437; margin-bottom: 20px;">
                    <i class="fab fa-google"></i>
                </div>
                <p style="font-size: 18px; margin-bottom: 20px;">
                    Gmail compose window has been opened for ${applicantCount} ${isPassedType ? 'passed' : 'failed'} applicants.
                </p>
                
                <div style="background-color: #e3f2fd; padding: 25px; border-radius: 10px; margin: 25px 0; border-left: 5px solid #2196f3;">
                    <h4 style="color: #1976d2; margin-top: 0;">📋 Next Steps:</h4>
                    <ol style="text-align: left; margin: 15px 0; color: #1976d2; line-height: 1.8;">
                        <li><strong>Switch to Gmail tab</strong> - Check if Gmail opened correctly</li>
                        <li><strong>Review recipient list</strong> - Verify all emails are in "To:" field</li>
                        <li><strong>Send emails</strong> - Click Gmail's send button</li>
                        <li><strong>Return here</strong> - Click the appropriate button below</li>
                    </ol>
                </div>
            </div>
            
            <div style="background: linear-gradient(135deg, #d4edda, #c3e6cb); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #28a745;">
                <h4 style="color: #155724; margin-top: 0; display: flex; align-items: center;">
                    <i class="fas fa-check-circle" style="margin-right: 10px;"></i>
                    Email Status: ${isPassedType ? 'Congratulations' : 'Notification'} Emails
                </h4>
                <p style="color: #155724; margin-bottom: 0; line-height: 1.6;" id="emailStatusText">
                    <strong>Status:</strong> Pending Gmail Send
                </p>
            </div>
            
            <div class="modal-buttons">
                <button class="back-button" onclick="cancelEmailProcess()">
                    <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel Process
                </button>
                <button class="confirm-button" onclick="markEmailsAsSent('${type}')" 
                        style="background: linear-gradient(135deg, #28a745, #20c997); font-size: 16px; padding: 12px 25px;">
                    <i class="fas fa-check" style="margin-right: 8px;"></i>
                    Mark as Sent
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(statusModal);
}

// Mark emails as sent and show next step
function markEmailsAsSent(type) {
    if (type === 'passed') {
        emailSendingState.passedSent = true;
        emailSendingState.currentStep = 'passed';
    } else {
        emailSendingState.failedSent = true;
        emailSendingState.currentStep = 'failed';
    }
    
    // Close current modal
    const currentModal = document.getElementById(`${emailSendingState.phase.toLowerCase()}EmailSentStatusModal`);
    if (currentModal) {
        currentModal.remove();
    }
    
    // Update status text
    const statusText = document.getElementById('emailStatusText');
    if (statusText) {
        statusText.innerHTML = `<strong>Status:</strong> ✅ ${type === 'passed' ? 'Congratulations' : 'Notification'} Emails Sent`;
    }
    
    // Determine next step
    const hasPassedApplicants = emailSendingState.phase === 'P3' ? 
        window.currentP3PassedApplicants?.length > 0 : 
        window.currentPassedApplicants?.length > 0;
    const hasFailedApplicants = emailSendingState.phase === 'P3' ? 
        window.currentP3FailedApplicants?.length > 0 : 
        window.currentFailedApplicants?.length > 0;
    
    if (type === 'passed' && hasFailedApplicants && !emailSendingState.failedSent) {
        // Show option to proceed with failed emails
        showProceedToFailedModal();
    } else if ((type === 'failed') || (type === 'passed' && !hasFailedApplicants) || 
               (emailSendingState.passedSent && emailSendingState.failedSent)) {
        // Show option to update database
        showProceedToDatabaseModal();
    }
}

// Show modal to proceed with failed applicants
function showProceedToFailedModal() {
    const proceedModal = document.createElement('div');
    proceedModal.className = 'modal';
    proceedModal.style.display = 'block';
    proceedModal.id = 'proceedToFailedModal';
    
    const failedCount = emailSendingState.phase === 'P3' ? 
        window.currentP3FailedApplicants?.length : 
        window.currentFailedApplicants?.length;
    
    proceedModal.innerHTML = `
        <div class="modal-content" style="width: 70%; max-width: 600px;">
            <h2 style="text-align: center; color: #007bff;">
                <i class="fas fa-arrow-right" style="color: #ffc107; margin-right: 10px;"></i>
                Ready for Next Step
            </h2>
            
            <div style="margin: 30px 0; text-align: center;">
                <div style="font-size: 64px; color: #28a745; margin-bottom: 20px;">
                    <i class="fas fa-check-circle"></i>
                </div>
                <p style="font-size: 18px; margin-bottom: 20px;">
                    Congratulations emails have been sent successfully!
                </p>
                
                <div style="background-color: #fff3cd; padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #ffc107;">
                    <h4 style="color: #856404; margin-top: 0;">📧 Next: Notification Emails</h4>
                    <p style="color: #856404; margin-bottom: 0; line-height: 1.6;">
                        You have <strong>${failedCount} applicants</strong> who need to receive notification emails.
                        Would you like to proceed with sending these emails?
                    </p>
                </div>
            </div>
            
            <div class="modal-buttons">
                <button class="back-button" onclick="skipToDatabase()">
                    <i class="fas fa-forward" style="margin-right: 5px;"></i>Skip to Database Update
                </button>
                <button class="confirm-button" onclick="proceedWithFailedEmails()" 
                        style="background: linear-gradient(135deg, #ffc107, #e0a800); color: #212529; font-size: 16px; padding: 12px 25px;">
                    <i class="fas fa-envelope" style="margin-right: 8px;"></i>
                    Proceed with Notification Emails
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(proceedModal);
}
// Proceed with failed applicant emails
function proceedWithFailedEmails() {
console.log('📧 FIXED: Proceeding with failed applicant emails...');
    
    // Close progress modal
    const progressModalId = `${emailSendingState.phase.toLowerCase()}EmailProgressModal`;
    const progressModal = document.getElementById(progressModalId);
    if (progressModal) {
        progressModal.remove();
        console.log(`📧 FIXED: Removed progress modal: ${progressModalId}`);
    }
    
    // FIXED: Reset the sending in progress flag
    emailSendingInProgress = false;
    
    // Show failed email modal based on phase
    if (emailSendingState.phase === 'P3') {
        console.log('📧 FIXED: Showing P3 failed email modal');
        showP3FailedEmailModal();
    } else {
        console.log('📧 FIXED: Showing P1 failed email modal');
        showFailedEmailModal();
    }
}

// Proceed with database update
function proceedWithDatabaseUpdate() {
   console.log('📧 FIXED: Proceeding with database update...');
    
    // Close progress modal
    const progressModalId = `${emailSendingState.phase.toLowerCase()}EmailProgressModal`;
    const progressModal = document.getElementById(progressModalId);
    if (progressModal) {
        progressModal.remove();
        console.log(`📧 FIXED: Removed progress modal: ${progressModalId}`);
    }
    
    // FIXED: Reset the sending in progress flag
    emailSendingInProgress = false;
    
    // Show database update confirmation modal
    showDatabaseUpdateConfirmationModal();
}

// ============================
// UPDATED: Database Update Confirmation Modal
// ============================
function showDatabaseUpdateConfirmationModal() {
    console.log('📧 FIXED: Showing database update confirmation modal');
    
    const updateModal = document.createElement('div');
    updateModal.className = 'modal';
    updateModal.style.display = 'block';
    updateModal.id = 'databaseUpdateConfirmationModal';
    
    const phase = emailSendingState.phase;
    const passedResults = emailSendingState.passedResults || { sent: 0, failed: 0 };
    const failedResults = emailSendingState.failedResults || { sent: 0, failed: 0 };
    const totalSent = passedResults.sent + failedResults.sent;
    const totalErrors = passedResults.failed + failedResults.failed;
    
    updateModal.innerHTML = `
        <div class="modal-content" style="width: 70%; max-width: 600px;">
            <h2 style="text-align: center; color: #007bff;">
                <i class="fas fa-database" style="color: #28a745; margin-right: 10px;"></i>
                ${phase} Email Process Complete - Ready for Database Update
            </h2>
            
            <div style="margin: 30px 0; text-align: center;">
                <div style="font-size: 64px; color: #28a745; margin-bottom: 20px;">
                    <i class="fas fa-check-double"></i>
                </div>
                <p style="font-size: 18px; margin-bottom: 20px;">
                    All ${phase} emails have been sent successfully!
                </p>
                
                <div style="background-color: #d4edda; padding: 20px; border-radius: 10px; margin: 20px 0; text-align: left;">
                    <h4 style="color: #155724; margin-top: 0;">📊 Complete ${phase} Email Summary:</h4>
                    <ul style="color: #155724; margin-bottom: 0;">
                        ${emailSendingState.passedSent ? `<li><strong>Congratulations emails sent:</strong> ${passedResults.sent}</li>` : ''}
                        ${emailSendingState.failedSent ? `<li><strong>Notification emails sent:</strong> ${failedResults.sent}</li>` : ''}
                        <li><strong>Total emails processed:</strong> ${totalSent}</li>
                        ${totalErrors > 0 ? `<li style="color: #dc3545;"><strong>Total sending errors:</strong> ${totalErrors}</li>` : ''}
                    </ul>
                </div>
                
                <!-- Progress Completion Indicator -->
                <div style="background: linear-gradient(135deg, #e8f5e8, #c8e6c8); padding: 15px; border-radius: 8px; margin: 15px 0; border-left: 5px solid #4caf50;">
                    <h4 style="color: #2e7d32; margin-top: 0; display: flex; align-items: center;">
                        <i class="fas fa-route" style="margin-right: 10px;"></i>
                        ${phase} Email Process - COMPLETED
                    </h4>
                    <div style="display: flex; align-items: center; color: #2e7d32;">
                        <div style="flex: 1; text-align: center; padding: 8px; background: #4caf50; color: white; border-radius: 4px; margin: 0 2px;">
                            ✅ Step 1: Congratulations Emails
                        </div>
                        <div style="flex: 1; text-align: center; padding: 8px; background: #4caf50; color: white; border-radius: 4px; margin: 0 2px;">
                            ✅ Step 2: Notification Emails
                        </div>
                        <div style="flex: 1; text-align: center; padding: 8px; background: #ffc107; color: #212529; border-radius: 4px; margin: 0 2px;">
                            ⏳ Step 3: Database Update
                        </div>
                    </div>
                </div>
            </div>
            
            <div style="background: linear-gradient(135deg, #fff3cd, #ffeaa7); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #f39c12;">
                <h4 style="color: #856404; margin-top: 0; display: flex; align-items: center;">
                    <i class="fas fa-exclamation-triangle" style="margin-right: 10px;"></i>
                    Final Step Required
                </h4>
                <p style="color: #856404; margin-bottom: 0; line-height: 1.6;">
                    Click "Update ${phase} Database" below to finalize the ${phase} applicant statuses in your system. This will mark all passed and failed applicants accordingly.
                </p>
            </div>
            
            <div class="modal-buttons">
                <button class="back-button" onclick="closeModal('databaseUpdateConfirmationModal')">
                    <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
                </button>
                <button class="confirm-button" onclick="executeDatabase()" 
                        style="background: linear-gradient(135deg, #28a745, #20c997); font-size: 16px; padding: 12px 25px;">
                    <i class="fas fa-database" style="margin-right: 8px;"></i>
                    Update ${phase} Database
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(updateModal);
    console.log('📧 FIXED: Database update confirmation modal displayed');
}
// ============================
// UPDATED: Execute Database Update
// ============================
function executeP1DatabaseUpdate() {
    const emailsToUpdate = emailSendingState.phase === 'P3' ? window.p3EmailsToUpdate : window.emailsToUpdate;
    
    if (!emailsToUpdate || (!emailsToUpdate.passed.length && !emailsToUpdate.failed.length)) {
        alert('No applicant status updates to process.');
        return;
    }
    
    const updateButton = event.target;
    const originalText = updateButton.textContent;
    updateButton.textContent = 'Updating Database...';
    updateButton.disabled = true;
    
    const endpoint = emailSendingState.phase === 'P3' ? 
        '/linemanager/applicant-tracker-jobposition/updateP3Statuses' : 
        '/linemanager/applicant-tracker-jobposition/updateP1Statuses';
    
    fetch(endpoint, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            passedUserIds: emailsToUpdate.passed,
            failedUserIds: emailsToUpdate.failed
        }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Close modal
            closeModal('databaseUpdateConfirmationModal');
            
            const passedResults = emailSendingState.passedResults || { sent: 0 };
            const failedResults = emailSendingState.failedResults || { sent: 0 };
            
            alert(`${emailSendingState.phase} Process Complete!\n\nDatabase Updates:\n- ${data.passedUpdated || 0} passed applicants\n- ${data.failedUpdated || 0} failed applicants\n\nEmails Sent:\n- ${passedResults.sent} congratulations emails\n- ${failedResults.sent} notification emails\n\nAll ${emailSendingState.phase} applicants have been processed successfully!`);
            
            // Reset state
            emailSendingState = {
                phase: null,
                passedSent: false,
                failedSent: false,
                currentStep: 'initial',
                passedResults: null,
                failedResults: null
            };
            
            // Clear data
            if (emailSendingState.phase === 'P3') {
                window.currentP3PassedApplicants = [];
                window.currentP3FailedApplicants = [];
                window.p3EmailsToUpdate = { passed: [], failed: [] };
            } else {
                window.currentPassedApplicants = [];
                window.currentFailedApplicants = [];
                window.emailsToUpdate = { passed: [], failed: [] };
            }
            
            // Refresh view
            setTimeout(() => {
                const activeFilter = document.querySelector(".filter-button.active");
                if (activeFilter) {
                    activeFilter.click();
                } else {
                    document.getElementById("filter-all").click();
                }
            }, 500);
        } else {
            throw new Error(data.message || 'Failed to update statuses');
        }
    })
    .catch(error => {
        console.error('Error updating statuses:', error);
        alert('Error updating applicant statuses: ' + error.message);
        
        updateButton.textContent = originalText;
        updateButton.disabled = false;
    });
}
// ============================
// FIXED: Execute Database Update
// ============================

function executeDatabaseUpdate() {
    console.log('📧 FIXED: Executing database update...');
    
    const emailsToUpdate = emailSendingState.phase === 'P3' ? window.p3EmailsToUpdate : window.emailsToUpdate;
    
    if (!emailsToUpdate || (!emailsToUpdate.passed.length && !emailsToUpdate.failed.length)) {
        alert('No applicant status updates to process.');
        return;
    }
    
    const updateButton = event.target;
    const originalText = updateButton.textContent;
    updateButton.textContent = 'Updating Database...';
    updateButton.disabled = true;
    
    const endpoint = emailSendingState.phase === 'P3' ? 
        '/linemanager/applicant-tracker-jobposition/updateP3Statuses' : 
        '/linemanager/applicant-tracker-jobposition/updateP1Statuses';
    
    fetch(endpoint, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            passedUserIds: emailsToUpdate.passed,
            failedUserIds: emailsToUpdate.failed
        }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Close modal
            closeModal('databaseUpdateConfirmationModal');
            
            const passedResults = emailSendingState.passedResults || { sent: 0 };
            const failedResults = emailSendingState.failedResults || { sent: 0 };
            
            alert(`${emailSendingState.phase} Process Complete!\n\nDatabase Updates:\n- ${data.passedUpdated || 0} passed applicants\n- ${data.failedUpdated || 0} failed applicants\n\nEmails Sent:\n- ${passedResults.sent} congratulations emails\n- ${failedResults.sent} notification emails\n\nAll ${emailSendingState.phase} applicants have been processed successfully!`);
            
            // Reset state
            emailSendingState = {
                phase: null,
                passedSent: false,
                failedSent: false,
                currentStep: 'initial',
                passedResults: null,
                failedResults: null
            };
            
            // Clear data based on phase
            if (emailSendingState.phase === 'P3') {
                window.currentP3PassedApplicants = [];
                window.currentP3FailedApplicants = [];
                window.p3EmailsToUpdate = { passed: [], failed: [] };
                window.p3EmailBatchResults = {
                    passed: { sent: 0, failed: 0, errors: [] },
                    failed: { sent: 0, failed: 0, errors: [] }
                };
            } else {
                window.currentPassedApplicants = [];
                window.currentFailedApplicants = [];
                window.emailsToUpdate = { passed: [], failed: [] };
                window.emailBatchResults = {
                    passed: { sent: 0, failed: 0, errors: [] },
                    failed: { sent: 0, failed: 0, errors: [] }
                };
            }
            
            // Reset global flag
            emailSendingInProgress = false;
            
            // Refresh view
            setTimeout(() => {
                const activeFilter = document.querySelector(".filter-button.active");
                if (activeFilter) {
                    activeFilter.click();
                } else {
                    document.getElementById("filter-all").click();
                }
            }, 500);
        } else {
            throw new Error(data.message || 'Failed to update statuses');
        }
    })
    .catch(error => {
        console.error('❌ FIXED: Error updating statuses:', error);
        alert('Error updating applicant statuses: ' + error.message);
        
        updateButton.textContent = originalText;
        updateButton.disabled = false;
    });
}
// ============================
// UPDATED: Cancel Email Process
// ============================
function cancelEmailProcess() {
    if (confirm('Are you sure you want to cancel the email process? Any emails that have been sent will remain sent, but the process will be stopped.')) {
        console.log('📧 FIXED: Cancelling email process...');
        
        // Reset state
        emailSendingState = {
            phase: null,
            passedSent: false,
            failedSent: false,
            currentStep: 'initial',
            passedResults: null,
            failedResults: null
        };
        
        // Reset global flag
        emailSendingInProgress = false;
        
        // Close all related modals
        const modals = document.querySelectorAll('.modal');
        modals.forEach(modal => {
            if (modal.id.includes('Email') || 
                modal.id.includes('Progress') || 
                modal.id.includes('Database') || 
                modal.id.includes('Confirmation') ||
                modal.id.includes('p1Email') ||
                modal.id.includes('p3Email')) {
                modal.remove();
                console.log(`📧 FIXED: Removed modal: ${modal.id}`);
            }
        });
        
        console.log('📧 FIXED: Email process cancelled by user');
    }
}

// Show modal to proceed with database update
function showProceedToDatabaseModal() {
    const databaseModal = document.createElement('div');
    databaseModal.className = 'modal';
    databaseModal.style.display = 'block';
    databaseModal.id = 'proceedToDatabaseModal';
    
    const phase = emailSendingState.phase;
    const passedCount = emailSendingState.phase === 'P3' ? 
        window.currentP3PassedApplicants?.length || 0 : 
        window.currentPassedApplicants?.length || 0;
    const failedCount = emailSendingState.phase === 'P3' ? 
        window.currentP3FailedApplicants?.length || 0 : 
        window.currentFailedApplicants?.length || 0;
    
    databaseModal.innerHTML = `
        <div class="modal-content" style="width: 70%; max-width: 600px;">
            <h2 style="text-align: center; color: #007bff;">
                <i class="fas fa-database" style="color: #28a745; margin-right: 10px;"></i>
                ${phase} Email Process Complete
            </h2>
            
            <div style="margin: 30px 0; text-align: center;">
                <div style="font-size: 64px; color: #28a745; margin-bottom: 20px;">
                    <i class="fas fa-check-double"></i>
                </div>
                <p style="font-size: 18px; margin-bottom: 20px;">
                    All ${phase} emails have been sent successfully!
                </p>
                
                <div style="background-color: #d4edda; padding: 20px; border-radius: 10px; margin: 20px 0; text-align: left;">
                    <h4 style="color: #155724; margin-top: 0;">📊 Email Summary:</h4>
                    <ul style="color: #155724; margin-bottom: 0;">
                        ${emailSendingState.passedSent ? `<li><strong>Congratulations emails sent:</strong> ${passedCount}</li>` : ''}
                        ${emailSendingState.failedSent ? `<li><strong>Notification emails sent:</strong> ${failedCount}</li>` : ''}
                        <li><strong>Total emails processed:</strong> ${passedCount + failedCount}</li>
                    </ul>
                </div>
            </div>
            
            <div style="background: linear-gradient(135deg, #fff3cd, #ffeaa7); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #f39c12;">
                <h4 style="color: #856404; margin-top: 0; display: flex; align-items: center;">
                    <i class="fas fa-exclamation-triangle" style="margin-right: 10px;"></i>
                    Final Step Required
                </h4>
                <p style="color: #856404; margin-bottom: 0; line-height: 1.6;">
                    Click "Update Database" below to finalize the ${phase} applicant statuses in your system.
                </p>
            </div>
            
            <div class="modal-buttons">
                <button class="back-button" onclick="cancelEmailProcess()">
                    <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
                </button>
                <button class="confirm-button" onclick="proceedWithDatabaseUpdate()" 
                        style="background: linear-gradient(135deg, #28a745, #20c997); font-size: 16px; padding: 12px 25px;">
                    <i class="fas fa-database" style="margin-right: 8px;"></i>
                    Update ${phase} Database
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(databaseModal);
}


// Skip to database update
function skipToDatabase() {
    const proceedModal = document.getElementById('proceedToFailedModal');
    if (proceedModal) {
        proceedModal.remove();
    }
    showProceedToDatabaseModal();
}



function showStatusUpdateModal() {
console.log('🔥 FIXED: Showing status update modal');
    
    // Create the modal if it doesn't exist
    let statusModal = document.getElementById('statusUpdateModal');
    if (!statusModal) {
        statusModal = document.createElement('div');
        statusModal.id = 'statusUpdateModal';
        statusModal.className = 'modal';
        statusModal.innerHTML = `
            <div class="modal-content" style="width: 70%; max-width: 600px;">
                <h2 style="text-align: center; color: #007bff;">
                    <i class="fab fa-google" style="color: #db4437; margin-right: 10px;"></i>
                    Gmail Compose Opened
                </h2>
                
                <div style="margin: 30px 0; text-align: center;">
                    <div style="font-size: 64px; color: #db4437; margin-bottom: 20px;">
                        <i class="fab fa-google"></i>
                    </div>
                    <p style="font-size: 18px; margin-bottom: 20px;">Gmail compose window has been opened in a new tab with your email pre-filled.</p>
                    
                    <div style="background-color: #e3f2fd; padding: 25px; border-radius: 10px; margin: 25px 0; border-left: 5px solid #2196f3;">
                        <h4 style="color: #1976d2; margin-top: 0;">📋 Next Steps:</h4>
                        <ol style="text-align: left; margin: 15px 0; color: #1976d2; line-height: 1.8;">
                            <li><strong>Switch to Gmail tab</strong> - Check if Gmail opened correctly</li>
                            <li><strong>Review recipient list</strong> - Verify all emails are in "To:" field</li>
                            <li><strong>Check subject line</strong> - Modify if needed</li>
                            <li><strong>Review email content</strong> - Make final adjustments</li>
                            <li><strong>Send emails</strong> - Click Gmail's send button</li>
                            <li><strong>Return here</strong> - Click "Update Database" below</li>
                        </ol>
                    </div>
                </div>
                
                <div style="background: linear-gradient(135deg, #fff3cd, #ffeaa7); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #f39c12;">
                    <h4 style="color: #856404; margin-top: 0; display: flex; align-items: center;">
                        <i class="fas fa-exclamation-triangle" style="margin-right: 10px;"></i>
                        Important
                    </h4>
                    <p style="color: #856404; margin-bottom: 0; line-height: 1.6;">
                        <strong>After sending emails in Gmail</strong>, return here and click "Update Database" to finalize the applicant statuses in your system.
                    </p>
                </div>
                
                <div class="modal-buttons">
                    <button class="back-button" onclick="closeModal('statusUpdateModal')">
                        <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel Process
                    </button>
                    <button class="confirm-button" onclick="updateApplicantStatuses()" style="background: linear-gradient(135deg, #28a745, #20c997); font-size: 16px; padding: 12px 25px;">
                        <i class="fas fa-database" style="margin-right: 8px;"></i>
                        Update Database
                    </button>
                </div>
            </div>
        `;
        document.body.appendChild(statusModal);
    }
    
    statusModal.style.display = 'block';
}

function updateApplicantStatuses() {
    if (!confirm('Have you successfully sent the emails via Gmail? This will update the applicant statuses in the database.')) {
        return;
    }
    
    console.log('🔥 FIXED: Updating applicant statuses in database...');
    console.log('Passed userIds:', window.emailsToUpdate.passed);
    console.log('Failed userIds:', window.emailsToUpdate.failed);
    
    const updateButton = document.querySelector('#statusUpdateModal .confirm-button');
    const originalText = updateButton.textContent;
    updateButton.textContent = 'Updating Database...';
    updateButton.disabled = true;
    
    fetch('/linemanager/applicant-tracker-jobposition/updateP1Statuses', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            passedUserIds: window.emailsToUpdate.passed,
            failedUserIds: window.emailsToUpdate.failed
        }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert(`Applicant statuses updated successfully!\n\nUpdated:\n- ${data.passedUpdated || 0} passed applicants\n- ${data.failedUpdated || 0} failed applicants`);
            
            closeModal('statusUpdateModal');
            
            // Clear global variables
            window.currentPassedApplicants = [];
            window.currentFailedApplicants = [];
            window.emailsToUpdate = { passed: [], failed: [] };
            
            // Refresh the page view
            setTimeout(() => {
                const activeFilter = document.querySelector(".filter-button.active");
                if (activeFilter) {
                    activeFilter.click();
                } else {
                    document.getElementById("filter-all").click();
                }
            }, 500);
        } else {
            throw new Error(data.message || 'Failed to update statuses');
        }
    })
    .catch(error => {
        console.error('❌ Error updating statuses:', error);
        alert('Error updating applicant statuses: ' + error.message);
        
        updateButton.textContent = originalText;
        updateButton.disabled = false;
    });
}


// ============================
// ADDITIONAL FIXED FUNCTIONS - ADD AFTER DOMContentLoaded
// ============================
window.startP1FinalizationProcess = startP1FinalizationProcess;
window.startP3FinalizationProcess = startP3FinalizationProcess;
window.executeP1Finalization = executeP1Finalization;
window.executeP3Finalization = executeP3Finalization;
window.finalizeP1Review = finalizeP1Review;
window.fetchApplicantDataForEmails = fetchApplicantDataForEmails;
window.fetchEmailTemplates = fetchEmailTemplates;

console.log('✅ FIXED: Complete P1/P3 finalization system loaded successfully');

// Make functions globally available
window.enhanceApplicantTableFixed = enhanceApplicantTableFixed;
window.enhanceApplicantTable = enhanceApplicantTable;
window.openSendJobOfferModalFixed = openSendJobOfferModalFixed;
window.fetchUserEmailFromBackend = fetchUserEmailFromBackend;


window.setupGmailEventListeners = setupGmailEventListeners;
window.checkAllApplicantsMarked = checkAllApplicantsMarked;
window.checkAllP3ApplicantsMarked = checkAllP3ApplicantsMarked;
window.executeP1DatabaseUpdate = executeP1DatabaseUpdate;
window.executeDatabaseUpdate = executeDatabaseUpdateFixed;
window.sendAutomatedEmailsWithCompletion = sendAutomatedEmailsWithCompletion;
window.showDatabaseUpdateConfirmationModal = showDatabaseUpdateConfirmationModal;
window.forceModalUpdate = forceModalUpdate;

window.debugModalState = debugModalState;
window.manualCompletionTrigger = manualCompletionTrigger;
window.showEmailSendingCompletionUltraFixed = showEmailSendingCompletionUltraFixed;

console.log('✅ ULTRA FIXED: Modal completion with force update and debug tools loaded');
console.log('🔧 DEBUG: You can run debugModalState() and manualCompletionTrigger() in console for testing');

console.log('✅ UPDATED: Enhanced Email Flow with Progressive Buttons loaded successfully');
console.log('✅ FIXED: Email batch function with GUARANTEED completion call loaded successfully');
// Enhanced review filter handler with P3 improvements
function handleReviewFilterEnhanced(mainTable, applicantStatusSection, allMainRows) {
    console.log("=== ENHANCED P1/P3 REVIEW FILTER - WITH ASSESSMENT DATA AND NO DATA MESSAGES ===");
    
    hideEvaluationSection();
    
    const onboardingHeader = document.getElementById('onboardingHeader');
    const onboardingTable = document.getElementById('onboardingTable');
    
    if (onboardingHeader) onboardingHeader.style.display = 'none';
    if (onboardingTable) onboardingTable.style.display = 'none';
    if (mainTable) mainTable.style.display = 'none';
    if (applicantStatusSection) applicantStatusSection.style.display = 'block';
    
    captureApplicantsDataEnhanced();
    
    const p1AwaitingRows = [];
    const p1DeclaredRows = [];
    const p3AwaitingRows = [];
    const p3DeclaredRows = [];
    
    console.log(`Analyzing ${allMainRows.length} rows for P1/P3 statuses...`);
    
    // Enhanced row processing with comprehensive status detection
    allMainRows.forEach((row, index) => {
        const statusCell = row.querySelector('td:nth-child(5)');
        if (!statusCell) return;
        
        // Extract status from multiple sources
        let statusText = '';
        
        // Method 1: Check span element
        const statusSpan = statusCell.querySelector('span');
        if (statusSpan) {
            statusText = statusSpan.textContent.replace(/Status:\s*/g, '').trim();
        }
        
        // Method 2: Check data attributes
        if (!statusText) {
            statusText = row.getAttribute('data-status') || '';
        }
        
        // Method 3: Parse from cell text
        if (!statusText) {
            const cellText = statusCell.textContent.replace(/Status:\s*/g, '').trim();
            const statusMatch = cellText.match(/^([^]*?)(?:\s*(?:For Review|For Evaluation|Send Job Offer|Approve))/);
            statusText = statusMatch ? statusMatch[1].trim() : cellText.split('\n')[0].trim();
        }
        
        console.log(`Row ${index + 1}: Detected status = "${statusText}"`);
        
        const rowData = extractRowDataEnhanced(row, index);
        if (!rowData) return;
        
        // Ensure userId is set
        if (rowData.userId) {
            row.setAttribute('data-userid', rowData.userId);
        }
        
        // Enhanced status categorization including P3 statuses
        
        // P1 - Awaiting for Line Manager Action (with HR PASSED)
        if (statusText.includes('P1') && statusText.includes('Awaiting for Line Manager Action') && statusText.includes('HR PASSED')) {
            p1AwaitingRows.push(rowData);
            console.log(`✅ Added to P1 Awaiting: ${rowData.name} (${statusText})`);
        }
        // P1 - PASSED (Pending Finalization) - FIXED DETECTION
        else if (statusText.includes('P1') && statusText.includes('PASSED') && statusText.includes('Pending Finalization')) {
            p1DeclaredRows.push(rowData);
            console.log(`✅ Added to P1 Declared PASSED: ${rowData.name} (${statusText})`);
        }
        // P1 - FAILED (Pending Finalization) - FIXED DETECTION  
        else if (statusText.includes('P1') && statusText.includes('FAILED') && statusText.includes('Pending Finalization')) {
            p1DeclaredRows.push(rowData);
            console.log(`✅ Added to P1 Declared FAILED: ${rowData.name} (${statusText})`);
        }
        // P1 - PASSED (without "Pending") - Additional catch
        else if (statusText.includes('P1') && statusText.includes('PASSED') && !statusText.includes('Awaiting')) {
            p1DeclaredRows.push(rowData);
            console.log(`✅ Added to P1 Declared PASSED (Final): ${rowData.name} (${statusText})`);
        }
        // P1 - FAILED (without "Pending") - Additional catch
        else if (statusText.includes('P1') && statusText.includes('FAILED') && !statusText.includes('Awaiting')) {
            p1DeclaredRows.push(rowData);
            console.log(`✅ Added to P1 Declared FAILED (Final): ${rowData.name} (${statusText})`);
        }
        // ENHANCED: P3 - Line Manager Evaluation Accomplished (for P3 Awaiting)
        else if (statusText.includes('P3') && statusText.includes('Line Manager Evaluation Accomplished')) {
            p3AwaitingRows.push(rowData);
            console.log(`✅ Added to P3 Awaiting: ${rowData.name} (${statusText})`);
        }
        // ALTERNATIVE P3 Detection: Check for exact match
        else if (statusText === 'P3 - Line Manager Evaluation Accomplished') {
            p3AwaitingRows.push(rowData);
            console.log(`✅ Added to P3 Awaiting (exact match): ${rowData.name} (${statusText})`);
        }
        // ENHANCED: P3 - PASSED (Pending Finalization) (for P3 Declared)
        else if (statusText.includes('P3') && statusText.includes('PASSED') && statusText.includes('Pending Finalization')) {
            p3DeclaredRows.push(rowData);
            console.log(`✅ Added to P3 Declared PASSED: ${rowData.name} (${statusText})`);
        }
        // ENHANCED: P3 - FAILED (Pending Finalization) (for P3 Declared)
        else if (statusText.includes('P3') && statusText.includes('FAILED') && statusText.includes('Pending Finalization')) {
            p3DeclaredRows.push(rowData);
            console.log(`✅ Added to P3 Declared FAILED: ${rowData.name} (${statusText})`);
        }
        // P3 - PASSED (without "Pending") - Additional catch
        else if (statusText.includes('P3') && statusText.includes('PASSED') && !statusText.includes('Awaiting')) {
            p3DeclaredRows.push(rowData);
            console.log(`✅ Added to P3 Declared PASSED (Final): ${rowData.name} (${statusText})`);
        }
        // P3 - FAILED (without "Pending") - Additional catch
        else if (statusText.includes('P3') && statusText.includes('FAILED') && !statusText.includes('Awaiting')) {
            p3DeclaredRows.push(rowData);
            console.log(`✅ Added to P3 Declared FAILED (Final): ${rowData.name} (${statusText})`);
        }
        else {
            console.log(`❌ Row ${index + 1} not categorized: "${statusText}"`);
        }
    });

    console.log(`\n=== ENHANCED CATEGORIZATION RESULTS ===`);
    console.log(`P1 Awaiting: ${p1AwaitingRows.length}`);
    console.log(`P1 Declared: ${p1DeclaredRows.length}`);
    console.log(`P3 Awaiting: ${p3AwaitingRows.length}`);
    console.log(`P3 Declared: ${p3DeclaredRows.length}`);

    // ENHANCED: Table population with assessment data and no data messages
    populateP1AwaitingActionTableEnhanced(p1AwaitingRows);
    populateP1DeclaredResultsTableEnhanced(p1DeclaredRows);
    populateP3AwaitingActionTableEnhanced(p3AwaitingRows); // Enhanced with assessment data
    populateP3DeclaredResultsTableEnhanced(p3DeclaredRows); // Enhanced with assessment data
    
    // Update section visibilities
    updateP1P3SectionsVisibility(
        p1AwaitingRows.length > 0, 
        p1DeclaredRows.length > 0, 
        p3AwaitingRows.length > 0, 
        p3DeclaredRows.length > 0
    );
    
    // Update headers to show correct text
    updateSectionHeaders(p1DeclaredRows.length > 0, p3DeclaredRows.length > 0);
    
    // Fix scores and buttons
    setTimeout(() => {
        fixAllTableScores();
        fixChangeStatusButtons();
    }, 300);
    
    // Set up enhanced P3 filters after tables are populated
    setTimeout(() => {
        if (p3AwaitingRows.length > 0 || p3DeclaredRows.length > 0) {
            createP3FilterControls();
        }
    }, 500);
    
    highlightActiveFilter('forreview');
    updateSectionHeaderButtons();
}

function initializeApplicantTracker() {
  console.log("Initializing applicant tracker systems...");
  
  // Step 1: Load applicants data
  loadApplicantsData();
  
  // Step 2: Extract and build registries
  buildApplicantRegistry();
  extractScoresFromMainTable();
  captureInitialScreeningScores();
  
  // Step 3: Set up event listeners
  setupAllEventListeners();
  
  // Step 4: Initialize UI
  initializeUI();
  
  // Step 5: Fix any missing data with timeouts
  setTimeout(() => {
    ensureUserIdAttributes();
    fixAllTableScores();
    setupToggleStatusButtons();
  }, 500);
  
  setTimeout(() => {
    fixChangeStatusButtons();
    emergencyButtonFix();
  }, 1000);
  
  console.log("=== APPLICANT TRACKER INITIALIZATION COMPLETE ===");
}


// Enhanced P3 status change functions with assessment data awareness
function p3passApplicantEnhanced(userId) {
    console.log(`Enhanced P3 Pass: Starting pass action for userId: ${userId}`);
    
    if (!userId) {
        console.error('Enhanced P3 Pass: Missing userId');
        alert("Error: Invalid User ID");
        return;
    }

    // Show loading state
    const loadingIndicator = document.createElement('div');
    loadingIndicator.innerHTML = 'Processing...';
    loadingIndicator.style.cssText = 'position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: rgba(0,0,0,0.8); color: white; padding: 20px; border-radius: 5px; z-index: 10000;';
    document.body.appendChild(loadingIndicator);

    fetch('/linemanager/applicant-tracker-jobposition/markAsP3Passed', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId: userId }),
    })
    .then(response => {
        console.log(`Enhanced P3 Pass: API response status: ${response.status}`);
        return response.json();
    })
    .then(data => {
        console.log('Enhanced P3 Pass: API response data:', data);
        
        if (data.success) {
            if (!window.pendingStatusChanges) {
                window.pendingStatusChanges = {};
            }
            window.pendingStatusChanges[userId] = 'PASSED';
            
            // FIXED: Move row from awaiting to declared section with correct column structure
            moveP3RowToSectionEnhanced(userId, 'p3AwaitingActionTable', 'p3DeclaredResultsTable');
            
            console.log(`Enhanced P3 Pass: Successfully marked userId ${userId} as P3 PASSED!`);
            alert("Successfully marked applicant as P3 PASSED!");
            
        } else {
            console.error(`Enhanced P3 Pass: API error: ${data.message}`);
            alert("Error updating applicant status: " + (data.message || "Unknown error"));
        }
    })
    .catch(error => {
        console.error("Enhanced P3 Pass: Network error:", error);
        alert("Failed to update applicant status.");
    })
    .finally(() => {
        // Remove loading indicator
        if (document.body.contains(loadingIndicator)) {
            document.body.removeChild(loadingIndicator);
        }
    });
}

function p3rejectApplicantEnhanced(userId) {
    console.log(`Enhanced P3 Reject: Starting reject action for userId: ${userId}`);
    
    if (!userId) {
        console.error('Enhanced P3 Reject: Missing userId');
        alert("Error: Invalid User ID");
        return;
    }

    // Show loading state
    const loadingIndicator = document.createElement('div');
    loadingIndicator.innerHTML = 'Processing...';
    loadingIndicator.style.cssText = 'position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: rgba(0,0,0,0.8); color: white; padding: 20px; border-radius: 5px; z-index: 10000;';
    document.body.appendChild(loadingIndicator);

    fetch('/linemanager/applicant-tracker-jobposition/markAsP3Failed', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId: userId }),
    })
    .then(response => {
        console.log(`Enhanced P3 Reject: API response status: ${response.status}`);
        return response.json();
    })
    .then(data => {
        console.log('Enhanced P3 Reject: API response data:', data);
        
        if (data.success) {
            if (!window.pendingStatusChanges) {
                window.pendingStatusChanges = {};
            }
            window.pendingStatusChanges[userId] = 'FAILED';
            
            // FIXED: Move row from awaiting to declared section with correct column structure
            moveP3RowToSectionEnhanced(userId, 'p3AwaitingActionTable', 'p3DeclaredResultsTable');
            
            console.log(`Enhanced P3 Reject: Successfully marked userId ${userId} as P3 FAILED!`);
            alert("Successfully marked applicant as P3 FAILED!");
            
        } else {
            console.error(`Enhanced P3 Reject: API error: ${data.message}`);
            alert("Error updating applicant status: " + (data.message || "Unknown error"));
        }
    })
    .catch(error => {
        console.error("Enhanced P3 Reject: Network error:", error);
        alert("Failed to update applicant status.");
    })
    .finally(() => {
        // Remove loading indicator
        if (document.body.contains(loadingIndicator)) {
            document.body.removeChild(loadingIndicator);
        }
    });
}


// Enhanced row movement function that preserves assessment data
function moveP3RowToSectionEnhanced(userId, fromTableId, toTableId) {
    console.log(`Enhanced P3 Move: Moving userId ${userId} from ${fromTableId} to ${toTableId}`);
    
    const fromTable = document.getElementById(fromTableId);
    const toTable = document.getElementById(toTableId);
    
    if (!fromTable || !toTable) {
        console.error(`Enhanced P3 Move: Tables not found: ${fromTableId} or ${toTableId}`);
        return;
    }
    
    const rows = fromTable.querySelectorAll('tbody tr');
    let rowToMove = null;
    
    for (const row of rows) {
        if (row.getAttribute('data-userid') === userId) {
            rowToMove = row;
            break;
        }
    }
    
    if (!rowToMove) {
        console.error(`Enhanced P3 Move: Row for userId ${userId} not found in ${fromTableId}`);
        return;
    }
    
    // Find and update the status cell
    const cells = rowToMove.querySelectorAll('td');
    let statusCell = null;
    
    for (let i = 0; i < cells.length; i++) {
        if (cells[i].textContent.includes('Status:') || cells[i].textContent.includes('P3')) {
            statusCell = cells[i];
            break;
        }
    }
    
    if (statusCell) {
        const isPassed = window.pendingStatusChanges[userId] === 'PASSED';
        statusCell.innerHTML = `
            <span><strong>Status:</strong> P3 - ${isPassed ? 'PASSED' : 'FAILED'} (Pending Finalization)</span>
        `;
        console.log(`Enhanced P3 Move: Updated status cell to P3 - ${isPassed ? 'PASSED' : 'FAILED'}`);
    }
    
    // Add Actions column for declared results table if needed
    if (toTableId === 'p3DeclaredResultsTable') {
        const currentCells = rowToMove.querySelectorAll('td');
        // Check if we need to add an actions column (look for existing Change Status button)
        const hasActionsColumn = Array.from(currentCells).some(cell => 
            cell.textContent.includes('Change Status')
        );
        
        if (!hasActionsColumn) {
            const actionsCell = document.createElement('td');
            const isPassed = window.pendingStatusChanges[userId] === 'PASSED';
            actionsCell.innerHTML = `
                <button 
                    class="btn-change-status ${isPassed ? 'status-passed' : 'status-failed'}" 
                    data-userid="${userId}"
                    onclick="changeApplicantStatusP3Enhanced('${userId}')"
                >
                    Change Status
                </button>
            `;
            rowToMove.appendChild(actionsCell);
            console.log(`Enhanced P3 Move: Added change status button for userId ${userId}`);
        }
    }
    
    // Remove from source table
    rowToMove.remove();
    
    // Add to target table
    const targetTbody = toTable.querySelector('tbody');
    
    // Remove no data message if present
    const noDataRow = targetTbody.querySelector('.no-data-message')?.closest('tr');
    if (noDataRow) {
        noDataRow.remove();
    }
    
    targetTbody.appendChild(rowToMove);
    
    console.log(`Enhanced P3 Move: Successfully moved userId ${userId} to ${toTableId}`);
    
    // Update the finalize button visibility
    setTimeout(updateSectionHeaderButtons, 100);
}


// ============================
// FIXED P3 FINALIZATION PROCESS
// ============================


function startP3FinalizationProcess() {
    console.log("🎯 FIXED P3: Starting P3 finalization process");
    
    try {
        // First show the modal to inform user about the process
        const modal = document.getElementById('finalizeModalP3');
        if (modal) {
            modal.style.display = 'block';
            console.log("✅ P3 Modal displayed successfully");
        } else {
            // If modal doesn't exist, proceed directly to finalization
            console.log("⚠️ P3 Modal not found, proceeding directly to finalization");
            executeP3Finalization();
        }
    } catch (error) {
        console.error("❌ Error in P3 finalization process:", error);
        alert("Error starting P3 finalization process: " + error.message);
    }
}

function startP3GmailIntegrationFlow() {
    console.log("🎯 FIXED P3: Starting P3 Gmail integration flow from finalization modal");
    emailSendingState.phase = 'P3';
    emailSendingState.currentStep = 'initial';
    emailSendingState.passedSent = false;
    emailSendingState.failedSent = false;
    
    // Close the finalization modal first
    closeModal('finalizeModalP3');
    
    // Start the P3 review process
    executeP3Finalization();
}

async function executeP3Finalization() {
    console.log("🎯 FIXED P3: Starting P3 review finalization with Gmail compose integration...");

    try {
        const p3DeclaredResultsTable = document.getElementById("p3DeclaredResultsTable");
        if (!p3DeclaredResultsTable) {
            throw new Error("P3 declared results table not found. Please refresh the page and try again.");
        }

        const rows = p3DeclaredResultsTable.querySelectorAll('tbody tr:not(.section-header-row)') || [];
        console.log(`🎯 FIXED P3: Found ${rows.length} rows in P3 declared results table`);

        const passedUserIds = [];
        const failedUserIds = [];

        rows.forEach((row, index) => {
            // Skip rows with colspan (no data messages)
            if (row.querySelector('td[colspan]')) {
                console.log(`P3 Row ${index + 1}: Skipping colspan row (no data message)`);
                return;
            }
            
            const userId = row.getAttribute('data-userid');
            console.log(`P3 Row ${index + 1}: userId=${userId}`);
            
            if (!userId) {
                console.log(`❌ P3 Row ${index + 1}: No userId found`);
                return;
            }
            
            // Search for status in any column since P3 table structure may vary
            let statusCell = null;
            let statusText = '';
            
            // Try different column positions to find the status
            for (let colIndex = 1; colIndex <= 8; colIndex++) {
                const testCell = row.querySelector(`td:nth-child(${colIndex})`);
                if (testCell && (testCell.textContent.includes('Status:') || testCell.textContent.includes('P3'))) {
                    statusCell = testCell;
                    statusText = testCell.textContent.trim();
                    console.log(`✅ P3 Row ${index + 1}: Found status in column ${colIndex}: "${statusText}"`);
                    break;
                }
            }
            
            if (statusCell && statusText) {
                console.log(`P3 Row ${index + 1}: Processing status = "${statusText}"`);
                
                // Check for P3 statuses with flexible matching
                if (statusText.includes('P3')) {
                    if (statusText.includes('PASSED')) {
                        passedUserIds.push(userId);
                        console.log(`✅ Added ${userId} to P3 passed list (${statusText})`);
                    } else if (statusText.includes('FAILED')) {
                        failedUserIds.push(userId);
                        console.log(`✅ Added ${userId} to P3 failed list (${statusText})`);
                    } else {
                        console.log(`⚠️ P3 Row ${index + 1}: P3 status found but not PASSED/FAILED: "${statusText}"`);
                    }
                } else {
                    console.log(`⚠️ P3 Row ${index + 1}: No P3 status found: "${statusText}"`);
                }
            } else {
                console.log(`❌ P3 Row ${index + 1}: No status cell found`);
            }
        });

        console.log(`🎯 FIXED P3: Final counts - Passed: ${passedUserIds.length}, Failed: ${failedUserIds.length}`);

        if (passedUserIds.length === 0 && failedUserIds.length === 0) {
            throw new Error("No P3 applicants found with PASSED or FAILED status. Please mark some applicants first.");
        }

        console.log(`🎯 FIXED P3: Preparing P3 Gmail compose for: ${passedUserIds.length} passed, ${failedUserIds.length} failed`);

        // Store for later use
        window.p3EmailsToUpdate = {
            passed: passedUserIds,
            failed: failedUserIds
        };

        // Use the backend route to get applicant data
        const response = await fetch('/linemanager/applicant-tracker-jobposition/finalizeP3ReviewGmail', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                passedUserIds: passedUserIds,
                failedUserIds: failedUserIds
            }),
        });
        
        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message || 'Failed to fetch P3 applicant data');
        }
        
        // Get P3 email templates
        const templatesResponse = await fetch('/linemanager/applicant-tracker-jobposition/getP3EmailTemplates');
        const templatesData = await templatesResponse.json();
        
        if (!templatesData.success) {
            throw new Error('Failed to fetch P3 email templates');
        }
        
        // Store data globally
        window.currentP3PassedApplicants = data.passedApplicants || [];
        window.currentP3FailedApplicants = data.failedApplicants || [];
        window.p3EmailTemplates = templatesData.templates;
        
        console.log(`🎯 FIXED P3: Successfully loaded ${window.currentP3PassedApplicants.length} passed and ${window.currentP3FailedApplicants.length} failed P3 applicants`);
        console.log("🎯 FIXED P3: P3 Passed applicants:", window.currentP3PassedApplicants);
        console.log("🎯 FIXED P3: P3 Failed applicants:", window.currentP3FailedApplicants);
        
        // Start with passed applicants if any exist
        if (window.currentP3PassedApplicants.length > 0) {
            console.log("🎯 FIXED P3: Showing P3 passed email modal");
            showP3PassedEmailModal();
        } else if (window.currentP3FailedApplicants.length > 0) {
            console.log("🎯 FIXED P3: Showing P3 failed email modal");
            showP3FailedEmailModal();
        } else {
            console.error("🎯 FIXED P3: No applicant data found");
            throw new Error("No P3 applicant data found for email composition. Please check that applicant data is loaded properly.");
        }
        
    } catch (error) {
        console.error("🎯 FIXED P3: Error preparing P3 email composition:", error);
        alert("Error preparing P3 email composition: " + error.message + "\n\nPlease refresh the page and try again.");
    }
}

// ============================
// ADD THESE DEBUG FUNCTIONS FOR TESTING
// ============================

// Manual test for P1 finalization button
function testP1FinalizationButton() {
    console.log("🧪 Testing P1 finalization button...");
    
    const button = document.getElementById('finalizeP1Button');
    if (button) {
        console.log("✅ P1 button found, triggering click...");
        button.click();
    } else {
        console.log("❌ P1 button not found, looking for alternatives...");
        
        const altButtons = document.querySelectorAll('.set-finalize-review-button, button[class*="finalize"]');
        altButtons.forEach((btn, idx) => {
            if (btn.textContent.includes('P1') || btn.textContent.includes('Finalize P1')) {
                console.log(`Found alternative P1 button ${idx}, clicking...`);
                btn.click();
            }
        });
    }
}

// Manual test for P3 finalization button  
function testP3FinalizationButton() {
    console.log("🧪 Testing P3 finalization button...");
    
    const button = document.getElementById('finalizeP3Button');
    if (button) {
        console.log("✅ P3 button found, triggering click...");
        button.click();
    } else {
        console.log("❌ P3 button not found, looking for alternatives...");
        
        const altButtons = document.querySelectorAll('.set-finalize-review-button, button[class*="finalize"]');
        altButtons.forEach((btn, idx) => {
            if (btn.textContent.includes('P3') || btn.textContent.includes('Finalize P3')) {
                console.log(`Found alternative P3 button ${idx}, clicking...`);
                btn.click();
            }
        });
    }
}

// Test modal display directly
function testP1Modal() {
    console.log("🧪 Testing P1 modal display directly...");
    
    const modal = document.getElementById('finalizeModalP1');
    if (modal) {
        modal.style.display = 'block';
        console.log("✅ P1 Modal should be visible now");
    } else {
        console.log("❌ P1 Modal not found!");
    }
}

function testP3Modal() {
    console.log("🧪 Testing P3 modal display directly...");
    
    const modal = document.getElementById('finalizeModalP3');
    if (modal) {
        modal.style.display = 'block';
        console.log("✅ P3 Modal should be visible now");
    } else {
        console.log("❌ P3 Modal not found!");
    }
}

// Debug finalize button visibility
function debugFinalizeButtons() {
    console.log("🔍 Debugging finalize button visibility...");
    
    // Check P1 button
    const p1Button = document.getElementById('finalizeP1Button');
    console.log("P1 Button:", {
        exists: !!p1Button,
        visible: p1Button ? p1Button.offsetParent !== null : false,
        display: p1Button ? window.getComputedStyle(p1Button).display : 'N/A',
        text: p1Button ? p1Button.textContent : 'N/A'
    });
    
    // Check P3 button
    const p3Button = document.getElementById('finalizeP3Button');
    console.log("P3 Button:", {
        exists: !!p3Button,
        visible: p3Button ? p3Button.offsetParent !== null : false,
        display: p3Button ? window.getComputedStyle(p3Button).display : 'N/A',
        text: p3Button ? p3Button.textContent : 'N/A'
    });
    
    // Check containers
    const p1Container = document.getElementById('p1FinalizeButtonContainer');
    const p3Container = document.getElementById('p3FinalizeButtonContainer');
    
    console.log("P1 Container:", {
        exists: !!p1Container,
        visible: p1Container ? p1Container.offsetParent !== null : false,
        display: p1Container ? window.getComputedStyle(p1Container).display : 'N/A'
    });
    
    console.log("P3 Container:", {
        exists: !!p3Container,
        visible: p3Container ? p3Container.offsetParent !== null : false,
        display: p3Container ? window.getComputedStyle(p3Container).display : 'N/A'
    });
    
    // Check modals
    const p1Modal = document.getElementById('finalizeModalP1');
    const p3Modal = document.getElementById('finalizeModalP3');
    
    console.log("P1 Modal:", {
        exists: !!p1Modal,
        display: p1Modal ? p1Modal.style.display : 'N/A'
    });
    
    console.log("P3 Modal:", {
        exists: !!p3Modal,
        display: p3Modal ? p3Modal.style.display : 'N/A'
    });
}

// Force show finalize buttons for testing
function forceShowFinalizeButtons() {
    console.log("🔧 Force showing finalize buttons...");
    
    const p1Container = document.getElementById('p1FinalizeButtonContainer');
    const p3Container = document.getElementById('p3FinalizeButtonContainer');
    
    if (p1Container) {
        p1Container.style.display = 'block';
        console.log("✅ Forced P1 container to show");
    }
    
    if (p3Container) {
        p3Container.style.display = 'block';
        console.log("✅ Forced P3 container to show");
    }
    
    setTimeout(() => {
        debugFinalizeButtons();
    }, 500);
}

// Make debug functions globally available
window.testP1FinalizationButton = testP1FinalizationButton;
window.testP3FinalizationButton = testP3FinalizationButton;
window.testP1Modal = testP1Modal;
window.testP3Modal = testP3Modal;
window.debugFinalizeButtons = debugFinalizeButtons;
window.forceShowFinalizeButtons = forceShowFinalizeButtons;
async function finalizeP3ReviewForGmail() {
    console.log("🎯 FIXED P3: Starting P3 review finalization with Gmail compose integration...");

    const p3DeclaredResultsTable = document.getElementById("p3DeclaredResultsTable");
    if (!p3DeclaredResultsTable) {
        console.error("❌ P3 declared results table not found");
        alert("P3 declared results table not found. Please refresh the page and try again.");
        return;
    }

    const rows = p3DeclaredResultsTable.querySelectorAll('tbody tr:not(.section-header-row)') || [];
    console.log(`🎯 FIXED P3: Found ${rows.length} rows in P3 declared results table`);

    const passedUserIds = [];
    const failedUserIds = [];

    rows.forEach((row, index) => {
        // Skip rows with colspan (no data messages)
        if (row.querySelector('td[colspan]')) {
            console.log(`P3 Row ${index + 1}: Skipping colspan row (no data message)`);
            return;
        }
        
        const userId = row.getAttribute('data-userid');
        console.log(`P3 Row ${index + 1}: userId=${userId}`);
        
        if (!userId) {
            console.log(`❌ P3 Row ${index + 1}: No userId found`);
            return;
        }
        
        // Search for status in any column since P3 table structure may vary
        let statusCell = null;
        let statusText = '';
        
        // Try different column positions to find the status
        for (let colIndex = 1; colIndex <= 8; colIndex++) {
            const testCell = row.querySelector(`td:nth-child(${colIndex})`);
            if (testCell && (testCell.textContent.includes('Status:') || testCell.textContent.includes('P3'))) {
                statusCell = testCell;
                statusText = testCell.textContent.trim();
                console.log(`✅ P3 Row ${index + 1}: Found status in column ${colIndex}: "${statusText}"`);
                break;
            }
        }
        
        if (statusCell && statusText) {
            console.log(`P3 Row ${index + 1}: Processing status = "${statusText}"`);
            
            // Check for P3 statuses with flexible matching
            if (statusText.includes('P3')) {
                if (statusText.includes('PASSED')) {
                    passedUserIds.push(userId);
                    console.log(`✅ Added ${userId} to P3 passed list (${statusText})`);
                } else if (statusText.includes('FAILED')) {
                    failedUserIds.push(userId);
                    console.log(`✅ Added ${userId} to P3 failed list (${statusText})`);
                } else {
                    console.log(`⚠️ P3 Row ${index + 1}: P3 status found but not PASSED/FAILED: "${statusText}"`);
                }
            } else {
                console.log(`⚠️ P3 Row ${index + 1}: No P3 status found: "${statusText}"`);
            }
        } else {
            console.log(`❌ P3 Row ${index + 1}: No status cell found`);
        }
    });

    console.log(`🎯 FIXED P3: Final counts - Passed: ${passedUserIds.length}, Failed: ${failedUserIds.length}`);

    if (passedUserIds.length === 0 && failedUserIds.length === 0) {
        alert("No P3 applicants found with PASSED or FAILED status. Please mark some applicants first.");
        return;
    }

    console.log(`🎯 FIXED P3: Preparing P3 Gmail compose for: ${passedUserIds.length} passed, ${failedUserIds.length} failed`);

    // Store for later use
    window.p3EmailsToUpdate = {
        passed: passedUserIds,
        failed: failedUserIds
    };

    // Use the backend route to get applicant data
    try {
        const response = await fetch('/linemanager/applicant-tracker-jobposition/finalizeP3ReviewGmail', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                passedUserIds: passedUserIds,
                failedUserIds: failedUserIds
            }),
        });
        
        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message || 'Failed to fetch P3 applicant data');
        }
        
        // Get P3 email templates
        const templatesResponse = await fetch('/linemanager/applicant-tracker-jobposition/getP3EmailTemplates');
        const templatesData = await templatesResponse.json();
        
        if (!templatesData.success) {
            throw new Error('Failed to fetch P3 email templates');
        }
        
        // Store data globally
        window.currentP3PassedApplicants = data.passedApplicants || [];
        window.currentP3FailedApplicants = data.failedApplicants || [];
        window.p3EmailTemplates = templatesData.templates;
        
        console.log(`🎯 FIXED P3: Successfully loaded ${window.currentP3PassedApplicants.length} passed and ${window.currentP3FailedApplicants.length} failed P3 applicants`);
        console.log("🎯 FIXED P3: P3 Passed applicants:", window.currentP3PassedApplicants);
        console.log("🎯 FIXED P3: P3 Failed applicants:", window.currentP3FailedApplicants);
        
        // Start with passed applicants if any exist
        if (window.currentP3PassedApplicants.length > 0) {
            console.log("🎯 FIXED P3: Showing P3 passed email modal");
            showP3PassedEmailModal();
        } else if (window.currentP3FailedApplicants.length > 0) {
            console.log("🎯 FIXED P3: Showing P3 failed email modal");
            showP3FailedEmailModal();
        } else {
            console.error("🎯 FIXED P3: No applicant data found");
            alert("No P3 applicant data found for email composition. Please check that applicant data is loaded properly.");
        }
        
    } catch (error) {
        console.error("🎯 FIXED P3: Error preparing P3 email composition:", error);
        alert("Error preparing P3 email composition: " + error.message + "\n\nPlease refresh the page and try again.");
    }
}


function finalizeP3ReviewEnhanced() {
    console.log("Starting enhanced P3 review finalization with Gmail compose integration...");

    const p3DeclaredResultsTable = document.getElementById("p3DeclaredResultsTable");
    const rows = p3DeclaredResultsTable?.querySelectorAll('tbody tr:not(.section-header-row)') || [];

    const passedUserIds = [];
    const failedUserIds = [];

    rows.forEach(row => {
        if (row.querySelector('td[colspan]')) return;
        
        // Updated for enhanced table structure (status is now in column 7)
        const statusCell = row.querySelector('td:nth-child(7)');
        const userId = row.getAttribute('data-userid');
        
        if (statusCell && userId) {
            const statusText = statusCell.textContent.trim();
            
            if (statusText.includes('P3')) {
                if (statusText.includes('PASSED')) {
                    passedUserIds.push(userId);
                    console.log(`Added ${userId} to P3 passed list (${statusText})`);
                } else if (statusText.includes('FAILED')) {
                    failedUserIds.push(userId);
                    console.log(`Added ${userId} to P3 failed list (${statusText})`);
                }
            }
        }
    });

    if (passedUserIds.length === 0 && failedUserIds.length === 0) {
        alert("No P3 applicants found with PASSED or FAILED status.");
        return;
    }

    console.log(`Preparing enhanced P3 Gmail compose for: ${passedUserIds.length} passed, ${failedUserIds.length} failed`);

    p3EmailsToUpdate = {
        passed: passedUserIds,
        failed: failedUserIds
    };

    Promise.all([
        fetchP3ApplicantDataForEmails(passedUserIds, failedUserIds),
        fetchP3EmailTemplates()
    ])
    .then(([applicantData, templates]) => {
        currentP3PassedApplicants = applicantData.passedApplicants || [];
        currentP3FailedApplicants = applicantData.failedApplicants || [];
        
        if (currentP3PassedApplicants.length > 0) {
            showP3PassedEmailModal();
        } else if (currentP3FailedApplicants.length > 0) {
            showP3FailedEmailModal();
        } else {
            alert("No P3 applicant data found for email composition.");
        }
    })
    .catch(error => {
        console.error("Error preparing enhanced P3 email composition:", error);
        alert("Error preparing P3 email composition: " + error.message);
    });
}

function processEmailTemplateWithFormatting(template, applicantName, jobTitle, companyName) {
    console.log(`📧 FIXED: Processing email template with formatting preservation`);
    
    // Replace placeholders while preserving formatting
    let processedTemplate = template
        .replace(/\{applicantName\}/g, applicantName || 'Applicant')
        .replace(/\{jobTitle\}/g, jobTitle || 'Position')
        .replace(/\{companyName\}/g, companyName || 'Company ABC');
    
    console.log(`📧 FIXED: Template processed successfully with preserved formatting`);
    
    return processedTemplate;
}

// Make enhanced functions globally available
window.handleReviewFilterEnhanced = handleReviewFilterEnhanced;
window.p3passApplicantEnhanced = p3passApplicantEnhanced;
window.p3rejectApplicantEnhanced = p3rejectApplicantEnhanced;
window.changeApplicantStatusP3Enhanced = changeApplicantStatusP3Enhanced;
window.moveP3RowToSectionEnhanced = moveP3RowToSectionEnhanced;
window.startP3GmailIntegrationFlowEnhanced = startP3GmailIntegrationFlowEnhanced;
window.finalizeP3ReviewEnhanced = finalizeP3ReviewEnhanced;
window.showP3FailedEmailModal = showP3FailedEmailModal;
window.openGmailForP3Passed = openGmailForP3Passed;
window.openGmailForP3Failed = openGmailForP3Failed;
console.log('✅ FIXED: Email template formatting functions loaded - line breaks and spacing will be preserved');

window.processEmailTemplateWithFormatting = processEmailTemplateWithFormatting;
window.buildGmailComposeUrl = buildGmailComposeUrl;
window.showP3DatabaseUpdateConfirmationModal = showP3DatabaseUpdateConfirmationModal;

window.showP3StatusUpdateModal = showP3StatusUpdateModal;
window.executeP3DatabaseUpdate = executeP3DatabaseUpdate;
window.skipToP3Database = skipToP3Database;
window.markP3EmailsAsSent = markP3EmailsAsSent;
window.proceedWithP3FailedEmails = proceedWithP3FailedEmails;
window.updateP3ApplicantStatuses = updateP3ApplicantStatuses;
window.fetchP3ApplicantDataForEmails = fetchP3ApplicantDataForEmails;
window.fetchP3EmailTemplates = fetchP3EmailTemplates;
window.finalizeP3ReviewForGmail = finalizeP3ReviewForGmail;
window.checkAllP3ApplicantsMarked = checkAllP3ApplicantsMarked;
window.populateP1DeclaredResultsTableEnhanced = populateP1DeclaredResultsTableEnhanced;

console.log('✅ FIXED: P3 data fetching functions with local data fallback loaded successfully');
console.log('✅ UPDATED: Complete Template and Gmail Functions loaded successfully');
console.log('✅ Enhanced P3 Integration with Assessment Data loaded successfully');
console.log('✅ COMPLETE P3 FUNCTIONS: All P3 functions loaded and globally available');
console.log('🎯 P3 READY: You can now use "Finalize P3 Review" without errors');

// Enhanced force refresh function
async function forceRefreshWorkSetupDataFixed() {
    console.log("🔧 FIXED: === FORCING REFRESH OF WORK SETUP DATA WITH CORRECT LOGIC ===");
    
    const tables = [
        document.getElementById('p1AwaitingActionTable'),
        document.getElementById('p1DeclaredResultsTable')
    ].filter(table => table !== null);
    
    for (const table of tables) {
        console.log(`🔧 FIXED: Processing table: ${table.id}`);
        const rows = table.querySelectorAll('tbody tr');
        
        for (const row of rows) {
            if (row.querySelector('td[colspan]')) continue;
            
            const userId = row.getAttribute('data-userid');
            if (userId && userId !== 'undefined') {
                // Remove the enhanced flag to force re-processing with FIXED logic
                row.removeAttribute('data-worksetup-enhanced');
                
                // Re-enhance the row with FIXED boolean logic
                await enhanceRowWithWorkSetupDataFixed(row);
            }
        }
    }
    
    console.log("✅ FIXED: Force refresh completed with correct boolean logic");
}



// FIXED: Test function for Work Setup logic
function testWorkSetupLogicFixed() {
    console.log("=== TESTING FIXED WORK SETUP LOGIC ===");
    
    const testCases = [
        { workSetup: true, availability: true, expected: 'PASSED' },
        { workSetup: true, availability: false, expected: 'FAILED' },
        { workSetup: false, availability: true, expected: 'FAILED' },
        { workSetup: false, availability: false, expected: 'FAILED' },
        { workSetup: 'true', availability: 'true', expected: 'PASSED' },
        { workSetup: 'true', availability: 'false', expected: 'FAILED' },
        { workSetup: 'false', availability: 'true', expected: 'FAILED' },
        { workSetup: 'false', availability: 'false', expected: 'FAILED' },
        { workSetup: '1', availability: '1', expected: 'PASSED' },
        { workSetup: '1', availability: '0', expected: 'FAILED' },
        { workSetup: '0', availability: '1', expected: 'FAILED' },
        { workSetup: 'N/A', availability: 'N/A', expected: 'FAILED' },
        { workSetup: null, availability: true, expected: 'FAILED' },
        { workSetup: undefined, availability: true, expected: 'FAILED' }
    ];
    
    console.log("Testing all possible combinations:");
    testCases.forEach((testCase, index) => {
        // Apply the FIXED logic
        const workSetupPassed = (testCase.workSetup === true || testCase.workSetup === 'true' || testCase.workSetup === '1');
        const availabilityPassed = (testCase.availability === true || testCase.availability === 'true' || testCase.availability === '1');
        const result = workSetupPassed && availabilityPassed;
        const resultText = result ? 'PASSED' : 'FAILED';
        const isCorrect = resultText === testCase.expected;
        
        console.log(`Test ${index + 1}: workSetup=${testCase.workSetup}, availability=${testCase.availability}`);
        console.log(`  Expected: ${testCase.expected}, Got: ${resultText} ${isCorrect ? '✅' : '❌'}`);
        
        if (!isCorrect) {
            console.error(`  ❌ LOGIC ERROR: Check the boolean evaluation!`);
        }
    });
}

// FIXED: Add this new function to initialize P3 View Evaluation buttons
function initializeP3ViewEvaluationButtons() {
  console.log("🔧 FIXED: Initializing P3 View Evaluation buttons");
  
  // Find all P3 View Evaluation buttons and ensure they have correct applicantId
  const viewEvalButtons = document.querySelectorAll('.btn-view-evaluation');
  
  viewEvalButtons.forEach((button, index) => {
    const onclick = button.getAttribute('onclick');
    if (onclick && onclick.includes('viewP3Evaluation')) {
      console.log(`🔧 FIXED: Found P3 View Evaluation button ${index + 1}: ${onclick}`);
      
      // Extract userId from button context
      const row = button.closest('tr');
      if (row) {
        const userId = row.getAttribute('data-userid');
        if (userId && window.applicantsData) {
          const applicantData = window.applicantsData.find(a => a.userId === userId);
          if (applicantData && applicantData.applicantId) {
            // Update button with correct applicantId
            button.setAttribute('onclick', `viewP3Evaluation('${applicantData.applicantId}', '${userId}')`);
            console.log(`✅ FIXED: Updated button with applicantId: ${applicantData.applicantId}`);
          }
        }
      }
    }
  });
}


async function debugWorkSetupLogicFixed() {
  console.log("🔧 FIXED: === DEBUGGING WORK SETUP BOOLEAN LOGIC ===");
  
  const table = document.getElementById('p1AwaitingActionTable') || document.getElementById('p1DeclaredResultsTable');
  if (!table) {
    console.log("❌ No P1 table found");
    return;
  }
  
  const rows = table.querySelectorAll('tbody tr');
  
  for (const row of rows) {
    if (row.querySelector('td[colspan]')) continue;
    
    const userId = row.getAttribute('data-userid');
    const nameCell = row.querySelector('td:nth-child(2)');
    const name = nameCell ? nameCell.textContent.split('\n')[0].trim() : 'Unknown';
    
    if (userId && userId !== 'undefined') {
      console.log(`\n🔧 FIXED: --- Testing Boolean Logic for ${name} (${userId}) ---`);
      
      try {
        const response = await fetch(`/linemanager/get-assessment/${userId}`);
        if (response.ok) {
          const data = await response.json();
          
          if (data.success && data.combinedData && data.combinedData.scores) {
            const workSetup = data.combinedData.scores.workSetup;
            const availability = data.combinedData.scores.availability;
            
            console.log(`🔧 FIXED: Raw values:`);
            console.log(`  workSetup: ${workSetup} (type: ${typeof workSetup})`);
            console.log(`  availability: ${availability} (type: ${typeof availability})`);
            
            // Apply the FIXED logic
            const workSetupPassed = (workSetup === true || workSetup === 'true');
            const availabilityPassed = (availability === true || availability === 'true');
            const overallPassed = workSetupPassed && availabilityPassed;
            
            console.log(`🔧 FIXED: Boolean evaluation:`);
            console.log(`  workSetup passed: ${workSetupPassed}`);
            console.log(`  availability passed: ${availabilityPassed}`);
            console.log(`  OVERALL RESULT: ${overallPassed ? '✅ PASSED' : '❌ FAILED'}`);
            
            // Check what's currently displayed in the UI
            const workSetupCell = row.querySelector('td:nth-child(6)');
            if (workSetupCell) {
              console.log(`  Current UI display: ${workSetupCell.textContent}`);
              
              // Update if incorrect
              if ((overallPassed && workSetupCell.textContent.includes('Failed')) ||
                  (!overallPassed && workSetupCell.textContent.includes('Passed'))) {
                console.log(`🔧 FIXED: UI shows wrong result, updating...`);
                workSetupCell.innerHTML = `<span class="${overallPassed ? 'criteria-passed' : 'criteria-failed'}" style="color: ${overallPassed ? 'green' : 'red'}; font-weight: bold;">${overallPassed ? 'Passed' : 'Failed'}</span>`;
              }
            }
            
          } else {
            console.log("❌ No score data available");
          }
        } else {
          console.log(`❌ API call failed: ${response.status}`);
        }
      } catch (error) {
        console.log(`❌ Error: ${error.message}`);
      }
    }
  }
}

// Make function globally available
window.debugWorkSetupLogicFixed = debugWorkSetupLogicFixed;

function loadApplicantsData() {
  try {
    const dataScript = document.getElementById('applicants-data');
    if (dataScript) {
      window.applicantsData = JSON.parse(dataScript.textContent);
      console.log(`Loaded ${window.applicantsData.length} applicants from embedded data`);
      
      // Create mappings
      window.applicantsData.forEach(applicant => {
        if (applicant.userId) {
          const fullName = `${applicant.lastName}, ${applicant.firstName}`;
          window.applicantNameMapping[fullName] = applicant.userId;
          window.nameToUserId[fullName] = applicant.userId;
          window.mainTableUserIds[fullName] = applicant.userId;
          
          if (applicant.initialScreeningAssessment && 
              applicant.initialScreeningAssessment.totalScore !== 'N/A') {
            window.applicantsScores[applicant.userId] = applicant.initialScreeningAssessment.totalScore;
            window.mainTableScores[fullName] = applicant.initialScreeningAssessment.totalScore;
            window.mainTableScores[applicant.userId] = applicant.initialScreeningAssessment.totalScore;
          }

          window.applicantRegistry[applicant.userId] = {
            userId: applicant.userId,
            fullName: fullName,
            email: applicant.userEmail || '',
            department: applicant.deptName || '',
            position: applicant.jobTitle || '',
            status: applicant.applicantStatus || '',
            score: applicant.initialScreeningAssessment?.totalScore || 'N/A'
          };
        }
      });
      
      return true;
    }
  } catch (error) {
    console.error("Error loading applicants data:", error);
  }
  return false;
}

function ensureUserIdAttributes() {
  console.log("Ensuring userId attributes are set on all rows and buttons...");
  
  const reviewButtons = document.querySelectorAll('.btn-review[onclick*="lineManagerInitialScreeningModal"]');
  console.log(`Found ${reviewButtons.length} review buttons to extract userIds from`);
  
  reviewButtons.forEach(button => {
    const onclick = button.getAttribute('onclick') || '';
    const match = onclick.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
    
    if (match && match[1]) {
      const userId = match[1];
      const row = button.closest('tr');
      
      if (row) {
        row.setAttribute('data-userid', userId);
        if (!button.getAttribute('data-userid')) {
          button.setAttribute('data-userid', userId);
        }
        
        const nameCell = row.querySelector('td:nth-child(2)');
        if (nameCell) {
          const fullName = nameCell.textContent.split('\n')[0].trim();
          window.nameToUserId[fullName] = userId;
          window.applicantNameMapping[fullName] = userId;
          window.mainTableUserIds[fullName] = userId;
          
          const scoreMatch = onclick.match(/},\s*['"]([^'"]*)['"]/);
          if (scoreMatch && scoreMatch[1]) {
            const score = scoreMatch[1];
            window.applicantsScores[userId] = score;
            window.mainTableScores[userId] = score;
            window.mainTableScores[fullName] = score;
            row.setAttribute('data-score', score);
          }
        }
      }
    }
  });
  
  // Fix change status buttons
  const changeButtons = document.querySelectorAll('.btn-change-status');
  changeButtons.forEach((button, index) => {
    let userId = button.getAttribute('data-userid');
    
    if (!userId || userId === 'undefined' || userId === '') {
      const row = button.closest('tr');
      if (row) {
        userId = row.getAttribute('data-userid');
        
        if (userId && userId !== 'undefined' && userId !== '') {
          button.setAttribute('data-userid', userId);
          button.setAttribute('onclick', `changeApplicantStatus('${userId}')`);
        } else {
          const nameCell = row.querySelector('td:nth-child(2)');
          if (nameCell) {
            const fullName = nameCell.textContent.split('\n')[0].trim();
            
            if (window.nameToUserId[fullName]) {
              userId = window.nameToUserId[fullName];
              row.setAttribute('data-userid', userId);
              button.setAttribute('data-userid', userId);
              button.setAttribute('onclick', `changeApplicantStatus('${userId}')`);
            }
          }
        }
      }
    }
  });
}

// ============================
// EVENT LISTENERS SETUP
// ============================

function setupAllEventListeners() {
  console.log("Setting up all event listeners...");
  
  // Filter buttons
  const filterAllButton = document.getElementById("filter-all");
  const filterForReviewButton = document.getElementById("filter-forreview");
  const filterForEvaluationButton = document.getElementById("filter-forevaluation");
  const filterForOnboardingButton = document.getElementById("filter-foronboarding");
  
  if (filterAllButton) filterAllButton.addEventListener("click", () => filterRowsByStatus("all"));
  if (filterForReviewButton) filterForReviewButton.addEventListener("click", () => filterRowsByStatus("forreview"));
  if (filterForEvaluationButton) filterForEvaluationButton.addEventListener("click", () => filterRowsByStatus("forevaluation"));
  if (filterForOnboardingButton) filterForOnboardingButton.addEventListener("click", () => filterRowsByStatus("foronboarding"));
  
  // Search functionality
  const searchBar = document.getElementById("searchBar");
  const searchButton = document.querySelector(".search-button");
  
  if (searchBar && searchButton) {
    searchButton.addEventListener("click", filterTable);
    searchBar.addEventListener("keypress", function(e) {
      if (e.key === "Enter") {
        e.preventDefault();
        filterTable();
      }
    });
  }
  
  // Sort options
  const sortOptions = document.getElementById("sortOptions");
  if (sortOptions) {
    sortOptions.addEventListener("change", function() {
      sortDeclaredResults(this.value);
    });
  }
  
  // Modal event listeners
  setupModalEventListeners();
  
  // Gmail integration buttons
  setupGmailEventListeners();
}
function setupGmailEventListeners() {
    console.log("🔧 Setting up Gmail event listeners...");
    
    // Wait for DOM to be ready
    setTimeout(() => {
        // P1 Gmail buttons
        const p1PassedButton = document.querySelector('#emailPassedModal button[onclick*="openGmailForPassed"]');
        if (p1PassedButton) {
            p1PassedButton.addEventListener('click', openGmailForPassed);
        }
        
        const p1FailedButton = document.querySelector('#emailFailedModal button[onclick*="openGmailForFailed"]');
        if (p1FailedButton) {
            p1FailedButton.addEventListener('click', openGmailForFailed);
        }
        
        // P3 Gmail buttons
        const p3PassedButton = document.querySelector('#emailP3PassedModal button[onclick*="openGmailForP3Passed"]');
        if (p3PassedButton) {
            p3PassedButton.addEventListener('click', openGmailForP3Passed);
        }
        
        const p3FailedButton = document.querySelector('#emailP3FailedModal button[onclick*="openGmailForP3Failed"]');
        if (p3FailedButton) {
            p3FailedButton.addEventListener('click', openGmailForP3Failed);
        }
        
        console.log("✅ Gmail event listeners setup complete");
    }, 2000);
}

function setupModalEventListeners() {
  // Close modal when the close button is clicked
  const closeButton = document.querySelector('.review-close-button');
  if (closeButton) {
    closeButton.addEventListener('click', function () {
      document.getElementById('lineManagerInitialScreeningModalHtml').style.display = 'none';
    });
  }
  
  // Close modal if clicked outside the modal content
  window.addEventListener('click', function (event) {
    const modal = document.getElementById('lineManagerInitialScreeningModalHtml');
    if (event.target === modal) {
      modal.style.display = 'none';
    }
  });
  
  // Close buttons for all modals
  document.querySelectorAll('.close-button').forEach(button => {
    button.addEventListener('click', function() {
      const modalId = this.closest('.modal').id;
      document.getElementById(modalId).style.display = 'none';
    });
  });
  
  // Back buttons for all modals
  document.querySelectorAll('.back-button, .review-modal-back-button').forEach(button => {
    button.addEventListener('click', function() {
      const modalId = this.closest('.modal')?.id || this.closest('.review-modal')?.id;
      if (modalId) {
        document.getElementById(modalId).style.display = 'none';
      }
    });
  });
}


function initializeUI() {
  console.log("Initializing UI components...");
  
  // Show all by default
  filterRowsByStatus("all");
  
  // Enhance tables
  ensureTableHeaders();
  
  // Enhance buttons
  enhanceApplicantTable();
  enhanceForReviewButtons();
  
  // Set initial filter
  highlightActiveFilter('all');
}

// ============================
// CORE FILTER FUNCTIONS
// ============================

function filterRowsByStatus(status) {
  console.log("=== FILTERING BY STATUS:", status, "===");
  
  const mainTable = document.getElementById('mainApplicantTable');
  const onboardingTable = document.getElementById('onboardingTable');
  const onboardingHeader = document.getElementById('onboardingHeader');
  const applicantStatusSection = document.getElementById('applicantStatusSection');

  const allMainRows = mainTable ? Array.from(mainTable.querySelectorAll('tbody tr')) : [];
  const allOnboardingRows = onboardingTable ? Array.from(onboardingTable.querySelectorAll('tbody tr')) : [];

  // Always hide evaluation section first
  hideEvaluationSection();

  if (status === 'all') {
    if (applicantStatusSection) applicantStatusSection.style.display = 'none';
    if (mainTable) mainTable.style.display = '';
    allMainRows.forEach(row => row.style.display = '');
    if (onboardingHeader) onboardingHeader.style.display = 'block';
    if (onboardingTable) onboardingTable.style.display = 'table';
    filterOnboardingRowsByStatus(allOnboardingRows);
    highlightActiveFilter(status);
    return;
  }

  // Hide main table for specific filters
  if (mainTable) mainTable.style.display = '';
  allMainRows.forEach(row => row.style.display = 'none');

  // Handle specific filters
  if (status === 'forreview') {
    if (applicantStatusSection) applicantStatusSection.style.display = 'block';
    if (onboardingHeader) onboardingHeader.style.display = 'block';
    if (onboardingTable) onboardingTable.style.display = 'table';
    filterOnboardingRowsByStatus(allOnboardingRows);
    handleReviewFilter(mainTable, applicantStatusSection, allMainRows);
  } else if (status === 'forevaluation') {
    if (applicantStatusSection) applicantStatusSection.style.display = 'none';
    if (onboardingHeader) onboardingHeader.style.display = 'block';
    if (onboardingTable) onboardingTable.style.display = 'table';
    filterOnboardingRowsByStatus(allOnboardingRows);
    handleEvaluationFilter(onboardingHeader, onboardingTable, allMainRows);
  } else if (status === 'foronboarding') {
    if (applicantStatusSection) applicantStatusSection.style.display = 'none';
    if (onboardingHeader) onboardingHeader.style.display = 'block';
    if (onboardingTable) onboardingTable.style.display = 'table';
    filterOnboardingRowsByStatus(allOnboardingRows);
    handleOnboardingFilter(applicantStatusSection, onboardingHeader, onboardingTable, allOnboardingRows);
  }

  highlightActiveFilter(status);
}

// ============================
// REVIEW FILTER - FIXED VERSION
// ============================

function handleReviewFilter(mainTable, applicantStatusSection, allMainRows) {
  console.log("=== ENHANCED P1/P3 REVIEW FILTER - FIXED VERSION ===");
  
  hideEvaluationSection();
  
  const onboardingHeader = document.getElementById('onboardingHeader');
  const onboardingTable = document.getElementById('onboardingTable');
  
  if (onboardingHeader) onboardingHeader.style.display = 'none';
  if (onboardingTable) onboardingTable.style.display = 'none';
  if (mainTable) mainTable.style.display = 'none';
  if (applicantStatusSection) applicantStatusSection.style.display = 'block';
  
  captureApplicantsDataEnhanced();
  
  const p1AwaitingRows = [];
  const p1DeclaredRows = [];
  const p3AwaitingRows = [];
  const p3DeclaredRows = [];
  
  console.log(`Analyzing ${allMainRows.length} rows for P1/P3 statuses...`);
  
  // FIXED: Enhanced row processing with comprehensive status detection
  allMainRows.forEach((row, index) => {
    const statusCell = row.querySelector('td:nth-child(5)');
    if (!statusCell) return;
    
    // Extract status from multiple sources
    let statusText = '';
    
    // Method 1: Check span element
    const statusSpan = statusCell.querySelector('span');
    if (statusSpan) {
      statusText = statusSpan.textContent.replace(/Status:\s*/g, '').trim();
    }
    
    // Method 2: Check data attributes
    if (!statusText) {
      statusText = row.getAttribute('data-status') || '';
    }
    
    // Method 3: Parse from cell text
    if (!statusText) {
      const cellText = statusCell.textContent.replace(/Status:\s*/g, '').trim();
      const statusMatch = cellText.match(/^([^]*?)(?:\s*(?:For Review|For Evaluation|Send Job Offer|Approve))/);
      statusText = statusMatch ? statusMatch[1].trim() : cellText.split('\n')[0].trim();
    }
    
    console.log(`Row ${index + 1}: Detected status = "${statusText}"`);
    
    const rowData = extractRowDataEnhanced(row, index);
    if (!rowData) return;
    
    // Ensure userId is set
    if (rowData.userId) {
      row.setAttribute('data-userid', rowData.userId);
    }
    
    // FIXED: Comprehensive status categorization including P3 statuses
    
    // P1 - Awaiting for Line Manager Action (with HR PASSED)
    if (statusText.includes('P1') && statusText.includes('Awaiting for Line Manager Action') && statusText.includes('HR PASSED')) {
      p1AwaitingRows.push(rowData);
      console.log(`✅ Added to P1 Awaiting: ${rowData.name} (${statusText})`);
    }
    // P1 - PASSED (Pending Finalization) - FIXED DETECTION
    else if (statusText.includes('P1') && statusText.includes('PASSED') && statusText.includes('Pending Finalization')) {
      p1DeclaredRows.push(rowData);
      console.log(`✅ Added to P1 Declared PASSED: ${rowData.name} (${statusText})`);
    }
    // P1 - FAILED (Pending Finalization) - FIXED DETECTION  
    else if (statusText.includes('P1') && statusText.includes('FAILED') && statusText.includes('Pending Finalization')) {
      p1DeclaredRows.push(rowData);
      console.log(`✅ Added to P1 Declared FAILED: ${rowData.name} (${statusText})`);
    }
    // P1 - PASSED (without "Pending") - Additional catch
    else if (statusText.includes('P1') && statusText.includes('PASSED') && !statusText.includes('Awaiting')) {
      p1DeclaredRows.push(rowData);
      console.log(`✅ Added to P1 Declared PASSED (Final): ${rowData.name} (${statusText})`);
    }
    // P1 - FAILED (without "Pending") - Additional catch
    else if (statusText.includes('P1') && statusText.includes('FAILED') && !statusText.includes('Awaiting')) {
      p1DeclaredRows.push(rowData);
      console.log(`✅ Added to P1 Declared FAILED (Final): ${rowData.name} (${statusText})`);
    }
    // FIXED: P3 - Line Manager Evaluation Accomplished (NEW - for P3 Awaiting)
    else if (statusText.includes('P3') && statusText.includes('Line Manager Evaluation Accomplished')) {
      p3AwaitingRows.push(rowData);
      console.log(`✅ Added to P3 Awaiting: ${rowData.name} (${statusText})`);
    }
    // ALTERNATIVE P3 Detection: Check for exact match
    else if (statusText === 'P3 - Line Manager Evaluation Accomplished') {
      p3AwaitingRows.push(rowData);
      console.log(`✅ Added to P3 Awaiting (exact match): ${rowData.name} (${statusText})`);
    }
    // FIXED: P3 - PASSED (Pending Finalization) (NEW - for P3 Declared)
    else if (statusText.includes('P3') && statusText.includes('PASSED') && statusText.includes('Pending Finalization')) {
      p3DeclaredRows.push(rowData);
      console.log(`✅ Added to P3 Declared PASSED: ${rowData.name} (${statusText})`);
    }
    // FIXED: P3 - FAILED (Pending Finalization) (NEW - for P3 Declared)
    else if (statusText.includes('P3') && statusText.includes('FAILED') && statusText.includes('Pending Finalization')) {
      p3DeclaredRows.push(rowData);
      console.log(`✅ Added to P3 Declared FAILED: ${rowData.name} (${statusText})`);
    }
    // P3 - PASSED (without "Pending") - Additional catch
    else if (statusText.includes('P3') && statusText.includes('PASSED') && !statusText.includes('Awaiting')) {
      p3DeclaredRows.push(rowData);
      console.log(`✅ Added to P3 Declared PASSED (Final): ${rowData.name} (${statusText})`);
    }
    // P3 - FAILED (without "Pending") - Additional catch
    else if (statusText.includes('P3') && statusText.includes('FAILED') && !statusText.includes('Awaiting')) {
      p3DeclaredRows.push(rowData);
      console.log(`✅ Added to P3 Declared FAILED (Final): ${rowData.name} (${statusText})`);
    }
    else {
      console.log(`❌ Row ${index + 1} not categorized: "${statusText}"`);
    }
  });

  console.log(`\n=== CATEGORIZATION RESULTS ===`);
  console.log(`P1 Awaiting: ${p1AwaitingRows.length}`);
  console.log(`P1 Declared: ${p1DeclaredRows.length}`);
  console.log(`P3 Awaiting: ${p3AwaitingRows.length}`);
  console.log(`P3 Declared: ${p3DeclaredRows.length}`);

  // FIXED: Populate tables with corrected headers
  populateP1AwaitingActionTableEnhanced(p1AwaitingRows);
  populateP1DeclaredResultsTableEnhanced(p1DeclaredRows);
  populateP3AwaitingActionTableFixed(p3AwaitingRows); // FIXED FUNCTION
  populateP3DeclaredResultsTableFixed(p3DeclaredRows); // FIXED FUNCTION
  
  // Update section visibilities
  updateP1P3SectionsVisibility(
    p1AwaitingRows.length > 0, 
    p1DeclaredRows.length > 0, 
    p3AwaitingRows.length > 0, 
    p3DeclaredRows.length > 0
  );
  
  // FIXED: Update headers to show correct text
  updateSectionHeaders(p1DeclaredRows.length > 0, p3DeclaredRows.length > 0);
  
  // Fix scores and buttons
  setTimeout(() => {
    fixAllTableScores();
    fixChangeStatusButtons();
  }, 300);
  
  highlightActiveFilter('forreview');
  updateSectionHeaderButtons();
}

// FIXED: Update section headers with correct text
function updateSectionHeaders(hasP1Declared, hasP3Declared) {
  console.log("=== UPDATING SECTION HEADERS (FIXED) ===");
  
  // FIXED: Update P1 declared results header
  let p1Header = document.getElementById('p1DeclaredResultsHeader');
  
  if (!p1Header) {
    // Find by text content
    const allH4s = document.querySelectorAll('#applicantStatusSection h4');
    allH4s.forEach(h4 => {
      const text = h4.textContent.trim();
      if (text.includes('Declared Results') || text.includes('P1 Applicants')) {
        p1Header = h4;
      }
    });
  }
  
  if (p1Header && hasP1Declared) {
    p1Header.textContent = 'List of P1 Applicants on Review - Declared Results';
    p1Header.id = 'p1DeclaredResultsHeader';
    p1Header.style.display = 'block';
    console.log("✅ Updated P1 declared results header");
  }
  
  // FIXED: Update P3 declared results header
  let p3Header = document.getElementById('p3DeclaredResultsHeader');
  
  if (!p3Header) {
    const p3Section = document.getElementById('p3ReviewSection');
    if (p3Section) {
      const p3H4s = p3Section.querySelectorAll('h4');
      p3H4s.forEach(h4 => {
        if (h4.textContent.includes('Declared Results') || h4.textContent.includes('P3 Applicants')) {
          p3Header = h4;
        }
      });
    }
  }
  
  if (p3Header && hasP3Declared) {
    p3Header.textContent = 'List of P3 Applicants on Review - Declared Results';
    p3Header.id = 'p3DeclaredResultsHeader';
    p3Header.style.display = 'block';
    console.log("✅ Updated P3 declared results header");
  }
  
  // Hide headers for sections with no data
  if (!hasP1Declared && p1Header) {
    p1Header.style.display = 'none';
  }
  
  if (!hasP3Declared && p3Header) {
    p3Header.style.display = 'none';
  }
}
// ============================
// DATA EXTRACTION & TABLE POPULATION
// ============================

function extractRowDataEnhanced(row, index) {
  console.log(`=== EXTRACTING ENHANCED DATA FOR ROW ${index + 1} ===`);
  
  const cells = Array.from(row.querySelectorAll('td'));
  if (cells.length < 5) {
    console.log(`Row ${index + 1}: Not enough cells (${cells.length})`);
    return null;
  }
  
  // Get userId using multiple methods
  let userId = row.getAttribute('data-userid');
  
  if (!userId || userId === 'undefined' || userId === '') {
    const reviewButton = row.querySelector('.btn-review, button[onclick*="lineManagerInitialScreeningModal"]');
    if (reviewButton) {
      const onclick = reviewButton.getAttribute('onclick') || '';
      const userIdMatch = onclick.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
      if (userIdMatch && userIdMatch[1]) {
        userId = userIdMatch[1];
        row.setAttribute('data-userid', userId);
        console.log(`Row ${index + 1}: Extracted userId ${userId} from button`);
      }
    }
  }
  
  // Extract name and email
  let applicantName = '';
  let applicantEmail = '';
  
  if (cells[1]) {
    const nameCell = cells[1];
    const fullContent = nameCell.innerHTML;
    const nameParts = fullContent.split('<br>');
    
    if (nameParts.length > 0) {
      applicantName = nameParts[0].replace(/<[^>]*>/g, '').trim();
    }
    
    if (nameParts.length > 1) {
      applicantEmail = nameParts[1].replace(/<[^>]*>/g, '').trim();
    }
  }
  
  const department = cells[2] ? cells[2].textContent.trim() : 'Unknown Department';
  const position = cells[3] ? cells[3].textContent.trim() : 'Unknown Position';
  
  // Enhanced status extraction
  let status = '';
  if (cells[4]) {
    const statusCell = cells[4];
    
    const statusSpan = statusCell.querySelector('span');
    if (statusSpan) {
      const spanText = statusSpan.textContent.trim();
      status = spanText.replace(/^Status:\s*/g, '').trim();
    } else {
      const cellText = statusCell.textContent.trim();
      const lines = cellText.split('\n');
      for (const line of lines) {
        const cleanLine = line.trim();
        if (cleanLine.startsWith('Status:')) {
          status = cleanLine.replace(/^Status:\s*/g, '').trim();
          break;
        } else if (cleanLine.includes('P1') || cleanLine.includes('P2') || cleanLine.includes('P3')) {
          status = cleanLine;
          break;
        }
      }
      
      if (!status) {
        const statusMatch = cellText.match(/(P[123]\s*-[^(\n]*(?:\([^)]*\))?)/);
        if (statusMatch) {
          status = statusMatch[1].trim();
        }
      }
    }
  }
  
  console.log(`Row ${index + 1}: Extracted status = "${status}"`);
  
  // FIXED: Enhanced score extraction for P1 rows
  let totalScore = 'N/A';
  
  // Only try to get score if this is NOT a P3 row
  if (!status.includes('P3')) {
    // Method 1: Check userId in global scores
    if (userId && window.applicantsScores && window.applicantsScores[userId]) {
      totalScore = window.applicantsScores[userId];
      console.log(`Row ${index + 1}: Found score ${totalScore} from applicantsScores`);
    } 
    // Method 2: Check main table scores by userId
    else if (userId && window.mainTableScores && window.mainTableScores[userId]) {
      totalScore = window.mainTableScores[userId];
      console.log(`Row ${index + 1}: Found score ${totalScore} from mainTableScores by userId`);
    } 
    // Method 3: Check main table scores by name
    else if (applicantName && window.mainTableScores && window.mainTableScores[applicantName]) {
      totalScore = window.mainTableScores[applicantName];
      console.log(`Row ${index + 1}: Found score ${totalScore} from mainTableScores by name`);
    } 
    // Method 4: Extract from review button onclick
    else {
      const reviewButton = row.querySelector('button[onclick*="lineManagerInitialScreeningModal"]');
      if (reviewButton) {
        const onclick = reviewButton.getAttribute('onclick') || '';
        const scoreMatch = onclick.match(/},\s*['"]([^'"]*)['"]/);
        if (scoreMatch && scoreMatch[1]) {
          totalScore = scoreMatch[1];
          console.log(`Row ${index + 1}: Found score ${totalScore} from button onclick`);
          
          // Cache the score for future use
          if (userId) {
            if (!window.applicantsScores) window.applicantsScores = {};
            window.applicantsScores[userId] = totalScore;
            if (!window.mainTableScores) window.mainTableScores = {};
            window.mainTableScores[userId] = totalScore;
          }
        }
      }
    }
    
    // Method 5: Try to fetch from embedded data
    if (totalScore === 'N/A' && userId && window.applicantsData) {
      const applicantData = window.applicantsData.find(a => a.userId === userId);
      if (applicantData && applicantData.initialScreeningAssessment && 
          applicantData.initialScreeningAssessment.totalScore !== 'N/A') {
        totalScore = applicantData.initialScreeningAssessment.totalScore;
        console.log(`Row ${index + 1}: Found score ${totalScore} from applicantsData`);
      }
    }
  }
  
  // Create proper cell structure based on whether it's P3 or P1
  let rowCells;
  
  if (status.includes('P3')) {
    // P3 rows - 5 columns (no score columns)
    rowCells = [
      cells[0] ? cells[0].innerHTML : `APP${(index + 1).toString().padStart(5, '0')}`,
      cells[1] ? cells[1].innerHTML : applicantName,
      department,
      position,
      status  // Just the status, no score for P3
    ];
  } else {
    // P1 rows - 7 columns (includes score columns)
    rowCells = [
      cells[0] ? cells[0].innerHTML : `APP${(index + 1).toString().padStart(5, '0')}`,
      cells[1] ? cells[1].innerHTML : applicantName,
      department,
      position,
      totalScore,
      '<span class="criteria-passed">Passed</span>',
      status
    ];
  }
  
  const rowData = {
    index: index + 1,
    cells: rowCells,
    userId: userId,
    totalScore: totalScore,
    name: applicantName,
    email: applicantEmail,
    status: status,
    department: department,
    position: position
  };
  
  console.log(`Row ${index + 1} final extracted data:`, {
    name: rowData.name,
    userId: rowData.userId,
    status: rowData.status,
    score: rowData.totalScore,
    isP3: status.includes('P3')
  });
  
  return rowData;
}

// ============================
// P1 TABLE MANAGEMENT FUNCTIONS
// ============================

function populateP1AwaitingActionTableEnhanced(awaitingRowsP1) {
    console.log(`Populating P1 awaiting action table with ${awaitingRowsP1.length} rows`);
    
    const awaitingActionTable = document.getElementById('p1AwaitingActionTable');
    if (!awaitingActionTable) {
        console.error("❌ P1 awaiting action table not found");
        return;
    }
    
    const awaitingTbody = awaitingActionTable.querySelector('tbody');
    if (!awaitingTbody) {
        console.error("❌ Tbody not found in P1 awaiting action table");
        return;
    }
    
    // Empty the tbody first
    awaitingTbody.innerHTML = '';
    
    if (awaitingRowsP1.length > 0) {
        awaitingRowsP1.forEach((rowData, idx) => {
            console.log(`Processing P1 awaiting row ${idx + 1}: ${rowData.name}`);
            
            const newRow = createP1AwaitingRowEnhanced(rowData);
            awaitingTbody.appendChild(newRow);
            
            if (rowData.userId) {
                newRow.setAttribute('data-userid', rowData.userId);
                getTotalScoreDirectly(rowData.userId, newRow);
            }
            
            console.log(`✅ Added P1 awaiting row ${idx + 1}`);
        });
        
        console.log(`✅ Successfully populated P1 awaiting action table with ${awaitingRowsP1.length} rows`);
    } else {
        // FIXED: Show "No data" message when no rows
        const messageRow = document.createElement('tr');
        const messageCell = document.createElement('td');
        messageCell.setAttribute('colspan', '7'); // P1 has 7 columns
        messageCell.className = 'text-center no-data-message';
        messageCell.style.cssText = `
            padding: 30px;
            background-color: #f8f9fa;
            color: #6c757d;
            font-style: italic;
            font-size: 16px;
            border-left: 4px solid #007bff;
        `;
        messageCell.textContent = 'No P1 applicants awaiting for action found.';
        messageRow.appendChild(messageCell);
        awaitingTbody.appendChild(messageRow);
        
        console.log("❌ No P1 awaiting rows - added no data message");
    }
}
function populateP1DeclaredResultsTableEnhanced(declaredRowsP1) {
    console.log(`=== POPULATING P1 DECLARED RESULTS (${declaredRowsP1.length} rows) ===`);
    
    const declaredResultsTable = document.getElementById('p1DeclaredResultsTable');
    if (!declaredResultsTable) {
        console.error("❌ P1 declared results table not found");
        return;
    }
    
    const declaredTbody = declaredResultsTable.querySelector('tbody');
    if (!declaredTbody) {
        console.error("❌ Tbody not found");
        return;
    }
    
    // Clear existing content
    declaredTbody.innerHTML = '';
    
    if (declaredRowsP1.length > 0) {
        declaredRowsP1.forEach((rowData, idx) => {
            console.log(`Processing P1 declared row ${idx + 1}:`, {
                name: rowData.name,
                status: rowData.status,
                userId: rowData.userId,
                score: rowData.totalScore
            });
            
            // Ensure we have proper score data
            if (rowData.totalScore !== 'N/A') {
                console.log(`Row already has score: ${rowData.totalScore}`);
            } else {
                if (rowData.userId) {
                    if (window.applicantsScores && window.applicantsScores[rowData.userId]) {
                        rowData.totalScore = window.applicantsScores[rowData.userId];
                        console.log(`Found score ${rowData.totalScore} for userId ${rowData.userId} from applicantsScores`);
                    } else if (window.mainTableScores && window.mainTableScores[rowData.userId]) {
                        rowData.totalScore = window.mainTableScores[rowData.userId];
                        console.log(`Found score ${rowData.totalScore} for userId ${rowData.userId} from mainTableScores`);
                    }
                }
                
                if (rowData.totalScore === 'N/A' && rowData.name) {
                    const name = rowData.name.trim();
                    if (window.mainTableScores && window.mainTableScores[name]) {
                        rowData.totalScore = window.mainTableScores[name];
                        console.log(`Found score ${rowData.totalScore} for '${name}' from main table by name`);
                    }
                }
            }
            
            const newRow = createP1DeclaredRowEnhanced(rowData);
            declaredTbody.appendChild(newRow);
            
            if (rowData.userId) {
                newRow.setAttribute('data-userid', rowData.userId);
                
                const changeButton = newRow.querySelector('.btn-change-status');
                if (changeButton) {
                    changeButton.setAttribute('data-userid', rowData.userId);
                    changeButton.setAttribute('onclick', `changeApplicantStatus('${rowData.userId}')`);
                }
                
                if (rowData.totalScore && rowData.totalScore !== 'N/A') {
                    updateScoreCellWithFormatting(newRow, rowData.totalScore);
                }
            }
            
            console.log(`✅ Added P1 declared row ${idx + 1} to table`);
        });
        
        console.log(`✅ Successfully populated P1 declared results table`);
        
        // Show the table and its header
        declaredResultsTable.style.display = 'table';
        const p1Header = document.getElementById('p1DeclaredResultsHeader');
        if (p1Header) {
            p1Header.style.display = 'block';
            p1Header.textContent = 'List of P1 Applicants on Review - Declared Results';
        }
    } else {
        // ENHANCED: Show "No data" message when no rows
        const messageRow = document.createElement('tr');
        const messageCell = document.createElement('td');
        messageCell.setAttribute('colspan', '8'); // P1 has 8 columns (including Actions)
        messageCell.className = 'text-center no-data-message';
        messageCell.style.cssText = `
            padding: 30px;
            background-color: #f8f9fa;
            color: #6c757d;
            font-style: italic;
            font-size: 16px;
            border-left: 4px solid #007bff;
        `;
        messageCell.textContent = 'No P1 applicants with declared review results found.';
        messageRow.appendChild(messageCell);
        declaredTbody.appendChild(messageRow);
        
        // Hide the table and its header
        declaredResultsTable.style.display = 'none';
        const p1Header = document.getElementById('p1DeclaredResultsHeader');
        if (p1Header) {
            p1Header.style.display = 'none';
        }
        
        console.log("❌ No P1 declared rows - added no data message");
    }
}

function setupP1TableFilters() {
  console.log("=== SETTING UP P1 TABLE FILTERS ===");
  
  // Create filter controls for P1 Awaiting Action Table
  createP1AwaitingFilterControls();
  
  // Create filter controls for P1 Declared Results Table
  createP1DeclaredFilterControls();
}


function createP1AwaitingFilterControls() {
  const p1AwaitingTable = document.getElementById('p1AwaitingActionTable');
  if (!p1AwaitingTable) return;
  
  // Find the parent section
  const p1Section = document.getElementById('p1ReviewSection');
  if (!p1Section) return;
  
  // Find the "Awaiting for Action - P1" header
  const headers = p1Section.querySelectorAll('h4');
  let awaitingHeader = null;
  
  headers.forEach(header => {
    if (header.textContent.includes('Awaiting for Action - P1')) {
      awaitingHeader = header;
    }
  });
  
  if (!awaitingHeader) return;
  
  // Create filter controls container
  const filterContainer = document.createElement('div');
  filterContainer.id = 'p1AwaitingFilterControls';
  filterContainer.style.cssText = `
    margin: 15px 0;
    padding: 15px;
    background-color: #f8f9fa;
    border-radius: 5px;
    border: 1px solid #dee2e6;
  `;
  
  filterContainer.innerHTML = `
    <div style="display: flex; align-items: center; gap: 15px; flex-wrap: wrap;">
      <div style="display: flex; align-items: center; gap: 10px;">
        <label for="p1AwaitingSortBy" style="font-weight: bold; color: #124A5C;">Sort By:</label>
        <select id="p1AwaitingSortBy" style="padding: 8px; border: 1px solid #ddd; border-radius: 4px; background-color: white; min-width: 200px;">
          <option value="score-desc">Total Score (Highest First)</option>
          <option value="score-asc">Total Score (Lowest First)</option>
          <option value="worksetup-desc">Work Setup/Availability (Passed First)</option>
          <option value="worksetup-asc">Work Setup/Availability (Failed First)</option>
          <option value="name-asc">Name (A-Z)</option>
          <option value="name-desc">Name (Z-A)</option>
        </select>
      </div>
      <div style="display: flex; align-items: center; gap: 10px;">
        <label for="p1AwaitingFilterBy" style="font-weight: bold; color: #124A5C;">Filter By:</label>
        <select id="p1AwaitingFilterBy" style="padding: 8px; border: 1px solid #ddd; border-radius: 4px; background-color: white; min-width: 180px;">
          <option value="all">All Applicants</option>
          <option value="worksetup-passed">Work Setup/Availability Passed</option>
          <option value="worksetup-failed">Work Setup/Availability Failed</option>
          <option value="score-high">High Score (≥85)</option>
          <option value="score-medium">Medium Score (75-84)</option>
          <option value="score-low">Low Score (<75)</option>
        </select>
      </div>
      <button id="p1AwaitingApplyFilters" style="padding: 10px 20px; background-color: #124A5C; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: bold;">
        Apply
      </button>
      <button id="p1AwaitingClearFilters" style="padding: 10px 20px; background-color: #6c757d; color: white; border: none; border-radius: 4px; cursor: pointer;">
        Clear
      </button>
    </div>
  `;
  
  // Insert filter container after the awaiting header
  awaitingHeader.insertAdjacentElement('afterend', filterContainer);
  
  // Set up event listeners
  document.getElementById('p1AwaitingApplyFilters').addEventListener('click', () => {
    applyP1AwaitingFilters();
  });
  
  document.getElementById('p1AwaitingClearFilters').addEventListener('click', () => {
    clearP1AwaitingFilters();
  });
}
function createP1DeclaredFilterControls() {
  const p1DeclaredTable = document.getElementById('p1DeclaredResultsTable');
  if (!p1DeclaredTable) return;
  
  // Find the parent section
  const p1Section = document.getElementById('p1ReviewSection');
  if (!p1Section) return;
  
  // Find the "List of P1 Applicants on Review - Declared Results" header
  const headers = p1Section.querySelectorAll('h4');
  let declaredHeader = null;
  
  headers.forEach(header => {
    if (header.textContent.includes('Declared Results') || header.id === 'p1DeclaredResultsHeader') {
      declaredHeader = header;
    }
  });
  
  if (!declaredHeader) return;
  
  // Create filter controls container
  const filterContainer = document.createElement('div');
  filterContainer.id = 'p1DeclaredFilterControls';
  filterContainer.style.cssText = `
    margin: 15px 0;
    padding: 15px;
    background-color: #f8f9fa;
    border-radius: 5px;
    border: 1px solid #dee2e6;
  `;
  
  filterContainer.innerHTML = `
    <div style="display: flex; align-items: center; gap: 15px; flex-wrap: wrap;">
      <div style="display: flex; align-items: center; gap: 10px;">
        <label for="p1DeclaredSortBy" style="font-weight: bold; color: #124A5C;">Sort By:</label>
        <select id="p1DeclaredSortBy" style="padding: 8px; border: 1px solid #ddd; border-radius: 4px; background-color: white; min-width: 200px;">
          <option value="score-desc">Total Score (Highest First)</option>
          <option value="score-asc">Total Score (Lowest First)</option>
          <option value="worksetup-desc">Work Setup/Availability (Passed First)</option>
          <option value="worksetup-asc">Work Setup/Availability (Failed First)</option>
          <option value="name-asc">Name (A-Z)</option>
          <option value="name-desc">Name (Z-A)</option>
        </select>
      </div>
      <div style="display: flex; align-items: center; gap: 10px;">
        <label for="p1DeclaredFilterBy" style="font-weight: bold; color: #124A5C;">Filter By:</label>
        <select id="p1DeclaredFilterBy" style="padding: 8px; border: 1px solid #ddd; border-radius: 4px; background-color: white; min-width: 180px;">
          <option value="all">All Applicants</option>
          <option value="status-passed">Status: PASSED</option>
          <option value="status-failed">Status: FAILED</option>
          <option value="worksetup-passed">Work Setup/Availability Passed</option>
          <option value="worksetup-failed">Work Setup/Availability Failed</option>
          <option value="score-high">High Score (≥85)</option>
          <option value="score-medium">Medium Score (75-84)</option>
          <option value="score-low">Low Score (<75)</option>
        </select>
      </div>
      <button id="p1DeclaredApplyFilters" style="padding: 10px 20px; background-color: #124A5C; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: bold;">
        Apply
      </button>
      <button id="p1DeclaredClearFilters" style="padding: 10px 20px; background-color: #6c757d; color: white; border: none; border-radius: 4px; cursor: pointer;">
        Clear
      </button>
    </div>
  `;
  
  // Insert filter container after the declared header
  declaredHeader.insertAdjacentElement('afterend', filterContainer);
  
  // Set up event listeners
  document.getElementById('p1DeclaredApplyFilters').addEventListener('click', () => {
    applyP1DeclaredFilters();
  });
  
  document.getElementById('p1DeclaredClearFilters').addEventListener('click', () => {
    clearP1DeclaredFilters();
  });
}


// ENHANCED: Apply filters for P1 Awaiting Action table
async function applyP1AwaitingFilters() {
  console.log("Applying P1 Awaiting filters...");
  
  const sortBy = document.getElementById('p1AwaitingSortBy').value;
  const filterBy = document.getElementById('p1AwaitingFilterBy').value;
  
  const table = document.getElementById('p1AwaitingActionTable');
  if (!table) return;
  
  const tbody = table.querySelector('tbody');
  const rows = Array.from(tbody.querySelectorAll('tr')).filter(row => 
    !row.querySelector('td[colspan]') && !row.classList.contains('section-header-row')
  );
  
  console.log(`Processing ${rows.length} P1 awaiting rows`);
  
  // Enhance row data with work setup/availability info
  for (const row of rows) {
    await enhanceRowWithWorkSetupData(row);
  }
  
  // Filter rows
  let filteredRows = rows.filter(row => {
    return matchesP1Filter(row, filterBy);
  });
  
  console.log(`${filteredRows.length} rows match filter criteria`);
  
  // Sort rows
  filteredRows.sort((a, b) => {
    return compareP1Rows(a, b, sortBy);
  });
  
  // Clear and repopulate table
  tbody.innerHTML = '';
  
  if (filteredRows.length === 0) {
    const messageRow = document.createElement('tr');
    const messageCell = document.createElement('td');
    messageCell.setAttribute('colspan', '7');
    messageCell.className = 'text-center no-data-message';
    messageCell.textContent = 'No applicants match the selected criteria.';
    messageRow.appendChild(messageCell);
    tbody.appendChild(messageRow);
  } else {
    filteredRows.forEach(row => tbody.appendChild(row));
  }
  
  console.log(`P1 Awaiting filters applied: ${filteredRows.length} rows displayed`);
}

// ENHANCED: Apply filters for P1 Declared Results table
async function applyP1DeclaredFilters() {
  console.log("Applying P1 Declared filters...");
  
  const sortBy = document.getElementById('p1DeclaredSortBy').value;
  const filterBy = document.getElementById('p1DeclaredFilterBy').value;
  
  const table = document.getElementById('p1DeclaredResultsTable');
  if (!table) return;
  
  const tbody = table.querySelector('tbody');
  const rows = Array.from(tbody.querySelectorAll('tr')).filter(row => 
    !row.querySelector('td[colspan]') && !row.classList.contains('section-header-row')
  );
  
  console.log(`Processing ${rows.length} P1 declared rows`);
  
  // Enhance row data with work setup/availability info
  for (const row of rows) {
    await enhanceRowWithWorkSetupData(row);
  }
  
  // Filter rows
  let filteredRows = rows.filter(row => {
    return matchesP1Filter(row, filterBy);
  });
  
  console.log(`${filteredRows.length} rows match filter criteria`);
  
  // Sort rows
  filteredRows.sort((a, b) => {
    return compareP1Rows(a, b, sortBy);
  });
  
  // Clear and repopulate table
  tbody.innerHTML = '';
  
  if (filteredRows.length === 0) {
    const messageRow = document.createElement('tr');
    const messageCell = document.createElement('td');
    messageCell.setAttribute('colspan', '8');
    messageCell.className = 'text-center no-data-message';
    messageCell.textContent = 'No applicants match the selected criteria.';
    messageRow.appendChild(messageCell);
    tbody.appendChild(messageRow);
  } else {
    filteredRows.forEach(row => tbody.appendChild(row));
  }
  
  console.log(`P1 Declared filters applied: ${filteredRows.length} rows displayed`);
}
// FIXED: Work Setup/Availability Logic - Only PASSED if BOTH are true

async function enhanceRowWithWorkSetupDataFixed(row) {
    const userId = row.getAttribute('data-userid');
    if (!userId || userId === 'undefined') return;
    
    // Skip if already enhanced
    if (row.getAttribute('data-worksetup-enhanced') === 'true') return;
    
    console.log(`🔧 FIXED: Processing Work Setup for userId: ${userId}`);
    
    try {
        const response = await fetch(`/linemanager/get-assessment/${userId}`);
        if (response.ok) {
            const data = await response.json();
            
            if (data.success && data.combinedData && data.combinedData.scores) {
                const workSetup = data.combinedData.scores.workSetup;
                const availability = data.combinedData.scores.availability;
                
                console.log(`🔧 FIXED: UserId ${userId} RAW VALUES:`);
                console.log(`   workSetup: "${workSetup}" (${typeof workSetup})`);
                console.log(`   availability: "${availability}" (${typeof availability})`);
                
                // FIXED LOGIC: Only PASSED if BOTH are explicitly true
                const workSetupPassed = (workSetup === true || workSetup === 'true' || workSetup === '1');
                const availabilityPassed = (availability === true || availability === 'true' || availability === '1');
                
                // CRITICAL: BOTH must be true for overall pass
                const overallPassed = workSetupPassed && availabilityPassed;
                
                console.log(`🔧 FIXED: UserId ${userId} BOOLEAN EVALUATION:`);
                console.log(`   workSetup ${workSetup} -> ${workSetupPassed ? 'TRUE' : 'FALSE'}`);
                console.log(`   availability ${availability} -> ${availabilityPassed ? 'TRUE' : 'FALSE'}`);
                console.log(`   FINAL RESULT: ${overallPassed ? '✅ PASSED' : '❌ FAILED'}`);
                
                // Update the Work Setup/Availability cell (column 6)
                const workSetupCell = row.querySelector('td:nth-child(6)');
                if (workSetupCell) {
                    workSetupCell.innerHTML = `<span class="${overallPassed ? 'criteria-passed' : 'criteria-failed'}" style="color: ${overallPassed ? 'green' : 'red'} !important; font-weight: bold !important;">${overallPassed ? 'Passed' : 'Failed'}</span>`;
                    console.log(`🔧 FIXED: Updated cell for userId ${userId}: ${overallPassed ? 'PASSED' : 'FAILED'}`);
                }
                
                // Set attributes for filtering
                row.setAttribute('data-worksetup-score', String(workSetup));
                row.setAttribute('data-availability-score', String(availability));
                row.setAttribute('data-worksetup-passed', overallPassed ? 'true' : 'false');
                row.setAttribute('data-worksetup-enhanced', 'true');
                
                return true;
            }
        }
    } catch (error) {
        console.error(`🔧 FIXED: Error for userId ${userId}:`, error);
    }
    
    // Default to FAILED if no data or error
    const workSetupCell = row.querySelector('td:nth-child(6)');
    if (workSetupCell) {
        workSetupCell.innerHTML = `<span class="criteria-failed" style="color: red !important; font-weight: bold !important;">Failed</span>`;
    }
    
    row.setAttribute('data-worksetup-passed', 'false');
    row.setAttribute('data-worksetup-enhanced', 'true');
    
    return false;
}

// EMERGENCY FUNCTION: Force fix all visible work setup cells right now
async function emergencyFixAllWorkSetupCells() {
  console.log("🚨 EMERGENCY: FIXING ALL WORK SETUP CELLS NOW");
  
  // Find ALL tables that might have work setup cells
  const allTables = document.querySelectorAll('table');
  
  for (const table of allTables) {
    console.log(`🚨 EMERGENCY: Checking table: ${table.id || 'unnamed'}`);
    
    const rows = table.querySelectorAll('tbody tr');
    for (const row of rows) {
      if (row.querySelector('td[colspan]')) continue;
      
      const userId = row.getAttribute('data-userid');
      const workSetupCell = row.querySelector('td:nth-child(6)');
      
      if (userId && workSetupCell && workSetupCell.textContent.includes('Passed')) {
        console.log(`🚨 EMERGENCY: Found potentially wrong "Passed" for userId ${userId}`);
        
        // Remove enhanced flag to force re-check
        row.removeAttribute('data-worksetup-enhanced');
        
        // Re-process with strict logic
        await enhanceRowWithWorkSetupData(row);
      }
    }
  }
  
  console.log("🚨 EMERGENCY: Work setup fix completed");
}


// Make globally available
window.emergencyFixAllWorkSetupCells = emergencyFixAllWorkSetupCells;

async function debugWorkSetupBooleanLogic() {
  console.log("=== DEBUGGING WORK SETUP BOOLEAN LOGIC ===");
  
  const table = document.getElementById('p1AwaitingActionTable') || document.getElementById('p1DeclaredResultsTable');
  if (!table) {
    console.log("❌ No P1 table found");
    return;
  }
  
  const rows = table.querySelectorAll('tbody tr');
  
  for (const row of rows) {
    if (row.querySelector('td[colspan]')) continue;
    
    const userId = row.getAttribute('data-userid');
    const nameCell = row.querySelector('td:nth-child(2)');
    const name = nameCell ? nameCell.textContent.split('\n')[0].trim() : 'Unknown';
    
    if (userId && userId !== 'undefined') {
      console.log(`\n--- Testing Boolean Logic for ${name} (${userId}) ---`);
      
      try {
        const response = await fetch(`/linemanager/get-assessment/${userId}`);
        if (response.ok) {
          const data = await response.json();
          
          if (data.success && data.combinedData && data.combinedData.scores) {
            const workSetup = data.combinedData.scores.workSetup;
            const availability = data.combinedData.scores.availability;
            
            console.log(`Raw values:`);
            console.log(`  workSetup: ${workSetup} (type: ${typeof workSetup})`);
            console.log(`  availability: ${availability} (type: ${typeof availability})`);
            
            // Apply the same logic as the enhanced function
            const workSetupPassed = (workSetup === true || workSetup === 'true');
            const availabilityPassed = (availability === true || availability === 'true');
            const overallPassed = workSetupPassed && availabilityPassed;
            
            console.log(`Boolean evaluation:`);
            console.log(`  workSetup passed: ${workSetupPassed}`);
            console.log(`  availability passed: ${availabilityPassed}`);
            console.log(`  OVERALL RESULT: ${overallPassed ? '✅ PASSED' : '❌ FAILED'}`);
            
            // Check what's currently displayed in the UI
            const workSetupCell = row.querySelector('td:nth-child(6)');
            if (workSetupCell) {
              console.log(`  Current UI display: ${workSetupCell.textContent}`);
            }
            
          } else {
            console.log("❌ No score data available");
          }
        } else {
          console.log(`❌ API call failed: ${response.status}`);
        }
      } catch (error) {
        console.log(`❌ Error: ${error.message}`);
      }
    }
  }
}

// Function to force refresh work setup data for all visible rows
async function forceRefreshWorkSetupData() {
  console.log("=== FORCING REFRESH OF WORK SETUP DATA ===");
  
  const tables = [
    document.getElementById('p1AwaitingActionTable'),
    document.getElementById('p1DeclaredResultsTable')
  ].filter(table => table !== null);
  
  for (const table of tables) {
    console.log(`Processing table: ${table.id}`);
    const rows = table.querySelectorAll('tbody tr');
    
    for (const row of rows) {
      if (row.querySelector('td[colspan]')) continue;
      
      const userId = row.getAttribute('data-userid');
      if (userId && userId !== 'undefined') {
        // Remove the enhanced flag to force re-processing
        row.removeAttribute('data-worksetup-enhanced');
        
        // Re-enhance the row with correct boolean logic
        await enhanceRowWithWorkSetupData(row);
      }
    }
  }
  
  console.log("✅ Force refresh completed");
}

function testWorkSetupLogic() {
  console.log("=== TESTING WORK SETUP LOGIC WITH VARIOUS VALUES ===");
  
  const testCases = [
    { workSetup: true, availability: true, expected: 'PASSED' },
    { workSetup: true, availability: false, expected: 'FAILED' },
    { workSetup: false, availability: true, expected: 'FAILED' },
    { workSetup: false, availability: false, expected: 'FAILED' },
    { workSetup: 'true', availability: 'true', expected: 'PASSED' },
    { workSetup: 'true', availability: 'false', expected: 'FAILED' },
    { workSetup: 'false', availability: 'true', expected: 'FAILED' },
    { workSetup: 'false', availability: 'false', expected: 'FAILED' },
    { workSetup: 1, availability: 1, expected: 'FAILED' },
    { workSetup: 0, availability: 0, expected: 'FAILED' },
    { workSetup: 'N/A', availability: 'N/A', expected: 'FAILED' }
  ];
  
  testCases.forEach((testCase, index) => {
    const workSetupPassed = (testCase.workSetup === true || testCase.workSetup === 'true');
    const availabilityPassed = (testCase.availability === true || testCase.availability === 'true');
    const result = workSetupPassed && availabilityPassed;
    const resultText = result ? 'PASSED' : 'FAILED';
    const isCorrect = resultText === testCase.expected;
    
    console.log(`Test ${index + 1}: workSetup=${testCase.workSetup}, availability=${testCase.availability}`);
    console.log(`  Expected: ${testCase.expected}, Got: ${resultText} ${isCorrect ? '✅' : '❌'}`);
  });
}

// Function to fetch P3 assessment data
async function fetchP3AssessmentData(userId) {
    try {
        console.log(`Fetching P3 assessment for userId: ${userId}`);
        const response = await fetch(`/linemanager/get-p3-assessment/${userId}`);
        if (response.ok) {
            const data = await response.json();
            if (data.success && data.assessmentData) {
                return {
                    totalAssessmentRating: data.assessmentData.totalAssessmentRating || 'N/A',
                    conclusion: data.assessmentData.conclusion || 'N/A'
                };
            }
        }
    } catch (error) {
        console.error(`Error fetching P3 assessment for userId ${userId}:`, error);
    }
    
    return {
        totalAssessmentRating: 'N/A',
        conclusion: 'N/A'
    };
}


// function to immediately fix all current work setup displays
async function immediateWorkSetupFix() {
    console.log("🔧 IMMEDIATE WORK SETUP FIX STARTING...");
    
    // Find all P1 tables
    const tables = [
        document.getElementById('p1AwaitingActionTable'),
        document.getElementById('p1DeclaredResultsTable')
    ].filter(table => table !== null && table.style.display !== 'none');
    
    if (tables.length === 0) {
        console.log("❌ No visible P1 tables found. Please click 'For Review' filter first.");
        alert("Please click the 'For Review' filter first to see P1 tables, then run this function again.");
        return;
    }
    
    for (const table of tables) {
        console.log(`\n🔧 Processing table: ${table.id}`);
        const tbody = table.querySelector('tbody');
        const rows = Array.from(tbody.querySelectorAll('tr')).filter(row => 
            !row.querySelector('td[colspan]') && !row.classList.contains('section-header-row')
        );
        
        console.log(`Found ${rows.length} data rows to process`);
        
        for (const row of rows) {
            const userId = row.getAttribute('data-userid');
            const nameCell = row.querySelector('td:nth-child(2)');
            const name = nameCell ? nameCell.textContent.split('\n')[0].trim() : 'Unknown';
            
            if (userId && userId !== 'undefined') {
                console.log(`\n--- Processing ${name} (${userId}) ---`);
                
                // Remove enhanced flag to force re-processing
                row.removeAttribute('data-worksetup-enhanced');
                
                // Apply the FIXED logic
                await enhanceRowWithWorkSetupDataFixed(row);
                
                // Small delay to avoid overwhelming the server
                await new Promise(resolve => setTimeout(resolve, 100));
            }
        }
    }
    
    console.log("\n🎉 IMMEDIATE WORK SETUP FIX COMPLETED!");
    alert("Work Setup/Availability fix completed! Check the console for detailed results.");
}

// Make functions globally available
window.immediateWorkSetupFix = immediateWorkSetupFix;
// Quick test to see what's currently wrong
function quickWorkSetupDiagnosis() {
  console.log("🔍 QUICK WORK SETUP DIAGNOSIS");
  
  const tables = [
    document.getElementById('p1AwaitingActionTable'),
    document.getElementById('p1DeclaredResultsTable')
  ].filter(table => table !== null && table.style.display !== 'none');
  
  if (tables.length === 0) {
    console.log("❌ No visible P1 tables found. Click 'For Review' filter first.");
    return;
  }
  
  tables.forEach(table => {
    const rows = table.querySelectorAll('tbody tr');
    console.log(`\n📊 Table: ${table.id}`);
    
    rows.forEach((row, index) => {
      if (row.querySelector('td[colspan]')) return;
      
      const nameCell = row.querySelector('td:nth-child(2)');
      const workSetupCell = row.querySelector('td:nth-child(6)');
      const userId = row.getAttribute('data-userid');
      
      if (nameCell && workSetupCell && userId) {
        const name = nameCell.textContent.split('\n')[0].trim();
        const currentDisplay = workSetupCell.textContent.trim();
        const dataAttribute = row.getAttribute('data-worksetup-passed');
        
        console.log(`Row ${index + 1}: ${name}`);
        console.log(`  UserId: ${userId}`);
        console.log(`  Current Display: "${currentDisplay}"`);
        console.log(`  Data Attribute: "${dataAttribute}"`);
        
        if (currentDisplay === 'Passed' && dataAttribute === 'false') {
          console.log(`  🚨 MISMATCH DETECTED! Display shows Passed but data says false`);
        }
      }
    });
  });
}

// Make functions globally available
window.immediateWorkSetupFix = immediateWorkSetupFix;
window.quickWorkSetupDiagnosis = quickWorkSetupDiagnosis;
// Make the new functions globally available
window.debugWorkSetupBooleanLogic = debugWorkSetupBooleanLogic;
window.forceRefreshWorkSetupData = forceRefreshWorkSetupData;
window.testWorkSetupLogic = testWorkSetupLogic;

// ENHANCED: Check if row matches filter criteria
function matchesP1Filter(row, filterBy) {
  switch (filterBy) {
    case 'all':
      return true;
      
    case 'worksetup-passed':
      return row.getAttribute('data-worksetup-passed') === 'true';
      
    case 'worksetup-failed':
      return row.getAttribute('data-worksetup-passed') === 'false';
      
    case 'status-passed':
      const statusCellPassed = row.querySelector('td:nth-child(7)') || row.querySelector('td:nth-child(5)');
      return statusCellPassed && statusCellPassed.textContent.includes('PASSED');
      
    case 'status-failed':
      const statusCellFailed = row.querySelector('td:nth-child(7)') || row.querySelector('td:nth-child(5)');
      return statusCellFailed && statusCellFailed.textContent.includes('FAILED');
      
    case 'score-high':
      const scoreHigh = parseFloat(row.getAttribute('data-score')) || 0;
      return scoreHigh >= 85;
      
    case 'score-medium':
      const scoreMedium = parseFloat(row.getAttribute('data-score')) || 0;
      return scoreMedium >= 75 && scoreMedium < 85;
      
    case 'score-low':
      const scoreLow = parseFloat(row.getAttribute('data-score')) || 0;
      return scoreLow > 0 && scoreLow < 75;
      
    default:
      return true;
  }
}
function compareP1Rows(rowA, rowB, sortBy) {
  switch (sortBy) {
    case 'score-desc':
      const scoreA = parseFloat(rowA.getAttribute('data-score')) || 0;
      const scoreB = parseFloat(rowB.getAttribute('data-score')) || 0;
      return scoreB - scoreA; // Highest first
      
    case 'score-asc':
      const scoreA2 = parseFloat(rowA.getAttribute('data-score')) || 0;
      const scoreB2 = parseFloat(rowB.getAttribute('data-score')) || 0;
      return scoreA2 - scoreB2; // Lowest first
      
    case 'worksetup-desc':
      // FIXED: Passed first, then failed, then by score
      const passedA = rowA.getAttribute('data-worksetup-passed') === 'true';
      const passedB = rowB.getAttribute('data-worksetup-passed') === 'true';
      
      if (passedA && !passedB) return -1; // A passed, B failed -> A first
      if (!passedA && passedB) return 1;  // A failed, B passed -> B first
      
      // If both same status, sort by score (highest first)
      const scoreA3 = parseFloat(rowA.getAttribute('data-score')) || 0;
      const scoreB3 = parseFloat(rowB.getAttribute('data-score')) || 0;
      return scoreB3 - scoreA3;
      
    case 'worksetup-asc':
      // FIXED: Failed first, then passed, then by score
      const passedA2 = rowA.getAttribute('data-worksetup-passed') === 'true';
      const passedB2 = rowB.getAttribute('data-worksetup-passed') === 'true';
      
      if (!passedA2 && passedB2) return -1; // A failed, B passed -> A first
      if (passedA2 && !passedB2) return 1;  // A passed, B failed -> B first
      
      // If both same status, sort by score (highest first)
      const scoreA4 = parseFloat(rowA.getAttribute('data-score')) || 0;
      const scoreB4 = parseFloat(rowB.getAttribute('data-score')) || 0;
      return scoreB4 - scoreA4;
      
    case 'name-asc':
      const nameA = getRowName(rowA);
      const nameB = getRowName(rowB);
      return nameA.localeCompare(nameB);
      
    case 'name-desc':
      const nameA2 = getRowName(rowA);
      const nameB2 = getRowName(rowB);
      return nameB2.localeCompare(nameA2);
      
    default:
      return 0;
  }
}

window.viewP3Evaluation = viewP3Evaluation;
window.extractApplicantIdForP3 = extractApplicantIdForP3;
window.viewP3EvaluationByUserId = viewP3EvaluationByUserId;
// Helper function to get name from row
function getRowName(row) {
  const nameCell = row.querySelector('td:nth-child(2)');
  if (!nameCell) return '';
  
  const nameText = nameCell.textContent.split('\n')[0].trim();
  return nameText || '';
}

// Clear filters functions
function clearP1AwaitingFilters() {
  document.getElementById('p1AwaitingSortBy').value = 'score-desc';
  document.getElementById('p1AwaitingFilterBy').value = 'all';
  applyP1AwaitingFilters();
}

function clearP1DeclaredFilters() {
  document.getElementById('p1DeclaredSortBy').value = 'score-desc';
  document.getElementById('p1DeclaredFilterBy').value = 'all';
  applyP1DeclaredFilters();
}

function debugRoutes() {
  console.log("=== DEBUGGING ROUTES ===");
  
  // Test if we have applicantsData with applicantId
  if (window.applicantsData && window.applicantsData.length > 0) {
    console.log("✅ Found applicantsData with", window.applicantsData.length, "applicants");
    
    window.applicantsData.forEach((applicant, index) => {
      console.log(`Applicant ${index + 1}:`, {
        userId: applicant.userId,
        applicantId: applicant.applicantId || 'MISSING',
        name: `${applicant.firstName} ${applicant.lastName}`,
        status: applicant.applicantStatus
      });
    });
  } else {
    console.log("❌ No applicantsData found");
  }
  
  // Check main table for applicant data
  const mainTable = document.getElementById('mainApplicantTable');
  if (mainTable) {
    const rows = mainTable.querySelectorAll('tbody tr');
    console.log(`\n=== MAIN TABLE ANALYSIS (${rows.length} rows) ===`);
    
    rows.forEach((row, index) => {
      const nameCell = row.querySelector('td:nth-child(2)');
      const statusCell = row.querySelector('td:nth-child(5)');
      
      if (nameCell && statusCell) {
        const name = nameCell.textContent.split('\n')[0].trim();
        const status = statusCell.textContent.trim();
        const userId = row.getAttribute('data-userid');
        const applicantId = row.getAttribute('data-applicant-id');
        
        console.log(`Row ${index + 1}:`, {
          name: name,
          userId: userId || 'MISSING',
          applicantId: applicantId || 'MISSING',
          status: status.substring(0, 50) + '...'
        });
      }
    });
  }
}


// Function to manually test P3 evaluation route
function testP3Route(applicantId) {
  console.log(`Testing P3 route with applicantId: ${applicantId}`);
  
  if (!applicantId) {
    console.error("No applicantId provided");
    return;
  }
  
  const testUrl = `/view-interview-form/${applicantId}`;
  console.log(`Test URL: ${testUrl}`);
  
  // Test the route in a new tab first
  window.open(testUrl, '_blank');
}

// Function to check Work Setup/Availability for all applicants
async function debugWorkSetupForAll() {
  console.log("=== DEBUGGING WORK SETUP FOR ALL APPLICANTS ===");
  
  const table = document.getElementById('p1AwaitingActionTable') || document.getElementById('p1DeclaredResultsTable');
  if (!table) {
    console.log("❌ No P1 table found");
    return;
  }
  
  const rows = table.querySelectorAll('tbody tr');
  
  for (const row of rows) {
    if (row.querySelector('td[colspan]')) continue;
    
    const userId = row.getAttribute('data-userid');
    const nameCell = row.querySelector('td:nth-child(2)');
    const name = nameCell ? nameCell.textContent.split('\n')[0].trim() : 'Unknown';
    
    if (userId && userId !== 'undefined') {
      console.log(`\n--- Testing ${name} (${userId}) ---`);
      
      try {
        const response = await fetch(`/linemanager/get-assessment/${userId}`);
        if (response.ok) {
          const data = await response.json();
          
          if (data.success && data.combinedData && data.combinedData.scores) {
            const workSetup = data.combinedData.scores.workSetup;
            const availability = data.combinedData.scores.availability;
            
            const workSetupNum = parseFloat(workSetup);
            const availabilityNum = parseFloat(availability);
            const passed = (!isNaN(workSetupNum) && workSetupNum > 0) && 
                          (!isNaN(availabilityNum) && availabilityNum > 0) &&
                          workSetup !== 'N/A' && availability !== 'N/A';
            
            console.log(`Work Setup: ${workSetup}, Availability: ${availability}`);
            console.log(`Result: ${passed ? '✅ PASSED' : '❌ FAILED'}`);
          } else {
            console.log("❌ No score data available");
          }
        } else {
          console.log(`❌ API call failed: ${response.status}`);
        }
      } catch (error) {
        console.log(`❌ Error: ${error.message}`);
      }
    }
  }
}

// Function to check if applicantId exists in the data
function findApplicantId(userId) {
  console.log(`Searching for applicantId for userId: ${userId}`);
  
  // Method 1: Check applicantsData
  if (window.applicantsData) {
    const found = window.applicantsData.find(a => a.userId === userId);
    if (found && found.applicantId) {
      console.log(`Found in applicantsData: ${found.applicantId}`);
      return found.applicantId;
    }
  }
  
  // Method 2: Check applicant registry
  if (window.applicantRegistry && window.applicantRegistry[userId]) {
    const registryData = window.applicantRegistry[userId];
    if (registryData.applicantId) {
      console.log(`Found in applicantRegistry: ${registryData.applicantId}`);
      return registryData.applicantId;
    }
  }
  
  // Method 3: Search main table
  const mainTable = document.getElementById('mainApplicantTable');
  if (mainTable) {
    const rows = mainTable.querySelectorAll('tbody tr');
    for (const row of rows) {
      if (row.getAttribute('data-userid') === userId) {
        const applicantId = row.getAttribute('data-applicant-id');
        if (applicantId) {
          console.log(`Found in main table: ${applicantId}`);
          return applicantId;
        }
      }
    }
  }
  
  console.log(`No applicantId found for userId: ${userId}`);
  return null;
}


function createP1AwaitingRowEnhanced(rowData) {
  const newRow = document.createElement('tr');
  
  if (rowData.userId) {
    newRow.setAttribute('data-userid', rowData.userId);
  }
  
  // FIXED: Ensure we have the score data
  let displayScore = rowData.totalScore || 'N/A';
  
  // Try to get score from various sources
  if (displayScore === 'N/A' && rowData.userId) {
    if (window.applicantsScores && window.applicantsScores[rowData.userId]) {
      displayScore = window.applicantsScores[rowData.userId];
    } else if (window.mainTableScores && window.mainTableScores[rowData.userId]) {
      displayScore = window.mainTableScores[rowData.userId];
    }
  }
  
  console.log(`Creating P1 awaiting row for ${rowData.name} with score: ${displayScore}`);
  
  const cells = [
    rowData.cells[0] || 'N/A',
    rowData.cells[1] || 'Unknown Applicant',
    rowData.cells[2] || 'Unknown Department',
    rowData.cells[3] || 'Unknown Position',
    displayScore, // Use the determined score
    '<span class="criteria-passed">Passed</span>',
    createP1AwaitingStatusCellEnhanced(rowData)
  ];
  
  cells.forEach(cellHTML => {
    const cell = document.createElement('td');
    cell.innerHTML = cellHTML;
    newRow.appendChild(cell);
  });
  
  // After creating the row, update score formatting if we have a valid score
  if (displayScore !== 'N/A') {
    setTimeout(() => {
      updateScoreCellWithFormatting(newRow, displayScore);
    }, 100);
  }
  
  return newRow;
}

function createP1DeclaredRowEnhanced(rowData) {
  console.log("Creating enhanced P1 declared row for:", rowData.name);
  
  const newRow = document.createElement('tr');
  
  if (rowData.userId) {
    newRow.setAttribute('data-userid', rowData.userId);
  }
  
  // Extract and clean up the status
  let statusText = '';
  if (rowData.status) {
    statusText = rowData.status;
  } else if (rowData.cells && rowData.cells[6]) {
    const originalStatus = rowData.cells[6];
    const statusMatches = [
      /P1 - PASSED \(Pending Finalization\)/,
      /P1 - FAILED \(Pending Finalization\)/,
      /P1 - PASSED/,
      /P1 - FAILED/
    ];
    
    for (const regex of statusMatches) {
      const match = originalStatus.match(regex);
      if (match) {
        statusText = match[0];
        break;
      }
    }
    
    if (!statusText) {
      const p1Match = originalStatus.match(/P1[^<\n]*/);
      if (p1Match) {
        statusText = p1Match[0].trim();
      }
    }
  }
  
  if (!statusText) {
    statusText = 'P1 - UNKNOWN STATUS';
  }
  
  console.log(`Row status determined as: "${statusText}"`);
  
  const cells = [
    rowData.cells[0] || 'N/A',
    rowData.cells[1] || 'Unknown Applicant',
    rowData.cells[2] || 'Unknown Department',
    rowData.cells[3] || 'Unknown Position',
    rowData.totalScore || 'N/A',
    '<span class="criteria-passed">Passed</span>',
    `<span><strong>Status:</strong> ${statusText}</span>`
  ];
  
  cells.forEach((cellHTML, index) => {
    const cell = document.createElement('td');
    
    // FIXED: Handle both string and non-string cell content
    if (typeof cellHTML === 'string') {
      cell.innerHTML = cellHTML;
    } else {
      cell.textContent = String(cellHTML);
    }
    
    newRow.appendChild(cell);
    console.log(`Added cell ${index + 1}: ${String(cellHTML).substring(0, 50)}...`);
  });
  
  // Add Actions column
  const actionsCell = document.createElement('td');
  const userId = rowData.userId || '';
  
  actionsCell.innerHTML = `
    <button 
      class="btn-change-status" 
      data-userid="${userId}"
      onclick="changeApplicantStatus('${userId}')"
    >
      Change Status
    </button>
  `;
  
  newRow.appendChild(actionsCell);
  console.log(`Added actions cell with userId: ${userId}`);
  
  return newRow;
}


function createP1AwaitingStatusCellEnhanced(rowData) {
  const userId = rowData.userId || '';
  
  console.log(`Creating P1 status cell for userId: ${userId}`);
  
  return `
    <span><strong>Status:</strong> P1 - Awaiting for Line Manager Action; HR PASSED</span>
    <div style="margin-top: 10px;">
      <button 
        class="btn-view-evaluation" 
        onclick="viewEvaluationModal('${userId}')"
        style="background-color: #28a745; color: white; border: 1px solid #28a745; padding: 10px 20px; cursor: pointer; border-radius: 5px; font-size: 14px; min-width: 150px; text-align: center; margin-bottom: 5px;"
      >
        View Evaluation
      </button>
      <div style="margin-top: 5px;">
        <button 
          class="btn-review" 
          onclick="passApplicant()"
          style="background-color: #28a745; color: white; margin-right: 5px; min-width: 70px;"
        >
          Pass
        </button>
        <button 
          class="btn-review" 
          onclick="rejectApplicant()"
          style="background-color: #dc3545; color: white; min-width: 70px;"
        >
          Reject
        </button>
      </div>
    </div>
  `;
}
async function viewEvaluationModal(userId) {
  console.log(`Fetching assessment data for userId: ${userId}`);
  
  if (!userId || userId === 'undefined') {
    console.error("Invalid userId passed to viewEvaluationModal:", userId);
    alert("Error: Invalid User ID. Cannot display applicant details.");
    return;
  }

  try {
    // Show loading state
    const loadingModal = document.createElement('div');
    loadingModal.style.cssText = `
      position: fixed; top: 0; left: 0; width: 100%; height: 100%; 
      background: rgba(0,0,0,0.5); z-index: 10000; display: flex; 
      align-items: center; justify-content: center; color: white; font-size: 18px;
    `;
    loadingModal.innerHTML = '<div>Loading assessment data...</div>';
    document.body.appendChild(loadingModal);

    // Fetch assessment data from the backend
    const response = await fetch(`/linemanager/get-assessment/${userId}`);
    const data = await response.json();
    
    // Remove loading modal
    document.body.removeChild(loadingModal);
    
    if (!data.success) {
      throw new Error(data.message || 'Failed to fetch assessment data');
    }
    
    const combinedData = data.combinedData;
    console.log('✅ Fetched assessment data:', combinedData);
    
    // Set userId for modal functions
    document.getElementById('userId').value = userId;
    
    // Set applicant details
    document.getElementById('applicant-name').textContent = `${combinedData.lastName || combinedData.firstName}, ${combinedData.firstName || ''}`;
    document.getElementById('applicant-birthday').textContent = combinedData.birthDate || 'N/A';
    document.getElementById('applicant-email').textContent = combinedData.email || 'N/A';
    document.getElementById('applicant-contact').textContent = combinedData.phoneNo || 'N/A';

    // Set scores
    document.getElementById('score-degree').textContent = combinedData.scores.degree || 'N/A';
    document.getElementById('score-experience').textContent = combinedData.scores.experience || 'N/A';
    document.getElementById('score-certifications').textContent = combinedData.scores.certifications || 'N/A';
    document.getElementById('score-hard-skills').textContent = combinedData.scores.hardSkills || 'N/A';
    document.getElementById('score-soft-skills').textContent = combinedData.scores.softSkills || 'N/A';
    document.getElementById('score-work-setup').textContent = combinedData.scores.workSetup || 'N/A';
    document.getElementById('score-availability').textContent = combinedData.scores.availability || 'N/A';

    // Set computation verdict
    document.getElementById('computation-verdict').textContent = combinedData.scores.total || 'N/A';

    // Set document URLs
    const cleanDegreeUrl = (combinedData.documents.degree && combinedData.documents.degree !== '#') ? combinedData.documents.degree : '#';
    const cleanCertUrl = (combinedData.documents.cert && combinedData.documents.cert !== '#') ? combinedData.documents.cert : '#';
    const cleanResumeUrl = (combinedData.documents.resume && combinedData.documents.resume !== '#') ? combinedData.documents.resume : '#';

    displayUploadedDocument(cleanDegreeUrl, "degree-doc", "degree-preview");
    displayUploadedDocument(cleanCertUrl, "cert-doc", "cert-preview");
    displayUploadedDocument(cleanResumeUrl, "resume-doc", "resume-preview");
    
    // FIXED: Handle additional documents
    await handleAdditionalDocuments(userId);

    // Show the modal
    document.getElementById('lineManagerInitialScreeningModalHtml').style.display = 'block';
    
  } catch (error) {
    console.error('❌ Error fetching assessment data:', error);
    alert('Error fetching assessment data: ' + error.message);
  }
}

// function to handle additional documents
async function handleAdditionalDocuments(userId) {
  console.log(`Checking for additional documents for userId: ${userId}`);
  
  try {
    const response = await fetch(`/hr/get-additional-document/${userId}`);
    const data = await response.json();
    
    if (data.success && data.additionalDocument) {
      console.log('✅ Found additional document:', data.additionalDocument);
      
      // Show the additional document section
      const addtlDocSection = document.getElementById('lm-addtl-document-section');
      if (addtlDocSection) {
        addtlDocSection.style.display = 'block';
        
        // Set additional document URL
        const addtlDocUrl = data.additionalDocument.addtlfile_url || '#';
        displayUploadedDocument(addtlDocUrl, "lm-addtl-doc", "lm-addtl-preview");
        
        // Set HR remarks if available
        const hrRemarksDisplay = document.getElementById('lm-hr-remarks-display');
        if (hrRemarksDisplay) {
          hrRemarksDisplay.textContent = data.additionalDocument.hr_remarks || 'No additional remarks from HR.';
        }
      }
    } else {
      console.log('ℹ️ No additional document found for this applicant');
      
      // Hide the additional document section
      const addtlDocSection = document.getElementById('lm-addtl-document-section');
      if (addtlDocSection) {
        addtlDocSection.style.display = 'none';
      }
    }
  } catch (error) {
    console.error('❌ Error fetching additional document:', error);
    // Don't show an error to user, just hide the section
    const addtlDocSection = document.getElementById('lm-addtl-document-section');
    if (addtlDocSection) {
      addtlDocSection.style.display = 'none';
    }
  }
}


// ============================
// P3 TABLE MANAGEMENT FUNCTIONS
// ============================
function populateP3AwaitingActionTableFixed(awaitingRowsP3) {
  console.log(`=== POPULATING P3 AWAITING ACTION TABLE (${awaitingRowsP3.length} rows) ===`);
  
  const awaitingActionTable = document.getElementById('p3AwaitingActionTable');
  if (!awaitingActionTable) {
    console.error("❌ P3 awaiting action table not found");
    return;
  }
  
  const awaitingTbody = awaitingActionTable.querySelector('tbody');
  if (!awaitingTbody) {
    console.error("❌ Tbody not found in P3 awaiting action table");
    return;
  }
  
  // Empty the tbody first
  awaitingTbody.innerHTML = '';
  
  if (awaitingRowsP3.length > 0) {
    awaitingRowsP3.forEach((rowData, idx) => {
      console.log(`Processing P3 awaiting row ${idx + 1}: ${rowData.name}`);
      
      const newRow = createP3AwaitingRowFixed(rowData);
      awaitingTbody.appendChild(newRow);
      
      if (rowData.userId) {
        newRow.setAttribute('data-userid', rowData.userId);
      }
      
      console.log(`✅ Added P3 awaiting row ${idx + 1}`);
    });
    
    console.log(`✅ Successfully populated P3 awaiting action table with ${awaitingRowsP3.length} rows`);
  } else {
    // FIXED: Add no data message for P3 awaiting
    console.log("❌ No P3 awaiting rows found - adding no data message");
    
    const messageRow = document.createElement('tr');
    const messageCell = document.createElement('td');
    
    // Get the number of columns from the header
    const headerCells = awaitingActionTable.querySelectorAll('thead th');
    const colspan = headerCells.length || 5;
    
    messageCell.setAttribute('colspan', colspan.toString());
    messageCell.className = 'text-center no-data-message';
    messageCell.style.padding = '20px';
    messageCell.style.backgroundColor = '#f8f9fa';
    messageCell.style.borderLeft = '4px solid #07ACB9';
    messageCell.style.color = '#555';
    messageCell.style.fontSize = '16px';
    messageCell.style.fontStyle = 'italic';
    messageCell.textContent = 'No P3 applicants awaiting for action.';
    
    messageRow.appendChild(messageCell);
    awaitingTbody.appendChild(messageRow);
    
    console.log("Added no data message to P3 awaiting table");
  }
}



// ENHANCED: P3 Awaiting Action Table with new columns
async function populateP3AwaitingActionTableEnhanced(awaitingRowsP3) {
    console.log(`=== ENHANCED P3 AWAITING ACTION TABLE (${awaitingRowsP3.length} rows) ===`);
    
    const awaitingActionTable = document.getElementById('p3AwaitingActionTable');
    if (!awaitingActionTable) {
        console.error("❌ P3 awaiting action table not found");
        return;
    }
    
    // Update table headers to include new columns
    const thead = awaitingActionTable.querySelector('thead');
    if (thead) {
        thead.innerHTML = `
            <tr>
                <th>Applicant No.</th>
                <th>Last Name, First Name</th>
                <th>Department</th>
                <th>Position Applied</th>
                <th>Total Assessment Rating</th>
                <th>Conclusion Statement</th>
                <th>Applicant Status</th>
            </tr>
        `;
    }
    
    const awaitingTbody = awaitingActionTable.querySelector('tbody');
    if (!awaitingTbody) {
        console.error("❌ Tbody not found in P3 awaiting action table");
        return;
    }
    
    // Clear existing content
    awaitingTbody.innerHTML = '';
    
    if (awaitingRowsP3.length > 0) {
        // Process each row with assessment data
        for (let idx = 0; idx < awaitingRowsP3.length; idx++) {
            const rowData = awaitingRowsP3[idx];
            console.log(`Processing enhanced P3 awaiting row ${idx + 1}: ${rowData.name}`);
            
            // Fetch assessment data for this user
            const assessmentData = await fetchP3AssessmentData(rowData.userId);
            
            const newRow = await createP3AwaitingRowEnhanced(rowData, assessmentData);
            awaitingTbody.appendChild(newRow);
            
            if (rowData.userId) {
                newRow.setAttribute('data-userid', rowData.userId);
            }
            
            console.log(`✅ Added enhanced P3 awaiting row ${idx + 1}`);
        }
        
        console.log(`✅ Successfully populated enhanced P3 awaiting action table with ${awaitingRowsP3.length} rows`);
    } else {
        // FIXED: Show "No data" message when no rows
        const messageRow = document.createElement('tr');
        const messageCell = document.createElement('td');
        messageCell.setAttribute('colspan', '7'); // 7 columns now
        messageCell.className = 'text-center no-data-message';
        messageCell.style.cssText = `
            padding: 30px;
            background-color: #f8f9fa;
            color: #6c757d;
            font-style: italic;
            font-size: 16px;
            border-left: 4px solid #007bff;
        `;
        messageCell.textContent = 'No P3 applicants with declared review results found.';
        messageRow.appendChild(messageCell);
        declaredTbody.appendChild(messageRow);
        
        // Hide the table and its header
        declaredResultsTable.style.display = 'none';
        const p3Header = document.getElementById('p3DeclaredResultsHeader');
        if (p3Header) {
            p3Header.style.display = 'none';
        }
        
        console.log("❌ No P3 declared rows - added no data message");
    }
}

// ENHANCED: P3 Declared Results Table with new columns
function populateP3DeclaredResultsTableEnhanced(declaredRowsP3) {
    console.log(`=== ENHANCED P3 DECLARED RESULTS (${declaredRowsP3.length} rows) ===`);
    
    const declaredResultsTable = document.getElementById('p3DeclaredResultsTable');
    if (!declaredResultsTable) {
        console.error("❌ P3 declared results table not found");
        return;
    }
    
    // Update table headers to include new columns
    const thead = declaredResultsTable.querySelector('thead');
    if (thead) {
        thead.innerHTML = `
            <tr>
                <th>Applicant No.</th>
                <th>Last Name, First Name</th>
                <th>Department</th>
                <th>Position Applied</th>
                <th>Total Assessment Rating</th>
                <th>Conclusion Statement</th>
                <th>Applicant Status</th>
                <th>Actions</th>
            </tr>
        `;
    }
    
    const declaredTbody = declaredResultsTable.querySelector('tbody');
    if (!declaredTbody) {
        console.error("❌ Tbody not found");
        return;
    }
    
    // Clear existing content
    declaredTbody.innerHTML = '';
    
    if (declaredRowsP3.length > 0) {
        declaredRowsP3.forEach(async (rowData, idx) => {
            console.log(`Processing enhanced P3 declared row ${idx + 1}:`, {
                name: rowData.name,
                status: rowData.status,
                userId: rowData.userId
            });
            
            const newRow = await createP3DeclaredRowEnhanced(rowData);
            declaredTbody.appendChild(newRow);
            
            if (rowData.userId) {
                newRow.setAttribute('data-userid', rowData.userId);
                
                const changeButton = newRow.querySelector('.btn-change-status');
                if (changeButton) {
                    changeButton.setAttribute('data-userid', rowData.userId);
                    changeButton.setAttribute('onclick', `changeApplicantStatus('${rowData.userId}')`);
                }
            }
            
            console.log(`✅ Added enhanced P3 declared row ${idx + 1} to table`);
        });
        
        console.log(`✅ Successfully populated enhanced P3 declared results table`);
        
        // Show the table and its header
        declaredResultsTable.style.display = 'table';
        const p3Header = document.getElementById('p3DeclaredResultsHeader');
        if (p3Header) {
            p3Header.style.display = 'block';
            p3Header.textContent = 'List of P3 Applicants on Review - Declared Results';
        }
    } else {
        displayNoDataMessage(declaredResultsTable, 'No P3 applicants with declared review results found.');
        
        // Hide the table and its header
        declaredResultsTable.style.display = 'none';
        const p3Header = document.getElementById('p3DeclaredResultsHeader');
        if (p3Header) {
            p3Header.style.display = 'none';
        }
    }
}


// ENHANCED: Create P3 awaiting row with assessment data
async function createP3AwaitingRowEnhanced(rowData, assessmentData) {
    console.log("Creating enhanced P3 awaiting row for:", rowData.name);
    
    const newRow = document.createElement('tr');
    
    if (rowData.userId) {
        newRow.setAttribute('data-userid', rowData.userId);
    }
    
    // Enhanced applicantId extraction
    let applicantId = extractApplicantIdForP3(rowData);
    
    console.log(`Enhanced P3 Row applicantId determined as: ${applicantId} for userId: ${rowData.userId}`);
    
    // P3 awaiting rows now have 7 columns (including assessment rating and conclusion)
    const cells = [
        rowData.cells[0] || 'N/A',                    // Applicant No.
        rowData.cells[1] || 'Unknown Applicant',      // Name
        rowData.cells[2] || 'Unknown Department',     // Department  
        rowData.cells[3] || 'Unknown Position',       // Position
        assessmentData.totalAssessmentRating,         // Total Assessment Rating
        assessmentData.conclusion,                     // Conclusion Statement
        createP3AwaitingStatusCellWithApplicantId(rowData, applicantId) // Status & Actions
    ];
    
    cells.forEach((cellHTML, index) => {
        const cell = document.createElement('td');
        
        if (typeof cellHTML === 'string') {
            cell.innerHTML = cellHTML;
        } else {
            cell.textContent = String(cellHTML);
        }
        
        newRow.appendChild(cell);
        console.log(`Added enhanced P3 cell ${index + 1}`);
    });
    
    return newRow;
}


// ENHANCED: Create P3 declared row with assessment data
async function createP3DeclaredRowEnhanced(rowData, assessmentData) {
    console.log("Creating enhanced P3 declared row for:", rowData.name);
    
    const newRow = document.createElement('tr');
    
    if (rowData.userId) {
        newRow.setAttribute('data-userid', rowData.userId);
    }
    
    // Extract and clean up the status for P3
    let statusText = '';
    if (rowData.status) {
        statusText = rowData.status;
    } else if (rowData.cells && rowData.cells[6]) {
        const originalStatus = rowData.cells[6];
        const statusMatches = [
            /P3 - PASSED \(Pending Finalization\)/,
            /P3 - FAILED \(Pending Finalization\)/,
            /P3 - PASSED/,
            /P3 - FAILED/
        ];
        
        for (const regex of statusMatches) {
            const match = originalStatus.match(regex);
            if (match) {
                statusText = match[0];
                break;
            }
        }
        
        if (!statusText) {
            const p3Match = originalStatus.match(/P3[^<\n]*/);
            if (p3Match) {
                statusText = p3Match[0].trim();
            }
        }
    }
    
    if (!statusText) {
        statusText = 'P3 - UNKNOWN STATUS';
    }
    
    console.log(`Enhanced P3 row status determined as: "${statusText}"`);
    
    // P3 declared rows now have 8 columns (7 + actions)
    const cells = [
        rowData.cells[0] || 'N/A',                    // Applicant No.
        rowData.cells[1] || 'Unknown Applicant',      // Name
        rowData.cells[2] || 'Unknown Department',     // Department
        rowData.cells[3] || 'Unknown Position',       // Position
        assessmentData.totalAssessmentRating,         // Total Assessment Rating
        assessmentData.conclusion,                     // Conclusion Statement
        `<span><strong>Status:</strong> ${statusText}</span>` // Status
    ];
    
    cells.forEach((cellHTML, index) => {
        const cell = document.createElement('td');
        cell.innerHTML = cellHTML;
        newRow.appendChild(cell);
    });
    
    // Add Actions column
    const actionsCell = document.createElement('td');
    const userId = rowData.userId || '';
    
    actionsCell.innerHTML = `
        <button 
            class="btn-change-status" 
            data-userid="${userId}"
            onclick="changeApplicantStatus('${userId}')"
        >
            Change Status
        </button>
    `;
    
    newRow.appendChild(actionsCell);
    
    return newRow;
}

// Enhanced sorting function for P3 tables
function sortP3TablesByAssessment(sortBy) {
    const tables = ['p3AwaitingActionTable', 'p3DeclaredResultsTable'];
    
    tables.forEach(tableId => {
        const table = document.getElementById(tableId);
        if (!table) return;
        
        const tbody = table.querySelector('tbody');
        const rows = Array.from(tbody.querySelectorAll('tr')).filter(row => 
            !row.querySelector('td[colspan]') && !row.classList.contains('section-header-row')
        );
        
        if (rows.length === 0) return;
        
        // Sort rows based on criteria
        rows.sort((rowA, rowB) => {
            switch (sortBy) {
                case 'rating-desc':
                    const ratingA = parseFloat(rowA.querySelector('td:nth-child(5)')?.textContent) || 0;
                    const ratingB = parseFloat(rowB.querySelector('td:nth-child(5)')?.textContent) || 0;
                    return ratingB - ratingA; // Highest first
                    
                case 'rating-asc':
                    const ratingA2 = parseFloat(rowA.querySelector('td:nth-child(5)')?.textContent) || 0;
                    const ratingB2 = parseFloat(rowB.querySelector('td:nth-child(5)')?.textContent) || 0;
                    return ratingA2 - ratingB2; // Lowest first
                    
                case 'conclusion-recommend':
                    const conclusionA = rowA.querySelector('td:nth-child(6)')?.textContent || '';
                    const conclusionB = rowB.querySelector('td:nth-child(6)')?.textContent || '';
                    
                    // Priority order: Strongly Recommend > Recommend > Recommend with Reservations > Do Not Recommend
                    const getPriority = (conclusion) => {
                        if (conclusion.includes('Strongly Recommend')) return 4;
                        if (conclusion.includes('Recommend with Reservations')) return 2;
                        if (conclusion.includes('Recommend')) return 3;
                        if (conclusion.includes('Do Not Recommend')) return 1;
                        return 0;
                    };
                    
                    return getPriority(conclusionB) - getPriority(conclusionA);
                    
                case 'name-asc':
                    const nameA = rowA.querySelector('td:nth-child(2)')?.textContent.trim() || '';
                    const nameB = rowB.querySelector('td:nth-child(2)')?.textContent.trim() || '';
                    return nameA.localeCompare(nameB);
                    
                case 'name-desc':
                    const nameA2 = rowA.querySelector('td:nth-child(2)')?.textContent.trim() || '';
                    const nameB2 = rowB.querySelector('td:nth-child(2)')?.textContent.trim() || '';
                    return nameB2.localeCompare(nameA2);
                    
                default:
                    return 0;
            }
        });
        
        // Clear and repopulate table
        tbody.innerHTML = '';
        rows.forEach(row => tbody.appendChild(row));
        
        console.log(`Sorted ${tableId} by ${sortBy}: ${rows.length} rows`);
    });
}



function createP3AwaitingRowFixed(rowData) {
    console.log("Creating fixed P3 awaiting row for:", rowData.name);
    
    const newRow = document.createElement('tr');
    
    if (rowData.userId) {
        newRow.setAttribute('data-userid', rowData.userId);
    }
    
    // FIXED: Enhanced applicantId extraction with multiple fallback methods
    let applicantId = extractApplicantIdForP3(rowData);
    
    console.log(`P3 Row applicantId determined as: ${applicantId} for userId: ${rowData.userId}`);
    
    // P3 awaiting rows have 5 columns with proper status display
    const cells = [
        rowData.cells[0] || 'N/A',                    // Applicant No.
        rowData.cells[1] || 'Unknown Applicant',      // Name
        rowData.cells[2] || 'Unknown Department',     // Department  
        rowData.cells[3] || 'Unknown Position',       // Position
        createP3AwaitingStatusCellWithApplicantId(rowData, applicantId) // Status & Actions with correct applicantId
    ];
    
    cells.forEach((cellHTML, index) => {
        const cell = document.createElement('td');
        
        if (typeof cellHTML === 'string') {
            cell.innerHTML = cellHTML;
        } else {
            cell.textContent = String(cellHTML);
        }
        
        newRow.appendChild(cell);
        console.log(`Added P3 cell ${index + 1}`);
    });
    
    return newRow;
}

// Enhanced P3 filtering function
function filterP3TablesByAssessment(filterBy) {
    const tables = ['p3AwaitingActionTable', 'p3DeclaredResultsTable'];
    
    tables.forEach(tableId => {
        const table = document.getElementById(tableId);
        if (!table) return;
        
        const tbody = table.querySelector('tbody');
        const rows = Array.from(tbody.querySelectorAll('tr')).filter(row => 
            !row.querySelector('td[colspan]') && !row.classList.contains('section-header-row')
        );
        
        let filteredRows = rows.filter(row => {
            switch (filterBy) {
                case 'all':
                    return true;
                    
                case 'strongly-recommend':
                    const conclusion = row.querySelector('td:nth-child(6)')?.textContent || '';
                    return conclusion.includes('Strongly Recommend');
                    
                case 'recommend':
                    const conclusion2 = row.querySelector('td:nth-child(6)')?.textContent || '';
                    return conclusion2.includes('Recommend') && !conclusion2.includes('Strongly') && !conclusion2.includes('Reservations');
                    
                case 'recommend-reservations':
                    const conclusion3 = row.querySelector('td:nth-child(6)')?.textContent || '';
                    return conclusion3.includes('Recommend with Reservations');
                    
                case 'do-not-recommend':
                    const conclusion4 = row.querySelector('td:nth-child(6)')?.textContent || '';
                    return conclusion4.includes('Do Not Recommend');
                    
                case 'rating-high':
                    const rating = parseFloat(row.querySelector('td:nth-child(5)')?.textContent) || 0;
                    return rating >= 4.0;
                    
                case 'rating-medium':
                    const rating2 = parseFloat(row.querySelector('td:nth-child(5)')?.textContent) || 0;
                    return rating2 >= 3.0 && rating2 < 4.0;
                    
                case 'rating-low':
                    const rating3 = parseFloat(row.querySelector('td:nth-child(5)')?.textContent) || 0;
                    return rating3 > 0 && rating3 < 3.0;
                    
                default:
                    return true;
            }
        });
        
        // Clear and show filtered rows
        tbody.innerHTML = '';
        
        if (filteredRows.length === 0) {
            const messageRow = document.createElement('tr');
            const messageCell = document.createElement('td');
            const headerCount = table.querySelectorAll('thead th').length;
            messageCell.setAttribute('colspan', headerCount.toString());
            messageCell.className = 'text-center no-data-message';
            messageCell.style.cssText = `
                padding: 30px;
                background-color: #f8f9fa;
                color: #6c757d;
                font-style: italic;
                font-size: 16px;
                border-left: 4px solid #ffc107;
            `;
            messageCell.textContent = 'No applicants match the selected criteria.';
            messageRow.appendChild(messageCell);
            tbody.appendChild(messageRow);
        } else {
            filteredRows.forEach(row => tbody.appendChild(row));
        }
        
        console.log(`Filtered ${tableId} by ${filterBy}: ${filteredRows.length} rows displayed`);
    });
}

// Add P3 filter controls
function createP3FilterControls() {
    // Create filter controls for P3 Awaiting Action Table
    createP3AwaitingFilterControls();
    
    // Create filter controls for P3 Declared Results Table
    createP3DeclaredFilterControls();
}

function createP3AwaitingFilterControls() {
    const p3AwaitingTable = document.getElementById('p3AwaitingActionTable');
    if (!p3AwaitingTable) return;
    
    const p3Section = document.getElementById('p3ReviewSection');
    if (!p3Section) return;
    
    // Find the "Awaiting for Action - P3" header
    const headers = p3Section.querySelectorAll('h4');
    let awaitingHeader = null;
    
    headers.forEach(header => {
        if (header.textContent.includes('Awaiting for Action - P3')) {
            awaitingHeader = header;
        }
    });
    
    if (!awaitingHeader) return;
    
    // Create filter controls container
    const filterContainer = document.createElement('div');
    filterContainer.id = 'p3AwaitingFilterControls';
    filterContainer.style.cssText = `
        margin: 15px 0;
        padding: 15px;
        background-color: #f8f9fa;
        border-radius: 5px;
        border: 1px solid #dee2e6;
    `;
    
    filterContainer.innerHTML = `
        <div style="display: flex; align-items: center; gap: 15px; flex-wrap: wrap;">
            <div style="display: flex; align-items: center; gap: 10px;">
                <label for="p3AwaitingSortBy" style="font-weight: bold; color: #124A5C;">Sort By:</label>
                <select id="p3AwaitingSortBy" style="padding: 8px; border: 1px solid #ddd; border-radius: 4px; background-color: white; min-width: 200px;">
                    <option value="rating-desc">Total Assessment Rating (Highest First)</option>
                    <option value="rating-asc">Total Assessment Rating (Lowest First)</option>
                    <option value="conclusion-recommend">Conclusion (Strongly Recommend First)</option>
                    <option value="name-asc">Name (A-Z)</option>
                    <option value="name-desc">Name (Z-A)</option>
                </select>
            </div>
            <div style="display: flex; align-items: center; gap: 10px;">
                <label for="p3AwaitingFilterBy" style="font-weight: bold; color: #124A5C;">Filter By:</label>
                <select id="p3AwaitingFilterBy" style="padding: 8px; border: 1px solid #ddd; border-radius: 4px; background-color: white; min-width: 180px;">
                    <option value="all">All Applicants</option>
                    <option value="strongly-recommend">Strongly Recommend</option>
                    <option value="recommend">Recommend</option>
                    <option value="recommend-reservations">Recommend with Reservations</option>
                    <option value="do-not-recommend">Do Not Recommend</option>
                    <option value="rating-high">High Rating (≥4.0)</option>
                    <option value="rating-medium">Medium Rating (3.0-3.9)</option>
                    <option value="rating-low">Low Rating (<3.0)</option>
                </select>
            </div>
            <button id="p3AwaitingApplyFilters" style="padding: 10px 20px; background-color: #124A5C; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: bold;">
                Apply
            </button>
            <button id="p3AwaitingClearFilters" style="padding: 10px 20px; background-color: #6c757d; color: white; border: none; border-radius: 4px; cursor: pointer;">
                Clear
            </button>
        </div>
    `;
    
    // Insert filter container after the awaiting header
    awaitingHeader.insertAdjacentElement('afterend', filterContainer);
    
    // Set up event listeners
    document.getElementById('p3AwaitingApplyFilters').addEventListener('click', () => {
        const sortBy = document.getElementById('p3AwaitingSortBy').value;
        const filterBy = document.getElementById('p3AwaitingFilterBy').value;
        
        filterP3TablesByAssessment(filterBy);
        sortP3TablesByAssessment(sortBy);
    });
    
    document.getElementById('p3AwaitingClearFilters').addEventListener('click', () => {
        document.getElementById('p3AwaitingSortBy').value = 'rating-desc';
        document.getElementById('p3AwaitingFilterBy').value = 'all';
        filterP3TablesByAssessment('all');
        sortP3TablesByAssessment('rating-desc');
    });
}

function createP3DeclaredFilterControls() {
    const p3DeclaredTable = document.getElementById('p3DeclaredResultsTable');
    if (!p3DeclaredTable) return;
    
    const p3Section = document.getElementById('p3ReviewSection');
    if (!p3Section) return;
    
    // Find the "List of P3 Applicants on Review - Declared Results" header
    const headers = p3Section.querySelectorAll('h4');
    let declaredHeader = null;
    
    headers.forEach(header => {
        if (header.textContent.includes('Declared Results') || header.id === 'p3DeclaredResultsHeader') {
            declaredHeader = header;
        }
    });
    
    if (!declaredHeader) return;
    
    // Create filter controls container
    const filterContainer = document.createElement('div');
    filterContainer.id = 'p3DeclaredFilterControls';
    filterContainer.style.cssText = `
        margin: 15px 0;
        padding: 15px;
        background-color: #f8f9fa;
        border-radius: 5px;
        border: 1px solid #dee2e6;
    `;
    
    filterContainer.innerHTML = `
        <div style="display: flex; align-items: center; gap: 15px; flex-wrap: wrap;">
            <div style="display: flex; align-items: center; gap: 10px;">
                <label for="p3DeclaredSortBy" style="font-weight: bold; color: #124A5C;">Sort By:</label>
                <select id="p3DeclaredSortBy" style="padding: 8px; border: 1px solid #ddd; border-radius: 4px; background-color: white; min-width: 200px;">
                    <option value="rating-desc">Total Assessment Rating (Highest First)</option>
                    <option value="rating-asc">Total Assessment Rating (Lowest First)</option>
                    <option value="conclusion-recommend">Conclusion (Strongly Recommend First)</option>
                    <option value="name-asc">Name (A-Z)</option>
                    <option value="name-desc">Name (Z-A)</option>
                </select>
            </div>
            <div style="display: flex; align-items: center; gap: 10px;">
                <label for="p3DeclaredFilterBy" style="font-weight: bold; color: #124A5C;">Filter By:</label>
                <select id="p3DeclaredFilterBy" style="padding: 8px; border: 1px solid #ddd; border-radius: 4px; background-color: white; min-width: 180px;">
                    <option value="all">All Applicants</option>
                    <option value="status-passed">Status: PASSED</option>
                    <option value="status-failed">Status: FAILED</option>
                    <option value="strongly-recommend">Strongly Recommend</option>
                    <option value="recommend">Recommend</option>
                    <option value="recommend-reservations">Recommend with Reservations</option>
                    <option value="do-not-recommend">Do Not Recommend</option>
                    <option value="rating-high">High Rating (≥4.0)</option>
                    <option value="rating-medium">Medium Rating (3.0-3.9)</option>
                    <option value="rating-low">Low Rating (<3.0)</option>
                </select>
            </div>
            <button id="p3DeclaredApplyFilters" style="padding: 10px 20px; background-color: #124A5C; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: bold;">
                Apply
            </button>
            <button id="p3DeclaredClearFilters" style="padding: 10px 20px; background-color: #6c757d; color: white; border: none; border-radius: 4px; cursor: pointer;">
                Clear
            </button>
        </div>
    `;
    
    // Insert filter container after the declared header
    declaredHeader.insertAdjacentElement('afterend', filterContainer);
    
    // Set up event listeners
    document.getElementById('p3DeclaredApplyFilters').addEventListener('click', () => {
        const sortBy = document.getElementById('p3DeclaredSortBy').value;
        const filterBy = document.getElementById('p3DeclaredFilterBy').value;
        
        filterP3TablesByAssessment(filterBy);
        sortP3TablesByAssessment(sortBy);
    });
    
    document.getElementById('p3DeclaredClearFilters').addEventListener('click', () => {
        document.getElementById('p3DeclaredSortBy').value = 'rating-desc';
        document.getElementById('p3DeclaredFilterBy').value = 'all';
        filterP3TablesByAssessment('all');
        sortP3TablesByAssessment('rating-desc');
    });
}

// Make functions globally available
window.populateP3AwaitingActionTableEnhanced = populateP3AwaitingActionTableEnhanced;
window.populateP3DeclaredResultsTableEnhanced = populateP3DeclaredResultsTableEnhanced;
window.createP3AwaitingRowEnhanced = createP3AwaitingRowEnhanced;
window.createP3DeclaredRowEnhanced = createP3DeclaredRowEnhanced;
window.fetchP3AssessmentData = fetchP3AssessmentData;
window.sortP3TablesByAssessment = sortP3TablesByAssessment;
window.filterP3TablesByAssessment = filterP3TablesByAssessment;
window.createP3FilterControls = createP3FilterControls;

function extractApplicantIdForP3(rowData) {
    let applicantId = rowData.applicantId || rowData.userId;
    
    // Method 1: Check embedded applicants data
    if (window.applicantsData && rowData.userId) {
        const applicantData = window.applicantsData.find(a => a.userId === rowData.userId);
        if (applicantData && applicantData.applicantId && applicantData.applicantId !== rowData.userId) {
            applicantId = applicantData.applicantId;
            console.log(`Method 1 - Found applicantId ${applicantId} from applicantsData`);
            return applicantId;
        }
    }
    
    // Method 2: Check applicant registry
    if (window.applicantRegistry && rowData.userId && window.applicantRegistry[rowData.userId]) {
        const registryData = window.applicantRegistry[rowData.userId];
        if (registryData.applicantId && registryData.applicantId !== rowData.userId) {
            applicantId = registryData.applicantId;
            console.log(`Method 2 - Found applicantId ${applicantId} from applicantRegistry`);
            return applicantId;
        }
    }
    
    // Method 3: Search main table for matching name
    if (rowData.name) {
        const mainTable = document.getElementById('mainApplicantTable');
        if (mainTable) {
            const rows = mainTable.querySelectorAll('tbody tr');
            for (const row of rows) {
                const nameCell = row.querySelector('td:nth-child(2)');
                if (nameCell && nameCell.textContent.includes(rowData.name)) {
                    // Check multiple potential sources for applicantId
                    const possibleApplicantId = row.getAttribute('data-applicant-id') || 
                                              row.querySelector('input[name="applicantId"]')?.value ||
                                              row.querySelector('[data-applicant-id]')?.getAttribute('data-applicant-id') ||
                                              row.querySelector('.btn-evaluation')?.getAttribute('href')?.match(/\/([^\/]+)$/)?.[1];
                    
                    if (possibleApplicantId && possibleApplicantId !== rowData.userId) {
                        applicantId = possibleApplicantId;
                        console.log(`Method 3 - Found applicantId ${applicantId} from main table`);
                        return applicantId;
                    }
                }
            }
        }
    }
    
    // Method 4: Try to extract from buttons or links in the current context
    if (rowData.cells && rowData.cells.length > 0) {
        const lastCell = rowData.cells[rowData.cells.length - 1];
        if (typeof lastCell === 'string') {
            const hrefMatch = lastCell.match(/href="[^"]*\/([^"\/]+)"/);
            if (hrefMatch && hrefMatch[1] && hrefMatch[1] !== rowData.userId) {
                applicantId = hrefMatch[1];
                console.log(`Method 4 - Found applicantId ${applicantId} from cell content`);
                return applicantId;
            }
        }
    }
    
    console.log(`Using fallback applicantId: ${applicantId} (may be userId)`);
    return applicantId;
}

// Helper function to create P3 status cell with proper applicantId
function createP3AwaitingStatusCellWithApplicantId(rowData, applicantId) {
   const userId = rowData.userId || '';
    const actualStatus = rowData.status || 'P3 - Line Manager Evaluation Accomplished';
    
    console.log(`🔧 P3 STATUS CELL FIX: userId: ${userId}, applicantId: ${applicantId}`);
    
    return `
        <span><strong>Status:</strong> ${actualStatus}</span>
        <div style="margin-top: 10px;">
          <button 
            class="btn-view-evaluation" 
            onclick="viewP3Evaluation('${applicantId || userId}', '${userId}')"
            style="background-color: #28a745; color: white; border: 1px solid #28a745; padding: 10px 20px; cursor: pointer; border-radius: 5px; font-size: 14px; min-width: 150px; text-align: center; margin-bottom: 5px;"
          >
            View Evaluation
          </button>
          <div style="margin-top: 5px;">
            <button 
              class="btn-review" 
              onclick="p3passApplicant('${userId}')"
              style="background-color: #28a745; color: white; margin-right: 5px; min-width: 70px;"
            >
              Pass
            </button>
            <button 
              class="btn-review" 
              onclick="p3rejectApplicant('${userId}')"
              style="background-color: #dc3545; color: white; min-width: 70px;"
            >
              Reject
            </button>
          </div>
        </div>
    `;
}

function viewP3Evaluation(applicantId, userId) {
    console.log(`🔧 P3 EVAL FIX: Starting with applicantId: ${applicantId}, userId: ${userId}`);
    
    // NEW APPROACH: If applicantId equals userId, that's actually OK for some systems
    // Instead of rejecting, let's try to find the real applicantId first, but accept userId as fallback
    
    let finalApplicantId = applicantId;
    
    // Try to find actual applicantId from embedded data
    if (userId && window.applicantsData) {
        const applicantData = window.applicantsData.find(a => a.userId == userId);
        if (applicantData && applicantData.applicantId && applicantData.applicantId !== userId) {
            finalApplicantId = applicantData.applicantId;
            console.log(`✅ P3 EVAL FIX: Found real applicantId ${finalApplicantId} for userId ${userId}`);
        } else if (applicantData && applicantData.applicantId) {
            finalApplicantId = applicantData.applicantId;
            console.log(`✅ P3 EVAL FIX: Using applicantId ${finalApplicantId} (same as userId)`);
        }
    }
    
    // Try alternative data sources
    if (!finalApplicantId || finalApplicantId === 'undefined') {
        // Look in applicant registry
        if (window.applicantRegistry && window.applicantRegistry[userId]) {
            const registryData = window.applicantRegistry[userId];
            if (registryData.applicantId) {
                finalApplicantId = registryData.applicantId;
                console.log(`✅ P3 EVAL FIX: Found applicantId ${finalApplicantId} in registry`);
            }
        }
    }
    
    // If still no good applicantId, use userId and let backend handle it
    if (!finalApplicantId || finalApplicantId === 'undefined') {
        finalApplicantId = userId;
        console.log(`⚠️ P3 EVAL FIX: Using userId ${userId} as applicantId fallback`);
    }
    
    // Construct the URL - try the route
    const evaluationUrl = `/linemanager/view-interview-form/${finalApplicantId}`;
    console.log(`🔧 P3 EVAL FIX: Navigating to: ${evaluationUrl}`);
    
    // Navigate to the evaluation page
    window.location.href = evaluationUrl;
}

// ALSO CREATE an alternative function that bypasses the applicantId issue entirely
function viewP3EvaluationByUserId(userId) {
    console.log(`🔧 P3 EVAL ALTERNATIVE: Using userId directly: ${userId}`);
    
    // Create a route that accepts userId instead of applicantId
    const evaluationUrl = `/linemanager/view-interview-form-by-userid/${userId}`;
    console.log(`🔧 P3 EVAL ALTERNATIVE: Trying: ${evaluationUrl}`);
    
    window.location.href = evaluationUrl;
}


function populateP3DeclaredResultsTableFixed(declaredRowsP3) {
  console.log(`=== POPULATING P3 DECLARED RESULTS (${declaredRowsP3.length} rows) ===`);
  
  const declaredResultsTable = document.getElementById('p3DeclaredResultsTable');
  if (!declaredResultsTable) {
    console.error("❌ P3 declared results table not found");
    return;
  }
  
  const declaredTbody = declaredResultsTable.querySelector('tbody');
  if (!declaredTbody) {
    console.error("❌ Tbody not found");
    return;
  }
  
  // Clear existing content
  declaredTbody.innerHTML = '';
  
  if (declaredRowsP3.length > 0) {
    declaredRowsP3.forEach((rowData, idx) => {
      console.log(`Processing P3 declared row ${idx + 1}:`, {
        name: rowData.name,
        status: rowData.status,
        userId: rowData.userId
      });
      
      const newRow = createP3DeclaredRowFixed(rowData);
      declaredTbody.appendChild(newRow);
      
      if (rowData.userId) {
        newRow.setAttribute('data-userid', rowData.userId);
        
        const changeButton = newRow.querySelector('.btn-change-status');
        if (changeButton) {
          changeButton.setAttribute('data-userid', rowData.userId);
          changeButton.setAttribute('onclick', `changeApplicantStatus('${rowData.userId}')`);
        }
      }
      
      console.log(`✅ Added P3 declared row ${idx + 1} to table`);
    });
    
    console.log(`✅ Successfully populated P3 declared results table`);
    
    // Show the table and its header
    declaredResultsTable.style.display = 'table';
    const p3Header = document.getElementById('p3DeclaredResultsHeader');
    if (p3Header) {
      p3Header.style.display = 'block';
      p3Header.textContent = 'List of P3 Applicants on Review - Declared Results';
    }
  } else {
    displayNoDataMessage(declaredResultsTable, 'No P3 applicants with declared review results found.');
    
    // Hide the table and its header
    declaredResultsTable.style.display = 'none';
    const p3Header = document.getElementById('p3DeclaredResultsHeader');
    if (p3Header) {
      p3Header.style.display = 'none';
    }
  }
}




function createP3DeclaredRowFixed(rowData) {
  console.log("Creating fixed P3 declared row for:", rowData.name);
  
  const newRow = document.createElement('tr');
  
  if (rowData.userId) {
    newRow.setAttribute('data-userid', rowData.userId);
  }
  
  // Extract and clean up the status for P3
  let statusText = '';
  if (rowData.status) {
    statusText = rowData.status;
  } else if (rowData.cells && rowData.cells[6]) {
    const originalStatus = rowData.cells[6];
    const statusMatches = [
      /P3 - PASSED \(Pending Finalization\)/,
      /P3 - FAILED \(Pending Finalization\)/,
      /P3 - PASSED/,
      /P3 - FAILED/
    ];
    
    for (const regex of statusMatches) {
      const match = originalStatus.match(regex);
      if (match) {
        statusText = match[0];
        break;
      }
    }
    
    if (!statusText) {
      const p3Match = originalStatus.match(/P3[^<\n]*/);
      if (p3Match) {
        statusText = p3Match[0].trim();
      }
    }
  }
  
  if (!statusText) {
    statusText = 'P3 - UNKNOWN STATUS';
  }
  
  console.log(`P3 row status determined as: "${statusText}"`);
  
  // P3 declared rows have 6 columns (5 + actions)
  const cells = [
    rowData.cells[0] || 'N/A',                    // Applicant No.
    rowData.cells[1] || 'Unknown Applicant',      // Name
    rowData.cells[2] || 'Unknown Department',     // Department
    rowData.cells[3] || 'Unknown Position',       // Position
    `<span><strong>Status:</strong> ${statusText}</span>` // Status
  ];
  
  cells.forEach((cellHTML, index) => {
    const cell = document.createElement('td');
    cell.innerHTML = cellHTML;
    newRow.appendChild(cell);
  });
  
  // Add Actions column
  const actionsCell = document.createElement('td');
  const userId = rowData.userId || '';
  
  actionsCell.innerHTML = `
    <button 
      class="btn-change-status" 
      data-userid="${userId}"
      onclick="changeApplicantStatus('${userId}')"
    >
      Change Status
    </button>
  `;
  
  newRow.appendChild(actionsCell);
  
  return newRow;
}
function createP3AwaitingStatusCellFixed(rowData) {
  const userId = rowData.userId || '';
  const applicantId = rowData.applicantId || userId; // For interview form links
  
  // FIXED: Use the actual applicant status from rowData.status instead of hardcoded text
  const actualStatus = rowData.status || 'P3 - Line Manager Evaluation Accomplished';
  
  console.log(`Creating P3 status cell for userId: ${userId}, applicantId: ${applicantId}, status: ${actualStatus}`);
  
  return `
    <span><strong>Status:</strong> ${actualStatus}</span>
    <div style="margin-top: 10px;">
      <a href="/view-interview-form/${applicantId}" style="text-decoration: none;">
        <button class="btn-view-evaluation" style="background-color: #28a745; color: white; border: 1px solid #28a745; padding: 10px 20px; cursor: pointer; border-radius: 5px; font-size: 14px; min-width: 150px; text-align: center;">
          View Evaluation
        </button>
      </a>
      <div style="margin-top: 5px;">
        <button 
          class="btn-review" 
          onclick="p3passApplicant('${userId}')"
          style="background-color: #28a745; color: white; margin-right: 5px; min-width: 70px;"
        >
          Pass
        </button>
        <button 
          class="btn-review" 
          onclick="p3rejectApplicant('${userId}')"
          style="background-color: #dc3545; color: white; min-width: 70px;"
        >
          Reject
        </button>
      </div>
    </div>
  `;
}



function finalizeP3Review() {
  console.log("Starting P3 review finalization with Gmail compose integration...");

  const p3DeclaredResultsTable = document.getElementById("p3DeclaredResultsTable");
  const rows = p3DeclaredResultsTable?.querySelectorAll('tbody tr:not(.section-header-row)') || [];

  const passedUserIds = [];
  const failedUserIds = [];

  rows.forEach(row => {
    if (row.querySelector('td[colspan]')) return;
    
    const statusCell = row.querySelector('td:nth-child(5)'); // P3 has 5 columns + actions
    const userId = row.getAttribute('data-userid');
    
    if (statusCell && userId) {
      const statusText = statusCell.textContent.trim();
      
      if (statusText.includes('P3')) {
        if (statusText.includes('PASSED')) {
          passedUserIds.push(userId);
          console.log(`Added ${userId} to P3 passed list (${statusText})`);
        } else if (statusText.includes('FAILED')) {
          failedUserIds.push(userId);
          console.log(`Added ${userId} to P3 failed list (${statusText})`);
        }
      }
    }
  });

  if (passedUserIds.length === 0 && failedUserIds.length === 0) {
    alert("No P3 applicants found with PASSED or FAILED status.");
    return;
  }

  console.log(`Preparing P3 Gmail compose for: ${passedUserIds.length} passed, ${failedUserIds.length} failed`);

  p3EmailsToUpdate = {
    passed: passedUserIds,
    failed: failedUserIds
  };

  Promise.all([
    fetchP3ApplicantDataForEmails(passedUserIds, failedUserIds),
    fetchP3EmailTemplates()
  ])
  .then(([applicantData, templates]) => {
    currentP3PassedApplicants = applicantData.passedApplicants || [];
    currentP3FailedApplicants = applicantData.failedApplicants || [];
    
    if (currentP3PassedApplicants.length > 0) {
      showP3PassedEmailModal();
    } else if (currentP3FailedApplicants.length > 0) {
      showP3FailedEmailModal();
    } else {
      alert("No P3 applicant data found for email composition.");
    }
  })
  .catch(error => {
    console.error("Error preparing P3 email composition:", error);
    alert("Error preparing P3 email composition: " + error.message);
  });
}
// Function to fetch P3 assessment data
async function fetchP3AssessmentData(userId) {
    try {
        const response = await fetch(`/linemanager/get-p3-assessment/${userId}`);
        if (response.ok) {
            const data = await response.json();
            if (data.success && data.assessmentData) {
                return {
                    totalAssessmentRating: data.assessmentData.totalAssessmentRating || 'N/A',
                    conclusion: data.assessmentData.conclusion || 'N/A'
                };
            }
        }
    } catch (error) {
        console.error(`Error fetching P3 assessment for userId ${userId}:`, error);
    }
    
    return {
        totalAssessmentRating: 'N/A',
        conclusion: 'N/A'
    };
}

// Fetch P3 Applicant Data for Emails
async function fetchP3ApplicantDataForEmails(passedUserIds, failedUserIds) {
   try {
        console.log("🎯 FIXED: Fetching P3 applicant data for emails...");
        console.log("🎯 FIXED: Passed userIds:", passedUserIds);
        console.log("🎯 FIXED: Failed userIds:", failedUserIds);
        
        // FIXED: Always build from local data first (most reliable method)
        const passedApplicants = [];
        const failedApplicants = [];
        
        // Build passed applicants data
        passedUserIds.forEach(userId => {
            console.log(`🎯 FIXED: Looking for userId ${userId} in applicantsData`);
            const applicant = window.applicantsData?.find(a => a.userId == userId);
            if (applicant) {
                const applicantData = {
                    userId: applicant.userId,
                    name: `${applicant.lastName}, ${applicant.firstName}`,
                    email: applicant.userEmail,
                    jobTitle: applicant.jobTitle,
                    department: applicant.deptName
                };
                passedApplicants.push(applicantData);
                console.log(`🎯 FIXED: Built passed applicant data for ${applicantData.email}`);
            } else {
                console.error(`🎯 FIXED: Could not find applicant data for userId ${userId}`);
                // Try to find in applicant registry as backup
                const registryData = window.applicantRegistry?.[userId];
                if (registryData) {
                    passedApplicants.push({
                        userId: userId,
                        name: registryData.fullName,
                        email: registryData.email,
                        jobTitle: registryData.position,
                        department: registryData.department
                    });
                    console.log(`🎯 FIXED: Used registry data for userId ${userId}`);
                }
            }
        });
        
        // Build failed applicants data
        failedUserIds.forEach(userId => {
            console.log(`🎯 FIXED: Looking for failed userId ${userId} in applicantsData`);
            const applicant = window.applicantsData?.find(a => a.userId == userId);
            if (applicant) {
                const applicantData = {
                    userId: applicant.userId,
                    name: `${applicant.lastName}, ${applicant.firstName}`,
                    email: applicant.userEmail,
                    jobTitle: applicant.jobTitle,
                    department: applicant.deptName
                };
                failedApplicants.push(applicantData);
                console.log(`🎯 FIXED: Built failed applicant data for ${applicantData.email}`);
            } else {
                console.error(`🎯 FIXED: Could not find failed applicant data for userId ${userId}`);
                // Try to find in applicant registry as backup
                const registryData = window.applicantRegistry?.[userId];
                if (registryData) {
                    failedApplicants.push({
                        userId: userId,
                        name: registryData.fullName,
                        email: registryData.email,
                        jobTitle: registryData.position,
                        department: registryData.department
                    });
                    console.log(`🎯 FIXED: Used registry data for failed userId ${userId}`);
                }
            }
        });
        
        console.log(`🎯 FIXED: Successfully built ${passedApplicants.length} passed and ${failedApplicants.length} failed P3 applicants from local data`);
        
        return {
            passedApplicants: passedApplicants,
            failedApplicants: failedApplicants
        };
        
    } catch (error) {
        console.error("🎯 FIXED: Error in P3 data fetching:", error);
        
        // Return empty arrays as absolute fallback
        return {
            passedApplicants: [],
            failedApplicants: []
        };
    }
}

async function fetchP3EmailTemplates() {
    try {
        console.log("🎯 FIXED: Fetching P3 email templates...");
        
        // Always return comprehensive default P3 templates
        const templates = {
            passed: {
                subject: 'Congratulations! Job Offer - Company ABC',
                template: `Dear {applicantName},

🎉 Congratulations! We are thrilled to extend a job offer for the {jobTitle} position at {companyName}.

After careful consideration of all candidates throughout our comprehensive interview process, we believe you are the perfect fit for our team and organization.

📋 Your Job Offer Details:
• Position: {jobTitle}
• Company: {companyName}
• Status: Job Offer Extended
• Next Steps: Please log into your applicant portal to review and respond to the offer

We were particularly impressed with your performance during the final interview stage, and we're excited about the unique skills and perspective you'll bring to our team.

🚀 What's Next?
• Check your applicant portal for detailed offer information
• Review the complete compensation package and benefits
• Respond to the offer within the specified timeframe
• Prepare for an exciting journey with {companyName}

We're excited to welcome you to the {companyName} family and look forward to your contribution to our continued success and growth.

Congratulations once again on this well-deserved achievement!

Warm regards,
The {companyName} Recruitment Team`
            },
            failed: {
                subject: 'Thank You for Your Interest - Interview Process Complete',
                template: `Dear {applicantName},

Thank you for participating in our comprehensive interview process for the {jobTitle} position at {companyName}, including your final interview with our senior management team.

We want to express our sincere appreciation for the time, effort, and enthusiasm you demonstrated throughout our entire recruitment process. Your professionalism and the thoughtful responses you provided during all stages of our interviews were truly impressive.

After extensive deliberation and careful consideration of all candidates, we have made the difficult decision to extend an offer to another candidate whose background and experience align slightly more closely with our current specific requirements for this role.

Please know that this decision was particularly challenging for our team. You demonstrated excellent qualifications, strong technical skills, and would undoubtedly be a valuable addition to any organization.

🌟 Moving Forward:
• Your application details will remain in our talent database for future opportunities
• We may contact you if a suitable position becomes available
• Please feel free to apply for other positions that align with your skills
• Follow our careers page for new openings that might be an excellent fit

We strongly encourage you to apply for future positions with us that align with your career goals and expertise. We believe you have much to offer and would welcome the opportunity to consider you for other roles.

Thank you again for your interest in {companyName} and for the professionalism you demonstrated throughout our process. We wish you tremendous success in your career journey.

Best regards,
The {companyName} Recruitment Team`
            }
        };
        
        console.log("🎯 FIXED: Using comprehensive default P3 email templates");
        return templates;
        
    } catch (error) {
        console.error("🎯 FIXED: Error fetching P3 email templates:", error);
        
        // Return minimal templates as absolute fallback
        return {
            passed: {
                subject: 'Congratulations! Job Offer - Company ABC',
                template: `Dear {applicantName},\n\nCongratulations! We are pleased to extend a job offer for the {jobTitle} position at {companyName}.\n\nBest regards,\nThe {companyName} Team`
            },
            failed: {
                subject: 'Thank You for Your Interest - Company ABC',
                template: `Dear {applicantName},\n\nThank you for your interest in the {jobTitle} position at {companyName}.\n\nBest regards,\nThe {companyName} Team`
            }
        };
    }
}

// FIXED: Open Gmail for P3 Passed
function openGmailForP3Passed() {
    const subject = document.getElementById('emailP3PassedModalEmailSubject')?.value;
    const template = document.getElementById('emailP3PassedModalEmailTemplate')?.value;
    
    if (!subject || !template) {
        alert("Please fill in both subject and template fields.");
        return;
    }
    
    const applicants = window.currentP3PassedApplicants;
    
    if (!confirm(`This will open Gmail with ${applicants.length} passed P3 applicants. The email formatting will be preserved. Continue?`)) {
        return;
    }
    
    const gmailUrl = buildGmailComposeUrl(applicants, subject, template);
    
    console.log(`🎯 FIXED: Opening Gmail for P3 passed applicants with formatting`);
    
    const gmailWindow = window.open(gmailUrl, '_blank');
    
    if (!gmailWindow) {
        alert('Please allow pop-ups for this site to open Gmail compose window.');
        return;
    }
    
    // Close current modal
    closeModal('emailP3PassedModal');
    
    // Show status update modal
    showP3StatusUpdateModal('passed');
}

function openGmailForP3Failed() {
    const subject = document.getElementById('emailP3FailedModalEmailSubject')?.value;
    const template = document.getElementById('emailP3FailedModalEmailTemplate')?.value;
    
    if (!subject || !template) {
        alert("Please fill in both subject and template fields.");
        return;
    }
    
    const applicants = window.currentP3FailedApplicants;
    
    if (!confirm(`This will open Gmail with ${applicants.length} failed P3 applicants. The email formatting will be preserved. Continue?`)) {
        return;
    }
    
    const gmailUrl = buildGmailComposeUrl(applicants, subject, template);
    
    console.log(`🎯 FIXED: Opening Gmail for P3 failed applicants with formatting`);
    
    const gmailWindow = window.open(gmailUrl, '_blank');
    
    if (!gmailWindow) {
        alert('Please allow pop-ups for this site to open Gmail compose window.');
        return;
    }
    
    // Close current modal
    closeModal('emailP3FailedModal');
    
    // Show status update modal
    showP3StatusUpdateModal('failed');
}

function showP3StatusUpdateModal(type) {
    const statusModal = document.createElement('div');
    statusModal.className = 'modal';
    statusModal.style.display = 'block';
    statusModal.id = 'p3StatusUpdateModal';
    
    const isPassedType = type === 'passed';
    const applicantCount = isPassedType ? 
        window.currentP3PassedApplicants?.length : 
        window.currentP3FailedApplicants?.length;
    
    statusModal.innerHTML = `
        <div class="modal-content" style="width: 70%; max-width: 600px;">
            <h2 style="text-align: center; color: #007bff;">
                <i class="fab fa-google" style="color: #db4437; margin-right: 10px;"></i>
                Gmail Compose Opened - P3 ${isPassedType ? 'Job Offer' : 'Notification'} Emails
            </h2>
            
            <div style="margin: 30px 0; text-align: center;">
                <div style="font-size: 64px; color: #db4437; margin-bottom: 20px;">
                    <i class="fab fa-google"></i>
                </div>
                <p style="font-size: 18px; margin-bottom: 20px;">
                    Gmail compose window has been opened for ${applicantCount} ${isPassedType ? 'passed' : 'failed'} P3 applicants.
                </p>
                
                <div style="background-color: #e3f2fd; padding: 25px; border-radius: 10px; margin: 25px 0; border-left: 5px solid #2196f3;">
                    <h4 style="color: #1976d2; margin-top: 0;">📋 Next Steps:</h4>
                    <ol style="text-align: left; margin: 15px 0; color: #1976d2; line-height: 1.8;">
                        <li><strong>Switch to Gmail tab</strong> - Check if Gmail opened correctly</li>
                        <li><strong>Review recipient list</strong> - Verify all emails are in "To:" field</li>
                        <li><strong>Send emails</strong> - Click Gmail's send button</li>
                        <li><strong>Return here</strong> - Click the appropriate button below</li>
                    </ol>
                </div>
            </div>
            
            <div style="background: linear-gradient(135deg, #d4edda, #c3e6cb); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #28a745;">
                <h4 style="color: #155724; margin-top: 0; display: flex; align-items: center;">
                    <i class="fas fa-check-circle" style="margin-right: 10px;"></i>
                    Email Status: P3 ${isPassedType ? 'Job Offer' : 'Notification'} Emails
                </h4>
                <p style="color: #155724; margin-bottom: 0; line-height: 1.6;">
                    <strong>Status:</strong> Pending Gmail Send
                </p>
            </div>
            
            <div class="modal-buttons">
                <button class="back-button" onclick="cancelEmailProcess()">
                    <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel Process
                </button>
                <button class="confirm-button" onclick="markP3EmailsAsSent('${type}')" 
                        style="background: linear-gradient(135deg, #28a745, #20c997); font-size: 16px; padding: 12px 25px;">
                    <i class="fas fa-check" style="margin-right: 8px;"></i>
                    Mark as Sent
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(statusModal);
}

// Mark P3 emails as sent
function markP3EmailsAsSent(type) {
    if (type === 'passed') {
        emailSendingState.passedSent = true;
        emailSendingState.currentStep = 'passed-complete';
    } else {
        emailSendingState.failedSent = true;
        emailSendingState.currentStep = 'failed-complete';
    }
    
    // Close current modal
    const currentModal = document.getElementById('p3StatusUpdateModal');
    if (currentModal) {
        currentModal.remove();
    }
    
    // Determine next step for P3
    const hasPassedApplicants = window.currentP3PassedApplicants?.length > 0;
    const hasFailedApplicants = window.currentP3FailedApplicants?.length > 0;
    
    if (type === 'passed' && hasFailedApplicants && !emailSendingState.failedSent) {
        // Show option to proceed with failed emails
        showProceedToP3FailedModal();
    } else if ((type === 'failed') || (type === 'passed' && !hasFailedApplicants) || 
               (emailSendingState.passedSent && emailSendingState.failedSent)) {
        // Show option to update database
        showProceedToP3DatabaseModal();
    }
}

// Show modal to proceed with P3 failed applicants
function showProceedToP3FailedModal() {
    const proceedModal = document.createElement('div');
    proceedModal.className = 'modal';
    proceedModal.style.display = 'block';
    proceedModal.id = 'proceedToP3FailedModal';
    
    const failedCount = window.currentP3FailedApplicants?.length || 0;
    
    proceedModal.innerHTML = `
        <div class="modal-content" style="width: 70%; max-width: 600px;">
            <h2 style="text-align: center; color: #007bff;">
                <i class="fas fa-arrow-right" style="color: #ffc107; margin-right: 10px;"></i>
                P3 Ready for Next Step
            </h2>
            
            <div style="margin: 30px 0; text-align: center;">
                <div style="font-size: 64px; color: #28a745; margin-bottom: 20px;">
                    <i class="fas fa-check-circle"></i>
                </div>
                <p style="font-size: 18px; margin-bottom: 20px;">
                    P3 job offer emails have been sent successfully!
                </p>
                
                <div style="background-color: #fff3cd; padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #ffc107;">
                    <h4 style="color: #856404; margin-top: 0;">📧 Next: Final Notification Emails</h4>
                    <p style="color: #856404; margin-bottom: 0; line-height: 1.6;">
                        You have <strong>${failedCount} P3 applicants</strong> who need to receive final notification emails.
                        Would you like to proceed with sending these emails?
                    </p>
                </div>
            </div>
            
            <div class="modal-buttons">
                <button class="back-button" onclick="skipToP3Database()">
                    <i class="fas fa-forward" style="margin-right: 5px;"></i>Skip to Database Update
                </button>
                <button class="confirm-button" onclick="proceedWithP3FailedEmails()" 
                        style="background: linear-gradient(135deg, #ffc107, #e0a800); color: #212529; font-size: 16px; padding: 12px 25px;">
                    <i class="fas fa-envelope" style="margin-right: 8px;"></i>
                    Proceed with Final Notification Emails
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(proceedModal);
}

// Proceed with P3 failed applicant emails
function proceedWithP3FailedEmails() {
    // Close proceed modal
    const proceedModal = document.getElementById('proceedToP3FailedModal');
    if (proceedModal) {
        proceedModal.remove();
    }
    
    // Show P3 failed email modal
    showP3FailedEmailModal();
}


// Show modal to proceed with P3 database update
function showProceedToP3DatabaseModal() {
    const databaseModal = document.createElement('div');
    databaseModal.className = 'modal';
    databaseModal.style.display = 'block';
    databaseModal.id = 'proceedToP3DatabaseModal';
    
    const passedCount = window.currentP3PassedApplicants?.length || 0;
    const failedCount = window.currentP3FailedApplicants?.length || 0;
    
    databaseModal.innerHTML = `
        <div class="modal-content" style="width: 70%; max-width: 600px;">
            <h2 style="text-align: center; color: #007bff;">
                <i class="fas fa-database" style="color: #28a745; margin-right: 10px;"></i>
                P3 Email Process Complete
            </h2>
            
            <div style="margin: 30px 0; text-align: center;">
                <div style="font-size: 64px; color: #28a745; margin-bottom: 20px;">
                    <i class="fas fa-check-double"></i>
                </div>
                <p style="font-size: 18px; margin-bottom: 20px;">
                    All P3 emails have been sent successfully!
                </p>
                
                <div style="background-color: #d4edda; padding: 20px; border-radius: 10px; margin: 20px 0; text-align: left;">
                    <h4 style="color: #155724; margin-top: 0;">📊 P3 Email Summary:</h4>
                    <ul style="color: #155724; margin-bottom: 0;">
                        ${emailSendingState.passedSent ? `<li><strong>Job offer emails sent:</strong> ${passedCount}</li>` : ''}
                        ${emailSendingState.failedSent ? `<li><strong>Final notification emails sent:</strong> ${failedCount}</li>` : ''}
                        <li><strong>Total P3 emails processed:</strong> ${passedCount + failedCount}</li>
                    </ul>
                </div>
            </div>
            
            <div style="background: linear-gradient(135deg, #fff3cd, #ffeaa7); padding: 20px; border-radius: 10px; margin: 20px 0; border-left: 5px solid #f39c12;">
                <h4 style="color: #856404; margin-top: 0; display: flex; align-items: center;">
                    <i class="fas fa-exclamation-triangle" style="margin-right: 10px;"></i>
                    Final Step Required
                </h4>
                <p style="color: #856404; margin-bottom: 0; line-height: 1.6;">
                    Click "Update Database" below to finalize the P3 applicant statuses in your system.
                </p>
            </div>
            
            <div class="modal-buttons">
                <button class="back-button" onclick="cancelEmailProcess()">
                    <i class="fas fa-times" style="margin-right: 5px;"></i>Cancel
                </button>
                <button class="confirm-button" onclick="executeP3DatabaseUpdate()" 
                        style="background: linear-gradient(135deg, #28a745, #20c997); font-size: 16px; padding: 12px 25px;">
                    <i class="fas fa-database" style="margin-right: 8px;"></i>
                    Update P3 Database
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(databaseModal);
}

// Execute P3 database update
function executeP3DatabaseUpdate() {
    const emailsToUpdate = window.p3EmailsToUpdate;
    
    if (!emailsToUpdate || (!emailsToUpdate.passed.length && !emailsToUpdate.failed.length)) {
        alert('No P3 applicant status updates to process.');
        return;
    }
    
    const updateButton = event.target;
    const originalText = updateButton.textContent;
    updateButton.textContent = 'Updating P3 Database...';
    updateButton.disabled = true;
    
    fetch('/linemanager/applicant-tracker-jobposition/updateP3Statuses', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            passedUserIds: emailsToUpdate.passed,
            failedUserIds: emailsToUpdate.failed
        }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Close modal
            closeModal('p3DatabaseUpdateConfirmationModal');
            
            const passedResults = emailSendingState.passedResults || { sent: 0 };
            const failedResults = emailSendingState.failedResults || { sent: 0 };
            
            alert(`P3 Process Complete!\n\nDatabase Updates:\n- ${data.passedUpdated || 0} passed applicants\n- ${data.failedUpdated || 0} failed applicants\n\nEmails Sent:\n- ${passedResults.sent} job offer emails\n- ${failedResults.sent} final notification emails\n\nAll P3 applicants have been processed successfully!`);
            
            // Reset state
            emailSendingState = {
                phase: null,
                passedSent: false,
                failedSent: false,
                currentStep: 'initial',
                passedResults: null,
                failedResults: null
            };
            
            // Clear P3 data
            window.currentP3PassedApplicants = [];
            window.currentP3FailedApplicants = [];
            window.p3EmailsToUpdate = { passed: [], failed: [] };
            
            if (window.p3EmailBatchResults) {
                window.p3EmailBatchResults = {
                    passed: { sent: 0, failed: 0, errors: [] },
                    failed: { sent: 0, failed: 0, errors: [] }
                };
            }
            
            // Reset global flag
            emailSendingInProgress = false;
            
            // Refresh view
            setTimeout(() => {
                const activeFilter = document.querySelector(".filter-button.active");
                if (activeFilter) {
                    activeFilter.click();
                } else {
                    document.getElementById("filter-all").click();
                }
            }, 500);
        } else {
            throw new Error(data.message || 'Failed to update P3 statuses');
        }
    })
    .catch(error => {
        console.error('❌ FIXED P3: Error updating P3 statuses:', error);
        alert('Error updating P3 applicant statuses: ' + error.message);
        
        updateButton.textContent = originalText;
        updateButton.disabled = false;
    });
}

// Skip to P3 database update
function skipToP3Database() {
    const proceedModal = document.getElementById('proceedToP3FailedModal');
    if (proceedModal) {
        proceedModal.remove();
    }
    showProceedToP3DatabaseModal();
}

function updateP3ApplicantStatuses() {
    if (!confirm('Have you successfully sent the P3 emails via Gmail? This will update the P3 applicant statuses in the database.')) {
        return;
    }
    
    console.log('🎯 FIXED: Updating P3 applicant statuses in database...');
    console.log('P3 Passed userIds:', window.p3EmailsToUpdate.passed);
    console.log('P3 Failed userIds:', window.p3EmailsToUpdate.failed);
    
    const updateButton = document.querySelector('#p3StatusUpdateModal .confirm-button');
    const originalText = updateButton.textContent;
    updateButton.textContent = 'Updating Database...';
    updateButton.disabled = true;
    
    fetch('/linemanager/applicant-tracker-jobposition/updateP3Statuses', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            passedUserIds: window.p3EmailsToUpdate.passed,
            failedUserIds: window.p3EmailsToUpdate.failed
        }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert(`P3 applicant statuses updated successfully!\n\nUpdated:\n- ${data.passedUpdated || 0} passed applicants\n- ${data.failedUpdated || 0} failed applicants`);
            
            closeModal('p3StatusUpdateModal');
            
            // Clear data
            window.currentP3PassedApplicants = [];
            window.currentP3FailedApplicants = [];
            window.p3EmailsToUpdate = { passed: [], failed: [] };
            
            // Refresh view
            setTimeout(() => {
                const activeFilter = document.querySelector(".filter-button.active");
                if (activeFilter) {
                    activeFilter.click();
                } else {
                    document.getElementById("filter-all").click();
                }
            }, 500);
        } else {
            throw new Error(data.message || 'Failed to update P3 statuses');
        }
    })
    .catch(error => {
        console.error('🎯 FIXED: Error updating P3 statuses:', error);
        alert('Error updating P3 applicant statuses: ' + error.message);
        
        updateButton.textContent = originalText;
        updateButton.disabled = false;
    });
}


// FIXED: Setup P3 Finalize Button Event Listener
document.addEventListener('DOMContentLoaded', function() {
  // P3 finalization buttons
  const finalizeP3Buttons = document.querySelectorAll('#finalizeP3Button, button[onclick*="finalizeP3"]');
  finalizeP3Buttons.forEach(button => {
    button.addEventListener('click', function() {
      if (checkAllP3ApplicantsMarked()) {
        document.getElementById('finalizeModalP3').style.display = 'block';
      } else {
        alert("Not all P3 applicants have been marked as passed or failed. Please make a decision for all applicants first.");
      }
    });
  });
});

// Check if all P3 applicants are marked
function checkAllP3ApplicantsMarked() {
    console.log("🎯 FIXED: Checking if all P3 applicants are marked");
    
    const p3DeclaredResultsTable = document.getElementById("p3DeclaredResultsTable");
    if (!p3DeclaredResultsTable) {
        console.log("No P3 declared results table found");
        return true;
    }
    
    const rows = p3DeclaredResultsTable.querySelectorAll('tbody tr:not(.section-header-row)');
    if (rows.length === 0) {
        console.log("No P3 rows found in declared results");
        return true;
    }
    
    const relevantRows = Array.from(rows).filter(row => {
        // Skip no-data messages
        if (row.querySelector('td[colspan]')) return false;
        
        // Search for P3 status in any column
        const cells = row.querySelectorAll('td');
        for (let i = 0; i < cells.length; i++) {
            if (cells[i].textContent.includes('P3')) {
                return true;
            }
        }
        return false;
    });
    
    if (relevantRows.length === 0) {
        console.log("No relevant P3 rows found");
        return true;
    }
    
    const allMarked = relevantRows.every(row => {
        if (row.classList.contains('section-header-row') || 
            row.querySelector('td[colspan]')) {
            return true;
        }
        
        // Search for status in any column
        const cells = row.querySelectorAll('td');
        let statusText = '';
        
        for (let i = 0; i < cells.length; i++) {
            if (cells[i].textContent.includes('P3')) {
                statusText = cells[i].textContent;
                break;
            }
        }
        
        const isMarked = statusText.indexOf('PASSED') !== -1 || statusText.indexOf('FAILED') !== -1;
        console.log(`P3 Row status: "${statusText}" - Marked: ${isMarked}`);
        return isMarked;
    });
    
    console.log(`All P3 applicants marked: ${allMarked}`);
    return allMarked;
}

console.log('✅ P3 Gmail Integration Functions Loaded Successfully');

function changeApplicantStatusP3Enhanced(userId) {
    console.log(`Change Status P3: Starting for userId: ${userId}`);
    
    if (!userId || userId === 'undefined' || userId === '') {
        console.error('Change Status P3: Invalid userId');
        alert("Error: Cannot identify the applicant to change status");
        return;
    }

    const row = document.querySelector(`tr[data-userid="${userId}"]`);
    if (!row) {
        console.error(`Change Status P3: Row not found for userId ${userId}`);
        alert("Error: Cannot find applicant row");
        return;
    }

    // Find the status cell by searching for "Status:" or "P3"
    let statusCell = null;
    const cells = row.querySelectorAll('td');
    
    for (let i = 0; i < cells.length; i++) {
        const cellText = cells[i].textContent;
        if (cellText.includes('Status:') || cellText.includes('P3')) {
            statusCell = cells[i];
            break;
        }
    }
    
    if (!statusCell) {
        console.error('Change Status P3: Status cell not found');
        return;
    }

    const currentStatus = statusCell.textContent.trim();
    console.log(`Change Status P3: Current status for userId ${userId}: ${currentStatus}`);

    let newStatus;
    let apiEndpoint;

    if (currentStatus.includes('P3')) {
        if (currentStatus.includes('PASSED')) {
            newStatus = 'P3 - FAILED (Pending Finalization)';
            apiEndpoint = 'markAsP3Failed';
        } else if (currentStatus.includes('FAILED')) {
            newStatus = 'P3 - PASSED (Pending Finalization)';
            apiEndpoint = 'markAsP3Passed';
        } else {
            newStatus = 'P3 - PASSED (Pending Finalization)';
            apiEndpoint = 'markAsP3Passed';
        }
    } else {
        console.error('Change Status P3: Unknown status format');
        alert("Error: Cannot determine how to change this status");
        return;
    }

    statusCell.innerHTML = `<span><strong>Status:</strong> ${newStatus}</span>`;

    if (!window.pendingStatusChanges) {
        window.pendingStatusChanges = {};
    }
    window.pendingStatusChanges[userId] = newStatus.includes('PASSED') ? 'PASSED' : 'FAILED';

    console.log(`Change Status P3: Updated to ${newStatus} for userId ${userId}`);

    fetch(`/linemanager/applicant-tracker-jobposition/${apiEndpoint}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId: userId }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            console.log(`Change Status P3: Successfully updated temporary status for ${userId}`);
        } else {
            console.error(`Change Status P3: API error: ${data.message || 'Unknown error'}`);
            alert("Error updating status: " + (data.message || "Unknown error"));
            
            statusCell.innerHTML = `<span><strong>Status:</strong> ${currentStatus}</span>`;
        }
    })
    .catch(error => {
        console.error('Change Status P3: Network error:', error);
        alert("Failed to update applicant status.");
        
        statusCell.innerHTML = `<span><strong>Status:</strong> ${currentStatus}</span>`;
    });
}
// ============================
// VISIBILITY & SECTION MANAGEMENT
// ============================

function updateP1P3SectionsVisibility(hasP1Awaiting, hasP1Declared, hasP3Awaiting, hasP3Declared) {
  console.log("Updating P1/P3 section visibility:", {
    hasP1Awaiting, hasP1Declared, hasP3Awaiting, hasP3Declared
  });

  // P1 Section visibility
  const p1ReviewSection = document.getElementById('p1ReviewSection');
  const p1AwaitingTable = document.getElementById('p1AwaitingActionTable');
  const p1DeclaredTable = document.getElementById('p1DeclaredResultsTable');
  const p1FinalizeButton = document.getElementById('p1FinalizeButtonContainer');
  
  if (p1ReviewSection) {
    p1ReviewSection.style.display = (hasP1Awaiting || hasP1Declared) ? 'block' : 'none';
  }
  
  if (p1AwaitingTable) {
    p1AwaitingTable.style.display = hasP1Awaiting ? 'table' : 'none';
  }
  
  if (p1DeclaredTable) {
    p1DeclaredTable.style.display = hasP1Declared ? 'table' : 'none';
  }
  
  if (p1FinalizeButton) {
    p1FinalizeButton.style.display = hasP1Declared ? 'block' : 'none';
  }
  
  // P3 Section visibility
  const p3ReviewSection = document.getElementById('p3ReviewSection');
  const p3AwaitingTable = document.getElementById('p3AwaitingActionTable');
  const p3DeclaredTable = document.getElementById('p3DeclaredResultsTable');
  const p3FinalizeButton = document.getElementById('p3FinalizeButtonContainer');
  
  if (p3ReviewSection) {
    p3ReviewSection.style.display = (hasP3Awaiting || hasP3Declared) ? 'block' : 'none';
  }
  
  if (p3AwaitingTable) {
    p3AwaitingTable.style.display = hasP3Awaiting ? 'table' : 'none';
  }
  
  if (p3DeclaredTable) {
    p3DeclaredTable.style.display = hasP3Declared ? 'table' : 'none';
  }
  
  if (p3FinalizeButton) {
    p3FinalizeButton.style.display = hasP3Declared ? 'block' : 'none';
  }
}

function displayNoDataMessage(table, message) {
  if (!table) return;
  
  const tbody = table.querySelector('tbody');
  if (!tbody) return;
  
  const existingMessage = tbody.querySelector('tr td[colspan].no-data-message');
  
  if (existingMessage) {
    existingMessage.textContent = message;
  } else {
    tbody.innerHTML = '';
    
    const messageRow = document.createElement('tr');
    const messageCell = document.createElement('td');
    
    const headerCells = table.querySelectorAll('thead th');
    const colspan = headerCells.length || 7;
    
    messageCell.setAttribute('colspan', colspan.toString());
    messageCell.className = 'text-center no-data-message';
    messageCell.style.padding = '20px';
    messageCell.style.backgroundColor = '#f8f9fa';
    messageCell.style.borderLeft = '4px solid #07ACB9';
    messageCell.style.color = '#555';
    messageCell.style.fontSize = '16px';
    messageCell.style.fontStyle = 'italic';
    messageCell.textContent = message;
    
    messageRow.appendChild(messageCell);
    tbody.appendChild(messageRow);
  }
}

function highlightActiveFilter(status) {
  document.querySelectorAll('.filter-button').forEach(btn => btn.classList.remove('active'));
  if (status === 'all') {
    document.getElementById('filter-all').classList.add('active');
  } else if (status === 'forreview') {
    document.getElementById('filter-forreview').classList.add('active');
  } else if (status === 'forevaluation') {
    document.getElementById('filter-forevaluation').classList.add('active');
  } else if (status === 'foronboarding') {
    document.getElementById('filter-foronboarding').classList.add('active');
  }
}


// Add this function to debug P3 detection issues
function debugP3Detection() {
  console.log("=== DEBUGGING P3 DETECTION ISSUES ===");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("❌ Main table not found");
    return;
  }
  
  const rows = Array.from(mainTable.querySelectorAll('tbody tr'));
  console.log(`Found ${rows.length} total rows in main table`);
  
  let p3Count = 0;
  let evaluationCount = 0;
  
  rows.forEach((row, index) => {
    const statusCell = row.querySelector('td:nth-child(5)');
    if (!statusCell) {
      console.log(`Row ${index + 1}: No status cell found`);
      return;
    }
    
    // Method 1: Check span element
    const statusSpan = statusCell.querySelector('span');
    let statusFromSpan = '';
    if (statusSpan) {
      statusFromSpan = statusSpan.textContent.replace(/Status:\s*/g, '').trim();
    }
    
    // Method 2: Full cell text
    const fullCellText = statusCell.textContent.trim();
    
    // Method 3: Cell innerHTML
    const cellHTML = statusCell.innerHTML;
    
    console.log(`\n=== ROW ${index + 1} ANALYSIS ===`);
    console.log(`Status from span: "${statusFromSpan}"`);
    console.log(`Full cell text: "${fullCellText.substring(0, 100)}..."`);
    console.log(`Cell HTML: "${cellHTML.substring(0, 150)}..."`);
    
    // Check for P3 in any form
    const hasP3 = statusFromSpan.includes('P3') || fullCellText.includes('P3') || cellHTML.includes('P3');
    const hasEvaluation = statusFromSpan.includes('Line Manager Evaluation Accomplished') || 
                         fullCellText.includes('Line Manager Evaluation Accomplished') || 
                         cellHTML.includes('Line Manager Evaluation Accomplished');
    
    if (hasP3) {
      p3Count++;
      console.log(`✅ Found P3 status in row ${index + 1}`);
      
      if (hasEvaluation) {
        evaluationCount++;
        console.log(`✅ Found "Line Manager Evaluation Accomplished" in row ${index + 1}`);
        
        // Check if this row has userId
        const userId = row.getAttribute('data-userid');
        console.log(`Row ${index + 1} userId: ${userId || 'NOT FOUND'}`);
        
        // Try to extract rowData
        try {
          const rowData = extractRowDataEnhanced(row, index);
          console.log(`Row ${index + 1} extracted data:`, {
            name: rowData?.name || 'NO NAME',
            userId: rowData?.userId || 'NO USERID',
            status: rowData?.status || 'NO STATUS'
          });
        } catch (error) {
          console.error(`Error extracting row data for row ${index + 1}:`, error);
        }
      }
    }
  });
  
  console.log(`\n=== SUMMARY ===`);
  console.log(`Total rows with P3: ${p3Count}`);
  console.log(`Total rows with "Line Manager Evaluation Accomplished": ${evaluationCount}`);
  
  // Check if P3 tables exist
  const p3AwaitingTable = document.getElementById('p3AwaitingActionTable');
  const p3DeclaredTable = document.getElementById('p3DeclaredResultsTable');
  
  console.log(`P3 Awaiting table exists: ${p3AwaitingTable ? 'YES' : 'NO'}`);
  console.log(`P3 Declared table exists: ${p3DeclaredTable ? 'YES' : 'NO'}`);
  
  if (p3AwaitingTable) {
    const p3Rows = p3AwaitingTable.querySelectorAll('tbody tr');
    console.log(`P3 Awaiting table currently has ${p3Rows.length} rows`);
    
    if (p3Rows.length > 0) {
      p3Rows.forEach((row, idx) => {
        const cells = row.querySelectorAll('td');
        console.log(`P3 Awaiting Row ${idx + 1}: ${cells.length} cells`);
        if (cells.length > 0) {
          console.log(`  First cell: ${cells[0].textContent}`);
          console.log(`  Last cell: ${cells[cells.length - 1].textContent.substring(0, 50)}...`);
        }
      });
    }
  }
  
  return {
    totalRows: rows.length,
    p3Count: p3Count,
    evaluationCount: evaluationCount,
    tablesExist: {
      awaiting: !!p3AwaitingTable,
      declared: !!p3DeclaredTable
    }
  };
}

// Function to manually trigger P3 review filter
function testP3ReviewFilter() {
  console.log("=== TESTING P3 REVIEW FILTER ===");
  
  // Click the For Review filter
  const forReviewButton = document.getElementById('filter-forreview');
  if (forReviewButton) {
    console.log("Clicking For Review filter...");
    forReviewButton.click();
    
    // Wait a bit then check results
    setTimeout(() => {
      const p3AwaitingTable = document.getElementById('p3AwaitingActionTable');
      if (p3AwaitingTable) {
        const p3Rows = p3AwaitingTable.querySelectorAll('tbody tr');
        console.log(`After filter click: P3 Awaiting table has ${p3Rows.length} rows`);
        
        p3Rows.forEach((row, idx) => {
          const noDataCell = row.querySelector('.no-data-message');
          if (noDataCell) {
            console.log(`Row ${idx + 1}: No data message - "${noDataCell.textContent}"`);
          } else {
            const cells = row.querySelectorAll('td');
            console.log(`Row ${idx + 1}: ${cells.length} cells with actual data`);
          }
        });
      }
    }, 1000);
  } else {
    console.log("❌ For Review filter button not found");
  }
}

// Make functions globally available
window.debugP3Detection = debugP3Detection;
window.testP3ReviewFilter = testP3ReviewFilter;

// Function to create test P3 data for debugging
function createTestP3Data() {
  console.log("=== CREATING TEST P3 DATA ===");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("❌ Main table not found");
    return;
  }
  
  const tbody = mainTable.querySelector('tbody');
  const rows = Array.from(tbody.querySelectorAll('tr'));
  
  if (rows.length === 0) {
    console.log("❌ No rows found in main table");
    return;
  }
  
  // Take the first row and modify it to have P3 status
  const testRow = rows[0];
  const statusCell = testRow.querySelector('td:nth-child(5)');
  
  if (statusCell) {
    const statusSpan = statusCell.querySelector('span');
    if (statusSpan) {
      const originalStatus = statusSpan.textContent;
      console.log(`Original status: "${originalStatus}"`);
      
      // Update to P3 status
      statusSpan.innerHTML = '<strong>Status:</strong> P3 - Line Manager Evaluation Accomplished';
      
      console.log(`✅ Updated first row status to: "P3 - Line Manager Evaluation Accomplished"`);
      
      // Ensure the row has a userId
      if (!testRow.getAttribute('data-userid')) {
        testRow.setAttribute('data-userid', 'test-user-' + Date.now());
        console.log(`✅ Added test userId to row`);
      }
      
      // Add For Review button if it doesn't exist
      const actionsCell = testRow.querySelector('td:last-child');
      if (actionsCell && !actionsCell.querySelector('.btn-review')) {
        const buttonDiv = document.createElement('div');
        buttonDiv.style.marginTop = '10px';
        buttonDiv.innerHTML = `
          <button class="btn-review" onclick="goToP3ReviewFilter()" 
                  style="background-color: white; color: black; border: 1px solid #124A5C; padding: 10px 20px; cursor: pointer; border-radius: 5px; font-size: 14px; min-width: 150px; text-align: center;">
            For Review
          </button>
        `;
        actionsCell.appendChild(buttonDiv);
        console.log(`✅ Added For Review button to row`);
      }
      
      alert('Test P3 data created! Now try clicking the "For Review" filter to see if it appears in the P3 Awaiting section.');
      
    } else {
      console.log("❌ No status span found in the first row");
    }
  } else {
    console.log("❌ No status cell found in the first row");
  }
}

// Function to reset test data
function resetTestData() {
  console.log("=== RESETTING TEST DATA ===");
  
  // Refresh the page to get original data
  if (confirm('This will refresh the page to reset test data. Continue?')) {
    window.location.reload();
  }
}

// Function to check current status of all rows
function checkAllRowStatuses() {
  console.log("=== CHECKING ALL ROW STATUSES ===");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("❌ Main table not found");
    return;
  }
  
  const rows = Array.from(mainTable.querySelectorAll('tbody tr'));
  console.log(`Found ${rows.length} rows to check`);
  
  const statusCounts = {
    p1: 0,
    p2: 0,
    p3: 0,
    other: 0
  };
  
  rows.forEach((row, index) => {
    const statusCell = row.querySelector('td:nth-child(5)');
    if (!statusCell) return;
    
    const statusSpan = statusCell.querySelector('span');
    const statusText = statusSpan ? statusSpan.textContent : statusCell.textContent;
    
    console.log(`Row ${index + 1}: "${statusText.trim()}"`);
    
    if (statusText.includes('P1')) {
      statusCounts.p1++;
    } else if (statusText.includes('P2')) {
      statusCounts.p2++;
    } else if (statusText.includes('P3')) {
      statusCounts.p3++;
      
      // Log specific P3 statuses
      if (statusText.includes('Line Manager Evaluation Accomplished')) {
        console.log(`  --> P3 Line Manager Evaluation Accomplished found!`);
      }
    } else {
      statusCounts.other++;
    }
  });
  
  console.log(`\n=== STATUS COUNTS ===`);
  console.log(`P1 statuses: ${statusCounts.p1}`);
  console.log(`P2 statuses: ${statusCounts.p2}`);
  console.log(`P3 statuses: ${statusCounts.p3}`);
  console.log(`Other statuses: ${statusCounts.other}`);
  
  return statusCounts;
}

// Make functions globally available
window.createTestP3Data = createTestP3Data;
window.resetTestData = resetTestData;
window.checkAllRowStatuses = checkAllRowStatuses;

// ============================
// DATA EXTRACTION & SCORE MANAGEMENT
// ============================

function extractScoresFromMainTable() {
  console.log("Extracting scores and userIds from main table...");
  
  window.mainTableScores = {};
  window.mainTableUserIds = {};
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("Main table not found");
    return;
  }
  
  const rows = mainTable.querySelectorAll('tbody tr');
  console.log(`Found ${rows.length} rows in main table`);
  
  rows.forEach((row, index) => {
    const nameCell = row.querySelector('td:nth-child(2)');
    if (!nameCell) return;
    
    const fullName = nameCell.textContent.split('\n')[0].trim();
    
    const reviewButton = row.querySelector('.btn-review');
    if (reviewButton) {
      const onclick = reviewButton.getAttribute('onclick') || '';
      if (onclick.includes('lineManagerInitialScreeningModal')) {
        const userIdMatch = onclick.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
        if (userIdMatch && userIdMatch[1]) {
          const userId = userIdMatch[1];
          
          window.mainTableUserIds[fullName] = userId;
          
          const scoreMatch = onclick.match(/},\s*['"]([^'"]*)['"]/);
          if (scoreMatch && scoreMatch[1]) {
            const score = scoreMatch[1];
            
            window.mainTableScores[userId] = score;
            window.mainTableScores[fullName] = score;
            
            console.log(`Extracted - Name: ${fullName}, UserId: ${userId}, Score: ${score}`);
          }
        }
      }
    }
  });
  
  console.log(`Extracted ${Object.keys(window.mainTableScores).length} scores from main table`);
}

function buildApplicantRegistry() {
  console.log("Building comprehensive applicant registry...");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("Main table not found - cannot build registry");
    return;
  }
  
  const rows = mainTable.querySelectorAll('tbody tr');
  
  rows.forEach((row, index) => {
    const reviewButton = row.querySelector('.btn-review');
    if (reviewButton) {
      const onclick = reviewButton.getAttribute('onclick') || '';
      if (onclick.includes('lineManagerInitialScreeningModal')) {
        const userIdMatch = onclick.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
        if (userIdMatch && userIdMatch[1]) {
          const userId = userIdMatch[1];
          
          const nameCell = row.querySelector('td:nth-child(2)');
          if (!nameCell) return;
          
          const fullContent = nameCell.innerHTML;
          const nameParts = fullContent.split('<br>');
          
          let fullName = '';
          if (nameParts.length > 0) {
            fullName = nameParts[0].trim();
          }
          
          let email = '';
          if (nameParts.length > 1) {
            email = nameParts[1].replace(/<[^>]*>/g, '').trim();
          }
          
          const deptCell = row.querySelector('td:nth-child(3)');
          const positionCell = row.querySelector('td:nth-child(4)');
          const department = deptCell ? deptCell.textContent.trim() : '';
          const position = positionCell ? positionCell.textContent.trim() : '';
          
          const statusCell = row.querySelector('td:nth-child(5) span');
          const status = statusCell ? statusCell.textContent.trim() : '';
          
          const scoreMatch = onclick.match(/},\s*['"]([^'"]*)['"]/);
          let score = null;
          if (scoreMatch && scoreMatch[1]) {
            score = scoreMatch[1];
            
            window.applicantsScores[userId] = score;
            window.mainTableScores[userId] = score;
            window.mainTableScores[fullName] = score;
          }
          
          window.applicantRegistry[userId] = {
            userId: userId,
            fullName: fullName,
            email: email,
            department: department,
            position: position,
            status: status,
            score: score
          };
          
          window.nameToUserId[fullName] = userId;
          window.emailToUserId[email] = userId;
          window.mainTableUserIds[fullName] = userId;
          window.applicantNameMapping[fullName] = userId;
          window.applicantStatusMap[userId] = status;
          
          row.setAttribute('data-userid', userId);
          row.setAttribute('data-name', fullName);
          row.setAttribute('data-email', email);
          
          console.log(`Added userId ${userId}, name '${fullName}' to registry`);
        }
      }
    }
  });
  
  console.log(`Applicant registry built with ${Object.keys(window.applicantRegistry).length} entries`);
}

function captureInitialScreeningScores() {
  console.log("Capturing initial screening scores from lineManagerInitialScreeningModal buttons");

  const reviewButtons = document.querySelectorAll('button[onclick*="lineManagerInitialScreeningModal"]');

  if (!window.applicantsScores) {
    window.applicantsScores = {};
  }

  if (!window.applicantNameMapping) {
    window.applicantNameMapping = {};
  }

  reviewButtons.forEach(button => {
    const onclickAttr = button.getAttribute('onclick') || '';
    
    try {
      const userIdMatch = onclickAttr.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
      if (userIdMatch && userIdMatch[1]) {
        const userId = userIdMatch[1];
        
        const row = button.closest('tr');
        if (row) {
          const nameCell = row.querySelector('td:nth-child(2)');
          if (nameCell) {
            const name = nameCell.textContent.replace(/\s+/g, ' ').trim();
            window.applicantNameMapping[name] = userId;
          }
        }
        
        const scoreMatch = onclickAttr.match(/},\s*['"]([^'"]*)['"]/);
        if (scoreMatch && scoreMatch[1]) {
          const score = scoreMatch[1];
          
          window.applicantsScores[userId] = score;
          console.log(`Cached score ${score} for userId ${userId}`);
        }
      }
    } catch (error) {
      console.error('Error parsing button onclick:', error);
    }
  });

  console.log(`Captured ${Object.keys(window.applicantsScores).length} scores`);
}

function captureApplicantsDataEnhanced() {
  console.log("Enhanced capture of all applicants data with improved user-specific score tracking");
  
  window.applicantsScores = window.applicantsScores || {};
  window.applicantNameMapping = window.applicantNameMapping || {};
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("Main table not found");
    return;
  }
  
  const rows = mainTable.querySelectorAll('tbody tr');
  
  rows.forEach((row, idx) => {
    const nameCell = row.querySelector('td:nth-child(2)');
    const applicantName = nameCell ? nameCell.textContent.replace(/\s+/g, ' ').trim() : '';
    
    const reviewButton = row.querySelector('.btn-review');
    if (reviewButton) {
      const onclickAttr = reviewButton.getAttribute('onclick') || '';
      if (onclickAttr.includes('lineManagerInitialScreeningModal')) {
        try {
          const userIdMatch = onclickAttr.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
          if (userIdMatch && userIdMatch[1]) {
            const userId = userIdMatch[1];
            
            if (applicantName) {
              window.applicantNameMapping[applicantName] = userId;
            }
            
            const scoreMatch = onclickAttr.match(/},\s*['"]([^'"]*)['"]/);
            if (scoreMatch && scoreMatch[1]) {
              const totalScore = scoreMatch[1];
              
              window.applicantsScores[userId] = totalScore;
              console.log(`Row ${idx+1}: Stored score ${totalScore} for userId ${userId}, name ${applicantName}`);
            } else {
              console.log(`Row ${idx+1}: No score found in onclick attribute for userId ${userId}`);
            }
          }
        } catch (error) {
          console.error(`Error processing row ${idx+1}:`, error);
        }
      }
    }
  });
  
  console.log(`Enhanced capture completed: Found ${Object.keys(window.applicantsScores).length} user-specific scores`);
}

async function getTotalScoreDirectly(userId, targetRow) {
  if (!userId || !targetRow) {
    console.log("Missing userId or targetRow, cannot get score");
    return;
  }
  
  console.log(`Looking for direct score for userId: ${userId}`);
  
  targetRow.setAttribute('data-userid', userId);
  
  // 1. First check the global cache
  if (window.applicantsScores && window.applicantsScores[userId]) {
    const cachedScore = window.applicantsScores[userId];
    console.log(`Using cached score ${cachedScore} for userId ${userId}`);
    updateScoreCellWithFormatting(targetRow, cachedScore);
    return;
  }
  
  // 2. Try to fetch from API if available
  try {
    const response = await fetch(`/linemanager/get-assessment/${userId}`);
    if (response.ok) {
      const data = await response.json();
      if (data.success && data.combinedData && data.combinedData.scores && data.combinedData.scores.total !== 'N/A') {
        const apiScore = data.combinedData.scores.total;
        console.log(`Fetched score ${apiScore} from API for userId ${userId}`);
        
        // Cache the score
        if (!window.applicantsScores) window.applicantsScores = {};
        window.applicantsScores[userId] = apiScore;
        
        updateScoreCellWithFormatting(targetRow, apiScore);
        return;
      }
    }
  } catch (error) {
    console.log(`API call failed for userId ${userId}, trying other methods`);
  }
  
  // 3. Get all review buttons from the main table and other tables
  const allReviewButtons = document.querySelectorAll('.btn-review');
  let foundScore = false;
  
  for (const button of allReviewButtons) {
    const onclickAttr = button.getAttribute('onclick') || '';
    
    if (onclickAttr.includes(`lineManagerInitialScreeningModal('${userId}'`) || 
        onclickAttr.includes(`lineManagerInitialScreeningModal("${userId}"`)) {
      
      try {
        const params = onclickAttr.match(/lineManagerInitialScreeningModal\s*\((.*?)\)/);
        if (params && params[1]) {
          const paramList = params[1].split(',');
          
          const closingBracketIndex = paramList.findIndex(p => p.includes('}'));
          if (closingBracketIndex >= 0 && paramList.length > closingBracketIndex + 1) {
            const scoreParam = paramList[closingBracketIndex + 1].trim();
            const score = scoreParam.replace(/['"]/g, '');
            
            console.log(`Extracted score from button: ${score}`);
            
            if (!window.applicantsScores) window.applicantsScores = {};
            window.applicantsScores[userId] = score;
            
            updateScoreCellWithFormatting(targetRow, score);
            foundScore = true;
            break;
          }
        }
      } catch (error) {
        console.error('Error parsing button parameters:', error);
      }
    }
  }
  
  // 4. If still not found, use N/A
  if (!foundScore) {
    console.log(`No score found for userId ${userId}, using N/A`);
    updateScoreCellWithFormatting(targetRow, 'N/A');
  }
}
// Make the new functions globally available
window.viewEvaluationModal = viewEvaluationModal;
window.handleAdditionalDocuments = handleAdditionalDocuments;
window.createP3AwaitingStatusCellFixed = createP3AwaitingStatusCellFixed;
window.createP3AwaitingRowFixed = createP3AwaitingRowFixed;
window.createP3AwaitingStatusCellWithApplicantId = createP3AwaitingStatusCellWithApplicantId;
window.setupP1TableFilters = setupP1TableFilters;
window.applyP1AwaitingFilters = applyP1AwaitingFilters;
window.applyP1DeclaredFilters = applyP1DeclaredFilters;
window.viewP3Evaluation = viewP3Evaluation;
window.extractApplicantIdForP3 = extractApplicantIdForP3;
window.setupP1TableFilters = setupP1TableFilters;
window.enhanceRowWithWorkSetupData = enhanceRowWithWorkSetupData;
window.matchesP1Filter = matchesP1Filter;
window.compareP1Rows = compareP1Rows;
window.getRowName = getRowName;
window.clearP1AwaitingFilters = clearP1AwaitingFilters;
window.clearP1DeclaredFilters = clearP1DeclaredFilters;
window.debugRoutes = debugRoutes;
window.testP3Route = testP3Route;
window.debugWorkSetupForAll = debugWorkSetupForAll;
window.findApplicantId = findApplicantId;

function updateScoreCellWithFormatting(row, score) {
  if (!row) {
    console.log("Missing row in updateScoreCellWithFormatting");
    return;
  }
  
  const scoreCell = row.querySelector('td:nth-child(5)');
  if (!scoreCell) {
    console.log("Score cell not found in row");
    return;
  }
  
  let formattedScore;
  if (score === 'N/A' || score === undefined || score === null || score === '') {
    formattedScore = 'N/A';
  } else {
    const scoreValue = parseFloat(score);
    formattedScore = isNaN(scoreValue) ? 'N/A' : scoreValue.toFixed(1);
  }
  
  row.setAttribute('data-score', formattedScore);
  
  scoreCell.innerHTML = `<span class="score">${formattedScore}</span>`;
  
  if (formattedScore !== 'N/A') {
    const scoreValue = parseFloat(formattedScore);
    
    scoreCell.classList.remove('high-score', 'medium-score', 'low-score');
    
    if (scoreValue >= 85) {
      scoreCell.classList.add('high-score');
      scoreCell.style.color = 'green';
    } else if (scoreValue >= 75) {
      scoreCell.classList.add('medium-score');
      scoreCell.style.color = 'blue';
    } else {
      scoreCell.classList.add('low-score');
      scoreCell.style.color = 'orange';
    }
  }
}

function fixAllTableScores() {
  captureApplicantsDataEnhanced();
  
  const tables = [
    document.getElementById('p1AwaitingActionTable'),
    document.getElementById('p1DeclaredResultsTable'),
    document.getElementById('p3AwaitingActionTable'),
    document.getElementById('p3DeclaredResultsTable')
  ].filter(table => table !== null);
  
  tables.forEach(table => {
    const rows = table.querySelectorAll('tbody tr:not(.section-header-row)');
    console.log(`Fixing scores for ${rows.length} rows in ${table.id}`);
    
    rows.forEach((row, idx) => {
      if (row.querySelector('td[colspan]')) return;
      
      let userId = row.getAttribute('data-userid');
      
      if (!userId) {
        const nameCell = row.querySelector('td:nth-child(2)');
        if (nameCell) {
          const name = nameCell.textContent.replace(/\s+/g, ' ').trim();
          const foundUserId = findUserIdByNameImproved(name);
          if (foundUserId) {
            row.setAttribute('data-userid', foundUserId);
            userId = foundUserId;
          }
        }
      }
      
      if (userId) {
        forceDatabaseScoreFetch(userId, row);
      }
    });
  });
  
  console.log("All table scores have been fixed");
}
function forceDatabaseScoreFetch(userId, row) {
  if (!userId || !row) {
    console.log("Missing userId or row in forceDatabaseScoreFetch");
    return;
  }
  
  // FIXED: Check if this is a P3 row and skip score fetching
  const statusCell = row.querySelector('td:nth-child(5)');
  if (statusCell) {
    const statusText = statusCell.textContent || statusCell.innerHTML;
    if (statusText.includes('P3')) {
      console.log(`Skipping score fetch for P3 row (userId: ${userId})`);
      return; // Don't try to fetch scores for P3 rows
    }
  }
  
  console.log(`Forcing database score fetch for userId: ${userId}`);
  
  const score = extractScoreFromButton(userId);
  
  if (score) {
    if (!window.applicantsScores) window.applicantsScores = {};
    window.applicantsScores[userId] = score;
    
    updateScoreCellWithFormatting(row, score);
    console.log(`Set score ${score} from database for userId ${userId}`);
    return;
  }
  
  if (window.applicantsScores && window.applicantsScores[userId]) {
    const cachedScore = window.applicantsScores[userId];
    updateScoreCellWithFormatting(row, cachedScore);
    console.log(`Used cached score ${cachedScore} for userId ${userId}`);
    return;
  }
  
  console.log(`No database score found for userId ${userId}`);
  updateScoreCellWithFormatting(row, 'N/A');
}

function extractScoreFromButton(userId) {
  const buttons = document.querySelectorAll(`button[onclick*="'${userId}'"]`);
  for (const button of buttons) {
    const onclickAttr = button.getAttribute('onclick') || '';
    
    if (onclickAttr.includes('lineManagerInitialScreeningModal')) {
      const scoreMatch = onclickAttr.match(/},\s*['"]([^'"]*)['"]/);
      if (scoreMatch && scoreMatch[1]) {
        return scoreMatch[1];
      }
    }
  }
  
  return null;
}

function findUserIdByNameImproved(name) {
  if (!name) return null;
  
  const cleanName = name.replace(/\s+/g, ' ').trim();
  
  if (window.applicantNameMapping && window.applicantNameMapping[cleanName]) {
    return window.applicantNameMapping[cleanName];
  }
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) return null;
  
  const rows = mainTable.querySelectorAll('tbody tr');
  for (const row of rows) {
    const nameCell = row.querySelector('td:nth-child(2)');
    if (!nameCell) continue;
    
    const cellNameText = nameCell.textContent.replace(/\s+/g, ' ').trim();
    
    if (cellNameText === cleanName) {
      const reviewButton = row.querySelector('.btn-review');
      if (reviewButton) {
        const onclickAttr = reviewButton.getAttribute('onclick') || '';
        const userIdMatch = onclickAttr.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
        if (userIdMatch && userIdMatch[1]) {
          if (!window.applicantNameMapping) window.applicantNameMapping = {};
          window.applicantNameMapping[cleanName] = userIdMatch[1];
          
          return userIdMatch[1];
        }
      }
    }
  }
  
  return null;
}

// ============================
// BUTTON FIXES & STATUS MANAGEMENT
// ============================

function fixChangeStatusButtons() {
  console.log("Fixing Change Status buttons...");
  
  const buttons = document.querySelectorAll('.btn-change-status');
  console.log(`Found ${buttons.length} Change Status buttons`);
  
  buttons.forEach((button, index) => {
    const existingUserId = button.getAttribute('data-userid');
    if (existingUserId && existingUserId !== 'undefined' && existingUserId !== '') {
      return;
    }
    
    const row = button.closest('tr');
    if (!row) {
      console.log(`Button ${index}: No parent row found`);
      return;
    }
    
    const userId = getReliableUserId(row);
    
    if (userId) {
      button.setAttribute('data-userid', userId);
      button.setAttribute('onclick', `changeApplicantStatus('${userId}')`);
      console.log(`Button ${index}: Set userId ${userId} from registry of real data`);
    } else {
      console.log(`Button ${index}: No valid userId found from real data`);
    }
  });
}

function getReliableUserId(row) {
  if (!row) return null;
  
  let userId = row.getAttribute('data-userid');
  if (userId && userId !== 'undefined' && userId !== '') {
    return userId;
  }
  
  if (!window.applicantRegistry || Object.keys(window.applicantRegistry).length === 0) {
    buildApplicantRegistry();
  }
  
  const reviewButton = row.querySelector('.btn-review');
  if (reviewButton) {
    const onclick = reviewButton.getAttribute('onclick') || '';
    const userIdMatch = onclick.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
    if (userIdMatch && userIdMatch[1]) {
      userId = userIdMatch[1];
      row.setAttribute('data-userid', userId);
      return userId;
    }
  }
  
  const nameCell = row.querySelector('td:nth-child(2)');
  if (nameCell) {
    const fullName = nameCell.textContent.split('\n')[0].trim();
    
    for (const [id, data] of Object.entries(window.applicantRegistry)) {
      if (data.fullName === fullName) {
        userId = id;
        row.setAttribute('data-userid', userId);
        console.log(`Found userId ${userId} by name match: "${fullName}"`);
        return userId;
      }
    }
    
    for (const [id, data] of Object.entries(window.applicantRegistry)) {
      if (data.fullName && (data.fullName.includes(fullName) || fullName.includes(data.fullName))) {
        userId = id;
        row.setAttribute('data-userid', userId);
        console.log(`Found userId ${userId} by partial name match`);
        return userId;
      }
    }
    
    if (window.nameToUserId && window.nameToUserId[fullName]) {
      userId = window.nameToUserId[fullName];
      row.setAttribute('data-userid', userId);
      console.log(`Found userId ${userId} from nameToUserId mapping`);
      return userId;
    }
    
    if (window.applicantNameMapping && window.applicantNameMapping[fullName]) {
      userId = window.applicantNameMapping[fullName];
      row.setAttribute('data-userid', userId);
      console.log(`Found userId ${userId} from applicantNameMapping`);
      return userId;
    }
    
    if (window.mainTableUserIds && window.mainTableUserIds[fullName]) {
      userId = window.mainTableUserIds[fullName];
      row.setAttribute('data-userid', userId);
      console.log(`Found userId ${userId} from mainTableUserIds mapping`);
      return userId;
    }
  }
  
  console.log("WARNING: Could not find userId for this row");
  return null;
}

function emergencyButtonFix() {
  console.log("*** EMERGENCY FIX: Direct userId injection for Change Status buttons ***");
  
  const buttons = document.querySelectorAll('.btn-change-status');
  console.log(`Found ${buttons.length} Change Status buttons for direct fix`);
  
  buttons.forEach((button, index) => {
    if (button.getAttribute('data-userid') && 
        button.getAttribute('data-userid') !== 'undefined' && 
        button.getAttribute('data-userid') !== '') {
      return;
    }
    
    const row = button.closest('tr');
    let userId = row ? row.getAttribute('data-userid') : null;
    
    if ((!userId || userId === 'undefined' || userId === '') && typeof getReliableUserId === 'function') {
      userId = getReliableUserId(row);
    }
    
    if (!userId && row) {
      const nameCell = row.querySelector('td:nth-child(2)');
      if (nameCell) {
        const nameCellText = nameCell.textContent.trim();
        console.log(`Button ${index}: Row name cell text: "${nameCellText}"`);
        
        const nameParts = nameCellText.split('\n');
        if (nameParts.length > 0) {
          const name = nameParts[0].trim();
          console.log(`Button ${index}: Extracted name: "${name}"`);
          
          if (window.nameToUserId && window.nameToUserId[name]) {
            userId = window.nameToUserId[name];
          } else if (window.applicantNameMapping && window.applicantNameMapping[name]) {
            userId = window.applicantNameMapping[name];
          } else if (window.displayNameToUserId && window.displayNameToUserId[nameCellText]) {
            userId = window.displayNameToUserId[nameCellText];
          } else if (window.mainTableUserIds && window.mainTableUserIds[name]) {
            userId = window.mainTableUserIds[name];
          } else if (window.applicantRegistry) {
            for (const [id, data] of Object.entries(window.applicantRegistry)) {
              if (data.fullName === name) {
                userId = id;
                break;
              }
            }
          }
        }
      }
    }
    
    if (userId && userId !== 'undefined' && userId !== '') {
      button.setAttribute('data-userid', userId);
      button.setAttribute('onclick', `changeApplicantStatus('${userId}')`);
      console.log(`Button ${index}: DIRECT FIX APPLIED - Set userId to ${userId}`);
      
      if (row) {
        row.setAttribute('data-userid', userId);
      }
    } else {
      console.error(`Button ${index}: Could not find any valid userId - button may not work`);
      button.disabled = true;
      button.title = "Could not identify applicant - please refresh the page";
    }
  });
  
  setTimeout(finalScoresFix, 200);
}

function finalScoresFix() {
  if (typeof extractScoresFromMainTable === 'function') {
    extractScoresFromMainTable();
  }
  
  fixAllTableScores();
  
  const declaredResultsTable = document.getElementById('p1DeclaredResultsTable');
  if (declaredResultsTable) {
    const rows = declaredResultsTable.querySelectorAll('tbody tr:not(.section-header-row)');
    rows.forEach((row) => {
      if (row.querySelector('td[colspan]')) return;
      
      const nameCell = row.querySelector('td:nth-child(2)');
      const scoreCell = row.querySelector('td:nth-child(5)');
      
      if (nameCell && scoreCell && scoreCell.textContent.trim() === 'N/A') {
        const name = nameCell.textContent.split('\n')[0].trim();
        
        if (window.mainTableScores && window.mainTableScores[name]) {
          const score = window.mainTableScores[name];
          scoreCell.innerHTML = `<span class="score">${score}</span>`;
          console.log(`Final fix: Applied score ${score} for row with name '${name}'`);
          
          applyScoreColor(scoreCell, score);
        } else {
          const userId = row.getAttribute('data-userid');
          if (userId && window.mainTableScores && window.mainTableScores[userId]) {
            const score = window.mainTableScores[userId];
            scoreCell.innerHTML = `<span class="score">${score}</span>`;
            console.log(`Final fix: Applied score ${score} for row with userId ${userId}`);
            
            applyScoreColor(scoreCell, score);
          }
        }
      }
    });
  }
}

function applyScoreColor(scoreCell, score) {
  const scoreValue = parseFloat(score);
  if (!isNaN(scoreValue)) {
    if (scoreValue >= 85) {
      scoreCell.classList.add('high-score');
      scoreCell.style.color = 'green';
    } else if (scoreValue >= 75) {
      scoreCell.classList.add('medium-score');
      scoreCell.style.color = 'blue';
    } else {
      scoreCell.classList.add('low-score');
      scoreCell.style.color = 'orange';
    }
  }
}
// ============================
// STATUS CHANGE FUNCTIONS
// ============================

function changeApplicantStatus(userId) {
  console.log(`Change Status: Starting for userId: ${userId}`);
  
  if (!userId || userId === 'undefined' || userId === '') {
    console.error('Change Status: Invalid userId');
    alert("Error: Cannot identify the applicant to change status");
    return;
  }

  const row = document.querySelector(`tr[data-userid="${userId}"]`);
  if (!row) {
    console.error(`Change Status: Row not found for userId ${userId}`);
    alert("Error: Cannot find applicant row");
    return;
  }

  const statusCell = row.querySelector('td:nth-child(7)') || row.querySelector('td:nth-child(5)');
  if (!statusCell) {
    console.error('Change Status: Status cell not found');
    return;
  }

  const currentStatus = statusCell.textContent.trim();
  console.log(`Change Status: Current status for userId ${userId}: ${currentStatus}`);

  let newStatus;
  let apiEndpoint;

  if (currentStatus.includes('P1')) {
    if (currentStatus.includes('PASSED')) {
      newStatus = 'P1 - FAILED (Pending Finalization)';
      apiEndpoint = 'markAsP1Failed';
    } else if (currentStatus.includes('FAILED')) {
      newStatus = 'P1 - PASSED (Pending Finalization)';
      apiEndpoint = 'markAsP1Passed';
    } else {
      newStatus = 'P1 - PASSED (Pending Finalization)';
      apiEndpoint = 'markAsP1Passed';
    }
  } else if (currentStatus.includes('P3')) {
    if (currentStatus.includes('PASSED')) {
      newStatus = 'P3 - FAILED (Pending Finalization)';
      apiEndpoint = 'markAsP3Failed';
    } else if (currentStatus.includes('FAILED')) {
      newStatus = 'P3 - PASSED (Pending Finalization)';
      apiEndpoint = 'markAsP3Passed';
    } else {
      newStatus = 'P3 - PASSED (Pending Finalization)';
      apiEndpoint = 'markAsP3Passed';
    }
  } else {
    console.error('Change Status: Unknown status format');
    alert("Error: Cannot determine how to change this status");
    return;
  }

  statusCell.innerHTML = `<span><strong>Status:</strong> ${newStatus}</span>`;

  if (!window.pendingStatusChanges) {
    window.pendingStatusChanges = {};
  }
  window.pendingStatusChanges[userId] = newStatus.includes('PASSED') ? 'PASSED' : 'FAILED';

  console.log(`Change Status: Updated to ${newStatus} for userId ${userId}`);

  fetch(`/linemanager/applicant-tracker-jobposition/${apiEndpoint}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ userId: userId }),
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      console.log(`Change Status: Successfully updated temporary status for ${userId}`);
    } else {
      console.error(`Change Status: API error: ${data.message || 'Unknown error'}`);
      alert("Error updating status: " + (data.message || "Unknown error"));
      
      statusCell.innerHTML = `<span><strong>Status:</strong> ${currentStatus}</span>`;
    }
  })
  .catch(error => {
    console.error('Change Status: Network error:', error);
    alert("Failed to update applicant status.");
    
    statusCell.innerHTML = `<span><strong>Status:</strong> ${currentStatus}</span>`;
  });
}

function passApplicant() {
  const userId = document.getElementById('userId').value;
  if (!userId) {
    alert("Error: Invalid User ID");
    return;
  }

  fetch('/linemanager/applicant-tracker-jobposition/markAsP1Passed', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ userId: userId }),
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      document.getElementById('lineManagerInitialScreeningModalHtml').style.display = 'none';
      
      if (!window.pendingStatusChanges) {
        window.pendingStatusChanges = {};
      }
      window.pendingStatusChanges[userId] = 'PASSED';
      
      setTimeout(() => {
        const activeFilter = document.querySelector(".filter-button.active");
        if (activeFilter) {
          activeFilter.click();
        } else {
          document.getElementById("filter-all").click();
        }
      }, 300);
      
      alert("Successfully marked applicant status as PASSED! The applicant will be notified when you finalize the review.");
      
    } else {
      alert("Error updating applicant status: " + (data.message || "Unknown error"));
    }
  })
  .catch(error => {
    console.error("Error:", error);
    alert("Failed to update applicant status.");
  });
}

function rejectApplicant() {
  const userId = document.getElementById('userId').value;
  if (!userId) {
    alert("Error: Invalid User ID");
    return;
  }
  
  fetch('/linemanager/applicant-tracker-jobposition/markAsP1Failed', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ userId: userId }),
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      document.getElementById('lineManagerInitialScreeningModalHtml').style.display = 'none';
      
      if (!window.pendingStatusChanges) {
        window.pendingStatusChanges = {};
      }
      window.pendingStatusChanges[userId] = 'FAILED';
      
      setTimeout(() => {
        const activeFilter = document.querySelector(".filter-button.active");
        if (activeFilter) {
          activeFilter.click();
        } else {
          document.getElementById("filter-all").click();
        }
      }, 300);
      
      alert("Successfully marked applicant status as FAILED! The applicant will be notified when you finalize the review.");
      
    } else {
      alert("Error updating applicant status: " + (data.message || "Unknown error"));
    }
  })
  .catch(error => {
    console.error("Error:", error);
    alert("Failed to update applicant status.");
  });
}

function p3passApplicant(userId) {
  console.log(`P3 Pass: Starting pass action for userId: ${userId}`);
  
  if (!userId) {
    console.error('P3 Pass: Missing userId');
    alert("Error: Invalid User ID");
    return;
  }

  fetch('/linemanager/applicant-tracker-jobposition/markAsP3Passed', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ userId: userId }),
  })
  .then(response => {
    console.log(`P3 Pass: API response status: ${response.status}`);
    return response.json();
  })
  .then(data => {
    console.log('P3 Pass: API response data:', data);
    
    if (data.success) {
      if (!window.pendingStatusChanges) {
        window.pendingStatusChanges = {};
      }
      window.pendingStatusChanges[userId] = 'PASSED';
      
      // Move row from awaiting to declared section
      moveP3RowToSection(userId, 'p3AwaitingActionTable', 'p3DeclaredResultsTable');
      
      console.log(`P3 Pass: Successfully marked userId ${userId} as P3 PASSED!`);
      alert("Successfully marked applicant as P3 PASSED!");
      
    } else {
      console.error(`P3 Pass: API error: ${data.message}`);
      alert("Error updating applicant status: " + (data.message || "Unknown error"));
    }
  })
  .catch(error => {
    console.error("P3 Pass: Network error:", error);
    alert("Failed to update applicant status.");
  });
}

function p3rejectApplicant(userId) {
  console.log(`P3 Reject: Starting reject action for userId: ${userId}`);
  
  if (!userId) {
    console.error('P3 Reject: Missing userId');
    alert("Error: Invalid User ID");
    return;
  }

  fetch('/linemanager/applicant-tracker-jobposition/markAsP3Failed', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ userId: userId }),
  })
  .then(response => {
    console.log(`P3 Reject: API response status: ${response.status}`);
    return response.json();
  })
  .then(data => {
    console.log('P3 Reject: API response data:', data);
    
    if (data.success) {
      if (!window.pendingStatusChanges) {
        window.pendingStatusChanges = {};
      }
      window.pendingStatusChanges[userId] = 'FAILED';
      
      // Move row from awaiting to declared section
      moveP3RowToSection(userId, 'p3AwaitingActionTable', 'p3DeclaredResultsTable');
      
      console.log(`P3 Reject: Successfully marked userId ${userId} as P3 FAILED!`);
      alert("Successfully marked applicant as P3 FAILED!");
      
    } else {
      console.error(`P3 Reject: API error: ${data.message}`);
      alert("Error updating applicant status: " + (data.message || "Unknown error"));
    }
  })
  .catch(error => {
    console.error("P3 Reject: Network error:", error);
    alert("Failed to update applicant status.");
  });
}
function moveP3RowToSection(userId, fromTableId, toTableId) {
  console.log(`P3 Move: Moving userId ${userId} from ${fromTableId} to ${toTableId}`);
  
  const fromTable = document.getElementById(fromTableId);
  const toTable = document.getElementById(toTableId);
  
  if (!fromTable || !toTable) {
    console.error(`P3 Move: Tables not found: ${fromTableId} or ${toTableId}`);
    return;
  }
  
  const rows = fromTable.querySelectorAll('tbody tr');
  let rowToMove = null;
  
  for (const row of rows) {
    if (row.getAttribute('data-userid') === userId) {
      rowToMove = row;
      break;
    }
  }
  
  if (!rowToMove) {
    console.error(`P3 Move: Row for userId ${userId} not found in ${fromTableId}`);
    return;
  }
  
  const statusCell = rowToMove.querySelector('td:last-child');
  if (statusCell) {
    const isPassed = window.pendingStatusChanges[userId] === 'PASSED';
    statusCell.innerHTML = `
      <span><strong>Status:</strong> P3 - ${isPassed ? 'PASSED' : 'FAILED'} (Pending Finalization)</span>
    `;
    console.log(`P3 Move: Updated status cell to P3 - ${isPassed ? 'PASSED' : 'FAILED'}`);
  }
  
  if (toTableId === 'p3DeclaredResultsTable') {
    if (rowToMove.querySelectorAll('td').length === 5) {
      const actionsCell = document.createElement('td');
      const isPassed = window.pendingStatusChanges[userId] === 'PASSED';
      actionsCell.innerHTML = `
        <button 
          class="btn-change-status ${isPassed ? 'status-passed' : 'status-failed'}" 
          data-userid="${userId}"
          onclick="changeApplicantStatus('${userId}')"
        >
          Change Status
        </button>
      `;
      rowToMove.appendChild(actionsCell);
      console.log(`P3 Move: Added change status button for userId ${userId}`);
    }
  }
  
  rowToMove.remove();
  
  const targetTbody = toTable.querySelector('tbody');
  
  const noDataRow = targetTbody.querySelector('.no-data-message')?.closest('tr');
  if (noDataRow) {
    noDataRow.remove();
  }
  
  targetTbody.appendChild(rowToMove);
  
  console.log(`P3 Move: Successfully moved userId ${userId} to ${toTableId}`);
  
  // Update the finalize button visibility
  setTimeout(updateSectionHeaderButtons, 100);
}

// ============================
// UTILITY FUNCTIONS
// ============================

function setupToggleStatusButtons() {
  const buttons = document.querySelectorAll('.btn-toggle-status:not([data-has-listener])');
  console.log(`Setting up ${buttons.length} toggle status buttons`);

  buttons.forEach(button => {
    button.setAttribute('data-has-listener', 'true');
    
    const userId = button.getAttribute('data-userid') || 
                   button.closest('tr')?.getAttribute('data-userid');
    
    if (userId) {
      const row = button.closest('tr');
      if (row) {
        const statusCell = row.querySelector('td:nth-child(7)');
        if (statusCell) {
          const currentStatus = statusCell.textContent.trim();
          if (currentStatus.includes('PASSED')) {
            button.textContent = 'Passed';
            button.classList.add('status-passed');
            button.classList.remove('status-failed');
          } else if (currentStatus.includes('FAILED')) {
            button.textContent = 'Failed';
            button.classList.add('status-failed');
            button.classList.remove('status-passed');
          } else {
            button.textContent = 'Toggle';
          }
        }
      }
      
      const newButton = button.cloneNode(true);
      button.parentNode.replaceChild(newButton, button);
      
      newButton.addEventListener('click', function() {
        toggleApplicantStatus(this);
      });
      
      newButton.setAttribute('data-has-listener', 'true');
      
      if (userId) {
        newButton.setAttribute('data-userid', userId);
      }
    } else {
      console.log(`Button missing userId, cannot set up toggle functionality`);
    }
  });

  return buttons.length;
}

function checkAllApplicantsMarked(phase = null) {
  const declaredResultsTable = document.getElementById("p1DeclaredResultsTable") || document.getElementById("p3DeclaredResultsTable");
  if (!declaredResultsTable) return true;
  
  const rows = declaredResultsTable.querySelectorAll('tbody tr:not(.section-header-row)');
  if (rows.length === 0) return true;
  
  let relevantRows = Array.from(rows);
  
  if (phase) {
    relevantRows = relevantRows.filter(row => {
      const statusCell = row.querySelector('td:nth-child(7)') || row.querySelector('td:nth-child(5)');
      return statusCell && statusCell.textContent.includes(phase);
    });
    
    if (relevantRows.length === 0) return true;
  }
  
  return relevantRows.every(row => {
    if (row.classList.contains('section-header-row') || 
        row.querySelector('td[colspan="5"]') || 
        row.querySelector('td[colspan="6"]') || 
        row.querySelector('td[colspan="7"]') || 
        row.querySelector('td[colspan="8"]')) {
      return true;
    }
    
    const statusCell = row.querySelector('td:nth-child(7)') || row.querySelector('td:nth-child(5)');
    if (!statusCell) return true;
    
    const statusText = statusCell.textContent;
    return statusText.indexOf('PASSED') !== -1 || statusText.indexOf('FAILED') !== -1;
  });
}

function updateSectionHeaderButtons() {
  console.log("=== FIXED: Updating section header buttons based on data ===");

  const hasP1Declared = checkForP1DeclaredResultsFixed();
  const hasP3Declared = checkForP3DeclaredResultsFixed();
  
  console.log(`P1 Declared: ${hasP1Declared}, P3 Declared: ${hasP3Declared}`);
  
  updateFinalizeButtonVisibility('p1FinalizeButtonContainer', hasP1Declared);
  updateFinalizeButtonVisibility('p3FinalizeButtonContainer', hasP3Declared);
}


function checkForP1DeclaredResultsFixed() {
  const p1DeclaredTable = document.getElementById('p1DeclaredResultsTable');
  if (!p1DeclaredTable) return false;
  
  const p1Rows = p1DeclaredTable.querySelectorAll('tbody tr:not(.section-header-row)');
  return Array.from(p1Rows).some(row => {
    if (row.querySelector('td[colspan]')) return false;
    const statusCell = row.querySelector('td:nth-child(7)'); // P1 has 7 columns
    return statusCell && (
      statusCell.textContent.includes('P1 - PASSED (Pending Finalization)') ||
      statusCell.textContent.includes('P1 - FAILED (Pending Finalization)')
    );
  });
}

function checkForP3DeclaredResultsFixed() {
  const p3DeclaredTable = document.getElementById('p3DeclaredResultsTable');
  if (!p3DeclaredTable) return false;
  
  const p3Rows = p3DeclaredTable.querySelectorAll('tbody tr:not(.section-header-row)');
  return Array.from(p3Rows).some(row => {
    if (row.querySelector('td[colspan]')) return false;
    const statusCell = row.querySelector('td:nth-child(5)'); // P3 has 5 columns + actions
    return statusCell && (
      statusCell.textContent.includes('P3 - PASSED (Pending Finalization)') ||
      statusCell.textContent.includes('P3 - FAILED (Pending Finalization)')
    );
  });
}

function updateFinalizeButtonVisibility(buttonContainerId, shouldShow) {
  const buttonContainer = document.getElementById(buttonContainerId);
  if (buttonContainer) {
    buttonContainer.style.display = shouldShow ? 'block' : 'none';
  }
}

// ============================
// OTHER FILTER HANDLERS
// ============================

function handleEvaluationFilter(onboardingHeader, onboardingTable, allMainRows) {
  console.log("Handling For Evaluation filter - Looking for P3 - Awaiting for Line Manager Evaluation");
  
  if (onboardingHeader) onboardingHeader.style.display = 'none';
  if (onboardingTable) onboardingTable.style.display = 'none';
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (mainTable) mainTable.style.display = 'none';
  
  const applicantStatusSection = document.getElementById("applicantStatusSection");
  if (applicantStatusSection) {
    applicantStatusSection.style.display = 'none';
  }
  
  let evaluationSection = document.getElementById('evaluationSection');
  if (!evaluationSection) {
    evaluationSection = createEvaluationSection();
  }
  evaluationSection.style.display = 'block';
  
  const evaluationRows = [];
  console.log(`Analyzing ${allMainRows.length} rows for P3 evaluation criteria...`);
  
  allMainRows.forEach((row, index) => {
    const statusCell = row.querySelector('td:nth-child(5)');
    if (!statusCell) return;
    
    const statusSpan = statusCell.querySelector('span');
    const statusText = statusSpan ? statusSpan.textContent.trim() : '';
    
    const targetStatus = 'P3 - Awaiting for Line Manager Evaluation';
    
    let hasP3EvaluationStatus = false;
    if (statusText === targetStatus) {
      hasP3EvaluationStatus = true;
    }
    
    if (!hasP3EvaluationStatus) {
      return;
    }
    
    const lastCell = row.querySelector('td:last-child');
    if (!lastCell) return;
    
    let hasForEvaluationButton = false;
    
    const allButtons = Array.from(lastCell.querySelectorAll('button'));
    allButtons.forEach((button) => {
      const buttonText = button.textContent.trim();
      if (buttonText === 'For Evaluation') {
        hasForEvaluationButton = true;
      }
    });
    
    const allLinks = Array.from(lastCell.querySelectorAll('a'));
    allLinks.forEach((link) => {
      const href = link.getAttribute('href') || '';
      const linkButton = link.querySelector('button');
      const linkText = linkButton ? linkButton.textContent.trim() : '';
      
      if (linkText === 'For Evaluation') {
        hasForEvaluationButton = true;
      }
      
      if (href.includes('/evaluation-form/') || href.includes('/interview-form/')) {
        hasForEvaluationButton = true;
      }
    });
    
    const evalButtons = lastCell.querySelectorAll('.btn-evaluation');
    if (evalButtons.length > 0) {
      hasForEvaluationButton = true;
    }
    
    const lastCellText = lastCell.textContent;
    if (lastCellText.includes('For Evaluation')) {
      hasForEvaluationButton = true;
    }
    
    if (hasP3EvaluationStatus && hasForEvaluationButton) {
      const rowData = extractRowDataForEvaluation(row, index);
      if (rowData) {
        evaluationRows.push(rowData);
      }
    }
  });
  
  console.log(`Found ${evaluationRows.length} rows matching evaluation criteria`);
  
  populateEvaluationSection(evaluationRows);
  
  setTimeout(() => {
    if (typeof window.fixAllTableScores === 'function') {
      window.fixAllTableScores();
    }
  }, 300);
  
  highlightActiveFilter('forevaluation');
}

function handleOnboardingFilter(applicantStatusSection, onboardingHeader, onboardingTable, allOnboardingRows) {
  console.log("Handling For Onboarding filter - checking for onboarding statuses");
  
  if (applicantStatusSection) {
    applicantStatusSection.style.display = 'none';
  }
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (mainTable) {
    mainTable.style.display = 'none';
  }
  
  if (onboardingHeader) {
    onboardingHeader.style.display = 'block';
    onboardingHeader.textContent = 'Onboarding';
  }
  
  if (onboardingTable) {
    onboardingTable.style.display = 'table';
  }
  
  const onboardingStatuses = [
    'First Day Checklist Sent',
    'Checklist Accomplished', 
    'Account Created'
  ];
  
  let visibleRowCount = 0;
  
  allOnboardingRows.forEach(row => {
    const lastCell = row.querySelector('td:last-child');
    const statusText = lastCell ? lastCell.textContent.trim() : '';
    
    let showRow = false;
    
    for (const onboardingStatus of onboardingStatuses) {
      if (statusText === onboardingStatus) {
        showRow = true;
        console.log(`Found onboarding row with status: ${statusText}`);
        break;
      }
    }
    
    if (!showRow && lastCell && lastCell.querySelector('.btn-onboarding')) {
      showRow = true;
      console.log(`Found "For Onboarding" button in row`);
    }
    
    row.style.display = showRow ? '' : 'none';
    
    if (showRow) {
      visibleRowCount++;
    }
  });
  
  console.log(`Found ${visibleRowCount} onboarding rows to display`);
  
  if (onboardingTable && visibleRowCount === 0) {
    const tbody = onboardingTable.querySelector('tbody');
    
    if (tbody) {
      tbody.innerHTML = '';
      
      const messageRow = document.createElement('tr');
      const messageCell = document.createElement('td');
      
      messageCell.setAttribute('colspan', '5');
      messageCell.className = 'text-center no-data-message';
      messageCell.textContent = 'No applicants awaiting for onboarding.';
      
      messageRow.appendChild(messageCell);
      tbody.appendChild(messageRow);
    }
  }
  
  highlightActiveFilter('foronboarding');
}

function filterOnboardingRowsByStatus(allOnboardingRows) {
  console.log("Filtering onboarding rows based on status");
  
  const validOnboardingStatuses = [
    'Onboarding - First Day Checklist Sent',
    'Onboarding - Checklist Accomplished', 
    'Onboarding - Account Created'
  ];
  
  let visibleRowCount = 0;
  
  allOnboardingRows.forEach(row => {
    const lastCell = row.querySelector('td:last-child');
    const statusText = lastCell ? lastCell.textContent.trim() : '';
    
    let showRow = false;
    
    for (const validStatus of validOnboardingStatuses) {
      if (statusText === validStatus || statusText.includes(validStatus)) {
        showRow = true;
        console.log(`Valid onboarding row found: ${statusText}`);
        break;
      }
    }
    
    if (!showRow && lastCell && lastCell.querySelector('.btn-onboarding')) {
      showRow = true;
      console.log(`"For Onboarding" button found in row`);
    }
    
    row.style.display = showRow ? '' : 'none';
    
    if (showRow) {
      visibleRowCount++;
    }
  });
  
  console.log(`Onboarding table: ${visibleRowCount} valid rows displayed`);
  
  const onboardingTable = document.getElementById('onboardingTable');
  if (onboardingTable && visibleRowCount === 0) {
    const tbody = onboardingTable.querySelector('tbody');
    if (tbody && tbody.children.length === 0) {
      tbody.innerHTML = '';
      const messageRow = document.createElement('tr');
      const messageCell = document.createElement('td');
      messageCell.setAttribute('colspan', '5');
      messageCell.className = 'text-center no-data-message';
      messageCell.textContent = 'No applicants in onboarding process.';
      messageRow.appendChild(messageCell);
      tbody.appendChild(messageRow);
    }
  }
}

function createEvaluationSection() {
  console.log("Creating evaluation section...");
  
  let evaluationSection = document.getElementById('evaluationSection');
  if (evaluationSection) {
    return evaluationSection;
  }
  
  evaluationSection = document.createElement('div');
  evaluationSection.id = 'evaluationSection';
  evaluationSection.className = 'applicant-status-section';
  evaluationSection.style.cssText = 'background-color: #FFFFFF; padding: 20px; border-radius: 5px; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); margin: 10px 5px 20px;';
  
  evaluationSection.innerHTML = `
    <div class="section-header">
      <h3 class="subheader" style="color: #124A5C; margin-bottom: 15px; font-size: 20px; font-weight: bold;">
        Applicant Evaluation Management
      </h3>
    </div>
    <div class="divider" style="height: 2px; background-color: #124A5C; margin: 15px 0; width: 100%;"></div>
    
    <h4>Applicants Awaiting Evaluation</h4>
    <table class="tracking-table" id="evaluationTable">
      <thead>
        <tr>
          <th>Applicant No.</th>
          <th>Last Name, First Name</th>
          <th>Department</th>
          <th>Position Applied</th>
          <th>Applicant Status & Actions</th>
        </tr>
      </thead>
      <tbody>
        <!-- Will be populated dynamically -->
      </tbody>
    </table>
  `;
  
  const mainContent = document.querySelector('.main-content');
  const applicantStatusSection = document.getElementById('applicantStatusSection');
  
  if (mainContent && applicantStatusSection) {
    mainContent.insertBefore(evaluationSection, applicantStatusSection.nextSibling);
  } else if (mainContent) {
    mainContent.appendChild(evaluationSection);
  }
  
  console.log("Evaluation section created and added to DOM");
  return evaluationSection;
}

function hideEvaluationSection() {
  const evaluationSection = document.getElementById('evaluationSection');
  if (evaluationSection) {
    evaluationSection.style.display = 'none';
    console.log("Evaluation section hidden");
  }
}

function extractRowDataForEvaluation(row, index) {
  console.log(`Extracting data for evaluation row ${index + 1}`);
  
  const cells = Array.from(row.querySelectorAll('td'));
  if (cells.length < 5) {
    console.log(`Row ${index + 1}: Not enough cells (${cells.length})`);
    return null;
  }
  
  const userId = getReliableUserId(row);
  console.log(`Row ${index + 1}: userId = ${userId}`);
  
  const applicantNo = cells[0] ? cells[0].innerHTML : `APP${(index + 1).toString().padStart(5, '0')}`;
  const nameAndEmail = cells[1] ? cells[1].innerHTML : 'Unknown Applicant';
  const department = cells[2] ? cells[2].innerHTML : 'Unknown Department';
  const position = cells[3] ? cells[3].innerHTML : 'Unknown Position';
  
  const statusCell = cells[4];
  let statusText = '';
  if (statusCell) {
    const statusSpan = statusCell.querySelector('span');
    if (statusSpan) {
      statusText = statusSpan.textContent.trim();
    } else {
      statusText = statusCell.textContent.replace(/Status:\s*/g, '').trim();
    }
  }
  
  console.log(`Row ${index + 1}: Extracted status = "${statusText}"`);
  
  const actionsCell = cells[cells.length - 1];
  let actionsHtml = '';
  if (actionsCell) {
    const actionsClone = actionsCell.cloneNode(true);
    
    const statusParts = actionsClone.querySelectorAll('span');
    statusParts.forEach(span => {
      if (span.textContent.includes('Status:')) {
        span.remove();
      }
    });
    
    actionsHtml = actionsClone.innerHTML;
  }
  
  const statusAndActions = `<span><strong>Status:</strong> ${statusText}</span>` + 
                          (actionsHtml ? `<div style="margin-top: 10px;">${actionsHtml}</div>` : '');
  
  const rowData = {
    index: index + 1,
    cells: [
      applicantNo,
      nameAndEmail,
      department,
      position,
      statusAndActions
    ],
    userId: userId,
    status: statusText
  };
  
  console.log(`Row ${index + 1}: Successfully created row data`);
  return rowData;
}

function populateEvaluationSection(evaluationRows) {
  console.log(`Populating evaluation section with ${evaluationRows.length} rows`);
  
  const evaluationTable = document.getElementById('evaluationTable');
  if (!evaluationTable) {
    console.error("Evaluation table not found");
    return;
  }
  
  const tbody = evaluationTable.querySelector('tbody');
  if (!tbody) {
    console.error("Evaluation table tbody not found");
    return;
  }
  
  tbody.innerHTML = '';
  
  if (evaluationRows.length === 0) {
    const messageRow = document.createElement('tr');
    const messageCell = document.createElement('td');
    messageCell.setAttribute('colspan', '5');
    messageCell.className = 'text-center no-data-message';
    messageCell.textContent = 'No applicants with P3 - Awaiting for Line Manager Evaluation status found.';
    messageRow.appendChild(messageCell);
    tbody.appendChild(messageRow);
    console.log("No P3 evaluation rows found - showing no data message");
    return;
  }
  
  evaluationRows.forEach((rowData, index) => {
    console.log(`Creating row ${index + 1} for evaluation:`, rowData);
    
    const row = document.createElement('tr');
    
    if (rowData.userId) {
      row.setAttribute('data-userid', rowData.userId);
    }
    
    if (!rowData.cells || !Array.isArray(rowData.cells)) {
      console.error(`Row ${index + 1} missing cells data:`, rowData);
      return;
    }
    
    rowData.cells.forEach((cellContent, cellIndex) => {
      const cell = document.createElement('td');
      cell.innerHTML = cellContent;
      row.appendChild(cell);
    });
    
    tbody.appendChild(row);
    
    console.log(`✅ Row ${index + 1} added to evaluation table with status: ${rowData.status}`);
  });
  
  console.log(`✅ Successfully populated evaluation table with ${evaluationRows.length} P3 evaluation applicants`);
}

// ============================
// TABLE UTILITIES
// ============================

function ensureTableHeaders() {
  const tables = [
    document.getElementById('p1AwaitingActionTable'),
    document.getElementById('p1DeclaredResultsTable'),
    document.getElementById('p3AwaitingActionTable'),
    document.getElementById('p3DeclaredResultsTable')
  ].filter(table => table !== null);
  
  tables.forEach(table => {
    const thead = table.querySelector('thead');
    if (!thead || !thead.querySelector('tr th')) {
      const newThead = document.createElement('thead');
      
      if (table.id === 'p1DeclaredResultsTable') {
        newThead.innerHTML = `
          <tr>
            <th>Applicant No.</th>
            <th>Last Name, First Name</th>
            <th>Department</th>
            <th>Position Applied</th>
            <th>Total Score</th>
            <th>Work Setup/Availability</th>
            <th>Applicant Status</th>
            <th>Actions</th>
          </tr>
        `;
      } else if (table.id === 'p3DeclaredResultsTable') {
        newThead.innerHTML = `
          <tr>
            <th>Applicant No.</th>
            <th>Last Name, First Name</th>
            <th>Department</th>
            <th>Position Applied</th>
            <th>Applicant Status</th>
            <th>Actions</th>
          </tr>
        `;
      } else {
        newThead.innerHTML = `
          <tr>
            <th>Applicant No.</th>
            <th>Last Name, First Name</th>
            <th>Department</th>
            <th>Position Applied</th>
            <th>Total Score</th>
            <th>Work Setup/Availability</th>
            <th>Applicant Status</th>
          </tr>
        `;
      }
      
      if (thead) {
        table.replaceChild(newThead, thead);
      } else {
        table.insertBefore(newThead, table.firstChild);
      }
    }
  });
}



function filterTable() {
  const searchBar = document.getElementById("searchBar");
  if (!searchBar) return;
  
  const searchValue = searchBar.value.toLowerCase();
  const rows = document.querySelectorAll('.tracking-table tbody tr');
  
  rows.forEach(row => {
    if (row.classList.contains('section-header-row')) return;
    
    const rowText = Array.from(row.querySelectorAll('td'))
      .map(cell => cell.textContent.toLowerCase())
      .join(' ');
      
    row.style.display = rowText.includes(searchValue) ? '' : 'none';
  });
}

// ============================
// MODAL & DISPLAY FUNCTIONS
// ============================

function displayUploadedDocument(fileUrl, linkId, previewId) {
  const docLink = document.getElementById(linkId);
  const docPreview = document.getElementById(previewId);

  if (!docLink || !docPreview) {
    console.error(`Element not found: linkId=${linkId}, previewId=${previewId}`);
    return;
  }

  if (!fileUrl || fileUrl === '#' || fileUrl === 'undefined' || fileUrl === 'null') {
    docLink.href = "#";
    docLink.textContent = "No document uploaded";
    docPreview.innerHTML = "";
    return;
  }

  docLink.href = fileUrl;
  docLink.textContent = "View Uploaded Document";
  docLink.target = "_blank";
  
  const fileExtension = fileUrl.split('.').pop().toLowerCase();

  if (["jpg", "jpeg", "png", "gif", "webp"].includes(fileExtension)) {
    docPreview.innerHTML = `<img src="${fileUrl}" alt="Document Preview" style="max-width: 100%; max-height: 300px; border: 1px solid #ccc; padding: 5px;">`;
  } else if (fileExtension === "pdf") {
    docPreview.innerHTML = `<iframe src="${fileUrl}" width="100%" height="300px" style="border: 1px solid #ccc;"></iframe>`;
  } else {
    docPreview.innerHTML = `
      <div style="text-align: center; margin: 10px 0;">
        <i class="fas fa-file-download" style="font-size: 24px; color: #124A5C;"></i>
        <p>Preview not available. Click the link above to download.</p>
      </div>
    `;
  }

  console.log(`Document preview setup for ${fileUrl} (${fileExtension})`);
}

function lineManagerInitialScreeningModal(userId, lastName, firstName, birthday, email, phoneNo, scores, verdict, degreeUrl, certUrl, resumeUrl) {
  console.log('Modal Data:', { 
    userId, lastName, firstName, birthday, email, phoneNo, 
    scores, verdict, 
    degreeUrl, certUrl, resumeUrl 
  });

  if (!userId || userId === "undefined") {
    console.error("Invalid userId passed to modal:", userId);
    alert("Error: Invalid User ID. Cannot display applicant details.");
    return;
  }

  document.getElementById('userId').value = userId;

  const jobIdElement = document.getElementById('jobId');
  if (jobIdElement && typeof jobId !== 'undefined') {
    jobIdElement.value = jobId;
  }

  let applicantIdContainer = document.getElementById("applicantId")?.parentElement;
  if (applicantIdContainer) {
    applicantIdContainer.style.display = "none";
  }

  document.getElementById('applicant-name').textContent = `${lastName}, ${firstName}`;
  document.getElementById('applicant-birthday').textContent = birthday || 'N/A';
  document.getElementById('applicant-email').textContent = email || 'N/A';
  document.getElementById('applicant-contact').textContent = phoneNo || 'N/A';

  document.getElementById('score-degree').textContent = scores.degree || 'N/A';
  document.getElementById('score-experience').textContent = scores.experience || 'N/A';
  document.getElementById('score-certifications').textContent = scores.certifications || 'N/A';
  document.getElementById('score-hard-skills').textContent = scores.hardSkills || 'N/A';
  document.getElementById('score-soft-skills').textContent = scores.softSkills || 'N/A';
  document.getElementById('score-work-setup').textContent = scores.workSetup || 'N/A';
  document.getElementById('score-availability').textContent = scores.availability || 'N/A';

  document.getElementById('computation-verdict').textContent = verdict || 'N/A';

  const cleanDegreeUrl = (degreeUrl && degreeUrl !== 'undefined' && degreeUrl !== 'null') ? degreeUrl : '#';
  const cleanCertUrl = (certUrl && certUrl !== 'undefined' && certUrl !== 'null') ? certUrl : '#';
  const cleanResumeUrl = (resumeUrl && resumeUrl !== 'undefined' && resumeUrl !== 'null') ? resumeUrl : '#';

  console.log('Document URLs for preview:', {
    degree: cleanDegreeUrl,
    cert: cleanCertUrl,
    resume: cleanResumeUrl
  });

  displayUploadedDocument(cleanDegreeUrl, "degree-doc", "degree-preview");
  displayUploadedDocument(cleanCertUrl, "cert-doc", "cert-preview");
  displayUploadedDocument(cleanResumeUrl, "resume-doc", "resume-preview");

  document.getElementById('lineManagerInitialScreeningModalHtml').style.display = 'block';

  if (!window.applicantsScores) window.applicantsScores = {};
  window.applicantsScores[userId] = verdict;
}

function openModal(modalId, applicantName) {
  const modal = document.getElementById(modalId);
  if (!modal) {
    console.error(`Modal ${modalId} not found`);
    return;
  }

  if (modalId === 'releaseJobOfferModal' && applicantName) {
    const nameElement = document.getElementById('applicant-name-job-offer');
    if (nameElement) {
      nameElement.textContent = applicantName;
    }
  }

  modal.style.display = 'block';
}

function closeModal(modalId) {
  const modal = document.getElementById(modalId);
  if (modal) {
    modal.style.display = 'none';
  }
}

function approveLineManager(applicantId) {
  if (!applicantId) {
    alert("Error: Missing applicant ID");
    return;
  }

  fetch('/linemanager/applicant-tracker-jobposition/postApproveLineManager', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ applicantId: applicantId }),
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      alert("Successfully approved applicant!");
      
      setTimeout(() => {
        const activeFilter = document.querySelector(".filter-button.active");
        if (activeFilter) {
          activeFilter.click();
        } else {
          document.getElementById("filter-all").click();
        }
      }, 500);
    } else {
      alert("Error approving applicant: " + (data.message || "Unknown error"));
    }
  })
  .catch(error => {
    console.error("Error:", error);
    alert("Failed to approve applicant.");
  });
}

// ============================
// ENHANCED UI FUNCTIONS
// ============================

function enhanceForReviewButtons() {
  console.log("Enhancing For Review buttons for proper redirection...");
  
  const forReviewButtons = document.querySelectorAll('.btn-review');
  
  forReviewButtons.forEach((button, index) => {
    if (button.textContent.trim() === 'For Review') {
      const row = button.closest('tr');
      if (row) {
        const statusCell = row.querySelector('td:nth-child(5) span');
        const statusText = statusCell ? statusCell.textContent.trim() : '';
        
        console.log(`Enhancing For Review button ${index} for status: ${statusText}`);
        
        if (statusText.includes('P3 - Line Manager Evaluation Accomplished') || 
            statusText.includes('P3 - PASSED (Pending Finalization)') ||
            statusText.includes('P3 - FAILED (Pending Finalization)')) {
          
          button.removeAttribute('onclick');
          
          const newButton = button.cloneNode(true);
          button.parentNode.replaceChild(newButton, button);
          
          newButton.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('P3 For Review button clicked - redirecting to review filter');
            goToP3ReviewFilter();
          });
          
          console.log(`Enhanced For Review button ${index} for P3 status: ${statusText}`);
        }
      }
    }
  });
}

function goToP3ReviewFilter() {
  console.log("Redirecting to P3 review filter...");
  
  try {
    const forReviewButton = document.getElementById('filter-forreview');
    if (forReviewButton) {
      console.log("Found For Review filter button, clicking it...");
      forReviewButton.click();
    } else {
      console.error("For Review filter button not found");
      alert("Unable to navigate to review section. Please try clicking the 'For Review' filter manually.");
    }
  } catch (error) {
    console.error("Error in goToP3ReviewFilter:", error);
    alert("An error occurred while navigating to the review section.");
  }
}

function enhanceApplicantTable() {
    console.log("🔧 ENHANCED: Setting up job offer buttons with CORRECT userId extraction");
    
    const mainTable = document.getElementById('mainApplicantTable');
    if (!mainTable) {
        console.log("❌ Main table not found");
        return;
    }
    
    const rows = mainTable.querySelectorAll('tbody tr');
    console.log(`Found ${rows.length} rows to enhance`);
    
    rows.forEach((row, index) => {
        const statusCell = row.querySelector('td:nth-child(5) span');
        if (!statusCell) return;
        
        const status = statusCell.textContent.trim();
        
        if (status === 'P3 - PASSED') {
            console.log(`\n=== ROW ${index + 1}: Processing P3 - PASSED ===`);
            
            // CRITICAL: Extract the CORRECT userId
            let userId = null;
            
            // Method 1: Check data attribute
            userId = row.getAttribute('data-userid');
            console.log(`Row ${index + 1}: Method 1 - data-userid = "${userId}"`);
            
            // Method 2: Extract from review button if no data attribute
            if (!userId || userId === 'undefined' || userId === '') {
                const reviewButton = row.querySelector('.btn-review, button[onclick*="lineManagerInitialScreeningModal"]');
                if (reviewButton) {
                    const onclick = reviewButton.getAttribute('onclick') || '';
                    console.log(`Row ${index + 1}: Method 2 - button onclick = "${onclick.substring(0, 100)}..."`);
                    
                    // Extract the FIRST parameter which should be userId
                    const userIdMatch = onclick.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
                    if (userIdMatch && userIdMatch[1]) {
                        userId = userIdMatch[1];
                        row.setAttribute('data-userid', userId);
                        console.log(`Row ${index + 1}: Method 2 - extracted userId = "${userId}"`);
                    }
                }
            }
            
            // Method 3: Try to find from embedded data
            if (!userId || userId === 'undefined') {
                const nameCell = row.querySelector('td:nth-child(2)');
                if (nameCell && window.applicantsData) {
                    const cellText = nameCell.textContent.trim();
                    const name = cellText.split('\n')[0].trim();
                    
                    const found = window.applicantsData.find(a => {
                        const fullName = `${a.lastName}, ${a.firstName}`;
                        return fullName === name && a.applicantStatus === 'P3 - PASSED';
                    });
                    
                    if (found && found.userId) {
                        userId = found.userId;
                        row.setAttribute('data-userid', userId);
                        console.log(`Row ${index + 1}: Method 3 - found userId from data = "${userId}"`);
                    }
                }
            }
            
            console.log(`Row ${index + 1}: FINAL userId = "${userId}"`);
            
            if (!userId || userId === 'undefined') {
                console.error(`Row ${index + 1}: ❌ Could not determine userId - skipping job offer button`);
                return;
            }
            
            // Extract other data
            const nameCell = row.querySelector('td:nth-child(2)');
            const deptCell = row.querySelector('td:nth-child(3)');
            const positionCell = row.querySelector('td:nth-child(4)');
            
            let name = 'Unknown';
            let email = '';
            let department = 'Unknown Department';
            let position = 'Unknown Position';
            
            // Enhanced email extraction
            if (nameCell) {
                const cellContent = nameCell.innerHTML;
                const lines = cellContent.split('<br>');
                
                if (lines.length >= 2) {
                    name = lines[0].replace(/<[^>]*>/g, '').trim();
                    email = lines[1].replace(/<[^>]*>/g, '').trim();
                    
                    // Clean email
                    const emailMatch = email.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/);
                    if (emailMatch) {
                        email = emailMatch[1];
                    }
                } else {
                    const fullText = nameCell.textContent;
                    const emailMatch = fullText.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/);
                    if (emailMatch) {
                        email = emailMatch[1];
                        name = fullText.replace(email, '').trim();
                    } else {
                        name = fullText.trim();
                    }
                }
                
                console.log(`Row ${index + 1}: Extracted - Name: "${name}", Email: "${email}"`);
            }
            
            if (deptCell) department = deptCell.textContent.trim();
            if (positionCell) position = positionCell.textContent.trim();
            
            // Try to get email from global data if not found
            if (!email && userId && window.applicantsData) {
                const applicantData = window.applicantsData.find(a => a.userId == userId);
                if (applicantData && applicantData.userEmail) {
                    email = applicantData.userEmail;
                    console.log(`Row ${index + 1}: Found email from global data: "${email}"`);
                }
            }
            
            // Create job offer button
            const actionsCell = row.querySelector('td:last-child');
            if (actionsCell && !actionsCell.querySelector('.btn-job-offer')) {
                let buttonContainer = actionsCell.querySelector('div');
                if (!buttonContainer) {
                    buttonContainer = document.createElement('div');
                    buttonContainer.style.marginTop = '10px';
                    actionsCell.appendChild(buttonContainer);
                }
                
                const offerButton = document.createElement('button');
                offerButton.className = 'btn-job-offer';
                offerButton.style.cssText = `
                    background: linear-gradient(135deg, #28a745, #20c997);
                    color: white;
                    border: none;
                    padding: 12px 20px;
                    border-radius: 6px;
                    cursor: pointer;
                    font-size: 14px;
                    font-weight: 600;
                    transition: all 0.3s ease;
                    box-shadow: 0 2px 4px rgba(40, 167, 69, 0.3);
                    margin-top: 5px;
                    min-width: 140px;
                `;
                offerButton.innerHTML = '📧 Send Job Offer';
                
                // CRITICAL: Use the CORRECT userId
                offerButton.onclick = function() {
                    console.log(`🎯 Job Offer button clicked - CORRECT userId: ${userId}`);
                    console.log('Data being passed:', { userId, name, email, position, department });
                    openSendJobOfferModalFixed(userId, name, email, position, department);
                };
                
                buttonContainer.appendChild(offerButton);
                
                console.log(`✅ Row ${index + 1}: Added job offer button with CORRECT userId: ${userId}`);
            }
        }
    });
}



function htmlToPlainText(html) {
  const tempDiv = document.createElement('div');
  tempDiv.innerHTML = html;
  
  const scripts = tempDiv.querySelectorAll('script, style');
  scripts.forEach(element => element.remove());
  
  let plainText = tempDiv.textContent || tempDiv.innerText || '';
  
  plainText = plainText
    .replace(/\s+/g, ' ')
    .replace(/\n\s*\n/g, '\n\n')
    .trim();
  
  plainText = plainText
    .replace(/Dear\s+/gi, '\nDear ')
    .replace(/Best regards/gi, '\n\nBest regards')
    .replace(/Thank you/gi, '\n\nThank you')
    .replace(/Congratulations/gi, '\n\nCongratulations')
    .replace(/What's Next\?/gi, '\n\nWhat\'s Next?')
    .replace(/•/g, '\n• ')
    .replace(/- /g, '\n- ');
  
  return plainText;
}

function showStatusUpdateModal() {
  console.log('Showing status update modal');
  document.getElementById('statusUpdateModal').style.display = 'block';
}

function updateApplicantStatuses() {
  if (!confirm('Have you successfully sent the emails via Gmail? This will update the applicant statuses in the database.')) {
    return;
  }
  
  console.log('Updating applicant statuses in database...');
  console.log('Passed userIds:', emailsToUpdate.passed);
  console.log('Failed userIds:', emailsToUpdate.failed);
  
  const updateButton = document.querySelector('#statusUpdateModal .confirm-button');
  const originalText = updateButton.textContent;
  updateButton.textContent = 'Updating Database...';
  updateButton.disabled = true;
  
  fetch('/linemanager/applicant-tracker-jobposition/updateP1Statuses', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      passedUserIds: emailsToUpdate.passed,
      failedUserIds: emailsToUpdate.failed
    }),
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      alert(`Applicant statuses updated successfully!\n\nUpdated:\n- ${data.passedUpdated || 0} passed applicants\n- ${data.failedUpdated || 0} failed applicants`);
      
      closeModal('statusUpdateModal');
      
      currentPassedApplicants = [];
      currentFailedApplicants = [];
      emailsToUpdate = { passed: [], failed: [] };
      
      setTimeout(() => {
        const activeFilter = document.querySelector(".filter-button.active");
        if (activeFilter) {
          activeFilter.click();
        } else {
          document.getElementById("filter-all").click();
        }
      }, 500);
    } else {
      throw new Error(data.message || 'Failed to update statuses');
    }
  })
  .catch(error => {
    console.error('Error updating statuses:', error);
    alert('Error updating applicant statuses: ' + error.message);
    
    updateButton.textContent = originalText;
    updateButton.disabled = false;
  });
}

console.log('✅ Updated Applicant Tracker JavaScript loaded successfully');

// ============================
// JOB OFFER FUNCTIONS
// ============================
function openSendJobOfferModalFixed(userId, name, email, position, department) {
    console.log('🎯 ENHANCED: Opening job offer modal with CORRECT data:', { 
        userId, name, email, position, department 
    });
    
    // Store CORRECT userId in modal
    const modal = document.getElementById('sendJobOfferModal');
    modal.setAttribute('data-user-id', userId);
    
    // If email is still empty, try to fetch it
    if (!email && userId) {
        console.log('Email is empty, attempting to fetch from backend...');
        fetchUserEmailFromBackend(userId).then(fetchedEmail => {
            if (fetchedEmail) {
                email = fetchedEmail;
                const emailElement = document.getElementById('applicant-email-job-offer');
                if (emailElement) {
                    emailElement.textContent = email;
                }
                console.log('✅ Updated email from backend:', email);
            }
        });
    }
    
    // Populate modal fields
    const nameElement = document.getElementById('applicant-name-job-offer');
    const emailElement = document.getElementById('applicant-email-job-offer');
    const positionElement = document.getElementById('applicant-position-job-offer');
    const departmentElement = document.getElementById('applicant-department-job-offer');
    
    if (nameElement) nameElement.textContent = name || 'Name not available';
    if (emailElement) emailElement.textContent = email || 'Email not available';
    if (positionElement) positionElement.textContent = position || 'Position not available';
    if (departmentElement) departmentElement.textContent = department || 'Department not available';
    
    // Set default start date
    const startDateElement = document.getElementById('startDate');
    if (startDateElement) {
        const twoWeeksFromNow = new Date();
        twoWeeksFromNow.setDate(twoWeeksFromNow.getDate() + 14);
        startDateElement.valueAsDate = twoWeeksFromNow;
    }
    
    // Clear notes
    const notesElement = document.getElementById('offerNotes');
    if (notesElement) {
        notesElement.value = '';
    }
    
    // Show modal
    modal.style.display = 'block';
    
    console.log('✅ Modal opened with CORRECT userId:', userId);
}
// FIXED: Function to fetch email from backend if not found in frontend
async function fetchUserEmailFromBackend(userId) {
    try {
        console.log(`Fetching email from backend for userId: ${userId}`);
        
        const response = await fetch(`/linemanager/get-user-email/${userId}`);
        const data = await response.json();
        
        if (data.success && data.email) {
            console.log(`✅ Fetched email from backend: ${data.email}`);
            return data.email;
        } else {
            console.log('❌ Could not fetch email from backend:', data.message);
            return null;
        }
    } catch (error) {
        console.error('❌ Error fetching email from backend:', error);
        return null;
    }
}
function loadApplicantsDataEnhanced() {
    try {
        const dataScript = document.getElementById('applicants-data');
        if (dataScript) {
            window.applicantsData = JSON.parse(dataScript.textContent);
            console.log(`✅ Loaded ${window.applicantsData.length} applicants from embedded data`);
            
            // FIXED: Create enhanced email mapping
            window.applicantsData.forEach(applicant => {
                if (applicant.userId && applicant.userEmail) {
                    // Store email mapping
                    if (!window.applicantEmailMapping) window.applicantEmailMapping = {};
                    window.applicantEmailMapping[applicant.userEmail] = applicant.userId;
                    
                    // Store in registry
                    if (!window.applicantRegistry) window.applicantRegistry = {};
                    window.applicantRegistry[applicant.userId] = {
                        ...window.applicantRegistry[applicant.userId],
                        email: applicant.userEmail,
                        fullName: `${applicant.lastName}, ${applicant.firstName}`,
                        department: applicant.deptName,
                        position: applicant.jobTitle
                    };
                    
                    console.log(`Mapped userId ${applicant.userId} to email ${applicant.userEmail}`);
                }
            });
            
            return true;
        }
    } catch (error) {
        console.error("❌ Error loading enhanced applicants data:", error);
    }
    return false;
}

function sendJobOffer() {
    const modal = document.getElementById('sendJobOfferModal');
    const userId = modal.getAttribute('data-user-id'); // CHANGED: Get userId instead of applicantId
    
    console.log('FRONTEND DEBUG - Job Offer Send:');
    console.log('User ID:', userId);
    
    const startDate = document.getElementById('startDate').value;
    const additionalNotes = document.getElementById('offerNotes').value;
    
    console.log('Start Date:', startDate);
    console.log('Additional Notes:', additionalNotes);
    
    if (!startDate) {
        alert('Please select a start date for the job offer');
        return;
    }
    
    if (!userId) {
        alert('Error: Missing user ID. Please try again.');
        return;
    }
    
    const sendButton = document.getElementById('sendOfferButton');
    const originalButtonText = sendButton.textContent;
    sendButton.disabled = true;
    sendButton.textContent = 'Sending...';
    
    fetch('/linemanager/send-job-offer', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            userId,           // CHANGED: Send userId instead of applicantId
            startDate,
            additionalNotes
        }),
    })
    .then(response => {
        console.log('Response Status:', response.status);
        return response.json();
    })
    .then(data => {
        console.log('Server Response:', data);
        
        if (data.success) {
            closeModal('sendJobOfferModal');
            
            alert(`Job offer sent successfully to ${data.applicantName || 'applicant'}!`);
            
            // Update applicant status in the UI
            updateApplicantStatusInUI(userId, 'P3 - PASSED - Job Offer Sent');
            
            // Refresh the page after a short delay
            setTimeout(() => {
                const activeFilter = document.querySelector(".filter-button.active");
                if (activeFilter) {
                    activeFilter.click();
                } else {
                    window.location.reload();
                }
            }, 500);
        } else {
            alert(data.message || 'Failed to send job offer');
        }
        
        sendButton.disabled = false;
        sendButton.textContent = originalButtonText;
    })
    .catch(error => {
        console.error('FRONTEND ERROR:', error);
        alert('An error occurred while sending the job offer');
        
        sendButton.disabled = false;
        sendButton.textContent = originalButtonText;
    });
}
function updateApplicantStatusInUI(userId, newStatus) {
    const applicantRow = document.querySelector(`tr[data-userid="${userId}"]`);
    if (!applicantRow) return;
    
    const statusSpan = applicantRow.querySelector('td:nth-child(5) span');
    if (statusSpan) {
        statusSpan.innerHTML = `<strong>Status:</strong> ${newStatus}`;
    }
    
    const actionsCell = applicantRow.querySelector('td:last-child');
    if (actionsCell) {
        const buttonContainer = actionsCell.querySelector('div');
        if (buttonContainer) {
            buttonContainer.innerHTML = `
                <span style="color: #28a745; font-weight: bold;">✅ Job Offer Sent</span>
            `;
        }
    }
}
// ============================
// ADDITIONAL MODAL FUNCTIONS
// ============================

function sendNotification() {
  alert("Notification sent to applicant!");
  closeModal('releaseJobOfferModal');

  setTimeout(() => {
    const activeFilter = document.querySelector(".filter-button.active");
    if (activeFilter) {
      activeFilter.click();
    }
  }, 500);
}

function confirmOnboarding() {
  alert("Applicant moved to onboarding");
  closeModal('moveToOnboardingModal');

  setTimeout(() => {
    document.getElementById("filter-foronboarding").click();
  }, 500);
}

function confirmAccountSetup() {
  alert("Account setup confirmed");
  closeModal('accountSetupReminderModal');
}

function setInterviewAvailabilities() {
  alert("Opening Calendly to set interview availabilities...");
}

// ============================
// TOGGLE STATUS FUNCTIONS
// ============================

function toggleApplicantStatus(button) {
  const row = button.closest('tr');
  if (!row) return;
  
  const userId = button.getAttribute('data-userid') || row.getAttribute('data-userid');
  if (!userId) {
    console.error("Cannot toggle status: Missing userId");
    alert("Error: Cannot identify the applicant to update status");
    return;
  }
  
  const statusCell = row.querySelector('td:nth-child(7)');
  if (!statusCell) return;
  
  const currentStatus = statusCell.textContent.trim();
  console.log(`Toggling status for userId ${userId}, current status: ${currentStatus}`);
  
  let newStatus;
  let apiEndpoint;
  
  if (currentStatus.includes('PASSED')) {
    newStatus = currentStatus.includes('P1') ? 'P1 - FAILED (Pending Finalization)' : 'P3 - FAILED (Pending Finalization)';
    apiEndpoint = currentStatus.includes('P1') ? 'markAsP1Failed' : 'markAsP3Failed';
    button.classList.remove('status-passed');
    button.classList.add('status-failed');
    button.textContent = 'Failed';
  } else if (currentStatus.includes('FAILED')) {
    newStatus = currentStatus.includes('P1') ? 'P1 - PASSED (Pending Finalization)' : 'P3 - PASSED (Pending Finalization)';
    apiEndpoint = currentStatus.includes('P1') ? 'markAsP1Passed' : 'markAsP3Passed';
    button.classList.remove('status-failed');
    button.classList.add('status-passed');
    button.textContent = 'Passed';
  } else {
    if (currentStatus.includes('P1')) {
      newStatus = 'P1 - PASSED (Pending Finalization)';
      apiEndpoint = 'markAsP1Passed';
    } else {
      newStatus = 'P3 - PASSED (Pending Finalization)';
      apiEndpoint = 'markAsP3Passed';
    }
    button.classList.add('status-passed');
    button.textContent = 'Passed';
  }
  
  statusCell.textContent = newStatus;
  
  if (!window.pendingStatusChanges) {
    window.pendingStatusChanges = {};
  }
  
  window.pendingStatusChanges[userId] = newStatus.includes('PASSED') ? 'PASSED' : 'FAILED';
  
  console.log(`Status change for userId ${userId} to ${newStatus} is pending finalization`);
  
  fetch(`/linemanager/applicant-tracker-jobposition/${apiEndpoint}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ userId: userId }),
  })
  .then(response => response.json())
  .then(data => {
    if (!data.success) {
      console.error(`Error updating temporary status: ${data.message || 'Unknown error'}`);
    }
  })
  .catch(error => {
    console.error('Error calling temporary status API:', error);
  });
}

function toggleP3ApplicantStatus(button) {
  const row = button.closest('tr');
  if (!row) return;
  
  const userId = button.getAttribute('data-userid') || row.getAttribute('data-userid');
  if (!userId) {
    console.error("P3 Toggle: Cannot toggle status: Missing userId");
    alert("Error: Cannot identify the applicant to update status");
    return;
  }
  
  const statusCell = row.querySelector('td:nth-child(5)');
  if (!statusCell) return;
  
  const currentStatus = statusCell.textContent.trim();
  console.log(`P3 Toggle: Toggling P3 status for userId ${userId}, current status: ${currentStatus}`);
  
  let newStatus;
  let apiEndpoint;
  
  if (currentStatus.includes('PASSED')) {
    newStatus = 'P3 - FAILED (Pending Finalization)';
    apiEndpoint = 'markAsP3Failed';
    button.classList.remove('status-passed');
    button.classList.add('status-failed');
    button.textContent = 'Failed';
  } else {
    newStatus = 'P3 - PASSED (Pending Finalization)';
    apiEndpoint = 'markAsP3Passed';
    button.classList.remove('status-failed');
    button.classList.add('status-passed');
    button.textContent = 'Passed';
  }
  
  statusCell.innerHTML = `<span><strong>Status:</strong> ${newStatus}</span>`;
  
  if (!window.pendingStatusChanges) {
    window.pendingStatusChanges = {};
  }
  
  window.pendingStatusChanges[userId] = newStatus.includes('PASSED') ? 'PASSED' : 'FAILED';
  
  console.log(`P3 Toggle: P3 status change for userId ${userId} to ${newStatus} is pending finalization`);
  
  fetch(`/linemanager/applicant-tracker-jobposition/${apiEndpoint}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ userId: userId }),
  })
  .then(response => response.json())
  .then(data => {
    if (!data.success) {
      console.error(`P3 Toggle: Error updating P3 status: ${data.message || 'Unknown error'}`);
    } else {
      console.log(`P3 Toggle: Successfully updated temporary status for ${userId}`);
    }
  })
  .catch(error => {
    console.error('P3 Toggle: Error calling P3 status API:', error);
  });
}

// ============================
// SORT & MOVE FUNCTIONS
// ============================

function sortDeclaredResults(sortType) {
  const table = document.getElementById('p1DeclaredResultsTable') || document.getElementById('p3DeclaredResultsTable');
  if (!table) return;

  const tbody = table.querySelector('tbody');
  if (!tbody) return;

  const rows = Array.from(tbody.querySelectorAll('tr:not(.section-header-row)'));

  const headerRows = Array.from(tbody.querySelectorAll('tr.section-header-row'));

  const p1Rows = rows.filter(row => {
    const statusCell = row.querySelector('td:nth-child(7)');
    return statusCell && statusCell.textContent.includes('P1');
  });

  const p3Rows = rows.filter(row => {
    const statusCell = row.querySelector('td:nth-child(7)');
    return statusCell && statusCell.textContent.includes('P3');
  });

  if (sortType === 'ascending' || sortType === 'descending') {
    const sortFn = (a, b) => {
      const scoreA = parseFloat(a.getAttribute('data-score') || '0');
      const scoreB = parseFloat(b.getAttribute('data-score') || '0');
      return sortType === 'ascending' ? scoreA - scoreB : scoreB - scoreA;
    };
    
    p1Rows.sort(sortFn);
    p3Rows.sort(sortFn);
  } else if (sortType === 'alphabetical') {
    const sortFn = (a, b) => {
      const nameA = a.querySelector('td:nth-child(2)')?.textContent.trim() || '';
      const nameB = b.querySelector('td:nth-child(2)')?.textContent.trim() || '';
      return nameA.localeCompare(nameB);
    };
    
    p1Rows.sort(sortFn);
    p3Rows.sort(sortFn);
  }

  tbody.innerHTML = '';

  if (p1Rows.length > 0) {
    const p1Header = headerRows.find(row => row.textContent.includes('P1'));
    if (p1Header) tbody.appendChild(p1Header);
    p1Rows.forEach(row => tbody.appendChild(row));
  }

  if (p3Rows.length > 0) {
    const p3Header = headerRows.find(row => row.textContent.includes('P3'));
    if (p3Header) tbody.appendChild(p3Header);
    p3Rows.forEach(row => tbody.appendChild(row));
  }
}

function moveRowToSection(userId, fromSection, toSection) {
  console.log(`Moving user ${userId} from ${fromSection} to ${toSection}`);
  
  if (!userId || !fromSection || !toSection) {
    console.error("Missing required parameters for row movement");
    return false;
  }
  
  const sourceTable = document.getElementById(fromSection);
  const targetTable = document.getElementById(toSection);
  
  if (!sourceTable || !targetTable) {
    console.error(`Tables not found: ${fromSection} or ${toSection}`);
    return false;
  }
  
  const sourceRows = sourceTable.querySelectorAll('tbody tr');
  let rowToMove = null;
  let rowData = null;
  
  for (const row of sourceRows) {
    if (row.classList.contains('section-header-row') || row.querySelector('td[colspan]')) {
      continue;
    }
    
    const rowUserId = row.getAttribute('data-userid');
    if (rowUserId === userId) {
      rowToMove = row;
      rowData = extractRowData(row, 0);
      break;
    }
  }
  
  if (!rowToMove || !rowData) {
    console.error(`Row for user ${userId} not found in ${fromSection}`);
    return false;
  }
  
  rowToMove.remove();
  
  const remainingSourceRows = Array.from(sourceTable.querySelectorAll('tbody tr')).filter(
    row => !row.classList.contains('section-header-row') && !row.querySelector('td[colspan]')
  );
  
  if (remainingSourceRows.length === 0) {
    const sourceTbody = sourceTable.querySelector('tbody');
    if (sourceTbody) {
      const headerCount = sourceTable.querySelectorAll('thead th').length;
      const messageRow = document.createElement('tr');
      const messageCell = document.createElement('td');
      messageCell.setAttribute('colspan', headerCount.toString());
      messageCell.className = 'text-center no-data-message';
      messageCell.textContent = 'No applicants awaiting review.';
      messageRow.appendChild(messageCell);
      sourceTbody.appendChild(messageRow);
    }
  }
  
  const targetTbody = targetTable.querySelector('tbody');
  if (!targetTbody) {
    console.error(`Target tbody not found in ${toSection}`);
    return false;
  }
  
  const noDataRow = targetTbody.querySelector('tr td[colspan].text-center');
  if (noDataRow) {
    noDataRow.closest('tr').remove();
  }
  
  const needsToggleColumn = (toSection === 'declaredResultsTable');
  const newRow = createTableRow(rowData, needsToggleColumn);
  
  newRow.setAttribute('data-userid', userId);
  
  const isP1 = rowData.cells[6].includes('P1');
  const headerSelector = isP1 ? 'P1' : 'P3';
  
  const sectionHeaders = targetTbody.querySelectorAll('tr.section-header-row');
  let inserted = false;
  
  for (const header of sectionHeaders) {
    if (header.textContent.includes(headerSelector)) {
      const nextSibling = header.nextSibling;
      if (nextSibling) {
        targetTbody.insertBefore(newRow, nextSibling);
      } else {
        targetTbody.appendChild(newRow);
      }
      inserted = true;
      break;
    }
  }
  
  if (!inserted) {
    targetTbody.appendChild(newRow);
  }
  
  if (needsToggleColumn) {
    const toggleButton = newRow.querySelector('.btn-toggle-status');
    if (toggleButton) {
      toggleButton.setAttribute('data-userid', userId);
      setupToggleStatusButtons();
    }
  }
  
  if (window.applicantsScores && window.applicantsScores[userId]) {
    updateScoreCellWithFormatting(newRow, window.applicantsScores[userId]);
  } else {
    getTotalScoreDirectly(userId, newRow);
  }
  
  return true;
}

function createTableRow(rowData, isForDeclaredResults = false) {
  const newRow = document.createElement('tr');
  
  if (rowData.userId) {
    newRow.setAttribute('data-userid', rowData.userId);
  }
  
  newRow.setAttribute('data-criteria', rowData.criteriaStatus || 'unknown');
  
  rowData.cells.forEach(cellHTML => {
    const cell = document.createElement('td');
    cell.innerHTML = cellHTML;
    newRow.appendChild(cell);
  });
  
  if (isForDeclaredResults) {
    const changeStatusCell = document.createElement('td');
    
    const userId = rowData.userId || '';
    
    changeStatusCell.innerHTML = `
      <button 
        class="btn-change-status" 
        data-userid="${userId}"
        onclick="changeApplicantStatus('${userId}')"
      >
        Change Status
      </button>
    `;
    
    newRow.appendChild(changeStatusCell);
  }
  
  return newRow;
}

// ============================
// EXTRACTION & UTILITY FUNCTIONS
// ============================

function extractRowData(row, index) {
  const cells = Array.from(row.querySelectorAll('td'));
  const cellData = cells.map(cell => cell.innerHTML);
  
  const userId = getReliableUserId(row);
  
  let totalScore = 'N/A';
  
  if (userId && window.applicantRegistry && window.applicantRegistry[userId]) {
    totalScore = window.applicantRegistry[userId].score || 'N/A';
  } else {
    const reviewButton = row.querySelector('.btn-review');
    if (reviewButton) {
      const onclick = reviewButton.getAttribute('onclick') || '';
      const scoreMatch = onclick.match(/},\s*['"]([^'"]*)['"]/);
      if (scoreMatch && scoreMatch[1]) {
        totalScore = scoreMatch[1];
      }
    }
  }
  
  let applicantName = '';
  let applicantEmail = '';
  
  if (cells.length > 1) {
    const nameCell = cells[1];
    const fullContent = nameCell.innerHTML;
    const nameParts = fullContent.split('<br>');
    
    if (nameParts.length > 0) {
      applicantName = nameParts[0].trim();
    }
    
    if (nameParts.length > 1) {
      const emailHtml = nameParts[1];
      applicantEmail = emailHtml.replace(/<[^>]*>/g, '').trim();
    }
  }
  
  const currentStatus = cells[4];
  let statusText = '';
  if (currentStatus) {
    const statusSpan = currentStatus.querySelector('span');
    if (statusSpan) {
      statusText = statusSpan.textContent.trim();
    }
  }
  
  let result;
  
  if (statusText.includes('P3')) {
    result = [
      cellData[0],
      cellData[1],
      cellData[2],
      cellData[3],
      cellData[4]
    ];
  } else {
    result = [
      cellData[0],
      cellData[1],
      cellData[2],
      cellData[3],
      totalScore,
      '<span class="criteria-passed">Passed</span>',
      cellData[4]
    ];
  }
  
  console.log(`Row ${index} data from real source:`, {
    userId: userId,
    totalScore: totalScore,
    name: applicantName,
    email: applicantEmail,
    status: statusText,
    isP3: statusText.includes('P3')
  });
  
  return {
    index: index + 1,
    cells: result,
    userId: userId,
    totalScore: totalScore,
    criteriaStatus: 'passed',
    name: applicantName,
    email: applicantEmail,
    status: statusText
  };
}

function scanAllRowsForUserIds() {
  console.log("Scanning all rows to find any missing userIds...");
  
  const allTables = document.querySelectorAll('table');
  let foundUserIds = 0;
  
  allTables.forEach(table => {
    const rows = table.querySelectorAll('tbody tr');
    rows.forEach(row => {
      let userId = row.getAttribute('data-userid');
      
      if (!userId || userId === 'undefined') {
        // Try to find from buttons
        const buttons = row.querySelectorAll('button[onclick*="lineManagerInitialScreeningModal"]');
        buttons.forEach(button => {
          const onclick = button.getAttribute('onclick') || '';
          const match = onclick.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
          if (match && match[1]) {
            userId = match[1];
            row.setAttribute('data-userid', userId);
            foundUserIds++;
            console.log(`Scan: Found userId ${userId} in table ${table.id || 'unknown'}`);
          }
        });
      }
    });
  });
  
  console.log(`Scan completed: Found ${foundUserIds} additional userIds`);
}

function manuallyExtractUserIdsAndScores() {
  console.log("Manually extracting userIds and scores...");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("Main table not found");
    return;
  }
  
  const rows = mainTable.querySelectorAll('tbody tr');
  console.log(`Found ${rows.length} rows in main table`);
  
  if (!window.applicantsScores) window.applicantsScores = {};
  if (!window.applicantNameMapping) window.applicantNameMapping = {};
  if (!window.applicantEmailMapping) window.applicantEmailMapping = {};
  
  rows.forEach((row, index) => {
    let userId = null;
    let totalScore = null;
    
    const nameCell = row.querySelector('td:nth-child(2)');
    let name = '';
    let email = '';
    
    if (nameCell) {
      const content = nameCell.innerHTML;
      const nameParts = content.split('<br>');
      if (nameParts.length > 0) {
        name = nameParts[0].trim();
      }
      
      if (nameParts.length > 1) {
        email = nameParts[1].replace(/<[^>]*>/g, '').trim();
      }
    }
    
    const reviewButton = row.querySelector('.btn-review');
    if (reviewButton) {
      const onclick = reviewButton.getAttribute('onclick') || '';
      const userIdMatch = onclick.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
      
      if (userIdMatch && userIdMatch[1]) {
        userId = userIdMatch[1];
        console.log(`Row ${index}: Found userId ${userId} in review button`);
        
        const scoreMatch = onclick.match(/},\s*['"]([^'"]*)['"]/);
        if (scoreMatch && scoreMatch[1]) {
          totalScore = scoreMatch[1];
          console.log(`Row ${index}: Found score ${totalScore} in review button`);
        }
      }
    }
    
    if (userId) {
      if (totalScore) {
        window.applicantsScores[userId] = totalScore;
      }
      
      if (name) {
        window.applicantNameMapping[name] = userId;
      }
      
      if (email) {
        window.applicantEmailMapping[email] = userId;
      }
      
      row.setAttribute('data-userid', userId);
      row.setAttribute('data-applicant-userid', userId);
      if (totalScore) {
        row.setAttribute('data-score', totalScore);
      }
    }
  });
  
  console.log("Manually extracted mapping data:");
  console.log("- Scores:", window.applicantsScores);
  console.log("- Names:", window.applicantNameMapping);
  console.log("- Emails:", window.applicantEmailMapping);
}

function extractApplicantsDataFromDOM() {
  console.log("Extracting applicants data from DOM...");
  window.applicantsData = [];
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) return;
  
  const rows = mainTable.querySelectorAll('tbody tr');
  
  rows.forEach((row, index) => {
    if (row.classList.contains('section-header-row')) return;
    
    let userId = row.getAttribute('data-userid');
    if (!userId) {
      const reviewButton = row.querySelector('.btn-review');
      if (reviewButton) {
        const onclick = reviewButton.getAttribute('onclick') || '';
        const match = onclick.match(/lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/);
        if (match && match[1]) {
          userId = match[1];
        }
      }
    }
    
    if (!userId) return;
    
    const nameCell = row.querySelector('td:nth-child(2)');
    const deptCell = row.querySelector('td:nth-child(3)');
    const positionCell = row.querySelector('td:nth-child(4)');
    const scoreCell = row.querySelector('td:nth-child(5)');
    
    const name = nameCell ? nameCell.textContent.split('\n')[0].trim() : '';
    const department = deptCell ? deptCell.textContent.trim() : '';
    const position = positionCell ? positionCell.textContent.trim() : '';
    const score = scoreCell ? scoreCell.textContent.trim() : 'N/A';
    
    window.applicantsData.push({
      userId,
      firstName: name.split(' ')[1] || '',
      lastName: name.split(' ')[0] || '',
      departmentName: department,
      jobTitle: position,
      initialScreeningAssessment: {
        totalScore: score
      }
    });
  });
  
  console.log(`Extracted ${window.applicantsData.length} applicants from DOM`);
}

function debugUserIdExtraction() {
  console.log("=== DEBUG: Analyzing Review Buttons ===");
  
  const reviewButtons = document.querySelectorAll('.btn-review');
  console.log(`Found ${reviewButtons.length} review buttons to analyze`);
  
  reviewButtons.forEach((button, index) => {
    console.log(`\nAnalyzing button ${index}:`);
    
    const onclickAttr = button.getAttribute('onclick') || '';
    console.log(`onClick attribute: ${onclickAttr.substring(0, 100)}...`);
    
    console.log("Trying different extraction patterns:");
    
    const pattern1 = /lineManagerInitialScreeningModal\s*\(\s*['"]([^'"]*)['"]/;
    const match1 = onclickAttr.match(pattern1);
    console.log(`Pattern 1 result: ${match1 ? match1[1] : 'No match'}`);
    
    const pattern2 = /lineManagerInitialScreeningModal\s*\(\s*([^,]+)/;
    const match2 = onclickAttr.match(pattern2);
    console.log(`Pattern 2 result: ${match2 ? match2[1].replace(/['"]/g, '') : 'No match'}`);
    
    const pattern3 = /lineManagerInitialScreeningModal\s*\((.*?)\)/;
    const match3 = onclickAttr.match(pattern3);
    if (match3) {
      const params = match3[1].split(',').map(p => p.trim());
      console.log(`Pattern 3 found ${params.length} parameters:`);
      params.slice(0, 5).forEach((p, i) => console.log(`  Param ${i}: ${p}`));
    } else {
      console.log(`Pattern 3 result: No match`);
    }
    
    const row = button.closest('tr');
    if (row) {
      const nameCell = row.querySelector('td:nth-child(2)');
      if (nameCell) {
        const name = nameCell.textContent.trim();
        console.log(`Row name: ${name}`);
      }
      
      const hiddenInputs = row.querySelectorAll('input[type="hidden"]');
      if (hiddenInputs.length > 0) {
        console.log(`Found ${hiddenInputs.length} hidden inputs in the row`);
        hiddenInputs.forEach(input => {
          console.log(`  Hidden input: name=${input.name}, value=${input.value}`);
        });
      }
      
      const dataAttrs = Array.from(row.attributes)
        .filter(attr => attr.name.startsWith('data-'))
        .map(attr => `${attr.name}="${attr.value}"`);
      
      if (dataAttrs.length > 0) {
        console.log(`Found ${dataAttrs.length} data attributes: ${dataAttrs.join(', ')}`);
      }
    }
  });
  
  console.log("\n=== DEBUG: Checking window.applicantsData ===");
  if (window.applicantsData && Array.isArray(window.applicantsData)) {
    console.log(`Found ${window.applicantsData.length} applicants in window.applicantsData`);
    if (window.applicantsData.length > 0) {
      const sample = window.applicantsData[0];
      console.log("Sample applicant data structure:");
      console.log(JSON.stringify(sample, null, 2).substring(0, 300) + "...");
      
      const userIds = window.applicantsData
        .map(a => a.userId)
        .filter(id => id && id !== 'undefined');
      
      console.log(`Found ${userIds.length} valid userIds in applicantsData`);
      if (userIds.length > 0) {
        console.log(`Sample userIds: ${userIds.slice(0, 5).join(', ')}`);
      }
    }
  } else {
    console.log("window.applicantsData is not available or not an array");
  }
  
  const dataElement = document.getElementById('applicants-data');
  if (dataElement) {
    console.log("Found applicants-data element in the DOM");
    try {
      const data = JSON.parse(dataElement.textContent);
      console.log(`Parsed ${data.length || 0} items from applicants-data element`);
    } catch (err) {
      console.log(`Error parsing applicants-data element: ${err.message}`);
    }
  } else {
    console.log("No applicants-data element found in the DOM");
  }
}

function lastResortUserIdAssignment() {
  console.log("=== LAST RESORT: Manual userId assignment ===");
  
  let userIds = [];
  
  if (window.applicantsData && Array.isArray(window.applicantsData)) {
    userIds = window.applicantsData
      .map(a => a.userId)
      .filter(id => id && id !== 'undefined' && id !== '');
      
    console.log(`Found ${userIds.length} userIds in applicantsData`);
  }
  
  if (userIds.length === 0) {
    console.log("No userIds found in data, creating temporary IDs");
    userIds = ['temp-user-' + Date.now(), 'temp-user-' + (Date.now() + 1)];
  }
  
  const buttons = document.querySelectorAll('.btn-change-status');
  console.log(`Assigning ${userIds.length} userIds to ${buttons.length} buttons`);
  
  buttons.forEach((button, index) => {
    if (index < userIds.length) {
      const userId = userIds[index];
      console.log(`Assigning userId ${userId} to button ${index}`);
      
      button.setAttribute('data-userid', userId);
      button.setAttribute('onclick', `changeApplicantStatus('${userId}')`);
      
      const row = button.closest('tr');
      if (row) {
        row.setAttribute('data-userid', userId);
      }
    }
  });
  
  setTimeout(() => {
    console.log("Checking if assigned userIds are being used");
    buttons.forEach((button, index) => {
      const userId = button.getAttribute('data-userid');
      if (userId && userId !== 'undefined' && !userId.startsWith('undefined')) {
        console.log(`Button ${index} has userId: ${userId}`);
      } else {
        console.log(`Button ${index} STILL has no valid userId!`);
      }
    });
  }, 500);
}

// ============================
// DEBUG FUNCTIONS
// ============================

function debugDeclaredResults() {
  console.log("=== DEBUG: Checking Declared Results ===");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("❌ Main table not found");
    return;
  }
  
  const rows = Array.from(mainTable.querySelectorAll('tbody tr'));
  console.log(`Found ${rows.length} total rows in main table`);
  
  let p1PendingCount = 0;
  let p3PendingCount = 0;
  let p3EvaluationCount = 0;
  
  rows.forEach((row, index) => {
    const statusCell = row.querySelector('td:nth-child(5)');
    if (!statusCell) return;
    
    const statusSpan = statusCell.querySelector('span');
    const statusText = statusSpan ? statusSpan.textContent.trim() : '';
    
    if (statusText.includes('P1') && statusText.includes('Pending Finalization')) {
      p1PendingCount++;
      console.log(`Row ${index}: P1 Pending - ${statusText}`);
    }
    
    if (statusText.includes('P3') && statusText.includes('Pending Finalization')) {
      p3PendingCount++;
      console.log(`Row ${index}: P3 Pending - ${statusText}`);
    }
    
    if (statusText.includes('P3 - HR Evaluation Accomplished')) {
      p3EvaluationCount++;
      console.log(`Row ${index}: P3 HR Evaluation Accomplished - ${statusText}`);
    }
  });
  
  console.log(`\n=== SUMMARY ===`);
  console.log(`P1 Pending Finalization rows: ${p1PendingCount}`);
  console.log(`P3 Pending Finalization rows: ${p3PendingCount}`);
  console.log(`P3 HR Evaluation Accomplished rows: ${p3EvaluationCount}`);
  
  const p1DeclaredTable = document.getElementById('p1DeclaredResultsTable');
  const p3DeclaredTable = document.getElementById('p3DeclaredResultsTable');
  
  if (p1DeclaredTable) {
    const p1Rows = p1DeclaredTable.querySelectorAll('tbody tr:not(.section-header-row)');
    console.log(`P1 Declared table currently has ${p1Rows.length} rows`);
  }
  
  if (p3DeclaredTable) {
    const p3Rows = p3DeclaredTable.querySelectorAll('tbody tr:not(.section-header-row)');
    console.log(`P3 Declared table currently has ${p3Rows.length} rows`);
  }
}

function createTestPendingStatuses() {
  console.log("Creating test pending finalization statuses...");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) return;
  
  const rows = Array.from(mainTable.querySelectorAll('tbody tr'));
  let updatedCount = 0;
  
  rows.forEach((row, index) => {
    const statusCell = row.querySelector('td:nth-child(5)');
    if (!statusCell) return;
    
    const statusSpan = statusCell.querySelector('span');
    if (!statusSpan) return;
    
    const currentStatus = statusSpan.textContent.trim();
    
    if (currentStatus.includes('P1 - Awaiting') && updatedCount < 2) {
      if (updatedCount === 0) {
        statusSpan.textContent = 'P1 - PASSED (Pending Finalization)';
      } else {
        statusSpan.textContent = 'P1 - FAILED (Pending Finalization)';
      }
      console.log(`Updated row ${index} to: ${statusSpan.textContent}`);
      updatedCount++;
    }
    
    if (currentStatus.includes('P3') && updatedCount < 4) {
      if (updatedCount === 2) {
        statusSpan.textContent = 'P3 - PASSED (Pending Finalization)';
      } else if (updatedCount === 3) {
        statusSpan.textContent = 'P3 - FAILED (Pending Finalization)';
      }
      console.log(`Updated row ${index} to: ${statusSpan.textContent}`);
      updatedCount++;
    }
  });
  
  console.log(`Updated ${updatedCount} rows with test pending statuses`);
  
  setTimeout(() => {
    document.getElementById('filter-forreview').click();
  }, 500);
}

function debugP1StatusDetection() {
  console.log("=== DEBUGGING P1 STATUS DETECTION ===");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("❌ Main table not found");
    return;
  }
  
  const rows = Array.from(mainTable.querySelectorAll('tbody tr'));
  console.log(`Found ${rows.length} total rows in main table`);
  
  let foundP1Statuses = {
    awaiting: 0,
    passedPending: 0,
    failedPending: 0,
    other: 0
  };
  
  rows.forEach((row, index) => {
    const statusCell = row.querySelector('td:nth-child(5)');
    if (!statusCell) return;
    
    const statusSpan = statusCell.querySelector('span');
    let statusText = '';
    
    if (statusSpan) {
      statusText = statusSpan.textContent.replace(/Status:\s*/g, '').trim();
    } else {
      const cellText = statusCell.textContent.replace(/Status:\s*/g, '').trim();
      const statusMatch = cellText.match(/^([^]*?)(?:\s*(?:For Review|For Evaluation|Send Job Offer|Approve))/);
      statusText = statusMatch ? statusMatch[1].trim() : cellText.split('\n')[0].trim();
    }
    
    console.log(`\nRow ${index + 1}:`);
    console.log(`  Status text: "${statusText}"`);
    
    if (statusText.includes('P1')) {
      if (statusText.includes('Awaiting for Line Manager Action')) {
        foundP1Statuses.awaiting++;
        console.log(`  ✅ P1 AWAITING detected`);
      } else if (statusText.includes('PASSED') && statusText.includes('Pending Finalization')) {
        foundP1Statuses.passedPending++;
        console.log(`  ✅ P1 PASSED PENDING detected`);
      } else if (statusText.includes('FAILED') && statusText.includes('Pending Finalization')) {
        foundP1Statuses.failedPending++;
        console.log(`  ✅ P1 FAILED PENDING detected`);
      } else {
        foundP1Statuses.other++;
        console.log(`  ⚠️ Other P1 status: "${statusText}"`);
      }
    }
  });
  
  console.log(`\n=== P1 STATUS SUMMARY ===`);
  console.log(`P1 Awaiting: ${foundP1Statuses.awaiting}`);
  console.log(`P1 PASSED Pending: ${foundP1Statuses.passedPending}`);
  console.log(`P1 FAILED Pending: ${foundP1Statuses.failedPending}`);
  console.log(`Other P1 statuses: ${foundP1Statuses.other}`);
  console.log(`Total P1 Declared Expected: ${foundP1Statuses.passedPending + foundP1Statuses.failedPending}`);
  
  return foundP1Statuses;
}

function debugEvaluationData() {
  console.log("=== DEBUGGING EVALUATION DATA ===");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("❌ Main table not found");
    return;
  }
  
  const rows = Array.from(mainTable.querySelectorAll('tbody tr'));
  console.log(`Found ${rows.length} total rows in main table`);
  
  let foundP3Evaluation = false;
  
  rows.forEach((row, index) => {
    const rowText = row.textContent;
    
    if (rowText.includes('P3 - Awaiting for Line Manager Evaluation')) {
      foundP3Evaluation = true;
      console.log(`\n🎯 FOUND P3 EVALUATION ROW ${index + 1}:`);
      
      const cells = Array.from(row.querySelectorAll('td'));
      cells.forEach((cell, cellIndex) => {
        console.log(`  Cell ${cellIndex + 1}: ${cell.textContent.substring(0, 100)}...`);
        if (cellIndex === 4) {
          console.log(`  Status cell HTML: ${cell.innerHTML}`);
        }
        if (cellIndex === cells.length - 1) {
          console.log(`  Actions cell HTML: ${cell.innerHTML}`);
        }
      });
      
      const buttons = row.querySelectorAll('button');
      console.log(`  Found ${buttons.length} buttons:`);
      buttons.forEach((btn, btnIdx) => {
        console.log(`    Button ${btnIdx + 1}: "${btn.textContent.trim()}" (class: ${btn.className})`);
      });
      
      const links = row.querySelectorAll('a');
      console.log(`  Found ${links.length} links:`);
      links.forEach((link, linkIdx) => {
        console.log(`    Link ${linkIdx + 1}: href="${link.href}" text="${link.textContent.trim()}"`);
      });
    }
  });
  
  if (!foundP3Evaluation) {
    console.log("❌ NO ROWS found with 'P3 - Awaiting for Line Manager Evaluation' status");
    console.log("Let's check what P3 statuses we do have:");
    
    rows.forEach((row, index) => {
      const rowText = row.textContent;
      if (rowText.includes('P3')) {
        console.log(`Row ${index + 1} P3 status: ${rowText.match(/P3[^,\n]*/)?.[0] || 'Unknown P3 status'}`);
      }
    });
  } else {
    console.log(`✅ Found ${foundP3Evaluation ? 'at least one' : 'no'} P3 evaluation row(s)`);
  }
}

function debugEvaluationFilter() {
  console.log("=== DEBUG: P3 Evaluation Filter Analysis ===");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("❌ Main table not found");
    return;
  }
  
  const allMainRows = Array.from(mainTable.querySelectorAll('tbody tr'));
  console.log(`Found ${allMainRows.length} total rows in main table`);
  
  let p3EvaluationRows = 0;
  let p3WithButtons = 0;
  
  allMainRows.forEach((row, index) => {
    const statusCell = row.querySelector('td:nth-child(5)');
    const actionsCell = row.querySelector('td:last-child');
    
    if (!statusCell || !actionsCell) return;
    
    const statusSpan = statusCell.querySelector('span');
    const statusText = statusSpan ? statusSpan.textContent.trim() : '';
    
    const isP3Evaluation = statusText === 'P3 - Awaiting for Line Manager Evaluation';
    
    if (isP3Evaluation) {
      p3EvaluationRows++;
      console.log(`📋 Row ${index + 1}: P3 - Awaiting for Line Manager Evaluation`);
      
      const allButtons = Array.from(actionsCell.querySelectorAll('button'));
      const evalButtons = allButtons.filter(btn => btn.textContent.trim() === 'For Evaluation');
      
      const allLinks = Array.from(actionsCell.querySelectorAll('a'));
      const evalLinks = allLinks.filter(a => {
        const href = a.getAttribute('href') || '';
        return href.includes('/evaluation-form/') || href.includes('/interview-form/');
      });
      
      if (evalButtons.length > 0 || evalLinks.length > 0) {
        p3WithButtons++;
        console.log(`✅ Row ${index + 1}: Has For Evaluation button/link`);
        
        if (evalButtons.length > 0) {
          evalButtons.forEach((btn, btnIdx) => {
            console.log(`     Button ${btnIdx + 1}: "${btn.textContent.trim()}"`);
          });
        }
        
        if (evalLinks.length > 0) {
          evalLinks.forEach((link, linkIdx) => {
            console.log(`     Link ${linkIdx + 1}: href="${link.getAttribute('href')}"`);
          });
        }
      } else {
        console.log(`❌ Row ${index + 1}: No For Evaluation button found`);
      }
    }
  });
  
  console.log(`\n=== SUMMARY ===`);
  console.log(`Total rows with P3 - Awaiting for Line Manager Evaluation: ${p3EvaluationRows}`);
  console.log(`P3 rows with For Evaluation buttons: ${p3WithButtons}`);
  console.log(`Expected evaluation table rows: ${p3WithButtons}`);
  
  const evalSection = document.getElementById('evaluationSection');
  console.log(`Evaluation section exists: ${evalSection ? 'Yes' : 'No'}`);
  
  if (evalSection) {
    const evalTable = document.getElementById('evaluationTable');
    const evalRows = evalTable ? evalTable.querySelectorAll('tbody tr') : [];
    console.log(`Actual evaluation table rows: ${evalRows.length}`);
    
    if (evalRows.length > 0) {
      evalRows.forEach((row, idx) => {
        const cells = row.querySelectorAll('td');
        if (cells.length >= 5) {
          const nameCell = cells[1].textContent.trim();
          const statusCell = cells[4].innerHTML;
          console.log(`Row ${idx + 1}: ${nameCell} - ${statusCell.substring(0, 100)}...`);
        }
      });
    }
  }
}

// ============================
// TEST FUNCTIONS (GLOBAL SCOPE)
// ============================

window.debugDeclaredResults = debugDeclaredResults;
window.createTestPendingStatuses = createTestPendingStatuses;
window.debugP1StatusDetection = debugP1StatusDetection;
window.debugEvaluationData = debugEvaluationData;
window.debugEvaluationFilter = debugEvaluationFilter;

window.checkP3EvaluationRows = function() {
  console.log("=== MANUAL P3 EVALUATION CHECK ===");
  
  const mainTable = document.getElementById('mainApplicantTable');
  const rows = Array.from(mainTable.querySelectorAll('tbody tr'));
  
  rows.forEach((row, index) => {
    const statusCell = row.querySelector('td:nth-child(5)');
    const actionsCell = row.querySelector('td:last-child');
    
    if (statusCell && actionsCell) {
      const statusText = statusCell.textContent;
      const actionsText = actionsCell.textContent;
      
      if (statusText.includes('P3') || actionsText.includes('Evaluation')) {
        console.log(`\nRow ${index + 1}:`);
        console.log(`Status: ${statusText.trim()}`);
        console.log(`Actions: ${actionsText.trim()}`);
        console.log(`Has P3 Evaluation Status: ${statusText.includes('P3 - Awaiting for Line Manager Evaluation')}`);
        console.log(`Has For Evaluation Button: ${actionsText.includes('For Evaluation')}`);
      }
    }
  });
};

function testGmailCompose() {
  const testApplicant = {
    name: 'Test User',
    email: 'test@example.com',
    jobTitle: 'Test Position'
  };
  
  const testSubject = 'Test Email Subject';
  const testTemplate = 'Dear {applicantName},\n\nThis is a test email for the {jobTitle} position at {companyName}.\n\nBest regards,\nTest Team';
  
  openGmailForSingleApplicant(testApplicant, testSubject, testTemplate);
}

function openGmailForSingleApplicant(applicant, subject, template) {
  const processedTemplate = template
    .replace(/\{applicantName\}/g, applicant.name)
    .replace(/\{jobTitle\}/g, applicant.jobTitle)
    .replace(/\{companyName\}/g, 'Prime Infrastructure');
  
  const plainTextBody = htmlToPlainText(processedTemplate);
  
  const baseUrl = 'https://mail.google.com/mail/?view=cm';
  const params = new URLSearchParams({
    to: applicant.email,
    subject: subject,
    body: plainTextBody
  });
  
  const gmailUrl = `${baseUrl}&${params.toString()}`;
  console.log('Single applicant Gmail URL:', gmailUrl);
  
  window.open(gmailUrl, '_blank');
}

// ============================
// REMAINING MODAL & UI FUNCTIONS
// ============================

function updateP3StatusDisplay() {
  console.log("Updating P3 status display in main table...");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) return;
  
  const rows = mainTable.querySelectorAll('tbody tr');
  
  rows.forEach((row, index) => {
    const statusCell = row.querySelector('td:nth-child(5)');
    const actionsCell = row.querySelector('td:last-child');
    
    if (!statusCell || !actionsCell) return;
    
    const statusSpan = statusCell.querySelector('span');
    const statusText = statusSpan ? statusSpan.textContent.trim() : '';
    
    if (statusText === 'P3 - HR Evaluation Accomplished') {
      console.log(`Found P3 - HR Evaluation Accomplished row: ${index}`);
      
      let forReviewButton = actionsCell.querySelector('.btn-review');
      
      if (!forReviewButton) {
        const buttonContainer = actionsCell.querySelector('div') || actionsCell;
        
        forReviewButton = document.createElement('button');
        forReviewButton.className = 'btn-review';
        forReviewButton.textContent = 'For Review';
        forReviewButton.style.cssText = `
          background-color: white; 
          color: black; 
          border: 1px solid #124A5C; 
          padding: 10px 20px; 
          cursor: pointer; 
          border-radius: 5px; 
          font-size: 14px; 
          transition: background-color 0.3s ease, color 0.3s ease; 
          width: 150px; 
          text-align: center;
          margin-top: 5px;
        `;
        
        forReviewButton.addEventListener('mouseenter', function() {
          this.style.backgroundColor = '#124A5C';
          this.style.color = 'white';
        });
        
        forReviewButton.addEventListener('mouseleave', function() {
          this.style.backgroundColor = 'white';
          this.style.color = 'black';
        });
        
        forReviewButton.addEventListener('click', function(e) {
          e.preventDefault();
          console.log('P3 For Review button clicked - redirecting to review filter');
          redirectToReviewFilter();
        });
        
        buttonContainer.appendChild(forReviewButton);
        
        console.log(`Added For Review button to P3 - HR Evaluation Accomplished row: ${index}`);
      } else {
        forReviewButton.addEventListener('click', function(e) {
          e.preventDefault();
          console.log('P3 For Review button clicked - redirecting to review filter');
          redirectToReviewFilter();
        });
      }
    }
  });
}

function redirectToReviewFilter() {
  console.log("Redirecting to For Review filter...");
  const forReviewButton = document.getElementById('filter-forreview');
  if (forReviewButton) {
    forReviewButton.click();
  }
}

function goToP1ReviewFilter() {
  console.log("Redirecting to P1 review filter...");
  document.getElementById('filter-forreview').click();
}

function enhanceP3ForReviewButtons() {
  console.log("Enhancing P3 For Review buttons for proper redirection...");
  
  const forReviewButtons = document.querySelectorAll('.btn-review');
  
  forReviewButtons.forEach((button, index) => {
    if (button.textContent.trim() === 'For Review') {
      const row = button.closest('tr');
      if (row) {
        const statusCell = row.querySelector('td:nth-child(5) span');
        const statusText = statusCell ? statusCell.textContent.trim() : '';
        
        console.log(`Enhancing For Review button ${index} for status: ${statusText}`);
        
        if (statusText.includes('P3 - Line Manager Evaluation Accomplished') || 
            statusText.includes('P3 - PASSED (Pending Finalization)') ||
            statusText.includes('P3 - FAILED (Pending Finalization)')) {
          
          button.removeAttribute('onclick');
          
          const newButton = button.cloneNode(true);
          button.parentNode.replaceChild(newButton, button);
          
          newButton.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('P3 For Review button clicked - redirecting to review filter');
            goToP3ReviewFilter();
          });
          
          console.log(`Enhanced For Review button ${index} for P3 status: ${statusText}`);
        }
      }
    }
  });
}

// ============================
// ONBOARDING FUNCTIONS
// ============================

function populateOnboardingTable() {
  console.log("Populating onboarding table with dynamic data...");
  
  const onboardingTable = document.getElementById('onboardingTable');
  if (!onboardingTable) {
    console.log("Onboarding table not found");
    return;
  }
  
  const tbody = onboardingTable.querySelector('tbody');
  if (!tbody) {
    console.log("Onboarding tbody not found");
    return;
  }
  
  const onboardingApplicants = getOnboardingApplicantsFromMain();
  
  if (onboardingApplicants.length === 0) {
    tbody.innerHTML = `
      <tr>
        <td colspan="5" class="text-center no-data-message">No applicants in onboarding process.</td>
      </tr>
    `;
    return;
  }
  
  tbody.innerHTML = '';
  
  onboardingApplicants.forEach((applicant, index) => {
    const row = document.createElement('tr');
    row.innerHTML = `
      <td>APP${(index + 1).toString().padStart(5, '0')}</td>
      <td>${applicant.name}<br>${applicant.email}</td>
      <td>${applicant.department}</td>
      <td>${applicant.position}</td>
      <td>${applicant.status}</td>
    `;
    tbody.appendChild(row);
  });
  
  console.log(`Populated onboarding table with ${onboardingApplicants.length} applicants`);
}

function getOnboardingApplicantsFromMain() {
  console.log("Getting onboarding applicants from main table data...");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("Main table not found");
    return [];
  }
  
  const onboardingRows = [];
  const allMainRows = Array.from(mainTable.querySelectorAll('tbody tr'));
  
  const onboardingStatuses = [
    'First Day Checklist Sent',
    'Checklist Accomplished', 
    'Account Created'
  ];
  
  allMainRows.forEach((row, index) => {
    const statusCell = row.querySelector('td:nth-child(5)');
    if (!statusCell) return;
    
    const statusSpan = statusCell.querySelector('span');
    const statusText = statusSpan ? statusSpan.textContent.trim() : '';
    
    const isOnboardingStatus = onboardingStatuses.some(status => 
      statusText.includes(status)
    );
    
    const hasOnboardingButton = row.querySelector('.btn-onboarding') !== null;
    
    if (isOnboardingStatus || hasOnboardingButton) {
      const rowData = extractRowDataForOnboarding(row, index);
      if (rowData) {
        onboardingRows.push(rowData);
        console.log(`Found onboarding applicant: ${rowData.name} - ${statusText}`);
      }
    }
  });
  
  console.log(`Found ${onboardingRows.length} onboarding applicants from main table`);
  return onboardingRows;
}

function extractRowDataForOnboarding(row, index) {
  const cells = Array.from(row.querySelectorAll('td'));
  if (cells.length < 5) return null;
  
  const nameCell = cells[1];
  let name = 'Unknown Applicant';
  let email = '';
  
  if (nameCell) {
    const content = nameCell.innerHTML;
    const nameParts = content.split('<br>');
    if (nameParts.length > 0) {
      name = nameParts[0].trim();
    }
    if (nameParts.length > 1) {
      email = nameParts[1].replace(/<[^>]*>/g, '').trim();
    }
  }
  
  const department = cells[2] ? cells[2].textContent.trim() : 'Unknown Department';
  const position = cells[3] ? cells[3].textContent.trim() : 'Unknown Position';
  
  const statusCell = cells[4];
  let status = 'Unknown Status';
  if (statusCell) {
    const statusSpan = statusCell.querySelector('span');
    if (statusSpan) {
      status = statusSpan.textContent.trim();
    }
  }
  
  return {
    name: name,
    email: email,
    department: department,
    position: position,
    status: status
  };
}

function filterOnboardingRowsForAll(onboardingTable) {
  if (!onboardingTable) return;
  
  console.log("Filtering onboarding rows for 'all' filter - showing only valid onboarding statuses");
  
  const validOnboardingStatuses = [
    'First Day Checklist Sent',
    'Checklist Accomplished', 
    'Account Created'
  ];
  
  const allOnboardingRows = Array.from(onboardingTable.querySelectorAll('tbody tr'));
  let visibleRowCount = 0;
  
  allOnboardingRows.forEach(row => {
    const lastCell = row.querySelector('td:last-child');
    const statusText = lastCell ? lastCell.textContent.trim() : '';
    
    let showRow = false;
    
    for (const validStatus of validOnboardingStatuses) {
      if (statusText === validStatus) {
        showRow = true;
        console.log(`Valid onboarding row found: ${statusText}`);
        break;
      }
    }
    
    if (!showRow && lastCell && lastCell.querySelector('.btn-onboarding')) {
      showRow = true;
      console.log(`"For Onboarding" button found in row`);
    }
    
    row.style.display = showRow ? '' : 'none';
    
    if (showRow) {
      visibleRowCount++;
    }
  });
  
  console.log(`Onboarding table: ${visibleRowCount} valid rows displayed for "all" filter`);
  
  const onboardingHeader = document.getElementById('onboardingHeader');
  if (visibleRowCount === 0) {
    if (onboardingHeader) onboardingHeader.style.display = 'none';
    onboardingTable.style.display = 'none';
  } else {
    if (onboardingHeader) onboardingHeader.style.display = 'block';
    onboardingTable.style.display = 'table';
  }
}

function initializePageFiltering() {
  console.log("Initializing page with proper filtering...");
  
  populateOnboardingTable();
  
  const onboardingTable = document.getElementById('onboardingTable');
  if (onboardingTable) {
    filterOnboardingRowsForAll(onboardingTable);
  }
  
  highlightActiveFilter('all');
  
  console.log("Page initialization completed with dynamic onboarding data");
}

// ============================
// FINALIZATION FUNCTIONS
// ============================

function updateJobOfferSection(jobOfferRows, container) {
  console.log("Updating job offer section with", jobOfferRows.length, "rows");

  let jobOfferSection = document.getElementById('jobOfferSection');
  let jobOfferTable = document.getElementById('jobOfferTable');

  if (jobOfferRows.length > 0) {
    if (!jobOfferSection) {
      jobOfferSection = document.createElement('div');
      jobOfferSection.id = 'jobOfferSection';
      jobOfferSection.innerHTML = `
        <h4>Job Offer Sent</h4>
        <table class="tracking-table" id="jobOfferTable">
          <thead>
            <tr>
              <th>Applicant No.</th>
              <th>Last Name, First Name</th>
              <th>Department</th>
              <th>Position Applied</th>
              <th>Total Score</th>
              <th>Work Setup/Availability</th>
              <th>Applicant Status</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      `;
      
      const declaredResultsTable = document.getElementById('declaredResultsTable');
      if (declaredResultsTable && container) {
        container.insertBefore(jobOfferSection, declaredResultsTable.nextSibling);
      }
      
      jobOfferTable = document.getElementById('jobOfferTable');
    }
    
    if (jobOfferTable) {
      const jobOfferTbody = jobOfferTable.querySelector('tbody');
      if (jobOfferTbody) {
        jobOfferTbody.innerHTML = '';
        
        jobOfferRows.forEach((rowData, idx) => {
          const newRow = createTableRow(rowData, false);
          jobOfferTbody.appendChild(newRow);
          
          if (rowData.userId) {
            newRow.setAttribute('data-userid', rowData.userId);
            getTotalScoreDirectly(rowData.userId, newRow);
          }
        });
      }
    }
    
    if (jobOfferSection) {
      jobOfferSection.style.display = 'block';
    }
  } else if (jobOfferSection) {
    jobOfferSection.style.display = 'none';
  }
}

function updateReviewSectionsVisibility(hasAwaitingRows, hasDeclaredRows, hasJobOfferRows, hasP1Data, hasP3Data) {
  console.log("Updating section visibility:", {
    hasAwaitingRows, hasDeclaredRows, hasJobOfferRows, hasP1Data, hasP3Data
  });

  const awaitingHeader = document.querySelector('h4:nth-of-type(1)');
  const declaredHeader = document.querySelector('h4:nth-of-type(2)');
  const jobOfferHeader = document.querySelector('h4:nth-of-type(3)');

  const awaitingActionTable = document.getElementById('awaitingActionTable');
  const declaredResultsTable = document.getElementById('declaredResultsTable');
  const jobOfferTable = document.getElementById('jobOfferTable');

  const sortSection = document.querySelector('.sort-section');

  if (awaitingHeader) {
    awaitingHeader.style.display = hasAwaitingRows ? 'block' : 'none';
  }

  if (awaitingActionTable) {
    awaitingActionTable.style.display = hasAwaitingRows ? 'table' : 'none';
  }

  if (declaredHeader) {
    declaredHeader.style.display = hasDeclaredRows ? 'block' : 'none';
  }

  if (declaredResultsTable) {
    declaredResultsTable.style.display = hasDeclaredRows ? 'table' : 'none';
  }

  if (sortSection) {
    sortSection.style.display = hasDeclaredRows ? 'block' : 'none';
  }

  if (jobOfferHeader) {
    jobOfferHeader.style.display = hasJobOfferRows ? 'block' : 'none';
  }

  if (jobOfferTable) {
    jobOfferTable.style.display = hasJobOfferRows ? 'table' : 'none';
  }

  updateSectionHeaderButtons();
  
  const activeFilter = document.querySelector(".filter-button.active");
  if (activeFilter && activeFilter.id === 'filter-forreview') {
    setTimeout(updateSectionHeaderButtons, 500);
  }
}

function fixScoresInDeclaredResults() {
  console.log("Fixing scores in declared results table");

  const declaredResultsTable = document.getElementById('declaredResultsTable');
  if (!declaredResultsTable) return;

  const rows = declaredResultsTable.querySelectorAll('tbody tr:not(.section-header-row)');
  console.log(`Checking ${rows.length} rows in declared results table`);

  rows.forEach((row, idx) => {
    if (row.querySelector('td[colspan]')) return;
    
    let userId = row.getAttribute('data-userid');
    
    if (!userId) {
      const nameCell = row.querySelector('td:nth-child(2)');
      if (nameCell) {
        const name = nameCell.textContent.trim().replace(/\s+/g, ' ');
        userId = findUserIdByNameImproved(name);
        
        if (userId) {
          row.setAttribute('data-userid', userId);
          
          const toggleButton = row.querySelector('.btn-toggle-status');
          if (toggleButton) toggleButton.setAttribute('data-userid', userId);
        }
      }
    }
    
    if (userId) {
      console.log(`Row ${idx}: Using userId ${userId} to get score`);
      getTotalScoreDirectly(userId, row);
    }
  });
}

function addMissingToggleColumns() {
  console.log("Checking for missing Toggle Status columns...");

  const declaredResultsTable = document.getElementById('declaredResultsTable');
  if (!declaredResultsTable) return;

  const rows = declaredResultsTable.querySelectorAll('tbody tr:not(.section-header-row)');
  console.log(`Checking ${rows.length} rows in declaredResultsTable`);

  rows.forEach(row => {
    if (row.querySelector('td[colspan]')) return;
    
    const cells = row.querySelectorAll('td');
    if (cells.length < 8) {
      console.log("Found row missing Toggle Status column");
      
      const userId = row.getAttribute('data-userid');
      
      const toggleCell = document.createElement('td');
      toggleCell.innerHTML = `<button class="btn-toggle-status">Toggle Status</button>`;
      row.appendChild(toggleCell);
      
      if (userId) {
        const button = toggleCell.querySelector('.btn-toggle-status');
        if (button) {
          button.setAttribute('data-userid', userId);
        }
      }
    }
  });

  setupToggleStatusButtons();
}

// ============================
// APPLICANT UPDATE FUNCTIONS
// ============================

function updateApplicantTables(phase) {
  const awaitingActionTable = document.getElementById(phase === 'P1' ? 'p1AwaitingActionTable' : 'p3AwaitingActionTable');
  const tbody = awaitingActionTable.querySelector('tbody');
  tbody.innerHTML = '';

  const applicants = Array.from(document.querySelectorAll('.applicant-row')).filter(row => {
    const status = row.getAttribute('data-status');
    return status.startsWith(phase) && status.includes('Awaiting');
  });

  applicants.forEach((row, index) => {
    const newRow = document.createElement('tr');
  });
}

// ============================
// ENHANCED EVALUATION BUTTONS
// ============================

function setupEvaluationButtons() {
  const evaluationButtons = document.querySelectorAll(".btn-evaluation");

  evaluationButtons.forEach(button => {
    button.addEventListener("click", function () {
      window.location.href = "/linemanager/interview-form";
    });
  });
}

// ============================
// BROWSER STORAGE WARNING FUNCTIONS
// ============================

function warnAboutBrowserStorage() {
  console.warn("CRITICAL: localStorage and sessionStorage are NOT supported in Claude.ai artifacts!");
  console.warn("Use React state (useState, useReducer) or JavaScript variables instead.");
  console.warn("Any attempt to use browser storage APIs will cause the artifact to fail.");
}

// ============================
// ADDITIONAL UTILITY FUNCTIONS
// ============================

function rebuildAllTableRows() {
  console.log("REBUILD: Analyzing all table rows to ensure they have userIds...");
  
  const declaredTable = document.getElementById('declaredResultsTable');
  if (!declaredTable) {
    console.log("REBUILD: Declared results table not found");
    return;
  }
  
  const rows = declaredTable.querySelectorAll('tbody tr');
  console.log(`REBUILD: Checking ${rows.length} rows in declared results table`);
  
  rows.forEach((row, index) => {
    if (row.classList.contains('section-header-row') || row.querySelector('td[colspan]')) {
      return;
    }
    
    let userId = row.getAttribute('data-userid');
    let foundUserId = false;
    
    if (!userId || userId === 'undefined' || userId === '') {
      const nameCell = row.querySelector('td:nth-child(2)');
      if (nameCell) {
        const displayName = nameCell.textContent.replace(/\s+/g, ' ').trim();
        if (displayName && window.displayNameToUserId[displayName]) {
          userId = window.displayNameToUserId[displayName];
          foundUserId = true;
          console.log(`REBUILD: Found userId ${userId} for row ${index} using display name`);
        }
        
        if (!foundUserId) {
          const fullContent = nameCell.innerHTML;
          const nameParts = fullContent.split('<br>');
          if (nameParts.length > 0) {
            const name = nameParts[0].trim();
            if (name && window.nameToUserId[name]) {
              userId = window.nameToUserId[name];
              foundUserId = true;
              console.log(`REBUILD: Found userId ${userId} for row ${index} using name`);
            }
          }
        }
        
        if (!foundUserId) {
          const fullContent = nameCell.innerHTML;
          const nameParts = fullContent.split('<br>');
          if (nameParts.length > 1) {
            const emailHtml = nameParts[1];
            const email = emailHtml.replace(/<[^>]*>/g, '').trim();
            if (email && window.emailToUserId[email]) {
              userId = window.emailToUserId[email];
              foundUserId = true;
              console.log(`REBUILD: Found userId ${userId} for row ${index} using email`);
            }
          }
        }
      }
    } else {
      foundUserId = true;
    }
    
    if (foundUserId && userId) {
      row.setAttribute('data-userid', userId);
      
      const changeButton = row.querySelector('.btn-change-status');
      if (changeButton) {
        changeButton.setAttribute('data-userid', userId);
        changeButton.setAttribute('onclick', `changeApplicantStatus('${userId}')`);
        console.log(`REBUILD: Updated change status button for row ${index} with userId ${userId}`);
      }
    }
  });
  
  console.log("REBUILD: Completed row analysis and updates");
}

function fixAllChangeStatusButtons() {
  console.log("Fixing all Change Status buttons...");
  
  const buttons = document.querySelectorAll('.btn-change-status');
  console.log(`Found ${buttons.length} Change Status buttons`);
  
  buttons.forEach((button, index) => {
    const existingUserId = button.getAttribute('data-userid');
    if (existingUserId && existingUserId !== 'undefined' && existingUserId !== '') {
      return;
    }
    
    const row = button.closest('tr');
    if (!row) {
      console.log(`Button ${index}: No parent row found`);
      return;
    }
    
    const userId = getReliableUserId(row);
    
    if (userId) {
      button.setAttribute('data-userid', userId);
      button.setAttribute('onclick', `changeApplicantStatus('${userId}')`);
      console.log(`Button ${index}: Set userId ${userId} from registry of real data`);
    } else {
      console.log(`Button ${index}: No valid userId found from real data`);
    }
  });
}

// ============================
// INITIALIZATION COMPLETE FUNCTIONS
// ============================

function ensureAllSystemsReady() {
  console.log("=== ENSURING ALL SYSTEMS ARE READY ===");
  
  // Final check of all critical functions
  if (typeof window.applicantsData === 'undefined') {
    window.applicantsData = [];
    console.log("Initialized empty applicantsData array");
  }
  
  if (typeof window.applicantsScores === 'undefined') {
    window.applicantsScores = {};
    console.log("Initialized empty applicantsScores object");
  }
  
  if (typeof window.applicantNameMapping === 'undefined') {
    window.applicantNameMapping = {};
    console.log("Initialized empty applicantNameMapping object");
  }
  
  // Run a final test to ensure core functions work
  try {
    const testFilter = document.getElementById('filter-all');
    if (testFilter) {
      console.log("✅ Filter buttons are accessible");
    }
    
    const testTable = document.getElementById('mainApplicantTable');
    if (testTable) {
      console.log("✅ Main table is accessible");
    }
    
    console.log("✅ All core systems verified and ready");
  } catch (error) {
    console.error("❌ System verification failed:", error);
  }
}

// ============================
// FINAL ERROR HANDLING
// ============================

function handleCriticalErrors() {
  window.addEventListener('error', function(event) {
    console.error('Critical JavaScript Error:', event.error);
    console.error('Error occurred in:', event.filename, 'at line:', event.lineno);
    
    // Don't let errors break the entire application
    event.preventDefault();
    
    // Try to recover by reinitializing basic functions
    setTimeout(() => {
      try {
        if (typeof highlightActiveFilter === 'function') {
          highlightActiveFilter('all');
        }
        
        if (typeof ensureTableHeaders === 'function') {
          ensureTableHeaders();
        }
        
        console.log("Attempted basic error recovery");
      } catch (recoveryError) {
        console.error("Error recovery failed:", recoveryError);
      }
    }, 1000);
  });
}

// ============================
// FINAL INITIALIZATION CALL
// ============================

// Set up error handling
handleCriticalErrors();

// Ensure all systems are ready
ensureAllSystemsReady();

// Set up evaluation buttons when DOM is ready
setTimeout(setupEvaluationButtons, 100);

// Run final P3 status display update
setTimeout(() => {
  updateP3StatusDisplay();
  enhanceForReviewButtons();
  enhanceP3ForReviewButtons();
}, 1500);

// Set up event listeners for when filters are applied
setTimeout(() => {
  const filterButtons = document.querySelectorAll('.filter-button');
  filterButtons.forEach(button => {
    button.addEventListener('click', function() {
      setTimeout(() => {
        enhanceForReviewButtons();
        updateP3StatusDisplay();
        enhanceP3ForReviewButtons();
      }, 500);
    });
  });
  
  const allButton = document.getElementById('filter-all');
  if (allButton) {
    allButton.addEventListener('click', function() {
      setTimeout(updateP3StatusDisplay, 500);
    });
  }
}, 2000);

// ============================
// CONSOLE SUCCESS MESSAGE
// ============================


function debugP3StatusDetection() {
  console.log("=== DEBUGGING P3 STATUS DETECTION ===");
  
  const mainTable = document.getElementById('mainApplicantTable');
  if (!mainTable) {
    console.log("❌ Main table not found");
    return;
  }
  
  const rows = Array.from(mainTable.querySelectorAll('tbody tr'));
  console.log(`Found ${rows.length} total rows in main table`);
  
  let foundP3Statuses = {
    evaluation: 0,
    passedPending: 0,
    failedPending: 0,
    other: 0
  };
  
  rows.forEach((row, index) => {
    const statusCell = row.querySelector('td:nth-child(5)');
    if (!statusCell) return;
    
    const statusSpan = statusCell.querySelector('span');
    let statusText = '';
    
    if (statusSpan) {
      statusText = statusSpan.textContent.replace(/Status:\s*/g, '').trim();
    } else {
      const cellText = statusCell.textContent.replace(/Status:\s*/g, '').trim();
      const statusMatch = cellText.match(/^([^]*?)(?:\s*(?:For Review|For Evaluation|Send Job Offer|Approve))/);
      statusText = statusMatch ? statusMatch[1].trim() : cellText.split('\n')[0].trim();
    }
    
    console.log(`\nRow ${index + 1}:`);
    console.log(`  Status text: "${statusText}"`);
    
    if (statusText.includes('P3')) {
      if (statusText.includes('Line Manager Evaluation Accomplished')) {
        foundP3Statuses.evaluation++;
        console.log(`  ✅ P3 EVALUATION ACCOMPLISHED detected`);
      } else if (statusText.includes('PASSED') && statusText.includes('Pending Finalization')) {
        foundP3Statuses.passedPending++;
        console.log(`  ✅ P3 PASSED PENDING detected`);
      } else if (statusText.includes('FAILED') && statusText.includes('Pending Finalization')) {
        foundP3Statuses.failedPending++;
        console.log(`  ✅ P3 FAILED PENDING detected`);
      } else {
        foundP3Statuses.other++;
        console.log(`  ⚠️ Other P3 status: "${statusText}"`);
      }
    }
  });
  
  console.log(`\n=== P3 STATUS SUMMARY ===`);
  console.log(`P3 Line Manager Evaluation Accomplished: ${foundP3Statuses.evaluation}`);
  console.log(`P3 PASSED Pending: ${foundP3Statuses.passedPending}`);
  console.log(`P3 FAILED Pending: ${foundP3Statuses.failedPending}`);
  console.log(`Other P3 statuses: ${foundP3Statuses.other}`);
  console.log(`Total P3 Awaiting Expected: ${foundP3Statuses.evaluation}`);
  console.log(`Total P3 Declared Expected: ${foundP3Statuses.passedPending + foundP3Statuses.failedPending}`);
  
  return foundP3Statuses;
}

// Function to manually set P3 status for testing
function testSetP3Status(applicantId) {
  console.log(`🧪 Testing: Setting P3 status for applicantId: ${applicantId}`);
  
  fetch('/linemanager/applicant-tracker-jobposition/setP3EvaluationAccomplished', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ applicantId: applicantId }),
  })
  .then(response => response.json())
  .then(data => {
    console.log('✅ Test response:', data);
    if (data.success) {
      alert(`Successfully set P3 status for applicant ${applicantId}`);
      // Refresh the page to see changes
      setTimeout(() => window.location.reload(), 1000);
    } else {
      alert(`Failed to set P3 status: ${data.message}`);
    }
  })
  .catch(error => {
    console.error('❌ Test error:', error);
    alert('Error testing P3 status update');
  });
}

// Make debug function globally available
window.debugP3StatusDetection = debugP3StatusDetection;
window.testSetP3Status = testSetP3Status;


// Make sure the new functions are globally available
window.populateP3AwaitingActionTableFixed = populateP3AwaitingActionTableFixed;
window.populateP3DeclaredResultsTableFixed = populateP3DeclaredResultsTableFixed;
window.createP3AwaitingRowFixed = createP3AwaitingRowFixed;
window.createP3DeclaredRowFixed = createP3DeclaredRowFixed;
window.createP3AwaitingStatusCellFixed = createP3AwaitingStatusCellFixed;
window.checkForP1DeclaredResultsFixed = checkForP1DeclaredResultsFixed;
window.checkForP3DeclaredResultsFixed = checkForP3DeclaredResultsFixed;

console.log('✅ COMPLETE P3 INTEGRATION LOADED SUCCESSFULLY!');
console.log('🔧 Fixed Features:');
console.log('   ✅ P3 - Line Manager Evaluation Accomplished detection');
console.log('   ✅ P3 - PASSED/FAILED (Pending Finalization) detection');
console.log('   ✅ P3 Awaiting Action table with View Evaluation, Pass, Reject buttons');
console.log('   ✅ P3 Declared Results table with Change Status buttons');
console.log('   ✅ Finalize P3 Results button visibility');
console.log('   ✅ Proper P3 pass/reject API integration using userId');
console.log('   ✅ Row movement between P3 sections');
console.log('   ✅ Status update and database synchronization');

console.log('🎉 COMPLETE APPLICANT TRACKER SYSTEM LOADED SUCCESSFULLY!');
console.log('📊 Total Functions Loaded: 50+');
console.log('🔧 Key Features:');
console.log('   ✅ Single DOMContentLoaded Event Handler');
console.log('   ✅ Fixed P1 Status Detection for "P1 - PASSED (Pending Finalization)"');
console.log('   ✅ Corrected Section Headers (P1 vs P3)');
console.log('   ✅ Enhanced Data Extraction & Score Management');
console.log('   ✅ Gmail Integration for Notifications');
console.log('   ✅ Job Offer Management');
console.log('   ✅ Toggle Status Functions');
console.log('   ✅ Debug & Testing Functions');
console.log('   ✅ Error Handling & Recovery');
console.log('');
console.log('🐛 Available Debug Commands:');
console.log('   - debugP1StatusDetection() - Check P1 status detection');
console.log('   - debugDeclaredResults() - Analyze current table data');
console.log('   - createTestPendingStatuses() - Create test data');
console.log('   - debugEvaluationData() - Check P3 evaluation status');
console.log('   - checkP3EvaluationRows() - Manual P3 check');
console.log('   - testGmailCompose() - Test Gmail integration');
console.log('');


</script>
</body>
</html>
