<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Training & Development</title>
    <link rel="stylesheet" href="/css/sidebar.css">
    <link rel="stylesheet" href="/css/linemanagertrainingdevelopment.css">
</head>
<body>
   <%- include('../../partials/linemanager_partials') %>
    
<div class="main-content">
    <!-- Header Section -->
    <div class="header-section">
        <h1>Training & Development Tracker</h1>
        <p>Manage and review employee training requests awaiting your endorsement</p>
    </div>

    <!-- Statistics Cards with Training Status Data -->
    <div class="stats-grid">
        <div class="stat-card pending">
            <div class="stat-card-content">
                <div class="stat-info">
                    <div class="stat-number"><%= statistics.statusStats.forLineManagerEndorsement %></div>
                    <p class="stat-label">Pending Endorsement</p>
                    <p class="stat-sublabel">Awaiting your approval</p>
                </div>
                <div class="stat-icon">‚è∞</div>
            </div>
        </div>
        
        <div class="stat-card budget">
            <div class="stat-card-content">
                <div class="stat-info">
                    <div class="stat-number"><%= statistics.statusStats.inProgress %></div>
                    <p class="stat-label">In Progress</p>
                    <p class="stat-sublabel">Currently training</p>
                </div>
                <div class="stat-icon">üìö</div>
            </div>
        </div>
        
        <div class="stat-card average">
            <div class="stat-card-content">
                <div class="stat-info">
                    <div class="stat-number"><%= statistics.statusStats.completed %></div>
                    <p class="stat-label">Completed</p>
                    <p class="stat-sublabel">Training finished</p>
                </div>
                <div class="stat-icon">‚úÖ</div>
            </div>
        </div>
        
        <div class="stat-card online">
            <div class="stat-card-content">
                <div class="stat-info">
                    <div class="stat-number"><%= statistics.totalEmployees %></div>
                    <p class="stat-label">Total Employees</p>
                    <p class="stat-sublabel">In your department</p>
                </div>
                <div class="stat-icon">üë•</div>
            </div>
        </div>
    </div>

    <!-- Additional Status Breakdown (Optional) -->
    <div class="status-breakdown">
        <div class="breakdown-card">
            <h3>Training Status Breakdown</h3>
            <div class="status-grid">
                <div class="status-item">
                    <span class="status-count"><%= statistics.statusStats.forHRApproval %></span>
                    <span class="status-text">For HR Approval</span>
                </div>
                <div class="status-item">
                    <span class="status-count"><%= statistics.statusStats.notStarted %></span>
                    <span class="status-text">Not Started</span>
                </div>
                <div class="status-item">
                    <span class="status-count"><%= statistics.statusStats.cancelled %></span>
                    <span class="status-text">Cancelled</span>
                </div>
                <div class="status-item">
                    <span class="status-count"><%= statistics.statusStats.noTraining %></span>
                    <span class="status-text">No Training</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Tab Navigation -->
    <div class="tab-navigation">
        <ul class="tab-list">
            <li class="tab-item">
                <button class="tab-button active" onclick="showTab('training-requests')">
                    Training Requests
                </button>
            </li>
            <li class="tab-item">
                <button class="tab-button" onclick="showTab('view-employees')">
                    View Employees
                </button>
            </li>
        </ul>
    </div>

    <!-- Training Requests Tab Content -->
    <div id="training-requests" class="tab-content active">
        <div class="section-header">
            <h2>Training Requests for Endorsement</h2>
        </div>
        
        <% if (trainingRecords && trainingRecords.length > 0) { %>
            <div class="table-container">
                <table class="training-table">
                    <thead>
                        <tr>
                            <th>Employee</th>
                            <th>Email</th>
                            <th>Training Details</th>
                            <th>Duration</th>
                            <th>Cost</th>
                            <th>Type</th>
                            <th>Requested Date</th>
                            <th>Training Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% trainingRecords.forEach(function(record) { %>
                            <tr>
                                <td>
                                    <% if (record.staffaccounts) { %>
                                        <strong>
                                            <%= record.staffaccounts.firstName || 'No First Name' %> 
                                            <%= record.staffaccounts.lastName || 'No Last Name' %>
                                        </strong>
                                    <% } else { %>
                                        <strong style="color: red;">No Staff Data Found (UserID: <%= record.userId %>)</strong>
                                    <% } %>
                                    <% if (record.jobpositions?.jobTitle) { %>
                                        <br><small style="color: #6c757d;"><%= record.jobpositions.jobTitle %></small>
                                    <% } %>
                                </td>
                                <td><%= record.useraccounts?.userEmail || 'No Email' %></td>
                                <td>
                                    <strong><%= record.trainingName %></strong>
                                    <% if (record.trainingDesc) { %>
                                        <br><small style="color: #6c757d;"><%= record.trainingDesc.substring(0, 100) %>...</small>
                                    <% } %>
                                    <% if (record.address && !record.isOnlineArrangement) { %>
                                        <br><small style="color: #6c757d;">üìç <%= record.address %>, <%= record.country %></small>
                                    <% } %>
                                </td>
                                <td class="duration-cell">
                                    <%= record.totalDuration %> hours
                                    <% if (record.setStartDate && record.setEndDate) { %>
                                        <br><small><%= new Date(record.setStartDate).toLocaleDateString() %> - <%= new Date(record.setEndDate).toLocaleDateString() %></small>
                                    <% } %>
                                </td>
                                <td class="cost-cell">‚Ç±<%= parseFloat(record.cost || 0).toLocaleString() %></td>
                                <td>
                                    <% if (record.isOnlineArrangement) { %>
                                        <span class="online-badge">Online</span>
                                    <% } else { %>
                                        <span class="onsite-badge">On-site</span>
                                    <% } %>
                                </td>
                                <td><%= new Date(record.dateRequested).toLocaleDateString() %></td>
                                <td>
                                    <span class="status-badge <%= record.status === 'For HR Approval' ? 'status-hr' : 
                                         record.status === 'Cancelled' ? 'status-cancelled' : 
                                         'status-pending' %>">
                                        <%= record.status %>
                                    </span>
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        <button class="btn btn-approve" onclick="approveTraining('<%= record.trainingRecordId %>')">
                                            Endorse to HR
                                        </button>
                                        <button class="btn btn-reject" onclick="rejectTraining('<%= record.trainingRecordId %>')">
                                            Return for Revision
                                        </button>
                                        <button class="btn btn-view" onclick="viewTrainingDetails('<%= record.trainingRecordId %>')">
                                            View Details
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        <% } else { %>
            <div class="no-records">
                <i>üìö</i>
                <h3>No Training Requests Pending</h3>
                <p>There are currently no training requests awaiting your endorsement.</p>
            </div>
        <% } %>
    </div>

    <!-- View Employees Tab Content with Progress Column -->
    <div id="view-employees" class="tab-content">
        <div class="section-header">
            <h2>Team Members</h2>
            <p style="margin: 5px 0 0 0; color: #6c757d; font-size: 0.9rem;">Manage and view your team members</p>
        </div>
        
        <% if (employees && employees.length > 0) { %>
            <div class="table-container">
                <table class="employee-table">
                    <thead>
                        <tr>
                            <th>Employee</th>
                            <th>Position</th>
                            <th>Department</th>
                            <th>Email</th>
                            <th>Training Progress</th>
                            <th>Status</th>
                            <th>Hire Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% employees.forEach(function(employee) { %>
                            <tr>
                                <td>
                                    <div class="employee-info">
                                        <div class="employee-avatar">
                                            <%= (employee.firstName?.charAt(0) || 'N') + (employee.lastName?.charAt(0) || 'A') %>
                                        </div>
                                        <div class="employee-details">
                                            <h4><%= employee.firstName || 'No First Name' %> <%= employee.lastName || 'No Last Name' %></h4>
                                            <p>ID: <%= employee.userId %></p>
                                        </div>
                                    </div>
                                </td>
                                <td><%= employee.jobTitle || 'No Position' %></td>
                                <td>
                                    <span class="department-badge">
                                        <%= employee.department || 'No Department' %>
                                    </span>
                                </td>
                                <td><%= employee.userEmail || 'No Email' %></td>
                                <td>
                                    <div class="progress-container" data-user-id="<%= employee.userId %>">
                                        <% if (employee.overallProgressPercentage !== undefined) { %>
                                            <!-- Server-side calculated progress -->
                                            <div class="progress-info">
                                                <span class="progress-percentage <%= (employee.overallProgressPercentage || 0) === 100 ? 'completed' : (employee.overallProgressPercentage || 0) > 0 ? 'in-progress' : 'not-started' %>">
                                                    <%= employee.progressDisplay || 'No Training' %>
                                                </span>
                                                <% if (employee.totalTrainings && employee.totalTrainings > 0) { %>
                                                    <small class="progress-details">
                                                        <%= employee.completedTrainings || 0 %>/<%= employee.totalTrainings %> completed
                                                    </small>
                                                <% } %>
                                            </div>
                                            <% if (employee.overallProgressPercentage !== undefined && employee.totalTrainings > 0) { %>
                                                <div class="progress-bar">
                                                    <div class="progress-fill" style="width: <%= employee.overallProgressPercentage %>%"></div>
                                                </div>
                                            <% } %>
                                        <% } else { %>
                                            <!-- Placeholder for client-side loading -->
                                            <div class="progress-loading">
                                                <span class="loading-text">Loading...</span>
                                                <div class="loading-spinner"></div>
                                            </div>
                                        <% } %>
                                    </div>
                                </td>
                                <td>
                                    <div class="training-status-info">
                                        <span class="training-status-badge <%= employee.statusClass || (employee.trainingStatus === 'No Training' ? 'status-no-training' : 'status-unknown') %>">
                                            <%= employee.trainingStatus || 'No Training' %>
                                        </span>
                                        <% if (employee.latestTraining) { %>
                                            <br><small style="color: #6c757d; font-size: 0.75rem;">
                                                Latest: <%= employee.latestTraining.trainingName %>
                                                <br>Requested: <%= new Date(employee.latestTraining.dateRequested).toLocaleDateString() %>
                                            </small>
                                        <% } %>
                                    </div>
                                </td>
                                <td><%= employee.hireDate ? new Date(employee.hireDate).toLocaleDateString() : 'N/A' %></td>
                                <td>
                                    <div class="employee-actions">
                                        <button class="btn btn-small btn-outline" onclick="viewEmployeeDetails('<%= employee.userId %>')">
                                            View Profile
                                        </button>
                                        <button class="btn btn-small btn-view" onclick="viewEmployeeTrainings('<%= employee.userId %>')">
                                            View Trainings
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        <% } else { %>
            <div class="no-records">
                <i>üë•</i>
                <h3>No Employees Found</h3>
                <p>There are currently no employees under your management.</p>
            </div>
        <% } %>
    </div>
</div>

<!-- Training Details Modal -->
<div id="trainingDetailsModal" class="modal">
  <div class="modal-content">
    <span class="close-modal">&times;</span>
    <h2>Training Request Details</h2>
    <div id="modalContent">
      <!-- Content will be loaded here dynamically -->
    </div>
  </div>
</div>

<!-- Employee Training History Modal -->
<div id="employeeTrainingModal" class="modal">
  <div class="modal-content large-modal">
    <span class="close-modal" onclick="closeEmployeeTrainingModal()">&times;</span>
    <h2 id="employeeTrainingTitle">Employee Training History</h2>
    <div id="employeeTrainingContent">
      <!-- Content will be loaded here dynamically -->
    </div>
  </div>
</div>

<script>
    // Tab functionality
    function showTab(tabId) {
        // Hide all tab contents
        document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.remove('active');
        });
        
        // Remove active class from all tab buttons
        document.querySelectorAll('.tab-button').forEach(button => {
            button.classList.remove('active');
        });
        
        // Show selected tab content
        document.getElementById(tabId).classList.add('active');
        
        // Add active class to clicked button
        event.target.classList.add('active');
        
        // Load progress when showing employees tab (if client-side loading is needed)
        if (tabId === 'view-employees') {
            setTimeout(() => {
                loadEmployeeProgress();
            }, 100);
        }
    }

    // Toggle active class for sidebar links
    document.querySelectorAll('.sidebar ul li a').forEach(link => {
        link.addEventListener('click', function() {
            document.querySelectorAll('.sidebar ul li a').forEach(link => link.classList.remove('active'));
            this.classList.add('active');
        });
    });

    // Toggle collapsible content
    document.querySelectorAll('.collapsible-header').forEach(header => {
        header.addEventListener('click', function() {
            var content = this.nextElementSibling;
            if (content.style.display === 'block') {
                content.style.display = 'none';
            } else {
                document.querySelectorAll('.collapsible-content').forEach(item => {
                    if (item !== content) {
                        item.style.display = 'none';
                    }
                });
                content.style.display = 'block';
            }
        });
    });

    // Training approval functions
    function approveTraining(trainingRecordId) {
        if (confirm('Are you sure you want to endorse this training request to HR?')) {
            fetch('/api/training/endorse', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    trainingRecordId: trainingRecordId,
                    decision: 'endorsed',
                    status: 'For HR Approval'
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Training request endorsed to HR successfully!');
                    location.reload();
                } else {
                    alert('Error endorsing training request: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while endorsing the training request.');
            });
        }
    }

    function rejectTraining(trainingRecordId) {
        const remarks = prompt('Please provide reason for cancellation:');
        if (remarks !== null) {
            fetch('/api/training/reject', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    trainingRecordId: trainingRecordId,
                    decision: 'rejected',
                    status: 'Cancelled',
                    remarks: remarks
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Training request has been cancelled successfully!');
                    location.reload();
                } else {
                    alert('Error cancelling training request: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while cancelling the training request.');
            });
        }
    }

    // Employee functions
    function viewEmployeeDetails(userId) {
        alert('Employee details for user ID: ' + userId + '\n(Feature to be implemented)');
    }

    // JavaScript for client-side progress loading (if server-side data is not available)
    async function loadEmployeeProgress() {
        const progressContainers = document.querySelectorAll('.progress-container');
        
        for (const container of progressContainers) {
            const userId = container.getAttribute('data-user-id');
            if (!userId) continue;
            
            // Skip if already loaded (has progress-percentage class)
            if (container.querySelector('.progress-percentage')) continue;
            
            try {
                const response = await fetch(`/linemanager/api/employee/progress/${userId}`);
                const result = await response.json();
                
                if (result.success) {
                    const data = result.data;
                    
                    container.innerHTML = `
                        <div class="progress-info">
                            <span class="progress-percentage ${getProgressClass(data.overallProgressPercentage)}">
                                ${data.progressDisplay}
                            </span>
                            ${data.totalTrainings > 0 ? `
                                <small class="progress-details">
                                    ${data.completedTrainings}/${data.totalTrainings} completed
                                </small>
                            ` : ''}
                        </div>
                        ${data.totalTrainings > 0 ? `
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: ${data.overallProgressPercentage}%"></div>
                            </div>
                        ` : ''}
                    `;
                } else {
                    throw new Error(result.message || 'Failed to load progress');
                }
                
            } catch (error) {
                console.error(`Error loading progress for user ${userId}:`, error);
                container.innerHTML = '<span class="progress-error">Error</span>';
            }
        }
    }

    function getProgressClass(percentage) {
        if (percentage === 100) return 'completed';
        if (percentage > 0) return 'in-progress';
        return 'not-started';
    }

// Complete viewEmployeeTrainings function with all features
async function viewEmployeeTrainings(userId) {
    try {
        console.log('üîç Fetching training data for user:', userId);
        
        // Show loading state
        document.getElementById('employeeTrainingContent').innerHTML = '<div class="loading-spinner"><p>Loading training history...</p></div>';
        document.getElementById('employeeTrainingModal').style.display = 'block';
        
        // Fetch comprehensive training data with better error handling
        const response = await fetch(`/linemanager/api/employee/trainings/${userId}`);
        
        console.log('üì° Response status:', response.status);
        console.log('üì° Response URL:', response.url);
        
        // Check if response is ok
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        // Check content type
        const contentType = response.headers.get('content-type');
        console.log('üìÑ Content type:', contentType);
        
        if (!contentType || !contentType.includes('application/json')) {
            const textResponse = await response.text();
            console.error('‚ùå Expected JSON but got:', textResponse.substring(0, 200));
            throw new Error('Server returned HTML instead of JSON. Check if the API route is set up correctly.');
        }
        
        const data = await response.json();
        console.log('üìã Received data:', data);
        
        if (data.error) {
            throw new Error(data.error);
        }
        
        const employee = data.employee;
        const trainings = data.trainings;
        
        // Update modal title
        document.getElementById('employeeTrainingTitle').innerHTML = 
            `Training History - ${employee.firstName} ${employee.lastName}`;
        
        // Build comprehensive training history HTML
        let trainingHTML = '';
        
        if (trainings && trainings.length > 0) {
            trainings.forEach((training, index) => {
                trainingHTML += `
                    <div class="training-record-card">
                        <div class="training-header">
                            <div class="training-title-section">
                                <h3>${training.trainingName}</h3>
                                <span class="training-status-badge ${getStatusClass(training.status)}">
                                    ${training.status}
                                </span>
                            </div>
                            <div class="training-meta">
                                <p><strong>Duration:</strong> ${training.totalDuration || 0} hours</p>
                                <p><strong>Cost:</strong> ‚Ç±${parseFloat(training.cost || 0).toLocaleString()}</p>
                                <p><strong>Type:</strong> ${training.isOnlineArrangement ? 'Online' : 'On-site'}</p>
                                <p><strong>Requested:</strong> ${new Date(training.dateRequested).toLocaleDateString()}</p>
                                ${training.setStartDate && training.setEndDate ? `
                                    <p><strong>Duration:</strong> ${new Date(training.setStartDate).toLocaleDateString()} - ${new Date(training.setEndDate).toLocaleDateString()}</p>
                                ` : ''}
                                ${training.address && !training.isOnlineArrangement ? `
                                    <p><strong>Location:</strong> ${training.address}, ${training.country || ''}</p>
                                ` : ''}
                            </div>
                        </div>
                        
                        <div class="training-body">
                            <div class="training-section">
                                <h4>Description</h4>
                                <p>${training.trainingDesc || 'No description provided'}</p>
                            </div>
                            
                            ${training.activities && training.activities.length > 0 ? `
                            <div class="training-section">
                                <h4>Activities (${training.activities.length})</h4>
                                <div class="activities-grid">
                                    ${training.activities.map(activity => `
                                        <div class="activity-card">
                                            <div class="activity-header">
                                                <span class="activity-name">${activity.activityName || 'Unnamed Activity'}</span>
                                                <span class="activity-type">${activity.activityType || 'N/A'}</span>
                                            </div>
                                            <div class="activity-details">
                                                <p><strong>Duration:</strong> ${activity.estActivityDuration || 0} hours</p>
                                                <p><strong>Status:</strong> ${activity.status || 'Unknown'}</p>
                                                ${activity.timestampzStarted ? `<p><strong>Started:</strong> ${new Date(activity.timestampzStarted).toLocaleString()}</p>` : ''}
                                                ${activity.timestampzCompleted ? `<p><strong>Completed:</strong> ${new Date(activity.timestampzCompleted).toLocaleString()}</p>` : ''}
                                                ${activity.activityRemarks ? `<p><strong>Remarks:</strong> ${activity.activityRemarks}</p>` : ''}
                                            </div>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                            ` : '<div class="training-section"><h4>Activities</h4><p>No activities recorded for this training.</p></div>'}
                            
                            ${training.skills && training.skills.length > 0 ? `
                            <div class="training-section">
                                <h4>Skills Covered (${training.skills.length})</h4>
                                <div class="skills-list">
                                    ${training.skills.map(skill => `
                                        <span class="skill-badge ${skill.jobReqSkillType ? skill.jobReqSkillType.toLowerCase().replace(/\s+/g, '-') : 'general'}">${skill.jobReqSkillName || 'Unknown Skill'}</span>
                                    `).join('')}
                                </div>
                            </div>
                            ` : '<div class="training-section"><h4>Skills</h4><p>No specific skills listed for this training.</p></div>'}
                            
                            ${training.objectives && training.objectives.length > 0 ? `
                            <div class="training-section">
                                <h4>Learning Objectives (${training.objectives.length})</h4>
                                <ul class="objectives-list">
                                    ${training.objectives.map(obj => `<li>${obj.objectiveName || 'Learning objective'}</li>`).join('')}
                                </ul>
                            </div>
                            ` : '<div class="training-section"><h4>Objectives</h4><p>No learning objectives specified.</p></div>'}
                            
                            ${training.categories && training.categories.length > 0 ? `
                            <div class="training-section">
                                <h4>Training Categories</h4>
                                <div class="categories-list">
                                    ${training.categories.map(cat => `<span class="category-badge">${cat.categoryName || 'Category'}</span>`).join('')}
                                </div>
                            </div>
                            ` : ''}
                            
                            ${training.certificates && training.certificates.length > 0 ? `
                            <div class="training-section">
                                <h4>Certificates (${training.certificates.length})</h4>
                                <div class="certificates-list">
                                    ${training.certificates.map(cert => `
                                        <div class="certificate-card">
                                            <h5>${cert.trainingCertTitle || 'Certificate'}</h5>
                                            <p>${cert.trainingCertDesc || 'No description available'}</p>
                                            ${cert.certificate_url ? `<a href="${cert.certificate_url}" target="_blank" class="btn btn-small btn-view">View Certificate</a>` : '<span class="text-muted">Certificate file not available</span>'}
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                            ` : ''}
                            
                            ${training.lmDecisionRemarks || training.hrDecisionRemarks ? `
                            <div class="training-section">
                                <h4>Decision History</h4>
                                ${training.lmDecisionDate ? `<p><strong>Manager Decision Date:</strong> ${new Date(training.lmDecisionDate).toLocaleDateString()}</p>` : ''}
                                ${training.lmDecisionRemarks ? `<p><strong>Manager Remarks:</strong> ${training.lmDecisionRemarks}</p>` : ''}
                                ${training.hrDecisionDate ? `<p><strong>HR Decision Date:</strong> ${new Date(training.hrDecisionDate).toLocaleDateString()}</p>` : ''}
                                ${training.hrDecisionRemarks ? `<p><strong>HR Remarks:</strong> ${training.hrDecisionRemarks}</p>` : ''}
                            </div>
                            ` : ''}
                        </div>
                    </div>
                `;
            });
        } else {
            trainingHTML = `
                <div class="no-records">
                    <i style="font-size: 4rem; display: block; margin-bottom: 20px; opacity: 0.5;">üìö</i>
                    <h3>No Training Records</h3>
                    <p>This employee has no training history.</p>
                    <p style="color: #6c757d; font-size: 0.9rem;">When they request training, it will appear here.</p>
                </div>
            `;
        }
        
        document.getElementById('employeeTrainingContent').innerHTML = trainingHTML;
        
    } catch (error) {
        console.error('‚ùå Error loading employee trainings:', error);
        document.getElementById('employeeTrainingContent').innerHTML = `
            <div style="color: red; text-align: center; padding: 40px;">
                <h3 style="color: #dc3545; margin-bottom: 15px;">‚ö†Ô∏è Error Loading Training History</h3>
                <div style="background: #f8d7da; border: 1px solid #f5c6cb; border-radius: 8px; padding: 20px; margin: 20px 0; color: #721c24;">
                    <p><strong>Error Details:</strong></p>
                    <p>${error.message}</p>
                </div>
                <div style="margin-top: 20px;">
                    <button class="btn btn-small" onclick="closeEmployeeTrainingModal()" style="margin-right: 10px;">Close</button>
                    <button class="btn btn-small btn-outline" onclick="viewEmployeeTrainings('${userId}')" style="background: #007bff; color: white;">Try Again</button>
                </div>
                <details style="margin-top: 20px; text-align: left;">
                    <summary style="cursor: pointer; padding: 10px; background: #e9ecef; border-radius: 4px;">Technical Details</summary>
                    <div style="padding: 10px; background: #f8f9fa; border-radius: 4px; margin-top: 10px; font-family: monospace; font-size: 0.8rem;">
                        <p><strong>User ID:</strong> ${userId}</p>
                        <p><strong>Error Type:</strong> ${error.name || 'Unknown'}</p>
                        <p><strong>Timestamp:</strong> ${new Date().toLocaleString()}</p>
                        <p><strong>Expected URL:</strong> /linemanager/api/employee/trainings/${userId}</p>
                    </div>
                </details>
            </div>
        `;
    }
}

// Helper function to get status CSS class
function getStatusClass(status) {
    switch (status) {
        case 'For Line Manager Endorsement': 
            return 'status-pending-lm';
        case 'For HR Approval': 
            return 'status-pending-hr';
        case 'Cancelled': 
            return 'status-cancelled';
        case 'Not Started': 
            return 'status-not-started';
        case 'In Progress': 
            return 'status-in-progress';
        case 'Completed': 
            return 'status-completed';
        default: 
            return 'status-unknown';
    }
}

// Close employee training modal
function closeEmployeeTrainingModal() {
    document.getElementById('employeeTrainingModal').style.display = 'none';
}

    // Auto-refresh every 5 minutes to check for new requests
    setInterval(function() {
        location.reload();
    }, 300000); // 5 minutes

    // Modal functionality
    document.querySelectorAll('.close-modal').forEach(closeBtn => {
        closeBtn.addEventListener('click', function() {
            this.closest('.modal').style.display = 'none';
        });
    });

    // Close modal when clicking outside
    window.addEventListener('click', function(event) {
        if (event.target.classList.contains('modal')) {
            event.target.style.display = 'none';
        }
    });

    function viewTrainingDetails(trainingRecordId) {
        // Implementation for viewing training details
        alert('Training details for ID: ' + trainingRecordId + '\n(Feature to be implemented)');
    }
</script>
</body>
</html>