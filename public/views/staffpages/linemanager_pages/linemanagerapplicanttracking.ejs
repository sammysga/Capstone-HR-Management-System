<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Line Manager Applicant Tracker Main</title>
    <link rel="stylesheet" href="/css/sidebar.css"> <!-- Linking Sidebar CSS -->
    <link rel="stylesheet" href="/css/linemanager.css"> <!-- Linking Main Content CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"> <!-- FontAwesome for icons -->
    <style>
        .main-content {
            margin-left: 350px; 
            padding: 20px;
            width: calc(100% - 350px); 
            background-color: #FFFFFF;
        }

        .header-section {
            margin-bottom: 30px; 
            margin-left: 5px; 
            margin-right: 5px; 
            font-size: 24px;
            text-align: left; 
            width: calc(100% - 10px); 
        }

        .tracking-section {
            background-color: #FFFFFF; 
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            margin-top: 30px; 
            margin-left: 5px;
            margin-right: 5px; 
            width: 95%; 
        }

        .search-container {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 15px;
        }

        .left-section {
            display: flex;
            align-items: center;
        }

        .dropdown {
            margin-right: 10px;
            padding: 8px;
            font-size: 16px;
            border: 1px solid #ddd;
            cursor: pointer;
        }

        .search-bar {
            padding: 8px;
            width: 250px;
            font-size: 16px;
            border: 1px solid #ddd;
        }

        .search-button {
            margin-left: 10px;
            background-color: #124A5C;
            color: white;
            border: none;
            padding: 10px;
            cursor: pointer;
            font-size: 16px;
        }

        .right-section {
            display: flex;
            gap: 10px; 
        }
        .right-section button {
            padding: 10px 15px;
            font-size: 16px;
            font-weight: bold;
            border: none;
            background-color:#124A5C;
            color: white;
            transition: background-color 0.3s ease;
        }

        .right-section button:hover {
            background-color: #B4E3E3;
            color: white;
        }


        /* Table styles */
        .tracking-table {
            width: 100%;
            border-collapse: collapse;
        }

        .tracking-table th, 
        .tracking-table td {
            text-align: left;
            padding: 8px;
            border: 1px solid #ddd;
        }

        .tracking-table th {
            background-color: #f4f4f4;
        }

        .tracking-table th.fixed-width,
        .tracking-table td.fixed-width {
            width: 100px;
            text-align: center; 
        }

        .tracking-table tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .tracking-table tr:hover {
            background-color: #f1f1f1;
        }

        .job-title-container {
            display: flex;
            align-items: center;
        }

        .status-circle {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px; 
        }

        .status-circle.green {
            background-color: green;
        }

        .status-circle.gray {
            background-color: gray;
        }

        /* New styles for P1 column highlighting */
        .active-p1 {
            background-color: rgba(0, 128, 0, 0.2); /* Light green background */
            font-weight: bold;
            color: green;
        }


        .set-interview-button {
            padding: 10px 20px;
            background-color: #124A5C;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 16px;
            margin-top: 20px;
            display: block;
            width: 20%;
            text-align: center;
        }
        .set-interview-button:hover {
            background-color: #218838;
        }

                /* NEW: Quick Dashboard Styles - ADD TO YOUR EXISTING STYLES */
        .quick-dashboard {
            background: linear-gradient(135deg, #124A5C, #1a5f75);
            border-radius: 10px;
            padding: 25px;
            margin-bottom: 25px;
            color: white;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

        .dashboard-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .dashboard-title {
            font-size: 22px;
            font-weight: 600;
            margin: 0;
        }

        .quick-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .stat-item {
            background: rgba(255,255,255,0.1);
            backdrop-filter: blur(10px);
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            border: 1px solid rgba(255,255,255,0.2);
        }

        .stat-number {
            font-size: 28px;
            font-weight: bold;
            margin-bottom: 5px;
            display: block;
        }

        .stat-label {
            font-size: 13px;
            opacity: 0.9;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        /* NEW: Quick Reports Section */
        .quick-reports {
            background: white;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 25px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            border: 1px solid #e9ecef;
        }

        .reports-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f8f9fa;
        }

        .reports-title {
            font-size: 18px;
            color: #124A5C;
            margin: 0;
            font-weight: 600;
        }

        .report-actions {
            display: flex;
            gap: 10px;
        }

        .quick-report-btn {
            padding: 8px 16px;
            border: 1px solid #124A5C;
            background: transparent;
            color: #124A5C;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .quick-report-btn:hover {
            background: #124A5C;
            color: white;
        }

        .quick-report-btn.primary {
            background: #124A5C;
            color: white;
        }

        .quick-report-btn.primary:hover {
            background: #0e3a4a;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .quick-stats {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .report-actions {
                flex-direction: column;
                gap: 8px;
            }
        }
    </style>
</head>
<body>
    <%- include('../../partials/linemanager_partials') %>

    <!-- Main Content Section -->
    <div class="main-content">
        <!-- Header Section -->
        <div class="header-section">
            <h2>Applicant Tracking</h2>
        </div>

        <!-- NEW: Quick Dashboard Section -->
        <div class="quick-dashboard">
            <div class="dashboard-header">
                <h3 class="dashboard-title"><i class="fas fa-chart-line"></i> Department Recruitment Overview</h3>
            </div>
            
            <div class="quick-stats">
                <div class="stat-item">
                    <span class="stat-number" id="total-positions">0</span>
                    <span class="stat-label">Open Positions</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number" id="total-applicants">0</span>
                    <span class="stat-label">Total Applicants</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number" id="pending-review">0</span>
                    <span class="stat-label">Pending Your Review</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number" id="active-hiring">0</span>
                    <span class="stat-label">Active Hiring</span>
                </div>
            </div>
        </div>

        <!-- NEW: Quick Reports Section -->
        <div class="quick-reports">
            <div class="reports-header">
                <h3 class="reports-title"><i class="fas fa-file-alt"></i> Quick Reports</h3>
                <div class="report-actions">
                    <button class="quick-report-btn" onclick="exportAllApplicants()">
                        <i class="fas fa-download"></i> Export All Applicants
                    </button>
                    <button class="quick-report-btn" onclick="generateStatusReport()">
                        <i class="fas fa-chart-pie"></i> Status Summary
                    </button>
                    <button class="quick-report-btn primary" onclick="openComprehensiveReports()">
                        <i class="fas fa-external-link-alt"></i> Full Reports
                    </button>
                </div>
            </div>
        </div>

        <!-- Applicant Tracking Section -->
        <div class="tracking-section">
            <!-- Search Bar and Status Buttons -->
            <div class="search-container">
                <div class="left-section">
                    <select class="dropdown" id="departmentDropdown" onchange="filterByDepartment()">
                        <option value="all">All Departments</option>
                        <% if (departments && departments.length > 0) { %>
                            <% departments.forEach(function(department) { %>
                                <option value="<%= department.departmentId %>"><%= department.deptName %></option>
                            <% }); %>
                        <% } else { %>
                            <option value="">No departments available</option>
                        <% } %>
                    </select>

                    <input type="text" class="search-bar" id="searchBar" placeholder="Search Job Position">
                    <button class="search-button" onclick="filterTable()">Search</button>
                </div>
                <!-- <div class="right-section">
                    <button id="filter-all">All</button>
                    <button id="filter-review">For Review</button>
                    <button id="filter-evaluation">For Evaluation</button>
                    <button id="filter-onboarding">For Onboarding</button>
                </div>             -->
            </div>

            <!-- Table -->
            <table class="tracking-table" id="applicantTable">
                <thead>
                    <tr>
                        <th>Job Name</th>
                        <th>Department</th>
                        <th>Hiring Start Date</th>
                        <th>Hiring End Date</th>
                        <th class="fixed-width">P1</th>
                        <th class="fixed-width">P2</th>
                        <th class="fixed-width">P3</th>
                        <th class="fixed-width">Offered</th>
                        <th class="fixed-width">Onboarding</th>
                    </tr>
                </thead>
                <tbody>
                    <% 
                        // Sort job positions by job title alphabetically
                        jobPositions.sort((a, b) => a.jobTitle.localeCompare(b.jobTitle));
                        jobPositions.forEach((job, index) => { 
                    %>
                    <tr class="jobRow" 
                        data-department="<%= job.departmentId %>" 
                        data-hiring-start="<%= job.hiringStartDate %>" 
                        data-hiring-end="<%= job.hiringEndDate %>" 
                        data-has-applicants-in-range="<%= job.hasApplicantsInDateRange %>"
                        onclick="redirectToJobPage('<%= job.jobId %>')">
                        <td class="jobTitleCell">
                            <div class="job-title-container">
                                <div class="status-circle"></div>
                                <%= job.jobTitle %>
                            </div>
                        </td>
                        <td><%= job.departmentName %></td>
                        <td><%= job.hiringStartDate %></td>
                        <td><%= job.hiringEndDate %></td>
                        <td class="fixed-width p1-column"><%= job.counts.P1 %></td>
                        <td class="fixed-width"><%= job.counts.P2 %></td>
                        <td class="fixed-width"><%= job.counts.P3 %></td>
                        <td class="fixed-width"><%= job.counts.Offered %></td>
                        <td class="fixed-width"><%= job.counts.Onboarding %></td>
                    </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>
        <button class="set-interview-button" onclick="setInterviewAvailabilities()">Set Interview Availabilities on Calendly</button>

    </div>

    <script>
        // Redirect to Calendly
        function setInterviewAvailabilities() {
            window.open('https://calendly.com/users/40706100/event_types/new/solo?return_to=%2Fevent_types%2Fnew', '_blank');
        }
        
        // Redirect to job position page when a row is clicked
        function redirectToJobPage(jobId) {
            window.location.href = `/linemanager/applicant-tracker-jobposition?jobId=${jobId}`;
        }

        // Filter table based on the department selected from dropdown
        function filterByDepartment() {
            const departmentId = document.getElementById("departmentDropdown").value;
            const rows = document.querySelectorAll(".jobRow");

            rows.forEach(row => {
                if (departmentId === "all" || row.getAttribute("data-department") === departmentId) {
                    row.style.display = "";
                } else {
                    row.style.display = "none";
                }
            });
        }

        // Filter table based on the search input
        function filterTable() {
            const searchInput = document.getElementById("searchBar").value.toLowerCase();
            const table = document.getElementById("applicantTable");
            const rows = table.getElementsByTagName("tr");

            for (let i = 1; i < rows.length; i++) { // Starting from 1 to skip header row
                const cells = rows[i].getElementsByTagName("td");
                let match = false;

                for (let j = 0; j < cells.length; j++) {
                    if (cells[j].innerText.toLowerCase().includes(searchInput)) {
                        match = true;
                        break;
                    }
                }
                rows[i].style.display = match ? "" : "none";
            }
        }

        // Function to check if the current date is within the hiring date range
        function isWithinHiringDates(startDate, endDate) {
            const today = new Date();
            const start = new Date(startDate);
            const end = new Date(endDate);

            return today >= start && today <= end;
        }

        // Adding the color-coded circle next to job titles and highlight P1 column based on hiring date range
        document.addEventListener('DOMContentLoaded', () => {
            const jobRows = document.querySelectorAll('.jobRow');

            jobRows.forEach((row) => {
                const statusCircle = row.querySelector('.status-circle');
                const hiringStartDate = row.getAttribute('data-hiring-start');
                const hiringEndDate = row.getAttribute('data-hiring-end');
                const hasApplicantsInRange = row.getAttribute('data-has-applicants-in-range') === 'true';
                const p1Cell = row.querySelector('.p1-column');

                // Current date check for status circle
                if (isWithinHiringDates(hiringStartDate, hiringEndDate)) {
                    statusCircle.classList.add('green');
                } else {
                    statusCircle.classList.add('gray');
                }
                
                // Check if there are applicants within hiring date range for P1 column
                if (hasApplicantsInRange) {
                    if (p1Cell) {
                        p1Cell.classList.add('active-p1');
                    }
                }
            });
        });

        // NEW: Dashboard Functions - ADD TO YOUR EXISTING SCRIPT
        function loadDashboardStats() {
            // Calculate stats from your existing data
            const rows = document.querySelectorAll('.jobRow');
            let totalPositions = rows.length;
            let totalApplicants = 0;
            let pendingReview = 0;
            let activeHiring = 0;

            rows.forEach(row => {
                // Sum up all applicant counts
                const p1 = parseInt(row.cells[4].textContent) || 0;
                const p2 = parseInt(row.cells[5].textContent) || 0;
                const p3 = parseInt(row.cells[6].textContent) || 0;
                const offered = parseInt(row.cells[7].textContent) || 0;
                const onboarding = parseInt(row.cells[8].textContent) || 0;
                
                totalApplicants += p1 + p2 + p3 + offered + onboarding;
                pendingReview += p2 + p3; // P2 and P3 are pending line manager review
                
                // Check if position is actively hiring
                const hiringStart = new Date(row.cells[2].textContent);
                const hiringEnd = new Date(row.cells[3].textContent);
                const today = new Date();
                
                if (today >= hiringStart && today <= hiringEnd) {
                    activeHiring++;
                }
            });

            // Update dashboard
            document.getElementById('total-positions').textContent = totalPositions;
            document.getElementById('total-applicants').textContent = totalApplicants;
            document.getElementById('pending-review').textContent = pendingReview;
            document.getElementById('active-hiring').textContent = activeHiring;
        }

        // NEW: Report Functions
        function exportAllApplicants() {
            try {
                // Gather data from the table
                const rows = document.querySelectorAll('.jobRow');
                let csvContent = "data:text/csv;charset=utf-8,";
                
                // Add CSV headers
                csvContent += "Job Title,Department,Hiring Start Date,Hiring End Date,P1 Applicants,P2 Applicants,P3 Applicants,Offered,Onboarding,Total Applicants,Status\n";
                
                rows.forEach(row => {
                    // Only include visible rows (respects current filters)
                    if (row.style.display !== 'none') {
                        const jobTitle = row.cells[0].textContent.trim().replace(/\s+/g, ' ');
                        const department = row.cells[1].textContent.trim();
                        const startDate = row.cells[2].textContent.trim();
                        const endDate = row.cells[3].textContent.trim();
                        const p1 = row.cells[4].textContent.trim();
                        const p2 = row.cells[5].textContent.trim();
                        const p3 = row.cells[6].textContent.trim();
                        const offered = row.cells[7].textContent.trim();
                        const onboarding = row.cells[8].textContent.trim();
                        
                        // Calculate total applicants
                        const total = parseInt(p1) + parseInt(p2) + parseInt(p3) + parseInt(offered) + parseInt(onboarding);
                        
                        // Determine status based on hiring dates
                        const status = isWithinHiringDates(startDate, endDate) ? 'Active Hiring' : 'Inactive';
                        
                        // Add row to CSV (escape commas in job titles)
                        const cleanJobTitle = jobTitle.replace(/,/g, ';');
                        csvContent += `"${cleanJobTitle}","${department}","${startDate}","${endDate}",${p1},${p2},${p3},${offered},${onboarding},${total},"${status}"\n`;
                    }
                });
                
                // Create and trigger download
                const encodedUri = encodeURI(csvContent);
                const link = document.createElement("a");
                link.setAttribute("href", encodedUri);
                
                // Generate filename with current date
                const today = new Date();
                const dateStr = today.getFullYear() + '-' + 
                    String(today.getMonth() + 1).padStart(2, '0') + '-' + 
                    String(today.getDate()).padStart(2, '0');
                link.setAttribute("download", `linemanager_applicant_tracking_export_${dateStr}.csv`);
                
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                // Show success message
                showNotification('✅ Export completed! File downloaded successfully.', 'success');
                
            } catch (error) {
                console.error('Export error:', error);
                showNotification('❌ Export failed. Please try again.', 'error');
            }
        }

        function generateStatusReport() {
            try {
                // Calculate comprehensive stats
                const rows = document.querySelectorAll('.jobRow');
                let stats = {
                    totalPositions: 0,
                    activePositions: 0,
                    inactivePositions: 0,
                    totalApplicants: 0,
                    p1Total: 0,
                    p2Total: 0,
                    p3Total: 0,
                    offeredTotal: 0,
                    onboardingTotal: 0,
                    departmentBreakdown: {}
                };
                
                rows.forEach(row => {
                    // Only include visible rows (respects current filters)
                    if (row.style.display !== 'none') {
                        stats.totalPositions++;
                        
                        const department = row.cells[1].textContent.trim();
                        const startDate = row.cells[2].textContent.trim();
                        const endDate = row.cells[3].textContent.trim();
                        const p1 = parseInt(row.cells[4].textContent) || 0;
                        const p2 = parseInt(row.cells[5].textContent) || 0;
                        const p3 = parseInt(row.cells[6].textContent) || 0;
                        const offered = parseInt(row.cells[7].textContent) || 0;
                        const onboarding = parseInt(row.cells[8].textContent) || 0;
                        
                        // Check if position is active
                        if (isWithinHiringDates(startDate, endDate)) {
                            stats.activePositions++;
                        } else {
                            stats.inactivePositions++;
                        }
                        
                        // Add to totals
                        stats.p1Total += p1;
                        stats.p2Total += p2;
                        stats.p3Total += p3;
                        stats.offeredTotal += offered;
                        stats.onboardingTotal += onboarding;
                        stats.totalApplicants += p1 + p2 + p3 + offered + onboarding;
                        
                        // Department breakdown
                        if (!stats.departmentBreakdown[department]) {
                            stats.departmentBreakdown[department] = {
                                positions: 0,
                                applicants: 0
                            };
                        }
                        stats.departmentBreakdown[department].positions++;
                        stats.departmentBreakdown[department].applicants += p1 + p2 + p3 + offered + onboarding;
                    }
                });
                
                // Create and show modal with report
                showStatusReportModal(stats);
                
            } catch (error) {
                console.error('Status report error:', error);
                showNotification('❌ Failed to generate status report. Please try again.', 'error');
            }
        }

        // Helper function to show status report modal
        function showStatusReportModal(stats) {
            // Create modal HTML
            const modalHTML = `
                <div id="statusReportModal" style="
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(0,0,0,0.5);
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    z-index: 1000;
                ">
                    <div style="
                        background: white;
                        border-radius: 10px;
                        padding: 30px;
                        max-width: 600px;
                        width: 90%;
                        max-height: 80vh;
                        overflow-y: auto;
                        box-shadow: 0 10px 30px rgba(0,0,0,0.3);
                    ">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; border-bottom: 2px solid #f8f9fa; padding-bottom: 15px;">
                            <h2 style="margin: 0; color: #124A5C;"><i class="fas fa-chart-pie"></i> Department Status Summary</h2>
                            <button onclick="closeStatusReportModal()" style="
                                background: none;
                                border: none;
                                font-size: 24px;
                                cursor: pointer;
                                color: #6c757d;
                                padding: 5px;
                            ">&times;</button>
                        </div>
                        
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; margin-bottom: 25px;">
                            <div style="text-align: center; padding: 15px; background: linear-gradient(135deg, #124A5C, #1a5f75); color: white; border-radius: 8px;">
                                <div style="font-size: 24px; font-weight: bold;">${stats.totalPositions}</div>
                                <div style="font-size: 12px; opacity: 0.9;">Total Positions</div>
                            </div>
                            <div style="text-align: center; padding: 15px; background: linear-gradient(135deg, #28a745, #20c997); color: white; border-radius: 8px;">
                                <div style="font-size: 24px; font-weight: bold;">${stats.activePositions}</div>
                                <div style="font-size: 12px; opacity: 0.9;">Active Hiring</div>
                            </div>
                            <div style="text-align: center; padding: 15px; background: linear-gradient(135deg, #6c757d, #adb5bd); color: white; border-radius: 8px;">
                                <div style="font-size: 24px; font-weight: bold;">${stats.inactivePositions}</div>
                                <div style="font-size: 12px; opacity: 0.9;">Inactive</div>
                            </div>
                            <div style="text-align: center; padding: 15px; background: linear-gradient(135deg, #fd7e14, #e0a800); color: white; border-radius: 8px;">
                                <div style="font-size: 24px; font-weight: bold;">${stats.totalApplicants}</div>
                                <div style="font-size: 12px; opacity: 0.9;">Total Applicants</div>
                            </div>
                        </div>
                        
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 25px;">
                            <div>
                                <h4 style="color: #124A5C; margin-bottom: 15px;">Application Pipeline</h4>
                                <div style="background: #f8f9fa; padding: 15px; border-radius: 8px;">
                                    <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                                        <span>P1 (Initial):</span>
                                        <strong>${stats.p1Total}</strong>
                                    </div>
                                    <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                                        <span>P2 (HR Interview):</span>
                                        <strong>${stats.p2Total}</strong>
                                    </div>
                                    <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                                        <span>P3 (Final):</span>
                                        <strong>${stats.p3Total}</strong>
                                    </div>
                                    <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                                        <span>Offered:</span>
                                        <strong>${stats.offeredTotal}</strong>
                                    </div>
                                    <div style="display: flex; justify-content: space-between;">
                                        <span>Onboarding:</span>
                                        <strong>${stats.onboardingTotal}</strong>
                                    </div>
                                </div>
                            </div>
                            
                            <div>
                                <h4 style="color: #124A5C; margin-bottom: 15px;">Department Breakdown</h4>
                                <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; max-height: 200px; overflow-y: auto;">
                                    ${Object.entries(stats.departmentBreakdown).map(([dept, data]) => `
                                        <div style="display: flex; justify-content: space-between; margin-bottom: 8px; padding: 5px 0; border-bottom: 1px solid #dee2e6;">
                                            <span style="font-weight: 500;">${dept}:</span>
                                            <span>${data.positions} pos, ${data.applicants} apps</span>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                        </div>
                        
                        <div style="text-align: center; margin-top: 20px;">
                            <button onclick="exportStatusReport(${JSON.stringify(stats).replace(/"/g, '&quot;')})" style="
                                background: #124A5C;
                                color: white;
                                border: none;
                                padding: 10px 20px;
                                border-radius: 5px;
                                cursor: pointer;
                                margin-right: 10px;
                                font-size: 14px;
                            ">
                                <i class="fas fa-download"></i> Export Report
                            </button>
                            <button onclick="closeStatusReportModal()" style="
                                background: #6c757d;
                                color: white;
                                border: none;
                                padding: 10px 20px;
                                border-radius: 5px;
                                cursor: pointer;
                                font-size: 14px;
                            ">
                                Close
                            </button>
                        </div>
                        
                        <div style="margin-top: 15px; padding: 10px; background: #e3f2fd; border-radius: 5px; font-size: 12px; color: #1565c0;">
                            <i class="fas fa-info-circle"></i> Report generated on ${new Date().toLocaleString()} - Data reflects current filters
                        </div>
                    </div>
                </div>
            `;
            
            // Add modal to DOM
            document.body.insertAdjacentHTML('beforeend', modalHTML);
        }

        // Helper function to close status report modal
        function closeStatusReportModal() {
            const modal = document.getElementById('statusReportModal');
            if (modal) {
                modal.remove();
            }
        }

        // Helper function to export status report
        function exportStatusReport(stats) {
            try {
                let csvContent = "data:text/csv;charset=utf-8,";
                csvContent += "Line Manager Department Status Summary Report\n";
                csvContent += `Generated on: ${new Date().toLocaleString()}\n\n`;
                
                csvContent += "Overall Statistics\n";
                csvContent += "Metric,Value\n";
                csvContent += `Total Positions,${stats.totalPositions}\n`;
                csvContent += `Active Positions,${stats.activePositions}\n`;
                csvContent += `Inactive Positions,${stats.inactivePositions}\n`;
                csvContent += `Total Applicants,${stats.totalApplicants}\n\n`;
                
                csvContent += "Application Pipeline\n";
                csvContent += "Stage,Count\n";
                csvContent += `P1 (Initial),${stats.p1Total}\n`;
                csvContent += `P2 (HR Interview),${stats.p2Total}\n`;
                csvContent += `P3 (Final),${stats.p3Total}\n`;
                csvContent += `Offered,${stats.offeredTotal}\n`;
                csvContent += `Onboarding,${stats.onboardingTotal}\n\n`;
                
                csvContent += "Department Breakdown\n";
                csvContent += "Department,Positions,Applicants\n";
                Object.entries(stats.departmentBreakdown).forEach(([dept, data]) => {
                    csvContent += `"${dept}",${data.positions},${data.applicants}\n`;
                });
                
                const encodedUri = encodeURI(csvContent);
                const link = document.createElement("a");
                link.setAttribute("href", encodedUri);
                
                const today = new Date();
                const dateStr = today.getFullYear() + '-' + 
                    String(today.getMonth() + 1).padStart(2, '0') + '-' + 
                    String(today.getDate()).padStart(2, '0');
                link.setAttribute("download", `linemanager_status_summary_report_${dateStr}.csv`);
                
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                showNotification('✅ Status report exported successfully!', 'success');
                closeStatusReportModal();
                
            } catch (error) {
                console.error('Export error:', error);
                showNotification('❌ Export failed. Please try again.', 'error');
            }
        }

        // Helper function to show notifications
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 15px 20px;
                border-radius: 5px;
                color: white;
                font-weight: 500;
                z-index: 1001;
                max-width: 300px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                animation: slideIn 0.3s ease;
            `;
            
            // Set background color based on type
            if (type === 'success') {
                notification.style.background = 'linear-gradient(135deg, #28a745, #20c997)';
            } else if (type === 'error') {
                notification.style.background = 'linear-gradient(135deg, #dc3545, #e74c3c)';
            } else {
                notification.style.background = 'linear-gradient(135deg, #124A5C, #1a5f75)';
            }
            
            notification.innerHTML = message;
            document.body.appendChild(notification);
            
            // Auto remove after 4 seconds
            setTimeout(() => {
                notification.style.animation = 'slideOut 0.3s ease';
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 300);
            }, 4000);
        }

        // Add CSS animations for notifications
        const style = document.createElement('style');
        style.textContent = `
            @keyframes slideIn {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            @keyframes slideOut {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
        `;
        document.head.appendChild(style);

        function openComprehensiveReports() {
            // Navigate to your comprehensive reports page
            window.location.href = '/line-manager/recruitment/reports';
        }

        // MODIFY YOUR EXISTING DOMContentLoaded EVENT TO INCLUDE loadDashboardStats()
        // REPLACE YOUR EXISTING DOMContentLoaded section with this:
        document.addEventListener('DOMContentLoaded', () => {
            const jobRows = document.querySelectorAll('.jobRow');

            jobRows.forEach((row) => {
                const statusCircle = row.querySelector('.status-circle');
                const hiringStartDate = row.getAttribute('data-hiring-start');
                const hiringEndDate = row.getAttribute('data-hiring-end');
                const hasApplicantsInRange = row.getAttribute('data-has-applicants-in-range') === 'true';
                const p1Cell = row.querySelector('.p1-column');

                // Current date check for status circle
                if (isWithinHiringDates(hiringStartDate, hiringEndDate)) {
                    statusCircle.classList.add('green');
                } else {
                    statusCircle.classList.add('gray');
                }
                
                // Check if there are applicants within hiring date range for P1 column
                if (hasApplicantsInRange) {
                    if (p1Cell) {
                        p1Cell.classList.add('active-p1');
                    }
                }
            });

            // NEW: Load dashboard stats when page loads
            loadDashboardStats();
        });

        // MODIFY YOUR EXISTING FILTER FUNCTIONS TO RECALCULATE DASHBOARD STATS
        // Update your existing filterByDepartment function:
        function filterByDepartment() {
            const departmentId = document.getElementById("departmentDropdown").value;
            const rows = document.querySelectorAll(".jobRow");

            rows.forEach(row => {
                if (departmentId === "all" || row.getAttribute("data-department") === departmentId) {
                    row.style.display = "";
                } else {
                    row.style.display = "none";
                }
            });
            
            // NEW: Recalculate stats after filtering
            loadDashboardStats();
        }

        // Update your existing filterTable function:
        function filterTable() {
            const searchInput = document.getElementById("searchBar").value.toLowerCase();
            const table = document.getElementById("applicantTable");
            const rows = table.getElementsByTagName("tr");

            for (let i = 1; i < rows.length; i++) {
                const cells = rows[i].getElementsByTagName("td");
                let match = false;

                for (let j = 0; j < cells.length; j++) {
                    if (cells[j].innerText.toLowerCase().includes(searchInput)) {
                        match = true;
                        break;
                    }
                }
                rows[i].style.display = match ? "" : "none";
            }
            
            // NEW: Recalculate stats after filtering
            loadDashboardStats();
        }

        // Toggle active class for sidebar links
        document.querySelectorAll('.sidebar ul li a').forEach(link => {
            link.addEventListener('click', function() {
                document.querySelectorAll('.sidebar ul li a').forEach(link => link.classList.remove('active'));
                this.classList.add('active');
            });
        });

        // Toggle collapsible content
        document.querySelectorAll('.collapsible-header').forEach(header => {
            header.addEventListener('click', function() {
                var content = this.nextElementSibling;
                if (content.style.display === 'block') {
                    content.style.display = 'none';
                } else {
                    // Hide all other collapsible contents
                    document.querySelectorAll('.collapsible-content').forEach(item => {
                        if (item !== content) {
                            item.style.display = 'none';
                        }
                    });
                    content.style.display = 'block';
                }
            });
        });
        
    </script>
</body>
</html>