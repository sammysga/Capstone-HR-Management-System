<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Profile & Performance Dashboard</title>
    <link rel="stylesheet" href="/css/sidebar.css">
    <link rel="stylesheet" href="/css/hr_pages.css">
    <link rel="stylesheet" href="/css/recordsandperformancetracker.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        /* IDP Form Styles */
.idp-form fieldset {
    border: 1px solid #ddd;
    border-radius: var(--border-radius);
    padding: 20px;
    margin-bottom: 25px;
    background-color: #f9f9f9;
    transition: var(--transition);
}

.idp-form fieldset:hover {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.idp-form legend {
    color: var(--primary-color);
    font-weight: 600;
    padding: 0 15px;
    font-size: 1.1rem;
}

.idp-form label {
    display: block;
    margin-top: 15px;
    margin-bottom: 5px;
    color: var(--primary-color);
}

.idp-form textarea {
    width: 100%;
    padding: 12px;
    border: 1px solid #ddd;
    border-radius: var(--border-radius);
    resize: vertical;
    min-height: 100px;
    font-family: inherit;
    transition: var(--transition);
}

.idp-form textarea:focus {
    border-color: var(--secondary-color);
    box-shadow: 0 0 0 2px rgba(5, 156, 164, 0.2);
    outline: none;
}

.idp-form textarea.error {
    border-color: var(--danger-color);
    background-color: rgba(244, 67, 54, 0.05);
}

.idp-form .submit-button-container {
    margin-top: 30px;
    text-align: right;
}

.idp-form .save-btn {
    background-color: var(--primary-color);
    color: white;
    border: none;
    padding: 12px 25px;
    border-radius: var(--border-radius);
    cursor: pointer;
    font-weight: 500;
    transition: var(--transition);
    display: inline-flex;
    align-items: center;
    gap: 8px;
}

.idp-form .save-btn:hover {
    background-color: var(--secondary-color);
    transform: translateY(-2px);
}

.idp-form .save-btn:disabled {
    background-color: #ccc;
    cursor: not-allowed;
}

/* View-only mode styles */
.view-only-mode fieldset {
    background-color: #f5f7fa;
    border: 1px solid #e1e5eb;
}

.view-only-mode textarea {
    background-color: #f9f9f9;
    border: 1px solid #e1e5eb;
    pointer-events: none;
    color: #555;
}

.view-only-mode .save-btn {
    display: none;
}

/* Last updated info for view-only mode */
.last-updated-info {
    margin-top: 20px;
    font-style: italic;
    color: #777;
    text-align: right;
    font-size: 0.9em;
}

/* Progress indicator for IDP forms */
.idp-progress {
    margin-bottom: 20px;
    padding: 15px;
    background-color: #f5f7fa;
    border-radius: var(--border-radius);
    border-left: 4px solid var(--primary-color);
}

.idp-progress h3 {
    margin-top: 0;
    font-size: 1.1rem;
    color: var(--primary-color);
}

.progress-bar-container {
    width: 100%;
    height: 10px;
    background-color: #e0e0e0;
    border-radius: 5px;
    margin-top: 10px;
}

.progress-bar {
    height: 100%;
    background-color: var(--secondary-color);
    border-radius: 5px;
    transition: width 0.5s ease;
}

/* Tooltip styles for required fields */
.tooltip {
    position: relative;
    display: inline-block;
    margin-left: 5px;
    cursor: help;
}

.tooltip .tooltip-icon {
    color: var(--primary-color);
    font-size: 0.8em;
}

.tooltip .tooltip-text {
    visibility: hidden;
    width: 200px;
    background-color: #333;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px;
    position: absolute;
    z-index: 1;
    bottom: 125%;
    left: 50%;
    margin-left: -100px;
    opacity: 0;
    transition: opacity 0.3s;
}

.tooltip:hover .tooltip-text {
    visibility: visible;
    opacity: 1;
}
        /* New modern styling */
        :root {
            --primary-color: #124A5C;
            --secondary-color: #059ca4;
            --accent-color: #f4a261;
            --light-color: #f9f9f9;
            --dark-color: #2a2a2a;
            --success-color: #4CAF50;
            --warning-color: #ff9800;
            --danger-color: #f44336;
            --border-radius: 8px;
            --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f5f7fa;
            margin: 0;
            padding: 0;
        }

        .main-content {
            padding: 20px;
            margin-left: 250px; /* Adjust based on your sidebar width */
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        /* Card styling */
        .section {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 20px;
            margin-bottom: 25px;
            transition: var(--transition);
        }

        .section:hover {
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
        }

        /* Headers */
        h2 {
            color: var(--primary-color);
            border-bottom: 2px solid var(--secondary-color);
            padding-bottom: 10px;
            margin-bottom: 20px;
            font-weight: 600;
            font-size: 1.4rem;
        }

        /* Profile section */
        .profile-container {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            background: linear-gradient(to right, rgba(18, 74, 92, 0.1), rgba(5, 156, 164, 0.05));
            padding: 15px;
            border-radius: var(--border-radius);
        }

        .profile-pic {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            object-fit: cover;
            border: 3px solid white;
            box-shadow: var(--box-shadow);
            margin-right: 20px;
        }

        .profile-info {
            flex: 1;
        }

        .profile-info h3 {
            margin: 0;
            font-size: 1.6rem;
            color: var(--primary-color);
        }

        .profile-info p {
            margin: 5px 0;
            color: #555;
        }

        /* Columns layout */
        .columns {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }

        @media (max-width: 992px) {
            .columns {
                grid-template-columns: 1fr 1fr;
            }
        }

        @media (max-width: 768px) {
            .columns {
                grid-template-columns: 1fr;
            }
            
            .main-content {
                margin-left: 0;
                padding: 15px;
            }
        }

        /* Info items */
        .info-item {
            margin-bottom: 12px;
            display: flex;
            align-items: baseline;
        }

        .info-item strong {
            min-width: 140px;
            display: inline-block;
            color: var(--primary-color);
        }

        /* Milestone styling */
        .milestone-container {
            margin-top: 15px;
            position: relative;
            padding-left: 30px;
            border-left: 2px solid var(--primary-color);
        }

        .milestone {
            position: relative;
            margin-bottom: 25px;
            padding-left: 15px;
        }

        .milestone:before {
            content: '';
            position: absolute;
            left: -16px;
            top: 0;
            width: 30px;
            height: 30px;
            background-color: var(--primary-color);
            border-radius: 50%;
            box-shadow: 0 0 0 5px rgba(18, 74, 92, 0.2);
        }

        .milestone-label {
            padding: 15px;
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            border-left: 4px solid var(--primary-color);
        }

        .milestone-label h4 {
            margin: 0 0 8px 0;
            font-size: 1.1em;
            color: var(--primary-color);
        }

        .milestone-label p {
            margin: 0;
            font-size: 1em;
            color: #333;
        }

        .milestone-label small {
            display: block;
            margin-top: 8px;
            color: #777;
            font-style: italic;
        }

        /* Cards for certifications, degrees, experiences */
        .card-item {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 15px;
            margin-bottom: 15px;
            border-left: 4px solid var(--primary-color);
            transition: var(--transition);
        }

        .degree-item:hover, .experience-item:hover, .certification-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }

        .degree-item h4, .experience-item h4, .certification-item h4 {
            margin: 0 0 8px 0;
            color: var(--primary-color);
            font-size: 1.1rem;
        }

        .degree-item p, .experience-item p, .certification-item p {
            margin: 0;
            color: #555;
        }

        /* Table styling */
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
            background-color: white;
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: var(--box-shadow);
        }

        thead {
            background-color: var(--primary-color);
            color: white;
        }

        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        tbody tr:hover {
            background-color: rgba(18, 74, 92, 0.05);
        }

        /* Stepper styling */
        .stepper {
            margin-top: 30px;
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 20px;
        }

        .stepper-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        .stepper-container {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            justify-content: space-between;
        }

        .step {
            flex: 1;
            min-width: 200px;
            background-color: #f9f9f9;
            border-radius: var(--border-radius);
            padding: 15px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            display: flex;
            flex-direction: column;
            align-items: center;
            transition: var(--transition);
            cursor: pointer;
        }

        .step:hover {
            background-color: rgba(18, 74, 92, 0.1);
        }

        .step.accessible {
            background-color: rgba(76, 175, 80, 0.1);
            border: 1px solid rgba(76, 175, 80, 0.3);
        }

        .step.disabled {
            background-color: #f1f1f1;
            color: #999;
            cursor: not-allowed;
            opacity: 0.7;
        }

        .step-icon {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background-color: var(--primary-color);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 10px;
            font-size: 1.5rem;
        }

        .step-label {
            text-align: center;
            font-weight: 500;
        }

        .view-only .step-icon {
            background-color: var(--secondary-color);
        }

        /* Form styling */
        input[type="text"],
        input[type="number"],
        input[type="date"],
        select,
        textarea {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
            font-family: inherit;
            font-size: 1rem;
        }

        button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: var(--transition);
        }

        button:hover {
            background-color: var(--secondary-color);
        }

        .add-btn {
            background-color: var(--success-color);
        }

        .save-btn {
            background-color: var(--primary-color);
        }

        .cancel-btn {
            background-color: var(--danger-color);
        }

        /* Animation classes */
        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }

        .fade-out {
            animation: fadeOut 0.5s ease-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes fadeOut {
            from { opacity: 1; transform: translateY(0); }
            to { opacity: 0; transform: translateY(10px); }
        }
        
        /* Custom styling for forms */
        fieldset {
            border: 1px solid #ddd;
            border-radius: var(--border-radius);
            padding: 15px;
            margin-bottom: 20px;
        }
        
        legend {
            color: var(--primary-color);
            font-weight: 600;
            padding: 0 10px;
        }
        
        textarea {
            min-height: 80px;
            resize: vertical;
        }
        
        /* Custom checkbox styling */
        input[type="checkbox"] {
            width: 18px;
            height: 18px;
            margin-right: 8px;
            vertical-align: middle;
        }

        /* Header grid */
        .header-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-template-rows: repeat(2, auto);
            gap: 10px;
            text-align: left;
            font-size: 1em;
            margin-bottom: 20px;
            padding: 15px;
            background-color: #f9f9f9;
            border-radius: var(--border-radius);
        }

        .header-grid div {
            padding: 5px;
            font-weight: normal;
        }

        .header-grid strong {
            font-weight: bold;
            color: var(--primary-color);
        }
    </style>
</head>

<body>
    <%- include('../../partials/linemanager_partials') %>

    <!-- Main content area -->
    <div class="main-content">
        <div class="container">
            <!-- Profile header section -->
            <div class="profile-container">
                <img src="/images/profile.png" alt="Profile Picture" class="profile-pic">
                <div class="profile-info">
                    <h3><%= user.firstName %> <%= user.lastName %></h3>
                    <p><%= user.jobTitle %>, <%= user.departmentName %></p>
                    <p><i class="fas fa-envelope"></i> <%= user.userEmail || 'No email available' %></p>
                </div>
            </div>
        
            <div class="columns">
                <!-- Column 1: Personal Information -->
                <div class="column" id="personal-info">
                    <div class="section">
                        <h2><i class="fas fa-user"></i> Personal Information</h2>
                        <div class="info-item">
                            <strong>Phone:</strong> <span><%= user.phoneNumber || 'Not provided' %></span>
                        </div>
                        <div class="info-item">
                            <strong>Date of Birth:</strong> <span><%= user.dateOfBirth ? new Date(user.dateOfBirth).toLocaleDateString() : 'Not provided' %></span>
                        </div>
                        <div class="info-item">
                            <strong>Emergency Contact:</strong> 
                            <span><%= user.emergencyContactName || 'Not provided' %> 
                            <%= user.emergencyContactNumber ? `(${user.emergencyContactNumber})` : '' %></span>
                        </div>
                    </div>
                    <div class="section">
                        <h2><i class="fas fa-briefcase"></i> Employment Details</h2>
                        <div class="info-item">
                            <strong>Job Title:</strong> <span><%= user.jobTitle || 'Not assigned' %></span>
                        </div>
                        <div class="info-item">
                            <strong>Department:</strong> <span><%= user.departmentName || 'Not assigned' %></span>
                        </div>
                        <div class="info-item">
                            <strong>Employment Type:</strong> <span><%= user.employmentType || 'Not specified' %></span>
                        </div>
                        <div class="info-item">
                            <strong>Hire Date:</strong> <span><%= user.hireDate ? new Date(user.hireDate).toLocaleDateString() : 'Not provided' %></span>
                        </div>
                    </div>
                </div>
        
                <!-- Column 2: Career Progression -->
                <div class="column" id="career-progression">
                    <div class="section">
                        <h2><i class="fas fa-chart-line"></i> Career Progression</h2>
                        <div class="milestone-container">
                            <% if (user.milestones && user.milestones.length > 0) { %>
                                <% user.milestones.forEach((milestone, index) => { %>
                                    <div class="milestone">
                                        <div class="milestone-label">
                                            <h4>Milestone <%= index + 1 %></h4>
                                            <p><%= milestone.milestoneName %></p>
                                            <small>
                                                <%= new Date(milestone.startDate).toLocaleDateString() %> 
                                                <% if (milestone.endDate) { %> 
                                                    - <%= new Date(milestone.endDate).toLocaleDateString() %>
                                                <% } else { %>
                                                    - Present
                                                <% } %>
                                            </small>
                                        </div>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <div class="milestone">
                                    <div class="milestone-label">
                                        <p>No career progression milestones available.</p>
                                    </div>
                                </div>
                            <% } %>
                        </div>
                    </div>
                </div>
        
                <!-- Column 3: Degrees, Experiences, and Certifications -->
                <div class="column" id="degree-experience-certifications">
                    <div class="section">
                        <h2><i class="fas fa-graduation-cap"></i> Education</h2>
                        <% if (user.degrees && user.degrees.length > 0) { %>
                            <% user.degrees.forEach((degree) => { %>
                                <div class="degree-item card-item">
                                    <h4><%= degree.degreeName %></h4>
                                    <p><%= degree.universityName %></p>
                                    <p><small>Graduation Year: <%= degree.graduationYear %></small></p>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <p>No degree information available.</p>
                        <% } %>
                    </div>
        
                    <div class="section">
                        <h2><i class="fas fa-history"></i> Work Experience</h2>
                        <% if (user.experiences && user.experiences.length > 0) { %>
                            <% user.experiences.forEach((experience) => { %>
                                <div class="experience-item card-item">
                                    <h4><%= experience.companyName %></h4>
                                    <p><small>
                                        <%= new Date(experience.startDate).toLocaleDateString() %> 
                                        <% if (experience.endDate) { %> 
                                            - <%= new Date(experience.endDate).toLocaleDateString() %>
                                        <% } else { %>
                                            - Present
                                        <% } %>
                                    </small></p>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <p>No experience information available.</p>
                        <% } %>
                    </div>
        
                    <div class="section">
                        <h2><i class="fas fa-certificate"></i> Certifications</h2>
                        <% if (user.certifications && user.certifications.length > 0) { %>
                            <% user.certifications.forEach((certification) => { %>
                                <div class="certification-item card-item">
                                    <h4><%= certification.certificateName %></h4>
                                    <p><small>Issued: <%= new Date(certification.certDate).toLocaleDateString() %></small></p>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <p>No certification information available.</p>
                        <% } %>
                    </div>
                </div>
            </div>
            
            <!-- Attendance Logs Section -->
            <section id="attendance-logs" class="section">
                <h2><i class="fas fa-calendar-check"></i> Weekly Attendance Logs</h2>
                <table>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Date</th>
                            <th>Department</th>
                            <th>Position</th>
                            <th>Time In</th>
                            <th>Time Out</th>
                            <th>Hours</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (user.attendance && user.attendance.length > 0) { %>
                            <% user.attendance.forEach(log => { %>
                                <tr>
                                    <td><%= log.firstName %> <%= log.lastName %></td>
                                    <td><%= log.date %></td>
                                    <td><%= log.department %></td>
                                    <td><%= log.jobTitle %></td>
                                    <td><%= log.timeIn %></td>
                                    <td><%= log.timeOut %></td>
                                    <td><%= log.activeWorkingHours %></td>
                                </tr>
                            <% }) %>
                        <% } else { %>
                            <tr>
                                <td colspan="7" style="text-align: center;">No attendance logs available.</td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </section>
            
            <!-- Performance Tracker Section -->
            <section class="stepper section">
                <div class="stepper-header">
                    <h2><i class="fas fa-tasks"></i> Objective and Performance Review Tracker</h2>
                    <section class="year-filter">
                        <label for="yearSelect">Select Year:</label>
                        <select id="yearSelect" onchange="fetchYearData()">
                            <option value="">-- Select Year --</option>
                            <% for (let year of viewState.years) { %>
                                <option value="<%= year %>" <%= year === viewState.selectedYear ? 'selected' : '' %>><%= year %></option>
                            <% } %>
                        </select>
                    </section>
                </div>
                <div class="stepper-container">
                    <!-- Objective Setting -->
                    <div class="step <%= viewState.viewOnlyStatus['objectivesettings'] ? 'view-only' : 'accessible' %>" id="objectivesButton">
                        <div class="step-icon"><i class="fa fa-bullseye"></i></div>
                        <div class="step-label">
                            Objective Setting
                            <% if (viewState.viewOnlyStatus['objectivesettings']) { %>
                                <span class="status-badge">(View-Only)</span>
                            <% } else { %>
                                <span class="status-badge">(Editable)</span>
                            <% } %>
                        </div>
                    </div>
            
                    <!-- Feedback Q1 -->
                    <div class="step <%= (viewState.submittedObjectives && viewState.submittedObjectives.length > 0) ? 'accessible' : 'disabled' %>" id="feedbackButtonQ1" data-quarter="1" onclick="showFeedbackForm()">
                        <div class="step-icon"><i class="fa fa-users"></i></div>
                        <div class="step-label">
                            Q1 Feedback
                            <% if (viewState.viewOnlyStatus['feedbacks_Q1']) { %>
                                <span class="status-badge">(View-Only)</span>
                            <% } else { %>
                                <span class="status-badge">(Editable)</span>
                            <% } %>
                        </div>
                        <% if (!(viewState.submittedObjectives && viewState.submittedObjectives.length > 0)) { %>
                            <div class="notice">Submit objectives first</div>
                        <% } %>
                    </div>
            
                    <!-- Feedback Q2 -->
                    <div class="step <%= (viewState.submittedObjectives && viewState.submittedObjectives.length > 0 && viewState.viewOnlyStatus['feedbacks_Q1']) ? 'accessible' : 'disabled' %>" id="feedbackButtonQ2" data-quarter="2" onclick="showFeedbackForm()">
                        <div class="step-icon"><i class="fa fa-users"></i></div>
                        <div class="step-label">
                            Q2 Feedback
                            <% if (viewState.viewOnlyStatus['feedbacks_Q2']) { %>
                                <span class="status-badge">(View-Only)</span>
                            <% } else { %>
                                <span class="status-badge">(Editable)</span>
                            <% } %>
                        </div>
                    </div>
            
                    <!-- Mid-Year IDP -->
                    <div class="step <%= (viewState.submittedObjectives && viewState.submittedObjectives.length > 0 && viewState.viewOnlyStatus['feedbacks_Q2']) ? 'accessible' : 'disabled' %>" id="midYearIDP">
                        <div class="step-icon"><i class="fa fa-clipboard-check"></i></div>
                        <div class="step-label">
                            Mid-Year IDP
                            <% if (viewState.viewOnlyStatus.midyearidp) { %>
                                <span class="status-badge">(View-Only)</span>
                            <% } else { %>
                                <span class="status-badge">(Editable)</span>
                            <% } %>
                        </div>
                    </div>
            
                    <!-- Feedback Q3 -->
                    <div class="step <%= (viewState.submittedObjectives && viewState.submittedObjectives.length > 0 && viewState.viewOnlyStatus['feedbacks_Q2'] && viewState.viewOnlyStatus['feedbacks_Q1']) ? 'accessible' : 'disabled' %>" id="feedbackButtonQ3" data-quarter="3" onclick="showFeedbackForm()">
                        <div class="step-icon"><i class="fa fa-users"></i></div>
                        <div class="step-label">
                            Q3 Feedback
                            <% if (viewState.viewOnlyStatus['feedbacks_Q3']) { %>
                                <span class="status-badge">(View-Only)</span>
                            <% } else { %>
                                <span class="status-badge">(Editable)</span>
                            <% } %>
                        </div>
                    </div>
            
                    <!-- Feedback Q4 -->
                    <div class="step <%= (viewState.submittedObjectives && viewState.submittedObjectives.length > 0 && viewState.viewOnlyStatus['feedbacks_Q3'] && viewState.viewOnlyStatus['feedbacks_Q2'] && viewState.viewOnlyStatus['feedbacks_Q1']) ? 'accessible' : 'disabled' %>" id="feedbackButtonQ4" data-quarter="4" onclick="showFeedbackForm()">
                        <div class="step-icon"><i class="fa fa-users"></i></div>
                        <div class="step-label">
                            Q4 Feedback
                            <% if (viewState.viewOnlyStatus['feedbacks_Q4']) { %>
                                <span class="status-badge">(View-Only)</span>
                            <% } else { %>
                                <span class="status-badge">(Editable)</span>
                            <% } %>
                        </div>
                    </div>
            
                    <!-- Final-Year IDP -->
                    <div class="step <%= (viewState.submittedObjectives && viewState.submittedObjectives.length > 0 && viewState.viewOnlyStatus['feedbacks_Q4']) ? 'accessible' : 'disabled' %>" id="finalYearIDP">
                        <div class="step-icon"><i class="fa fa-clipboard-check"></i></div>
                        <div class="step-label">
                            Final-Year IDP
                            <% if (viewState.viewOnlyStatus.finalyearidp) { %>
                                <span class="status-badge">(View-Only)</span>
                            <% } else { %>
                                <span class="status-badge">(Editable)</span>
                            <% } %>
                        </div>
                    </div>
                </div>
            </section>
            
            <!-- Form for setting objectives -->
            <form id="objectiveSettingsForm" method="POST" action="/linemanager/records-performance-tracker/<%= user.userId %>">
                <section id="objective-skill-progress-form" class="fade-out section" style="display: none;">
                    <h2>Annual Objective Setting Form</h2>
                    
                    <div class="header-grid">
                        <div><strong>Employee:</strong> <%= user.lastName %>, <%= user.firstName %></div>
                        <div><strong>Position:</strong> <%= user.jobTitle %></div>
                        <div><strong>Year:</strong> <span id="performanceDate"><%= new Date().getFullYear() %></span></div>
                        <div><strong>Company:</strong> Prime Infrastructure</div>
                        <div><strong>Department:</strong> <%= user.departmentName %></div>
                    </div>
                    
                    <input type="hidden" name="userId" value="<%= user.userId %>">
                    <input type="hidden" id="jobId" name="jobId" value="<%= user.jobId %>">
                    <input type="hidden" id="departmentId" name="departmentId" value="<%= user.departmentId %>">
                    
                    <table>
                        <thead>
                            <tr>
                                <th>KRA/Objectives</th>
                                <th>KPI</th>
                                <th>Target</th>
                                <th>UOM</th>
                                <th>Weight</th>
                                <th>Actions</th>
                            </tr>
                            <tr>
                                <th colspan="6" style="background-color: #f9f9f9; font-weight: normal; text-align: center; font-style: italic;">
                                    Example: "Improve Customer Satisfaction" | "Satisfaction Rate" | "90" | "%" | "20"
                                </th>
                            </tr>
                        </thead>
                        <tbody id="progress-table-body">
                            <tr>
                                <td><input type="text" placeholder="Enter Objective" name="objectiveDescrpt" required></td>
                                <td><input type="text" placeholder="Enter KPI" name="objectiveKPI" required></td>
                                <td><input type="text" placeholder="Enter Target" name="objectiveTarget" required></td>
                                <td><input type="text" placeholder="Enter UOM" name="objectiveUOM" required></td>
                                <td><input type="number" class="weight-input" oninput="updateTotalWeight()" placeholder="Weight %" name="objectiveAssignedWeight" min="0" max="100" required></td>
                                <td><button type="button" class="cancel-btn" onclick="removeRow(this)">Remove</button></td>
                            </tr>
                        </tbody>
                    </table>
                    
                    <button id="addRowBtn" type="button" class="add-btn" onclick="addRow()">
                        <i class="fas fa-plus"></i> Add Objective
                    </button>
                    
                    <div class="weight-summary" style="margin: 15px 0; padding: 10px; background-color: #f9f9f9; border-radius: 8px; border-left: 4px solid #124A5C;">
                        <strong>Total Assigned Weight:</strong> 
                        <span id="totalWeightDisplay">0</span>% <span style="color: #f44336; font-size: 0.9em;">(must equal 100%)</span>
                        <input id="totalWeight" type="hidden" value="0">
                    </div>
            
                    <div class="confirmation-box" style="margin: 20px 0; padding: 15px; background-color: rgba(76, 175, 80, 0.1); border-radius: 8px; border: 1px solid rgba(76, 175, 80, 0.3);">
                        <label style="display: flex; align-items: center; cursor: pointer;">
                            <input type="checkbox" id="confirmationCheckbox" required style="margin-right: 10px;">
                            <span>I confirm that the objective weights have been accurately consolidated and reviewed.</span>
                        </label>
                    </div>
                    
                    <div id="submitButtonContainer">
                        <button id="saveButton" type="submit" class="save-btn">
                            <i class="fas fa-save"></i> Save Objectives
                        </button>
                    </div>
                </section>
            
                <% if (viewState.viewOnlyStatus['objectivesettings']) { %>
                    <section id="view-only-page" class="fade-out section" style="display: none;">
                        <h2><i class="fas fa-clipboard-list"></i> Submitted Annual Objective Setting Form</h2>
                        <div class="header-grid">
                            <div><strong>Employee:</strong> <%= user.lastName %>, <%= user.firstName %></div>
                            <div><strong>Position:</strong> <%= user.jobTitle %></div>
                            <div><strong>Performance Year:</strong> <%= viewState.performancePeriodYear %></div>
                            <div><strong>Company:</strong> Prime Infrastructure</div>
                            <div><strong>Department:</strong> <%= user.departmentName %></div>
                        </div>
                        
                        <div id="objectivesData" class="view-only-section">
                            <table>
                                <thead>
                                    <tr>
                                        <th>KRA/Objectives</th>
                                        <th>KPI</th>
                                        <th>Target</th>
                                        <th>UOM</th>
                                        <th>Assigned Weight</th>
                                    </tr>
                                </thead>
                                <tbody id="view-only-table-body">
                                    <% if (viewState.submittedObjectives && viewState.submittedObjectives.length > 0) { %>
                                        <% viewState.submittedObjectives.forEach(obj => { %>
                                            <tr>
                                                <td><%= obj.objectiveDescrpt || 'N/A' %></td>
                                                <td><%= obj.objectiveKPI || 'N/A' %></td>
                                                <td><%= obj.objectiveTarget || 'N/A' %></td>
                                                <td><%= obj.objectiveUOM || 'N/A' %></td>
                                                <td><%= obj.objectiveAssignedWeight !== undefined ? (obj.objectiveAssignedWeight * 100).toFixed(2) + '%' : 'N/A' %></td>
                                            </tr>
                                        <% }); %>
                                    <% } else { %>
                                        <tr>
                                            <td colspan="5" style="text-align: center; padding: 20px;">No objectives submitted yet.</td>
                                        </tr>
                                    <% } %>
                                </tbody>
                            </table>
                        </div>
                    </section>
                <% } %>
            
                <div id="viewState" data-viewstate='<%= JSON.stringify(viewState) %>' style="display:none;"></div>
            </form>

            <!-- 360 Degree Feedback Form -->
<form id="feedbackForm" method="POST" action="/linemanager/records-performance-tracker/questionnaire/<%= user.userId %>">                
    <section id="feedback-section" class="fade-out section" style="display: none;">
        <input type="hidden" id="userId" value="<%= user.userId %>">
        <!-- Add the buttons container -->
        <div class="feedback-view-buttons" style="display: flex; gap: 15px; margin-bottom: 20px;">
            <button type="button" id="viewQuestionnaireBtn" class="primary-btn" style="flex: 1; background-color: var(--primary-color); color: white; border: none; padding: 12px 15px; border-radius: var(--border-radius); cursor: pointer; font-weight: 500; display: flex; align-items: center; justify-content: center; gap: 8px;">
                <i class="fas fa-list-ul"></i> View Questionnaire
            </button>
            <button type="button" id="viewFeedbackBtn" class="secondary-btn" style="flex: 1; background-color: var(--secondary-color); color: white; border: none; padding: 12px 15px; border-radius: var(--border-radius); cursor: pointer; font-weight: 500; display: flex; align-items: center; justify-content: center; gap: 8px;">
                <i class="fas fa-comments"></i> View Feedback
            </button>
        </div>
        
        <!-- Questionnaire content container -->
        <div id="questionnaireContent">
            <div class="form-header">
                <h2><i class="fas fa-comment-dots"></i> 360 Degree Feedback Questionnaire</h2>
                <div class="date-inputs" style="display: flex; gap: 20px; margin-bottom: 20px;">
                    <!-- Start Date -->
                    <div class="date-input" style="flex: 1;">
                        <label for="startDate"><strong>Start Date:</strong></label>
                        <% 
                        const feedbackQ1 = viewState.feedbacks.feedbacks_Q1; // Access feedbacks for Q1
                        const currentDate = new Date();
                        let startDate = '';
                        let endDate = '';
                        let isViewOnly = false;
    
                        if (feedbackQ1 && feedbackQ1.length > 0) { 
                            const feedback = feedbackQ1[0]; 
                            startDate = feedback.setStartDate;
                            endDate = feedback.setEndDate;
                            isViewOnly = true; // Set to view only after submission
                        } 
                        %>
                        <% if (isViewOnly) { %>
                            <span class="date-display"><%= startDate %></span> <!-- Display as text if view-only -->
                        <% } else { %>
                            <input type="date" id="startDate" name="startDate" class="input-field" 
                                   value="<%= startDate %>" required>
                        <% } %>
                    </div>
    
                    <!-- End Date -->
                    <div class="date-input" style="flex: 1;">
                        <label for="endDate"><strong>End Date:</strong></label>
                        <% if (isViewOnly) { %>
                            <span class="date-display"><%= endDate %></span> <!-- Display as text if view-only -->
                        <% } else { %>
                            <input type="date" id="endDate" name="endDate" class="input-field" 
                                   value="<%= endDate %>" required>
                        <% } %>
                    </div>
                </div>
            </div>
    
            <!-- Instructions Card -->
            <div class="instructions-card" style="background-color: #f9f9f9; border-radius: 8px; padding: 20px; margin-bottom: 20px; border-left: 4px solid #124A5C;">
                <h3 style="margin-top: 0;"><i class="fas fa-info-circle"></i> Instructions</h3>
                <p><strong>Setting Start and End Date:</strong> When creating a 360-degree feedback questionnaire, it is essential to set a start and end date. This schedule will automatically notify employees through the system, ensuring that they are aware of the timeframe for providing feedback.</p>
                
                <p><strong>Setting of Guide Questions:</strong> The Line Manager should prepare guide questions that support co-employees in providing both qualitative and quantitative feedback for each role-specific objective. Additionally, employees will rate the hard and soft skills required for the job, offering qualitative comments and quantitative scores. These structured questions enable clear, measurable evaluations and ensure alignment with the objectives being tracked.</p>                    
            </div>
    
            <div class="employee-details" style="background-color: rgba(18, 74, 92, 0.05); border-radius: 8px; padding: 15px; margin-bottom: 20px;">
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                    <div><strong>Employee:</strong> <%= user.lastName %>, <%= user.firstName %></div>
                    <div><strong>Position:</strong> <%= user.jobTitle %></div>
                    <div><strong>Company:</strong> Prime Infrastructure</div>
                    <div><strong>Department:</strong> <%= user.departmentName %></div>
                </div>
            </div>
            
            <hr class="divider" style="border: 0; height: 1px; background-color: #ddd; margin: 20px 0;" />
            
            <h3 style="color: #124A5C;"><i class="fas fa-bullseye"></i> Objective Setting Questions</h3>
            
            <table>
                <thead>
                    <tr>
                        <th>KRA/Objectives</th>
                        <th>KPI</th>
                        <th>Target</th>
                        <th>UOM</th>
                        <th>Weight</th>
                    </tr>
                </thead>
                <tbody id="feedback-table-body">
                    <!-- Dynamic feedback rows will be added here by JavaScript -->
                </tbody>
            </table>
    
            <!-- Hard Skills Section -->
            <h3 style="color: #124A5C; margin-top: 30px;"><i class="fas fa-cogs"></i> Hard Skills</h3>
            <table id="hardSkillsTable">
                <thead>
                    <tr>
                        <th>Skill Name</th>
                    </tr>
                </thead>
                <tbody id="hard-skills-table-body">
                    <!-- Hard skill rows will be dynamically inserted here -->
                </tbody>
            </table>
            
            <!-- Soft Skills Section -->
            <h3 style="color: #124A5C; margin-top: 30px;"><i class="fas fa-comments"></i> Soft Skills</h3>
            <table id="softSkillsTable">
                <thead>
                    <tr>
                        <th>Skill Name</th>
                    </tr>
                </thead>
                <tbody id="soft-skills-table-body">
                    <!-- Soft skill rows will be dynamically inserted here -->
                </tbody>
            </table>
            
            <div style="margin-top: 30px; text-align: right;">
                <button id="save360DegreeFeedback" type="submit" class="save-btn" <%= isViewOnly ? 'disabled' : '' %>>
                    <i class="fas fa-save"></i> Save Questionnaire
                </button>
            </div>
        </div>
        
        <!-- Feedback responses container (initially hidden) -->
        <div id="feedbackContent" style="display: none;">
            <div class="form-header">
                <h2><i class="fas fa-comment-dots"></i> 360 Degree Feedback Responses</h2>
            </div>
            
            <!-- Feedback response tabs -->
            <div class="feedback-tabs" style="margin-bottom: 20px; border-bottom: 1px solid #ddd;">
                <div style="display: flex; gap: 5px;">
                    <button type="button" id="summaryTab" class="tab-button active" style="padding: 12px 20px; background-color: var(--primary-color); color: white; border: none; border-radius: 8px 8px 0 0; cursor: pointer; font-weight: 500;">
                        <i class="fas fa-chart-pie"></i> Summary
                    </button>
                    <button type="button" id="answersTab" class="tab-button" style="padding: 12px 20px; background-color: #f1f1f1; color: #333; border: none; border-radius: 8px 8px 0 0; cursor: pointer; font-weight: 500;">
                        <i class="fas fa-list-alt"></i> Individual Answers
                    </button>
                </div>
            </div>
            
            <!-- Summary content -->
            <div id="summaryContent">
                <div class="feedback-stats" style="background-color: #f5f7fa; border-radius: 8px; padding: 20px; margin-bottom: 25px; border-left: 4px solid var(--secondary-color);">
                    <h3 style="margin-top: 0;"><i class="fas fa-chart-bar"></i> Feedback Summary</h3>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-top: 15px;">
                        <div class="stat-card" style="background-color: white; padding: 15px; border-radius: 6px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                            <h4 style="margin-top: 0; color: var(--primary-color);">Total Responses</h4>
                            <p style="font-size: 24px; font-weight: bold; margin: 5px 0 0 0;" id="totalResponses">-</p>
                        </div>
                        <div class="stat-card" style="background-color: white; padding: 15px; border-radius: 6px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                            <h4 style="margin-top: 0; color: var(--primary-color);">Average Rating</h4>
                            <p style="font-size: 24px; font-weight: bold; margin: 5px 0 0 0;" id="averageRating">-</p>
                        </div>
                        <div class="stat-card" style="background-color: white; padding: 15px; border-radius: 6px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                            <h4 style="margin-top: 0; color: var(--primary-color);">Completion Rate</h4>
                            <p style="font-size: 24px; font-weight: bold; margin: 5px 0 0 0;" id="completionRate">-</p>
                        </div>
                    </div>
                </div>
                
                <h3 style="color: #124A5C;"><i class="fas fa-bullseye"></i> Objective Feedback</h3>
                <div id="objectiveFeedbackContainer">
                    <!-- Objective feedback will be loaded here -->
                    <div class="empty-state" style="text-align: center; padding: 30px; background-color: #f9f9f9; border-radius: 8px;">
                        <i class="fas fa-inbox" style="font-size: 48px; color: #ccc; margin-bottom: 15px;"></i>
                        <p>No feedback responses available yet.</p>
                    </div>
                </div>
                
                <h3 style="color: #124A5C; margin-top: 30px;"><i class="fas fa-cogs"></i> Skills Feedback</h3>
                <div id="skillsFeedbackContainer">
                    <!-- Skills feedback will be loaded here -->
                    <div class="empty-state" style="text-align: center; padding: 30px; background-color: #f9f9f9; border-radius: 8px;">
                        <i class="fas fa-inbox" style="font-size: 48px; color: #ccc; margin-bottom: 15px;"></i>
                        <p>No skills feedback responses available yet.</p>
                    </div>
                </div>
            </div>
            
            <!-- Individual answers content (initially hidden) -->
            <div id="answersContent" style="display: none;">
                <div class="filter-bar" style="background-color: #f5f7fa; border-radius: 8px; padding: 15px; margin-bottom: 20px; display: flex; gap: 15px; flex-wrap: wrap; align-items: center;">
                    <div>
                        <label for="responderFilter" style="font-weight: 500; margin-right: 8px; color: var(--primary-color);">Filter by:</label>
                        <select id="responderFilter" style="padding: 8px; border: 1px solid #ddd; border-radius: 4px; background-color: white;">
                            <option value="all">All Responders</option>
                            <option value="peer">Peers</option>
                            <option value="direct">Direct Reports</option>
                            <option value="manager">Managers</option>
                        </select>
                    </div>
                    <div>
                        <label for="questionFilter" style="font-weight: 500; margin-right: 8px; color: var(--primary-color);">Question:</label>
                        <select id="questionFilter" style="padding: 8px; border: 1px solid #ddd; border-radius: 4px; background-color: white;">
                            <option value="all">All Questions</option>
                            <option value="obj1">Improve Customer Satisfaction</option>
                            <option value="obj2">Increase Sales Revenue</option>
                            <option value="obj3">Reduce Operating Costs</option>
                        </select>
                    </div>
                </div>
                
                <div id="individualAnswersContainer">
                    <!-- Individual answers will be populated here -->
                    
                    <!-- Sample answer records -->
                    <div class="answer-card" style="background-color: white; border-radius: 8px; padding: 20px; margin-bottom: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                        <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 15px;">
                            <div>
                                <h4 style="margin: 0; color: var(--primary-color);">Responder #1 (Peer)</h4>
                                <p style="margin: 5px 0 0 0; color: #555; font-size: 0.9em;">Submitted on March 15, 2025</p>
                            </div>
                            <div class="response-status" style="background-color: #4CAF50; color: white; padding: 5px 10px; border-radius: 20px; font-size: 0.8em; font-weight: bold;">
                                Complete
                            </div>
                        </div>
                        
                        <div class="answer-group" style="margin-bottom: 20px; padding-bottom: 15px; border-bottom: 1px solid #eee;">
                            <h5 style="margin: 0 0 10px 0; color: var(--secondary-color);">Improve Customer Satisfaction</h5>
                            <div style="display: flex; align-items: center; margin-bottom: 10px;">
                                <div style="margin-right: 15px;">
                                    <strong style="color: #555;">Rating:</strong>
                                    <span style="font-weight: bold; color: var(--primary-color); margin-left: 5px;">4.5/5.0</span>
                                </div>
                                <div class="star-display" style="color: #FFD700;">
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star-half-alt"></i>
                                </div>
                            </div>
                            <div>
                                <strong style="color: #555;">Comment:</strong>
                                <p style="margin: 5px 0 0 0;">The employee has consistently demonstrated excellent customer service skills. They handled the difficult client situation last month particularly well.</p>
                            </div>
                        </div>
                        
                        <div class="answer-group" style="margin-bottom: 20px; padding-bottom: 15px; border-bottom: 1px solid #eee;">
                            <h5 style="margin: 0 0 10px 0; color: var(--secondary-color);">Increase Sales Revenue</h5>
                            <div style="display: flex; align-items: center; margin-bottom: 10px;">
                                <div style="margin-right: 15px;">
                                    <strong style="color: #555;">Rating:</strong>
                                    <span style="font-weight: bold; color: var(--primary-color); margin-left: 5px;">4.0/5.0</span>
                                </div>
                                <div class="star-display" style="color: #FFD700;">
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="far fa-star"></i>
                                </div>
                            </div>
                            <div>
                                <strong style="color: #555;">Comment:</strong>
                                <p style="margin: 5px 0 0 0;">Has shown good initiative in identifying new sales opportunities, but could benefit from additional training in closing techniques.</p>
                            </div>
                        </div>
                        
                        <div class="skill-ratings" style="background-color: #f9f9f9; border-radius: 6px; padding: 15px;">
                            <h5 style="margin: 0 0 10px 0; color: var(--secondary-color);">Skills Assessment</h5>
                            <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 10px;">
                                <div class="skill-rating" style="display: flex; justify-content: space-between;">
                                    <span>Communication:</span>
                                    <strong>5/5</strong>
                                </div>
                                <div class="skill-rating" style="display: flex; justify-content: space-between;">
                                    <span>Technical Knowledge:</span>
                                    <strong>4/5</strong>
                                </div>
                                <div class="skill-rating" style="display: flex; justify-content: space-between;">
                                    <span>Problem Solving:</span>
                                    <strong>4/5</strong>
                                </div>
                                <div class="skill-rating" style="display: flex; justify-content: space-between;">
                                    <span>Leadership:</span>
                                    <strong>3/5</strong>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="answer-card" style="background-color: white; border-radius: 8px; padding: 20px; margin-bottom: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                        <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 15px;">
                            <div>
                                <h4 style="margin: 0; color: var(--primary-color);">Responder #2 (Direct Report)</h4>
                                <p style="margin: 5px 0 0 0; color: #555; font-size: 0.9em;">Submitted on March 18, 2025</p>
                            </div>
                            <div class="response-status" style="background-color: #4CAF50; color: white; padding: 5px 10px; border-radius: 20px; font-size: 0.8em; font-weight: bold;">
                                Complete
                            </div>
                        </div>
                        
                        <div class="answer-group" style="margin-bottom: 20px; padding-bottom: 15px; border-bottom: 1px solid #eee;">
                            <h5 style="margin: 0 0 10px 0; color: var(--secondary-color);">Improve Customer Satisfaction</h5>
                            <div style="display: flex; align-items: center; margin-bottom: 10px;">
                                <div style="margin-right: 15px;">
                                    <strong style="color: #555;">Rating:</strong>
                                    <span style="font-weight: bold; color: var(--primary-color); margin-left: 5px;">5.0/5.0</span>
                                </div>
                                <div class="star-display" style="color: #FFD700;">
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                </div>
                            </div>
                            <div>
                                <strong style="color: #555;">Comment:</strong>
                                <p style="margin: 5px 0 0 0;">Excellent leadership in implementing new customer service standards. Has created a positive environment that encourages team members to prioritize customer needs.</p>
                            </div>
                        </div>
                        
                        <div class="answer-group" style="margin-bottom: 20px; padding-bottom: 15px; border-bottom: 1px solid #eee;">
                            <h5 style="margin: 0 0 10px 0; color: var(--secondary-color);">Reduce Operating Costs</h5>
                            <div style="display: flex; align-items: center; margin-bottom: 10px;">
                                <div style="margin-right: 15px;">
                                    <strong style="color: #555;">Rating:</strong>
                                    <span style="font-weight: bold; color: var(--primary-color); margin-left: 5px;">4.5/5.0</span>
                                </div>
                                <div class="star-display" style="color: #FFD700;">
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star-half-alt"></i>
                                </div>
                            </div>
                            <div>
                                <strong style="color: #555;">Comment:</strong>
                                <p style="margin: 5px 0 0 0;">Has implemented several cost-saving measures that have significantly reduced department expenses without compromising quality.</p>
                            </div>
                        </div>
                        
                        <div class="skill-ratings" style="background-color: #f9f9f9; border-radius: 6px; padding: 15px;">
                            <h5 style="margin: 0 0 10px 0; color: var(--secondary-color);">Skills Assessment</h5>
                            <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 10px;">
                                <div class="skill-rating" style="display: flex; justify-content: space-between;">
                                    <span>Communication:</span>
                                    <strong>5/5</strong>
                                </div>
                                <div class="skill-rating" style="display: flex; justify-content: space-between;">
                                    <span>Technical Knowledge:</span>
                                    <strong>4/5</strong>
                                </div>
                                <div class="skill-rating" style="display: flex; justify-content: space-between;">
                                    <span>Problem Solving:</span>
                                    <strong>5/5</strong>
                                </div>
                                <div class="skill-rating" style="display: flex; justify-content: space-between;">
                                    <span>Leadership:</span>
                                    <strong>5/5</strong>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div style="text-align: center; margin-top: 20px;">
                    <button type="button" style="background-color: var(--primary-color); color: white; border: none; padding: 10px 20px; border-radius: var(--border-radius); cursor: pointer; font-weight: 500;">
                        <i class="fas fa-download"></i> Export All Answers
                    </button>
                </div>
            </div>
        </div>
    </section>
</form>
            <!-- Mid-Year IDP Form -->
            <section id="midYearIDPForm" class="fade-out section" style="display: none;">
                <h2><i class="fas fa-clipboard-check"></i> Mid-Year Individual Development Plan (IDP)</h2>

                <form id="midYearIDPFormDetails" method="POST" action="/linemanager/midyear-idp/<%= user.userId %>">
                    <!-- Professional Competences -->
                    <fieldset>
                        <legend><i class="fas fa-briefcase"></i> PROFESSIONAL COMPETENCES</legend>

                        <label for="profStrengths"><strong>STRENGTHS:</strong></label>
                        <textarea id="profStrengths" name="profStrengths" rows="4" placeholder="Describe technical competences" required></textarea>

                        <label for="profAreasForDevelopment"><strong>AREAS FOR DEVELOPMENT:</strong></label>
                        <textarea id="profAreasForDevelopment" name="profAreasForDevelopment" rows="4" placeholder="Describe gaps" required></textarea>

                        <label for="profActionsToTake"><strong>ACTIONS TO TAKE:</strong></label>
                        <textarea id="profActionsToTake" name="profActionsToTake" rows="4" placeholder="Agreements on actions to take to close gap aligned with the 70-20-10 model" required></textarea>
                    </fieldset>

                    <hr style="margin: 25px 0; border: 0; height: 1px; background-color: #ddd;">

                    <!-- Leadership Competences -->
                    <fieldset>
                        <legend><i class="fas fa-users"></i> LEADERSHIP COMPETENCES</legend>

                        <label for="leaderStrengths"><strong>STRENGTHS:</strong></label>
                        <textarea id="leaderStrengths" name="leaderStrengths" rows="4" placeholder="Describe leadership competences (e.g., Authenticity, Fostering Growth, Building Collaboration, Nurturing Performance)" required></textarea>

                        <label for="leaderAreasForDevelopment"><strong>AREAS FOR DEVELOPMENT:</strong></label>
                        <textarea id="leaderAreasForDevelopment" name="leaderAreasForDevelopment" rows="4" placeholder="Describe gaps" required></textarea>

                        <label for="leaderActionsToTake"><strong>ACTIONS TO TAKE:</strong></label>
                        <textarea id="leaderActionsToTake" name="leaderActionsToTake" rows="4" placeholder="Agreements on actions to take to close leadership gaps" required></textarea>
                    </fieldset>

                    <hr style="margin: 25px 0; border: 0; height: 1px; background-color: #ddd;">

                    <!-- Next Role Options -->
                    <fieldset>
                        <legend><i class="fas fa-road"></i> NEXT ROLE OPTIONS</legend>

                        <label for="nextRoleShortTerm"><strong>SHORT-TERM:</strong></label>
                        <textarea id="nextRoleShortTerm" name="nextRoleShortTerm" rows="4" placeholder="1-3 roles in the next 3-5 years" required></textarea>

                        <label for="nextRoleLongTerm"><strong>LONG-TERM:</strong></label>
                        <textarea id="nextRoleLongTerm" name="nextRoleLongTerm" rows="4" placeholder="1-3 roles in the next 5-10 years and upon retirement" required></textarea>

                        <label for="nextRoleMobility"><strong>MOBILITY:</strong></label>
                        <textarea id="nextRoleMobility" name="nextRoleMobility" rows="4" placeholder="Availability to work in a different location and work schedule" required></textarea>
                    </fieldset>

                    <div id="submitButtonContainer" style="margin-top: 25px; text-align: right;">
                        <button id="submitMidYearIDP" type="submit" class="save-btn">
                            <i class="fas fa-paper-plane"></i> Submit Mid-Year IDP
                        </button>
                    </div>
                </form>
            </section>

            <!-- Final-Year IDP Form -->
<section id="finalYearIDPForm" class="fade-out section" style="display: none;">
    <h2><i class="fas fa-clipboard-check"></i> Final-Year Individual Development Plan (IDP)</h2>

    <form id="finalYearIDPFormDetails" method="POST" action="/linemanager/finalyear-idp/<%= user.userId %>">
        <!-- Professional Competences -->
        <fieldset>
            <legend><i class="fas fa-briefcase"></i> PROFESSIONAL COMPETENCES</legend>

            <label for="profStrengths"><strong>STRENGTHS:</strong></label>
            <textarea id="profStrengths" name="profStrengths" rows="4" placeholder="Describe technical competences achieved during the year" required></textarea>

            <label for="profAreasForDevelopment"><strong>AREAS FOR DEVELOPMENT:</strong></label>
            <textarea id="profAreasForDevelopment" name="profAreasForDevelopment" rows="4" placeholder="Describe remaining gaps to address" required></textarea>

            <label for="profActionsToTake"><strong>ACTIONS TO TAKE:</strong></label>
            <textarea id="profActionsToTake" name="profActionsToTake" rows="4" placeholder="Recommended actions to address development needs for next year" required></textarea>
        </fieldset>

        <hr style="margin: 25px 0; border: 0; height: 1px; background-color: #ddd;">

        <!-- Leadership Competences -->
        <fieldset>
            <legend><i class="fas fa-users"></i> LEADERSHIP COMPETENCES</legend>

            <label for="leaderStrengths"><strong>STRENGTHS:</strong></label>
            <textarea id="leaderStrengths" name="leaderStrengths" rows="4" placeholder="Describe leadership competences developed this year (e.g., Authenticity, Fostering Growth, Building Collaboration, Nurturing Performance)" required></textarea>

            <label for="leaderAreasForDevelopment"><strong>AREAS FOR DEVELOPMENT:</strong></label>
            <textarea id="leaderAreasForDevelopment" name="leaderAreasForDevelopment" rows="4" placeholder="Describe leadership gaps that need further development" required></textarea>

            <label for="leaderActionsToTake"><strong>ACTIONS TO TAKE:</strong></label>
            <textarea id="leaderActionsToTake" name="leaderActionsToTake" rows="4" placeholder="Recommended actions to address leadership development needs for next year" required></textarea>
        </fieldset>

        <hr style="margin: 25px 0; border: 0; height: 1px; background-color: #ddd;">

        <!-- Next Role Options -->
        <fieldset>
            <legend><i class="fas fa-road"></i> CAREER PLANNING</legend>

            <label for="nextRoleShortTerm"><strong>SHORT-TERM GOALS:</strong></label>
            <textarea id="nextRoleShortTerm" name="nextRoleShortTerm" rows="4" placeholder="Goals and target roles for the next 1-2 years" required></textarea>

            <label for="nextRoleLongTerm"><strong>LONG-TERM GOALS:</strong></label>
            <textarea id="nextRoleLongTerm" name="nextRoleLongTerm" rows="4" placeholder="Career aspirations for the next 3-5 years" required></textarea>

            <label for="nextRoleMobility"><strong>MOBILITY AND FLEXIBILITY:</strong></label>
            <textarea id="nextRoleMobility" name="nextRoleMobility" rows="4" placeholder="Willingness and ability to work in different locations, roles, or schedules" required></textarea>
        </fieldset>

        <div id="submitButtonContainer" style="margin-top: 25px; text-align: right;">
            <button id="submitFinalYearIDP" type="submit" class="save-btn">
                <i class="fas fa-paper-plane"></i> Submit Final-Year IDP
            </button>
        </div>
    </form>
</section>
            
            <!-- JavaScript for page functionality -->
            <script>
                // Initialize variables
                let currentStep = 0; // Track the current step
                
                // Parse viewState back into an object
                const viewStateElement = document.getElementById('viewState');
                const viewState = JSON.parse(viewStateElement.getAttribute('data-viewstate'));
                let userId = '<%= user.userId %>'; // Pass userId from server-side
                let jobId = viewState.jobId; // Use jobId from viewState
                let submittedObjectives = viewState.submittedObjectives || []; // Initialize with submitted objectives
                const hardSkills = viewState.hardSkills || []; // Default to empty array if not defined
                const softSkills = viewState.softSkills || []; // Default to empty array if not defined

                document.addEventListener("DOMContentLoaded", function () {
                    // Initialize UI components
                    const objectivesButton = document.getElementById("objectivesButton");
                    const feedbackSection = document.getElementById("feedback-section");
                    const saveButton = document.getElementById("saveButton"); // Save button for objectives
                    const saveFeedbackButton = document.getElementById("save360DegreeFeedback"); // Save button for feedback
                    const feedbackStatus = document.getElementById('feedback-status');
                    const feedbackMessage = document.getElementById('feedback-message');
                    const editButton = document.getElementById('edit-questionnaire-button');
                    const midYearIDPButton = document.getElementById("midYearIDP"); // Button for Mid-Year IDP
                    const midYearIDPForm = document.getElementById("midYearIDPForm"); // Mid-Year IDP form
                    
                    // Add debugging info to console
                    console.log("Initialized Script.");
                    console.log("ViewState:", viewState);
                    console.log("User ID:", userId);
                    console.log("Job ID:", jobId);
                    console.log("Submitted Objectives:", submittedObjectives);
                    console.log("Hard Skills:", hardSkills);
                    console.log("Soft Skills:", softSkills);

                    // Add event listeners
                    if (objectivesButton) {
                        console.log('Objectives Button found');
                        objectivesButton.addEventListener("click", handleObjectiveClick);
                    } else {
                        console.error('Objectives Button not found in the DOM.');
                    }
                    
                    // Initialize buttons for Mid-Year IDP
                    if (midYearIDPButton) {
                        midYearIDPButton.addEventListener("click", navigateToMidYearIDP);
                    } else {
                        console.error("Mid-Year IDP Button not found in the DOM.");
                    }
                    
                    // Add event listener for the save button
                    if (saveButton) {
                        saveButton.addEventListener("click", saveObjectives);
                    }
                    
                    // Add event listener for the feedback save button
                    if (saveFeedbackButton) {
                        saveFeedbackButton.addEventListener("click", async (event) => {
                            event.preventDefault(); // Prevent default form submission
                            await save360DegreeFeedback(); // Call the function to save feedback
                            // After saving, switch to view-only mode
                            switchToViewOnlyMode();
                        });
                    }

                    // Initialize feedback display status
                    updateFeedbackStatus();
                });

                // Function to update total weight in the form
                function updateTotalWeight() {
                    const weightInputs = document.querySelectorAll(".weight-input");
                    let totalWeight = 0;
                    
                    weightInputs.forEach(input => {
                        totalWeight += parseFloat(input.value) || 0;
                    });
                    
                    document.getElementById("totalWeight").value = totalWeight;
                    document.getElementById("totalWeightDisplay").textContent = totalWeight;
                    
                    // Change color based on total weight
                    const totalWeightDisplay = document.getElementById("totalWeightDisplay");
                    if (totalWeight === 100) {
                        totalWeightDisplay.style.color = "#4CAF50"; // Green when exactly 100
                    } else if (totalWeight > 100) {
                        totalWeightDisplay.style.color = "#f44336"; // Red when over 100
                    } else {
                        totalWeightDisplay.style.color = "#ff9800"; // Orange when under 100
                    }
                }

                // Function to handle objective click
                function handleObjectiveClick() {
                    console.log("Objective clicked. View only status:", viewState.viewOnlyStatus.objectivesettings);
                    
                    // Hide the feedback form when switching to objectives
                    document.getElementById("feedback-section").style.display = "none";
                    document.getElementById("midYearIDPForm").style.display = "none";
                    
                    // Get the form and view-only sections
                    const formSection = document.getElementById("objective-skill-progress-form");
                    const viewOnlySection = document.getElementById("view-only-page");
                    
                    // Check if the view-only status is true
                    if (viewState.viewOnlyStatus.objectivesettings) {
                        // Show the view-only section
                        displaySubmittedObjectives(submittedObjectives);
                        viewOnlySection.style.display = "block";
                        formSection.style.display = "none";
                        
                        // Add animation classes
                        viewOnlySection.classList.remove("fade-out");
                        viewOnlySection.classList.add("fade-in");
                        
                        console.log("Showing view-only page with submitted objectives.");
                    } else {
                        // Show the editable form if in edit mode
                        formSection.style.display = "block";
                        viewOnlySection.style.display = "none";
                        
                        // Add animation classes
                        formSection.classList.remove("fade-out");
                        formSection.classList.add("fade-in");
                        
                        console.log("Showing editable objective form.");
                    }
                }

                // Function to navigate to Mid-Year IDP
                function navigateToMidYearIDP() {
                    if (midYearIDPButton.classList.contains("accessible")) {
                        // Hide other sections
                        const sectionsToHide = [
                            document.getElementById("objective-skill-progress-form"),
                            document.getElementById("view-only-page"),
                            document.getElementById("feedback-section")
                        ];
                        
                        sectionsToHide.forEach(section => {
                            if (section) section.style.display = "none";
                        });

                        // Show the Mid-Year IDP form
                        const midYearIDPForm = document.getElementById("midYearIDPForm");
                        if (midYearIDPForm) {
                            midYearIDPForm.style.display = "block";
                            midYearIDPForm.classList.remove("fade-out");
                            midYearIDPForm.classList.add("fade-in");
                            midYearIDPForm.scrollIntoView({ behavior: "smooth" });
                            console.log("Navigated to the Mid-Year IDP form.");
                        }
                    } else {
                        // Show friendly notification
                        alert("You must complete the previous steps first.");
                    }
                }

  // Modified showFeedbackForm function that explicitly takes the quarter parameter
function showFeedbackForm(quarter) {
    console.log(`Showing feedback form for Q${quarter}`);
    
    // Hide other sections
    const sectionsToHide = [
        document.getElementById("objective-skill-progress-form"),
        document.getElementById("view-only-page"),
        document.getElementById("midYearIDPForm"),
        document.getElementById("finalYearIDPForm")
    ];
    
    sectionsToHide.forEach(section => {
        if (section) section.style.display = "none";
    });

    // Show feedback section
    const feedbackSection = document.getElementById("feedback-section");
    if (feedbackSection) {
        feedbackSection.style.display = "block";
        feedbackSection.classList.remove("fade-out");
        feedbackSection.classList.add("fade-in");
        
        // Store the active quarter in a hidden field for form submission
        let quarterField = document.getElementById('activeQuarterField');
        if (!quarterField) {
            quarterField = document.createElement('input');
            quarterField.type = 'hidden';
            quarterField.name = 'activeQuarter';
            quarterField.id = 'activeQuarterField';
            feedbackSection.appendChild(quarterField);
        }
        
        // Set the quarter value
        quarterField.value = `Q${quarter}`;
        console.log(`Set active quarter to Q${quarter} in hidden field`);
        
        // Clear the table bodies
        const feedbackTableBody = document.getElementById('feedback-table-body');
        const hardSkillsTableBody = document.getElementById('hard-skills-table-body');
        const softSkillsTableBody = document.getElementById('soft-skills-table-body');
        
        if (feedbackTableBody) feedbackTableBody.innerHTML = '';
        if (hardSkillsTableBody) hardSkillsTableBody.innerHTML = '';
        if (softSkillsTableBody) softSkillsTableBody.innerHTML = '';
        
        // Add rows for objectives
        if (submittedObjectives && submittedObjectives.length > 0) {
            submittedObjectives.forEach(objective => {
                addFormFeedbackRow(objective);
            });
        }
        
        // Add hard skills to the feedback form
        addFormFeedbackSkillsRows(hardSkills, 'hard');
        
        // Add soft skills to the feedback form
        addFormFeedbackSkillsRows(softSkills, 'soft');
        
        // Update form action with the quarter parameter
        const feedbackForm = document.getElementById('feedbackForm');
        if (feedbackForm) {
            const userId = document.getElementById('userId').value;
            feedbackForm.action = `/linemanager/records-performance-tracker/questionnaire/${userId}?quarter=Q${quarter}`;
            console.log(`Updated form action with quarter=Q${quarter}`);
        }
        
        // Check if this quarter's feedback has already been submitted
        checkFeedbackSubmissionStatus(quarter);
    }
}

// Modified checkFeedbackSubmissionStatus function with debug logs
async function checkFeedbackSubmissionStatus(quarter) {
    console.log(`Checking feedback submission status for Q${quarter}`);
    
    try {
        const userId = document.getElementById('userId').value;
        
        // Ensure quarter is formatted correctly
        const formattedQuarter = quarter.startsWith('Q') ? quarter : `Q${quarter}`;
        const apiUrl = `/linemanager/check-feedback-status?userId=${userId}&quarter=${formattedQuarter}`;
        
        console.log(`Checking status from: ${apiUrl}`);
        
        const response = await fetch(apiUrl);
        const data = await response.json();
        
        console.log(`Status check result for ${formattedQuarter}:`, data);
        
        if (data.success && data.submitted) {
            console.log(`Feedback for ${formattedQuarter} has been submitted, switching to view-only mode`);
            // If feedback has been submitted, switch to view-only mode
            switchToViewOnlyMode();
            
            // Switch to the "View Feedback" tab automatically
            const viewFeedbackBtn = document.getElementById('viewFeedbackBtn');
            if (viewFeedbackBtn) {
                viewFeedbackBtn.click();
            }
        } else {
            console.log(`Feedback for ${formattedQuarter} has not been submitted yet`);
        }
    } catch (error) {
        console.error(`Error checking feedback submission status for Q${quarter}:`, error);
    }
}

                // Function to add a row to feedback form
                function addFormFeedbackRow(objective) {
                    const tbody = document.getElementById('feedback-table-body');
                    if (!tbody) {
                        console.error("Feedback table body not found.");
                        return;
                    }

                    // Create and append the objective row
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td><strong>${objective.objectiveDescrpt || 'N/A'}</strong></td>
                        <td><strong>${objective.objectiveKPI || 'N/A'}</strong></td>
                        <td><strong>${objective.objectiveTarget || 'N/A'}</strong></td>
                        <td><strong>${objective.objectiveUOM || '%'}</strong></td>
                        <td><strong>${(objective.objectiveAssignedWeight * 100) || 'N/A'}%</strong></td>
                    `;
                    tbody.appendChild(row);

                    // Create and append the input row for feedback
                    const inputRow = document.createElement('tr');
                    const inputId = `qualitativeInput_${objective.objectiveId}`;
                    const questionText = objective.objectiveQualiQuestion || 'Enter your feedback here';

                    inputRow.innerHTML = `
                        <td colspan="5" class="feedback-input-cell">
                            <div style="margin-bottom: 15px; padding: 10px; background-color: #f9f9f9; border-radius: 4px;">
                                <label for="${inputId}" style="display: block; margin-bottom: 8px; font-weight: 500;">
                                    <i class="fas fa-question-circle"></i> Guide Question for Feedback:
                                </label>
                                <input id="${inputId}" type="text" style="width: 100%;"
                                    value="${questionText.trim() ? questionText : ''}"  
                                    ${questionText.trim() ? '' : 'placeholder="Enter your feedback here"'} 
                                    data-objective-id="${objective.objectiveId}" 
                                >
                            </div>
                        </td>
                    `;
                    tbody.appendChild(inputRow);

                    // Create and append the rater's view row
                    const raterRow = document.createElement('tr');
                    const starRatingId = `starRating${objective.objectiveId}`;
                    const ratingSectionId = `ratingSection${objective.objectiveId}`;

                    raterRow.innerHTML = `
                        <td colspan="5">
                            <button type="button" onclick="toggleRatingSection('${ratingSectionId}')" 
                                    style="background-color: #6c757d; color: white; border: none; padding: 8px 15px; 
                                    cursor: pointer; border-radius: 4px; margin-bottom: 10px; width: 100%;">
                                <i class="fas fa-eye"></i> View Rater's Interface
                            </button>
                            <div id="${ratingSectionId}" style="display: none; margin-top: 10px; padding: 15px; 
                                background-color: #f9f9f9; border-radius: 8px; border: 1px solid #ddd;">
                                <div style="margin-bottom: 15px;">
                                    <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                                        <i class="fas fa-star"></i> <strong>Quantitative Rating:</strong>
                                    </label>
                                    <div style="font-size: 14px; margin-bottom: 10px; color: #666;">
                                        Please rate the accomplishment of this objective for the quarter on a scale of 1 to 5.
                                    </div>
                                    <div class="star-rating" style="font-size: 24px; cursor: pointer;" id="${starRatingId}" data-rating="0">
                                        <i class="fa-solid fa-star" data-value="1" style="color: #ddd; margin-right: 5px;"></i>
                                        <i class="fa-solid fa-star" data-value="2" style="color: #ddd; margin-right: 5px;"></i>
                                        <i class="fa-solid fa-star" data-value="3" style="color: #ddd; margin-right: 5px;"></i>
                                        <i class="fa-solid fa-star" data-value="4" style="color: #ddd; margin-right: 5px;"></i>
                                        <i class="fa-solid fa-star" data-value="5" style="color: #ddd;"></i>
                                    </div>
                                </div>
                                <div style="margin-bottom: 10px;">
                                    <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                                        <i class="fas fa-comment"></i> <strong>Qualitative Feedback:</strong>
                                    </label>
                                    <div style="font-size: 14px; margin-bottom: 10px; color: #666;">
                                        Please provide qualitative feedback regarding this objective for the quarter.
                                    </div>
                                    <textarea id="qualitativeFeedback_${objective.objectiveId}" 
                                        placeholder="Place your qualitative feedback here." 
                                        style="width: 100%; min-height: 80px; padding: 10px;"></textarea>
                                </div>
                            </div>
                        </td>
                    `;
                    tbody.appendChild(raterRow);

                    // Add click event listeners to the stars
                    setTimeout(() => {
                        const stars = document.querySelectorAll(`#${starRatingId} .fa-star`);
                        stars.forEach(star => {
                            star.addEventListener('click', function() {
                                const rating = this.getAttribute('data-value');
                                const starContainer = document.getElementById(starRatingId);
                                starContainer.setAttribute('data-rating', rating);
                                updateStarDisplay(stars, rating);
                            });
                        });
                    }, 100);
                }

                // Function to update star display based on rating
                function updateStarDisplay(stars, rating) {
                    stars.forEach(star => {
                        const value = star.getAttribute('data-value');
                        if (value <= rating) {
                            star.style.color = '#FFD700'; // Gold color for selected stars
                        } else {
                            star.style.color = '#ddd'; // Light gray for unselected stars
                        }
                    });
                }

                // Function to toggle rating section visibility
                function toggleRatingSection(sectionId) {
                    const section = document.getElementById(sectionId);
                    if (section) {
                        if (section.style.display === 'none') {
                            section.style.display = 'block';
                        } else {
                            section.style.display = 'none';
                        }
                    }
                }

                // Function to add feedback skills rows
                function addFormFeedbackSkillsRows(skills, skillType) {
                    const skillTableBody = document.querySelector(`#${skillType}-skills-table-body`);
                    
                    if (!skillTableBody) {
                        console.log(`Skill table body not found for: ${skillType}`);
                        return;
                    }
                    
                    // Clear existing content
                    skillTableBody.innerHTML = '';
                    
                    // Check if skills array is empty
                    if (!skills || skills.length === 0) {
                        const emptyRow = document.createElement('tr');
                        emptyRow.innerHTML = `
                            <td style="text-align: center; padding: 15px;">No ${skillType} skills available</td>
                        `;
                        skillTableBody.appendChild(emptyRow);
                        return;
                    }
                    
                    // Iterate over skills and add each one
                    skills.forEach(skill => {
                        // Create skill name row
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>
                                <span style="font-weight: 500; color: #124A5C;">${skill.jobReqSkillName}</span>
                            </td>
                        `;
                        skillTableBody.appendChild(row);
                        
                        // Create rater view row
                        const raterRow = document.createElement('tr');
                        const starRatingId = `${skillType}SkillRow${skill.jobReqSkillName.replace(/\s+/g, '_')}Rating`;
                        const ratingSectionId = `ratingSection${skill.jobReqSkillName.replace(/\s+/g, '_')}`;
                        
                        raterRow.innerHTML = `
                        <td>
                            <button type="button" onclick="toggleRatingSection('${ratingSectionId}')" 
                                    style="background-color: #6c757d; color: white; border: none; padding: 8px 15px; 
                                    cursor: pointer; border-radius: 4px; margin-bottom: 10px; width: 100%;">
                                <i class="fas fa-eye"></i> View Rater's Interface
                            </button>
                            <div id="${ratingSectionId}" style="display: none; margin: 10px 0 20px; padding: 15px; 
                                    background-color: #f9f9f9; border-radius: 8px; border: 1px solid #ddd;">
                                <div style="margin-bottom: 15px;">
                                    <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                                        <i class="fas fa-star"></i> <strong>Quantitative Rating:</strong>
                                    </label>
                                    <div style="font-size: 14px; margin-bottom: 10px; color: #666;">
                                        Rate from 1 to 5 based on this skill's performance during the quarter.
                                    </div>
                                    <div class="star-rating" style="font-size: 24px;" id="${starRatingId}" data-rating="0">
                                        <i class="fa-solid fa-star" data-value="1" style="color: #ddd; margin-right: 5px;"></i>
                                        <i class="fa-solid fa-star" data-value="2" style="color: #ddd; margin-right: 5px;"></i>
                                        <i class="fa-solid fa-star" data-value="3" style="color: #ddd; margin-right: 5px;"></i>
                                        <i class="fa-solid fa-star" data-value="4" style="color: #ddd; margin-right: 5px;"></i>
                                        <i class="fa-solid fa-star" data-value="5" style="color: #ddd;"></i>
                                    </div>
                                </div>
                                <div>
                                    <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                                        <i class="fas fa-comment"></i> <strong>Qualitative Feedback:</strong>
                                    </label>
                                    <div style="font-size: 14px; margin-bottom: 10px; color: #666;">
                                        Provide specific examples related to this skill.
                                    </div>
                                    <textarea placeholder="Enter your qualitative feedback here..." 
                                              style="width: 100%; min-height: 80px; padding: 10px;"></textarea>
                                </div>
                            </div>
                        </td>
                        `;
                        
                        skillTableBody.appendChild(raterRow);
                    });
                }

                // Function to add a new row to the objective form
                function addRow() {
                    const tableBody = document.getElementById("progress-table-body");
                    const newRow = document.createElement("tr");
                    newRow.innerHTML = `
                        <td><input type="text" placeholder="Enter Objective" name="objectiveDescrpt" required></td>
                        <td><input type="text" placeholder="Enter KPI" name="objectiveKPI" required></td>
                        <td><input type="text" placeholder="Enter Target" name="objectiveTarget" required></td>
                        <td><input type="text" placeholder="Enter UOM" name="objectiveUOM" required></td>
                        <td><input type="number" class="weight-input" oninput="updateTotalWeight()" placeholder="Weight %" name="objectiveAssignedWeight" min="0" max="100" required></td>
                        <td><button type="button" class="cancel-btn" onclick="removeRow(this)"><i class="fas fa-trash"></i> Remove</button></td>
                    `;
                    tableBody.appendChild(newRow);
                }

                // Function to remove a row from the objective form
                function removeRow(button) {
                    const row = button.parentNode.parentNode;
                    row.parentNode.removeChild(row);
                    updateTotalWeight(); // Update total weight after removal
                }

                // Function to display submitted objectives
                function displaySubmittedObjectives(objectives) {
                    const tableBody = document.getElementById("view-only-table-body");
                    if (!tableBody) return;
                    
                    tableBody.innerHTML = ""; // Clear previous content

                    if (!objectives || objectives.length === 0) {
                        tableBody.innerHTML = `<tr><td colspan="5" style="text-align: center; padding: 20px;">No objectives found.</td></tr>`;
                        return;
                    }

                    objectives.forEach(obj => {
                        const row = document.createElement("tr");
                        row.innerHTML = `
                            <td>${obj.objectiveDescrpt || 'N/A'}</td>
                            <td>${obj.objectiveKPI || 'N/A'}</td>
                            <td>${obj.objectiveTarget || 'N/A'}</td>
                            <td>${obj.objectiveUOM || 'N/A'}</td>
                            <td>${(obj.objectiveAssignedWeight * 100).toFixed(2) || 'N/A'}%</td>
                        `;
                        tableBody.appendChild(row);
                    });
                }

                // Function to update feedback status
                function updateFeedbackStatus() {
                    // Get elements
                    const feedbackStatus = document.getElementById('feedback-status');
                    const feedbackMessage = document.getElementById('feedback-message');
                    const editButton = document.getElementById('edit-questionnaire-button');
                    
                    // Skip if elements are not found
                    if (!feedbackStatus || !feedbackMessage) return;
                    
                    // Get current date and end date
                    const currentDate = new Date().toISOString().split('T')[0];
                    const endDateElement = document.getElementById('endDate');
                    
                    // Skip if end date element is not found
                    if (!endDateElement) return;
                    
                    const endDate = endDateElement.value;
                    
                    // Check if current date is before the scheduled end date
                    if (currentDate < endDate) {
                        // Display confirmation message with ability to edit
                        feedbackMessage.innerHTML = `Questionnaire Saved on ${currentDate}. Edits are allowed before the scheduled date.`;
                        feedbackStatus.style.display = 'block';
                        if (editButton) editButton.style.display = 'inline-block';
                    } else {
                        // Display confirmation message without the Edit option
                        feedbackMessage.innerHTML = `Questionnaire Saved on ${currentDate}. Edits are not allowed after the scheduled date.`;
                        feedbackStatus.style.display = 'block';
                        if (editButton) editButton.style.display = 'none';
                    }
                }

                // Function to switch feedback to view-only mode
                function switchToViewOnlyMode() {
                    // Get elements
                    const startDateInput = document.getElementById("startDate");
                    const endDateInput = document.getElementById("endDate");
                    const feedbackTableBody = document.getElementById('feedback-table-body');
                    const saveFeedbackButton = document.getElementById("save360DegreeFeedback");
                    
                    // Replace input fields with text
                    if (startDateInput) {
                        const startDateText = document.createElement("span");
                        startDateText.textContent = startDateInput.value;
                        startDateText.className = "date-display";
                        startDateInput.parentNode.replaceChild(startDateText, startDateInput);
                    }

                    if (endDateInput) {
                        const endDateText = document.createElement("span");
                        endDateText.textContent = endDateInput.value;
                        endDateText.className = "date-display";
                        endDateInput.parentNode.replaceChild(endDateText, endDateInput);
                    }

                    // Make qualitative questions view-only
                    if (feedbackTableBody) {
                        const inputs = feedbackTableBody.querySelectorAll('input[type="text"]');
                        inputs.forEach(input => {
                            const textSpan = document.createElement("span");
                            textSpan.textContent = input.value;
                            textSpan.style.display = "block";
                            textSpan.style.padding = "10px";
                            textSpan.style.backgroundColor = "#f5f5f5";
                            textSpan.style.borderRadius = "4px";
                            input.parentNode.replaceChild(textSpan, input);
                        });
                    }

                    // Hide the save button
                    if (saveFeedbackButton) {
                        saveFeedbackButton.style.display = 'none';
                    }
                }

                // Function to fetch year data
                function fetchYearData() {
                    const selectedYear = document.getElementById('yearSelect').value;
                    if (selectedYear) {
                        // Show loading indicator or message
                        const stepperContainer = document.querySelector('.stepper-container');
                        if (stepperContainer) {
                            stepperContainer.classList.add('loading');
                        }
                        
                        // Redirect to the same page with the selected year as a query parameter
                        window.location.href = `?year=${selectedYear}`;
                    }
                }

                // Function to save objectives
                async function saveObjectives(event) {
                    event.preventDefault(); // Prevent default form submission
                    
                    // Get form values
                    const departmentId = '<%= user.departmentId %>';
                    const performancePeriodYear = document.getElementById("performanceDate").textContent;

                    console.log("Saving objectives for User ID:", userId);
                    console.log("Job ID:", jobId);
                    console.log("Performance Period Year:", performancePeriodYear);

                    // Validate required IDs
                    if (!userId || !jobId) {
                        console.error("One or more required IDs are missing.");
                        alert("Please ensure all fields are filled out correctly before saving.");
                        return;
                    }

                    // Collect objectives from the form
                    const objectives = [];
                    const rows = document.querySelectorAll("#progress-table-body tr");

                    // Ensure confirmation checkbox is checked
                    const confirmationChecked = document.getElementById("confirmationCheckbox").checked;
                    if (!confirmationChecked) {
                        alert("Please confirm that you have reviewed the objectives before saving.");
                        return;
                    }

                    // Calculate total weight
                    let totalWeight = 0;

                    rows.forEach(row => {
                        const descriptionInput = row.querySelector('input[name="objectiveDescrpt"]');
                        const kpiInput = row.querySelector('input[name="objectiveKPI"]');
                        const targetInput = row.querySelector('input[name="objectiveTarget"]');
                        const uomInput = row.querySelector('input[name="objectiveUOM"]');
                        const weightInput = row.querySelector('input[name="objectiveAssignedWeight"]');

                        if (descriptionInput && kpiInput && targetInput && uomInput && weightInput) {
                            const weight = parseFloat(weightInput.value);
                            totalWeight += weight;

                            const objective = {
                                objectiveDescrpt: descriptionInput.value,
                                objectiveKPI: kpiInput.value,
                                objectiveTarget: targetInput.value,
                                objectiveUOM: uomInput.value,
                                objectiveAssignedWeight: weight,
                            };
                            objectives.push(objective);
                        }
                    });

                    console.log("Objectives to save:", objectives);
                    console.log("Total weight:", totalWeight);

                    // Validate total weight
                    if (totalWeight !== 100) {
                        alert("Total assigned weight must be exactly 100% to save.");
                        return;
                    }

                    // Proceed if objectives are present
                    if (objectives.length > 0) {
                        try {
                            // Show loading state
                            const saveButton = document.getElementById("saveButton");
                            if (saveButton) {
                                saveButton.disabled = true;
                                saveButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
                            }

                            // Send data to server
                            const response = await fetch(`/linemanager/records-performance-tracker/${userId}`, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    jobId,
                                    departmentId,
                                    performancePeriodYear,
                                    objectives,
                                    totalWeight
                                })
                            });

                            console.log("Response from server:", response);

                            // Check if the response was successful
                            if (!response.ok) {
                                throw new Error(`Server responded with status ${response.status}`);
                            }

                            const result = await response.json();
                            console.log("Result from server:", result);

                            if (result.success) {
                                // Display a success alert
                                alert("Objectives saved successfully. Redirecting to view page...");

                                // Redirect to the view-only page after successful save
                                const viewUrl = `/linemanager/records-performance-tracker/view/${userId}`;
                                window.location.href = viewUrl;
                            } else {
                                alert("Failed to save objectives: " + result.message);
                                
                                // Reset button state
                                if (saveButton) {
                                    saveButton.disabled = false;
                                    saveButton.innerHTML = '<i class="fas fa-save"></i> Save Objectives';
                                }
                            }
                        } catch (error) {
                            console.error("Error saving objectives:", error);
                            alert("An error occurred while saving objectives. Please try again later.");
                            
                            // Reset button state
                            const saveButton = document.getElementById("saveButton");
                            if (saveButton) {
                                saveButton.disabled = false;
                                saveButton.innerHTML = '<i class="fas fa-save"></i> Save Objectives';
                            }
                        }
                    } else {
                        alert("No objectives to save. Please add at least one objective.");
                    }
                }

                // Function to save 360 feedback
                // Modify save360DegreeFeedback function to include quarter
// Modified save360DegreeFeedback function to include explicit quarter handling
async function save360DegreeFeedback() {
    // Get form values
    const startDateElement = document.getElementById('startDate');
    const endDateElement = document.getElementById('endDate');
    const saveFeedbackButton = document.getElementById("save360DegreeFeedback");
    const activeQuarterField = document.getElementById('activeQuarterField');

    // Show loading state
    if (saveFeedbackButton) {
        saveFeedbackButton.disabled = true;
        saveFeedbackButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
    }

    const startDate = startDateElement.value;
    const endDate = endDateElement.value;

    // Get the quarter from the active field, with a fallback to Q1
    const quarter = activeQuarterField ? activeQuarterField.value : 'Q1';
    
    console.log("Saving questionnaire with the following data:");
    console.log("User ID:", userId);
    console.log("Job ID:", jobId);
    console.log("Start Date:", startDate);
    console.log("End Date:", endDate);
    console.log("Quarter:", quarter);

    // Validate required fields
    if (!userId || !jobId || !startDate || !endDate || !quarter) {
        console.error("One or more required fields are missing.");
        alert("Please ensure all fields are filled out correctly before saving.");
        
        // Reset button state
        if (saveFeedbackButton) {
            saveFeedbackButton.disabled = false;
            saveFeedbackButton.innerHTML = '<i class="fas fa-save"></i> Save Questionnaire';
        }
        return;
    }

    // Collect feedback data
    const feedbackData = {
        questions: [],
        skills: []
    };

    // Collect qualitative questions from input fields
    const feedbackRows = document.querySelectorAll('#feedback-table-body tr');
    feedbackRows.forEach(row => {
        const qualitativeInput = row.querySelector('input[type="text"]');

        if (qualitativeInput && qualitativeInput.value.trim()) {
            const objectiveId = qualitativeInput.getAttribute('data-objective-id');
            feedbackData.questions.push({
                objectiveId: objectiveId,
                questionText: qualitativeInput.value.trim()
            });
        }
    });

    // Check if any questions were added
    if (feedbackData.questions.length === 0) {
        alert("Please provide at least one qualitative question.");
        
        // Reset button state
        if (saveFeedbackButton) {
            saveFeedbackButton.disabled = false;
            saveFeedbackButton.innerHTML = '<i class="fas fa-save"></i> Save Questionnaire';
        }
        return;
    }

    console.log("Feedback data to save:", feedbackData);

    // Send data to server
    try {
        const response = await fetch(`/linemanager/records-performance-tracker/questionnaire/${userId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                userId,
                jobId,
                startDate,
                endDate,
                feedbackData,
                quarter
            })
        });

        console.log("Response from server:", response);

        // Check if the response was successful
        if (!response.ok) {
            throw new Error(`Server responded with status ${response.status}`);
        }

        const result = await response.json();
        console.log("Result from server:", result);

        if (result.success) {
            // Show success message
            alert("Feedback questionnaire saved successfully!");
            
            // Switch to view-only mode
            switchToViewOnlyMode();
            
            // Switch to the "View Feedback" tab
            const viewFeedbackBtn = document.getElementById('viewFeedbackBtn');
            if (viewFeedbackBtn) {
                viewFeedbackBtn.click();
            }
        } else {
            alert("Failed to save feedback: " + result.message);
            
            // Reset button state
            if (saveFeedbackButton) {
                saveFeedbackButton.disabled = false;
                saveFeedbackButton.innerHTML = '<i class="fas fa-save"></i> Save Questionnaire';
            }
        }
    } catch (error) {
        console.error("Error saving feedback:", error);
        alert("An error occurred while saving feedback.");
        
        // Reset button state
        if (saveFeedbackButton) {
            saveFeedbackButton.disabled = false;
            saveFeedbackButton.innerHTML = '<i class="fas fa-save"></i> Save Questionnaire';
        }
    }
}

// Add explicit handling for the feedback button click events
document.addEventListener("DOMContentLoaded", function() {
    // Get all feedback buttons
    const feedbackButtons = document.querySelectorAll('[id^="feedbackButton"]');
    
    // Add click event listeners to each button
    feedbackButtons.forEach(button => {
        button.addEventListener('click', function(event) {
            event.preventDefault();
            
            // Only proceed if the button is accessible
            if (this.classList.contains('accessible')) {
                // Get the quarter directly from the button's data attribute
                const quarter = this.getAttribute('data-quarter');
                console.log(`Feedback button clicked for Q${quarter}`);
                
                // Store the active quarter in a global variable
                window.activeQuarter = quarter;
                
                // Call showFeedbackForm with the quarter
                showFeedbackForm(quarter);
            } else {
                alert("You must complete the previous steps first.");
            }
        });
    });
    
    // Initialize view feedback toggle buttons
    const viewQuestionnaireBtn = document.getElementById('viewQuestionnaireBtn');
    const viewFeedbackBtn = document.getElementById('viewFeedbackBtn');
    
    if (viewQuestionnaireBtn && viewFeedbackBtn) {
        viewQuestionnaireBtn.addEventListener('click', function() {
            toggleFeedbackView('questionnaire');
        });
        
        viewFeedbackBtn.addEventListener('click', function() {
            toggleFeedbackView('feedback');
        });
    }
});



                // Initialize global variables
let midYearIDPData = null;
let finalYearIDPData = null;


document.addEventListener("DOMContentLoaded", function() {
    // Initialize UI components
    const midYearIDPButton = document.getElementById("midYearIDP");
    const finalYearIDPButton = document.getElementById("finalYearIDP");
    const midYearIDPForm = document.getElementById("midYearIDPForm");
    const midYearIDPFormDetails = document.getElementById("midYearIDPFormDetails");
    const submitMidYearIDP = document.getElementById("submitMidYearIDP");
    
    // Add event listeners for IDP buttons
    if (midYearIDPButton) {
        midYearIDPButton.addEventListener("click", navigateToMidYearIDP);
    }
    
    if (finalYearIDPButton) {
        finalYearIDPButton.addEventListener("click", navigateToFinalYearIDP);
    }
    
    // Add event listeners for form submissions
    if (midYearIDPFormDetails) {
        midYearIDPFormDetails.addEventListener("submit", submitMidYearIDPForm);
    }
    
    // Get viewState data
    const viewStateElement = document.getElementById('viewState');
    if (viewStateElement) {
        try {
            const viewState = JSON.parse(viewStateElement.getAttribute('data-viewstate'));
            initializeIDPForms(viewState);
        } catch (error) {
            console.error("Error parsing viewState:", error);
        }
    }
});

// Updated toggleFeedbackView function that maintains quarter awareness
function toggleFeedbackView(view) {
    const questionnaireContent = document.getElementById('questionnaireContent');
    const feedbackContent = document.getElementById('feedbackContent');
    const viewQuestionnaireBtn = document.getElementById('viewQuestionnaireBtn');
    const viewFeedbackBtn = document.getElementById('viewFeedbackBtn');
    
    if (view === 'questionnaire') {
        // Show questionnaire view
        questionnaireContent.style.display = 'block';
        feedbackContent.style.display = 'none';
        
        // Update button styles
        viewQuestionnaireBtn.style.backgroundColor = 'var(--primary-color)';
        viewFeedbackBtn.style.backgroundColor = 'var(--secondary-color)';
    } else {
        // Show feedback view
        questionnaireContent.style.display = 'none';
        feedbackContent.style.display = 'block';
        
        // Update button styles
        viewFeedbackBtn.style.backgroundColor = 'var(--primary-color)';
        viewQuestionnaireBtn.style.backgroundColor = 'var(--secondary-color)';
        
        // Get the active quarter from the hidden field
        const activeQuarterField = document.getElementById('activeQuarterField');
        const quarterValue = activeQuarterField ? activeQuarterField.value : 'Q1';
        
        // Extract just the quarter number
        const quarter = quarterValue.replace('Q', '');
        console.log(`Loading feedback data for ${quarterValue}`);
        
        // Load feedback data for this quarter
        loadFeedbackData(quarter);
    }
}


// Function to initialize IDP forms based on viewState
function initializeIDPForms(viewState) {
    // Check if we have view-only status for midyearidp and finalyearidp
    if (viewState.viewOnlyStatus) {
        const midYearIDPButton = document.getElementById("midYearIDP");
        const finalYearIDPButton = document.getElementById("finalYearIDP");
        
        if (midYearIDPButton && viewState.viewOnlyStatus.midyearidp) {
            // Mid-Year IDP is in view-only mode
            midYearIDPButton.classList.add("view-only");
            loadMidYearIDPData(viewState.userId);
        }
        
        if (finalYearIDPButton && viewState.viewOnlyStatus.finalyearidp) {
            // Final-Year IDP is in view-only mode
            finalYearIDPButton.classList.add("view-only");
            loadFinalYearIDPData(viewState.userId, viewState.selectedYear);
        }
    }
}

// Function to navigate to Mid-Year IDP
function navigateToMidYearIDP() {
    const midYearIDPButton = document.getElementById("midYearIDP");
    const midYearIDPForm = document.getElementById("midYearIDPForm");
    
    if (midYearIDPButton.classList.contains("accessible")) {
        // Hide other sections
        hideAllSections();
        
        // Show the Mid-Year IDP form
        if (midYearIDPForm) {
            midYearIDPForm.style.display = "block";
            midYearIDPForm.classList.remove("fade-out");
            midYearIDPForm.classList.add("fade-in");
            midYearIDPForm.scrollIntoView({ behavior: "smooth" });
            
            // Load existing data if in view-only mode
            const viewStateElement = document.getElementById('viewState');
            if (viewStateElement) {
                const viewState = JSON.parse(viewStateElement.getAttribute('data-viewstate'));
                if (viewState.viewOnlyStatus && viewState.viewOnlyStatus.midyearidp) {
                    // If view-only mode, load the existing data
                    createViewOnlyMidYearIDP(midYearIDPData);
                } else {
                    // If editable mode, ensure form fields are enabled
                    enableMidYearIDPForm();
                }
            }
            
            console.log("Navigated to the Mid-Year IDP form.");
        }
    } else {
        // Show friendly notification
        alert("You must complete the previous steps first.");
    }
}

// Function to navigate to Final-Year IDP
function navigateToFinalYearIDP() {
    const finalYearIDPButton = document.getElementById("finalYearIDP");
    const midYearIDPForm = document.getElementById("midYearIDPForm"); // We'll reuse the same form
    
    if (finalYearIDPButton.classList.contains("accessible")) {
        // Hide other sections
        hideAllSections();
        
        // Show the Final-Year IDP form (reusing the Mid-Year form layout)
        if (midYearIDPForm) {
            midYearIDPForm.style.display = "block";
            midYearIDPForm.classList.remove("fade-out");
            midYearIDPForm.classList.add("fade-in");
            
            // Update form title and submit button for Final-Year IDP
            const formTitle = midYearIDPForm.querySelector("h2");
            if (formTitle) {
                formTitle.innerHTML = '<i class="fas fa-clipboard-check"></i> Final-Year Individual Development Plan (IDP)';
            }
            
            const submitButton = document.getElementById("submitMidYearIDP");
            if (submitButton) {
                submitButton.textContent = "Submit Final-Year IDP";
                submitButton.id = "submitFinalYearIDP";
                submitButton.onclick = submitFinalYearIDPForm;
            }
            
            // Set form action to final-year endpoint
            const formElement = document.getElementById("midYearIDPFormDetails");
            if (formElement) {
                const userId = getUserIdFromURL();
                formElement.action = `/linemanager/finalyear-idp/${userId}`;
            }
            
            // Load existing data if in view-only mode
            const viewStateElement = document.getElementById('viewState');
            if (viewStateElement) {
                const viewState = JSON.parse(viewStateElement.getAttribute('data-viewstate'));
                if (viewState.viewOnlyStatus && viewState.viewOnlyStatus.finalyearidp) {
                    // If view-only mode, load the existing data
                    createViewOnlyFinalYearIDP(finalYearIDPData);
                } else {
                    // If editable mode, ensure form fields are enabled
                    enableFinalYearIDPForm();
                }
            }
            
            midYearIDPForm.scrollIntoView({ behavior: "smooth" });
            console.log("Navigated to the Final-Year IDP form.");
        }
    } else {
        // Show friendly notification
        alert("You must complete the previous steps first.");
    }
}

// Function to hide all sections
function hideAllSections() {
    const sectionsToHide = [
        document.getElementById("objective-skill-progress-form"),
        document.getElementById("view-only-page"),
        document.getElementById("feedback-section")
    ];
    
    sectionsToHide.forEach(section => {
        if (section) section.style.display = "none";
    });
}

// Function to submit Mid-Year IDP form
function submitMidYearIDPForm(event) {
    event.preventDefault();
    
    // Validate the form
    if (!validateIDPForm()) {
        return;
    }
    
    // Get form data
    const formData = {
        profStrengths: document.getElementById("profStrengths").value,
        profAreasForDevelopment: document.getElementById("profAreasForDevelopment").value,
        profActionsToTake: document.getElementById("profActionsToTake").value,
        leaderStrengths: document.getElementById("leaderStrengths").value,
        leaderAreasForDevelopment: document.getElementById("leaderAreasForDevelopment").value,
        leaderActionsToTake: document.getElementById("leaderActionsToTake").value,
        nextRoleShortTerm: document.getElementById("nextRoleShortTerm").value,
        nextRoleLongTerm: document.getElementById("nextRoleLongTerm").value,
        nextRoleMobility: document.getElementById("nextRoleMobility").value
    };
    
    const userId = getUserIdFromURL();
    
    // Disable the submit button and show loading state
    const submitButton = document.getElementById("submitMidYearIDP");
    if (submitButton) {
        submitButton.disabled = true;
        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Submitting...';
    }
    
    // Submit the form using AJAX
    fetch(`/linemanager/midyear-idp/${userId}`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "Accept": "application/json"
        },
        body: JSON.stringify(formData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("Mid-Year IDP saved successfully!");
            // Redirect or update UI as needed
            window.location.href = `/linemanager/records-performance-tracker/${userId}`;
        } else {
            alert("Error saving Mid-Year IDP: " + data.message);
            // Re-enable the submit button
            if (submitButton) {
                submitButton.disabled = false;
                submitButton.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Mid-Year IDP';
            }
        }
    })
    .catch(error => {
        console.error("Error submitting Mid-Year IDP:", error);
        alert("An error occurred while submitting the Mid-Year IDP. Please try again.");
        // Re-enable the submit button
        if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Mid-Year IDP';
        }
    });
}

// Function to submit Final-Year IDP form
function submitFinalYearIDPForm(event) {
    event.preventDefault();
    
    // Validate the form
    if (!validateIDPForm()) {
        return;
    }
    
    // Get form data
    const formData = {
        profStrengths: document.getElementById("profStrengths").value,
        profAreasForDevelopment: document.getElementById("profAreasForDevelopment").value,
        profActionsToTake: document.getElementById("profActionsToTake").value,
        leaderStrengths: document.getElementById("leaderStrengths").value,
        leaderAreasForDevelopment: document.getElementById("leaderAreasForDevelopment").value,
        leaderActionsToTake: document.getElementById("leaderActionsToTake").value,
        nextRoleShortTerm: document.getElementById("nextRoleShortTerm").value,
        nextRoleLongTerm: document.getElementById("nextRoleLongTerm").value,
        nextRoleMobility: document.getElementById("nextRoleMobility").value
    };
    
    const userId = getUserIdFromURL();
    
    // Disable the submit button and show loading state
    const submitButton = document.getElementById("submitFinalYearIDP");
    if (submitButton) {
        submitButton.disabled = true;
        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Submitting...';
    }
    
    // Submit the form using AJAX
    fetch(`/linemanager/finalyear-idp/${userId}`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "Accept": "application/json"
        },
        body: JSON.stringify(formData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("Final-Year IDP saved successfully!");
            // Redirect or update UI as needed
            window.location.href = `/linemanager/records-performance-tracker/${userId}`;
        } else {
            alert("Error saving Final-Year IDP: " + data.message);
            // Re-enable the submit button
            if (submitButton) {
                submitButton.disabled = false;
                submitButton.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Final-Year IDP';
            }
        }
    })
    .catch(error => {
        console.error("Error submitting Final-Year IDP:", error);
        alert("An error occurred while submitting the Final-Year IDP. Please try again.");
        // Re-enable the submit button
        if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Final-Year IDP';
        }
    });
}

// Function to validate IDP form
function validateIDPForm() {
    const requiredFields = [
        "profStrengths", 
        "profAreasForDevelopment", 
        "profActionsToTake", 
        "leaderStrengths", 
        "leaderAreasForDevelopment", 
        "leaderActionsToTake", 
        "nextRoleShortTerm", 
        "nextRoleLongTerm", 
        "nextRoleMobility"
    ];
    
    let isValid = true;
    
    requiredFields.forEach(fieldId => {
        const field = document.getElementById(fieldId);
        if (field && !field.value.trim()) {
            field.classList.add("error");
            isValid = false;
        } else if (field) {
            field.classList.remove("error");
        }
    });
    
    if (!isValid) {
        alert("Please fill all required fields.");
    }
    
    return isValid;
}

// Function to load Mid-Year IDP data
function loadMidYearIDPData(userId) {
    fetch(`/linemanager/midyear-idp/${userId}`, {
        method: "GET",
        headers: {
            "Accept": "application/json"
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            midYearIDPData = data.viewState.midYearData;
            console.log("Loaded Mid-Year IDP data:", midYearIDPData);
        } else {
            console.error("Error loading Mid-Year IDP data:", data.message);
        }
    })
    .catch(error => {
        console.error("Error fetching Mid-Year IDP data:", error);
    });
}

// Function to load Final-Year IDP data
function loadFinalYearIDPData(userId, year) {
    fetch(`/linemanager/finalyear-idp/${userId}?year=${year}`, {
        method: "GET",
        headers: {
            "Accept": "application/json"
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            finalYearIDPData = data.viewState.finalYearData;
            console.log("Loaded Final-Year IDP data:", finalYearIDPData);
        } else {
            console.error("Error loading Final-Year IDP data:", data.message);
        }
    })
    .catch(error => {
        console.error("Error fetching Final-Year IDP data:", error);
    });
}

// Function to create view-only Mid-Year IDP
function createViewOnlyMidYearIDP(data) {
    if (!data) {
        console.error("No Mid-Year IDP data available for view-only mode");
        return;
    }
    
    // Create view-only form
    const form = document.getElementById("midYearIDPFormDetails");
    if (form) {
        // Disable all form inputs
        const inputs = form.querySelectorAll("input, textarea");
        inputs.forEach(input => {
            input.disabled = true;
        });
        
        // Hide submit button
        const submitButton = document.getElementById("submitMidYearIDP");
        if (submitButton) {
            submitButton.style.display = "none";
        }
        
        // Set values for view-only
        setIDPFormValues(data);
    }
}

// Function to create view-only Final-Year IDP
function createViewOnlyFinalYearIDP(data) {
    if (!data) {
        console.error("No Final-Year IDP data available for view-only mode");
        return;
    }
    
    // Create view-only form
    const form = document.getElementById("midYearIDPFormDetails");
    if (form) {
        // Disable all form inputs
        const inputs = form.querySelectorAll("input, textarea");
        inputs.forEach(input => {
            input.disabled = true;
        });
        
        // Hide submit button
        const submitButton = document.getElementById("submitFinalYearIDP");
        if (submitButton) {
            submitButton.style.display = "none";
        }
        
        // Set values for view-only
        setIDPFormValues(data);
    }
}

// Function to enable Mid-Year IDP form for editing
function enableMidYearIDPForm() {
    const form = document.getElementById("midYearIDPFormDetails");
    if (form) {
        // Enable all form inputs
        const inputs = form.querySelectorAll("input, textarea");
        inputs.forEach(input => {
            input.disabled = false;
        });
        
        // Show submit button
        const submitButton = document.getElementById("submitMidYearIDP");
        if (submitButton) {
            submitButton.style.display = "inline-block";
        }
    }
}

// Function to enable Final-Year IDP form for editing
function enableFinalYearIDPForm() {
    const form = document.getElementById("midYearIDPFormDetails");
    if (form) {
        // Enable all form inputs
        const inputs = form.querySelectorAll("input, textarea");
        inputs.forEach(input => {
            input.disabled = false;
        });
        
        // Show submit button
        const submitButton = document.getElementById("submitFinalYearIDP");
        if (submitButton) {
            submitButton.style.display = "inline-block";
        }
    }
}

// Function to set IDP form values
function setIDPFormValues(data) {
    // Set each field value if it exists
    if (data.profStrengths) document.getElementById("profStrengths").value = data.profStrengths;
    if (data.profAreasForDevelopment) document.getElementById("profAreasForDevelopment").value = data.profAreasForDevelopment;
    if (data.profActionsToTake) document.getElementById("profActionsToTake").value = data.profActionsToTake;
    if (data.leaderStrengths) document.getElementById("leaderStrengths").value = data.leaderStrengths;
    if (data.leaderAreasForDevelopment) document.getElementById("leaderAreasForDevelopment").value = data.leaderAreasForDevelopment;
    if (data.leaderActionsToTake) document.getElementById("leaderActionsToTake").value = data.leaderActionsToTake;
    if (data.nextRoleShortTerm) document.getElementById("nextRoleShortTerm").value = data.nextRoleShortTerm;
    if (data.nextRoleLongTerm) document.getElementById("nextRoleLongTerm").value = data.nextRoleLongTerm;
    if (data.nextRoleMobility) document.getElementById("nextRoleMobility").value = data.nextRoleMobility;
}

// Helper function to get userId from URL
function getUserIdFromURL() {
    const pathParts = window.location.pathname.split('/');
    const userIdIndex = pathParts.indexOf('records-performance-tracker') + 1;
    if (userIdIndex < pathParts.length) {
        return pathParts[userIdIndex];
    }
    return null;
}

 // Original sidebar functionality 
 document.querySelectorAll('.sidebar ul li a').forEach(link => {
            link.addEventListener('click', function() {
                document.querySelectorAll('.sidebar ul li a').forEach(link => link.classList.remove('active'));
                this.classList.add('active');
            });
        });
        
        document.querySelectorAll('.collapsible-header').forEach(header => {
            header.addEventListener('click', function() {
                var content = this.nextElementSibling;
                if (content.style.display === 'block') {
                    content.style.display = 'none';
                } else {
                    // Hide all other collapsible contents
                    document.querySelectorAll('.collapsible-content').forEach(item => {
                        if (item !== content) {
                            item.style.display = 'none';
                        }
                    });
                    content.style.display = 'block';
                }
            });
        });
        
        document.addEventListener('DOMContentLoaded', function() {
        // Get the buttons
        const viewQuestionnaireBtn = document.getElementById('viewQuestionnaireBtn');
        const viewFeedbackBtn = document.getElementById('viewFeedbackBtn');
        
        // Get the content containers
        const questionnaireContent = document.getElementById('questionnaireContent');
        const feedbackContent = document.getElementById('feedbackContent');
        
        // Add click handlers for the buttons
        if (viewQuestionnaireBtn) {
            viewQuestionnaireBtn.addEventListener('click', function() {
                // Show questionnaire, hide feedback
                questionnaireContent.style.display = 'block';
                feedbackContent.style.display = 'none';
                
                // Update button styles
                viewQuestionnaireBtn.style.backgroundColor = 'var(--primary-color)';
                viewFeedbackBtn.style.backgroundColor = 'var(--secondary-color)';
                viewQuestionnaireBtn.classList.add('active');
                viewFeedbackBtn.classList.remove('active');
            });
        }
        
        if (viewFeedbackBtn) {
            viewFeedbackBtn.addEventListener('click', function() {
                // Show feedback, hide questionnaire
                feedbackContent.style.display = 'block';
                questionnaireContent.style.display = 'none';
                
                // Update button styles
                viewFeedbackBtn.style.backgroundColor = 'var(--primary-color)';
                viewQuestionnaireBtn.style.backgroundColor = 'var(--secondary-color)';
                viewFeedbackBtn.classList.add('active');
                viewQuestionnaireBtn.classList.remove('active');
                
                // Load feedback data if not already loaded
                loadFeedbackData();
            });
        }
    });
    
    // Function to load feedback data from the server
    function loadFeedbackData(quarter) {
    const userId = document.getElementById('userId').value;
    const objectiveFeedbackContainer = document.getElementById('objectiveFeedbackContainer');
    const skillsFeedbackContainer = document.getElementById('skillsFeedbackContainer');
    
    // Show loading state
    if (objectiveFeedbackContainer) {
        objectiveFeedbackContainer.innerHTML = '<div class="loading" style="text-align: center; padding: 30px;"><i class="fas fa-spinner fa-spin" style="font-size: 24px;"></i><p>Loading feedback data...</p></div>';
    }
    
    if (skillsFeedbackContainer) {
        skillsFeedbackContainer.innerHTML = '<div class="loading" style="text-align: center; padding: 30px;"><i class="fas fa-spinner fa-spin" style="font-size: 24px;"></i><p>Loading skills feedback data...</p></div>';
    }
    
    // Fetch feedback data from the server with the quarter parameter
    fetch(`/linemanager/get-feedback-data/${userId}?quarter=${quarter}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // Update stats
                document.getElementById('totalResponses').textContent = data.stats.totalResponses;
                document.getElementById('averageRating').textContent = data.stats.averageRating;
                document.getElementById('completionRate').textContent = data.stats.completionRate;
                
                // Generate objective feedback HTML
                let objectiveFeedbackHTML = '';
                
                if (data.objectiveFeedback && data.objectiveFeedback.length > 0) {
                    data.objectiveFeedback.forEach(objective => {
                        objectiveFeedbackHTML += generateObjectiveFeedbackHTML(objective, quarter);
                    });
                } else {
                    objectiveFeedbackHTML = `
                    <div class="empty-state" style="text-align: center; padding: 30px; background-color: #f9f9f9; border-radius: 8px;">
                        <i class="fas fa-inbox" style="font-size: 48px; color: #ccc; margin-bottom: 15px;"></i>
                        <p>No objective feedback responses available yet.</p>
                    </div>`;
                }
                
                objectiveFeedbackContainer.innerHTML = objectiveFeedbackHTML;
                
                // Generate skills feedback HTML
                let skillsFeedbackHTML = '';
                
                if (data.skillsFeedback && data.skillsFeedback.length > 0) {
                    skillsFeedbackHTML = '<div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 15px;">';
                    
                    data.skillsFeedback.forEach(skill => {
                        skillsFeedbackHTML += generateSkillFeedbackHTML(skill);
                    });
                    
                    skillsFeedbackHTML += '</div>';
                } else {
                    skillsFeedbackHTML = `
                    <div class="empty-state" style="text-align: center; padding: 30px; background-color: #f9f9f9; border-radius: 8px;">
                        <i class="fas fa-inbox" style="font-size: 48px; color: #ccc; margin-bottom: 15px;"></i>
                        <p>No skills feedback responses available yet.</p>
                    </div>`;
                }
                
                skillsFeedbackContainer.innerHTML = skillsFeedbackHTML;
                
                // Update individual answers
                updateIndividualAnswers(data.individualAnswers);
            } else {
                // Show error message
                showFeedbackError('Error loading feedback data: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error fetching feedback data:', error);
            showFeedbackError('Error loading feedback data. Please try again later.');
        });
}

    document.addEventListener('DOMContentLoaded', function() {
        // Get the buttons
        const viewQuestionnaireBtn = document.getElementById('viewQuestionnaireBtn');
        const viewFeedbackBtn = document.getElementById('viewFeedbackBtn');
        
        // Get the content containers
        const questionnaireContent = document.getElementById('questionnaireContent');
        const feedbackContent = document.getElementById('feedbackContent');
        
        // Add click handlers for the buttons
        if (viewQuestionnaireBtn) {
            viewQuestionnaireBtn.addEventListener('click', function() {
                // Show questionnaire, hide feedback
                questionnaireContent.style.display = 'block';
                feedbackContent.style.display = 'none';
                
                // Update button styles
                viewQuestionnaireBtn.style.backgroundColor = 'var(--primary-color)';
                viewFeedbackBtn.style.backgroundColor = 'var(--secondary-color)';
                viewQuestionnaireBtn.classList.add('active');
                viewFeedbackBtn.classList.remove('active');
            });
        }
        
        if (viewFeedbackBtn) {
            viewFeedbackBtn.addEventListener('click', function() {
                // Show feedback, hide questionnaire
                feedbackContent.style.display = 'block';
                questionnaireContent.style.display = 'none';
                
                // Update button styles
                viewFeedbackBtn.style.backgroundColor = 'var(--primary-color)';
                viewQuestionnaireBtn.style.backgroundColor = 'var(--secondary-color)';
                viewFeedbackBtn.classList.add('active');
                viewQuestionnaireBtn.classList.remove('active');
                
                // Load feedback data if not already loaded
                loadFeedbackData();
            });
        }
    });
    
   // Updated loadFeedbackData function that properly uses the quarter parameter
function loadFeedbackData(quarter) {
    console.log(`loadFeedbackData called with quarter: ${quarter}`);
    
    const userId = document.getElementById('userId').value;
    const objectiveFeedbackContainer = document.getElementById('objectiveFeedbackContainer');
    const skillsFeedbackContainer = document.getElementById('skillsFeedbackContainer');
    
    // Show loading state
    if (objectiveFeedbackContainer) {
        objectiveFeedbackContainer.innerHTML = '<div class="loading" style="text-align: center; padding: 30px;"><i class="fas fa-spinner fa-spin" style="font-size: 24px;"></i><p>Loading feedback data...</p></div>';
    }
    
    if (skillsFeedbackContainer) {
        skillsFeedbackContainer.innerHTML = '<div class="loading" style="text-align: center; padding: 30px;"><i class="fas fa-spinner fa-spin" style="font-size: 24px;"></i><p>Loading skills feedback data...</p></div>';
    }
    
    // Ensure the quarter is formatted correctly (Q1, Q2, etc.)
    const formattedQuarter = quarter.startsWith('Q') ? quarter : `Q${quarter}`;
    
    // Fetch feedback data from the server with the quarter parameter
    const apiUrl = `/linemanager/get-feedback-data/${userId}?quarter=${formattedQuarter}`;
    console.log(`Fetching data from: ${apiUrl}`);
    
    fetch(apiUrl)
        .then(response => {
            if (!response.ok) {
                throw new Error(`Server responded with status ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log(`Received data for ${formattedQuarter}:`, data);
            
            if (data.success) {
                // Update stats
                document.getElementById('totalResponses').textContent = data.stats.totalResponses;
                document.getElementById('averageRating').textContent = data.stats.averageRating;
                document.getElementById('completionRate').textContent = data.stats.completionRate;
                
                // Generate objective feedback HTML
                let objectiveFeedbackHTML = '';
                
                if (data.objectiveFeedback && data.objectiveFeedback.length > 0) {
                    data.objectiveFeedback.forEach(objective => {
                        objectiveFeedbackHTML += generateObjectiveFeedbackHTML(objective, formattedQuarter);
                    });
                } else {
                    objectiveFeedbackHTML = `
                    <div class="empty-state" style="text-align: center; padding: 30px; background-color: #f9f9f9; border-radius: 8px;">
                        <i class="fas fa-inbox" style="font-size: 48px; color: #ccc; margin-bottom: 15px;"></i>
                        <p>No objective feedback responses available yet for ${formattedQuarter}.</p>
                    </div>`;
                }
                
                objectiveFeedbackContainer.innerHTML = objectiveFeedbackHTML;
                
                // Generate skills feedback HTML
                let skillsFeedbackHTML = '';
                
                if (data.skillsFeedback && data.skillsFeedback.length > 0) {
                    skillsFeedbackHTML = '<div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 15px;">';
                    
                    data.skillsFeedback.forEach(skill => {
                        skillsFeedbackHTML += generateSkillFeedbackHTML(skill);
                    });
                    
                    skillsFeedbackHTML += '</div>';
                } else {
                    skillsFeedbackHTML = `
                    <div class="empty-state" style="text-align: center; padding: 30px; background-color: #f9f9f9; border-radius: 8px;">
                        <i class="fas fa-inbox" style="font-size: 48px; color: #ccc; margin-bottom: 15px;"></i>
                        <p>No skills feedback responses available yet for ${formattedQuarter}.</p>
                    </div>`;
                }
                
                skillsFeedbackContainer.innerHTML = skillsFeedbackHTML;
                
                // Update individual answers
                updateIndividualAnswers(data.individualAnswers, formattedQuarter);
            } else {
                // Show error message
                showFeedbackError(`Error loading feedback data for ${formattedQuarter}: ${data.message}`);
            }
        })
        .catch(error => {
            console.error(`Error fetching feedback data for ${formattedQuarter}:`, error);
            showFeedbackError(`Error loading feedback data for ${formattedQuarter}. Please try again later. (${error.message})`);
        });
}
    
    // Function to filter individual answers
    function filterAnswers() {
        const responderFilter = document.getElementById('responderFilter');
        const questionFilter = document.getElementById('questionFilter');
        
        if (!responderFilter || !questionFilter) return;
        
        const responderValue = responderFilter.value;
        const questionValue = questionFilter.value;
        
        const answerCards = document.querySelectorAll('.answer-card');
        
        answerCards.forEach(card => {
            let showCard = true;
            
            // Filter by responder type
            if (responderValue !== 'all') {
                const responderType = card.querySelector('h4').textContent.toLowerCase();
                if (!responderType.includes(responderValue.toLowerCase())) {
                    showCard = false;
                }
            }
            
            // Filter by question/objective
            if (questionValue !== 'all' && showCard) {
                const questions = card.querySelectorAll('h5');
                let hasMatchingQuestion = false;
                
                questions.forEach(question => {
                    if (questionValue === 'obj1' && question.textContent.includes('Customer Satisfaction')) {
                        hasMatchingQuestion = true;
                    } else if (questionValue === 'obj2' && question.textContent.includes('Sales Revenue')) {
                        hasMatchingQuestion = true;
                    } else if (questionValue === 'obj3' && question.textContent.includes('Operating Costs')) {
                        hasMatchingQuestion = true;
                    }
                });
                
                if (!hasMatchingQuestion) {
                    showCard = false;
                }
            }
            
            // Show or hide the card
            card.style.display = showCard ? 'block' : 'none';
        });
    }

    // Function to load and display feedback data
async function loadAndDisplayFeedbackData(quarter) {
    try {
        const userId = document.getElementById('userId').value;
        if (!userId) {
            console.error("User ID not found in the page");
            return;
        }

        // Show loading state
        const objectiveFeedbackContainer = document.getElementById('objectiveFeedbackContainer');
        const skillsFeedbackContainer = document.getElementById('skillsFeedbackContainer');
        
        if (objectiveFeedbackContainer) {
            objectiveFeedbackContainer.innerHTML = '<div class="loading" style="text-align: center; padding: 30px;"><i class="fas fa-spinner fa-spin" style="font-size: 24px;"></i><p>Loading feedback data...</p></div>';
        }
        
        if (skillsFeedbackContainer) {
            skillsFeedbackContainer.innerHTML = '<div class="loading" style="text-align: center; padding: 30px;"><i class="fas fa-spinner fa-spin" style="font-size: 24px;"></i><p>Loading skills feedback data...</p></div>';
        }

        // Fetch feedback data from the server
        const response = await fetch(`/linemanager/get-feedback-data/${userId}?quarter=${quarter}`);
        
        if (!response.ok) {
            throw new Error(`Failed to fetch feedback data: ${response.statusText}`);
        }
        
        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message || 'Failed to load feedback data');
        }

        // Update stats
        document.getElementById('totalResponses').textContent = data.stats.totalResponses || '0';
        document.getElementById('averageRating').textContent = data.stats.averageRating || '0.0';
        document.getElementById('completionRate').textContent = data.stats.completionRate || '0%';

        // Display objectives feedback
        if (objectiveFeedbackContainer) {
            if (data.objectiveFeedback && data.objectiveFeedback.length > 0) {
                let objectiveFeedbackHTML = '';
                
                data.objectiveFeedback.forEach(objective => {
                    objectiveFeedbackHTML += `
                    <div class="feedback-card" style="background-color: white; border-radius: 8px; padding: 20px; margin-bottom: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                        <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 15px;">
                            <div>
                                <h4 style="margin: 0; color: var(--primary-color);">${objective.objectiveDescrpt || 'Unnamed Objective'}</h4>
                                <p style="margin: 5px 0 0 0; color: #555; font-size: 0.9em;">${objective.objectiveKPI || 'N/A'} | Target: ${objective.objectiveTarget || 'N/A'} ${objective.objectiveUOM || ''}</p>
                            </div>
                            <div class="rating" style="background-color: var(--primary-color); color: white; padding: 5px 10px; border-radius: 20px; font-weight: bold;">
                                ${objective.averageRating ? objective.averageRating.toFixed(1) : 'N/A'} <i class="fas fa-star" style="font-size: 0.8em;"></i>
                            </div>
                        </div>
                        
                        <h5 style="margin: 15px 0 10px 0; color: var(--secondary-color);">Feedback Comments</h5>
                        ${objective.comments && objective.comments.length > 0 ? 
                            objective.comments.map(comment => `
                                <div class="comment" style="background-color: #f9f9f9; padding: 10px; border-radius: 6px; margin-bottom: 10px;">
                                    <p style="margin: 0;">${comment.text || 'No comment provided'}</p>
                                    <small style="display: block; margin-top: 5px; color: #777;">${comment.responderType || 'Anonymous'} - ${quarter}</small>
                                </div>
                            `).join('') : 
                            '<div class="no-comments" style="text-align: center; padding: 15px; background-color: #f9f9f9; border-radius: 6px;"><p style="margin: 0; color: #666;">No feedback comments available for this objective.</p></div>'
                        }
                    </div>
                    `;
                });
                
                objectiveFeedbackContainer.innerHTML = objectiveFeedbackHTML;
            } else {
                objectiveFeedbackContainer.innerHTML = `
                <div class="empty-state" style="text-align: center; padding: 30px; background-color: #f9f9f9; border-radius: 8px;">
                    <i class="fas fa-inbox" style="font-size: 48px; color: #ccc; margin-bottom: 15px;"></i>
                    <p>No objective feedback responses available yet.</p>
                </div>`;
            }
        }

        // Display skills feedback
        if (skillsFeedbackContainer) {
            if (data.skillsFeedback && data.skillsFeedback.length > 0) {
                let skillsFeedbackHTML = `<div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 15px;">`;
                
                data.skillsFeedback.forEach(skill => {
                    skillsFeedbackHTML += `
                    <div class="skill-card" style="background-color: white; border-radius: 8px; padding: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                            <h4 style="margin: 0; color: var(--primary-color);">${skill.skillName || 'Unnamed Skill'}</h4>
                            <span class="skill-type" style="background-color: ${skill.skillType === 'Soft' ? '#4CAF50' : '#2196F3'}; color: white; padding: 3px 8px; border-radius: 12px; font-size: 0.8em;">${skill.skillType || 'Skill'}</span>
                        </div>
                        
                        <div class="rating-bar" style="height: 8px; background-color: #e0e0e0; border-radius: 4px; margin: 10px 0;">
                            <div style="height: 100%; width: ${((skill.averageRating || 0)/5)*100}%; background-color: var(--secondary-color); border-radius: 4px;"></div>
                        </div>
                        
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <span style="font-weight: bold; color: var(--primary-color);">${skill.averageRating ? skill.averageRating.toFixed(1) : 'N/A'}/5.0</span>
                            <span style="color: #777; font-size: 0.9em;">Based on ${skill.responseCount || 0} responses</span>
                        </div>
                    </div>
                    `;
                });
                
                skillsFeedbackHTML += `</div>`;
                skillsFeedbackContainer.innerHTML = skillsFeedbackHTML;
            } else {
                skillsFeedbackContainer.innerHTML = `
                <div class="empty-state" style="text-align: center; padding: 30px; background-color: #f9f9f9; border-radius: 8px;">
                    <i class="fas fa-inbox" style="font-size: 48px; color: #ccc; margin-bottom: 15px;"></i>
                    <p>No skills feedback responses available yet.</p>
                </div>`;
            }
        }

        // Update individual answers if we have them
        const individualAnswersContainer = document.getElementById('individualAnswersContainer');
        if (individualAnswersContainer && data.individualAnswers && data.individualAnswers.length > 0) {
            let answersHTML = '';
            
            data.individualAnswers.forEach(answer => {
                answersHTML += `
                <div class="answer-card" style="background-color: white; border-radius: 8px; padding: 20px; margin-bottom: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                    <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 15px;">
                        <div>
                            <h4 style="margin: 0; color: var(--primary-color);">Responder #${answer.responderId || 'Anonymous'} (${answer.responderType || 'Peer'})</h4>
                            <p style="margin: 5px 0 0 0; color: #555; font-size: 0.9em;">Submitted on ${new Date(answer.submittedDate).toLocaleDateString()}</p>
                        </div>
                        <div class="response-status" style="background-color: #4CAF50; color: white; padding: 5px 10px; border-radius: 20px; font-size: 0.8em; font-weight: bold;">
                            Complete
                        </div>
                    </div>
                    
                    ${answer.objectiveAnswers && answer.objectiveAnswers.map(obj => `
                        <div class="answer-group" style="margin-bottom: 20px; padding-bottom: 15px; border-bottom: 1px solid #eee;">
                            <h5 style="margin: 0 0 10px 0; color: var(--secondary-color);">${obj.objectiveName || 'Unnamed Objective'}</h5>
                            <div style="display: flex; align-items: center; margin-bottom: 10px;">
                                <div style="margin-right: 15px;">
                                    <strong style="color: #555;">Rating:</strong>
                                    <span style="font-weight: bold; color: var(--primary-color); margin-left: 5px;">${obj.rating || 'N/A'}/5.0</span>
                                </div>
                                <div class="star-display" style="color: #FFD700;">
                                    ${generateStarRating(obj.rating || 0)}
                                </div>
                            </div>
                            <div>
                                <strong style="color: #555;">Comment:</strong>
                                <p style="margin: 5px 0 0 0;">${obj.comment || 'No comment provided'}</p>
                            </div>
                        </div>
                    `).join('')}
                    
                    ${answer.skillRatings && Object.keys(answer.skillRatings).length > 0 ? `
                        <div class="skill-ratings" style="background-color: #f9f9f9; border-radius: 6px; padding: 15px;">
                            <h5 style="margin: 0 0 10px 0; color: var(--secondary-color);">Skills Assessment</h5>
                            <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 10px;">
                                ${Object.entries(answer.skillRatings).map(([skillName, rating]) => `
                                    <div class="skill-rating" style="display: flex; justify-content: space-between;">
                                        <span>${skillName}:</span>
                                        <strong>${rating}/5</strong>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    ` : ''}
                </div>
                `;
            });
            
            individualAnswersContainer.innerHTML = answersHTML;
        }

    } catch (error) {
        console.error('Error loading feedback data:', error);
        
        // Update error state in the UI
        const containers = [
            document.getElementById('objectiveFeedbackContainer'),
            document.getElementById('skillsFeedbackContainer'),
            document.getElementById('individualAnswersContainer')
        ];
        
        containers.forEach(container => {
            if (container) {
                container.innerHTML = `
                <div class="error-state" style="text-align: center; padding: 30px; background-color: #fff8f8; border-radius: 8px; border: 1px solid #ffebee;">
                    <i class="fas fa-exclamation-circle" style="font-size: 48px; color: #f44336; margin-bottom: 15px;"></i>
                    <p>Error loading feedback data. Please try again later.</p>
                    <p style="font-size: 0.9em; color: #666; margin-top: 10px;">${error.message}</p>
                </div>`;
            }
        });
    }
}
function generateObjectiveFeedbackHTML(objective, quarter) {
    return `
    <div class="feedback-card" style="background-color: white; border-radius: 8px; padding: 20px; margin-bottom: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
        <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 15px;">
            <div>
                <h4 style="margin: 0; color: var(--primary-color);">${objective.objectiveDescrpt || 'Unnamed Objective'}</h4>
                <p style="margin: 5px 0 0 0; color: #555; font-size: 0.9em;">${objective.objectiveKPI || 'N/A'} | Target: ${objective.objectiveTarget || 'N/A'} ${objective.objectiveUOM || ''}</p>
            </div>
            <div class="rating" style="background-color: var(--primary-color); color: white; padding: 5px 10px; border-radius: 20px; font-weight: bold;">
                ${objective.averageRating ? objective.averageRating.toFixed(1) : 'N/A'} <i class="fas fa-star" style="font-size: 0.8em;"></i>
            </div>
        </div>
        
        <h5 style="margin: 15px 0 10px 0; color: var(--secondary-color);">Feedback Comments</h5>
        ${objective.comments && objective.comments.length > 0 ? 
            objective.comments.map(comment => `
                <div class="comment" style="background-color: #f9f9f9; padding: 10px; border-radius: 6px; margin-bottom: 10px;">
                    <p style="margin: 0;">${comment.text || 'No comment provided'}</p>
                    <small style="display: block; margin-top: 5px; color: #777;">${comment.responderType || 'Anonymous'} - ${quarter}</small>
                </div>
            `).join('') : 
            '<div class="no-comments" style="text-align: center; padding: 15px; background-color: #f9f9f9; border-radius: 6px;"><p style="margin: 0; color: #666;">No feedback comments available for this objective.</p></div>'
        }
    </div>
    `;
}

// Helper function to generate skill feedback HTML
function generateSkillFeedbackHTML(skill) {
    return `
    <div class="skill-card" style="background-color: white; border-radius: 8px; padding: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
            <h4 style="margin: 0; color: var(--primary-color);">${skill.skillName || 'Unnamed Skill'}</h4>
            <span class="skill-type" style="background-color: ${skill.skillType === 'Soft' ? '#4CAF50' : '#2196F3'}; color: white; padding: 3px 8px; border-radius: 12px; font-size: 0.8em;">${skill.skillType || 'Skill'}</span>
        </div>
        
        <div class="rating-bar" style="height: 8px; background-color: #e0e0e0; border-radius: 4px; margin: 10px 0;">
            <div style="height: 100%; width: ${((skill.averageRating || 0)/5)*100}%; background-color: var(--secondary-color); border-radius: 4px;"></div>
        </div>
        
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <span style="font-weight: bold; color: var(--primary-color);">${skill.averageRating ? skill.averageRating.toFixed(1) : 'N/A'}/5.0</span>
            <span style="color: #777; font-size: 0.9em;">Based on ${skill.responseCount || 0} responses</span>
        </div>
    </div>
    `;
}

// Helper function to update individual answers section
function updateIndividualAnswers(individualAnswers) {
    const individualAnswersContainer = document.getElementById('individualAnswersContainer');
    
    if (!individualAnswersContainer) return;
    
    if (!individualAnswers || individualAnswers.length === 0) {
        individualAnswersContainer.innerHTML = `
        <div class="empty-state" style="text-align: center; padding: 30px; background-color: #f9f9f9; border-radius: 8px;">
            <i class="fas fa-inbox" style="font-size: 48px; color: #ccc; margin-bottom: 15px;"></i>
            <p>No individual feedback responses available yet.</p>
        </div>`;
        return;
    }
    
    let answersHTML = '';
    
    individualAnswers.forEach(answer => {
        answersHTML += `
        <div class="answer-card" style="background-color: white; border-radius: 8px; padding: 20px; margin-bottom: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
            <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 15px;">
                <div>
                    <h4 style="margin: 0; color: var(--primary-color);">Responder #${answer.responderId || 'Anonymous'} (${answer.responderType || 'Peer'})</h4>
                    <p style="margin: 5px 0 0 0; color: #555; font-size: 0.9em;">Submitted on ${new Date(answer.submittedDate).toLocaleDateString()}</p>
                </div>
                <div class="response-status" style="background-color: #4CAF50; color: white; padding: 5px 10px; border-radius: 20px; font-size: 0.8em; font-weight: bold;">
                    Complete
                </div>
            </div>
            
            ${answer.objectiveAnswers && answer.objectiveAnswers.map(obj => `
                <div class="answer-group" style="margin-bottom: 20px; padding-bottom: 15px; border-bottom: 1px solid #eee;">
                    <h5 style="margin: 0 0 10px 0; color: var(--secondary-color);">${obj.objectiveName || 'Unnamed Objective'}</h5>
                    <div style="display: flex; align-items: center; margin-bottom: 10px;">
                        <div style="margin-right: 15px;">
                            <strong style="color: #555;">Rating:</strong>
                            <span style="font-weight: bold; color: var(--primary-color); margin-left: 5px;">${obj.rating || 'N/A'}/5.0</span>
                        </div>
                        <div class="star-display" style="color: #FFD700;">
                            ${generateStarRating(obj.rating || 0)}
                        </div>
                    </div>
                    <div>
                        <strong style="color: #555;">Comment:</strong>
                        <p style="margin: 5px 0 0 0;">${obj.comment || 'No comment provided'}</p>
                    </div>
                </div>
            `).join('')}
            
            ${answer.skillRatings && Object.keys(answer.skillRatings).length > 0 ? `
                <div class="skill-ratings" style="background-color: #f9f9f9; border-radius: 6px; padding: 15px;">
                    <h5 style="margin: 0 0 10px 0; color: var(--secondary-color);">Skills Assessment</h5>
                    <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 10px;">
                        ${Object.entries(answer.skillRatings).map(([skillName, rating]) => `
                            <div class="skill-rating" style="display: flex; justify-content: space-between;">
                                <span>${skillName}:</span>
                                <strong>${rating}/5</strong>
                            </div>
                        `).join('')}
                    </div>
                </div>
            ` : ''}
        </div>
        `;
    });
    
    individualAnswersContainer.innerHTML = answersHTML;
    
    // Set up filters
    setupFilters();
}

// Helper function to set up filters for individual answers
function setupFilters() {
    const responderFilter = document.getElementById('responderFilter');
    const questionFilter = document.getElementById('questionFilter');
    
    if (responderFilter && questionFilter) {
        responderFilter.addEventListener('change', filterAnswers);
        questionFilter.addEventListener('change', filterAnswers);
    }
}

// Helper function to generate star rating HTML
function generateStarRating(rating) {
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 >= 0.5;
    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
    
    let starsHTML = '';
    
    // Add full stars
    for (let i = 0; i < fullStars; i++) {
        starsHTML += '<i class="fas fa-star"></i> ';
    }
    
    // Add half star if needed
    if (hasHalfStar) {
        starsHTML += '<i class="fas fa-star-half-alt"></i> ';
    }
    
    // Add empty stars
    for (let i = 0; i < emptyStars; i++) {
        starsHTML += '<i class="far fa-star"></i> ';
    }
    
    return starsHTML.trim();
}

// Helper function to show feedback error
function showFeedbackError(message) {
    const containers = [
        document.getElementById('objectiveFeedbackContainer'),
        document.getElementById('skillsFeedbackContainer'),
        document.getElementById('individualAnswersContainer')
    ];
    
    containers.forEach(container => {
        if (container) {
            container.innerHTML = `
            <div class="error-state" style="text-align: center; padding: 30px; background-color: #fff8f8; border-radius: 8px; border: 1px solid #ffebee;">
                <i class="fas fa-exclamation-circle" style="font-size: 48px; color: #f44336; margin-bottom: 15px;"></i>
                <p>${message}</p>
            </div>`;
        }
    });
}

// Helper function to process skills feedback 
async function processSkillsFeedback(skills, feedbackId, feedbackIdField) {
    for (const skill of skills) {
        const { jobReqSkillId, rating } = skill;
        
        // Get the feedback_qSkillsId from the mapping table
        const { data: skillMapping, error: mappingError } = await supabase
            .from('feedbacks_questions-skills')
            .select('feedback_qSkillsId')
            .eq(feedbackIdField, feedbackId)
            .eq('jobReqSkillId', jobReqSkillId)
            .single();
            
        if (mappingError || !skillMapping) {
            console.error('Error finding skill mapping:', mappingError);
            continue; // Skip this skill if mapping not found
        }
        
        // Insert the feedback answer
        // Use the correct column name skillsQuantInput (not skillQuantInput)
        const { error: insertError } = await supabase
            .from('feedbacks_answers-skills')
            .insert({
                feedback_qSkillsId: skillMapping.feedback_qSkillsId,
                skillsQuantInput: parseInt(rating), // Make sure this is using the right column name
                created_at: new Date()
            });
            
        if (insertError) {
            console.error('Error inserting skill feedback:', insertError);
        }
    }
}

// Helper function to generate star ratings HTML
function generateStarRating(rating) {
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 >= 0.5;
    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
    
    let starsHTML = '';
    
    // Add full stars
    for (let i = 0; i < fullStars; i++) {
        starsHTML += '<i class="fas fa-star"></i> ';
    }
    
    // Add half star if needed
    if (hasHalfStar) {
        starsHTML += '<i class="fas fa-star-half-alt"></i> ';
    }
    
    // Add empty stars
    for (let i = 0; i < emptyStars; i++) {
        starsHTML += '<i class="far fa-star"></i> ';
    }
    
    return starsHTML.trim();
}

// Add click event listeners once the page loads
document.addEventListener('DOMContentLoaded', function() {
    // Get the buttons
    const viewQuestionnaireBtn = document.getElementById('viewQuestionnaireBtn');
    const viewFeedbackBtn = document.getElementById('viewFeedbackBtn');
    
    // Get the content containers
    const questionnaireContent = document.getElementById('questionnaireContent');
    const feedbackContent = document.getElementById('feedbackContent');
    
    // Add click handlers for the buttons
    if (viewQuestionnaireBtn) {
        viewQuestionnaireBtn.addEventListener('click', function() {
            // Show questionnaire, hide feedback
            questionnaireContent.style.display = 'block';
            feedbackContent.style.display = 'none';
            
            // Update button styles
            viewQuestionnaireBtn.style.backgroundColor = 'var(--primary-color)';
            viewFeedbackBtn.style.backgroundColor = 'var(--secondary-color)';
            viewQuestionnaireBtn.classList.add('active');
            viewFeedbackBtn.classList.remove('active');
        });
    }
    
    if (viewFeedbackBtn) {
        viewFeedbackBtn.addEventListener('click', function() {
            // Show feedback, hide questionnaire
            feedbackContent.style.display = 'block';
            questionnaireContent.style.display = 'none';
            
            // Update button styles
            viewFeedbackBtn.style.backgroundColor = 'var(--primary-color)';
            viewQuestionnaireBtn.style.backgroundColor = 'var(--secondary-color)';
            viewFeedbackBtn.classList.add('active');
            viewQuestionnaireBtn.classList.remove('active');
            
            // Get the active quarter from the feedback button data-attribute
            const activeQuarterElement = document.querySelector('.step.accessible[data-quarter]');
            const quarter = activeQuarterElement ? `Q${activeQuarterElement.getAttribute('data-quarter')}` : 'Q1';
            
            // Load feedback data
            loadAndDisplayFeedbackData(quarter);
        });
    }
    
    // Add filter functionality for individual answers
    const responderFilter = document.getElementById('responderFilter');
    const questionFilter = document.getElementById('questionFilter');
    
    if (responderFilter) {
        responderFilter.addEventListener('change', filterAnswers);
    }
    
    if (questionFilter) {
        questionFilter.addEventListener('change', filterAnswers);
    }
    
    // Tabs functionality in the feedback view
    const summaryTab = document.getElementById('summaryTab');
    const answersTab = document.getElementById('answersTab');
    const summaryContent = document.getElementById('summaryContent');
    const answersContent = document.getElementById('answersContent');
    
    if (summaryTab && answersTab) {
        summaryTab.addEventListener('click', function() {
            // Show summary, hide answers
            summaryContent.style.display = 'block';
            answersContent.style.display = 'none';
            
            // Update tab styles
            summaryTab.style.backgroundColor = 'var(--primary-color)';
            summaryTab.style.color = 'white';
            answersTab.style.backgroundColor = '#f1f1f1';
            answersTab.style.color = '#333';
        });
        
        answersTab.addEventListener('click', function() {
            // Show answers, hide summary
            answersContent.style.display = 'block';
            summaryContent.style.display = 'none';
            
            // Update tab styles
            answersTab.style.backgroundColor = 'var(--primary-color)';
            answersTab.style.color = 'white';
            summaryTab.style.backgroundColor = '#f1f1f1';
            summaryTab.style.color = '#333';
        });
    }
});

// Function to filter individual answers
function filterAnswers() {
    const responderFilter = document.getElementById('responderFilter');
    const questionFilter = document.getElementById('questionFilter');
    
    if (!responderFilter || !questionFilter) return;
    
    const responderValue = responderFilter.value;
    const questionValue = questionFilter.value;
    
    const answerCards = document.querySelectorAll('.answer-card');
    
    answerCards.forEach(card => {
        let showCard = true;
        
        // Filter by responder type
        if (responderValue !== 'all') {
            const responderType = card.querySelector('h4').textContent.toLowerCase();
            if (!responderType.includes(responderValue.toLowerCase())) {
                showCard = false;
            }
        }
        
        // Filter by question/objective
        if (questionValue !== 'all' && showCard) {
            const questions = card.querySelectorAll('h5');
            let hasMatchingQuestion = false;
            
            questions.forEach(question => {
                if (questionValue === 'obj1' && question.textContent.includes('Customer Satisfaction')) {
                    hasMatchingQuestion = true;
                } else if (questionValue === 'obj2' && question.textContent.includes('Sales Revenue')) {
                    hasMatchingQuestion = true;
                } else if (questionValue === 'obj3' && question.textContent.includes('Operating Costs')) {
                    hasMatchingQuestion = true;
                }
            });
            
            if (!hasMatchingQuestion) {
                showCard = false;
            }
        }
        
        // Show or hide the card
        card.style.display = showCard ? 'block' : 'none';
    });
}

        
            </script>
        </div>
    </div>
</body>
</html>