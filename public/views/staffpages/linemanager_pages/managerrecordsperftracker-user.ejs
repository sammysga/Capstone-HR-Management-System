<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Personal Information & Career Progression</title>
    <link rel="stylesheet" href="/css/sidebar.css">
    <link rel="stylesheet" href="/css/hr_pages.css">
    <link rel="stylesheet" href="/css/recordsandperformancetracker.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

</head>

<style>
    h2 {
    margin-bottom: 20px; /* Adjust the value as needed for spacing */
}
.header-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr); /* Three equal columns */
    grid-template-rows: repeat(2, auto); /* Two rows */
    gap: 10px; /* Space between cells */
    text-align: left; /* Left-align the content */
    font-size: 1em;
}

.header-grid div {
    padding: 5px;
    font-weight: normal;
}

.header-grid strong {
    font-weight: bold;
}

/* .step.disabled {
    pointer-events: none;
    opacity: 0.5;
} */

</style>

<body>
    <%- include('../../partials/linemanager_partials') %>

    <!-- Main content area -->
    <div class="main-content">
        <div class="container">
            <div class="columns">
                <!-- Column 1: Personal Information -->
                <div class="column" id="personal-info">
                    <div class="section">
                        <img src="/images/profile.png" alt="Profile Picture" class="profile-pic">
                        <h2>Personal Information</h2>
                        <p><strong>Name:</strong> <span id="nameDisplay"><%= user.firstName %> <%= user.lastName %></span></p>
                        <p><strong>Phone:</strong> <span id="phoneDisplay"><%= user.phoneNumber %></span></p>
                        <p><strong>Date of Birth:</strong> <span id="dobDisplay"><%= user.dateOfBirth %></span></p>
                        <p><strong>Emergency Contact:</strong> <span id="emergencyDisplay"><%= user.emergencyContactName %> (<%= user.emergencyContactNumber %>)</span></p>
                    </div>
                    <div class="section">
                        <h2>Employment Details</h2>
                        <p><strong>Job Title:</strong> <span id="jobTitleDisplay"><%= user.jobTitle %></span></p>
                        <p><strong>Department:</strong> <span id="departmentDisplay"><%= user.departmentName %></span></p>
                        <p><strong>Employment Type:</strong> <span id="employmentTypeDisplay"><%= user.employmentType %></span></p>
                        <p><strong>Hire Date:</strong> <span id="hireDateDisplay"><%= user.hireDate %></span></p>
                    </div>
                </div>
        
                <!-- Column 2: Career Progression -->
                <div class="column" id="career-progression">
                    <div class="section">
                        <h2>Career Progression</h2>
                        <div class="milestone-container">
                            <div class="milestone">
                                <div class="milestone-label">
                                    <h4>Milestone 1</h4>
                                    <p>Joined Company</p>
                                </div>
                            </div>
                            <div class="milestone">
                                <div class="milestone-label">
                                    <h4>Milestone 2</h4>
                                    <p>Promoted to Junior Developer</p>
                                </div>
                            </div>
                            <div class="milestone">
                                <div class="milestone-label">
                                    <h4>Milestone 3</h4>
                                    <p>Completed Major Project</p>
                                </div>
                            </div>
                            <div class="milestone">
                                <div class="milestone-label">
                                    <h4>Milestone 4</h4>
                                    <p>Promoted to Developer</p>
                                </div>
                            </div>
                            <div class="milestone">
                                <div class="milestone-label">
                                    <h4>Milestone 5</h4>
                                    <p>Achieved Team Lead Role</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
        
                <!-- Column 3: Degree, Experiences, and Uploaded Certifications -->
                <div class="column" id="degree-experience-certifications">
                    <div class="section">
                        <h2>Degree</h2>
                        <p>Bachelor of Science in Computer Science</p>
                        <p>University of Technology - Graduated 2012</p>
                    </div>
        
                    <div class="section">
                        <h2>Experiences</h2>
                        <p>Software Engineer at XYZ Corp (2015 - Present)</p>
                        <p>Junior Developer at ABC Inc. (2012 - 2015)</p>
                    </div>
        
                    <div class="section">
                        <h2>Uploaded Certifications</h2>
                        <p>Certified Scrum Master (CSM)</p>
                        <p>Oracle Certified Java Programmer</p>
                        <p>Microsoft Certified: Azure Developer Associate</p>
                    </div>
                </div>
            </div>
        
            <!-- Below the three columns -->
            <section id="attendance-logs">
                <h2>Attendance Logs</h2>
                <table>
                    <thead>
                        <tr>
                            <th>Last Name</th>
                            <th>First Name</th>
                            <th>Date</th>
                            <th>Department</th>
                            <th>Job Position</th>
                            <th>Time In</th>
                            <th>Time Out</th>
                            <th>Active Working Hours</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Doe</td>
                            <td>John</td>
                            <td>2024-10-30</td>
                            <td>Finance</td>
                            <td>Financial Analyst</td>
                            <td>08:00 AM</td>
                            <td>05:00 PM</td>
                            <td>8 Hours</td>
                        </tr>
                    </tbody>
                </table>
            </section>
        
            <section id="objective-skill-progress">
                <h2>Objective-based Skill Quarterly Progress Overview</h2>
                <table>
                    <thead>
                        <tr>
                            <th>KRA/Objectives</th>
                            <th>KPI</th>
                            <th>Target</th>
                            <th>UOM</th>
                            <th>Assigned Weight</th>
                            <th>Current Score</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Improve Financial Reporting</td>
                            <td>Accuracy Rate</td>
                            <td>95%</td>
                            <td>%</td>
                            <td>20%</td>
                            <td>90%</td>
                        </tr>
                    </tbody>
                </table>
            </section>
        
            <section id="skill-gap-analysis">
                <h2>Job Required Skill and Gap Analysis Quarterly Overview</h2>
                <h3>Hard Skills</h3>
                <p>Analysis, Reporting, Forecasting</p>
                <h3>Soft Skills</h3>
                <p>Communication, Teamwork, Adaptability</p>
            </section>



<section class="stepper">
    <h2>Objective and Performance Review Tracker</h2>
    <div class="stepper-container">
        <div class="step <%= viewState.viewOnlyStatus['objectivesettings'] ? 'view-only' : 'accessible' %>" id="objectivesButton">
            <div class="step-icon"><i class="fa fa-bullseye"></i></div>
            <div class="step-label">
                Objective Setting
                <% if (viewState.viewOnlyStatus['objectivesettings']) { %>
                    (View-Only)
                <% } else { %>
                    (Editable)
                <% } %>
            </div>
        </div>

        <div class="step <%= (viewState.submittedObjectives && viewState.submittedObjectives.length > 0) ? 'accessible' : 'disabled' %>" id="feedbackButtonQ1" data-quarter="1" onclick="showFeedbackForm()">
            <div class="step-icon"><i class="fa fa-users"></i></div>
            <div class="step-label">
                [1/4] 360 Degree Feedback
                <% if (viewState.viewOnlyStatus['360degreefeedbacks']) { %>
                    (View-Only)
                <% } else { %>
                    (Editable)
                <% } %>
            </div>
            <% if (!(viewState.submittedObjectives && viewState.submittedObjectives.length > 0)) { %>
                <div class="notice">You must submit objectives first.</div>
            <% } %>
        </div>

        <div class="step <%= (viewState.submittedObjectives && viewState.submittedObjectives.length > 0 && viewState.viewOnlyStatus['360degreefeedbacks']) ? 'accessible' : 'disabled' %>" id="feedbackButtonQ2" data-quarter="2">
            <div class="step-icon"><i class="fa fa-users"></i></div>
            <div class="step-label">
                [2/4] 360 Degree Feedback
                <% if (viewState.viewOnlyStatus['360degreefeedbacks']) { %>
                    (View-Only)
                <% } else { %>
                    (Editable)
                <% } %>
            </div>
            <% if (!(viewState.submittedObjectives && viewState.submittedObjectives.length > 0 && viewState.viewOnlyStatus['360degreefeedbacks'])) { %>
                <div class="notice">Complete the previous step first.</div>
            <% } %>
        </div>

        <div class="step <%= (viewState.submittedObjectives && viewState.submittedObjectives.length > 0 && viewState.viewOnlyStatus.midyearidp) ? 'accessible' : 'disabled' %>" id="midYearIDP" onclick="navigateToStep('midyear')">
            <div class="step-icon"><i class="fa fa-clipboard-check"></i></div>
            <div class="step-label">
                Mid-Year IDP
                <% if (viewState.viewOnlyStatus.midyearidp) { %>
                    (View-Only)
                <% } else { %>
                    (Editable)
                <% } %>
            </div>
            <% if (!(viewState.submittedObjectives && viewState.submittedObjectives.length > 0 && viewState.viewOnlyStatus['360degreefeedbacks'])) { %>
                <div class="notice">Complete the previous steps first.</div>
            <% } %>
        </div>

        <div class="step <%= (viewState.submittedObjectives && viewState.submittedObjectives.length > 0 && viewState.viewOnlyStatus['360degreefeedbacks']) ? 'accessible' : 'disabled' %>" id="feedbackButtonQ3" data-quarter="3">
            <div class="step-icon"><i class="fa fa-users"></i></div>
            <div class="step-label">
                [3/4] 360 Degree Feedback
                <% if (viewState.viewOnlyStatus['360degreefeedbacks']) { %>
                    (View-Only)
                <% } else { %>
                    (Editable)
                <% } %>
            </div>
            <% if (!(viewState.submittedObjectives && viewState.submittedObjectives.length > 0 && viewState.viewOnlyStatus['360degreefeedbacks'])) { %>
                <div class="notice">Complete the previous step first.</div>
            <% } %>
        </div>

        <div class="step <%= (viewState.submittedObjectives && viewState.submittedObjectives.length > 0 && viewState.viewOnlyStatus['360degreefeedbacks']) ? 'accessible' : 'disabled' %>" id="feedbackButtonQ4" data-quarter="4">
            <div class="step-icon"><i class="fa fa-users"></i></div>
            <div class="step-label">
                [4/4] 360 Degree Feedback
                <% if (viewState.viewOnlyStatus['360degreefeedbacks']) { %>
                    (View-Only)
                <% } else { %>
                    (Editable)
                <% } %>
            </div>
            <% if (!(viewState.submittedObjectives && viewState.submittedObjectives.length > 0 && viewState.viewOnlyStatus['360degreefeedbacks'])) { %>
                <div class="notice">Complete the previous step first.</div>
            <% } %>
        </div>

        <div class="step <%= (viewState.submittedObjectives && viewState.submittedObjectives.length > 0 && viewState.viewOnlyStatus['360degreefeedbacks']) ? 'accessible' : 'disabled' %>" id="finalYearIDP">
            <div class="step-icon"><i class="fa fa-clipboard-check"></i></div>
            <div class="step-label">
                Final-Year IDP
                <% if (viewState.viewOnlyStatus.finalyearidp) { %>
                    (View-Only)
                <% } else { %>
                    (Editable)
                <% } %>
            </div>
            <% if (!(viewState.submittedObjectives && viewState.submittedObjectives.length > 0 && viewState.viewOnlyStatus['360degreefeedbacks'])) { %>
                <div class="notice">Complete the previous steps first.</div>
            <% } %>
        </div>
    </div>
</section>
            
            <form id="objectiveSettingsForm" method="POST" action="/linemanager/records-performance-tracker/<%= user.userId %>">
                <section id="objective-skill-progress-form" class="fade-out" style="display: none;">
                    <h2>Annual Objective Setting Form</h2>
                    
                    <div class="header-grid">
                        <!-- Row 1 -->
                        <div><strong>Employee Name:</strong> <%= user.lastName %>, <%= user.firstName %></div>
                        <div><strong>Position:</strong> <%= user.jobTitle %></div>
                        <p><strong>Performance Period Year:</strong> <span id="performanceDate"><%= new Date().getFullYear() %></span></p>
                        
                        <!-- Row 2 -->
                        <div><strong>Company:</strong> Prime Infrastructure</div>
                        <div><strong>Department:</strong> <%= user.departmentName %></div>
                    </div>
                    


                    <input type="hidden" name="userId" value="<%= user.userId %>">
                    <input type="hidden" id="jobId" name="jobId" value="<%= user.jobId %>">
                    <input type="hidden" id="departmentId" name="departmentId" value="<%= user.departmentId %>">
                    <table>
                        <thead>
                            <tr>
                                <th>KRA/Objectives</th>
                                <th>KPI</th>
                                <th>Target</th>
                                <th>UOM</th>
                                <th>Assigned Weight</th>
                                <th>Actions</th>
                            </tr>
                            <tr>
                                <th><small>Sample Input: Improve Customer Satisfaction</small></th>
                                <th><small>Sample Input: Satisfaction Rate</small></th>
                                <th><small>Sample Input: 90 (Numerical)</small></th>
                                <th><small>Sample Input: %</small></th>
                                <th><small>Sample Input: 20 (Input with no percentage)</small></th>
                                <th><small>Click to Remove a Row</small></th>
                            </tr>
                        </thead>
                        <tbody id="progress-table-body">
                            <tr>
                                <td><input type="text" placeholder="Enter Objective" name="objectiveDescrpt" required></td>
                                <td><input type="text" placeholder="Enter KPI" name="objectiveKPI" required></td>
                                <td><input type="text" placeholder="Enter Target" name="objectiveTarget" required></td>
                                <td><input type="text" placeholder="Enter UOM" name="objectiveUOM" required></td>
                                <td><input type="number" class="weight-input" oninput="updateTotalWeight()" placeholder="Enter Weight (%)" name="objectiveAssignedWeight" min="0" max="100" required></td>
                                <td><button type="button" onclick="removeRow(this)">Remove</button></td>
                            </tr>
                        </tbody>
                    </table>
                    <button id="addRowBtn" type="button" onclick="addRow()">Add Row</button>
                    <p><strong>Total Assigned Weight:</strong> <input id="totalWeight" type="number" value="0" readonly>%</p>
            
                    <label>
                        <input type="checkbox" id="confirmationCheckbox" required>
                        I confirm that the objective weights have been accurately consolidated and reviewed.
                    </label 
                    <div id="submitButtonContainer">
                        <button id="saveButton" type="submit">Save</button>
                    </div>
                </section>
            
                <% if (viewState.viewOnlyStatus['objectivesettings']) { %>
                    <section id="view-only-page" class="fade-out" style="display: none;">
                        <h2>Submitted Annual Objective Setting Form</h2>
                        <div class="header-grid">
                            <!-- Row 1 -->
                            <div><strong>Employee Name:</strong> <%= user.lastName %>, <%= user.firstName %></div>
                            <div><strong>Position:</strong> <%= user.jobTitle %></div>
                            <div><strong>Performance Period Year:</strong> <%= viewState.performancePeriodYear %></div>
                            
                            <!-- Row 2 -->
                            <div><strong>Company:</strong> Prime Infrastructure</div>
                            <div><strong>Department:</strong> <%= user.departmentName %></div>
                        </div>
                        
                        
                        <div id="objectivesData" class="view-only-section">
                            <table>
                                <thead>
                                    <tr>
                                        <th>KRA/Objectives</th>
                                        <th>KPI</th>
                                        <th>Target</th>
                                        <th>UOM</th>
                                        <th>Assigned Weight</th>
                                    </tr>
                                </thead>
                                <tbody id="view-only-table-body">
                                    <% if (viewState.submittedObjectives && viewState.submittedObjectives.length > 0) { %>
                                        <% viewState.submittedObjectives.forEach(obj => { %>
                                            <tr>
                                                <td><%= obj.objectiveDescrpt || 'N/A' %></td>
                                                <td><%= obj.objectiveKPI || 'N/A' %></td>
                                                <td><%= obj.objectiveTarget || 'N/A' %></td>
                                                <td><%= obj.objectiveUOM || 'N/A' %></td>
                                                <td><%= obj.objectiveAssignedWeight !== undefined ? (obj.objectiveAssignedWeight * 100).toFixed(2) + '%' : 'N/A' %></td>                                            </tr>
                                        <% }); %>
                                    <% } else { %>
                                        <tr>
                                            <td colspan="5">No objectives submitted yet.</td>
                                        </tr>
                                    <% } %>
                                </tbody>
                            </table>
                        </div>
                    </section>
                <% } %>
            
                <div id="viewState" data-viewstate='<%= JSON.stringify(viewState) %>' style="display:none;"></div>
            </form>
            

            <form id="feedbackForm" method="POST" action="/linemanager/360-degree-feedback/<%= user.userId %>">
                <section id="feedback-section" class="fade-out" style="display: none;">
                    <div class="form-header">
                        <h2>360 Degree Feedback Questionnaire</h2>
                        <div class="date-inputs">
                            <div class="date-input">
                                <label for="startDate"><strong>Start Date:</strong></label>
                                <input type="date" id="startDate" name="startDate" class="input-field" required>
                            </div>
                            
                            <div class="date-input">
                                <label for="endDate"><strong>End Date:</strong></label>
                                <input type="date" id="endDate" name="endDate" class="input-field" required>
                            </div>
                        </div>
                    </div>
                    
<!-- Instructions Label -->
<h3 style="font-weight: bold; font-size: 1.2em; margin-top: 20px;">Instructions</h3>
<br>
<!-- Instructions Content -->
<p><strong>Setting Start and End Date:</strong> When creating a 360-degree feedback questionnaire, it is essential to set a start and end date. This schedule will automatically notify employees through the system, ensuring that they are aware of the timeframe for providing feedback.</p>

<p><strong>Setting of Guide Questions:</strong> The Line Manager should prepare guide questions that support co-employees in providing both qualitative and quantitative feedback for each role-specific objective. Additionally, employees will rate the hard and soft skills required for the job, offering qualitative comments and quantitative scores. These structured questions enable clear, measurable evaluations and ensure alignment with the objectives being tracked.</p>                    
                    <div class="feedback-header-grid">
                        <!-- Row 1 -->
                        <div><strong>Employee Name:</strong> <%= user.lastName %>, <%= user.firstName %></div>
                        <div><strong>Position:</strong> <%= user.jobTitle %></div>
                        
                        <!-- Row 2 -->
                        <div><strong>Company:</strong> Prime Infrastructure</div>
                        <div><strong>Department:</strong> <%= user.departmentName %></div>
                    </div>
                    
                    <!-- Small Divider -->
                    <hr class="divider" />
                    
                    <p style="font-weight: bold; font-size: 1.1em; margin-top: 20px;">Objective Setting Questions</p>
                    
                    <table>
                        <thead>
                            <tr>
                                <th>KRA/Objectives</th>
                                <th>KPI</th>
                                <th>Target</th>
                                <th>UOM</th>
                                <th>Assigned Weight</th>
                            </tr>
                        </thead>
                        <tbody id="feedback-table-body">
                            <!-- Dynamic feedback rows will be added here -->
                        </tbody>
                    </table>

<!-- Hard Skills Table -->
<p style="font-weight: bold; font-size: 1.1em; margin-top: 20px;">Hard Skills</p>
<table id="hardSkillsTable">
    <thead>
        <tr>
            <th>Skill Name</th>
        </tr>
    </thead>
    <tbody id="hard-skills-table-body">
        <!-- Hard skill rows will be dynamically inserted here -->
    </tbody>
</table>

<!-- Soft Skills Table -->
<p style="font-weight: bold; font-size: 1.1em; margin-top: 20px;">Soft Skills</p>
<table id="softSkillsTable">
    <thead>
        <tr>
            <th>Skill Name</th>
        </tr>
    </thead>
    <tbody id="soft-skills-table-body">
        <!-- Soft skill rows will be dynamically inserted here -->
    </tbody>
</table>


                    
                    <button id="saveFeedbackButton" type="submit">Save Questionnaire</button>
                </section>
            </form>
            <script>
let currentStep = 0; // Track the current step

// Parse viewState back into an object
const viewStateElement = document.getElementById('viewState');
const viewState = JSON.parse(viewStateElement.getAttribute('data-viewstate'));
let userId = '<%= user.userId %>'; // Pass userId from server-side
let jobId = viewState.jobId; // Use jobId from viewState
let submittedObjectives = viewState.submittedObjectives || []; // Initialize with submitted objectives
// Make sure to define hardSkills and softSkills as global variables
const hardSkills = viewState.hardSkills || []; // Default to empty array if not defined
    const softSkills = viewState.softSkills || []; // Default to empty array if not defined


// Ensure your document ready event listener is set correctly
document.addEventListener("DOMContentLoaded", function () {
    const objectivesButton = document.getElementById("objectivesButton");
    const feedbackSection = document.getElementById("feedback-section");
    const saveButton = document.getElementById("saveButton"); // Save button for objectives

    // Log the values for debugging
    console.log("Submitted Objectives:", submittedObjectives);
    console.log("User    ID:", userId);
    console.log("Job ID:", jobId);
    
    if (objectivesButton) {
        console.log('Objectives Button found:', objectivesButton);
        objectivesButton.addEventListener("click", handleObjectiveClick);
    } else {
        console.error('Objectives Button not found in the DOM.');
    }

    // Add event listener for the save button
    saveButton.addEventListener("click", saveObjectives); // Call saveObjectives on click

    // Initial display update when the document is loaded
    console.log('Document loaded. Updating display...');
});
// Function to handle objective click
function handleObjectiveClick() {
    console.log("Objective clicked. View only status:", viewState.viewOnlyStatus.objectivesettings);

    // Hide the feedback form when switching to objectives
    const feedbackSection = document.getElementById("feedback-section");
    feedbackSection.style.display = "none"; // Hide feedback section

    // Get the form and view-only sections
    const formSection = document.getElementById("objective-skill-progress-form");
    const viewOnlySection = document.getElementById("view-only-page");

    // Check if the view-only status is true
    if (viewState.viewOnlyStatus.objectivesettings) {
        // Show the view-only section
        displaySubmittedObjectives(submittedObjectives); // Populate the view-only section with existing data
        viewOnlySection.style.display = "block"; // Show view-only page
        formSection.style.display = "none"; // Ensure the form is hidden
        console.log("Showing view-only page with submitted objectives.");
    } else {
        // Show the editable form if in edit mode
        formSection.style.display = "block"; // Show the form
        viewOnlySection.style.display = "none"; // Ensure the view-only section is hidden
        console.log("Showing editable objective form.");
    }
}

// Function to update display based on view state
function updateDisplay() {
    console.log('Updating display...');

    // Hide all sections initially
    const formSection = document.getElementById("objective-skill-progress-form");
    const viewOnlySection = document.getElementById("view-only-page");

    // Ensure elements exist before accessing their styles
    if (formSection) {
        formSection.style.display = "none"; 
    } else {
        console.error("Objective Skill Progress Form section not found.");
    }

    if (viewOnlySection) {
        viewOnlySection.style.display = "none"; 
    } else {
        console.error("View Only Page section not found.");
    }

    // Check the view state and submitted objectives
    if (viewState.viewOnlyStatus.objectivesettings) {
        // Show view-only page only if there are submitted objectives
        if (submittedObjectives.length > 0) {
            displaySubmittedObjectives(submittedObjectives);
            viewOnlySection.style.display = "block"; // Show view-only page
            console.log("Showing view-only page with submitted objectives.");
        } else {
            console.log("No objectives submitted yet for view-only mode.");
        }
    } else {
        showObjectiveForm(); // Show form if in edit mode
        formSection.style.display = "block"; // Show the form
        console.log("Showing editable objective form.");
    }
}
// Function to show the objective form
function showObjectiveForm() {
    console.log("Showing objective form.");
    document.getElementById("objective-skill-progress-form").style.display = "block"; // Ensure form is visible
}

// Function to display submitted objectives
function displaySubmittedObjectives(objectives) {
    const tableBody = document.getElementById("view-only-table-body");
    tableBody.innerHTML = ""; // Clear previous content

    objectives.forEach(obj => {
        const row = document.createElement("tr");
        row.innerHTML = `
            <td>${obj.objectiveDescrpt || 'N/A'}</td>
            <td>${obj.objectiveKPI || 'N/A'}</td>
            <td>${obj.objectiveTarget || 'N/A'}</td>
            <td>${obj.objectiveUOM || 'N/A'}</td>
            <td>${(obj.objectiveAssignedWeight * 100) || 'N/A'} %</td>
        `;
        tableBody.appendChild(row);
    });
}
                // Function to remove a row from the objective form
                function removeRow(button) {
                    const row = button.parentNode.parentNode;
                    row.parentNode.removeChild(row);
                    updateTotalWeight(); // Update total weight after removal
                }
            
                // Function to add a new row to the objective form
                function addRow() {
        const tableBody = document.getElementById("progress-table-body");
        const newRow = document.createElement("tr");
        newRow.innerHTML = `
            <td><input type="text" placeholder="Enter Objective" name="objectiveDescrpt" required></td>
            <td><input type="text" placeholder="Enter KPI" name="objectiveKPI" required></td>
            <td><input type="text" placeholder="Enter Target" name="objectiveTarget" required></td>
            <td><input type="text" placeholder="Enter UOM" name="objectiveUOM" required></td>
            <td><input type="number" class="weight-input" oninput="updateTotalWeight()" placeholder="Enter Weight (%)" name="objectiveAssignedWeight" min="0" max="100" required></td>
            <td><button type="button" onclick="removeRow(this)">Remove</button></td>
        `;
        tableBody.appendChild(newRow);
    }
            



                // Function to update total weight in the form
                function updateTotalWeight() {
                    const weightInputs = document.querySelectorAll(".weight-input");
                    let totalWeight = 0;
            
                    weightInputs.forEach(input => {
                        totalWeight += parseFloat(input.value) || 0;
                    });
            
                    document.getElementById("totalWeight").value = totalWeight;
                }
            
                // Function to save objectives
                async function saveObjectives() {
                    const departmentId = '<%= user.departmentId %>'; // Pass departmentId from server-side
                    const performancePeriodYear = document.getElementById("performanceDate").textContent;
            
                    console.log("User  ID:", userId);
                    console.log("Job ID:", jobId);
                    console.log("Performance Period Year:", performancePeriodYear);
            
                    // Validate required IDs
                    if (!userId || !jobId ) {
                        console.error("One or more required IDs are missing.");
                        alert("Please ensure all fields are filled out correctly before saving.");
                        return;
                    }
            
                    const objectives = [];
                    const rows = document.querySelectorAll("#progress-table-body tr");
            
                    // Ensure confirmation checkbox is checked
                    const confirmationChecked = document.getElementById("confirmationCheckbox").checked;
                    if (!confirmationChecked) {
                        alert("Please confirm that you have reviewed the objectives before saving.");
                        return;
                    }
            
                    let totalWeight = 0;
            
                    rows.forEach(row => {
                        const descriptionInput = row.querySelector('input[name="objectiveDescrpt"]');
                        const kpiInput = row.querySelector('input[name="objectiveKPI"]');
                        const targetInput = row.querySelector('input[name="objectiveTarget"]');
                        const uomInput = row.querySelector('input[name="objectiveUOM"]');
                        const weightInput = row.querySelector('input[name="objectiveAssignedWeight"]');
            
                        if (descriptionInput && kpiInput && targetInput && uomInput && weightInput) {
                            const weight = parseFloat(weightInput.value);
                            totalWeight += weight;
            
                            const objective = {
                                objectiveDescrpt: descriptionInput.value,
                                objectiveKPI: kpiInput.value,
                                objectiveTarget: targetInput.value,
                                objectiveUOM: uomInput.value,
                                objectiveAssignedWeight: weight,
                            };
                            objectives.push(objective);
                        }
                    });
            
                    console.log("Objectives to save:", objectives);
            
                    // Validate total weight
                    if (totalWeight !== 100) {
                        alert("Total assigned weight must be 100% to save.");
                        return;
                    }
            
                    // Proceed if objectives are present
                    if (objectives.length > 0) {
                        try {
                            const response = await fetch(`/linemanager/records-performance-tracker/${userId}`, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    jobId,
                                    departmentId,
                                    performancePeriodYear,
                                    objectives,
                                    totalWeight
                                })
                            });
            
                            console.log("Response from server:", response);
            
                            // Check if the response was successful
                            if (!response.ok) {
                                throw new Error(`Server responded with status ${response.status}`);
                            }
            
                            const result = await response.json();
                            console.log("Result from server:", result);
            
                            if (result.success) {
                                alert(result.message); // Handle success
                                displaySubmittedObjectives(objectives); // Display the submitted objectives
            
                                // Redirect to the view-only page after successful save
                                const viewUrl = `/linemanager/records-performance-tracker/${userId}`;
                                window.location.href = viewUrl;
                            } else {
                                alert("Failed to save objectives: " + result.message);
                            }
                        } catch (error) {
                            console.error("Error saving objectives:", error);
                            alert("An error occurred while saving objectives.");
                        }
                    } else {
                        alert("No objectives to save.");
                    }
                }
                
                function addFormFeedbackRow(objective) {
    const tbody = document.getElementById('feedback-table-body');
    const row = document.createElement('tr');

    // Populate the main row with text display only
    row.innerHTML = `
    <td><strong>${objective.objectiveDescrpt || 'N/A'}</strong></td>
    <td><strong>${objective.objectiveKPI || 'N/A'}</strong></td>
    <td><strong>${objective.objectiveTarget || 'N/A'}</strong></td>
    <td><strong>${objective.objectiveUOM || '%'}</strong></td>
    <td><strong>${(objective.objectiveAssignedWeight * 100) || 'N/A'} %</strong></td>
`;

    tbody.appendChild(row);

    // Create a new row for the input fields
    const inputRow = document.createElement('tr');

    inputRow.innerHTML = `
    <td colspan="5">
        <div style="margin-bottom: 10px;">
            <label for="qualitativeInput"> ▶ Guide Question here for qualitative and quantitative feedback:</label>
            <input id="qualitativeInput" type="text" placeholder="Input your guide question here." name="kraObjectivesInput" required style="width: 100%; box-sizing: border-box;">
        </div>
        <div style="margin-bottom: 10px;">
            <button type="button" onclick="toggleRatingSection('ratingSection${tbody.children.length}')" style="background-color: gray; color: white; border: none; padding: 8px 12px; cursor: pointer; border-radius: 4px;">
                View Rater's View
            </button>
            <div id="ratingSection${tbody.children.length}" style="display: none; margin-top: 10px;">
                <div style="margin-bottom: 10px;">
                    <label>Quantitative (Rating Scale):</label>
                    <div style="font-size: 14px; margin-top: 5px;">
                        Rate from 1-5 based on how well the individual achieved the target or goal related to the guide question.
                    </div>
                    <span style="font-size: 24px; cursor: pointer;" id="starRating${tbody.children.length}" data-rating="0">
                        <i class="fa-solid fa-star" data-value="1"></i>
                        <i class="fa-solid fa-star" data-value="2"></i>
                        <i class="fa-solid fa-star" data-value="3"></i>
                        <i class="fa-solid fa-star" data-value="4"></i>
                        <i class="fa-solid fa-star" data-value="5"></i>
                    </span>
                </div>
                <div style="margin-bottom: 10px;">
                    <label>Qualitative (Open-ended):</label>
                    <div style="font-size: 14px; margin-top: 5px;">
                       Provide qualitative feedback on the guide question to assess if the target was achieved.
                    </div>
                    <input type="text" placeholder="Place your Qualitative feedback here." style="width: 100%; box-sizing: border-box;" readonly>
                </div>
            </div>
        </div>
    </td>
    `;

    tbody.appendChild(inputRow);

    // Add click event listeners to the stars
    const stars = document.querySelectorAll(`#starRating${tbody.children.length} .fa-star`);
    stars.forEach(star => {
        star.addEventListener('click', function() {
            const rating = this.getAttribute('data-value');
            const starContainer = document.getElementById(`starRating${tbody.children.length}`);
            starContainer.setAttribute('data-rating', rating);
            updateStarDisplay(stars, rating);
        });
    });
}

 // Function to update 360 degree feedback hard and soft skill rows
 function addFormFeedbackSkillsRows(skills, skillType) {
    const skillTableBody = document.querySelector(`#${skillType}-skills-table-body`);

    // Check if the table body exists
    if (!skillTableBody) {
        console.log("Skill table body not found for:", skillType);
        return;
    }

    // Iterate over the array of skills and add each one
    skills.forEach(skill => {
        // Create the skill row
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>
                <span><strong>${skill.jobReqSkillName}</strong></span>
            </td>
        `;
        skillTableBody.appendChild(row);

        // Create a new row for input fields
        const inputRow = document.createElement('tr');
        const starRatingId = `${skillType}SkillRow${skill.jobReqSkillName}Rating`;

        // Create a unique ID for the collapsible section
        const ratingSectionId = `ratingSection${skill.jobReqSkillName.replace(/\s+/g, '_')}`; // Replace spaces for valid ID

        inputRow.innerHTML = `
        <td colspan="1">
            <button type="button" onclick="toggleRatingSection('${ratingSectionId}')" style="background-color: gray; color: white; border: none; padding: 8px 12px; cursor: pointer; border-radius: 4px;">
                View Rater's View
            </button>
            <div id="${ratingSectionId}" style="display: none; margin-top: 10px;">
                <div style="margin-bottom: 10px;">
                    <label><strong>Quantitative (Rating Scale):</strong></label>
                    <div style="font-size: 14px; margin-top: 5px;">
                        Rate from 1 to 5 based on the corresponding skill performed during the quarter.
                    </div>
                    <span style="font-size: 24px; cursor: pointer;" id="${starRatingId}" data-rating="0">
                        <i class="fa-solid fa-star" data-value="1" onclick="setRating('${starRatingId}', 1)"></i>
                        <i class="fa-solid fa-star" data-value="2" onclick="setRating('${starRatingId}', 2)"></i>
                        <i class="fa-solid fa-star" data-value="3" onclick="setRating('${starRatingId}', 3)"></i>
                        <i class="fa-solid fa-star" data-value="4" onclick="setRating('${starRatingId}', 4)"></i>
                        <i class="fa-solid fa-star" data-value="5" onclick="setRating('${starRatingId}', 5)"></i>
                    </span>
                </div>
                <div style="margin-bottom: 10px;">
                    <label><strong>Qualitative (Open-ended):</strong></label>
                    <div style="font-size: 14px; margin-top: 5px;">
                        Provide qualitative feedback based on the corresponding skill performed during the quarter.
                    </div>
                    <input type="text" placeholder="Place your qualitative feedback here." style="width: 100%; box-sizing: border-box;">
                </div>
            </div>
        </td>
        `;

        skillTableBody.appendChild(inputRow);
    });
}
// Function to add feedback row for 360 degree feedback
function add360FeedbackRow(objective) {
    const tbody = document.getElementById('feedback-table-body');
    const row = document.createElement('tr');

    // Create a unique ID for the collapsible section
    const rowId = `feedbackRow${tbody.children.length}`;

    // Populate the main row with text display only
    row.innerHTML = `
        <td>
            <button type="button" class="collapsible-button" onclick="toggleCollapse('${rowId}')">+</button>
            <span>${objective.kraObjectives || 'KRA/Objectives'}</span>
        </td>
        <td>${objective.objectiveKPI || 'Engagement Rate'}</td>
        <td>${objective.objectiveTarget || 15}</td>
        <td>${objective.objectiveUOM || '%'}</td>
        <td>${(objective.objectiveAssignedWeight * 100) || '25 %'}</td>
    `;

    tbody.appendChild(row);

    // Create a new row for the input fields, initially hidden
    const inputRow = document.createElement('tr');
    inputRow.id = rowId;
    inputRow.style.display = 'none'; // Initially hidden

    // Create a unique ID for the star rating
    const starRatingId = `starRating${tbody.children.length}`;

    inputRow.innerHTML = `
    <td colspan="5">
        <div style="margin-bottom: 10px;">
            <label for="qualitativeInput">Question for Qualitative:</label>
            <input id="qualitativeInput" type="text" placeholder="Input your qualitative question here." name="kraObjectivesInput" required style="width: 100%; box-sizing: border-box;">
        </div>
        <div style="margin-bottom: 10px;">
            <label for="${starRatingId}">Rate from 1-5:</label>
            <span id="${starRatingId}" data-rating="0">
                <i class="fa-solid fa-star" data-value="1"></i>
                <i class="fa-solid fa-star" data-value="2"></i>
                <i class="fa-solid fa-star" data-value="3"></i>
                <i class="fa-solid fa-star" data-value="4"></i>
                <i class="fa-solid
fa-star" data-value="5"></i>
            </span>
            <div style="font-size: 12px; color: #666; margin-top: 5px;">
                This rating will be visible to the employee.
            </div>
        </div>
    </td>
    `;
    tbody.appendChild(inputRow);

    // Add click event listeners to the stars in the current row
    const stars = inputRow.querySelectorAll(`#${starRatingId} .fa-star`);
    stars.forEach(star => {
        star.addEventListener('click', function() {
            const rating = this.getAttribute('data-value');
            const starContainer = document.getElementById(starRatingId);
            starContainer.setAttribute('data-rating', rating);
            updateStarDisplay(stars, rating);
        });
    });
}


// Function to toggle the visibility of the rating section
function toggleRatingSection(sectionId) {
    const section = document.getElementById(sectionId);
    if (section.style.display === 'none') {
        section.style.display = 'block'; // Show the rating section
    } else {
        section.style.display = 'none'; // Hide the rating section
    }
}

// Function to update star display based on the rating
function updateStarDisplay(stars, rating) {
    stars.forEach(star => {
        if (star.getAttribute('data-value') <= rating) {
            star.classList.add('checked'); // Add checked class for selected stars
        } else {
            star.classList.remove('checked'); // Remove checked class for unselected stars
        }
    });
}

function setRating(rowId, rating) {
    const starRating = document.getElementById(`${rowId}Rating`);
    
    // Get all star icons (they are <i> elements)
    const stars = starRating.getElementsByTagName('i');
    
    // Loop through the stars and apply the "checked" class based on the rating
    for (let i = 0; i < stars.length; i++) {
        if (i < rating) {
            stars[i].classList.add('checked');  // Add "checked" class for selected stars
        } else {
            stars[i].classList.remove('checked');  // Remove "checked" class for unselected stars
        }
    }
    
    // Update the data-rating attribute to reflect the selected rating
    starRating.setAttribute('data-rating', rating);
}

// Show Feedback Form
function showFeedbackForm() {
        // Hide the objective form and view-only section if they are visible
        const formSection = document.getElementById("objective-skill-progress-form");
        const viewOnlySection = document.getElementById("view-only-page");
        if (formSection) {
            formSection.style.display = "none"; // Hide objective form
        }
        if (viewOnlySection) {
            viewOnlySection.style.display = "none"; // Hide view-only section
        }

        // Show the feedback section
        const feedbackSection = document.getElementById("feedback-section");
        feedbackSection.style.display = "block"; // Show feedback section

        // Clear existing feedback rows
        const feedbackTableBody = document.getElementById('feedback-table-body');
        feedbackTableBody.innerHTML = ''; // Clear previous content

        // Add feedback rows based on submitted objectives
        submittedObjectives.forEach(objective => {
            addFormFeedbackRow(objective); // Populate feedback rows with existing objectives
        });

        // Add hard skills to the feedback form
        addFormFeedbackSkillsRows(hardSkills, 'hard');

        // Add soft skills to the feedback form
        addFormFeedbackSkillsRows(softSkills, 'soft');

        console.log("Feedback section is now visible with populated rows.");
    }

            </script>
            
            </body>
            </html>