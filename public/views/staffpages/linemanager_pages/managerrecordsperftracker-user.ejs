<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Profile & Performance Dashboard</title>
    <link rel="stylesheet" href="/css/sidebar.css">
    <link rel="stylesheet" href="/css/hr_pages.css">
    <link rel="stylesheet" href="/css/recordsandperformancetracker.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        /* IDP Form Styles */
.idp-form fieldset {
    border: 1px solid #ddd;
    border-radius: var(--border-radius);
    padding: 20px;
    margin-bottom: 25px;
    background-color: #f9f9f9;
    transition: var(--transition);
}

.idp-form fieldset:hover {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.idp-form legend {
    color: var(--primary-color);
    font-weight: 600;
    padding: 0 15px;
    font-size: 1.1rem;
}

.idp-form label {
    display: block;
    margin-top: 15px;
    margin-bottom: 5px;
    color: var(--primary-color);
}

.idp-form textarea {
    width: 100%;
    padding: 12px;
    border: 1px solid #ddd;
    border-radius: var(--border-radius);
    resize: vertical;
    min-height: 100px;
    font-family: inherit;
    transition: var(--transition);
}

.idp-form textarea:focus {
    border-color: var(--secondary-color);
    box-shadow: 0 0 0 2px rgba(5, 156, 164, 0.2);
    outline: none;
}

.idp-form textarea.error {
    border-color: var(--danger-color);
    background-color: rgba(244, 67, 54, 0.05);
}

.idp-form .submit-button-container {
    margin-top: 30px;
    text-align: right;
}

.idp-form .save-btn {
    background-color: var(--primary-color);
    color: white;
    border: none;
    padding: 12px 25px;
    border-radius: var(--border-radius);
    cursor: pointer;
    font-weight: 500;
    transition: var(--transition);
    display: inline-flex;
    align-items: center;
    gap: 8px;
}

.idp-form .save-btn:hover {
    background-color: var(--secondary-color);
    transform: translateY(-2px);
}

.idp-form .save-btn:disabled {
    background-color: #ccc;
    cursor: not-allowed;
}

/* View-only mode styles */
.view-only-mode fieldset {
    background-color: #f5f7fa;
    border: 1px solid #e1e5eb;
}

.view-only-mode textarea {
    background-color: #f9f9f9;
    border: 1px solid #e1e5eb;
    pointer-events: none;
    color: #555;
}

.view-only-mode .save-btn {
    display: none;
}

/* Last updated info for view-only mode */
.last-updated-info {
    margin-top: 20px;
    font-style: italic;
    color: #777;
    text-align: right;
    font-size: 0.9em;
}

/* Progress indicator for IDP forms */
.idp-progress {
    margin-bottom: 20px;
    padding: 15px;
    background-color: #f5f7fa;
    border-radius: var(--border-radius);
    border-left: 4px solid var(--primary-color);
}

.idp-progress h3 {
    margin-top: 0;
    font-size: 1.1rem;
    color: var(--primary-color);
}

.progress-bar-container {
    width: 100%;
    height: 10px;
    background-color: #e0e0e0;
    border-radius: 5px;
    margin-top: 10px;
}

.progress-bar {
    height: 100%;
    background-color: var(--secondary-color);
    border-radius: 5px;
    transition: width 0.5s ease;
}

/* Tooltip styles for required fields */
.tooltip {
    position: relative;
    display: inline-block;
    margin-left: 5px;
    cursor: help;
}

.tooltip .tooltip-icon {
    color: var(--primary-color);
    font-size: 0.8em;
}

.tooltip .tooltip-text {
    visibility: hidden;
    width: 200px;
    background-color: #333;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px;
    position: absolute;
    z-index: 1;
    bottom: 125%;
    left: 50%;
    margin-left: -100px;
    opacity: 0;
    transition: opacity 0.3s;
}

.tooltip:hover .tooltip-text {
    visibility: visible;
    opacity: 1;
}
        /* New modern styling */
        :root {
            --primary-color: #124A5C;
            --secondary-color: #059ca4;
            --accent-color: #f4a261;
            --light-color: #f9f9f9;
            --dark-color: #2a2a2a;
            --success-color: #4CAF50;
            --warning-color: #ff9800;
            --danger-color: #f44336;
            --border-radius: 8px;
            --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f5f7fa;
            margin: 0;
            padding: 0;
        }

        .main-content {
            padding: 20px;
            margin-left: 250px; /* Adjust based on your sidebar width */
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        /* Card styling */
        .section {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 20px;
            margin-bottom: 25px;
            transition: var(--transition);
        }

        .section:hover {
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
        }

        /* Headers */
        h2 {
            color: var(--primary-color);
            border-bottom: 2px solid var(--secondary-color);
            padding-bottom: 10px;
            margin-bottom: 20px;
            font-weight: 600;
            font-size: 1.4rem;
        }

        /* Profile section */
        .profile-container {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            background: linear-gradient(to right, rgba(18, 74, 92, 0.1), rgba(5, 156, 164, 0.05));
            padding: 15px;
            border-radius: var(--border-radius);
        }

        .profile-pic {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            object-fit: cover;
            border: 3px solid white;
            box-shadow: var(--box-shadow);
            margin-right: 20px;
        }

        .profile-info {
            flex: 1;
        }

        .profile-info h3 {
            margin: 0;
            font-size: 1.6rem;
            color: var(--primary-color);
        }

        .profile-info p {
            margin: 5px 0;
            color: #555;
        }

        /* Columns layout */
        .columns {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }

        @media (max-width: 992px) {
            .columns {
                grid-template-columns: 1fr 1fr;
            }
        }

        @media (max-width: 768px) {
            .columns {
                grid-template-columns: 1fr;
            }
            
            .main-content {
                margin-left: 0;
                padding: 15px;
            }
        }

        /* Info items */
        .info-item {
            margin-bottom: 12px;
            display: flex;
            align-items: baseline;
        }

        .info-item strong {
            min-width: 140px;
            display: inline-block;
            color: var(--primary-color);
        }

        /* Milestone styling */
        .milestone-container {
            margin-top: 15px;
            position: relative;
            padding-left: 30px;
            border-left: 2px solid var(--primary-color);
        }

        .milestone {
            position: relative;
            margin-bottom: 25px;
            padding-left: 15px;
        }

        .milestone:before {
            content: '';
            position: absolute;
            left: -16px;
            top: 0;
            width: 30px;
            height: 30px;
            background-color: var(--primary-color);
            border-radius: 50%;
            box-shadow: 0 0 0 5px rgba(18, 74, 92, 0.2);
        }

        .milestone-label {
            padding: 15px;
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            border-left: 4px solid var(--primary-color);
        }

        .milestone-label h4 {
            margin: 0 0 8px 0;
            font-size: 1.1em;
            color: var(--primary-color);
        }

        .milestone-label p {
            margin: 0;
            font-size: 1em;
            color: #333;
        }

        .milestone-label small {
            display: block;
            margin-top: 8px;
            color: #777;
            font-style: italic;
        }

        /* Cards for certifications, degrees, experiences */
        .card-item {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 15px;
            margin-bottom: 15px;
            border-left: 4px solid var(--primary-color);
            transition: var(--transition);
        }

        .degree-item:hover, .experience-item:hover, .certification-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }

        .degree-item h4, .experience-item h4, .certification-item h4 {
            margin: 0 0 8px 0;
            color: var(--primary-color);
            font-size: 1.1rem;
        }

        .degree-item p, .experience-item p, .certification-item p {
            margin: 0;
            color: #555;
        }

        /* Table styling */
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
            background-color: white;
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: var(--box-shadow);
        }

        thead {
            background-color: var(--primary-color);
            color: white;
        }

        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        tbody tr:hover {
            background-color: rgba(18, 74, 92, 0.05);
        }

        /* Stepper styling */
        .stepper {
            margin-top: 30px;
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 20px;
        }

        .stepper-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        .stepper-container {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            justify-content: space-between;
        }

        .step {
            flex: 1;
            min-width: 200px;
            background-color: #f9f9f9;
            border-radius: var(--border-radius);
            padding: 15px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            display: flex;
            flex-direction: column;
            align-items: center;
            transition: var(--transition);
            cursor: pointer;
        }

        .step:hover {
            background-color: rgba(18, 74, 92, 0.1);
        }

        .step.accessible {
            background-color: rgba(76, 175, 80, 0.1);
            border: 1px solid rgba(76, 175, 80, 0.3);
        }

        .step.disabled {
            background-color: #f1f1f1;
            color: #999;
            cursor: not-allowed;
            opacity: 0.7;
        }

        .step-icon {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background-color: var(--primary-color);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 10px;
            font-size: 1.5rem;
        }

        .step-label {
            text-align: center;
            font-weight: 500;
        }

        .view-only .step-icon {
            background-color: var(--secondary-color);
        }

        /* Form styling */
        input[type="text"],
        input[type="number"],
        input[type="date"],
        select,
        textarea {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
            font-family: inherit;
            font-size: 1rem;
        }

        button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: var(--transition);
        }

        button:hover {
            background-color: var(--secondary-color);
        }

        .add-btn {
            background-color: var(--success-color);
        }

        .save-btn {
            background-color: var(--primary-color);
        }

        .cancel-btn {
            background-color: var(--danger-color);
        }

        /* Animation classes */
        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }

        .fade-out {
            animation: fadeOut 0.5s ease-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes fadeOut {
            from { opacity: 1; transform: translateY(0); }
            to { opacity: 0; transform: translateY(10px); }
        }
        
        /* Custom styling for forms */
        fieldset {
            border: 1px solid #ddd;
            border-radius: var(--border-radius);
            padding: 15px;
            margin-bottom: 20px;
        }
        
        legend {
            color: var(--primary-color);
            font-weight: 600;
            padding: 0 10px;
        }
        
        textarea {
            min-height: 80px;
            resize: vertical;
        }
        
        /* Custom checkbox styling */
        input[type="checkbox"] {
            width: 18px;
            height: 18px;
            margin-right: 8px;
            vertical-align: middle;
        }

        /* Header grid */
        .header-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-template-rows: repeat(2, auto);
            gap: 10px;
            text-align: left;
            font-size: 1em;
            margin-bottom: 20px;
            padding: 15px;
            background-color: #f9f9f9;
            border-radius: var(--border-radius);
        }

        .header-grid div {
            padding: 5px;
            font-weight: normal;
        }

        .header-grid strong {
            font-weight: bold;
            color: var(--primary-color);
        }


      /* IDP Form Styles */
    .idp-form fieldset {
        border: 1px solid #ddd;
        border-radius: var(--border-radius);
        padding: 20px;
        margin-bottom: 25px;
        background-color: #f9f9f9;
        transition: var(--transition);
    }
    
    .idp-form fieldset:hover {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    
    .idp-form legend {
        color: var(--primary-color);
        font-weight: 600;
        padding: 0 15px;
        font-size: 1.1rem;
    }
    
    .idp-form .form-group {
        margin-bottom: 20px;
    }
    
    .idp-form label {
        display: block;
        margin-bottom: 8px;
        color: var(--primary-color);
        font-weight: 500;
    }
    
    .idp-form textarea {
        width: 100%;
        padding: 12px;
        border: 1px solid #ddd;
        border-radius: var(--border-radius);
        resize: vertical;
        min-height: 100px;
        font-family: inherit;
        transition: var(--transition);
    }
    
    .idp-form textarea:focus {
        border-color: var(--secondary-color);
        box-shadow: 0 0 0 2px rgba(5, 156, 164, 0.2);
        outline: none;
    }
    
    .idp-form textarea.error {
        border-color: var(--danger-color);
        background-color: rgba(244, 67, 54, 0.05);
    }
    
    .idp-form .submit-button-container {
        margin-top: 30px;
        text-align: right;
    }
    
    .idp-form .save-btn {
        background-color: var(--primary-color);
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: var(--border-radius);
        cursor: pointer;
        font-weight: 500;
        transition: var(--transition);
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }
    
    .idp-form .save-btn:hover {
        background-color: var(--secondary-color);
        transform: translateY(-2px);
    }
    
    .idp-form .save-btn:disabled {
        background-color: #ccc;
        cursor: not-allowed;
    }
    
    /* View-only mode styles */
    .view-only-mode fieldset {
        background-color: #f5f7fa;
        border: 1px solid #e1e5eb;
    }
    
    .view-only-mode textarea {
        background-color: #f9f9f9;
        border: 1px solid #e1e5eb;
        pointer-events: none;
        color: #555;
    }
    
    .view-only-mode .save-btn {
        display: none;
    }
    
    /* Last updated info for view-only mode */
    .last-updated-info {
        margin-top: 20px;
        font-style: italic;
        color: #777;
        text-align: right;
        font-size: 0.9em;
    }
    
    /* Progress indicator for IDP forms */
    .idp-progress {
        margin-bottom: 20px;
        padding: 15px;
        background-color: #f5f7fa;
        border-radius: var(--border-radius);
        border-left: 4px solid var(--primary-color);
    }
    
    .idp-progress h3 {
        margin-top: 0;
        font-size: 1.1rem;
        color: var(--primary-color);
    }
    
    .progress-bar-container {
        width: 100%;
        height: 10px;
        background-color: #e0e0e0;
        border-radius: 5px;
        margin-top: 10px;
    }
    
    .progress-bar {
        height: 100%;
        background-color: var(--secondary-color);
        border-radius: 5px;
        transition: width 0.5s ease;
    }
    
    /* Character counter styles */
    .char-counter {
        text-align: right;
        font-size: 0.8em;
        color: #777;
        margin-top: 5px;
    }
    
    /* Tooltip styles for required fields */
    .tooltip {
        position: relative;
        display: inline-block;
        margin-left: 5px;
        cursor: help;
    }
    
    .tooltip .tooltip-icon {
        color: var(--primary-color);
        font-size: 0.8em;
    }
    
    .tooltip .tooltip-text {
        visibility: hidden;
        width: 250px;
        background-color: #333;
        color: #fff;
        text-align: center;
        border-radius: 6px;
        padding: 8px 12px;
        position: absolute;
        z-index: 1;
        bottom: 125%;
        left: 50%;
        margin-left: -125px;
        opacity: 0;
        transition: opacity 0.3s;
        font-size: 0.85em;
        line-height: 1.4;
    }
    
    .tooltip:hover .tooltip-text {
        visibility: visible;
        opacity: 1;
    }
    
    /* Leadership tags styling */
    .leadership-tag {
        display: inline-block;
        background-color: rgba(5, 156, 164, 0.1);
        color: var(--primary-color);
        padding: 4px 10px;
        border-radius: 15px;
        font-size: 0.85em;
        transition: var(--transition);
        cursor: pointer;
        border: 1px solid rgba(5, 156, 164, 0.2);
    }
    
    .leadership-tag:hover {
        background-color: rgba(5, 156, 164, 0.2);
        transform: translateY(-2px);
    }
    
    /* Mobility options styling */
    .mobility-options {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
    }
    
    .mobility-option {
        display: flex;
        align-items: center;
        margin-right: 10px;
    }
    
    .mobility-option input[type="checkbox"] {
        margin-right: 5px;
        width: 16px;
        height: 16px;
    }
    
    .mobility-option label {
        display: inline;
        margin: 0;
        font-weight: normal;
        color: #333;
    }
    
    /* Mobile responsiveness */
    @media (max-width: 768px) {
        .idp-form fieldset {
            padding: 15px;
        }
        
        .mobility-options {
            flex-direction: column;
            gap: 8px;
        }
        
        .development-model-guide > div {
            flex-direction: column;
        }
        
        .idp-form .save-btn {
            width: 100%;
            justify-content: center;
        }
    }
    </style>
</head>

<body>
    <%- include('../../partials/linemanager_partials') %>

    <!-- Main content area -->
    <div class="main-content">
        <div class="container">
            <!-- Profile header section -->
            <div class="profile-container">
                <img src="/images/profile.png" alt="Profile Picture" class="profile-pic">
                <div class="profile-info">
                    <h3><%= user.firstName %> <%= user.lastName %></h3>
                    <p><%= user.jobTitle %>, <%= user.departmentName %></p>
                    <p><i class="fas fa-envelope"></i> <%= user.userEmail || 'No email available' %></p>
                </div>
            </div>
        
            <div class="columns">
                <!-- Column 1: Personal Information -->
                <div class="column" id="personal-info">
                    <div class="section">
                        <h2><i class="fas fa-user"></i> Personal Information</h2>
                        <div class="info-item">
                            <strong>Phone:</strong> <span><%= user.phoneNumber || 'Not provided' %></span>
                        </div>
                        <div class="info-item">
                            <strong>Date of Birth:</strong> <span><%= user.dateOfBirth ? new Date(user.dateOfBirth).toLocaleDateString() : 'Not provided' %></span>
                        </div>
                        <div class="info-item">
                            <strong>Emergency Contact:</strong> 
                            <span><%= user.emergencyContactName || 'Not provided' %> 
                            <%= user.emergencyContactNumber ? `(${user.emergencyContactNumber})` : '' %></span>
                        </div>
                    </div>
                    <div class="section">
                        <h2><i class="fas fa-briefcase"></i> Employment Details</h2>
                        <div class="info-item">
                            <strong>Job Title:</strong> <span><%= user.jobTitle || 'Not assigned' %></span>
                        </div>
                        <div class="info-item">
                            <strong>Department:</strong> <span><%= user.departmentName || 'Not assigned' %></span>
                        </div>
                        <div class="info-item">
                            <strong>Employment Type:</strong> <span><%= user.employmentType || 'Not specified' %></span>
                        </div>
                        <div class="info-item">
                            <strong>Hire Date:</strong> <span><%= user.hireDate ? new Date(user.hireDate).toLocaleDateString() : 'Not provided' %></span>
                        </div>
                    </div>
                </div>
        
                <!-- Column 2: Career Progression -->
                <div class="column" id="career-progression">
                    <div class="section">
                        <h2><i class="fas fa-chart-line"></i> Career Progression</h2>
                        <div class="milestone-container">
                            <% if (user.milestones && user.milestones.length > 0) { %>
                                <% user.milestones.forEach((milestone, index) => { %>
                                    <div class="milestone">
                                        <div class="milestone-label">
                                            <h4>Milestone <%= index + 1 %></h4>
                                            <p><%= milestone.milestoneName %></p>
                                            <small>
                                                <%= new Date(milestone.startDate).toLocaleDateString() %> 
                                                <% if (milestone.endDate) { %> 
                                                    - <%= new Date(milestone.endDate).toLocaleDateString() %>
                                                <% } else { %>
                                                    - Present
                                                <% } %>
                                            </small>
                                        </div>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <div class="milestone">
                                    <div class="milestone-label">
                                        <p>No career progression milestones available.</p>
                                    </div>
                                </div>
                            <% } %>
                        </div>
                    </div>
                </div>
        
                <!-- Column 3: Degrees, Experiences, and Certifications -->
                <div class="column" id="degree-experience-certifications">
                    <div class="section">
                        <h2><i class="fas fa-graduation-cap"></i> Education</h2>
                        <% if (user.degrees && user.degrees.length > 0) { %>
                            <% user.degrees.forEach((degree) => { %>
                                <div class="degree-item card-item">
                                    <h4><%= degree.degreeName %></h4>
                                    <p><%= degree.universityName %></p>
                                    <p><small>Graduation Year: <%= degree.graduationYear %></small></p>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <p>No degree information available.</p>
                        <% } %>
                    </div>
        
                    <div class="section">
                        <h2><i class="fas fa-history"></i> Work Experience</h2>
                        <% if (user.experiences && user.experiences.length > 0) { %>
                            <% user.experiences.forEach((experience) => { %>
                                <div class="experience-item card-item">
                                    <h4><%= experience.companyName %></h4>
                                    <p><small>
                                        <%= new Date(experience.startDate).toLocaleDateString() %> 
                                        <% if (experience.endDate) { %> 
                                            - <%= new Date(experience.endDate).toLocaleDateString() %>
                                        <% } else { %>
                                            - Present
                                        <% } %>
                                    </small></p>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <p>No experience information available.</p>
                        <% } %>
                    </div>
        
                    <div class="section">
                        <h2><i class="fas fa-certificate"></i> Certifications</h2>
                        <% if (user.certifications && user.certifications.length > 0) { %>
                            <% user.certifications.forEach((certification) => { %>
                                <div class="certification-item card-item">
                                    <h4><%= certification.certificateName %></h4>
                                    <p><small>Issued: <%= new Date(certification.certDate).toLocaleDateString() %></small></p>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <p>No certification information available.</p>
                        <% } %>
                    </div>
                </div>
            </div>
            
            <!-- Attendance Logs Section -->
            <section id="attendance-logs" class="section">
                <h2><i class="fas fa-calendar-check"></i> Weekly Attendance Logs</h2>
                <table>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Date</th>
                            <th>Department</th>
                            <th>Position</th>
                            <th>Time In</th>
                            <th>Time Out</th>
                            <th>Hours</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (user.attendance && user.attendance.length > 0) { %>
                            <% user.attendance.forEach(log => { %>
                                <tr>
                                    <td><%= log.firstName %> <%= log.lastName %></td>
                                    <td><%= log.date %></td>
                                    <td><%= log.department %></td>
                                    <td><%= log.jobTitle %></td>
                                    <td><%= log.timeIn %></td>
                                    <td><%= log.timeOut %></td>
                                    <td><%= log.activeWorkingHours %></td>
                                </tr>
                            <% }) %>
                        <% } else { %>
                            <tr>
                                <td colspan="7" style="text-align: center;">No attendance logs available.</td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </section>
            
            <!-- Performance Tracker Section -->
            <section class="stepper section">
                <div class="stepper-header">
                    <h2><i class="fas fa-tasks"></i> Objective and Performance Review Tracker</h2>
                    <section class="year-filter">
                        <label for="yearSelect">Select Year:</label>
                        <select id="yearSelect" onchange="fetchYearData()">
                            <option value="">-- Select Year --</option>
                            <% for (let year of viewState.years) { %>
                                <option value="<%= year %>" <%= year === viewState.selectedYear ? 'selected' : '' %>><%= year %></option>
                            <% } %>
                        </select>
                    </section>
                </div>
                <div class="stepper-container">
                    <!-- Objective Setting -->
                    <div class="step <%= viewState.viewOnlyStatus['objectivesettings'] ? 'view-only' : 'accessible' %>" id="objectivesButton">
                        <div class="step-icon"><i class="fa fa-bullseye"></i></div>
                        <div class="step-label">
                            Objective Setting
                            <% if (viewState.viewOnlyStatus['objectivesettings']) { %>
                                <span class="status-badge">(View-Only)</span>
                            <% } else { %>
                                <span class="status-badge">(Editable)</span>
                            <% } %>
                        </div>
                    </div>
            
                    <!-- Feedback Q1 -->
                    <div class="step <%= (viewState.submittedObjectives && viewState.submittedObjectives.length > 0) ? 'accessible' : 'disabled' %>" id="feedbackButtonQ1" data-quarter="1" onclick="showFeedbackForm()">
                        <div class="step-icon"><i class="fa fa-users"></i></div>
                        <div class="step-label">
                            Q1 Feedback
                            <% if (viewState.viewOnlyStatus['feedbacks_Q1']) { %>
                                <span class="status-badge">(View-Only)</span>
                            <% } else { %>
                                <span class="status-badge">(Editable)</span>
                            <% } %>
                        </div>
                        <% if (!(viewState.submittedObjectives && viewState.submittedObjectives.length > 0)) { %>
                            <div class="notice">Submit objectives first</div>
                        <% } %>
                    </div>
            
                    <!-- Feedback Q2 -->
                    <div class="step <%= (viewState.submittedObjectives && viewState.submittedObjectives.length > 0 && viewState.viewOnlyStatus['feedbacks_Q1']) ? 'accessible' : 'disabled' %>" id="feedbackButtonQ2" data-quarter="2" onclick="showFeedbackForm()">
                        <div class="step-icon"><i class="fa fa-users"></i></div>
                        <div class="step-label">
                            Q2 Feedback
                            <% if (viewState.viewOnlyStatus['feedbacks_Q2']) { %>
                                <span class="status-badge">(View-Only)</span>
                            <% } else { %>
                                <span class="status-badge">(Editable)</span>
                            <% } %>
                        </div>
                    </div>
            
                    <!-- Mid-Year IDP -->
                    <div class="step <%= (viewState.submittedObjectives && viewState.submittedObjectives.length > 0 && viewState.viewOnlyStatus['feedbacks_Q2']) ? 'accessible' : 'disabled' %>" id="midYearIDP">
                        <div class="step-icon"><i class="fa fa-clipboard-check"></i></div>
                        <div class="step-label">
                            Mid-Year IDP
                            <% if (viewState.viewOnlyStatus.midyearidp) { %>
                                <span class="status-badge">(View-Only)</span>
                            <% } else { %>
                                <span class="status-badge">(Editable)</span>
                            <% } %>
                        </div>
                    </div>
            
                    <!-- Feedback Q3 -->
                    <div class="step <%= (viewState.submittedObjectives && viewState.submittedObjectives.length > 0 && viewState.viewOnlyStatus['feedbacks_Q2'] && viewState.viewOnlyStatus['feedbacks_Q1']) ? 'accessible' : 'disabled' %>" id="feedbackButtonQ3" data-quarter="3" onclick="showFeedbackForm()">
                        <div class="step-icon"><i class="fa fa-users"></i></div>
                        <div class="step-label">
                            Q3 Feedback
                            <% if (viewState.viewOnlyStatus['feedbacks_Q3']) { %>
                                <span class="status-badge">(View-Only)</span>
                            <% } else { %>
                                <span class="status-badge">(Editable)</span>
                            <% } %>
                        </div>
                    </div>
            
                    <!-- Feedback Q4 -->
                    <div class="step <%= (viewState.submittedObjectives && viewState.submittedObjectives.length > 0 && viewState.viewOnlyStatus['feedbacks_Q3'] && viewState.viewOnlyStatus['feedbacks_Q2'] && viewState.viewOnlyStatus['feedbacks_Q1']) ? 'accessible' : 'disabled' %>" id="feedbackButtonQ4" data-quarter="4" onclick="showFeedbackForm()">
                        <div class="step-icon"><i class="fa fa-users"></i></div>
                        <div class="step-label">
                            Q4 Feedback
                            <% if (viewState.viewOnlyStatus['feedbacks_Q4']) { %>
                                <span class="status-badge">(View-Only)</span>
                            <% } else { %>
                                <span class="status-badge">(Editable)</span>
                            <% } %>
                        </div>
                    </div>
            
                    <!-- Final-Year IDP -->
                    <div class="step <%= (viewState.submittedObjectives && viewState.submittedObjectives.length > 0 && viewState.viewOnlyStatus['feedbacks_Q4']) ? 'accessible' : 'disabled' %>" id="finalYearIDP">
                        <div class="step-icon"><i class="fa fa-clipboard-check"></i></div>
                        <div class="step-label">
                            Final-Year IDP
                            <% if (viewState.viewOnlyStatus.finalyearidp) { %>
                                <span class="status-badge">(View-Only)</span>
                            <% } else { %>
                                <span class="status-badge">(Editable)</span>
                            <% } %>
                        </div>
                    </div>
                </div>
            </section>
            
            <!-- Form for setting objectives -->
            <form id="objectiveSettingsForm" method="POST" action="/linemanager/records-performance-tracker/<%= user.userId %>">
                <section id="objective-skill-progress-form" class="fade-out section" style="display: none;">
                    <h2>Annual Objective Setting Form</h2>
                    
                    <div class="header-grid">
                        <div><strong>Employee:</strong> <%= user.lastName %>, <%= user.firstName %></div>
                        <div><strong>Position:</strong> <%= user.jobTitle %></div>
                        <div><strong>Year:</strong> <span id="performanceDate"><%= new Date().getFullYear() %></span></div>
                        <div><strong>Company:</strong> Prime Infrastructure</div>
                        <div><strong>Department:</strong> <%= user.departmentName %></div>
                    </div>
                    
                    <input type="hidden" name="userId" value="<%= user.userId %>">
                    <input type="hidden" id="jobId" name="jobId" value="<%= user.jobId %>">
                    <input type="hidden" id="departmentId" name="departmentId" value="<%= user.departmentId %>">
                    
                    <table>
                        <thead>
                            <tr>
                                <th>KRA/Objectives</th>
                                <th>KPI</th>
                                <th>Target</th>
                                <th>UOM</th>
                                <th>Weight</th>
                                <th>Actions</th>
                            </tr>
                            <tr>
                                <th colspan="6" style="background-color: #f9f9f9; font-weight: normal; text-align: center; font-style: italic;">
                                    Example: "Improve Customer Satisfaction" | "Satisfaction Rate" | "90" | "%" | "20"
                                </th>
                            </tr>
                        </thead>
                        <tbody id="progress-table-body">
                            <tr>
                                <td><input type="text" placeholder="Enter Objective" name="objectiveDescrpt" required></td>
                                <td><input type="text" placeholder="Enter KPI" name="objectiveKPI" required></td>
                                <td><input type="text" placeholder="Enter Target" name="objectiveTarget" required></td>
                                <td><input type="text" placeholder="Enter UOM" name="objectiveUOM" required></td>
                                <td><input type="number" class="weight-input" oninput="updateTotalWeight()" placeholder="Weight %" name="objectiveAssignedWeight" min="0" max="100" required></td>
                                <td><button type="button" class="cancel-btn" onclick="removeRow(this)">Remove</button></td>
                            </tr>
                        </tbody>
                    </table>
                    
                    <button id="addRowBtn" type="button" class="add-btn" onclick="addRow()">
                        <i class="fas fa-plus"></i> Add Objective
                    </button>
                    
                    <div class="weight-summary" style="margin: 15px 0; padding: 10px; background-color: #f9f9f9; border-radius: 8px; border-left: 4px solid #124A5C;">
                        <strong>Total Assigned Weight:</strong> 
                        <span id="totalWeightDisplay">0</span>% <span style="color: #f44336; font-size: 0.9em;">(must equal 100%)</span>
                        <input id="totalWeight" type="hidden" value="0">
                    </div>
            
                    <div class="confirmation-box" style="margin: 20px 0; padding: 15px; background-color: rgba(76, 175, 80, 0.1); border-radius: 8px; border: 1px solid rgba(76, 175, 80, 0.3);">
                        <label style="display: flex; align-items: center; cursor: pointer;">
                            <input type="checkbox" id="confirmationCheckbox" required style="margin-right: 10px;">
                            <span>I confirm that the objective weights have been accurately consolidated and reviewed.</span>
                        </label>
                    </div>
                    
                    <div id="submitButtonContainer">
                        <button id="saveButton" type="submit" class="save-btn">
                            <i class="fas fa-save"></i> Save Objectives
                        </button>
                    </div>
                </section>
            
                <% if (viewState.viewOnlyStatus['objectivesettings']) { %>
                    <section id="view-only-page" class="fade-out section" style="display: none;">
                        <h2><i class="fas fa-clipboard-list"></i> Submitted Annual Objective Setting Form</h2>
                        <div class="header-grid">
                            <div><strong>Employee:</strong> <%= user.lastName %>, <%= user.firstName %></div>
                            <div><strong>Position:</strong> <%= user.jobTitle %></div>
                            <div><strong>Performance Year:</strong> <%= viewState.performancePeriodYear %></div>
                            <div><strong>Company:</strong> Prime Infrastructure</div>
                            <div><strong>Department:</strong> <%= user.departmentName %></div>
                        </div>
                        
                        <div id="objectivesData" class="view-only-section">
                            <table>
                                <thead>
                                    <tr>
                                        <th>KRA/Objectives</th>
                                        <th>KPI</th>
                                        <th>Target</th>
                                        <th>UOM</th>
                                        <th>Assigned Weight</th>
                                    </tr>
                                </thead>
                                <tbody id="view-only-table-body">
                                    <% if (viewState.submittedObjectives && viewState.submittedObjectives.length > 0) { %>
                                        <% viewState.submittedObjectives.forEach(obj => { %>
                                            <tr>
                                                <td><%= obj.objectiveDescrpt || 'N/A' %></td>
                                                <td><%= obj.objectiveKPI || 'N/A' %></td>
                                                <td><%= obj.objectiveTarget || 'N/A' %></td>
                                                <td><%= obj.objectiveUOM || 'N/A' %></td>
                                                <td><%= obj.objectiveAssignedWeight !== undefined ? (obj.objectiveAssignedWeight * 100).toFixed(2) + '%' : 'N/A' %></td>
                                            </tr>
                                        <% }); %>
                                    <% } else { %>
                                        <tr>
                                            <td colspan="5" style="text-align: center; padding: 20px;">No objectives submitted yet.</td>
                                        </tr>
                                    <% } %>
                                </tbody>
                            </table>
                        </div>
                    </section>
                <% } %>
            
                <div id="viewState" data-viewstate='<%= JSON.stringify(viewState) %>' style="display:none;"></div>
            </form>

            <!-- 360 Degree Feedback Form -->
<form id="feedbackForm" method="POST" action="/linemanager/records-performance-tracker/questionnaire/<%= user.userId %>">                
    <section id="feedback-section" class="fade-out section" style="display: none;">
        <input type="hidden" id="userId" value="<%= user.userId %>">
        <!-- Add the buttons container -->
        <div class="feedback-view-buttons" style="display: flex; gap: 15px; margin-bottom: 20px;">
            <button type="button" id="viewQuestionnaireBtn" class="primary-btn" style="flex: 1; background-color: var(--primary-color); color: white; border: none; padding: 12px 15px; border-radius: var(--border-radius); cursor: pointer; font-weight: 500; display: flex; align-items: center; justify-content: center; gap: 8px;">
                <i class="fas fa-list-ul"></i> View Questionnaire
            </button>
            <button type="button" id="viewFeedbackBtn" class="secondary-btn" style="flex: 1; background-color: var(--secondary-color); color: white; border: none; padding: 12px 15px; border-radius: var(--border-radius); cursor: pointer; font-weight: 500; display: flex; align-items: center; justify-content: center; gap: 8px;">
                <i class="fas fa-comments"></i> View Feedback
            </button>
        </div>
        
        <!-- Questionnaire content container -->
        <div id="questionnaireContent">
            <div class="form-header">
                <h2><i class="fas fa-comment-dots"></i> 360 Degree Feedback Questionnaire</h2>
                <div class="date-inputs" style="display: flex; gap: 20px; margin-bottom: 20px;">
                    <!-- Start Date -->
                    <div class="date-input" style="flex: 1;">
                        <label for="startDate"><strong>Start Date:</strong></label>
                        <% 
                        const feedbackQ1 = viewState.feedbacks.feedbacks_Q1; // Access feedbacks for Q1
                        const currentDate = new Date();
                        let startDate = '';
                        let endDate = '';
                        let isViewOnly = false;
    
                        if (feedbackQ1 && feedbackQ1.length > 0) { 
                            const feedback = feedbackQ1[0]; 
                            startDate = feedback.setStartDate;
                            endDate = feedback.setEndDate;
                            isViewOnly = true; // Set to view only after submission
                        } 
                        %>
                        <% if (isViewOnly) { %>
                            <span class="date-display"><%= startDate %></span> <!-- Display as text if view-only -->
                        <% } else { %>
                            <input type="date" id="startDate" name="startDate" class="input-field" 
                                   value="<%= startDate %>" required>
                        <% } %>
                    </div>
    
                    <!-- End Date -->
                    <div class="date-input" style="flex: 1;">
                        <label for="endDate"><strong>End Date:</strong></label>
                        <% if (isViewOnly) { %>
                            <span class="date-display"><%= endDate %></span> <!-- Display as text if view-only -->
                        <% } else { %>
                            <input type="date" id="endDate" name="endDate" class="input-field" 
                                   value="<%= endDate %>" required>
                        <% } %>
                    </div>
                </div>
            </div>
    
            <!-- Instructions Card -->
            <div class="instructions-card" style="background-color: #f9f9f9; border-radius: 8px; padding: 20px; margin-bottom: 20px; border-left: 4px solid #124A5C;">
                <h3 style="margin-top: 0;"><i class="fas fa-info-circle"></i> Instructions</h3>
                <p><strong>Setting Start and End Date:</strong> When creating a 360-degree feedback questionnaire, it is essential to set a start and end date. This schedule will automatically notify employees through the system, ensuring that they are aware of the timeframe for providing feedback.</p>
                
                <p><strong>Setting of Guide Questions:</strong> The Line Manager should prepare guide questions that support co-employees in providing both qualitative and quantitative feedback for each role-specific objective. Additionally, employees will rate the hard and soft skills required for the job, offering qualitative comments and quantitative scores. These structured questions enable clear, measurable evaluations and ensure alignment with the objectives being tracked.</p>                    
            </div>
    
            <div class="employee-details" style="background-color: rgba(18, 74, 92, 0.05); border-radius: 8px; padding: 15px; margin-bottom: 20px;">
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                    <div><strong>Employee:</strong> <%= user.lastName %>, <%= user.firstName %></div>
                    <div><strong>Position:</strong> <%= user.jobTitle %></div>
                    <div><strong>Company:</strong> Prime Infrastructure</div>
                    <div><strong>Department:</strong> <%= user.departmentName %></div>
                </div>
            </div>
            
            <hr class="divider" style="border: 0; height: 1px; background-color: #ddd; margin: 20px 0;" />
            
            <h3 style="color: #124A5C;"><i class="fas fa-bullseye"></i> Objective Setting Questions</h3>
            
            <table>
                <thead>
                    <tr>
                        <th>KRA/Objectives</th>
                        <th>KPI</th>
                        <th>Target</th>
                        <th>UOM</th>
                        <th>Weight</th>
                    </tr>
                </thead>
                <tbody id="feedback-table-body">
                    <!-- Dynamic feedback rows will be added here by JavaScript -->
                </tbody>
            </table>
    
            <!-- Hard Skills Section -->
            <h3 style="color: #124A5C; margin-top: 30px;"><i class="fas fa-cogs"></i> Hard Skills</h3>
            <table id="hardSkillsTable">
                <thead>
                    <tr>
                        <th>Skill Name</th>
                    </tr>
                </thead>
                <tbody id="hard-skills-table-body">
                    <!-- Hard skill rows will be dynamically inserted here -->
                </tbody>
            </table>
            
            <!-- Soft Skills Section -->
            <h3 style="color: #124A5C; margin-top: 30px;"><i class="fas fa-comments"></i> Soft Skills</h3>
            <table id="softSkillsTable">
                <thead>
                    <tr>
                        <th>Skill Name</th>
                    </tr>
                </thead>
                <tbody id="soft-skills-table-body">
                    <!-- Soft skill rows will be dynamically inserted here -->
                </tbody>
            </table>
            
            <div style="margin-top: 30px; text-align: right;">
                <button id="save360DegreeFeedback" type="submit" class="save-btn" <%= isViewOnly ? 'disabled' : '' %>>
                    <i class="fas fa-save"></i> Save Questionnaire
                </button>
            </div>
        </div>
        
        <!-- Feedback responses container (initially hidden) -->
        <div id="feedbackContent" style="display: none;">
            <div class="form-header">
                <h2><i class="fas fa-comment-dots"></i> 360 Degree Feedback Responses</h2>
            </div>
            
            <!-- Feedback response tabs -->
            <div class="feedback-tabs" style="margin-bottom: 20px; border-bottom: 1px solid #ddd;">
                <div style="display: flex; gap: 5px;">
                    <button type="button" id="summaryTab" class="tab-button active" style="padding: 12px 20px; background-color: var(--primary-color); color: white; border: none; border-radius: 8px 8px 0 0; cursor: pointer; font-weight: 500;">
                        <i class="fas fa-chart-pie"></i> Summary
                    </button>
                    <button type="button" id="answersTab" class="tab-button" style="padding: 12px 20px; background-color: #f1f1f1; color: #333; border: none; border-radius: 8px 8px 0 0; cursor: pointer; font-weight: 500;">
                        <i class="fas fa-list-alt"></i> Individual Answers
                    </button>
                </div>
            </div>
            
            <!-- Summary content -->
            <div id="summaryContent">
                <div class="feedback-stats" style="background-color: #f5f7fa; border-radius: 8px; padding: 20px; margin-bottom: 25px; border-left: 4px solid var(--secondary-color);">
                    <h3 style="margin-top: 0;"><i class="fas fa-chart-bar"></i> Feedback Summary</h3>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-top: 15px;">
                        <div class="stat-card" style="background-color: white; padding: 15px; border-radius: 6px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                            <h4 style="margin-top: 0; color: var(--primary-color);">Total Responses</h4>
                            <p style="font-size: 24px; font-weight: bold; margin: 5px 0 0 0;" id="totalResponses">-</p>
                        </div>
                        <div class="stat-card" style="background-color: white; padding: 15px; border-radius: 6px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                            <h4 style="margin-top: 0; color: var(--primary-color);">Average Rating</h4>
                            <p style="font-size: 24px; font-weight: bold; margin: 5px 0 0 0;" id="averageRating">-</p>
                        </div>
                        <div class="stat-card" style="background-color: white; padding: 15px; border-radius: 6px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                            <h4 style="margin-top: 0; color: var(--primary-color);">Completion Rate</h4>
                            <p style="font-size: 24px; font-weight: bold; margin: 5px 0 0 0;" id="completionRate">-</p>
                        </div>
                    </div>
                </div>
                
                <h3 style="color: #124A5C;"><i class="fas fa-bullseye"></i> Objective Feedback</h3>
                <div id="objectiveFeedbackContainer">
                    <!-- Objective feedback will be loaded here -->
                    <div class="empty-state" style="text-align: center; padding: 30px; background-color: #f9f9f9; border-radius: 8px;">
                        <i class="fas fa-inbox" style="font-size: 48px; color: #ccc; margin-bottom: 15px;"></i>
                        <p>No feedback responses available yet.</p>
                    </div>
                </div>
                
                <h3 style="color: #124A5C; margin-top: 30px;"><i class="fas fa-cogs"></i> Skills Feedback</h3>
                <div id="skillsFeedbackContainer">
                    <!-- Skills feedback will be loaded here -->
                    <div class="empty-state" style="text-align: center; padding: 30px; background-color: #f9f9f9; border-radius: 8px;">
                        <i class="fas fa-inbox" style="font-size: 48px; color: #ccc; margin-bottom: 15px;"></i>
                        <p>No skills feedback responses available yet.</p>
                    </div>
                </div>
            </div>
            
            <!-- Individual answers content (initially hidden) -->
            <div id="answersContent" style="display: none;">
                <div class="filter-bar" style="background-color: #f5f7fa; border-radius: 8px; padding: 15px; margin-bottom: 20px; display: flex; gap: 15px; flex-wrap: wrap; align-items: center;">
                    <div>
                        <label for="responderFilter" style="font-weight: 500; margin-right: 8px; color: var(--primary-color);">Filter by:</label>
                        <select id="responderFilter" style="padding: 8px; border: 1px solid #ddd; border-radius: 4px; background-color: white;">
                            <option value="all">All Responders</option>
                            <option value="peer">Peers</option>
                            <option value="direct">Direct Reports</option>
                            <option value="manager">Managers</option>
                        </select>
                    </div>
                    <div>
                        <label for="questionFilter" style="font-weight: 500; margin-right: 8px; color: var(--primary-color);">Question:</label>
                        <select id="questionFilter" style="padding: 8px; border: 1px solid #ddd; border-radius: 4px; background-color: white;">
                            <option value="all">All Questions</option>
                            <option value="obj1">Improve Customer Satisfaction</option>
                            <option value="obj2">Increase Sales Revenue</option>
                            <option value="obj3">Reduce Operating Costs</option>
                        </select>
                    </div>
                </div>
                
                <div id="individualAnswersContainer">
                    <!-- Individual answers will be populated here -->
                    
                    <!-- Sample answer records -->
                    <div class="answer-card" style="background-color: white; border-radius: 8px; padding: 20px; margin-bottom: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                        <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 15px;">
                            <div>
                                <h4 style="margin: 0; color: var(--primary-color);">Responder #1 (Peer)</h4>
                                <p style="margin: 5px 0 0 0; color: #555; font-size: 0.9em;">Submitted on March 15, 2025</p>
                            </div>
                            <div class="response-status" style="background-color: #4CAF50; color: white; padding: 5px 10px; border-radius: 20px; font-size: 0.8em; font-weight: bold;">
                                Complete
                            </div>
                        </div>
                        
                        <div class="answer-group" style="margin-bottom: 20px; padding-bottom: 15px; border-bottom: 1px solid #eee;">
                            <h5 style="margin: 0 0 10px 0; color: var(--secondary-color);">Improve Customer Satisfaction</h5>
                            <div style="display: flex; align-items: center; margin-bottom: 10px;">
                                <div style="margin-right: 15px;">
                                    <strong style="color: #555;">Rating:</strong>
                                    <span style="font-weight: bold; color: var(--primary-color); margin-left: 5px;">4.5/5.0</span>
                                </div>
                                <div class="star-display" style="color: #FFD700;">
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star-half-alt"></i>
                                </div>
                            </div>
                            <div>
                                <strong style="color: #555;">Comment:</strong>
                                <p style="margin: 5px 0 0 0;">The employee has consistently demonstrated excellent customer service skills. They handled the difficult client situation last month particularly well.</p>
                            </div>
                        </div>
                        
                        <div class="answer-group" style="margin-bottom: 20px; padding-bottom: 15px; border-bottom: 1px solid #eee;">
                            <h5 style="margin: 0 0 10px 0; color: var(--secondary-color);">Increase Sales Revenue</h5>
                            <div style="display: flex; align-items: center; margin-bottom: 10px;">
                                <div style="margin-right: 15px;">
                                    <strong style="color: #555;">Rating:</strong>
                                    <span style="font-weight: bold; color: var(--primary-color); margin-left: 5px;">4.0/5.0</span>
                                </div>
                                <div class="star-display" style="color: #FFD700;">
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="far fa-star"></i>
                                </div>
                            </div>
                            <div>
                                <strong style="color: #555;">Comment:</strong>
                                <p style="margin: 5px 0 0 0;">Has shown good initiative in identifying new sales opportunities, but could benefit from additional training in closing techniques.</p>
                            </div>
                        </div>
                        
                        <div class="skill-ratings" style="background-color: #f9f9f9; border-radius: 6px; padding: 15px;">
                            <h5 style="margin: 0 0 10px 0; color: var(--secondary-color);">Skills Assessment</h5>
                            <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 10px;">
                                <div class="skill-rating" style="display: flex; justify-content: space-between;">
                                    <span>Communication:</span>
                                    <strong>5/5</strong>
                                </div>
                                <div class="skill-rating" style="display: flex; justify-content: space-between;">
                                    <span>Technical Knowledge:</span>
                                    <strong>4/5</strong>
                                </div>
                                <div class="skill-rating" style="display: flex; justify-content: space-between;">
                                    <span>Problem Solving:</span>
                                    <strong>4/5</strong>
                                </div>
                                <div class="skill-rating" style="display: flex; justify-content: space-between;">
                                    <span>Leadership:</span>
                                    <strong>3/5</strong>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="answer-card" style="background-color: white; border-radius: 8px; padding: 20px; margin-bottom: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                        <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 15px;">
                            <div>
                                <h4 style="margin: 0; color: var(--primary-color);">Responder #2 (Direct Report)</h4>
                                <p style="margin: 5px 0 0 0; color: #555; font-size: 0.9em;">Submitted on March 18, 2025</p>
                            </div>
                            <div class="response-status" style="background-color: #4CAF50; color: white; padding: 5px 10px; border-radius: 20px; font-size: 0.8em; font-weight: bold;">
                                Complete
                            </div>
                        </div>
                        
                        <div class="answer-group" style="margin-bottom: 20px; padding-bottom: 15px; border-bottom: 1px solid #eee;">
                            <h5 style="margin: 0 0 10px 0; color: var(--secondary-color);">Improve Customer Satisfaction</h5>
                            <div style="display: flex; align-items: center; margin-bottom: 10px;">
                                <div style="margin-right: 15px;">
                                    <strong style="color: #555;">Rating:</strong>
                                    <span style="font-weight: bold; color: var(--primary-color); margin-left: 5px;">5.0/5.0</span>
                                </div>
                                <div class="star-display" style="color: #FFD700;">
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                </div>
                            </div>
                            <div>
                                <strong style="color: #555;">Comment:</strong>
                                <p style="margin: 5px 0 0 0;">Excellent leadership in implementing new customer service standards. Has created a positive environment that encourages team members to prioritize customer needs.</p>
                            </div>
                        </div>
                        
                        <div class="answer-group" style="margin-bottom: 20px; padding-bottom: 15px; border-bottom: 1px solid #eee;">
                            <h5 style="margin: 0 0 10px 0; color: var(--secondary-color);">Reduce Operating Costs</h5>
                            <div style="display: flex; align-items: center; margin-bottom: 10px;">
                                <div style="margin-right: 15px;">
                                    <strong style="color: #555;">Rating:</strong>
                                    <span style="font-weight: bold; color: var(--primary-color); margin-left: 5px;">4.5/5.0</span>
                                </div>
                                <div class="star-display" style="color: #FFD700;">
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star-half-alt"></i>
                                </div>
                            </div>
                            <div>
                                <strong style="color: #555;">Comment:</strong>
                                <p style="margin: 5px 0 0 0;">Has implemented several cost-saving measures that have significantly reduced department expenses without compromising quality.</p>
                            </div>
                        </div>
                        
                        <div class="skill-ratings" style="background-color: #f9f9f9; border-radius: 6px; padding: 15px;">
                            <h5 style="margin: 0 0 10px 0; color: var(--secondary-color);">Skills Assessment</h5>
                            <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 10px;">
                                <div class="skill-rating" style="display: flex; justify-content: space-between;">
                                    <span>Communication:</span>
                                    <strong>5/5</strong>
                                </div>
                                <div class="skill-rating" style="display: flex; justify-content: space-between;">
                                    <span>Technical Knowledge:</span>
                                    <strong>4/5</strong>
                                </div>
                                <div class="skill-rating" style="display: flex; justify-content: space-between;">
                                    <span>Problem Solving:</span>
                                    <strong>5/5</strong>
                                </div>
                                <div class="skill-rating" style="display: flex; justify-content: space-between;">
                                    <span>Leadership:</span>
                                    <strong>5/5</strong>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div style="text-align: center; margin-top: 20px;">
                    <button type="button" style="background-color: var(--primary-color); color: white; border: none; padding: 10px 20px; border-radius: var(--border-radius); cursor: pointer; font-weight: 500;">
                        <i class="fas fa-download"></i> Export All Answers
                    </button>
                </div>
            </div>
        </div>
    </section>
</form>
<!-- Mid-Year IDP Form with Improved Frontend -->
<section id="midYearIDPForm" class="fade-out section" style="display: none;">
    <div class="idp-progress">
        <h3><i class="fas fa-chart-line"></i> Development Plan Progress</h3>
        <p>Complete all required fields to finalize your mid-year Individual Development Plan.</p>
        <div class="progress-bar-container">
            <div class="progress-bar" id="midYearIDPProgressBar" style="width: 0%"></div>
        </div>
        <div style="display: flex; justify-content: space-between; margin-top: 5px;">
            <span>0%</span>
            <span>100%</span>
        </div>
    </div>

    <div class="idp-header" style="background: linear-gradient(to right, rgba(18, 74, 92, 0.1), rgba(5, 156, 164, 0.05)); padding: 20px; border-radius: var(--border-radius); margin-bottom: 25px;">
        <h2><i class="fas fa-clipboard-check"></i> Mid-Year Individual Development Plan (IDP)</h2>
        <p style="margin-top: 10px; color: #555;">
            The Mid-Year IDP serves as a checkpoint to evaluate progress on professional goals and career development.
            Use this opportunity to identify strengths, areas for improvement, and establish a clear path forward.
        </p>
    </div>

    <form id="midYearIDPFormDetails" method="POST" action="/linemanager/midyear-idp/<%= user.userId %>" class="idp-form">
        <!-- Professional Competences -->
        <fieldset>
            <legend><i class="fas fa-briefcase"></i> PROFESSIONAL COMPETENCES</legend>

            <div class="form-group">
                <label for="profStrengths">
                    <strong>STRENGTHS:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Identify technical skills and professional competencies where the employee has demonstrated excellence.</span>
                    </div>
                </label>
                <textarea id="profStrengths" name="profStrengths" rows="4" placeholder="Describe technical competences and areas where the employee has shown particular expertise" onkeyup="updateIDPProgress()"></textarea>
                <div class="char-counter"><span id="profStrengthsCount">0</span> characters</div>
            </div>

            <div class="form-group">
                <label for="profAreasForDevelopment">
                    <strong>AREAS FOR DEVELOPMENT:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Note specific technical or professional skills that require further development.</span>
                    </div>
                </label>
                <textarea id="profAreasForDevelopment" name="profAreasForDevelopment" rows="4" placeholder="Describe technical or professional gaps identified during the first half of the year" onkeyup="updateIDPProgress()"></textarea>
                <div class="char-counter"><span id="profAreasCount">0</span> characters</div>
            </div>

            <div class="form-group">
                <label for="profActionsToTake">
                    <strong>ACTIONS TO TAKE:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Specify concrete actions aligned with the 70-20-10 model (70% on-the-job learning, 20% mentoring, 10% formal training).</span>
                    </div>
                </label>
                <div class="development-model-guide" style="background-color: #f5f7fa; border-radius: 6px; padding: 10px; margin-bottom: 10px;">
                    <h4 style="margin-top: 0; font-size: 14px; color: var(--primary-color);">70-20-10 Development Model</h4>
                    <div style="display: flex; flex-wrap: wrap; gap: 10px; font-size: 13px;">
                        <div style="flex: 1; min-width: 180px;">
                            <strong>70% - Experiential Learning</strong>
                            <p style="margin: 5px 0;">On-the-job experiences, challenging assignments</p>
                        </div>
                        <div style="flex: 1; min-width: 180px;">
                            <strong>20% - Social Learning</strong>
                            <p style="margin: 5px 0;">Mentoring, coaching, feedback</p>
                        </div>
                        <div style="flex: 1; min-width: 180px;">
                            <strong>10% - Formal Learning</strong>
                            <p style="margin: 5px 0;">Courses, workshops, reading</p>
                        </div>
                    </div>
                </div>
                <textarea id="profActionsToTake" name="profActionsToTake" rows="4" placeholder="Describe specific actions to close professional gaps, considering experiential learning (70%), mentoring (20%), and formal training (10%)" onkeyup="updateIDPProgress()"></textarea>
                <div class="char-counter"><span id="profActionsCount">0</span> characters</div>
            </div>
        </fieldset>

        <!-- Leadership Competences -->
        <fieldset>
            <legend><i class="fas fa-users"></i> LEADERSHIP COMPETENCES</legend>

            <div class="form-group">
                <label for="leaderStrengths">
                    <strong>STRENGTHS:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Identify leadership qualities and behaviors where the employee excels.</span>
                    </div>
                </label>
                <div class="leadership-model" style="display: flex; flex-wrap: wrap; gap: 8px; margin-bottom: 10px;">
                    <!-- Leadership tags area kept empty as requested -->
                </div>
                <textarea id="leaderStrengths" name="leaderStrengths" rows="4" placeholder="Describe leadership competences where the employee shows strength" onkeyup="updateIDPProgress()"></textarea>
                <div class="char-counter"><span id="leaderStrengthsCount">0</span> characters</div>
            </div>

            <div class="form-group">
                <label for="leaderAreasForDevelopment">
                    <strong>AREAS FOR DEVELOPMENT:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Note specific leadership behaviors or skills that need improvement.</span>
                    </div>
                </label>
                <textarea id="leaderAreasForDevelopment" name="leaderAreasForDevelopment" rows="4" placeholder="Describe leadership gaps that should be addressed" onkeyup="updateIDPProgress()"></textarea>
                <div class="char-counter"><span id="leaderAreasCount">0</span> characters</div>
            </div>

            <div class="form-group">
                <label for="leaderActionsToTake">
                    <strong>ACTIONS TO TAKE:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Specify concrete actions to improve leadership capabilities.</span>
                    </div>
                </label>
                <textarea id="leaderActionsToTake" name="leaderActionsToTake" rows="4" placeholder="Outline specific leadership development actions (e.g., shadowing senior leaders, leading cross-functional projects, attending leadership workshops)" onkeyup="updateIDPProgress()"></textarea>
                <div class="char-counter"><span id="leaderActionsCount">0</span> characters</div>
            </div>
        </fieldset>

        <!-- Next Role Options -->
        <fieldset>
            <legend><i class="fas fa-road"></i> NEXT ROLE OPTIONS</legend>

            <div class="form-group">
                <label for="nextRoleShortTerm">
                    <strong>SHORT-TERM:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Identify 1-3 potential roles or positions for the next 3-5 years.</span>
                    </div>
                </label>
                <textarea id="nextRoleShortTerm" name="nextRoleShortTerm" rows="4" placeholder="List 1-3 potential roles or positions for the next 3-5 years" onkeyup="updateIDPProgress()"></textarea>
                <div class="char-counter"><span id="nextRoleShortCount">0</span> characters</div>
            </div>

            <div class="form-group">
                <label for="nextRoleLongTerm">
                    <strong>LONG-TERM:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Outline career aspirations for the next 5-10 years and beyond.</span>
                    </div>
                </label>
                <textarea id="nextRoleLongTerm" name="nextRoleLongTerm" rows="4" placeholder="Describe long-term career aspirations for the next 5-10 years and upon retirement" onkeyup="updateIDPProgress()"></textarea>
                <div class="char-counter"><span id="nextRoleLongCount">0</span> characters</div>
            </div>

            <div class="form-group">
                <label for="nextRoleMobility">
                    <strong>MOBILITY:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Indicate willingness to relocate, travel, or work different schedules.</span>
                    </div>
                </label>
                <div class="mobility-options" style="margin-bottom: 10px;">
                    <!-- Mobility checkboxes area kept empty as requested -->
                </div>
                <textarea id="nextRoleMobility" name="nextRoleMobility" rows="4" placeholder="Describe availability to work in different locations, willingness to travel, and flexibility with work schedules" onkeyup="updateIDPProgress()"></textarea>
                <div class="char-counter"><span id="nextRoleMobilityCount">0</span> characters</div>
            </div>
        </fieldset>

        <div class="submit-button-container">
            <button id="submitMidYearIDP" type="submit" class="save-btn" disabled>
                <i class="fas fa-paper-plane"></i> Submit Mid-Year IDP
            </button>
        </div>
    </form>
</section>

<!-- Final-Year IDP Form with Improved Frontend -->
<section id="finalYearIDPForm" class="fade-out section" style="display: none;">
    <div class="idp-progress">
        <h3><i class="fas fa-chart-line"></i> Development Plan Progress</h3>
        <p>Complete all required fields to finalize your end-of-year Individual Development Plan.</p>
        <div class="progress-bar-container">
            <div class="progress-bar" id="finalYearIDPProgressBar" style="width: 0%"></div>
        </div>
        <div style="display: flex; justify-content: space-between; margin-top: 5px;">
            <span>0%</span>
            <span>100%</span>
        </div>
    </div>

    <div class="idp-header" style="background: linear-gradient(to right, rgba(18, 74, 92, 0.1), rgba(5, 156, 164, 0.05)); padding: 20px; border-radius: var(--border-radius); margin-bottom: 25px;">
        <h2><i class="fas fa-clipboard-check"></i> Final-Year Individual Development Plan (IDP)</h2>
        <p style="margin-top: 10px; color: #555;">
            The Final-Year IDP evaluates overall performance and development throughout the year
            and establishes the foundation for the next performance cycle.
        </p>
    </div>

    <form id="finalYearIDPFormDetails" method="POST" action="/linemanager/finalyear-idp/<%= user.userId %>" class="idp-form">
        <!-- Professional Competences -->
        <fieldset>
            <legend><i class="fas fa-briefcase"></i> PROFESSIONAL COMPETENCES</legend>

            <div class="form-group">
                <label for="finalProfStrengths">
                    <strong>STRENGTHS:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Identify technical skills and professional competencies that were successfully developed this year.</span>
                    </div>
                </label>
                <textarea id="finalProfStrengths" name="profStrengths" rows="4" placeholder="Describe technical competences achieved and strengthened during the year" onkeyup="updateFinalIDPProgress()"></textarea>
                <div class="char-counter"><span id="finalProfStrengthsCount">0</span> characters</div>
            </div>

            <div class="form-group">
                <label for="finalProfAreasForDevelopment">
                    <strong>AREAS FOR DEVELOPMENT:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Note specific technical or professional skills that still require attention in the coming year.</span>
                    </div>
                </label>
                <textarea id="finalProfAreasForDevelopment" name="profAreasForDevelopment" rows="4" placeholder="Describe remaining technical gaps that still need to be addressed" onkeyup="updateFinalIDPProgress()"></textarea>
                <div class="char-counter"><span id="finalProfAreasCount">0</span> characters</div>
            </div>

            <div class="form-group">
                <label for="finalProfActionsToTake">
                    <strong>ACTIONS TO TAKE:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Recommend concrete actions for the coming year, aligned with the 70-20-10 development model.</span>
                    </div>
                </label>
                <div class="development-model-guide" style="background-color: #f5f7fa; border-radius: 6px; padding: 10px; margin-bottom: 10px;">
                    <h4 style="margin-top: 0; font-size: 14px; color: var(--primary-color);">70-20-10 Development Model</h4>
                    <div style="display: flex; flex-wrap: wrap; gap: 10px; font-size: 13px;">
                        <div style="flex: 1; min-width: 180px;">
                            <strong>70% - Experiential Learning</strong>
                            <p style="margin: 5px 0;">On-the-job experiences, challenging assignments</p>
                        </div>
                        <div style="flex: 1; min-width: 180px;">
                            <strong>20% - Social Learning</strong>
                            <p style="margin: 5px 0;">Mentoring, coaching, feedback</p>
                        </div>
                        <div style="flex: 1; min-width: 180px;">
                            <strong>10% - Formal Learning</strong>
                            <p style="margin: 5px 0;">Courses, workshops, reading</p>
                        </div>
                    </div>
                </div>
                <textarea id="finalProfActionsToTake" name="profActionsToTake" rows="4" placeholder="Recommended actions to address remaining development needs for next year" onkeyup="updateFinalIDPProgress()"></textarea>
                <div class="char-counter"><span id="finalProfActionsCount">0</span> characters</div>
            </div>
        </fieldset>

        <!-- Leadership Competences -->
        <fieldset>
            <legend><i class="fas fa-users"></i> LEADERSHIP COMPETENCES</legend>

            <div class="form-group">
                <label for="finalLeaderStrengths">
                    <strong>STRENGTHS:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Identify leadership qualities and behaviors that improved during this year.</span>
                    </div>
                </label>
                <div class="leadership-model" style="display: flex; flex-wrap: wrap; gap: 8px; margin-bottom: 10px;">
                    <!-- Leadership tags area kept empty as requested -->
                </div>
                <textarea id="finalLeaderStrengths" name="leaderStrengths" rows="4" placeholder="Describe leadership competences developed this year" onkeyup="updateFinalIDPProgress()"></textarea>
                <div class="char-counter"><span id="finalLeaderStrengthsCount">0</span> characters</div>
            </div>

            <div class="form-group">
                <label for="finalLeaderAreasForDevelopment">
                    <strong>AREAS FOR DEVELOPMENT:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Note specific leadership behaviors or skills that still need improvement.</span>
                    </div>
                </label>
                <textarea id="finalLeaderAreasForDevelopment" name="leaderAreasForDevelopment" rows="4" placeholder="Describe leadership gaps that need further development" onkeyup="updateFinalIDPProgress()"></textarea>
                <div class="char-counter"><span id="finalLeaderAreasCount">0</span> characters</div>
            </div>

            <div class="form-group">
                <label for="finalLeaderActionsToTake">
                    <strong>ACTIONS TO TAKE:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Recommend concrete actions to improve leadership capabilities in the coming year.</span>
                    </div>
                </label>
                <textarea id="finalLeaderActionsToTake" name="leaderActionsToTake" rows="4" placeholder="Recommended actions to address leadership development needs for next year" onkeyup="updateFinalIDPProgress()"></textarea>
                <div class="char-counter"><span id="finalLeaderActionsCount">0</span> characters</div>
            </div>
        </fieldset>

        <!-- Career Planning -->
        <fieldset>
            <legend><i class="fas fa-road"></i> CAREER PLANNING</legend>

            <div class="form-group">
                <label for="finalNextRoleShortTerm">
                    <strong>SHORT-TERM GOALS:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Identify goals and potential roles for the next 1-2 years.</span>
                    </div>
                </label>
                <textarea id="finalNextRoleShortTerm" name="nextRoleShortTerm" rows="4" placeholder="Goals and target roles for the next 1-2 years" onkeyup="updateFinalIDPProgress()"></textarea>
                <div class="char-counter"><span id="finalNextRoleShortCount">0</span> characters</div>
            </div>

            <div class="form-group">
                <label for="finalNextRoleLongTerm">
                    <strong>LONG-TERM GOALS:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Outline career aspirations for the next 3-5 years.</span>
                    </div>
                </label>
                <textarea id="finalNextRoleLongTerm" name="nextRoleLongTerm" rows="4" placeholder="Career aspirations for the next 3-5 years" onkeyup="updateFinalIDPProgress()"></textarea>
                <div class="char-counter"><span id="finalNextRoleLongCount">0</span> characters</div>
            </div>

            <div class="form-group">
                <label for="finalNextRoleMobility">
                    <strong>MOBILITY AND FLEXIBILITY:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Indicate willingness to relocate, travel, or adapt to different work arrangements.</span>
                    </div>
                </label>
                <div class="mobility-options" style="margin-bottom: 10px;">
                    <!-- Mobility checkboxes area kept empty as requested -->
                </div>
                <textarea id="finalNextRoleMobility" name="nextRoleMobility" rows="4" placeholder="Willingness and ability to work in different locations, roles, or schedules" onkeyup="updateFinalIDPProgress()"></textarea>
                <div class="char-counter"><span id="finalNextRoleMobilityCount">0</span> characters</div>
            </div>
        </fieldset>

        <div class="submit-button-container">
            <button id="submitFinalYearIDP" type="submit" class="save-btn" disabled>
                <i class="fas fa-paper-plane"></i> Submit Final-Year IDP
            </button>
        </div>
    </form>
</section>

            <!-- JavaScript for page functionality -->
            <script>
// Initialize variables
let currentStep = 0; // Track the current step
let viewState = {}; // Store view state data
let userId = ''; // Store user ID
let jobId = ''; // Store job ID
let submittedObjectives = []; // Store submitted objectives
let hardSkills = []; // Store hard skills
let softSkills = []; // Store soft skills
let midYearIDPData = null; // Store mid-year IDP data
let finalYearIDPData = null; // Store final-year IDP data

// Function to initialize all variables and setup from viewState
function initializeFromViewState() {
    // Parse viewState back into an object
    const viewStateElement = document.getElementById('viewState');
    if (!viewStateElement) {
        console.error("ViewState element not found");
        return;
    }
    
    try {
        viewState = JSON.parse(viewStateElement.getAttribute('data-viewstate'));
        userId = viewState.userId || '<%= user.userId %>';
        jobId = viewState.jobId || '';
        submittedObjectives = viewState.submittedObjectives || [];
        hardSkills = viewState.hardSkills || [];
        softSkills = viewState.softSkills || [];
        
        console.log("Initialized from viewState:", viewState);
        console.log("User ID:", userId);
        console.log("Job ID:", jobId);
        console.log("Submitted Objectives:", submittedObjectives);
        console.log("Hard Skills:", hardSkills);
        console.log("Soft Skills:", softSkills);
        
        // Initialize form values
        initializeFormValues();
    } catch (error) {
        console.error("Error parsing viewState:", error);
    }
}

// Function to initialize form values
function initializeFormValues() {
    // Set jobId from viewState if it's available
    const jobIdField = document.getElementById("jobId");
    if (jobIdField && viewState && viewState.jobId) {
        jobIdField.value = viewState.jobId;
        console.log("Set jobId from viewState:", viewState.jobId);
    } else {
        console.warn("Could not initialize jobId from viewState");
    }
}

// NEW FUNCTION: Update Stepper Accessibility based on current state
function updateStepperAccessibility() {
    // Get all stepper elements
    const objectivesButton = document.getElementById("objectivesButton");
    const feedbackQ1Button = document.getElementById("feedbackButtonQ1");
    const feedbackQ2Button = document.getElementById("feedbackButtonQ2");
    const midYearIDPButton = document.getElementById("midYearIDP");
    const feedbackQ3Button = document.getElementById("feedbackButtonQ3");
    const feedbackQ4Button = document.getElementById("feedbackButtonQ4");
    const finalYearIDPButton = document.getElementById("finalYearIDP");
    
    // Check if we have the required data to make decisions
    if (!viewState || !viewState.viewOnlyStatus) {
        console.error("View state data is missing or incomplete");
        return;
    }
    
    // Helper function to update step appearance
    function updateStepStatus(stepElement, isAccessible, isViewOnly) {
        if (!stepElement) return;
        
        if (isAccessible) {
            stepElement.classList.add('accessible');
            stepElement.classList.remove('disabled');
            
            if (isViewOnly) {
                stepElement.classList.add('view-only');
                
                // Update status badge
                const statusBadge = stepElement.querySelector('.status-badge');
                if (statusBadge) {
                    statusBadge.textContent = '(View-Only)';
                }
            } else {
                stepElement.classList.remove('view-only');
                
                // Update status badge
                const statusBadge = stepElement.querySelector('.status-badge');
                if (statusBadge) {
                    statusBadge.textContent = '(Editable)';
                }
            }
        } else {
            stepElement.classList.remove('accessible');
            stepElement.classList.add('disabled');
            
            // Update notice for disabled steps
            const notice = stepElement.querySelector('.notice');
            if (!notice && stepElement !== objectivesButton) {
                const noticeElement = document.createElement('div');
                noticeElement.className = 'notice';
                noticeElement.textContent = 'Complete previous steps first';
                stepElement.appendChild(noticeElement);
            }
        }
    }
    
    // 1. Objective Setting - always accessible, viewOnly based on status
    const hasObjectives = viewState.submittedObjectives && viewState.submittedObjectives.length > 0;
    const objectivesViewOnly = viewState.viewOnlyStatus['objectivesettings'];
    updateStepStatus(objectivesButton, true, objectivesViewOnly);
    
    // 2. Q1 Feedback - accessible if objectives are submitted
    const q1Accessible = hasObjectives;
    const q1ViewOnly = viewState.viewOnlyStatus['feedbacks_Q1'];
    updateStepStatus(feedbackQ1Button, q1Accessible, q1ViewOnly);
    
    // 3. Q2 Feedback - accessible if Q1 is completed (view-only)
    const q2Accessible = hasObjectives && q1ViewOnly;
    const q2ViewOnly = viewState.viewOnlyStatus['feedbacks_Q2'];
    updateStepStatus(feedbackQ2Button, q2Accessible, q2ViewOnly);
    
    // 4. Mid-Year IDP - accessible if Q2 is completed (view-only)
    const midYearIDPAccessible = hasObjectives && q2ViewOnly;
    const midYearIDPViewOnly = viewState.viewOnlyStatus['midyearidp'];
    updateStepStatus(midYearIDPButton, midYearIDPAccessible, midYearIDPViewOnly);
    
    // 5. Q3 Feedback - accessible if Mid-Year IDP is completed (view-only)
    const q3Accessible = hasObjectives && midYearIDPViewOnly;
    const q3ViewOnly = viewState.viewOnlyStatus['feedbacks_Q3'];
    updateStepStatus(feedbackQ3Button, q3Accessible, q3ViewOnly);
    
    // 6. Q4 Feedback - accessible if Q3 is completed (view-only)
    const q4Accessible = hasObjectives && q3ViewOnly;
    const q4ViewOnly = viewState.viewOnlyStatus['feedbacks_Q4'];
    updateStepStatus(feedbackQ4Button, q4Accessible, q4ViewOnly);
    
    // 7. Final-Year IDP - accessible if Q4 is completed (view-only)
    const finalYearIDPAccessible = hasObjectives && q4ViewOnly;
    const finalYearIDPViewOnly = viewState.viewOnlyStatus['finalyearidp'];
    updateStepStatus(finalYearIDPButton, finalYearIDPAccessible, finalYearIDPViewOnly);
    
    console.log("Updated stepper accessibility states");
}

// Function to update total weight in the form
function updateTotalWeight() {
    const weightInputs = document.querySelectorAll(".weight-input");
    let totalWeight = 0;
    
    weightInputs.forEach(input => {
        const value = parseFloat(input.value) || 0;
        totalWeight += value;
    });
    
    const totalWeightElement = document.getElementById("totalWeight");
    const totalWeightDisplayElement = document.getElementById("totalWeightDisplay");
    
    if (totalWeightElement) totalWeightElement.value = totalWeight;
    if (totalWeightDisplayElement) totalWeightDisplayElement.textContent = totalWeight;
    
    // Change color based on total weight
    if (totalWeightDisplayElement) {
        if (totalWeight === 100) {
            totalWeightDisplayElement.style.color = "#4CAF50"; // Green when exactly 100
        } else if (totalWeight > 100) {
            totalWeightDisplayElement.style.color = "#f44336"; // Red when over 100
        } else {
            totalWeightDisplayElement.style.color = "#ff9800"; // Orange when under 100
        }
    }
}

// Function to handle objective click
function handleObjectiveClick() {
    console.log("Objective clicked. View only status:", viewState.viewOnlyStatus.objectivesettings);
    
    // Hide all other sections
    hideAllSections();
    
    // Get the form and view-only sections
    const formSection = document.getElementById("objective-skill-progress-form");
    const viewOnlySection = document.getElementById("view-only-page");
    
    // Check if the view-only status is true
    if (viewState.viewOnlyStatus.objectivesettings) {
        // Show view-only page with submitted objectives
        if (viewOnlySection) {
            displaySubmittedObjectives(submittedObjectives);
            viewOnlySection.style.display = "block";
            if (formSection) formSection.style.display = "none";
            
            // Add animation classes
            viewOnlySection.classList.remove("fade-out");
            viewOnlySection.classList.add("fade-in");
            
            console.log("Showing view-only page with submitted objectives.");
        } else {
            console.error("View-only section not found but required for view-only mode.");
        }
    } else {
        // Show editable form if in edit mode
        if (formSection) {
            formSection.style.display = "block";
            if (viewOnlySection) viewOnlySection.style.display = "none";
            
            // Add animation classes
            formSection.classList.remove("fade-out");
            formSection.classList.add("fade-in");
            
            console.log("Showing editable objective form.");
        } else {
            console.error("Form section not found but required for edit mode.");
        }
    }
    
    // Initialize the total weight display
    updateTotalWeight();
}

// Helper function to check if we're in feedback edit mode
function isInFeedbackEditMode() {
    const activeQuarterField = document.getElementById('activeQuarterField');
    if (!activeQuarterField) return false;
    
    const quarterValue = activeQuarterField.value;
    const quarter = quarterValue.replace('Q', '');
    
    // Check if this quarter is in view-only mode
    const isViewOnly = viewState.viewOnlyStatus[`feedbacks_${quarterValue}`];
    
    // We're in edit mode if it's not view-only and there are no saved questionnaires
    return !isViewOnly;
}

// Function to show feedback form for a specific quarter
function showFeedbackForm(quarter) {
    // Get the feedback button for this quarter
    const feedbackButton = document.getElementById(`feedbackButtonQ${quarter}`);
    
    // Check if the button is accessible
    if (!feedbackButton || !feedbackButton.classList.contains('accessible')) {
        alert("You must complete the previous steps first.");
        return;
    }
    
    console.log(`Showing feedback form for Q${quarter}`);
    
    // Hide other sections
    hideAllSections();
    
    // Show feedback section
    const feedbackSection = document.getElementById("feedback-section");
    if (!feedbackSection) {
        console.error("Feedback section not found.");
        return;
    }
    
    feedbackSection.style.display = "block";
    feedbackSection.classList.remove("fade-out");
    feedbackSection.classList.add("fade-in");
    
    // Store the active quarter in a hidden field for form submission
    let quarterField = document.getElementById('activeQuarterField');
    if (!quarterField) {
        quarterField = document.createElement('input');
        quarterField.type = 'hidden';
        quarterField.name = 'activeQuarter';
        quarterField.id = 'activeQuarterField';
        feedbackSection.appendChild(quarterField);
    }
    
    // Set the quarter value
    quarterField.value = `Q${quarter}`;
    console.log(`Set active quarter to Q${quarter} in hidden field`);
    
    // Clear the table bodies
    const feedbackTableBody = document.getElementById('feedback-table-body');
    const hardSkillsTableBody = document.getElementById('hard-skills-table-body');
    const softSkillsTableBody = document.getElementById('soft-skills-table-body');
    
    if (feedbackTableBody) feedbackTableBody.innerHTML = '';
    if (hardSkillsTableBody) hardSkillsTableBody.innerHTML = '';
    if (softSkillsTableBody) softSkillsTableBody.innerHTML = '';
    
    // Check if this quarter's feedback is in view-only mode
    const isViewOnly = viewState.viewOnlyStatus[`feedbacks_Q${quarter}`];
    
    // If in edit mode, show the forms with editable fields
    // If in view mode, fetch and display previously submitted data
    if (!isViewOnly) {
        // In edit mode, we show empty form fields
        console.log(`Feedback for Q${quarter} is in EDIT mode`);
        
        // Add rows for objectives with blank guide questions
        if (submittedObjectives && submittedObjectives.length > 0) {
            submittedObjectives.forEach(objective => {
                addFormFeedbackRow(objective);
            });
        }
        
        // Add hard skills to the feedback form
        addFormFeedbackSkillsRows(hardSkills, 'hard');
        
        // Add soft skills to the feedback form
        addFormFeedbackSkillsRows(softSkills, 'soft');
        
        // Show Save and Submit buttons
        updateFeedbackButtons(true);
        
        // Make sure the questionnaire tab is active
        const viewQuestionnaireBtn = document.getElementById('viewQuestionnaireBtn');
        if (viewQuestionnaireBtn) {
            viewQuestionnaireBtn.click();
        }
    } else {
        // In view mode, load previously submitted data
        console.log(`Feedback for Q${quarter} is in VIEW mode`);
        
        // Fetch previously submitted data
        fetchSubmittedFeedbackData(quarter);
        
        // Show only Submit button (disabled)
        updateFeedbackButtons(false);
        
        // Switch to the "View Feedback" tab automatically
        const viewFeedbackBtn = document.getElementById('viewFeedbackBtn');
        if (viewFeedbackBtn) {
            viewFeedbackBtn.click();
        }
    }
    
    // Update form action with the quarter parameter
    const feedbackForm = document.getElementById('feedbackForm');
    if (feedbackForm) {
        feedbackForm.action = `/linemanager/records-performance-tracker/questionnaire/${userId}?quarter=Q${quarter}`;
        console.log(`Updated form action with quarter=Q${quarter}`);
    }
}

// Function to navigate to Mid-Year IDP
function navigateToMidYearIDP() {
    const midYearIDPButton = document.getElementById("midYearIDP");
    
    // Check if the button is accessible
    if (!midYearIDPButton || !midYearIDPButton.classList.contains('accessible')) {
        alert("You must complete the previous steps first.");
        return;
    }
    
    // Hide other sections
    hideAllSections();
    
    // Show the Mid-Year IDP form
    const midYearIDPForm = document.getElementById("midYearIDPForm");
    if (!midYearIDPForm) {
        console.error("Mid-Year IDP form not found.");
        return;
    }
    
    midYearIDPForm.style.display = "block";
    midYearIDPForm.classList.remove("fade-out");
    midYearIDPForm.classList.add("fade-in");
    
    // Check if in view-only mode
    const isViewOnly = viewState.viewOnlyStatus.midyearidp;
    
    if (isViewOnly) {
        // If in view-only mode, load the existing data
        if (midYearIDPData) {
            createViewOnlyMidYearIDP(midYearIDPData);
        } else {
            // If data isn't loaded yet, fetch it
            loadMidYearIDPData(userId);
        }
    } else {
        // If in edit mode, ensure form fields are enabled
        enableMidYearIDPForm();
    }
    
    midYearIDPForm.scrollIntoView({ behavior: "smooth" });
    console.log("Navigated to the Mid-Year IDP form.", isViewOnly ? "(View-Only Mode)" : "(Edit Mode)");
}

// Function to navigate to Final-Year IDP
function navigateToFinalYearIDP() {
    const finalYearIDPButton = document.getElementById("finalYearIDP");
    
    // Check if the button is accessible
    if (!finalYearIDPButton || !finalYearIDPButton.classList.contains('accessible')) {
        alert("You must complete the previous steps first.");
        return;
    }
    
    // Hide other sections
    hideAllSections();
    
    // We're reusing the Mid-Year IDP form for the Final-Year IDP
    const midYearIDPForm = document.getElementById("midYearIDPForm");
    if (!midYearIDPForm) {
        console.error("IDP form not found for Final-Year IDP.");
        return;
    }
    
    midYearIDPForm.style.display = "block";
    midYearIDPForm.classList.remove("fade-out");
    midYearIDPForm.classList.add("fade-in");
    
    // Update form title and submit button for Final-Year IDP
    const formTitle = midYearIDPForm.querySelector("h2");
    if (formTitle) {
        formTitle.innerHTML = '<i class="fas fa-clipboard-check"></i> Final-Year Individual Development Plan (IDP)';
    }
    
    const submitButton = document.getElementById("submitMidYearIDP");
    if (submitButton) {
        submitButton.textContent = "Submit Final-Year IDP";
        submitButton.id = "submitFinalYearIDP";
        
        // Update the event handler
        submitButton.onclick = function(event) {
            submitFinalYearIDPForm(event);
        };
    }
    
    // Set form action to final-year endpoint
    const formElement = document.getElementById("midYearIDPFormDetails");
    if (formElement) {
        formElement.action = `/linemanager/finalyear-idp/${userId}`;
    }
    
    // Check if in view-only mode
    const isViewOnly = viewState.viewOnlyStatus.finalyearidp;
    
    if (isViewOnly) {
        // If in view-only mode, load the existing data
        if (finalYearIDPData) {
            createViewOnlyFinalYearIDP(finalYearIDPData);
        } else {
            // If data isn't loaded yet, fetch it
            const year = viewState.selectedYear || new Date().getFullYear();
            loadFinalYearIDPData(userId, year);
        }
    } else {
        // If in edit mode, ensure form fields are enabled
        enableFinalYearIDPForm();
    }
    
    midYearIDPForm.scrollIntoView({ behavior: "smooth" });
    console.log("Navigated to the Final-Year IDP form.", isViewOnly ? "(View-Only Mode)" : "(Edit Mode)");
}

// Function to hide all sections
function hideAllSections() {
    const sectionsToHide = [
        document.getElementById("objective-skill-progress-form"),
        document.getElementById("view-only-page"),
        document.getElementById("feedback-section"),
        document.getElementById("midYearIDPForm")
    ];
    
    sectionsToHide.forEach(section => {
        if (section) {
            section.style.display = "none";
            section.classList.remove("fade-in");
            section.classList.add("fade-out");
        }
    });
}

// Function to add a row to feedback form
function addFormFeedbackRow(objective) {
    const tbody = document.getElementById('feedback-table-body');
    if (!tbody) {
        console.error("Feedback table body not found.");
        return;
    }

    // Get current edit mode status
    const isEditMode = isInFeedbackEditMode();

    // Create and append the objective row
    const row = document.createElement('tr');
    row.innerHTML = `
        <td><strong>${objective.objectiveDescrpt || 'N/A'}</strong></td>
        <td><strong>${objective.objectiveKPI || 'N/A'}</strong></td>
        <td><strong>${objective.objectiveTarget || 'N/A'}</strong></td>
        <td><strong>${objective.objectiveUOM || '%'}</strong></td>
        <td><strong>${(objective.objectiveAssignedWeight * 100) || 'N/A'}%</strong></td>
    `;
    tbody.appendChild(row);

    // Create and append the input row for feedback
    const inputRow = document.createElement('tr');
    const inputId = `qualitativeInput_${objective.objectiveId}`;
    
    // In edit mode, start with a blank guide question field
    // In view mode, show the saved guide question or "No guide question submitted"
    const questionText = isEditMode ? '' : (objective.objectiveQualiQuestion || 'No guide question submitted');

    inputRow.innerHTML = `
        <td colspan="5" class="feedback-input-cell">
            <div style="margin-bottom: 15px; padding: 10px; background-color: #f9f9f9; border-radius: 4px;">
                <label for="${inputId}" style="display: block; margin-bottom: 8px; font-weight: 500;">
                    <i class="fas fa-question-circle"></i> <strong>Guide Question for Feedback:</strong>
                </label>
                ${isEditMode ? 
                    `<input id="${inputId}" type="text" 
                        style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;"
                        value=""  
                        placeholder="Enter guide question for feedback" 
                        data-objective-id="${objective.objectiveId}" 
                        class="guide-question-input"
                    >` : 
                    `<div style="padding: 8px; background-color: #f5f5f5; border-radius: 4px;">
                        ${questionText}
                    </div>`
                }
            </div>
        </td>
    `;
    tbody.appendChild(inputRow);

    // Create and append the rater's view row
    const raterRow = document.createElement('tr');
    const starRatingId = `starRating${objective.objectiveId}`;
    const ratingSectionId = `ratingSection${objective.objectiveId}`;

    raterRow.innerHTML = `
        <td colspan="5">
            <button type="button" onclick="toggleRatingSection('${ratingSectionId}')" 
                    style="background-color: #6c757d; color: white; border: none; padding: 8px 15px; 
                    cursor: pointer; border-radius: 4px; margin-bottom: 10px; width: 100%;">
                <i class="fas fa-eye"></i> View Rater's Interface
            </button>
            <div id="${ratingSectionId}" style="display: none; margin-top: 10px; padding: 15px; 
                background-color: #f9f9f9; border-radius: 8px; border: 1px solid #ddd;">
                <div style="margin-bottom: 15px;">
                    <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                        <i class="fas fa-star"></i> <strong>Quantitative Rating:</strong>
                    </label>
                    <div style="font-size: 14px; margin-bottom: 10px; color: #666;">
                        Please rate the accomplishment of this objective for the quarter on a scale of 1 to 5.
                    </div>
                    <div class="star-rating" style="font-size: 24px; cursor: pointer;" id="${starRatingId}" data-rating="0">
                        <i class="fa-solid fa-star" data-value="1" style="color: #ddd; margin-right: 5px;"></i>
                        <i class="fa-solid fa-star" data-value="2" style="color: #ddd; margin-right: 5px;"></i>
                        <i class="fa-solid fa-star" data-value="3" style="color: #ddd; margin-right: 5px;"></i>
                        <i class="fa-solid fa-star" data-value="4" style="color: #ddd; margin-right: 5px;"></i>
                        <i class="fa-solid fa-star" data-value="5" style="color: #ddd;"></i>
                    </div>
                </div>
                <div style="margin-bottom: 10px;">
                    <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                        <i class="fas fa-comment"></i> <strong>Qualitative Feedback:</strong>
                    </label>
                    <div style="font-size: 14px; margin-bottom: 10px; color: #666;">
                        Please provide qualitative feedback regarding this objective for the quarter.
                    </div>
                    <textarea id="qualitativeFeedback_${objective.objectiveId}" 
                        placeholder="Place your qualitative feedback here." 
                        style="width: 100%; min-height: 80px; padding: 10px;"></textarea>
                </div>
            </div>
        </td>
    `;
    tbody.appendChild(raterRow);

    // Add click event listeners to the stars
    setTimeout(() => {
        const stars = document.querySelectorAll(`#${starRatingId} .fa-star`);
        stars.forEach(star => {
            star.addEventListener('click', function() {
                const rating = this.getAttribute('data-value');
                const starContainer = document.getElementById(starRatingId);
                starContainer.setAttribute('data-rating', rating);
                updateStarDisplay(stars, rating);
            });
        });
    }, 100);
}

// Function to update star display based on rating
function updateStarDisplay(stars, rating) {
    stars.forEach(star => {
        const value = star.getAttribute('data-value');
        if (value <= rating) {
            star.style.color = '#FFD700'; // Gold color for selected stars
        } else {
            star.style.color = '#ddd'; // Light gray for unselected stars
        }
    });
}

// Function to toggle rating section visibility
function toggleRatingSection(sectionId) {
    const section = document.getElementById(sectionId);
    if (section) {
        if (section.style.display === 'none') {
            section.style.display = 'block';
        } else {
            section.style.display = 'none';
        }
    }
}

// Function to add feedback skills rows
function addFormFeedbackSkillsRows(skills, skillType) {
    const skillTableBody = document.querySelector(`#${skillType}-skills-table-body`);
    
    if (!skillTableBody) {
        console.log(`Skill table body not found for: ${skillType}`);
        return;
    }
    
    // Clear existing content
    skillTableBody.innerHTML = '';
    
    // Check if skills array is empty
    if (!skills || skills.length === 0) {
        const emptyRow = document.createElement('tr');
        emptyRow.innerHTML = `
            <td style="text-align: center; padding: 15px;">No ${skillType} skills available</td>
        `;
        skillTableBody.appendChild(emptyRow);
        return;
    }
    
    // Iterate over skills and add each one
    skills.forEach(skill => {
        // Create skill name row
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>
                <span style="font-weight: 500; color: #124A5C;">${skill.jobReqSkillName}</span>
            </td>
        `;
        skillTableBody.appendChild(row);
        
        // Create rater view row
        const raterRow = document.createElement('tr');
        const starRatingId = `${skillType}SkillRow${skill.jobReqSkillName.replace(/\s+/g, '_')}Rating`;
        const ratingSectionId = `ratingSection${skill.jobReqSkillName.replace(/\s+/g, '_')}`;
        
        raterRow.innerHTML = `
        <td>
            <button type="button" onclick="toggleRatingSection('${ratingSectionId}')" 
                    style="background-color: #6c757d; color: white; border: none; padding: 8px 15px; 
                    cursor: pointer; border-radius: 4px; margin-bottom: 10px; width: 100%;">
                <i class="fas fa-eye"></i> View Rater's Interface
            </button>
            <div id="${ratingSectionId}" style="display: none; margin: 10px 0 20px; padding: 15px; 
                    background-color: #f9f9f9; border-radius: 8px; border: 1px solid #ddd;">
                <div style="margin-bottom: 15px;">
                    <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                        <i class="fas fa-star"></i> <strong>Quantitative Rating:</strong>
                    </label>
                    <div style="font-size: 14px; margin-bottom: 10px; color: #666;">
                        Rate from 1 to 5 based on this skill's performance during the quarter.
                    </div>
                    <div class="star-rating" style="font-size: 24px;" id="${starRatingId}" data-rating="0">
                        <i class="fa-solid fa-star" data-value="1" style="color: #ddd; margin-right: 5px;"></i>
                        <i class="fa-solid fa-star" data-value="2" style="color: #ddd; margin-right: 5px;"></i>
                        <i class="fa-solid fa-star" data-value="3" style="color: #ddd; margin-right: 5px;"></i>
                        <i class="fa-solid fa-star" data-value="4" style="color: #ddd; margin-right: 5px;"></i>
                        <i class="fa-solid fa-star" data-value="5" style="color: #ddd;"></i>
                    </div>
                </div>
                <div>
                    <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                        <i class="fas fa-comment"></i> <strong>Qualitative Feedback:</strong>
                    </label>
                    <div style="font-size: 14px; margin-bottom: 10px; color: #666;">
                        Provide specific examples related to this skill.
                    </div>
                    <textarea placeholder="Enter your qualitative feedback here..." 
                              style="width: 100%; min-height: 80px; padding: 10px;"></textarea>
                </div>
            </div>
        </td>
        `;
        
        skillTableBody.appendChild(raterRow);
        
        // Add click event listeners to the stars
        setTimeout(() => {
            const stars = document.querySelectorAll(`#${starRatingId} .fa-star`);
            stars.forEach(star => {
                star.addEventListener('click', function() {
                    const rating = this.getAttribute('data-value');
                    const starContainer = document.getElementById(starRatingId);
                    starContainer.setAttribute('data-rating', rating);
                    updateStarDisplay(stars, rating);
                });
            });
        }, 100);
    });
}

// Function to add a new row to the objective form
function addRow() {
    const tableBody = document.getElementById("progress-table-body");
    if (!tableBody) {
        console.error("Progress table body not found.");
        return;
    }
    
    const newRow = document.createElement("tr");
    newRow.innerHTML = `
        <td><input type="text" placeholder="Enter Objective" name="objectiveDescrpt" required></td>
        <td><input type="text" placeholder="Enter KPI" name="objectiveKPI" required></td>
        <td><input type="text" placeholder="Enter Target" name="objectiveTarget" required></td>
        <td><input type="text" placeholder="Enter UOM" name="objectiveUOM" required></td>
        <td><input type="number" class="weight-input" oninput="updateTotalWeight()" placeholder="Weight %" name="objectiveAssignedWeight" min="0" max="100" required></td>
        <td><button type="button" class="cancel-btn" onclick="removeRow(this)"><i class="fas fa-trash"></i> Remove</button></td>
    `;
    tableBody.appendChild(newRow);
    
    // Update total weight after adding a row
    updateTotalWeight();
}

// Function to remove a row from the objective form
function removeRow(button) {
    const row = button.parentNode.parentNode;
    row.parentNode.removeChild(row);
    updateTotalWeight(); // Update total weight after removal
}

// Function to display submitted objectives in view-only mode
function displaySubmittedObjectives(objectives) {
    const tableBody = document.getElementById("view-only-table-body");
    if (!tableBody) {
        console.error("View-only table body not found.");
        return;
    }
    
    tableBody.innerHTML = ""; // Clear previous content

    if (!objectives || objectives.length === 0) {
        tableBody.innerHTML = `<tr><td colspan="5" style="text-align: center; padding: 20px;">No objectives found.</td></tr>`;
        return;
    }

    objectives.forEach(obj => {
        const row = document.createElement("tr");
        row.innerHTML = `
            <td>${obj.objectiveDescrpt || 'N/A'}</td>
            <td>${obj.objectiveKPI || 'N/A'}</td>
            <td>${obj.objectiveTarget || 'N/A'}</td>
            <td>${obj.objectiveUOM || 'N/A'}</td>
            <td>${(obj.objectiveAssignedWeight * 100).toFixed(2) || 'N/A'}%</td>
        `;
        tableBody.appendChild(row);
    });
    
    console.log(`Displayed ${objectives.length} objectives in view-only mode.`);
}

// Function to update feedback buttons based on edit mode
function updateFeedbackButtons(isEditMode) {
    const buttonContainer = document.getElementById('feedback-button-container');
    if (!buttonContainer) {
        console.error("Feedback button container not found");
        return;
    }
    
    if (isEditMode) {
        // In edit mode, show both Save and Submit buttons
        buttonContainer.innerHTML = `
            <button id="saveFeedbackDraft" type="button" class="secondary-btn" style="margin-right: 10px; background-color: #6c757d; color: white; border: none; padding: 12px 15px; border-radius: 8px; cursor: pointer; font-weight: 500;">
                <i class="fas fa-save"></i> Save Draft
            </button>
            <button id="submitFeedback" type="submit" class="save-btn" style="background-color: var(--primary-color); color: white; border: none; padding: 12px 15px; border-radius: 8px; cursor: pointer; font-weight: 500;">
                <i class="fas fa-paper-plane"></i> Submit Questionnaire
            </button>
        `;
        
        // Add event listeners
        const saveDraftButton = document.getElementById('saveFeedbackDraft');
        const submitButton = document.getElementById('submitFeedback');
        
        if (saveDraftButton) {
            saveDraftButton.addEventListener('click', saveFeedbackDraft);
        }
        
        if (submitButton) {
            submitButton.addEventListener('click', submitFeedback);
        }
    } else {
        // In view mode, show a disabled Submit button
        buttonContainer.innerHTML = `
            <button disabled class="save-btn" style="background-color: #ccc; color: white; border: none; padding: 12px 15px; border-radius: 8px; cursor: not-allowed; font-weight: 500;">
                <i class="fas fa-lock"></i> Questionnaire Submitted
            </button>
        `;
    }
}

// Function to switch feedback to view-only mode
function switchToViewOnlyMode() {
    console.log("Switching feedback form to view-only mode");
    
    // Get elements
    const startDateInput = document.getElementById("startDate");
    const endDateInput = document.getElementById("endDate");
    
    // Make date inputs view-only
    if (startDateInput && !startDateInput.disabled) {
        startDateInput.disabled = true;
        startDateInput.readOnly = true;
        startDateInput.style.backgroundColor = "#f5f5f5";
        startDateInput.style.border = "1px solid #e1e5eb";
    }

    if (endDateInput && !endDateInput.disabled) {
        endDateInput.disabled = true;
        endDateInput.readOnly = true;
        endDateInput.style.backgroundColor = "#f5f5f5";
        endDateInput.style.border = "1px solid #e1e5eb";
    }

    // Update the buttons to view-only mode
    updateFeedbackButtons(false);
}

// Function to ensure guide questions remain editable
function updateGuideQuestionEditability() {
    // Get the active quarter
    const activeQuarterField = document.getElementById('activeQuarterField');
    if (!activeQuarterField) return;
    
    const quarterValue = activeQuarterField.value; // Example: "Q1"
    const quarter = quarterValue.replace('Q', ''); // Extract just the number
    
    // Check if this quarter is in view-only mode
    const isViewOnly = viewState.viewOnlyStatus[`feedbacks_Q${quarter}`];
    
    if (!isViewOnly) {
        // If not in view-only mode, ensure guide questions are editable
        const feedbackTableBody = document.getElementById('feedback-table-body');
        if (feedbackTableBody) {
            const guideQuestionInputs = feedbackTableBody.querySelectorAll('input[type="text"][id^="qualitativeInput_"]');
            
            guideQuestionInputs.forEach(input => {
                input.disabled = false;
                input.readOnly = false;
                
                // Add "editable" styling
                input.style.backgroundColor = 'white';
                input.style.border = '1px solid #ddd';
                input.style.padding = '8px';
                input.style.borderRadius = '4px';
            });
            
            console.log(`Made ${guideQuestionInputs.length} guide question inputs editable for Q${quarter}`);
        }
    }
}

// Function to fetch submitted feedback data
async function fetchSubmittedFeedbackData(quarter) {
    console.log(`Fetching submitted feedback data for Q${quarter}...`);
    
    try {
        // Show loading state
        const feedbackTableBody = document.getElementById('feedback-table-body');
        if (feedbackTableBody) {
            feedbackTableBody.innerHTML = `
                <tr>
                    <td colspan="5" style="text-align: center; padding: 20px;">
                        <i class="fas fa-spinner fa-spin"></i> Loading submitted data...
                    </td>
                </tr>
            `;
        }
        
        // Format the quarter correctly
        const formattedQuarter = quarter.toString().startsWith('Q') ? quarter : `Q${quarter}`;
        
        // Fetch the data from the server
        const response = await fetch(`/linemanager/get-feedback-questionnaire/${userId}?quarter=${formattedQuarter}`);
        
        if (!response.ok) {
            throw new Error(`Failed to fetch feedback data: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.success) {
            console.log("Fetched submitted feedback data:", data);
            
            // Clear existing content
            if (feedbackTableBody) feedbackTableBody.innerHTML = '';
            
            // Display the fetched objective data with submitted guide questions
            if (data.objectives && data.objectives.length > 0) {
                data.objectives.forEach(objective => {
                    // Save the guide question to the objective
                    objective.objectiveQualiQuestion = objective.guideQuestion || '';
                    
                    // Add to the table
                    addFormFeedbackRow(objective);
                });
            } else if (submittedObjectives && submittedObjectives.length > 0) {
                // Fall back to basic objectives with no guide questions if no data returned
                submittedObjectives.forEach(objective => {
                    addFormFeedbackRow(objective);
                });
            }
            
            // Set the date fields if available
            const startDateInput = document.getElementById('startDate');
            const endDateInput = document.getElementById('endDate');
            
            if (startDateInput && data.startDate) {
                startDateInput.value = data.startDate;
                startDateInput.disabled = true;
            }
            
            if (endDateInput && data.endDate) {
                endDateInput.value = data.endDate;
                endDateInput.disabled = true;
            }
        } else {
            console.error("Error fetching feedback data:", data.message);
            
            // Fall back to basic objectives with no guide questions
            if (submittedObjectives && submittedObjectives.length > 0) {
                submittedObjectives.forEach(objective => {
                    addFormFeedbackRow(objective);
                });
            }
        }
    } catch (error) {
        console.error("Error fetching submitted feedback data:", error);
        
        // Fall back to basic objectives with no guide questions
        if (submittedObjectives && submittedObjectives.length > 0 && feedbackTableBody) {
            feedbackTableBody.innerHTML = '';
            submittedObjectives.forEach(objective => {
                addFormFeedbackRow(objective);
            });
        }
    }
}

// Function to toggle between feedback questionnaire and feedback results views
function toggleFeedbackView(view) {
    const questionnaireContent = document.getElementById('questionnaireContent');
    const feedbackContent = document.getElementById('feedbackContent');
    const viewQuestionnaireBtn = document.getElementById('viewQuestionnaireBtn');
    const viewFeedbackBtn = document.getElementById('viewFeedbackBtn');
    
    if (!questionnaireContent || !feedbackContent || !viewQuestionnaireBtn || !viewFeedbackBtn) {
        console.error("One or more feedback view elements not found.");
        return;
    }
    
    if (view === 'questionnaire') {
        // Show questionnaire view
        questionnaireContent.style.display = 'block';
        feedbackContent.style.display = 'none';
        
        // Update button styles
        viewQuestionnaireBtn.style.backgroundColor = 'var(--primary-color)';
        viewQuestionnaireBtn.style.color = 'white';
        viewFeedbackBtn.style.backgroundColor = 'var(--secondary-color)';
        viewFeedbackBtn.style.color = 'white';
    } else {
        // Show feedback view
        questionnaireContent.style.display = 'none';
        feedbackContent.style.display = 'block';
        
        // Update button styles
        viewFeedbackBtn.style.backgroundColor = 'var(--primary-color)';
        viewFeedbackBtn.style.color = 'white';
        viewQuestionnaireBtn.style.backgroundColor = 'var(--secondary-color)';
        viewQuestionnaireBtn.style.color = 'white';
        
        // Get the active quarter from the hidden field or feedback button
        const activeQuarterField = document.getElementById('activeQuarterField');
        const quarterValue = activeQuarterField ? activeQuarterField.value : 'Q1';
        
        // Extract just the quarter number
        const quarter = quarterValue.replace('Q', '');
        console.log(`Loading feedback data for ${quarterValue}`);
        
        // Load feedback data for this quarter
        loadFeedbackData(quarter);
    }
}


// Function to save 360 feedback
async function save360DegreeFeedback() {
    console.log("Saving 360 degree feedback...");
    
    // Get form values
    const startDateElement = document.getElementById('startDate');
    const endDateElement = document.getElementById('endDate');
    const saveFeedbackButton = document.getElementById("save360DegreeFeedback");
    const activeQuarterField = document.getElementById('activeQuarterField');

    if (!startDateElement || !endDateElement || !activeQuarterField) {
        console.error("One or more required form elements not found.");
        alert("Form error: Required fields are missing.");
        return;
    }

    // Show loading state
    if (saveFeedbackButton) {
        saveFeedbackButton.disabled = true;
        saveFeedbackButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
    }

    const startDate = startDateElement.value;
    const endDate = endDateElement.value;

    // Get the quarter from the active field
    const quarter = activeQuarterField.value || 'Q1';
    
    // Validate dates
    if (!startDate || !endDate) {
        alert("Please enter both start and end dates.");
        // Reset button state
        if (saveFeedbackButton) {
            saveFeedbackButton.disabled = false;
            saveFeedbackButton.innerHTML = '<i class="fas fa-save"></i> Save Questionnaire';
        }
        return;
    }
    
    if (new Date(startDate) > new Date(endDate)) {
        alert("End date must be after start date.");
        // Reset button state
        if (saveFeedbackButton) {
            saveFeedbackButton.disabled = false;
            saveFeedbackButton.innerHTML = '<i class="fas fa-save"></i> Save Questionnaire';
        }
        return;
    }
    
    console.log("Saving questionnaire with the following data:");
    console.log("User ID:", userId);
    console.log("Job ID:", jobId);
    console.log("Start Date:", startDate);
    console.log("End Date:", endDate);
    console.log("Quarter:", quarter);

    // Collect feedback data
    const feedbackData = {
        questions: [],
        skills: []
    };

    // Collect qualitative questions from input fields
    const feedbackRows = document.querySelectorAll('#feedback-table-body tr');
    feedbackRows.forEach(row => {
        const qualitativeInput = row.querySelector('input[type="text"]');

        if (qualitativeInput && qualitativeInput.value.trim()) {
            const objectiveId = qualitativeInput.getAttribute('data-objective-id');
            if (objectiveId) {
                feedbackData.questions.push({
                    objectiveId: objectiveId,
                    questionText: qualitativeInput.value.trim()
                });
            }
        }
    });

    // Check if any questions were added
    if (feedbackData.questions.length === 0) {
        alert("Please provide at least one qualitative question.");
        
        // Reset button state
        if (saveFeedbackButton) {
            saveFeedbackButton.disabled = false;
            saveFeedbackButton.innerHTML = '<i class="fas fa-save"></i> Save Questionnaire';
        }
        return;
    }

    console.log("Feedback data to save:", feedbackData);

    // Send data to server
    try {
        const response = await fetch(`/linemanager/records-performance-tracker/questionnaire/${userId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                userId,
                jobId,
                startDate,
                endDate,
                feedbackData,
                quarter
            })
        });

        console.log("Response from server:", response.status);

        // Check if the response was successful
        if (!response.ok) {
            throw new Error(`Server responded with status ${response.status}`);
        }

        const result = await response.json();
        console.log("Result from server:", result);

        if (result.success) {
            // Show success message
            alert("Feedback questionnaire saved successfully!");
            
            // Update viewState to reflect the new status
            const quarterKey = `feedbacks_${quarter}`;
            viewState.viewOnlyStatus[quarterKey] = true;
            
            // Update the UI based on the new state
            updateStepperAccessibility();
            
            // Switch to view-only mode
            switchToViewOnlyMode();
            
            // Switch to the "View Feedback" tab
            const viewFeedbackBtn = document.getElementById('viewFeedbackBtn');
            if (viewFeedbackBtn) {
                viewFeedbackBtn.click();
            }
        } else {
            alert("Failed to save feedback: " + (result.message || "Unknown error"));
            
            // Reset button state
            if (saveFeedbackButton) {
                saveFeedbackButton.disabled = false;
                saveFeedbackButton.innerHTML = '<i class="fas fa-save"></i> Save Questionnaire';
            }
        }
    } catch (error) {
        console.error("Error saving feedback:", error);
        alert("An error occurred while saving feedback. Please try again later.");
        
        // Reset button state
        if (saveFeedbackButton) {
            saveFeedbackButton.disabled = false;
            saveFeedbackButton.innerHTML = '<i class="fas fa-save"></i> Save Questionnaire';
        }
    }
}

// Function to fetch year data
function fetchYearData() {
    const yearSelect = document.getElementById('yearSelect');
    if (!yearSelect) {
        console.error("Year select element not found.");
        return;
    }
    
    const selectedYear = yearSelect.value;
    if (selectedYear) {
        // Show loading indicator
        const stepperContainer = document.querySelector('.stepper-container');
        if (stepperContainer) {
            stepperContainer.classList.add('loading');
        }
        
        // Redirect to the same page with the selected year as a query parameter
        window.location.href = `?year=${selectedYear}`;
    }
}

// Function to save objectives
async function saveObjectives(event) {
    event.preventDefault(); // Prevent default form submission
    
    // Get form values
    const userIdField = document.querySelector('input[name="userId"]');
    if (!userIdField) {
        console.error("User ID field not found in the form.");
        alert("Form error: User ID field not found.");
        return;
    }
    
    const userId = userIdField.value;
    let jobId = document.getElementById("jobId")?.value;
    
    // If jobId is not set in the form, try to get it from viewState
    if (!jobId && viewState && viewState.jobId) {
        jobId = viewState.jobId;
        console.log("Using jobId from viewState:", jobId);
    }
    
    console.log("Saving objectives for User ID:", userId);
    console.log("Job ID:", jobId);

    // Validate required IDs
    if (!userId) {
        console.error("User ID is missing.");
        alert("Please ensure all fields are filled out correctly before saving.");
        return;
    }

    // Ensure confirmation checkbox is checked
    const confirmationCheckbox = document.getElementById("confirmationCheckbox");
    if (!confirmationCheckbox || !confirmationCheckbox.checked) {
        alert("Please confirm that you have reviewed the objectives before saving.");
        return;
    }

    // Calculate total weight
    let totalWeight = 0;

    // Collect objectives from the form
    const objectiveDescrpt = [];
    const objectiveKPI = [];
    const objectiveTarget = [];
    const objectiveUOM = [];
    const objectiveAssignedWeight = [];

    const rows = document.querySelectorAll("#progress-table-body tr");
    rows.forEach(row => {
        const descriptionInput = row.querySelector('input[name="objectiveDescrpt"]');
        const kpiInput = row.querySelector('input[name="objectiveKPI"]');
        const targetInput = row.querySelector('input[name="objectiveTarget"]');
        const uomInput = row.querySelector('input[name="objectiveUOM"]');
        const weightInput = row.querySelector('input[name="objectiveAssignedWeight"]');

        if (descriptionInput && kpiInput && targetInput && uomInput && weightInput) {
            const weight = parseFloat(weightInput.value) || 0;
            totalWeight += weight;

            objectiveDescrpt.push(descriptionInput.value.trim());
            objectiveKPI.push(kpiInput.value.trim());
            objectiveTarget.push(targetInput.value.trim());
            objectiveUOM.push(uomInput.value.trim());
            objectiveAssignedWeight.push(weight);
        }
    });

    console.log("Total weight:", totalWeight);
    console.log("Objectives to save:", {
        objectiveDescrpt,
        objectiveKPI,
        objectiveTarget,
        objectiveUOM,
        objectiveAssignedWeight
    });

    // Validate total weight
    if (Math.abs(totalWeight - 100) > 0.01) { // Allow for small floating point differences
        alert("Total assigned weight must be exactly 100% to save.");
        return;
    }

    // Proceed if objectives are present
    if (objectiveDescrpt.length > 0) {
        try {
            // Show loading state
            const saveButton = document.getElementById("saveButton");
            if (saveButton) {
                saveButton.disabled = true;
                saveButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
            }

            // Construct the request payload
            const payload = {
                userId,
                jobId,
                objectiveDescrpt,
                objectiveKPI,
                objectiveTarget,
                objectiveUOM,
                objectiveAssignedWeight
            };
            
            console.log("Sending payload to server:", payload);

            // Send data to server
            const response = await fetch(`/linemanager/records-performance-tracker/${userId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            console.log("Response status:", response.status);

            // Get the response text first to debug
            const responseText = await response.text();
            console.log("Raw response:", responseText);
            
            let result;
            try {
                // Try to parse it as JSON (if it is JSON)
                result = JSON.parse(responseText);
            } catch (e) {
                console.error("Response is not valid JSON:", e);
                // Handle non-JSON response
                if (responseText.includes("Redirect")) {
                    console.log("Redirect detected in response");
                    // The server is trying to redirect, follow the redirect
                    window.location.href = `/linemanager/records-performance-tracker/${userId}`;
                    return;
                }
                throw new Error("Invalid response format from server");
            }

            console.log("Parsed result:", result);

            if (result.success) {
                // Display a success alert
                alert("Objectives saved successfully.");
                
                // Update viewState to reflect the new status
                viewState.submittedObjectives = result.objectives || submittedObjectives;
                viewState.viewOnlyStatus.objectivesettings = true;
                
                // Update the UI based on the new state
                updateStepperAccessibility();
                
                // Reload the page to show the updated view
                window.location.reload();
            } else {
                alert("Failed to save objectives: " + (result.message || "Unknown error"));
                
                // Reset button state
                if (saveButton) {
                    saveButton.disabled = false;
                    saveButton.innerHTML = '<i class="fas fa-save"></i> Save Objectives';
                }
            }
        } catch (error) {
            console.error("Error saving objectives:", error);
            alert("An error occurred while saving objectives. Please try again later.");
            
            // Reset button state
            const saveButton = document.getElementById("saveButton");
            if (saveButton) {
                saveButton.disabled = false;
                saveButton.innerHTML = '<i class="fas fa-save"></i> Save Objectives';
            }
        }
    } else {
        alert("No objectives to save. Please add at least one objective.");
    }
}

// Function to save feedback draft
async function saveFeedbackDraft(event) {
    if (event) event.preventDefault();
    
    console.log("Saving feedback draft...");
    
    // Get form values
    const startDateElement = document.getElementById('startDate');
    const endDateElement = document.getElementById('endDate');
    const saveDraftButton = document.getElementById("saveFeedbackDraft");
    const activeQuarterField = document.getElementById('activeQuarterField');

    if (!startDateElement || !endDateElement || !activeQuarterField) {
        console.error("One or more required form elements not found.");
        alert("Form error: Required fields are missing.");
        return;
    }

    // Show loading state
    if (saveDraftButton) {
        saveDraftButton.disabled = true;
        saveDraftButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
    }

    const startDate = startDateElement.value;
    const endDate = endDateElement.value;
    const quarter = activeQuarterField.value || 'Q1';
    
    // Validate dates
    if (!startDate || !endDate) {
        alert("Please enter both start and end dates.");
        // Reset button state
        if (saveDraftButton) {
            saveDraftButton.disabled = false;
            saveDraftButton.innerHTML = '<i class="fas fa-save"></i> Save Draft';
        }
        return;
    }
    
    if (new Date(startDate) > new Date(endDate)) {
        alert("End date must be after start date.");
        // Reset button state
        if (saveDraftButton) {
            saveDraftButton.disabled = false;
            saveDraftButton.innerHTML = '<i class="fas fa-save"></i> Save Draft';
        }
        return;
    }
    
    // Collect feedback data
    const feedbackData = {
        questions: [],
        skills: [],
        isDraft: true // Flag to indicate this is a draft
    };
    
    // Collect guide questions
    const guideQuestionInputs = document.querySelectorAll('.guide-question-input');
    guideQuestionInputs.forEach(input => {
        const objectiveId = input.getAttribute('data-objective-id');
        if (objectiveId) {
            feedbackData.questions.push({
                objectiveId: objectiveId,
                questionText: input.value.trim()
            });
        }
    });
    
    try {
        // Send draft data to server
        const response = await fetch(`/linemanager/save-feedback-draft/${userId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                userId,
                jobId,
                startDate,
                endDate,
                feedbackData,
                quarter
            })
        });
        
        if (!response.ok) {
            throw new Error(`Server responded with status ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            // Show success message
            alert("Feedback draft saved successfully! You can continue editing.");
            
            // Reset button state
            if (saveDraftButton) {
                saveDraftButton.disabled = false;
                saveDraftButton.innerHTML = '<i class="fas fa-save"></i> Save Draft';
            }
        } else {
            alert("Failed to save draft: " + (result.message || "Unknown error"));
            
            // Reset button state
            if (saveDraftButton) {
                saveDraftButton.disabled = false;
                saveDraftButton.innerHTML = '<i class="fas fa-save"></i> Save Draft';
            }
        }
    } catch (error) {
        console.error("Error saving feedback draft:", error);
        alert("An error occurred while saving the draft. Please try again later.");
        
        // Reset button state
        if (saveDraftButton) {
            saveDraftButton.disabled = false;
            saveDraftButton.innerHTML = '<i class="fas fa-save"></i> Save Draft';
        }
    }
}

// Function to submit feedback (finalize)
async function submitFeedback(event) {
    if (event) event.preventDefault();
    
    console.log("Submitting feedback (final)...");
    
    // Get form values
    const startDateElement = document.getElementById('startDate');
    const endDateElement = document.getElementById('endDate');
    const submitButton = document.getElementById("submitFeedback");
    const activeQuarterField = document.getElementById('activeQuarterField');

    if (!startDateElement || !endDateElement || !activeQuarterField) {
        console.error("One or more required form elements not found.");
        alert("Form error: Required fields are missing.");
        return;
    }

    // Show loading state
    if (submitButton) {
        submitButton.disabled = true;
        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Submitting...';
    }

    const startDate = startDateElement.value;
    const endDate = endDateElement.value;
    const quarter = activeQuarterField.value || 'Q1';
    
    // Validate dates
    if (!startDate || !endDate) {
        alert("Please enter both start and end dates.");
        // Reset button state
        if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Questionnaire';
        }
        return;
    }
    
    if (new Date(startDate) > new Date(endDate)) {
        alert("End date must be after start date.");
        // Reset button state
        if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Questionnaire';
        }
        return;
    }
    
    // Confirm submission
    if (!confirm("Are you sure you want to submit the questionnaire? You won't be able to edit it after submission.")) {
        // Reset button state
        if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Questionnaire';
        }
        return;
    }
    
    // Collect feedback data
    const feedbackData = {
        questions: [],
        skills: [],
        isDraft: false // Flag to indicate this is a final submission
    };
    
    // Collect guide questions
    const guideQuestionInputs = document.querySelectorAll('.guide-question-input');
    guideQuestionInputs.forEach(input => {
        const objectiveId = input.getAttribute('data-objective-id');
        if (objectiveId) {
            feedbackData.questions.push({
                objectiveId: objectiveId,
                questionText: input.value.trim()
            });
        }
    });
    
    try {
        // Send final submission to server
        const response = await fetch(`/linemanager/records-performance-tracker/questionnaire/${userId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                userId,
                jobId,
                startDate,
                endDate,
                feedbackData,
                quarter
            })
        });
        
        if (!response.ok) {
            throw new Error(`Server responded with status ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            // Show success message
            alert("Questionnaire submitted successfully!");
            
            // Update viewState to reflect the new status
            const quarterKey = `feedbacks_${quarter}`;
            viewState.viewOnlyStatus[quarterKey] = true;
            
            // Update the UI based on the new state
            updateStepperAccessibility();
            
            // Reload to show the updated view
            window.location.reload();
        } else {
            alert("Failed to submit questionnaire: " + (result.message || "Unknown error"));
            
            // Reset button state
            if (submitButton) {
                submitButton.disabled = false;
                submitButton.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Questionnaire';
            }
        }
    } catch (error) {
        console.error("Error submitting feedback:", error);
        alert("An error occurred while submitting the questionnaire. Please try again later.");
        
        // Reset button state
        if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Questionnaire';
        }
    }
}

// Function to load feedback data
function loadFeedbackData(quarter) {
    console.log(`Loading feedback data for quarter ${quarter}...`);
    
    if (!userId) {
        console.error("User ID not available for loading feedback data.");
        return;
    }
    
    const objectiveFeedbackContainer = document.getElementById('objectiveFeedbackContainer');
    const skillsFeedbackContainer = document.getElementById('skillsFeedbackContainer');
    
    // Show loading state
    if (objectiveFeedbackContainer) {
        objectiveFeedbackContainer.innerHTML = '<div class="loading" style="text-align: center; padding: 30px;"><i class="fas fa-spinner fa-spin" style="font-size: 24px;"></i><p>Loading feedback data...</p></div>';
    }
    
    if (skillsFeedbackContainer) {
        skillsFeedbackContainer.innerHTML = '<div class="loading" style="text-align: center; padding: 30px;"><i class="fas fa-spinner fa-spin" style="font-size: 24px;"></i><p>Loading skills feedback data...</p></div>';
    }
    
    // Format the quarter parameter
    const formattedQuarter = quarter.toString().startsWith('Q') ? quarter : `Q${quarter}`;
    
    // Fetch feedback data from the server
    fetch(`/linemanager/get-feedback-data/${userId}?quarter=${formattedQuarter}`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`Server responded with status ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log(`Received feedback data for ${formattedQuarter}:`, data);
            
            if (data.success) {
                // Update stats
                const totalResponsesElement = document.getElementById('totalResponses');
                const averageRatingElement = document.getElementById('averageRating');
                const completionRateElement = document.getElementById('completionRate');
                
                if (totalResponsesElement) totalResponsesElement.textContent = data.stats?.totalResponses || '0';
                if (averageRatingElement) averageRatingElement.textContent = data.stats?.averageRating || '0.0';
                if (completionRateElement) completionRateElement.textContent = data.stats?.completionRate || '0%';
                
                // Generate and display objective feedback
                if (objectiveFeedbackContainer) {
                    let objectiveFeedbackHTML = '';
                    
                    if (data.objectiveFeedback && data.objectiveFeedback.length > 0) {
                        data.objectiveFeedback.forEach(objective => {
                            objectiveFeedbackHTML += generateObjectiveFeedbackHTML(objective, formattedQuarter);
                        });
                    } else {
                        objectiveFeedbackHTML = `
                        <div class="empty-state" style="text-align: center; padding: 30px; background-color: #f9f9f9; border-radius: 8px;">
                            <i class="fas fa-inbox" style="font-size: 48px; color: #ccc; margin-bottom: 15px;"></i>
                            <p>No objective feedback responses available yet for ${formattedQuarter}.</p>
                        </div>`;
                    }
                    
                    objectiveFeedbackContainer.innerHTML = objectiveFeedbackHTML;
                }
                
                // Generate and display skills feedback
                if (skillsFeedbackContainer) {
                    let skillsFeedbackHTML = '';
                    
                    if (data.skillsFeedback && data.skillsFeedback.length > 0) {
                        skillsFeedbackHTML = '<div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 15px;">';
                        
                        data.skillsFeedback.forEach(skill => {
                            skillsFeedbackHTML += generateSkillFeedbackHTML(skill);
                        });
                        
                        skillsFeedbackHTML += '</div>';
                    } else {
                        skillsFeedbackHTML = `
                        <div class="empty-state" style="text-align: center; padding: 30px; background-color: #f9f9f9; border-radius: 8px;">
                            <i class="fas fa-inbox" style="font-size: 48px; color: #ccc; margin-bottom: 15px;"></i>
                            <p>No skills feedback responses available yet for ${formattedQuarter}.</p>
                        </div>`;
                    }
                    
                    skillsFeedbackContainer.innerHTML = skillsFeedbackHTML;
                }
                
                // Update individual answers
                updateIndividualAnswers(data.individualAnswers, formattedQuarter);
                
                // Setup filter handlers if needed
                setupFilters();
            } else {
                // Show error message
                showFeedbackError(`Error loading feedback data for ${formattedQuarter}: ${data.message || 'Unknown error'}`);
            }
        })
        .catch(error => {
            console.error(`Error fetching feedback data for ${formattedQuarter}:`, error);
            showFeedbackError(`Error loading feedback data for ${formattedQuarter}. Please try again later. (${error.message})`);
        });
}

// Function to submit Mid-Year IDP form
async function submitMidYearIDPForm(event) {
    event.preventDefault();
    
    console.log("Submitting Mid-Year IDP form...");
    
    // Validate the form
    if (!validateIDPForm('mid')) {
        return;
    }
    
    // Get form data
    const formData = {
        profStrengths: document.getElementById("profStrengths").value,
        profAreasForDevelopment: document.getElementById("profAreasForDevelopment").value,
        profActionsToTake: document.getElementById("profActionsToTake").value,
        leaderStrengths: document.getElementById("leaderStrengths").value,
        leaderAreasForDevelopment: document.getElementById("leaderAreasForDevelopment").value,
        leaderActionsToTake: document.getElementById("leaderActionsToTake").value,
        nextRoleShortTerm: document.getElementById("nextRoleShortTerm").value,
        nextRoleLongTerm: document.getElementById("nextRoleLongTerm").value,
        nextRoleMobility: document.getElementById("nextRoleMobility").value
    };
    
    // Disable the submit button and show loading state
    const submitButton = document.getElementById("submitMidYearIDP");
    if (submitButton) {
        submitButton.disabled = true;
        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Submitting...';
    }
    
    try {
        // Submit the form using AJAX
        const response = await fetch(`/linemanager/midyear-idp/${userId}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            body: JSON.stringify(formData)
        });
        
        if (!response.ok) {
            throw new Error(`Server responded with status ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            alert("Mid-Year IDP saved successfully!");
            
            // Update viewState to reflect the new status
            viewState.viewOnlyStatus.midyearidp = true;
            
            // Update the UI based on the new state
            updateStepperAccessibility();
            
            // Redirect to refresh the page
            window.location.href = `/linemanager/records-performance-tracker/${userId}`;
        } else {
            alert("Error saving Mid-Year IDP: " + (result.message || "Unknown error"));
            
            // Re-enable the submit button
            if (submitButton) {
                submitButton.disabled = false;
                submitButton.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Mid-Year IDP';
            }
        }
    } catch (error) {
        console.error("Error submitting Mid-Year IDP:", error);
        alert("An error occurred while submitting the Mid-Year IDP. Please try again.");
        
        // Re-enable the submit button
        if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Mid-Year IDP';
        }
    }
}

// Function to submit Final-Year IDP form
async function submitFinalYearIDPForm(event) {
    event.preventDefault();
    
    console.log("Submitting Final-Year IDP form...");
    
    // Validate the form
    if (!validateIDPForm('final')) {
        return;
    }
    
    // Get form data
    const formData = {
        profStrengths: document.getElementById("profStrengths").value,
        profAreasForDevelopment: document.getElementById("profAreasForDevelopment").value,
        profActionsToTake: document.getElementById("profActionsToTake").value,
        leaderStrengths: document.getElementById("leaderStrengths").value,
        leaderAreasForDevelopment: document.getElementById("leaderAreasForDevelopment").value,
        leaderActionsToTake: document.getElementById("leaderActionsToTake").value,
        nextRoleShortTerm: document.getElementById("nextRoleShortTerm").value,
        nextRoleLongTerm: document.getElementById("nextRoleLongTerm").value,
        nextRoleMobility: document.getElementById("nextRoleMobility").value
    };
    
    // Disable the submit button and show loading state
    const submitButton = document.getElementById("submitFinalYearIDP");
    if (submitButton) {
        submitButton.disabled = true;
        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Submitting...';
    }
    
    try {
        // Submit the form using AJAX
        const response = await fetch(`/linemanager/finalyear-idp/${userId}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            body: JSON.stringify(formData)
        });
        
        if (!response.ok) {
            throw new Error(`Server responded with status ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            alert("Final-Year IDP saved successfully!");
            
            // Update viewState to reflect the new status
            viewState.viewOnlyStatus.finalyearidp = true;
            
            // Update the UI based on the new state
            updateStepperAccessibility();
            
            // Redirect to refresh the page
            window.location.href = `/linemanager/records-performance-tracker/${userId}`;
        } else {
            alert("Error saving Final-Year IDP: " + (result.message || "Unknown error"));
            
            // Re-enable the submit button
            if (submitButton) {
                submitButton.disabled = false;
                submitButton.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Final-Year IDP';
            }
        }
    } catch (error) {
        console.error("Error submitting Final-Year IDP:", error);
        alert("An error occurred while submitting the Final-Year IDP. Please try again.");
        
        // Re-enable the submit button
        if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Final-Year IDP';
        }
    }
}

// Function to validate IDP form
function validateIDPForm(formType) {
    const prefix = formType === 'final' ? 'final' : '';
    
    const requiredFields = [
        `${prefix}ProfStrengths`, 
        `${prefix}ProfAreasForDevelopment`, 
        `${prefix}ProfActionsToTake`, 
        `${prefix}LeaderStrengths`, 
        `${prefix}LeaderAreasForDevelopment`, 
        `${prefix}LeaderActionsToTake`, 
        `${prefix}NextRoleShortTerm`, 
        `${prefix}NextRoleLongTerm`, 
        `${prefix}NextRoleMobility`
    ];
    
    let isValid = true;
    let firstInvalidField = null;
    
    requiredFields.forEach(fieldId => {
        // Handle both naming conventions (with and without prefix)
        let field = document.getElementById(fieldId);
        
        // If not found with prefix, try without prefix (using standard field names)
        if (!field && prefix) {
            const standardFieldId = fieldId.replace(prefix, '');
            field = document.getElementById(standardFieldId.charAt(0).toLowerCase() + standardFieldId.slice(1));
        }
        
        if (field) {
            if (!field.value.trim()) {
                field.classList.add("error");
                isValid = false;
                if (!firstInvalidField) {
                    firstInvalidField = field;
                }
            } else {
                field.classList.remove("error");
            }
        } else {
            console.warn(`Field with ID ${fieldId} not found.`);
        }
    });
    
    if (!isValid) {
        alert("Please fill all required fields.");
        
        // Scroll to the first invalid field
        if (firstInvalidField) {
            firstInvalidField.scrollIntoView({ behavior: 'smooth', block: 'center' });
            firstInvalidField.focus();
        }
    }
    
    return isValid;
}

// Function to load Mid-Year IDP data
function loadMidYearIDPData(userId) {
    console.log(`Loading Mid-Year IDP data for user ${userId}...`);
    
    fetch(`/linemanager/midyear-idp/${userId}`, {
        method: "GET",
        headers: {
            "Accept": "application/json"
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`Server responded with status ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            midYearIDPData = data.viewState.midYearData;
            console.log("Loaded Mid-Year IDP data:", midYearIDPData);
            
            // If the mid-year IDP form is currently displayed, update it
            const midYearIDPForm = document.getElementById("midYearIDPForm");
            if (midYearIDPForm && midYearIDPForm.style.display === 'block') {
                createViewOnlyMidYearIDP(midYearIDPData);
            }
        } else {
            console.error("Error loading Mid-Year IDP data:", data.message);
        }
    })
    .catch(error => {
        console.error("Error fetching Mid-Year IDP data:", error);
    });
}

// Function to load Final-Year IDP data
function loadFinalYearIDPData(userId, year) {
    console.log(`Loading Final-Year IDP data for user ${userId} and year ${year}...`);
    
    fetch(`/linemanager/finalyear-idp/${userId}?year=${year}`, {
        method: "GET",
        headers: {
            "Accept": "application/json"
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`Server responded with status ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            finalYearIDPData = data.viewState.finalYearData;
            console.log("Loaded Final-Year IDP data:", finalYearIDPData);
            
            // If the form is currently displayed as Final-Year IDP, update it
            const midYearIDPForm = document.getElementById("midYearIDPForm");
            const formTitle = midYearIDPForm?.querySelector("h2");
            
            if (midYearIDPForm && midYearIDPForm.style.display === 'block' && 
                formTitle && formTitle.textContent.includes("Final-Year")) {
                createViewOnlyFinalYearIDP(finalYearIDPData);
            }
        } else {
            console.error("Error loading Final-Year IDP data:", data.message);
        }
    })
    .catch(error => {
        console.error("Error fetching Final-Year IDP data:", error);
    });
}

// Function to create view-only Mid-Year IDP
function createViewOnlyMidYearIDP(data) {
    if (!data) {
        console.error("No Mid-Year IDP data available for view-only mode");
        return;
    }
    
    // Create view-only form
    const form = document.getElementById("midYearIDPFormDetails");
    if (!form) {
        console.error("Mid-Year IDP form not found");
        return;
    }
    
    // Set form to view-only mode
    form.classList.add('view-only-mode');
    
    // Disable all form inputs
    const inputs = form.querySelectorAll("input, textarea");
    inputs.forEach(input => {
        input.disabled = true;
        input.setAttribute('readonly', 'readonly');
    });
    
    // Update the title to indicate view-only mode
    const title = document.querySelector("#midYearIDPForm h2");
    if (title) {
        title.innerHTML = '<i class="fas fa-clipboard-check"></i> Mid-Year Individual Development Plan (View Only)';
    }
    
    // Hide submit button
    const submitButton = document.getElementById("submitMidYearIDP");
    if (submitButton) {
        submitButton.style.display = "none";
    }
    
    // Set values for view-only
    setIDPFormValues(data);
    
    // Show last updated info
    let lastUpdatedInfo = document.querySelector("#midYearIDPForm .last-updated-info");
    if (!lastUpdatedInfo) {
        lastUpdatedInfo = document.createElement('div');
        lastUpdatedInfo.className = 'last-updated-info';
        form.appendChild(lastUpdatedInfo);
    }
    
    const lastUpdatedDate = data.lastUpdated ? new Date(data.lastUpdated).toLocaleString() : 'Unknown';
    lastUpdatedInfo.textContent = `Last updated: ${lastUpdatedDate}`;
}

// Function to create view-only Final-Year IDP
function createViewOnlyFinalYearIDP(data) {
    if (!data) {
        console.error("No Final-Year IDP data available for view-only mode");
        return;
    }
    
    // Create view-only form (reusing the Mid-Year form layout)
    const form = document.getElementById("midYearIDPFormDetails");
    if (!form) {
        console.error("IDP form not found for Final-Year view");
        return;
    }
    
    // Set form to view-only mode
    form.classList.add('view-only-mode');
    
    // Disable all form inputs
    const inputs = form.querySelectorAll("input, textarea");
    inputs.forEach(input => {
        input.disabled = true;
        input.setAttribute('readonly', 'readonly');
    });
    
    // Update the title to indicate view-only mode
    const title = document.querySelector("#midYearIDPForm h2");
    if (title) {
        title.innerHTML = '<i class="fas fa-clipboard-check"></i> Final-Year Individual Development Plan (View Only)';
    }
    
    // Hide submit button
    const submitButton = document.getElementById("submitFinalYearIDP");
    if (submitButton) {
        submitButton.style.display = "none";
    }
    
    // Set values for view-only
    setIDPFormValues(data);
    
    // Show last updated info
    let lastUpdatedInfo = document.querySelector("#midYearIDPForm .last-updated-info");
    if (!lastUpdatedInfo) {
        lastUpdatedInfo = document.createElement('div');
        lastUpdatedInfo.className = 'last-updated-info';
        form.appendChild(lastUpdatedInfo);
    }
    
    const lastUpdatedDate = data.lastUpdated ? new Date(data.lastUpdated).toLocaleString() : 'Unknown';
    lastUpdatedInfo.textContent = `Last updated: ${lastUpdatedDate}`;
}

// Function to enable Mid-Year IDP form for editing
function enableMidYearIDPForm() {
    const form = document.getElementById("midYearIDPFormDetails");
    if (form) {
        // Remove view-only mode class if present
        form.classList.remove('view-only-mode');
        
        // Enable all form inputs
        const inputs = form.querySelectorAll("input, textarea");
        inputs.forEach(input => {
            input.disabled = false;
            input.removeAttribute('readonly');
        });
        
        // Show submit button
        const submitButton = document.getElementById("submitMidYearIDP");
        if (submitButton) {
            submitButton.style.display = "inline-block";
        }
        
        // Remove any last updated info
        const lastUpdatedInfo = form.querySelector(".last-updated-info");
        if (lastUpdatedInfo) {
            lastUpdatedInfo.remove();
        }
        
        // Update form title if needed
        const title = document.querySelector("#midYearIDPForm h2");
        if (title) {
            title.innerHTML = '<i class="fas fa-clipboard-check"></i> Mid-Year Individual Development Plan (IDP)';
        }
        
        // Update the progress bar based on filled fields
        updateIDPProgress();
    }
}

// Function to enable Final-Year IDP form for editing
function enableFinalYearIDPForm() {
    const form = document.getElementById("midYearIDPFormDetails");
    if (form) {
        // Remove view-only mode class if present
        form.classList.remove('view-only-mode');
        
        // Enable all form inputs
        const inputs = form.querySelectorAll("input, textarea");
        inputs.forEach(input => {
            input.disabled = false;
            input.removeAttribute('readonly');
        });
        
        // Show submit button (which should be renamed to submitFinalYearIDP)
        const submitButton = document.getElementById("submitFinalYearIDP");
        if (submitButton) {
            submitButton.style.display = "inline-block";
        }
        
        // Remove any last updated info
        const lastUpdatedInfo = form.querySelector(".last-updated-info");
        if (lastUpdatedInfo) {
            lastUpdatedInfo.remove();
        }
        
        // Update form title if needed
        const title = document.querySelector("#midYearIDPForm h2");
        if (title) {
            title.innerHTML = '<i class="fas fa-clipboard-check"></i> Final-Year Individual Development Plan (IDP)';
        }
        
        // Update the progress bar based on filled fields
        updateFinalIDPProgress();
    }
}

// Function to set IDP form values
function setIDPFormValues(data) {
    if (!data) return;
    
    // Helper function to set field value if it exists
    function setFieldValue(fieldId, value) {
        const field = document.getElementById(fieldId);
        if (field && value) {
            field.value = value;
        }
    }
    
    // Set each field value
    setFieldValue("profStrengths", data.profStrengths);
    setFieldValue("profAreasForDevelopment", data.profAreasForDevelopment);
    setFieldValue("profActionsToTake", data.profActionsToTake);
    setFieldValue("leaderStrengths", data.leaderStrengths);
    setFieldValue("leaderAreasForDevelopment", data.leaderAreasForDevelopment);
    setFieldValue("leaderActionsToTake", data.leaderActionsToTake);
    setFieldValue("nextRoleShortTerm", data.nextRoleShortTerm);
    setFieldValue("nextRoleLongTerm", data.nextRoleLongTerm);
    setFieldValue("nextRoleMobility", data.nextRoleMobility);
    
    // Also try with "final" prefix for Final-Year IDP
    setFieldValue("finalProfStrengths", data.profStrengths);
    setFieldValue("finalProfAreasForDevelopment", data.profAreasForDevelopment);
    setFieldValue("finalProfActionsToTake", data.profActionsToTake);
    setFieldValue("finalLeaderStrengths", data.leaderStrengths);
    setFieldValue("finalLeaderAreasForDevelopment", data.leaderAreasForDevelopment);
    setFieldValue("finalLeaderActionsToTake", data.leaderActionsToTake);
    setFieldValue("finalNextRoleShortTerm", data.nextRoleShortTerm);
    setFieldValue("finalNextRoleLongTerm", data.nextRoleLongTerm);
    setFieldValue("finalNextRoleMobility", data.nextRoleMobility);
    
    // Update character counters
    updateAllCharCounters();
}

// Function to update all character counters
function updateAllCharCounters() {
    const textareas = document.querySelectorAll('textarea');
    textareas.forEach(textarea => {
        const counterId = textarea.id + 'Count';
        const counterElement = document.getElementById(counterId);
        if (counterElement) {
            counterElement.textContent = textarea.value.length;
        }
    });
}

// Function to update Mid-Year IDP progress
function updateIDPProgress() {
    const fields = [
        "profStrengths", 
        "profAreasForDevelopment", 
        "profActionsToTake", 
        "leaderStrengths", 
        "leaderAreasForDevelopment", 
        "leaderActionsToTake", 
        "nextRoleShortTerm", 
        "nextRoleLongTerm", 
        "nextRoleMobility"
    ];
    
    let filledFields = 0;
    
    fields.forEach(fieldId => {
        const field = document.getElementById(fieldId);
        if (field && field.value.trim().length > 0) {
            filledFields++;
            
            // Update character counter
            const counterId = fieldId + 'Count';
            const counterElement = document.getElementById(counterId);
            if (counterElement) {
                counterElement.textContent = field.value.length;
            }
        }
    });
    
    // Calculate progress percentage
    const progressPercentage = (filledFields / fields.length) * 100;
    
    // Update progress bar
    const progressBar = document.getElementById('midYearIDPProgressBar');
    if (progressBar) {
        progressBar.style.width = progressPercentage + '%';
    }
    
    // Enable/disable submit button based on progress
    const submitButton = document.getElementById('submitMidYearIDP');
    if (submitButton) {
        if (progressPercentage === 100) {
            submitButton.disabled = false;
        } else {
            submitButton.disabled = true;
        }
    }
}

// Function to update Final-Year IDP progress
function updateFinalIDPProgress() {
    const fields = [
        "finalProfStrengths", 
        "finalProfAreasForDevelopment", 
        "finalProfActionsToTake", 
        "finalLeaderStrengths", 
        "finalLeaderAreasForDevelopment", 
        "finalLeaderActionsToTake", 
        "finalNextRoleShortTerm", 
        "finalNextRoleLongTerm", 
        "finalNextRoleMobility"
    ];
    
    // Try with standard field names as backup
    const standardFields = [
        "profStrengths", 
        "profAreasForDevelopment", 
        "profActionsToTake", 
        "leaderStrengths", 
        "leaderAreasForDevelopment", 
        "leaderActionsToTake", 
        "nextRoleShortTerm", 
        "nextRoleLongTerm", 
        "nextRoleMobility"
    ];
    
    let filledFields = 0;
    const totalFields = fields.length;
    
    // Check each field
    for (let i = 0; i < totalFields; i++) {
        // Try with 'final' prefix first
        let field = document.getElementById(fields[i]);
        
        // If not found, try with standard field name
        if (!field) {
            field = document.getElementById(standardFields[i]);
        }
        
        if (field && field.value.trim().length > 0) {
            filledFields++;
            
            // Update character counter
            const counterId = fields[i] + 'Count';
            let counterElement = document.getElementById(counterId);
            
            // If counter not found with 'final' prefix, try standard name
            if (!counterElement) {
                counterElement = document.getElementById(standardFields[i] + 'Count');
            }
            
            if (counterElement) {
                counterElement.textContent = field.value.length;
            }
        }
    }
    
    // Calculate progress percentage
    const progressPercentage = (filledFields / totalFields) * 100;
    
    // Update progress bar
    const progressBar = document.getElementById('finalYearIDPProgressBar');
    if (progressBar) {
        progressBar.style.width = progressPercentage + '%';
    } else {
        // If final year progress bar doesn't exist, use mid-year one
        const midYearProgressBar = document.getElementById('midYearIDPProgressBar');
        if (midYearProgressBar) {
            midYearProgressBar.style.width = progressPercentage + '%';
        }
    }
    
    // Enable/disable submit button based on progress
    const submitButton = document.getElementById('submitFinalYearIDP');
    if (submitButton) {
        if (progressPercentage === 100) {
            submitButton.disabled = false;
        } else {
            submitButton.disabled = true;
        }
    }
}

// Helper function to get userId from URL
function getUserIdFromURL() {
    const pathParts = window.location.pathname.split('/');
    const userIdIndex = pathParts.indexOf('records-performance-tracker') + 1;
    if (userIdIndex < pathParts.length) {
        return pathParts[userIdIndex];
    }
    return null;
}

// Function to generate objective feedback HTML
function generateObjectiveFeedbackHTML(objective, quarter) {
    return `
    <div class="feedback-card" style="background-color: white; border-radius: 8px; padding: 20px; margin-bottom: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
        <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 15px;">
            <div>
                <h4 style="margin: 0; color: var(--primary-color);">${objective.objectiveDescrpt || 'Unnamed Objective'}</h4>
                <p style="margin: 5px 0 0 0; color: #555; font-size: 0.9em;">${objective.objectiveKPI || 'N/A'} | Target: ${objective.objectiveTarget || 'N/A'} ${objective.objectiveUOM || ''}</p>
            </div>
            <div class="rating" style="background-color: var(--primary-color); color: white; padding: 5px 10px; border-radius: 20px; font-weight: bold;">
                ${objective.averageRating ? objective.averageRating.toFixed(1) : 'N/A'} <i class="fas fa-star" style="font-size: 0.8em;"></i>
            </div>
        </div>
        
        <h5 style="margin: 15px 0 10px 0; color: var(--secondary-color);">Feedback Comments</h5>
        ${objective.comments && objective.comments.length > 0 ? 
            objective.comments.map(comment => `
                <div class="comment" style="background-color: #f9f9f9; padding: 10px; border-radius: 6px; margin-bottom: 10px;">
                    <p style="margin: 0;">${comment.text || 'No comment provided'}</p>
                    <small style="display: block; margin-top: 5px; color: #777;">${comment.responderType || 'Anonymous'} - ${quarter}</small>
                </div>
            `).join('') : 
            '<div class="no-comments" style="text-align: center; padding: 15px; background-color: #f9f9f9; border-radius: 6px;"><p style="margin: 0; color: #666;">No feedback comments available for this objective.</p></div>'
        }
    </div>
    `;
}
// Function to generate skill feedback HTML
function generateSkillFeedbackHTML(skill) {
    return `
    <div class="skill-card" style="background-color: white; border-radius: 8px; padding: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
            <h4 style="margin: 0; color: var(--primary-color);">${skill.skillName || 'Unnamed Skill'}</h4>
            <span class="skill-type" style="background-color: ${skill.skillType === 'Soft' ? '#4CAF50' : '#2196F3'}; color: white; padding: 3px 8px; border-radius: 12px; font-size: 0.8em;">${skill.skillType || 'Skill'}</span>
        </div>
        
        <div class="rating-bar" style="height: 8px; background-color: #e0e0e0; border-radius: 4px; margin: 10px 0;">
            <div style="height: 100%; width: ${((skill.averageRating || 0)/5)*100}%; background-color: var(--secondary-color); border-radius: 4px;"></div>
        </div>
        
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <span style="font-weight: bold; color: var(--primary-color);">${skill.averageRating ? skill.averageRating.toFixed(1) : 'N/A'}/5.0</span>
            <span style="color: #777; font-size: 0.9em;">Based on ${skill.responseCount || 0} responses</span>
        </div>
    </div>
    `;
}

// Function to update individual answers section
function updateIndividualAnswers(individualAnswers, quarter) {
    const individualAnswersContainer = document.getElementById('individualAnswersContainer');
    
    if (!individualAnswersContainer) {
        console.error("Individual answers container not found.");
        return;
    }
    
    if (!individualAnswers || individualAnswers.length === 0) {
        individualAnswersContainer.innerHTML = `
        <div class="empty-state" style="text-align: center; padding: 30px; background-color: #f9f9f9; border-radius: 8px;">
            <i class="fas fa-inbox" style="font-size: 48px; color: #ccc; margin-bottom: 15px;"></i>
            <p>No individual feedback responses available yet for ${quarter}.</p>
        </div>`;
        return;
    }
    
    let answersHTML = '';
    
    individualAnswers.forEach((answer, index) => {
        answersHTML += `
        <div class="answer-card" style="background-color: white; border-radius: 8px; padding: 20px; margin-bottom: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
            <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 15px;">
                <div>
                    <h4 style="margin: 0; color: var(--primary-color);">Responder #${index + 1} (${answer.responderType || 'Peer'})</h4>
                    <p style="margin: 5px 0 0 0; color: #555; font-size: 0.9em;">Submitted on ${new Date(answer.submittedDate).toLocaleDateString()}</p>
                </div>
                <div class="response-status" style="background-color: #4CAF50; color: white; padding: 5px 10px; border-radius: 20px; font-size: 0.8em; font-weight: bold;">
                    Complete
                </div>
            </div>
            
            ${answer.objectiveAnswers && answer.objectiveAnswers.map(obj => `
                <div class="answer-group" style="margin-bottom: 20px; padding-bottom: 15px; border-bottom: 1px solid #eee;">
                    <h5 style="margin: 0 0 10px 0; color: var(--secondary-color);">${obj.objectiveName || 'Unnamed Objective'}</h5>
                    <div style="display: flex; align-items: center; margin-bottom: 10px;">
                        <div style="margin-right: 15px;">
                            <strong style="color: #555;">Rating:</strong>
                            <span style="font-weight: bold; color: var(--primary-color); margin-left: 5px;">${obj.rating || 'N/A'}/5.0</span>
                        </div>
                        <div class="star-display" style="color: #FFD700;">
                            ${generateStarRating(obj.rating || 0)}
                        </div>
                    </div>
                    <div>
                        <strong style="color: #555;">Comment:</strong>
                        <p style="margin: 5px 0 0 0;">${obj.comment || 'No comment provided'}</p>
                    </div>
                </div>
            `).join('')}
            
            ${answer.skillRatings && Object.keys(answer.skillRatings).length > 0 ? `
                <div class="skill-ratings" style="background-color: #f9f9f9; border-radius: 6px; padding: 15px;">
                    <h5 style="margin: 0 0 10px 0; color: var(--secondary-color);">Skills Assessment</h5>
                    <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 10px;">
                        ${Object.entries(answer.skillRatings).map(([skillName, rating]) => `
                            <div class="skill-rating" style="display: flex; justify-content: space-between;">
                                <span>${skillName}:</span>
                                <strong>${rating}/5</strong>
                            </div>
                        `).join('')}
                    </div>
                </div>
            ` : ''}
        </div>
        `;
    });
    
    individualAnswersContainer.innerHTML = answersHTML;
    
    // Set up filters
    setupFilters();
}

// Function to setup filters for individual answers
function setupFilters() {
    const responderFilter = document.getElementById('responderFilter');
    const questionFilter = document.getElementById('questionFilter');
    
    if (responderFilter && questionFilter) {
        responderFilter.addEventListener('change', filterAnswers);
        questionFilter.addEventListener('change', filterAnswers);
    }
}

// Function to filter individual answers
function filterAnswers() {
    const responderFilter = document.getElementById('responderFilter');
    const questionFilter = document.getElementById('questionFilter');
    
    if (!responderFilter || !questionFilter) return;
    
    const responderValue = responderFilter.value;
    const questionValue = questionFilter.value;
    
    const answerCards = document.querySelectorAll('.answer-card');
    
    answerCards.forEach(card => {
        let showCard = true;
        
        // Filter by responder type
        if (responderValue !== 'all') {
            const responderType = card.querySelector('h4').textContent.toLowerCase();
            if (!responderType.includes(responderValue.toLowerCase())) {
                showCard = false;
            }
        }
        
        // Filter by question/objective
        if (questionValue !== 'all' && showCard) {
            const questions = card.querySelectorAll('h5');
            let hasMatchingQuestion = false;
            
            questions.forEach(question => {
                const questionText = question.textContent.toLowerCase();
                if (questionText.includes(questionValue.toLowerCase())) {
                    hasMatchingQuestion = true;
                }
            });
            
            if (!hasMatchingQuestion) {
                showCard = false;
            }
        }
        
        // Show or hide the card
        card.style.display = showCard ? 'block' : 'none';
    });
}

// Function to generate star rating HTML
function generateStarRating(rating) {
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 >= 0.5;
    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
    
    let starsHTML = '';
    
    // Add full stars
    for (let i = 0; i < fullStars; i++) {
        starsHTML += '<i class="fas fa-star"></i> ';
    }
    
    // Add half star if needed
    if (hasHalfStar) {
        starsHTML += '<i class="fas fa-star-half-alt"></i> ';
    }
    
    // Add empty stars
    for (let i = 0; i < emptyStars; i++) {
        starsHTML += '<i class="far fa-star"></i> ';
    }
    
    return starsHTML.trim();
}

// Function to show feedback error
function showFeedbackError(message) {
    const containers = [
        document.getElementById('objectiveFeedbackContainer'),
        document.getElementById('skillsFeedbackContainer'),
        document.getElementById('individualAnswersContainer')
    ];
    
    containers.forEach(container => {
        if (container) {
            container.innerHTML = `
            <div class="error-state" style="text-align: center; padding: 30px; background-color: #fff8f8; border-radius: 8px; border: 1px solid #ffebee;">
                <i class="fas fa-exclamation-circle" style="font-size: 48px; color: #f44336; margin-bottom: 15px;"></i>
                <p>${message}</p>
            </div>`;
        }
    });
}

// Initialize the stepper and form states on page load
document.addEventListener("DOMContentLoaded", function() {
    console.log("Initializing performance tracker stepper system...");
    
    // Initialize data from viewState
    initializeFromViewState();
    
    // Update stepper accessibility
    updateStepperAccessibility();
    
    // Set up event handlers for stepper buttons
    setupStepperEvents();
    
    // Initialize character counters
    updateAllCharCounters();
    
    // Attach form submission listeners
    attachFormListeners();
    
    console.log("Performance tracker stepper system initialized.");
});

// Function to set up event handlers for the stepper
function setupStepperEvents() {
    // Objective setting button
    const objectivesButton = document.getElementById("objectivesButton");
    if (objectivesButton) {
        objectivesButton.addEventListener("click", handleObjectiveClick);
    }
    
    // Feedback buttons
    for (let i = 1; i <= 4; i++) {
        const feedbackButton = document.getElementById(`feedbackButtonQ${i}`);
        if (feedbackButton) {
            feedbackButton.addEventListener("click", function() {
                const quarter = this.getAttribute('data-quarter');
                showFeedbackForm(quarter);
            });
        }
    }
    
    // IDP buttons
    const midYearIDPButton = document.getElementById("midYearIDP");
    if (midYearIDPButton) {
        midYearIDPButton.addEventListener("click", navigateToMidYearIDP);
    }
    
    const finalYearIDPButton = document.getElementById("finalYearIDP");
    if (finalYearIDPButton) {
        finalYearIDPButton.addEventListener("click", navigateToFinalYearIDP);
    }
    
    // Feedback view toggle buttons
    const viewQuestionnaireBtn = document.getElementById('viewQuestionnaireBtn');
    const viewFeedbackBtn = document.getElementById('viewFeedbackBtn');
    
    if (viewQuestionnaireBtn && viewFeedbackBtn) {
        viewQuestionnaireBtn.addEventListener('click', function() {
            toggleFeedbackView('questionnaire');
        });
        
        viewFeedbackBtn.addEventListener('click', function() {
            toggleFeedbackView('feedback');
        });
    }
    
    // Year select
    const yearSelect = document.getElementById('yearSelect');
    if (yearSelect) {
        yearSelect.addEventListener('change', fetchYearData);
    }
    
    // Add row button
    const addRowBtn = document.getElementById('addRowBtn');
    if (addRowBtn) {
        addRowBtn.addEventListener('click', addRow);
    }
    
    // Tabs functionality in the feedback view
    const summaryTab = document.getElementById('summaryTab');
    const answersTab = document.getElementById('answersTab');
    const summaryContent = document.getElementById('summaryContent');
    const answersContent = document.getElementById('answersContent');
    
    if (summaryTab && answersTab && summaryContent && answersContent) {
        summaryTab.addEventListener('click', function() {
            // Show summary, hide answers
            summaryContent.style.display = 'block';
            answersContent.style.display = 'none';
            
            // Update tab styles
            summaryTab.classList.add('active');
            summaryTab.style.backgroundColor = 'var(--primary-color)';
            summaryTab.style.color = 'white';
            answersTab.classList.remove('active');
            answersTab.style.backgroundColor = '#f1f1f1';
            answersTab.style.color = '#333';
        });
        
        answersTab.addEventListener('click', function() {
            // Show answers, hide summary
            answersContent.style.display = 'block';
            summaryContent.style.display = 'none';
            
            // Update tab styles
            answersTab.classList.add('active');
            answersTab.style.backgroundColor = 'var(--primary-color)';
            answersTab.style.color = 'white';
            summaryTab.classList.remove('active');
            summaryTab.style.backgroundColor = '#f1f1f1';
            summaryTab.style.color = '#333';
        });
    }
}

// Function to attach form submission listeners
function attachFormListeners() {
    // Objective settings form
    const objectiveSettingsForm = document.getElementById('objectiveSettingsForm');
    if (objectiveSettingsForm) {
        objectiveSettingsForm.addEventListener('submit', function(event) {
            event.preventDefault();
            saveObjectives(event);
        });
    }
    
    // Feedback form
    const feedbackForm = document.getElementById('feedbackForm');
    if (feedbackForm) {
        feedbackForm.addEventListener('submit', function(event) {
            event.preventDefault();
            save360DegreeFeedback();
        });
    }
    
    // Mid-Year IDP form
    const midYearIDPForm = document.getElementById('midYearIDPFormDetails');
    if (midYearIDPForm) {
        midYearIDPForm.addEventListener('submit', function(event) {
            event.preventDefault();
            
            // Check if this is Mid-Year or Final-Year IDP
            const formTitle = document.querySelector("#midYearIDPForm h2");
            if (formTitle && formTitle.textContent.includes("Final-Year")) {
                submitFinalYearIDPForm(event);
            } else {
                submitMidYearIDPForm(event);
            }
        });
    }
    
    // Text area input handlers for character counting and progress tracking
    const midYearTextareas = document.querySelectorAll('#midYearIDPForm textarea');
    midYearTextareas.forEach(textarea => {
        textarea.addEventListener('input', function() {
            const counterId = textarea.id + 'Count';
            const counterElement = document.getElementById(counterId);
            if (counterElement) {
                counterElement.textContent = textarea.value.length;
            }
            
            // Update progress based on form type
            const formTitle = document.querySelector("#midYearIDPForm h2");
            if (formTitle && formTitle.textContent.includes("Final-Year")) {
                updateFinalIDPProgress();
            } else {
                updateIDPProgress();
            }
        });
    });
}

// Sidebar functionality
document.querySelectorAll('.sidebar ul li a').forEach(link => {
    link.addEventListener('click', function() {
        document.querySelectorAll('.sidebar ul li a').forEach(link => link.classList.remove('active'));
        this.classList.add('active');
    });
});

document.querySelectorAll('.collapsible-header').forEach(header => {
    header.addEventListener('click', function() {
        var content = this.nextElementSibling;
        if (content.style.display === 'block') {
            content.style.display = 'none';
        } else {
            // Hide all other collapsible contents
            document.querySelectorAll('.collapsible-content').forEach(item => {
                if (item !== content) {
                    item.style.display = 'none';
                }
            });
            content.style.display = 'block';
        }
    });
});
            </script>
        </div>
    </div>
</body>
</html>