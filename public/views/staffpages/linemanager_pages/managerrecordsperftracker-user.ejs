<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Profile & Performance Dashboard</title>
    <link rel="stylesheet" href="/css/sidebar.css">
    <link rel="stylesheet" href="/css/hr_pages.css">
    <link rel="stylesheet" href="/css/recordsandperformancetracker.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
/* Enhanced Styling for Left-Side Training Section */
.suggested-trainings-fieldset {
    border: 2px solid var(--secondary-color);
    background: linear-gradient(135deg, rgba(5, 156, 164, 0.05) 0%, rgba(18, 74, 92, 0.05) 100%);
}

.suggested-trainings-fieldset legend {
    background-color: var(--secondary-color);
    color: white;
    padding: 8px 20px;
    border-radius: var(--border-radius);
    font-weight: 600;
    font-size: 16px;
}

/* Training Dropdown Styling */
#suggestedTrainings:hover {
    border-color: var(--secondary-color);
    box-shadow: 0 2px 8px rgba(5, 156, 164, 0.3);
}

#suggestedTrainings:focus {
    outline: none;
    border-color: var(--secondary-color);
    box-shadow: 0 0 0 3px rgba(5, 156, 164, 0.2);
}

#suggestedTrainings {
    white-space: normal !important;
    word-wrap: break-word;
    overflow: hidden;
    text-overflow: ellipsis;
}

#suggestedTrainings option {
    padding: 8px 12px;
    line-height: 1.4;
    white-space: normal;
    word-wrap: break-word;
    background-color: white;
    color: var(--primary-color);
    border-bottom: 1px solid #f0f0f0;
}

#suggestedTrainings option:hover {
    background-color: rgba(5, 156, 164, 0.1);
}

#suggestedTrainings option:checked,
#suggestedTrainings option:selected {
    background-color: var(--secondary-color);
    color: white;
}

/* Training Details Panel Styles */
#trainingDetailsPanel {
    animation: fadeInUp 0.3s ease-out;
}

@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* NEW: Priority-based Training Detail Items */
.training-detail-item {
    position: relative;
    overflow: hidden;
    transition: all 0.3s ease;
}

.training-detail-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.6), transparent);
    transition: left 0.5s;
}

.training-detail-item:hover::before {
    left: 100%;
}

/* NEW: Priority Badge Styles */
.training-priority-critical {
    border-left: 4px solid #dc3545 !important;
    background: linear-gradient(135deg, rgba(220, 53, 69, 0.05), rgba(220, 53, 69, 0.02));
}

.training-priority-recommended {
    border-left: 4px solid #ffc107 !important;
    background: linear-gradient(135deg, rgba(255, 193, 7, 0.05), rgba(255, 193, 7, 0.02));
}

.training-priority-available {
    border-left: 4px solid #28a745 !important;
    background: linear-gradient(135deg, rgba(40, 167, 69, 0.05), rgba(40, 167, 69, 0.02));
}

.training-detail-item span {
    transition: var(--transition);
}

.training-detail-item span:hover {
    transform: scale(1.05);
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

/* Custom scrollbar for details panel */
#trainingDetailsPanel::-webkit-scrollbar {
    width: 8px;
}

#trainingDetailsPanel::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
}

#trainingDetailsPanel::-webkit-scrollbar-thumb {
    background: var(--secondary-color);
    border-radius: 4px;
}

#trainingDetailsPanel::-webkit-scrollbar-thumb:hover {
    background: var(--primary-color);
}



/* NEW: Top 5 Development Areas Styling */
.development-areas-list {
    display: flex;
    flex-direction: column;
    gap: 8px;
    margin-top: 10px;
}

.development-area-item {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 8px 12px;
    background-color: rgba(255, 255, 255, 0.9);
    border-radius: 6px;
    border-left: 3px solid #ffc107;
    transition: all 0.3s ease;
    font-size: 12px;
}

.development-area-item:hover {
    transform: translateX(5px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.development-area-item.critical {
    border-left-color: #dc3545;
    background-color: rgba(220, 53, 69, 0.05);
}

.development-area-item.needs-improvement {
    border-left-color: #ffc107;
    background-color: rgba(255, 193, 7, 0.05);
}

.development-area-rank {
    font-weight: bold;
    color: var(--primary-color);
    min-width: 20px;
    text-align: center;
}

.development-area-name {
    flex: 1;
    font-weight: 500;
    color: var(--primary-color);
}

.development-area-type {
    font-size: 10px;
    color: #666;
    background-color: rgba(18, 74, 92, 0.1);
    padding: 2px 6px;
    border-radius: 10px;
}

.development-area-rating {
    font-size: 11px;
    font-weight: bold;
    padding: 2px 6px;
    border-radius: 10px;
    background-color: rgba(255, 255, 255, 0.8);
}

.development-area-rating.critical {
    color: #dc3545;
    background-color: rgba(220, 53, 69, 0.1);
}

.development-area-rating.needs-improvement {
    color: #ffc107;
    background-color: rgba(255, 193, 7, 0.1);
}


/* Loading state for development areas */
.development-areas-loading {
    text-align: center;
    padding: 20px;
    color: #666;
    font-style: italic;
}

.development-areas-loading::after {
    content: '';
    display: inline-block;
    width: 16px;
    height: 16px;
    border: 2px solid #f3f3f3;
    border-top: 2px solid var(--secondary-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-left: 8px;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Responsive adjustments for training dropdown */
@media (max-width: 768px) {
    #trainingDetailsPanel {
        position: fixed;
        top: 50%;
        left: 10px;
        right: 10px;
        transform: translateY(-50%);
        max-height: 70vh;
        z-index: 9999;
    }
    
    #trainingDetailsList {
        padding: 10px;
    }
    
    .training-detail-item {
        padding: 12px;
        margin-bottom: 10px;
    }
    
    #suggestedTrainings {
        font-size: 12px;
    }
}

/* Loading state for training details */
.training-details-loading {
    text-align: center;
    padding: 20px;
    color: #666;
}

.training-details-loading::after {
    content: '';
    display: inline-block;
    width: 20px;
    height: 20px;
    border: 2px solid #f3f3f3;
    border-top: 2px solid var(--secondary-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-left: 10px;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Enhanced training selection feedback */
#suggestedTrainings.training-selected {
    background-color: rgba(5, 156, 164, 0.1);
    border-color: var(--secondary-color);
    box-shadow: 0 0 0 2px rgba(5, 156, 164, 0.3);
}

/* NEW: Priority indicators in select options */
#suggestedTrainings option[data-priority="critical"] {
    background-color: rgba(220, 53, 69, 0.1);
    color: #721c24;
}

#suggestedTrainings option[data-priority="recommended"] {
    background-color: rgba(255, 193, 7, 0.1);
    color: #856404;
}

#suggestedTrainings option[data-priority="available"] {
    background-color: rgba(40, 167, 69, 0.1);
    color: #155724;
}

/* Training tooltip hover effect */
.training-tooltip:hover #trainingTooltipText {
    visibility: visible;
    opacity: 1;
}

.training-tooltip:hover i {
    background-color: var(--secondary-color);
    color: white;
    transform: scale(1.1);
}

/* Training selection animation */
@keyframes trainingSelected {
    0% { 
        background-color: white; 
        transform: scale(1);
    }
    50% { 
        background-color: rgba(76, 175, 80, 0.2); 
        transform: scale(1.02);
    }
    100% { 
        background-color: rgba(5, 156, 164, 0.1); 
        transform: scale(1);
    }
}

/* Selected Training Display Animation */
#selectedTrainingDisplay {
    transition: all 0.3s ease-in-out;
}

#selectedTrainingDisplay.show {
    display: block !important;
    animation: fadeInUp 0.5s ease-out;
}

/* Submit Button Enhanced Styling */
#submitMidYearIDP:hover {
    background-color: var(--secondary-color);
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(18, 74, 92, 0.4);
}

#submitMidYearIDP:active {
    transform: translateY(0);
    box-shadow: 0 2px 4px rgba(18, 74, 92, 0.3);
}

#submitMidYearIDP:disabled {
    background-color: #ccc;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
}

/* Responsive Design */
@media (max-width: 768px) {
    .training-selection-container {
        padding: 15px;
    }
    
    .training-dropdown-container > div {
        flex-direction: column;
        align-items: stretch;
        gap: 8px;
    }
    
    #trainingTooltipText {
        width: 280px;
        right: -50px;
    }
    
    #submitMidYearIDP {
        width: 100%;
        min-width: auto;
    }
    
    .submit-button-container {
        text-align: center;
    }
    
    .development-areas-list {
        gap: 6px;
    }
    
    .development-area-item {
        padding: 6px 10px;
        font-size: 11px;
    }
    
    .development-area-name {
        font-size: 11px;
    }
    
    .development-area-type {
        font-size: 9px;
    }
}

/* Training fieldset specific enhancements */
.suggested-trainings-fieldset .form-group {
    margin-bottom: 0;
}

/* Smooth transitions for all training elements */
.training-selection-container * {
    transition: var(--transition);
}

/* NEW: Empty state for development areas */
.development-areas-empty {
    text-align: center;
    padding: 20px;
    color: #28a745;
    font-style: italic;
    background-color: rgba(40, 167, 69, 0.05);
    border-radius: 6px;
    border: 1px dashed #28a745;
}

.development-areas-empty i {
    font-size: 24px;
    margin-bottom: 10px;
    display: block;
}

/* NEW: Priority legend */
.priority-legend {
    display: flex;
    gap: 15px;
    margin-top: 10px;
    font-size: 11px;
}

.priority-legend-item {
    display: flex;
    align-items: center;
    gap: 5px;
}

.priority-indicator {
    width: 12px;
    height: 12px;
    border-radius: 50%;
}

.priority-indicator.critical {
    background-color: #dc3545;
}

.priority-indicator.recommended {
    background-color: #ffc107;
}

.priority-indicator.available {
    background-color: #28a745;
}
        /* IDP Form Styles */
.idp-form fieldset {
    border: 1px solid #ddd;
    border-radius: var(--border-radius);
    padding: 20px;
    margin-bottom: 25px;
    background-color: #f9f9f9;
    transition: var(--transition);
}

.idp-form fieldset:hover {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.idp-form legend {
    color: var(--primary-color);
    font-weight: 600;
    padding: 0 15px;
    font-size: 1.1rem;
}

.idp-form label {
    display: block;
    margin-top: 15px;
    margin-bottom: 5px;
    color: var(--primary-color);
}

.idp-form textarea {
    width: 100%;
    padding: 12px;
    border: 1px solid #ddd;
    border-radius: var(--border-radius);
    resize: vertical;
    min-height: 100px;
    font-family: inherit;
    transition: var(--transition);
}

.idp-form textarea:focus {
    border-color: var(--secondary-color);
    box-shadow: 0 0 0 2px rgba(5, 156, 164, 0.2);
    outline: none;
}

.idp-form textarea.error {
    border-color: var(--danger-color);
    background-color: rgba(244, 67, 54, 0.05);
}

.idp-form .submit-button-container {
    margin-top: 30px;
    text-align: right;
}

.idp-form .save-btn {
    background-color: var(--primary-color);
    color: white;
    border: none;
    padding: 12px 25px;
    border-radius: var(--border-radius);
    cursor: pointer;
    font-weight: 500;
    transition: var(--transition);
    display: inline-flex;
    align-items: center;
    gap: 8px;
}

.idp-form .save-btn:hover {
    background-color: var(--secondary-color);
    transform: translateY(-2px);
}

.idp-form .save-btn:disabled {
    background-color: #ccc;
    cursor: not-allowed;
}

/* View-only mode styles */
.view-only-mode fieldset {
    background-color: #f5f7fa;
    border: 1px solid #e1e5eb;
}

.view-only-mode textarea {
    background-color: #f9f9f9;
    border: 1px solid #e1e5eb;
    pointer-events: none;
    color: #555;
}

.view-only-mode .save-btn {
    display: none;
}

/* Last updated info for view-only mode */
.last-updated-info {
    margin-top: 20px;
    font-style: italic;
    color: #777;
    text-align: right;
    font-size: 0.9em;
}

/* Progress indicator for IDP forms */
.idp-progress {
    margin-bottom: 20px;
    padding: 15px;
    background-color: #f5f7fa;
    border-radius: var(--border-radius);
    border-left: 4px solid var(--primary-color);
}

.idp-progress h3 {
    margin-top: 0;
    font-size: 1.1rem;
    color: var(--primary-color);
}

.progress-bar-container {
    width: 100%;
    height: 10px;
    background-color: #e0e0e0;
    border-radius: 5px;
    margin-top: 10px;
}

.progress-bar {
    height: 100%;
    background-color: var(--secondary-color);
    border-radius: 5px;
    transition: width 0.5s ease;
}

/* Tooltip styles for required fields */
.tooltip {
    position: relative;
    display: inline-block;
    margin-left: 5px;
    cursor: help;
}

.tooltip .tooltip-icon {
    color: var(--primary-color);
    font-size: 0.8em;
}

.tooltip .tooltip-text {
    visibility: hidden;
    width: 200px;
    background-color: #333;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px;
    position: absolute;
    z-index: 1;
    bottom: 125%;
    left: 50%;
    margin-left: -100px;
    opacity: 0;
    transition: opacity 0.3s;
}

.tooltip:hover .tooltip-text {
    visibility: visible;
    opacity: 1;
}
        /* New modern styling */
        :root {
            --primary-color: #124A5C;
            --secondary-color: #059ca4;
            --accent-color: #f4a261;
            --light-color: #f9f9f9;
            --dark-color: #2a2a2a;
            --success-color: #4CAF50;
            --warning-color: #ff9800;
            --danger-color: #f44336;
            --border-radius: 8px;
            --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f5f7fa;
            margin: 0;
            padding: 0;
        }

        .main-content {
            padding: 20px;
            margin-left: 250px; /* Adjust based on your sidebar width */
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        /* Card styling */
        .section {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 20px;
            margin-bottom: 25px;
            transition: var(--transition);
        }

        .section:hover {
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
        }

        /* Headers */
        h2 {
            color: var(--primary-color);
            border-bottom: 2px solid var(--secondary-color);
            padding-bottom: 10px;
            margin-bottom: 20px;
            font-weight: 600;
            font-size: 1.4rem;
        }

        /* Profile section */
        .profile-container {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            background: linear-gradient(to right, rgba(18, 74, 92, 0.1), rgba(5, 156, 164, 0.05));
            padding: 15px;
            border-radius: var(--border-radius);
        }

        .profile-pic {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            object-fit: cover;
            border: 3px solid white;
            box-shadow: var(--box-shadow);
            margin-right: 20px;
        }

        .profile-info {
            flex: 1;
        }

        .profile-info h3 {
            margin: 0;
            font-size: 1.6rem;
            color: var(--primary-color);
        }

        .profile-info p {
            margin: 5px 0;
            color: #555;
        }

        /* Columns layout */
        .columns {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }

        @media (max-width: 992px) {
            .columns {
                grid-template-columns: 1fr 1fr;
            }
        }

        @media (max-width: 768px) {
            .columns {
                grid-template-columns: 1fr;
            }
            
            .main-content {
                margin-left: 0;
                padding: 15px;
            }
        }

        /* Info items */
        .info-item {
            margin-bottom: 12px;
            display: flex;
            align-items: baseline;
        }

        .info-item strong {
            min-width: 140px;
            display: inline-block;
            color: var(--primary-color);
        }

        /* Milestone styling */
        .milestone-container {
            margin-top: 15px;
            position: relative;
            padding-left: 30px;
            border-left: 2px solid var(--primary-color);
        }

        .milestone {
            position: relative;
            margin-bottom: 25px;
            padding-left: 15px;
        }

        .milestone:before {
            content: '';
            position: absolute;
            left: -16px;
            top: 0;
            width: 30px;
            height: 30px;
            background-color: var(--primary-color);
            border-radius: 50%;
            box-shadow: 0 0 0 5px rgba(18, 74, 92, 0.2);
        }

        .milestone-label {
            padding: 15px;
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            border-left: 4px solid var(--primary-color);
        }

        .milestone-label h4 {
            margin: 0 0 8px 0;
            font-size: 1.1em;
            color: var(--primary-color);
        }

        .milestone-label p {
            margin: 0;
            font-size: 1em;
            color: #333;
        }

        .milestone-label small {
            display: block;
            margin-top: 8px;
            color: #777;
            font-style: italic;
        }

        /* Cards for certifications, degrees, experiences */
        .card-item {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 15px;
            margin-bottom: 15px;
            border-left: 4px solid var(--primary-color);
            transition: var(--transition);
        }

        .degree-item:hover, .experience-item:hover, .certification-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }

        .degree-item h4, .experience-item h4, .certification-item h4 {
            margin: 0 0 8px 0;
            color: var(--primary-color);
            font-size: 1.1rem;
        }

        .degree-item p, .experience-item p, .certification-item p {
            margin: 0;
            color: #555;
        }

        /* Table styling */
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
            background-color: white;
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: var(--box-shadow);
        }

        thead {
            background-color: var(--primary-color);
            color: white;
        }

        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        tbody tr:hover {
            background-color: rgba(18, 74, 92, 0.05);
        }

        /* Stepper styling */
        .stepper {
            margin-top: 30px;
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 20px;
        }

        .stepper-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        .stepper-container {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            justify-content: space-between;
        }

        .step {
            flex: 1;
            min-width: 200px;
            background-color: #f9f9f9;
            border-radius: var(--border-radius);
            padding: 15px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            display: flex;
            flex-direction: column;
            align-items: center;
            transition: var(--transition);
            cursor: pointer;
        }

        .step:hover {
            background-color: rgba(18, 74, 92, 0.1);
        }

        .step.accessible {
            background-color: rgba(76, 175, 80, 0.1);
            border: 1px solid rgba(76, 175, 80, 0.3);
        }

        .step.disabled {
            background-color: #f1f1f1;
            color: #999;
            cursor: not-allowed;
            opacity: 0.7;
        }

        .step-icon {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background-color: var(--primary-color);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 10px;
            font-size: 1.5rem;
        }

        .step-label {
            text-align: center;
            font-weight: 500;
        }

        .view-only .step-icon {
            background-color: var(--secondary-color);
        }

        /* Form styling */
        input[type="text"],
        input[type="number"],
        input[type="date"],
        select,
        textarea {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
            font-family: inherit;
            font-size: 1rem;
        }

        button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: var(--transition);
        }

        button:hover {
            background-color: var(--secondary-color);
        }

        .add-btn {
            background-color: var(--success-color);
        }

        .save-btn {
            background-color: var(--primary-color);
        }

        .cancel-btn {
            background-color: var(--danger-color);
        }

        /* Animation classes */
        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }

        .fade-out {
            animation: fadeOut 0.5s ease-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes fadeOut {
            from { opacity: 1; transform: translateY(0); }
            to { opacity: 0; transform: translateY(10px); }
        }
        
        /* Custom styling for forms */
        fieldset {
            border: 1px solid #ddd;
            border-radius: var(--border-radius);
            padding: 15px;
            margin-bottom: 20px;
        }
        
        legend {
            color: var(--primary-color);
            font-weight: 600;
            padding: 0 10px;
        }
        
        textarea {
            min-height: 80px;
            resize: vertical;
        }
        
        /* Custom checkbox styling */
        input[type="checkbox"] {
            width: 18px;
            height: 18px;
            margin-right: 8px;
            vertical-align: middle;
        }

        /* Header grid */
        .header-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-template-rows: repeat(2, auto);
            gap: 10px;
            text-align: left;
            font-size: 1em;
            margin-bottom: 20px;
            padding: 15px;
            background-color: #f9f9f9;
            border-radius: var(--border-radius);
        }

        .header-grid div {
            padding: 5px;
            font-weight: normal;
        }

        .header-grid strong {
            font-weight: bold;
            color: var(--primary-color);
        }


      /* IDP Form Styles */
    .idp-form fieldset {
        border: 1px solid #ddd;
        border-radius: var(--border-radius);
        padding: 20px;
        margin-bottom: 25px;
        background-color: #f9f9f9;
        transition: var(--transition);
    }
    
    .idp-form fieldset:hover {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    
    .idp-form legend {
        color: var(--primary-color);
        font-weight: 600;
        padding: 0 15px;
        font-size: 1.1rem;
    }
    
    .idp-form .form-group {
        margin-bottom: 20px;
    }
    
    .idp-form label {
        display: block;
        margin-bottom: 8px;
        color: var(--primary-color);
        font-weight: 500;
    }
    
    .idp-form textarea {
        width: 100%;
        padding: 12px;
        border: 1px solid #ddd;
        border-radius: var(--border-radius);
        resize: vertical;
        min-height: 100px;
        font-family: inherit;
        transition: var(--transition);
    }
    
    .idp-form textarea:focus {
        border-color: var(--secondary-color);
        box-shadow: 0 0 0 2px rgba(5, 156, 164, 0.2);
        outline: none;
    }
    
    .idp-form textarea.error {
        border-color: var(--danger-color);
        background-color: rgba(244, 67, 54, 0.05);
    }
    
    .idp-form .submit-button-container {
        margin-top: 30px;
        text-align: right;
    }
    
    .idp-form .save-btn {
        background-color: var(--primary-color);
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: var(--border-radius);
        cursor: pointer;
        font-weight: 500;
        transition: var(--transition);
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }
    
    .idp-form .save-btn:hover {
        background-color: var(--secondary-color);
        transform: translateY(-2px);
    }
    
    .idp-form .save-btn:disabled {
        background-color: #ccc;
        cursor: not-allowed;
    }
    
    /* View-only mode styles */
    .view-only-mode fieldset {
        background-color: #f5f7fa;
        border: 1px solid #e1e5eb;
    }
    
    .view-only-mode textarea {
        background-color: #f9f9f9;
        border: 1px solid #e1e5eb;
        pointer-events: none;
        color: #555;
    }
    
    .view-only-mode .save-btn {
        display: none;
    }
    
    /* Last updated info for view-only mode */
    .last-updated-info {
        margin-top: 20px;
        font-style: italic;
        color: #777;
        text-align: right;
        font-size: 0.9em;
    }
    
    /* Progress indicator for IDP forms */
    .idp-progress {
        margin-bottom: 20px;
        padding: 15px;
        background-color: #f5f7fa;
        border-radius: var(--border-radius);
        border-left: 4px solid var(--primary-color);
    }
    
    .idp-progress h3 {
        margin-top: 0;
        font-size: 1.1rem;
        color: var(--primary-color);
    }
    
    .progress-bar-container {
        width: 100%;
        height: 10px;
        background-color: #e0e0e0;
        border-radius: 5px;
        margin-top: 10px;
    }
    
    .progress-bar {
        height: 100%;
        background-color: var(--secondary-color);
        border-radius: 5px;
        transition: width 0.5s ease;
    }
    
    /* Character counter styles */
    .char-counter {
        text-align: right;
        font-size: 0.8em;
        color: #777;
        margin-top: 5px;
    }
    
    /* Tooltip styles for required fields */
    .tooltip {
        position: relative;
        display: inline-block;
        margin-left: 5px;
        cursor: help;
    }
    
    .tooltip .tooltip-icon {
        color: var(--primary-color);
        font-size: 0.8em;
    }
    
    .tooltip .tooltip-text {
        visibility: hidden;
        width: 250px;
        background-color: #333;
        color: #fff;
        text-align: center;
        border-radius: 6px;
        padding: 8px 12px;
        position: absolute;
        z-index: 1;
        bottom: 125%;
        left: 50%;
        margin-left: -125px;
        opacity: 0;
        transition: opacity 0.3s;
        font-size: 0.85em;
        line-height: 1.4;
    }
    
    .tooltip:hover .tooltip-text {
        visibility: visible;
        opacity: 1;
    }
    
    /* Leadership tags styling */
    .leadership-tag {
        display: inline-block;
        background-color: rgba(5, 156, 164, 0.1);
        color: var(--primary-color);
        padding: 4px 10px;
        border-radius: 15px;
        font-size: 0.85em;
        transition: var(--transition);
        cursor: pointer;
        border: 1px solid rgba(5, 156, 164, 0.2);
    }
    
    .leadership-tag:hover {
        background-color: rgba(5, 156, 164, 0.2);
        transform: translateY(-2px);
    }
    
    /* Mobility options styling */
    .mobility-options {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
    }
    
    .mobility-option {
        display: flex;
        align-items: center;
        margin-right: 10px;
    }
    
    .mobility-option input[type="checkbox"] {
        margin-right: 5px;
        width: 16px;
        height: 16px;
    }
    
    .mobility-option label {
        display: inline;
        margin: 0;
        font-weight: normal;
        color: #333;
    }

    /* IDP Aggregated */
/* Circular Feedback Display Styles */
.feedback-insights-container {
    margin-bottom: 20px;
}

.circular-feedback-display {
    display: flex;
    flex-wrap: wrap;
    gap: 12px;
    min-height: 60px;
    padding: 15px;
    background-color: rgba(255, 255, 255, 0.8);
    border-radius: 8px;
    border: 1px dashed #ddd;
}

.circular-feedback-item {
    display: inline-flex;
    align-items: center;
    background: linear-gradient(135deg, #f8f9fa, #e9ecef);
    border: 2px solid #dee2e6;
    border-radius: 25px;
    padding: 8px 16px;
    margin: 4px;
    font-size: 13px;
    font-weight: 500;
    color: #495057;
    transition: all 0.3s ease;
    cursor: pointer;
    position: relative;
    overflow: hidden;
}

.circular-feedback-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    border-color: var(--primary-color);
}

.circular-feedback-item.strength {
    background: linear-gradient(135deg, #d4edda, #c3e6cb);
    border-color: #28a745;
    color: #155724;
}

.circular-feedback-item.average {
    background: linear-gradient(135deg, #fff3cd, #ffeaa7);
    border-color: #ffc107;
    color: #856404;
}

.circular-feedback-item.below-average {
    background: linear-gradient(135deg, #f8d7da, #f5c6cb);
    border-color: #dc3545;
    color: #721c24;
}

.circular-feedback-item .rating-badge {
    display: inline-flex;
    align-items: center;
    margin-left: 8px;
    padding: 2px 6px;
    background-color: rgba(255, 255, 255, 0.9);
    border-radius: 12px;
    font-size: 11px;
    font-weight: bold;
}

.circular-feedback-item.strength .rating-badge {
    background-color: rgba(40, 167, 69, 0.1);
    color: #28a745;
}

.circular-feedback-item.average .rating-badge {
    background-color: rgba(255, 193, 7, 0.1);
    color: #856404;
}

.circular-feedback-item.below-average .rating-badge {
    background-color: rgba(220, 53, 69, 0.1);
    color: #dc3545;
}

.circular-feedback-item .item-type {
    font-size: 10px;
    opacity: 0.8;
    margin-right: 6px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.circular-feedback-item .star-display {
    margin-left: 4px;
    font-size: 10px;
    color: #ffc107;
}

.no-feedback-message {
    text-align: center;
    padding: 20px;
    color: #6c757d;
    font-style: italic;
    background-color: #f8f9fa;
    border-radius: 8px;
    border: 1px dashed #dee2e6;
}

.loading-placeholder {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 20px;
    color: #6c757d;
    background-color: #f8f9fa;
    border-radius: 8px;
    border: 1px dashed #dee2e6;
}

.loading-placeholder i {
    margin-right: 8px;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Responsive design for circular items */
@media (max-width: 768px) {
    .circular-feedback-display {
        gap: 8px;
        padding: 10px;
    }
    
    .circular-feedback-item {
        font-size: 12px;
        padding: 6px 12px;
        margin: 2px;
    }
    
    .circular-feedback-item .rating-badge {
        font-size: 10px;
        padding: 1px 4px;
        margin-left: 6px;
    }
}

/* Animation for items appearing */
.circular-feedback-item {
    animation: fadeInUp 0.5s ease-out forwards;
    opacity: 0;
    transform: translateY(20px);
}

.circular-feedback-item:nth-child(1) { animation-delay: 0.1s; }
.circular-feedback-item:nth-child(2) { animation-delay: 0.2s; }
.circular-feedback-item:nth-child(3) { animation-delay: 0.3s; }
.circular-feedback-item:nth-child(4) { animation-delay: 0.4s; }
.circular-feedback-item:nth-child(5) { animation-delay: 0.5s; }
.circular-feedback-item:nth-child(6) { animation-delay: 0.6s; }
.circular-feedback-item:nth-child(7) { animation-delay: 0.7s; }
.circular-feedback-item:nth-child(8) { animation-delay: 0.8s; }

@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Tooltip for circular items */
.circular-feedback-item[title]:hover::after {
    content: attr(title);
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    background-color: #333;
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 11px;
    white-space: nowrap;
    z-index: 1000;
    margin-bottom: 5px;
}

/* Enhanced insights header */
.insights-header h4 {
    display: flex;
    align-items: center;
    gap: 8px;
}

.insights-header p {
    margin: 5px 0 0 0;
    font-size: 12px;
    color: #666;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Responsive design for circular items */
@media (max-width: 768px) {
    .circular-feedback-display {
        gap: 8px;
        padding: 10px;
    }
    
    .circular-feedback-item {
        font-size: 12px;
        padding: 6px 12px;
        margin: 2px;
    }
    
    .circular-feedback-item .rating-badge {
        font-size: 10px;
        padding: 1px 4px;
        margin-left: 6px;
    }
}

/* Animation for items appearing */
.circular-feedback-item {
    animation: fadeInUp 0.5s ease-out forwards;
    opacity: 0;
    transform: translateY(20px);
}

.circular-feedback-item:nth-child(1) { animation-delay: 0.1s; }
.circular-feedback-item:nth-child(2) { animation-delay: 0.2s; }
.circular-feedback-item:nth-child(3) { animation-delay: 0.3s; }
.circular-feedback-item:nth-child(4) { animation-delay: 0.4s; }
.circular-feedback-item:nth-child(5) { animation-delay: 0.5s; }
.circular-feedback-item:nth-child(6) { animation-delay: 0.6s; }
.circular-feedback-item:nth-child(7) { animation-delay: 0.7s; }
.circular-feedback-item:nth-child(8) { animation-delay: 0.8s; }

@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Tooltip for circular items */
.circular-feedback-item[title]:hover::after {
    content: attr(title);
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    background-color: #333;
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 11px;
    white-space: nowrap;
    z-index: 1000;
    margin-bottom: 5px;
}

/* Enhanced insights header */
.insights-header h4 {
    display: flex;
    align-items: center;
    gap: 8px;
}

.insights-header p {
    margin: 5px 0 0 0;
    font-size: 12px;
    color: #666;
}

    
    /* Mobile responsiveness */
    @media (max-width: 768px) {
        .idp-form fieldset {
            padding: 15px;
        }
        
        .mobility-options {
            flex-direction: column;
            gap: 8px;
        }
        
        .development-model-guide > div {
            flex-direction: column;
        }
        
        .idp-form .save-btn {
            width: 100%;
            justify-content: center;
        }
    }


    /* Individual 360 Questionnaire Copies */
.filter-bar select:focus {
    outline: none;
    border-color: var(--secondary-color);
    box-shadow: 0 0 0 2px rgba(5, 156, 164, 0.2);
}

.filter-bar button:hover {
    background-color: #5a6268;
    transform: translateY(-1px);
}

#filterResultCount {
    margin: 10px 0;
    padding: 10px;
    background-color: #e3f2fd;
    border-radius: 4px;
    font-size: 14px;
    color: #1976d2;
    border-left: 4px solid #2196F3;
}

/* Loading states for feedback sections */
.feedback-loading {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 40px;
    background-color: #f9f9f9;
    border-radius: 8px;
    color: #666;
}

.feedback-loading i {
    margin-right: 10px;
    animation: spin 1s linear infinite;
}

/* Enhanced answer card styling */
.answer-card {
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.answer-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}

/* Skill type badges */
.skill-type-hard {
    background-color: #2196F3;
    color: white;
}

.skill-type-soft {
    background-color: #9C27B0;
    color: white;
}

/* Rating color coding */
.rating-excellent {
    background-color: #4CAF50;
}

.rating-good {
    background-color: #8BC34A;
}

.rating-average {
    background-color: #FF9800;
}

.rating-poor {
    background-color: #f44336;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .filter-bar {
        flex-direction: column;
        align-items: stretch;
    }
    
    .filter-bar > div {
        width: 100%;
    }
    
    .filter-bar select {
        width: 100%;
        min-width: auto;
    }
}

    
    </style>
</head>

<body>
    <%- include('../../partials/linemanager_partials') %>

    <!-- Main content area -->
    <div class="main-content">
        <div class="container">
            <!-- Profile header section -->
            <div class="profile-container">
                <img src="/images/profile.png" alt="Profile Picture" class="profile-pic">
                <div class="profile-info">
                    <h3><%= user.firstName %> <%= user.lastName %></h3>
                    <p><%= user.jobTitle %>, <%= user.departmentName %></p>
                    <p><i class="fas fa-envelope"></i> <%= user.userEmail || 'No email available' %></p>
                </div>
            </div>
        
            <div class="columns">
                <!-- Column 1: Personal Information -->
                <div class="column" id="personal-info">
                    <div class="section">
                        <h2><i class="fas fa-user"></i> Personal Information</h2>
                        <div class="info-item">
                            <strong>Phone:</strong> <span><%= user.phoneNumber || 'Not provided' %></span>
                        </div>
                        <div class="info-item">
                            <strong>Date of Birth:</strong> <span><%= user.dateOfBirth ? new Date(user.dateOfBirth).toLocaleDateString() : 'Not provided' %></span>
                        </div>
                        <div class="info-item">
                            <strong>Emergency Contact:</strong> 
                            <span><%= user.emergencyContactName || 'Not provided' %> 
                            <%= user.emergencyContactNumber ? `(${user.emergencyContactNumber})` : '' %></span>
                        </div>
                    </div>
                    <div class="section">
                        <h2><i class="fas fa-briefcase"></i> Employment Details</h2>
                        <div class="info-item">
                            <strong>Job Title:</strong> <span><%= user.jobTitle || 'Not assigned' %></span>
                        </div>
                        <div class="info-item">
                            <strong>Department:</strong> <span><%= user.departmentName || 'Not assigned' %></span>
                        </div>
                        <div class="info-item">
                            <strong>Employment Type:</strong> <span><%= user.employmentType || 'Not specified' %></span>
                        </div>
                        <div class="info-item">
                            <strong>Hire Date:</strong> <span><%= user.hireDate ? new Date(user.hireDate).toLocaleDateString() : 'Not provided' %></span>
                        </div>
                    </div>
                </div>
        
                <!-- Column 2: Career Progression -->
                <div class="column" id="career-progression">
                    <div class="section">
                        <h2><i class="fas fa-chart-line"></i> Career Progression</h2>
                        <div class="milestone-container">
                            <% if (user.milestones && user.milestones.length > 0) { %>
                                <% user.milestones.forEach((milestone, index) => { %>
                                    <div class="milestone">
                                        <div class="milestone-label">
                                            <h4>Milestone <%= index + 1 %></h4>
                                            <p><%= milestone.milestoneName %></p>
                                            <small>
                                                <%= new Date(milestone.startDate).toLocaleDateString() %> 
                                                <% if (milestone.endDate) { %> 
                                                    - <%= new Date(milestone.endDate).toLocaleDateString() %>
                                                <% } else { %>
                                                    - Present
                                                <% } %>
                                            </small>
                                        </div>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <div class="milestone">
                                    <div class="milestone-label">
                                        <p>No career progression milestones available.</p>
                                    </div>
                                </div>
                            <% } %>
                        </div>
                    </div>
                </div>
        
                <!-- Column 3: Degrees, Experiences, and Certifications -->
                <div class="column" id="degree-experience-certifications">
                    <div class="section">
                        <h2><i class="fas fa-graduation-cap"></i> Education</h2>
                        <% if (user.degrees && user.degrees.length > 0) { %>
                            <% user.degrees.forEach((degree) => { %>
                                <div class="degree-item card-item">
                                    <h4><%= degree.degreeName %></h4>
                                    <p><%= degree.universityName %></p>
                                    <p><small>Graduation Year: <%= degree.graduationYear %></small></p>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <p>No degree information available.</p>
                        <% } %>
                    </div>
        
                    <div class="section">
                        <h2><i class="fas fa-history"></i> Work Experience</h2>
                        <% if (user.experiences && user.experiences.length > 0) { %>
                            <% user.experiences.forEach((experience) => { %>
                                <div class="experience-item card-item">
                                    <h4><%= experience.companyName %></h4>
                                    <p><small>
                                        <%= new Date(experience.startDate).toLocaleDateString() %> 
                                        <% if (experience.endDate) { %> 
                                            - <%= new Date(experience.endDate).toLocaleDateString() %>
                                        <% } else { %>
                                            - Present
                                        <% } %>
                                    </small></p>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <p>No experience information available.</p>
                        <% } %>
                    </div>
        
                    <div class="section">
                        <h2><i class="fas fa-certificate"></i> Certifications</h2>
                        <% if (user.certifications && user.certifications.length > 0) { %>
                            <% user.certifications.forEach((certification) => { %>
                                <div class="certification-item card-item">
                                    <h4><%= certification.certificateName %></h4>
                                    <p><small>Issued: <%= new Date(certification.certDate).toLocaleDateString() %></small></p>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <p>No certification information available.</p>
                        <% } %>
                    </div>
                </div>
            </div>
            
            <!-- Attendance Logs Section -->
            <section id="attendance-logs" class="section">
                <h2><i class="fas fa-calendar-check"></i> Weekly Attendance Logs</h2>
                <table>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Date</th>
                            <th>Department</th>
                            <th>Position</th>
                            <th>Time In</th>
                            <th>Time Out</th>
                            <th>Hours</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (user.attendance && user.attendance.length > 0) { %>
                            <% user.attendance.forEach(log => { %>
                                <tr>
                                    <td><%= log.firstName %> <%= log.lastName %></td>
                                    <td><%= log.date %></td>
                                    <td><%= log.department %></td>
                                    <td><%= log.jobTitle %></td>
                                    <td><%= log.timeIn %></td>
                                    <td><%= log.timeOut %></td>
                                    <td><%= log.activeWorkingHours %></td>
                                </tr>
                            <% }) %>
                        <% } else { %>
                            <tr>
                                <td colspan="7" style="text-align: center;">No attendance logs available.</td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </section>
            
            <!-- Performance Tracker Section -->
            <section class="stepper section">
                <div class="stepper-header">
                    <h2><i class="fas fa-tasks"></i> Objective and Performance Review Tracker</h2>
                    <section class="year-filter">
                        <label for="yearSelect">Select Year:</label>
                        <select id="yearSelect" onchange="fetchYearData()">
                            <option value="">-- Select Year --</option>
                            <% for (let year of viewState.years) { %>
                                <option value="<%= year %>" <%= year === viewState.selectedYear ? 'selected' : '' %>><%= year %></option>
                            <% } %>
                        </select>
                    </section>
                </div>
                <div class="stepper-container">
                    <!-- Objective Setting -->
                    <div class="step <%= viewState.viewOnlyStatus['objectivesettings'] ? 'view-only' : 'accessible' %>" id="objectivesButton">
                        <div class="step-icon"><i class="fa fa-bullseye"></i></div>
                        <div class="step-label">
                            Objective Setting
                            <% if (viewState.viewOnlyStatus['objectivesettings']) { %>
                                <span class="status-badge">(View-Only)</span>
                            <% } else { %>
                                <span class="status-badge">(Editable)</span>
                            <% } %>
                        </div>
                    </div>
            
                    <!-- Feedback Q1 -->
                    <div class="step <%= (viewState.submittedObjectives && viewState.submittedObjectives.length > 0) ? 'accessible' : 'disabled' %>" id="feedbackButtonQ1" data-quarter="1" onclick="showFeedbackFormFromButton()">
                        <div class="step-icon"><i class="fa fa-users"></i></div>
                        <div class="step-label">
                            Q1 Feedback
                            <% if (viewState.viewOnlyStatus['feedbacks_Q1']) { %>
                                <span class="status-badge">(View-Only)</span>
                            <% } else { %>
                                <span class="status-badge">(Editable)</span>
                            <% } %>
                        </div>
                        <% if (!(viewState.submittedObjectives && viewState.submittedObjectives.length > 0)) { %>
                            <div class="notice">Submit objectives first</div>
                        <% } %>
                    </div>
            
                    <!-- Feedback Q2 -->
                    <div class="step <%= (viewState.submittedObjectives && viewState.submittedObjectives.length > 0 && viewState.viewOnlyStatus['feedbacks_Q1']) ? 'accessible' : 'disabled' %>" id="feedbackButtonQ2" data-quarter="2" onclick="showFeedbackFormFromButton()">
                        <div class="step-icon"><i class="fa fa-users"></i></div>
                        <div class="step-label">
                            Q2 Feedback
                            <% if (viewState.viewOnlyStatus['feedbacks_Q2']) { %>
                                <span class="status-badge">(View-Only)</span>
                            <% } else { %>
                                <span class="status-badge">(Editable)</span>
                            <% } %>
                        </div>
                    </div>
            
                    <!-- Mid-Year IDP -->
                    <div class="step <%= (viewState.submittedObjectives && viewState.submittedObjectives.length > 0 && viewState.viewOnlyStatus['feedbacks_Q2']) ? 'accessible' : 'disabled' %>" id="midYearIDP">
                        <div class="step-icon"><i class="fa fa-clipboard-check"></i></div>
                        <div class="step-label">
                            Mid-Year IDP
                            <% if (viewState.viewOnlyStatus.midyearidp) { %>
                                <span class="status-badge">(View-Only)</span>
                            <% } else { %>
                                <span class="status-badge">(Editable)</span>
                            <% } %>
                        </div>
                    </div>
            
                    <!-- Feedback Q3 -->
                    <div class="step <%= (viewState.submittedObjectives && viewState.submittedObjectives.length > 0 && viewState.viewOnlyStatus['feedbacks_Q2'] && viewState.viewOnlyStatus['feedbacks_Q1']) ? 'accessible' : 'disabled' %>" id="feedbackButtonQ3" data-quarter="3" onclick="showFeedbackFormFromButton()">
                        <div class="step-icon"><i class="fa fa-users"></i></div>
                        <div class="step-label">
                            Q3 Feedback
                            <% if (viewState.viewOnlyStatus['feedbacks_Q3']) { %>
                                <span class="status-badge">(View-Only)</span>
                            <% } else { %>
                                <span class="status-badge">(Editable)</span>
                            <% } %>
                        </div>
                    </div>
            
                    <!-- Feedback Q4 -->
                    <div class="step <%= (viewState.submittedObjectives && viewState.submittedObjectives.length > 0 && viewState.viewOnlyStatus['feedbacks_Q3'] && viewState.viewOnlyStatus['feedbacks_Q2'] && viewState.viewOnlyStatus['feedbacks_Q1']) ? 'accessible' : 'disabled' %>" id="feedbackButtonQ4" data-quarter="4" onclick="showFeedbackFormFromButton()">
                        <div class="step-icon"><i class="fa fa-users"></i></div>
                        <div class="step-label">
                            Q4 Feedback
                            <% if (viewState.viewOnlyStatus['feedbacks_Q4']) { %>
                                <span class="status-badge">(View-Only)</span>
                            <% } else { %>
                                <span class="status-badge">(Editable)</span>
                            <% } %>
                        </div>
                    </div>
            
                    <!-- Final-Year IDP -->
                    <div class="step <%= (viewState.submittedObjectives && viewState.submittedObjectives.length > 0 && viewState.viewOnlyStatus['feedbacks_Q4']) ? 'accessible' : 'disabled' %>" id="finalYearIDP">
                        <div class="step-icon"><i class="fa fa-clipboard-check"></i></div>
                        <div class="step-label">
                            Final-Year IDP
                            <% if (viewState.viewOnlyStatus.finalyearidp) { %>
                                <span class="status-badge">(View-Only)</span>
                            <% } else { %>
                                <span class="status-badge">(Editable)</span>
                            <% } %>
                        </div>
                    </div>
                </div>
            </section>
            
            <!-- Form for setting objectives -->
            <form id="objectiveSettingsForm" method="POST" action="/linemanager/records-performance-tracker/<%= user.userId %>">
                <section id="objective-skill-progress-form" class="fade-out section" style="display: none;">
                    <h2>Annual Objective Setting Form</h2>
                    
                    <div class="header-grid">
                        <div><strong>Employee:</strong> <%= user.lastName %>, <%= user.firstName %></div>
                        <div><strong>Position:</strong> <%= user.jobTitle %></div>
                        <div><strong>Year:</strong> <span id="performanceDate"><%= new Date().getFullYear() %></span></div>
                        <div><strong>Company:</strong> Prime Infrastructure</div>
                        <div><strong>Department:</strong> <%= user.departmentName %></div>
                    </div>
                    
                    <input type="hidden" name="userId" value="<%= user.userId %>">
                    <input type="hidden" id="jobId" name="jobId" value="<%= user.jobId %>">
                    <input type="hidden" id="departmentId" name="departmentId" value="<%= user.departmentId %>">
                    
                    <table>
                        <thead>
                            <tr>
                                <th>KRA/Objectives</th>
                                <th>KPI</th>
                                <th>Target</th>
                                <th>UOM</th>
                                <th>Weight</th>
                                <th>Actions</th>
                            </tr>
                            <tr>
                                <th colspan="6" style="background-color: #f9f9f9; font-weight: normal; text-align: center; font-style: italic;">
                                    Example: "Improve Customer Satisfaction" | "Satisfaction Rate" | "90" | "%" | "20"
                                </th>
                            </tr>
                        </thead>
                        <tbody id="progress-table-body">
                            <tr>
                                <td><input type="text" placeholder="Enter Objective" name="objectiveDescrpt" required></td>
                                <td><input type="text" placeholder="Enter KPI" name="objectiveKPI" required></td>
                                <td><input type="text" placeholder="Enter Target" name="objectiveTarget" required></td>
                                <td><input type="text" placeholder="Enter UOM" name="objectiveUOM" required></td>
                                <td><input type="number" class="weight-input" oninput="updateTotalWeight()" placeholder="Weight %" name="objectiveAssignedWeight" min="0" max="100" required></td>
                                <td><button type="button" class="cancel-btn" onclick="removeRow(this)">Remove</button></td>
                            </tr>
                        </tbody>
                    </table>
                    
                    <button id="addRowBtn" type="button" class="add-btn" onclick="addRow()">
                        <i class="fas fa-plus"></i> Add Objective
                    </button>
                    
                    <div class="weight-summary" style="margin: 15px 0; padding: 10px; background-color: #f9f9f9; border-radius: 8px; border-left: 4px solid #124A5C;">
                        <strong>Total Assigned Weight:</strong> 
                        <span id="totalWeightDisplay">0</span>% <span style="color: #f44336; font-size: 0.9em;">(must equal 100%)</span>
                        <input id="totalWeight" type="hidden" value="0">
                    </div>
            
                    <div class="confirmation-box" style="margin: 20px 0; padding: 15px; background-color: rgba(76, 175, 80, 0.1); border-radius: 8px; border: 1px solid rgba(76, 175, 80, 0.3);">
                        <label style="display: flex; align-items: center; cursor: pointer;">
                            <input type="checkbox" id="confirmationCheckbox" required style="margin-right: 10px;">
                            <span>I confirm that the objective weights have been accurately consolidated and reviewed.</span>
                        </label>
                    </div>
                    
                    <div id="submitButtonContainer">
                        <button id="saveButton" type="submit" class="save-btn">
                            <i class="fas fa-save"></i> Save Objectives
                        </button>
                    </div>
                </section>
            
                <% if (viewState.viewOnlyStatus['objectivesettings']) { %>
                    <section id="view-only-page" class="fade-out section" style="display: none;">
                        <h2><i class="fas fa-clipboard-list"></i> Submitted Annual Objective Setting Form</h2>
                        <div class="header-grid">
                            <div><strong>Employee:</strong> <%= user.lastName %>, <%= user.firstName %></div>
                            <div><strong>Position:</strong> <%= user.jobTitle %></div>
                            <div><strong>Performance Year:</strong> <%= viewState.performancePeriodYear %></div>
                            <div><strong>Company:</strong> Prime Infrastructure</div>
                            <div><strong>Department:</strong> <%= user.departmentName %></div>
                        </div>
                        
                        <div id="objectivesData" class="view-only-section">
                            <table>
                                <thead>
                                    <tr>
                                        <th>KRA/Objectives</th>
                                        <th>KPI</th>
                                        <th>Target</th>
                                        <th>UOM</th>
                                        <th>Assigned Weight</th>
                                    </tr>
                                </thead>
                                <tbody id="view-only-table-body">
                                    <% if (viewState.submittedObjectives && viewState.submittedObjectives.length > 0) { %>
                                        <% viewState.submittedObjectives.forEach(obj => { %>
                                            <tr>
                                                <td><%= obj.objectiveDescrpt || 'N/A' %></td>
                                                <td><%= obj.objectiveKPI || 'N/A' %></td>
                                                <td><%= obj.objectiveTarget || 'N/A' %></td>
                                                <td><%= obj.objectiveUOM || 'N/A' %></td>
                                                <td><%= obj.objectiveAssignedWeight !== undefined ? (obj.objectiveAssignedWeight * 100).toFixed(2) + '%' : 'N/A' %></td>
                                            </tr>
                                        <% }); %>
                                    <% } else { %>
                                        <tr>
                                            <td colspan="5" style="text-align: center; padding: 20px;">No objectives submitted yet.</td>
                                        </tr>
                                    <% } %>
                                </tbody>
                            </table>
                        </div>
                    </section>
                <% } %>
            
                <div id="viewState" data-viewstate='<%= JSON.stringify(viewState) %>' style="display:none;"></div>
            </form>

            <!-- 360 Degree Feedback Form -->
<form id="feedbackForm" method="POST" action="/linemanager/records-performance-tracker/questionnaire/<%= user.userId %>">                
    <section id="feedback-section" class="fade-out section" style="display: none;">
        <input type="hidden" id="userId" value="<%= user.userId %>">
        <!-- Add the buttons container -->
        <div class="feedback-view-buttons" style="display: flex; gap: 15px; margin-bottom: 20px;">
            <button type="button" id="viewQuestionnaireBtn" class="primary-btn" style="flex: 1; background-color: var(--primary-color); color: white; border: none; padding: 12px 15px; border-radius: var(--border-radius); cursor: pointer; font-weight: 500; display: flex; align-items: center; justify-content: center; gap: 8px;">
                <i class="fas fa-list-ul"></i> View Questionnaire
            </button>
            <button type="button" id="viewFeedbackBtn" class="secondary-btn" style="flex: 1; background-color: var(--secondary-color); color: white; border: none; padding: 12px 15px; border-radius: var(--border-radius); cursor: pointer; font-weight: 500; display: flex; align-items: center; justify-content: center; gap: 8px;">
                <i class="fas fa-comments"></i> View Feedback
            </button>
        </div>
        
<!-- Questionnaire content container -->
<div id="questionnaireContent">
    <div class="form-header">
        <h2><i class="fas fa-comment-dots"></i> 360 Degree Feedback Questionnaire</h2>
        <div class="date-inputs" style="display: flex; gap: 20px; margin-bottom: 20px;">
            <!-- Start Date -->
            <div class="date-input" style="flex: 1;">
                <label for="startDate"><strong>Start Date:</strong></label>
                <!-- REMOVED: Static Q1 hardcoding. Date fields will be populated by JavaScript -->
                <input type="date" id="startDate" name="startDate" class="input-field" required>
            </div>

            <!-- End Date -->
            <div class="date-input" style="flex: 1;">
                <label for="endDate"><strong>End Date:</strong></label>
                <!-- REMOVED: Static Q1 hardcoding. Date fields will be populated by JavaScript -->
                <input type="date" id="endDate" name="endDate" class="input-field" required>
            </div>
        </div>
    </div>

    <!-- Instructions Card -->
    <div class="instructions-card" style="background-color: #f9f9f9; border-radius: 8px; padding: 20px; margin-bottom: 20px; border-left: 4px solid #124A5C;">
        <h3 style="margin-top: 0;"><i class="fas fa-info-circle"></i> Instructions</h3>
        <p><strong>Setting Start and End Date:</strong> When creating a 360-degree feedback questionnaire, it is essential to set a start and end date. This schedule will automatically notify employees through the system, ensuring that they are aware of the timeframe for providing feedback.</p>
        
        <p><strong>Setting of Guide Questions:</strong> The Line Manager should prepare guide questions that support co-employees in providing both qualitative and quantitative feedback for each role-specific objective. Additionally, employees will rate the hard and soft skills required for the job, offering qualitative comments and quantitative scores. These structured questions enable clear, measurable evaluations and ensure alignment with the objectives being tracked.</p>                    
    </div>

    <div class="employee-details" style="background-color: rgba(18, 74, 92, 0.05); border-radius: 8px; padding: 15px; margin-bottom: 20px;">
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
            <div><strong>Employee:</strong> <%= user.lastName %>, <%= user.firstName %></div>
            <div><strong>Position:</strong> <%= user.jobTitle %></div>
            <div><strong>Company:</strong> Prime Infrastructure</div>
            <div><strong>Department:</strong> <%= user.departmentName %></div>
        </div>
    </div>
    
    <hr class="divider" style="border: 0; height: 1px; background-color: #ddd; margin: 20px 0;" />
    
    <h3 style="color: #124A5C;"><i class="fas fa-bullseye"></i> Objective Setting Questions</h3>
    
    <table>
        <thead>
            <tr>
                <th>KRA/Objectives</th>
                <th>KPI</th>
                <th>Target</th>
                <th>UOM</th>
                <th>Weight</th>
            </tr>
        </thead>
        <tbody id="feedback-table-body">
            <!-- Dynamic feedback rows will be added here by JavaScript -->
        </tbody>
    </table>

    <!-- Hard Skills Section -->
    <h3 style="color: #124A5C; margin-top: 30px;"><i class="fas fa-cogs"></i> Hard Skills</h3>
    <table id="hardSkillsTable">
        <thead>
            <tr>
                <th>Skill Name</th>
            </tr>
        </thead>
        <tbody id="hard-skills-table-body">
            <!-- Hard skill rows will be dynamically inserted here -->
        </tbody>
    </table>
    
    <!-- Soft Skills Section -->
    <h3 style="color: #124A5C; margin-top: 30px;"><i class="fas fa-comments"></i> Soft Skills</h3>
    <table id="softSkillsTable">
        <thead>
            <tr>
                <th>Skill Name</th>
            </tr>
        </thead>
        <tbody id="soft-skills-table-body">
            <!-- Soft skill rows will be dynamically inserted here -->
        </tbody>
    </table>
    
    <div style="margin-top: 30px; text-align: right;">
        <button id="save360Questionnaire" type="submit" class="save-btn">
            <i class="fas fa-save"></i> Save Questionnaire
        </button>
    </div>
</div>
        
        <!-- Feedback responses container (initially hidden) -->
        <div id="feedbackContent" style="display: none;">
            <div class="form-header">
                <h2><i class="fas fa-comment-dots"></i> 360 Degree Feedback Responses</h2>
            </div>
            
           <div class="feedback-tabs" style="margin-bottom: 20px; border-bottom: 1px solid #ddd;">
    <div style="display: flex; gap: 5px;">
        <button type="button" id="summaryTab" class="tab-button active" style="padding: 12px 20px; background-color: var(--primary-color); color: white; border: none; border-radius: 8px 8px 0 0; cursor: pointer; font-weight: 500; transition: all 0.3s ease;">
            <i class="fas fa-chart-pie"></i> Summary
        </button>
        <button type="button" id="answersTab" class="tab-button" style="padding: 12px 20px; background-color: #f1f1f1; color: #333; border: none; border-radius: 8px 8px 0 0; cursor: pointer; font-weight: 500; transition: all 0.3s ease;">
            <i class="fas fa-list-alt"></i> Individual Answers
        </button>
    </div>
</div>

<!-- Summary content -->
<div id="summaryContent">
    <div class="feedback-stats" style="background-color: #f5f7fa; border-radius: 8px; padding: 20px; margin-bottom: 25px; border-left: 4px solid var(--secondary-color);">
        <h3 style="margin-top: 0;"><i class="fas fa-chart-bar"></i> Feedback Summary</h3>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-top: 15px;">
            <div class="stat-card" style="background-color: white; padding: 15px; border-radius: 6px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                <h4 style="margin-top: 0; color: var(--primary-color);">Total Responses</h4>
                <p style="font-size: 24px; font-weight: bold; margin: 5px 0 0 0;" id="totalResponses">-</p>
            </div>
            <div class="stat-card" style="background-color: white; padding: 15px; border-radius: 6px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                <h4 style="margin-top: 0; color: var(--primary-color);">Average Rating</h4>
                <p style="font-size: 24px; font-weight: bold; margin: 5px 0 0 0;" id="averageRating">-</p>
            </div>
            <div class="stat-card" style="background-color: white; padding: 15px; border-radius: 6px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                <h4 style="margin-top: 0; color: var(--primary-color);">Department Completion Rate</h4>
                <p style="font-size: 24px; font-weight: bold; margin: 5px 0 0 0;" id="completionRate">-</p>
            </div>
        </div>
    </div>
    
    <h3 style="color: #124A5C;"><i class="fas fa-bullseye"></i> Objective Feedback</h3>
    <div id="objectiveFeedbackContainer">
        <!-- Objective feedback will be loaded here -->
        <div class="empty-state" style="text-align: center; padding: 30px; background-color: #f9f9f9; border-radius: 8px;">
            <i class="fas fa-inbox" style="font-size: 48px; color: #ccc; margin-bottom: 15px;"></i>
            <p>No feedback responses available yet.</p>
        </div>
    </div>
    
    <h3 style="color: #124A5C; margin-top: 30px;"><i class="fas fa-cogs"></i> Skills Feedback</h3>
    <div id="skillsFeedbackContainer">
        <!-- Skills feedback will be loaded here -->
        <div class="empty-state" style="text-align: center; padding: 30px; background-color: #f9f9f9; border-radius: 8px;">
            <i class="fas fa-inbox" style="font-size: 48px; color: #ccc; margin-bottom: 15px;"></i>
            <p>No skills feedback responses available yet.</p>
        </div>
    </div>
</div>

<!-- Individual answers content (initially hidden) -->
<div id="answersContent" style="display: none;">
    <!-- Enhanced filter bar with proper responder and question filters -->
    <div class="filter-bar" style="background-color: #f5f7fa; border-radius: 8px; padding: 15px; margin-bottom: 20px; display: flex; gap: 15px; flex-wrap: wrap; align-items: center;">
        <div style="flex: 1; min-width: 200px;">
            <label for="responderFilter" style="font-weight: 500; margin-right: 8px; color: var(--primary-color);">
                <i class="fas fa-users"></i> Filter by Responder:
            </label>
            <select id="responderFilter" style="padding: 8px; border: 1px solid #ddd; border-radius: 4px; background-color: white; min-width: 180px; transition: all 0.3s ease;">
                <option value="all">All Responders</option>
                <!-- Options will be populated dynamically by JavaScript -->
            </select>
        </div>
        
        <div style="flex: 1; min-width: 200px;">
            <label for="questionFilter" style="font-weight: 500; margin-right: 8px; color: var(--primary-color);">
                <i class="fas fa-question-circle"></i> Filter by Question:
            </label>
            <select id="questionFilter" style="padding: 8px; border: 1px solid #ddd; border-radius: 4px; background-color: white; min-width: 180px; transition: all 0.3s ease;">
                <option value="all">All Questions</option>
                <!-- Options will be populated dynamically by JavaScript -->
            </select>
        </div>
        
        <div style="min-width: 120px;">
            <button type="button" id="clearFilters" style="background-color: #6c757d; color: white; border: none; padding: 8px 15px; border-radius: 4px; cursor: pointer; font-weight: 500; transition: all 0.3s ease;">
                <i class="fas fa-times"></i> Clear Filters
            </button>
        </div>
        
        <!-- Result count will be added here by JavaScript -->
    </div>
    
    <div id="individualAnswersContainer">
        <!-- Individual answers will be populated here by JavaScript -->
        <div class="loading-state" style="text-align: center; padding: 30px; background-color: #f9f9f9; border-radius: 8px;">
            <i class="fas fa-spinner fa-spin" style="font-size: 48px; color: #ccc; margin-bottom: 15px;"></i>
            <p>Loading individual answers...</p>
        </div>
    </div>
    
    <div style="text-align: center; margin-top: 20px;">
        <button type="button" style="background-color: var(--primary-color); color: white; border: none; padding: 10px 20px; border-radius: var(--border-radius); cursor: pointer; font-weight: 500; transition: all 0.3s ease;" onclick="exportAllAnswers()">
            <i class="fas fa-download"></i> Export All Answers
        </button>
    </div>
            </div>
        </div>
    </section>
</form>

<!-- Enhanced Mid-Year IDP Form with Circular Feedback Display -->
<section id="midYearIDPForm" class="fade-out section" style="display: none;">
    <div class="idp-progress">
        <h3><i class="fas fa-chart-line"></i> Development Plan Progress</h3>
        <p>Complete all required fields to finalize your mid-year Individual Development Plan.</p>
        <div class="progress-bar-container">
            <div class="progress-bar" id="midYearIDPProgressBar" style="width: 0%"></div>
        </div>
        <div style="display: flex; justify-content: space-between; margin-top: 5px;">
            <span>0%</span>
            <span>100%</span>
        </div>
    </div>

    <div class="idp-header" style="background: linear-gradient(to right, rgba(18, 74, 92, 0.1), rgba(5, 156, 164, 0.05)); padding: 20px; border-radius: var(--border-radius); margin-bottom: 25px;">
        <h2><i class="fas fa-clipboard-check"></i> Mid-Year Individual Development Plan (IDP)</h2>
        <p style="margin-top: 10px; color: #555;">
            The Mid-Year IDP serves as a checkpoint to evaluate progress on professional goals and career development.
            Use this opportunity to identify strengths, areas for improvement, and establish a clear path forward.
        </p>
    </div>

    <!-- Loading indicator for feedback data -->
    <div id="feedbackLoadingIndicator" style="display: none; text-align: center; padding: 20px; background-color: #f9f9f9; border-radius: 8px; margin-bottom: 20px;">
        <i class="fas fa-spinner fa-spin" style="font-size: 24px; color: var(--primary-color); margin-bottom: 10px;"></i>
        <p>Loading feedback insights from Q1 and Q2...</p>
    </div>

    <form id="midYearIDPFormDetails" method="POST" action="/linemanager/midyear-idp/<%= user.userId %>" class="idp-form">
        <!-- Professional Competences -->
        <fieldset>
            <legend><i class="fas fa-briefcase"></i> PROFESSIONAL COMPETENCES</legend>

            <div class="form-group">
                <label for="profStrengths">
                    <strong>STRENGTHS:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Identify technical skills and professional competencies where the employee has demonstrated excellence.</span>
                    </div>
                </label>
                
                <!-- Circular display for strengths (4-5 star ratings) -->
                <div id="profStrengthsInsights" class="feedback-insights-container" style="margin-bottom: 15px;">
                    <div class="insights-header" style="margin-bottom: 15px; padding: 10px; background-color: #e8f5e8; border-radius: 6px; border-left: 4px solid #4CAF50;">
                        <h4 style="margin: 0; color: #2e7d32; font-size: 14px;">
                            <i class="fas fa-arrow-up" style="color: #4CAF50;"></i> 
                            Mid-Year 360 Feedback Improvement Areas: Above Average Ratings
                        </h4>
                        <p style="margin: 5px 0 0 0; font-size: 12px; color: #555;">Skills and objectives rated 4-5 stars in Q1 and Q2 feedback</p>
                    </div>
                    <div id="strengthsCircularDisplay" class="circular-feedback-display">
                        <!-- Circular items will be dynamically added here -->
                    </div>
                </div>
                
                <textarea id="profStrengths" name="profStrengths" rows="4" placeholder="Describe technical competences and areas where the employee has shown particular expertise" onkeyup="updateIDPProgress()"></textarea>
                <div class="char-counter"><span id="profStrengthsCount">0</span> characters</div>
            </div>

            <div class="form-group">
                <label for="profAreasForDevelopment">
                    <strong>AREAS FOR DEVELOPMENT:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Note specific technical or professional skills that require further development.</span>
                    </div>
                </label>
                
                <!-- Circular display for average ratings (3 stars) -->
                <div id="profAverageInsights" class="feedback-insights-container" style="margin-bottom: 15px;">
                    <div class="insights-header" style="margin-bottom: 15px; padding: 10px; background-color: #fff3cd; border-radius: 6px; border-left: 4px solid #ffc107;">
                        <h4 style="margin: 0; color: #856404; font-size: 14px;">
                            <i class="fas fa-equals" style="color: #ffc107;"></i> 
                            Mid-Year 360 Feedback Improvement Areas: Average Ratings
                        </h4>
                        <p style="margin: 5px 0 0 0; font-size: 12px; color: #555;">Skills and objectives rated 3 stars in Q1 and Q2 feedback</p>
                    </div>
                    <div id="averageCircularDisplay" class="circular-feedback-display">
                        <!-- Circular items will be dynamically added here -->
                    </div>
                </div>
                
                <!-- Circular display for below average ratings (1-2 stars) -->
                <div id="profBelowAverageInsights" class="feedback-insights-container" style="margin-bottom: 15px;">
                    <div class="insights-header" style="margin-bottom: 15px; padding: 10px; background-color: #f8d7da; border-radius: 6px; border-left: 4px solid #dc3545;">
                        <h4 style="margin: 0; color: #721c24; font-size: 14px;">
                            <i class="fas fa-arrow-down" style="color: #dc3545;"></i> 
                            Mid-Year 360 Feedback Improvement Areas: Below Average Ratings
                        </h4>
                        <p style="margin: 5px 0 0 0; font-size: 12px; color: #555;">Skills and objectives rated 1-2 stars in Q1 and Q2 feedback</p>
                    </div>
                    <div id="belowAverageCircularDisplay" class="circular-feedback-display">
                        <!-- Circular items will be dynamically added here -->
                    </div>
                </div>
                
                <textarea id="profAreasForDevelopment" name="profAreasForDevelopment" rows="4" placeholder="Describe technical or professional gaps identified during the first half of the year" onkeyup="updateIDPProgress()"></textarea>
                <div class="char-counter"><span id="profAreasCount">0</span> characters</div>
            </div>

            <div class="form-group">
                <label for="profActionsToTake">
                    <strong>ACTIONS TO TAKE:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Specify concrete actions aligned with the 70-20-10 model (70% on-the-job learning, 20% mentoring, 10% formal training).</span>
                    </div>
                </label>
                <div class="development-model-guide" style="background-color: #f5f7fa; border-radius: 6px; padding: 10px; margin-bottom: 10px;">
                    <h4 style="margin-top: 0; font-size: 14px; color: var(--primary-color);">70-20-10 Development Model</h4>
                    <div style="display: flex; flex-wrap: wrap; gap: 10px; font-size: 13px;">
                        <div style="flex: 1; min-width: 180px;">
                            <strong>70% - Experiential Learning</strong>
                            <p style="margin: 5px 0;">On-the-job experiences, challenging assignments</p>
                        </div>
                        <div style="flex: 1; min-width: 180px;">
                            <strong>20% - Social Learning</strong>
                            <p style="margin: 5px 0;">Mentoring, coaching, feedback</p>
                        </div>
                        <div style="flex: 1; min-width: 180px;">
                            <strong>10% - Formal Learning</strong>
                            <p style="margin: 5px 0;">Courses, workshops, reading</p>
                        </div>
                    </div>
                </div>
                <textarea id="profActionsToTake" name="profActionsToTake" rows="4" placeholder="Describe specific actions to close professional gaps, considering experiential learning (70%), mentoring (20%), and formal training (10%)" onkeyup="updateIDPProgress()"></textarea>
                <div class="char-counter"><span id="profActionsCount">0</span> characters</div>
            </div>
        </fieldset>

        <!-- Leadership Competences -->
        <fieldset>
            <legend><i class="fas fa-users"></i> LEADERSHIP COMPETENCES</legend>

            <div class="form-group">
                <label for="leaderStrengths">
                    <strong>STRENGTHS:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Identify leadership qualities and behaviors where the employee excels.</span>
                    </div>
                </label>
                
                <!-- Circular display for leadership strengths -->
                <div id="leaderStrengthsInsights" class="feedback-insights-container" style="margin-bottom: 15px;">
                    <div class="insights-header" style="margin-bottom: 15px; padding: 10px; background-color: #e8f5e8; border-radius: 6px; border-left: 4px solid #4CAF50;">
                        <h4 style="margin: 0; color: #2e7d32; font-size: 14px;">
                            <i class="fas fa-arrow-up" style="color: #4CAF50;"></i> 
                            Leadership Skills: Above Average Ratings
                        </h4>
                        <p style="margin: 5px 0 0 0; font-size: 12px; color: #555;">Leadership skills rated 4-5 stars in Q1 and Q2 feedback</p>
                    </div>
                    <div id="leadershipStrengthsCircularDisplay" class="circular-feedback-display">
                        <!-- Circular items will be dynamically added here -->
                    </div>
                </div>
                
                <textarea id="leaderStrengths" name="leaderStrengths" rows="4" placeholder="Describe leadership competences where the employee shows strength" onkeyup="updateIDPProgress()"></textarea>
                <div class="char-counter"><span id="leaderStrengthsCount">0</span> characters</div>
            </div>

            <div class="form-group">
                <label for="leaderAreasForDevelopment">
                    <strong>AREAS FOR DEVELOPMENT:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Note specific leadership behaviors or skills that need improvement.</span>
                    </div>
                </label>
                
                <!-- Circular display for leadership development areas -->
                <div id="leaderDevelopmentInsights" class="feedback-insights-container" style="margin-bottom: 15px;">
                    <div class="insights-header" style="margin-bottom: 15px; padding: 10px; background-color: #fff3cd; border-radius: 6px; border-left: 4px solid #ffc107;">
                        <h4 style="margin: 0; color: #856404; font-size: 14px;">
                            <i class="fas fa-equals" style="color: #ffc107;"></i> 
                            Leadership Skills: Average & Below Average Ratings
                        </h4>
                        <p style="margin: 5px 0 0 0; font-size: 12px; color: #555;">Leadership skills rated 1-3 stars needing development</p>
                    </div>
                    <div id="leadershipDevelopmentCircularDisplay" class="circular-feedback-display">
                        <!-- Circular items will be dynamically added here -->
                    </div>
                </div>
                
                <textarea id="leaderAreasForDevelopment" name="leaderAreasForDevelopment" rows="4" placeholder="Describe leadership gaps that should be addressed" onkeyup="updateIDPProgress()"></textarea>
                <div class="char-counter"><span id="leaderAreasCount">0</span> characters</div>
            </div>

            <div class="form-group">
                <label for="leaderActionsToTake">
                    <strong>ACTIONS TO TAKE:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Specify concrete actions to improve leadership capabilities.</span>
                    </div>
                </label>
                <textarea id="leaderActionsToTake" name="leaderActionsToTake" rows="4" placeholder="Outline specific leadership development actions (e.g., shadowing senior leaders, leading cross-functional projects, attending leadership workshops)" onkeyup="updateIDPProgress()"></textarea>
                <div class="char-counter"><span id="leaderActionsCount">0</span> characters</div>
            </div>
        </fieldset>

        <!-- Next Role Options -->
        <fieldset>
            <legend><i class="fas fa-road"></i> NEXT ROLE OPTIONS</legend>

            <div class="form-group">
                <label for="nextRoleShortTerm">
                    <strong>SHORT-TERM:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Identify 1-3 potential roles or positions for the next 3-5 years.</span>
                    </div>
                </label>
                <textarea id="nextRoleShortTerm" name="nextRoleShortTerm" rows="4" placeholder="List 1-3 potential roles or positions for the next 3-5 years" onkeyup="updateIDPProgress()"></textarea>
                <div class="char-counter"><span id="nextRoleShortCount">0</span> characters</div>
            </div>

            <div class="form-group">
                <label for="nextRoleLongTerm">
                    <strong>LONG-TERM:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Outline career aspirations for the next 5-10 years and beyond.</span>
                    </div>
                </label>
                <textarea id="nextRoleLongTerm" name="nextRoleLongTerm" rows="4" placeholder="Describe long-term career aspirations for the next 5-10 years and upon retirement" onkeyup="updateIDPProgress()"></textarea>
                <div class="char-counter"><span id="nextRoleLongCount">0</span> characters</div>
            </div>

            <div class="form-group">
                <label for="nextRoleMobility">
                    <strong>MOBILITY:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Indicate willingness to relocate, travel, or work different schedules.</span>
                    </div>
                </label>
                <textarea id="nextRoleMobility" name="nextRoleMobility" rows="4" placeholder="Describe availability to work in different locations, willingness to travel, and flexibility with work schedules" onkeyup="updateIDPProgress()"></textarea>
                <div class="char-counter"><span id="nextRoleMobilityCount">0</span> characters</div>
            </div>
        </fieldset>


        <fieldset class="suggested-trainings-fieldset">
    <legend><i class="fas fa-graduation-cap"></i> SUGGESTED TRAININGS TO TAKE</legend>
    
    <div class="form-group">
        <div class="training-selection-container" style="
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: var(--border-radius);
            padding: 20px;
            border: 2px solid var(--primary-color);
            margin-bottom: 15px;
        ">
            <div class="training-header" style="margin-bottom: 15px;">
                <h4 style="margin: 0 0 8px 0; color: var(--primary-color); font-size: 16px;">
                    <i class="fas fa-book-open"></i> Select Multiple Training Programs
                </h4>
                <p style="margin: 0; color: #666; font-size: 14px; line-height: 1.4;">
                    Choose training programs that address your development areas. You can select multiple trainings and add remarks for each.
                </p>
            </div>

            <!-- KEEP YOUR EXISTING DROPDOWN STRUCTURE -->
            <div class="training-dropdown-container" style="position: relative;">
                <label for="suggestedTrainings" style="
                    display: block;
                    font-weight: 600;
                    color: var(--primary-color);
                    margin-bottom: 8px;
                    font-size: 14px;
                ">
                    <i class="fas fa-search"></i> Choose Training Program:
                </label>
                
                <div style="display: flex; align-items: flex-start; gap: 10px;">
                    <!-- Enhanced Select Element - KEEPING YOUR EXISTING STRUCTURE -->
                    <div style="flex: 1; position: relative;">
                        <select id="suggestedTrainings" name="suggestedTrainings" style="
                            width: 100%;
                            padding: 12px 15px;
                            border: 2px solid #ddd;
                            border-radius: var(--border-radius);
                            background-color: white;
                            color: var(--primary-color);
                            font-weight: 500;
                            cursor: pointer;
                            transition: var(--transition);
                            font-size: 13px;
                            line-height: 1.3;
                            height: auto;
                            min-height: 45px;
                        " onchange="handleTrainingSelection(this)" onclick="showTrainingDetails()">
                            <option value="">-- Select a Training Program to Add --</option>
                            <% if (user.availableTrainings && user.availableTrainings.length > 0) { %>
                                <% user.availableTrainings.forEach(training => { %>
                                    <% 
                                        let displayText = training.trainingName;
                                        let objectivesList = '';
                                        let skillsList = '';
                                        
                                        if (training.objectives && training.objectives.length > 0) {
                                            objectivesList = training.objectives.map(obj => obj.objectiveDescrpt).join(', ');
                                        }
                                        
                                        if (training.skills && training.skills.length > 0) {
                                            skillsList = training.skills.map(skill => `${skill.jobReqSkillName} (${skill.jobReqSkillType})`).join(', ');
                                        }
                                    %>
                                    <option value="<%= training.trainingId %>" 
                                            data-name="<%= training.trainingName %>"
                                            data-description="<%= training.trainingDescription || 'No description available.' %>"
                                            data-match-type="<%= training.matchType %>"
                                            data-objectives='<%- JSON.stringify(training.objectives || []) %>'
                                            data-skills='<%- JSON.stringify(training.skills || []) %>'
                                            data-objectives-text="<%= objectivesList %>"
                                            data-skills-text="<%= skillsList %>"
                                            title="<%= displayText %> | Objectives: <%= objectivesList || 'None' %> | Skills: <%= skillsList || 'None' %>">
                                        <%= displayText %>
                                    </option>
                                <% }); %>
                            <% } else { %>
                                <option value="" disabled>No training programs available for your role</option>
                            <% } %>
                        </select>

                        <!-- Training Details Panel - KEEPING YOUR EXISTING STRUCTURE -->
                        <div id="trainingDetailsPanel" style="
                            position: absolute;
                            top: 100%;
                            left: 0;
                            right: 0;
                            background: white;
                            border: 2px solid var(--secondary-color);
                            border-radius: var(--border-radius);
                            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
                            z-index: 1000;
                            display: none;
                            max-height: 400px;
                            overflow-y: auto;
                            margin-top: 5px;
                        ">
                            <div id="trainingDetailsList" style="padding: 15px;">
                                <!-- Training details will be populated here -->
                            </div>
                        </div>
                    </div>
                    
                    <!-- ADD BUTTON INSTEAD OF INFO ICON -->
                    <button type="button" id="addTrainingBtn" style="
                        background-color: var(--success-color);
                        color: white;
                        border: none;
                        padding: 12px 20px;
                        border-radius: var(--border-radius);
                        cursor: pointer;
                        font-weight: 500;
                        transition: var(--transition);
                        white-space: nowrap;
                        min-height: 45px;
                    " onclick="addSelectedTraining()">
                        <i class="fas fa-plus"></i> Add Training
                    </button>
                </div>
            </div>

            <!-- NEW: Selected Trainings Display -->
            <div id="selectedTrainingsContainer" style="margin-top: 20px;">
                <h5 style="margin: 0 0 15px 0; color: var(--primary-color); font-size: 14px;">
                    <i class="fas fa-list"></i> Selected Training Programs:
                </h5>
                <div id="selectedTrainingsList" style="
                    min-height: 60px;
                    padding: 15px;
                    background-color: rgba(255, 255, 255, 0.8);
                    border-radius: 8px;
                    border: 1px dashed #ddd;
                ">
                    <div class="no-trainings-message" style="
                        text-align: center;
                        color: #666;
                        font-style: italic;
                        padding: 20px;
                    ">
                        <i class="fas fa-info-circle"></i> No training programs selected yet. Use the dropdown above to add trainings.
                    </div>
                </div>
            </div>

            <!-- KEEP YOUR EXISTING DEVELOPMENT AREAS LEGEND -->
            <div class="training-match-info" style="margin-top: 15px; font-size: 12px; color: #666;">
                <h5 style="margin: 5px 0; color: var(--primary-color); font-size: 13px;">
                    <i class="fas fa-target"></i> Top 5 Development Areas (Based on Q1-Q2 Feedback):
                </h5>
                <div id="developmentAreasLegend" style="font-style: italic; color: #888; font-size: 11px;">
                    Complete Q1 and Q2 feedback to see personalized training priorities based on your development areas.
                </div>
            </div>

            <!-- REMOVE THE OLD SINGLE SELECTED TRAINING DISPLAY -->
        </div>
    </div>
</fieldset>

<!-- Submit Button Container - Right Side -->
<div class="submit-button-container" style="text-align: right; margin-top: 30px;">
    <button id="submitMidYearIDP" type="submit" class="save-btn" disabled style="
        background-color: var(--primary-color);
        color: white;
        border: none;
        padding: 15px 30px;
        border-radius: var(--border-radius);
        cursor: pointer;
        font-weight: 600;
        transition: var(--transition);
        display: inline-flex;
        align-items: center;
        gap: 10px;
        font-size: 16px;
        min-width: 220px;
        justify-content: center;
        box-shadow: 0 4px 8px rgba(18, 74, 92, 0.3);
    ">
        <i class="fas fa-paper-plane"></i> Submit Mid-Year IDP
    </button>
</div>


<!-- Final-Year IDP Form with Improved Frontend -->
<section id="finalYearIDPForm" class="fade-out section" style="display: none;">
    <div class="idp-progress">
        <h3><i class="fas fa-chart-line"></i> Development Plan Progress</h3>
        <p>Complete all required fields to finalize your end-of-year Individual Development Plan.</p>
        <div class="progress-bar-container">
            <div class="progress-bar" id="finalYearIDPProgressBar" style="width: 0%"></div>
        </div>
        <div style="display: flex; justify-content: space-between; margin-top: 5px;">
            <span>0%</span>
            <span>100%</span>
        </div>
    </div>

    <div class="idp-header" style="background: linear-gradient(to right, rgba(18, 74, 92, 0.1), rgba(5, 156, 164, 0.05)); padding: 20px; border-radius: var(--border-radius); margin-bottom: 25px;">
        <h2><i class="fas fa-clipboard-check"></i> Final-Year Individual Development Plan (IDP)</h2>
        <p style="margin-top: 10px; color: #555;">
            The Final-Year IDP evaluates overall performance and development throughout the year
            and establishes the foundation for the next performance cycle.
        </p>
    </div>

    <form id="finalYearIDPFormDetails" method="POST" action="/linemanager/finalyear-idp/<%= user.userId %>" class="idp-form">
        <!-- Professional Competences -->
        <fieldset>
            <legend><i class="fas fa-briefcase"></i> PROFESSIONAL COMPETENCES</legend>

            <div class="form-group">
                <label for="finalProfStrengths">
                    <strong>STRENGTHS:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Identify technical skills and professional competencies that were successfully developed this year.</span>
                    </div>
                </label>
                <textarea id="finalProfStrengths" name="profStrengths" rows="4" placeholder="Describe technical competences achieved and strengthened during the year" onkeyup="updateFinalIDPProgress()"></textarea>
                <div class="char-counter"><span id="finalProfStrengthsCount">0</span> characters</div>
            </div>

            <div class="form-group">
                <label for="finalProfAreasForDevelopment">
                    <strong>AREAS FOR DEVELOPMENT:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Note specific technical or professional skills that still require attention in the coming year.</span>
                    </div>
                </label>
                <textarea id="finalProfAreasForDevelopment" name="profAreasForDevelopment" rows="4" placeholder="Describe remaining technical gaps that still need to be addressed" onkeyup="updateFinalIDPProgress()"></textarea>
                <div class="char-counter"><span id="finalProfAreasCount">0</span> characters</div>
            </div>

            <div class="form-group">
                <label for="finalProfActionsToTake">
                    <strong>ACTIONS TO TAKE:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Recommend concrete actions for the coming year, aligned with the 70-20-10 development model.</span>
                    </div>
                </label>
                <div class="development-model-guide" style="background-color: #f5f7fa; border-radius: 6px; padding: 10px; margin-bottom: 10px;">
                    <h4 style="margin-top: 0; font-size: 14px; color: var(--primary-color);">70-20-10 Development Model</h4>
                    <div style="display: flex; flex-wrap: wrap; gap: 10px; font-size: 13px;">
                        <div style="flex: 1; min-width: 180px;">
                            <strong>70% - Experiential Learning</strong>
                            <p style="margin: 5px 0;">On-the-job experiences, challenging assignments</p>
                        </div>
                        <div style="flex: 1; min-width: 180px;">
                            <strong>20% - Social Learning</strong>
                            <p style="margin: 5px 0;">Mentoring, coaching, feedback</p>
                        </div>
                        <div style="flex: 1; min-width: 180px;">
                            <strong>10% - Formal Learning</strong>
                            <p style="margin: 5px 0;">Courses, workshops, reading</p>
                        </div>
                    </div>
                </div>
                <textarea id="finalProfActionsToTake" name="profActionsToTake" rows="4" placeholder="Recommended actions to address remaining development needs for next year" onkeyup="updateFinalIDPProgress()"></textarea>
                <div class="char-counter"><span id="finalProfActionsCount">0</span> characters</div>
            </div>
        </fieldset>

        <!-- Leadership Competences -->
        <fieldset>
            <legend><i class="fas fa-users"></i> LEADERSHIP COMPETENCES</legend>

            <div class="form-group">
                <label for="finalLeaderStrengths">
                    <strong>STRENGTHS:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Identify leadership qualities and behaviors that improved during this year.</span>
                    </div>
                </label>
                <div class="leadership-model" style="display: flex; flex-wrap: wrap; gap: 8px; margin-bottom: 10px;">
                    <!-- Leadership tags area kept empty as requested -->
                </div>
                <textarea id="finalLeaderStrengths" name="leaderStrengths" rows="4" placeholder="Describe leadership competences developed this year" onkeyup="updateFinalIDPProgress()"></textarea>
                <div class="char-counter"><span id="finalLeaderStrengthsCount">0</span> characters</div>
            </div>

            <div class="form-group">
                <label for="finalLeaderAreasForDevelopment">
                    <strong>AREAS FOR DEVELOPMENT:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Note specific leadership behaviors or skills that still need improvement.</span>
                    </div>
                </label>
                <textarea id="finalLeaderAreasForDevelopment" name="leaderAreasForDevelopment" rows="4" placeholder="Describe leadership gaps that need further development" onkeyup="updateFinalIDPProgress()"></textarea>
                <div class="char-counter"><span id="finalLeaderAreasCount">0</span> characters</div>
            </div>

            <div class="form-group">
                <label for="finalLeaderActionsToTake">
                    <strong>ACTIONS TO TAKE:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Recommend concrete actions to improve leadership capabilities in the coming year.</span>
                    </div>
                </label>
                <textarea id="finalLeaderActionsToTake" name="leaderActionsToTake" rows="4" placeholder="Recommended actions to address leadership development needs for next year" onkeyup="updateFinalIDPProgress()"></textarea>
                <div class="char-counter"><span id="finalLeaderActionsCount">0</span> characters</div>
            </div>
        </fieldset>

        <!-- Career Planning -->
        <fieldset>
            <legend><i class="fas fa-road"></i> CAREER PLANNING</legend>

            <div class="form-group">
                <label for="finalNextRoleShortTerm">
                    <strong>SHORT-TERM GOALS:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Identify goals and potential roles for the next 1-2 years.</span>
                    </div>
                </label>
                <textarea id="finalNextRoleShortTerm" name="nextRoleShortTerm" rows="4" placeholder="Goals and target roles for the next 1-2 years" onkeyup="updateFinalIDPProgress()"></textarea>
                <div class="char-counter"><span id="finalNextRoleShortCount">0</span> characters</div>
            </div>

            <div class="form-group">
                <label for="finalNextRoleLongTerm">
                    <strong>LONG-TERM GOALS:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Outline career aspirations for the next 3-5 years.</span>
                    </div>
                </label>
                <textarea id="finalNextRoleLongTerm" name="nextRoleLongTerm" rows="4" placeholder="Career aspirations for the next 3-5 years" onkeyup="updateFinalIDPProgress()"></textarea>
                <div class="char-counter"><span id="finalNextRoleLongCount">0</span> characters</div>
            </div>

            <div class="form-group">
                <label for="finalNextRoleMobility">
                    <strong>MOBILITY AND FLEXIBILITY:</strong>
                    <div class="tooltip">
                        <i class="fas fa-info-circle tooltip-icon"></i>
                        <span class="tooltip-text">Indicate willingness to relocate, travel, or adapt to different work arrangements.</span>
                    </div>
                </label>
                <div class="mobility-options" style="margin-bottom: 10px;">
                    <!-- Mobility checkboxes area kept empty as requested -->
                </div>
                <textarea id="finalNextRoleMobility" name="nextRoleMobility" rows="4" placeholder="Willingness and ability to work in different locations, roles, or schedules" onkeyup="updateFinalIDPProgress()"></textarea>
                <div class="char-counter"><span id="finalNextRoleMobilityCount">0</span> characters</div>
            </div>
        </fieldset>

        <div class="submit-button-container">
            <button id="submitFinalYearIDP" type="submit" class="save-btn" disabled>
                <i class="fas fa-paper-plane"></i> Submit Final-Year IDP
            </button>
        </div>
    </form>
</section>

            <!-- JavaScript for page functionality -->
            <script>
// ===== UPDATED DYNAMIC TRAINING FUNCTIONALITY =====

// Training descriptions mapping - now loaded dynamically
let trainingDescriptions = {};
let trainingMatchTypes = {};
let selectedTrainings = [];


document.addEventListener('DOMContentLoaded', function() {
    console.log('Setting up enhanced feedback tabs...');
    
    // Get tab elements
    const summaryTab = document.getElementById('summaryTab');
    const answersTab = document.getElementById('answersTab');
    const summaryContent = document.getElementById('summaryContent');
    const answersContent = document.getElementById('answersContent');
    
    // Verify all elements exist
    if (!summaryTab || !answersTab || !summaryContent || !answersContent) {
        console.error('Missing tab elements:', {
            summaryTab: !!summaryTab,
            answersTab: !!answersTab,
            summaryContent: !!summaryContent,
            answersContent: !!answersContent
        });
        return;
    }
    
    // Summary tab click handler
    summaryTab.addEventListener('click', function() {
        console.log('Summary tab clicked');
        
        // Show summary, hide answers
        summaryContent.style.display = 'block';
        answersContent.style.display = 'none';
        
        // Update tab styles
        summaryTab.classList.add('active');
        summaryTab.style.backgroundColor = 'var(--primary-color)';
        summaryTab.style.color = 'white';
        answersTab.classList.remove('active');
        answersTab.style.backgroundColor = '#f1f1f1';
        answersTab.style.color = '#333';
    });
    
    // Individual answers tab click handler
    answersTab.addEventListener('click', function() {
        console.log('Individual Answers tab clicked');
        
        // Show answers, hide summary
        answersContent.style.display = 'block';
        summaryContent.style.display = 'none';
        
        // Update tab styles
        answersTab.classList.add('active');
        answersTab.style.backgroundColor = 'var(--primary-color)';
        answersTab.style.color = 'white';
        summaryTab.classList.remove('active');
        summaryTab.style.backgroundColor = '#f1f1f1';
        summaryTab.style.color = '#333';
        
        // Refresh individual answers display if data is available
        if (window.currentFeedbackData && window.currentFeedbackData.individualAnswers) {
            console.log('Refreshing individual answers display with', window.currentFeedbackData.individualAnswers.length, 'answers');
            displayFilteredAnswers(window.currentFeedbackData.individualAnswers);
            
            // Ensure filters are properly set up
            if (window.currentFeedbackData.responderFilterOptions && window.currentFeedbackData.questionFilterOptions) {
                setupEnhancedFilters(window.currentFeedbackData.responderFilterOptions, window.currentFeedbackData.questionFilterOptions);
            }
        } else {
            console.log('No feedback data available yet for individual answers');
        }
    });
    
    // Clear filters button handler
    const clearFiltersBtn = document.getElementById('clearFilters');
    if (clearFiltersBtn) {
        clearFiltersBtn.addEventListener('click', function() {
            console.log('Clear filters clicked');
            clearAllFilters();
        });
    }
    
    console.log('Enhanced feedback tabs initialized successfully');
});

// Function to export all answers (placeholder)
function exportAllAnswers() {
    if (!window.currentFeedbackData || !window.currentFeedbackData.individualAnswers) {
        alert('No data available to export');
        return;
    }
    
    console.log('Exporting answers for', window.currentFeedbackData.individualAnswers.length, 'responders');
    
    // Create CSV content
    let csvContent = "Responder Name,Job Title,Responder Type,Submitted Date,Objective,Rating,Comment,Skill,Skill Type,Skill Rating\n";
    
    window.currentFeedbackData.individualAnswers.forEach(answer => {
        const baseLine = `"${answer.responderName}","${answer.responderJobTitle}","${answer.responderType}","${answer.submittedDate || 'N/A'}"`;
        
        // Add objective answers
        if (answer.objectiveAnswers && answer.objectiveAnswers.length > 0) {
            answer.objectiveAnswers.forEach(obj => {
                csvContent += `${baseLine},"${obj.objectiveName || 'N/A'}","${obj.rating || 'N/A'}","${(obj.comment || 'N/A').replace(/"/g, '""')}","","",""\n`;
            });
        }
        
        // Add skill ratings
        if (answer.skillRatings && Object.keys(answer.skillRatings).length > 0) {
            Object.entries(answer.skillRatings).forEach(([skillName, skillData]) => {
                csvContent += `${baseLine},"","","","${skillName}","${skillData.skillType}","${skillData.rating}"\n`;
            });
        }
        
        // If no objectives or skills, add a line anyway
        if ((!answer.objectiveAnswers || answer.objectiveAnswers.length === 0) && 
            (!answer.skillRatings || Object.keys(answer.skillRatings).length === 0)) {
            csvContent += `${baseLine},"No feedback provided","","","","",""\n`;
        }
    });
    
    // Create and download the file
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `feedback_responses_${window.currentFeedbackData.quarter}_${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    // Show success message
    const message = document.createElement('div');
    message.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background-color: #4CAF50;
        color: white;
        padding: 12px 20px;
        border-radius: 4px;
        font-weight: 500;
        z-index: 10000;
        animation: fadeInOut 3s ease-in-out;
    `;
    message.innerHTML = '<i class="fas fa-download"></i> Export completed successfully!';
    document.body.appendChild(message);
    
    setTimeout(() => {
        if (document.body.contains(message)) {
            document.body.removeChild(message);
        }
    }, 3000);
}

function addSelectedTraining() {
    const dropdown = document.getElementById('suggestedTrainings');
    const selectedOption = dropdown.options[dropdown.selectedIndex];
    
    if (!selectedOption.value) {
        alert('Please select a training program first.');
        return;
    }
    
    const trainingId = selectedOption.value;
    const trainingName = selectedOption.dataset.name || selectedOption.text;
    const trainingDescription = selectedOption.dataset.description || 'No description available.';
    
    // Check if training is already selected
    if (selectedTrainings.find(t => t.trainingId === trainingId)) {
        alert('This training program is already selected.');
        return;
    }
    
    // Add to selected trainings array
    const trainingData = {
        trainingId: trainingId,
        trainingName: trainingName,
        trainingDescription: trainingDescription,
        remarks: ''
    };
    
    selectedTrainings.push(trainingData);
    
    // Reset dropdown
    dropdown.value = '';
    
    // Hide training details panel
    hideTrainingDetails();
    
    // Update display
    updateSelectedTrainingsDisplay();
    
    // Show success notification
    showTrainingAddedNotification(trainingName);
    
    console.log('Added training:', trainingData);
}

// Function to show training added notification
function showTrainingAddedNotification(trainingName) {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background-color: var(--success-color);
        color: white;
        padding: 12px 20px;
        border-radius: var(--border-radius);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        z-index: 10000;
        font-weight: 500;
        transform: translateX(100%);
        transition: transform 0.3s ease-in-out;
        max-width: 350px;
    `;
    notification.innerHTML = `<i class="fas fa-check-circle"></i> Training Added: ${trainingName}`;
    
    document.body.appendChild(notification);
    
    // Animate in
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);
    
    // Remove after 3 seconds
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (document.body.contains(notification)) {
                document.body.removeChild(notification);
            }
        }, 300);
    }, 3000);
}
// Function to remove selected training
function removeSelectedTraining(trainingId) {
    const trainingToRemove = selectedTrainings.find(t => t.trainingId === trainingId);
    selectedTrainings = selectedTrainings.filter(t => t.trainingId !== trainingId);
    updateSelectedTrainingsDisplay();
    
    if (trainingToRemove) {
        showTrainingRemovedNotification(trainingToRemove.trainingName);
    }
    
    console.log('Removed training:', trainingId);
}

// Function to show training removed notification
function showTrainingRemovedNotification(trainingName) {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background-color: var(--danger-color);
        color: white;
        padding: 12px 20px;
        border-radius: var(--border-radius);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        z-index: 10000;
        font-weight: 500;
        transform: translateX(100%);
        transition: transform 0.3s ease-in-out;
        max-width: 350px;
    `;
    notification.innerHTML = `<i class="fas fa-times-circle"></i> Training Removed: ${trainingName}`;
    
    document.body.appendChild(notification);
    
    // Animate in
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);
    
    // Remove after 3 seconds
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (document.body.contains(notification)) {
                document.body.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

// Function to update remarks for a training
function updateTrainingRemarks(trainingId, remarks) {
    const training = selectedTrainings.find(t => t.trainingId === trainingId);
    if (training) {
        training.remarks = remarks;
        console.log('Updated remarks for training:', trainingId, remarks);
    }
}
// Function to update the display of selected trainings (handles both edit and view-only modes)
function updateSelectedTrainingsDisplay() {
    const container = document.getElementById('selectedTrainingsList');
    
    if (!container) {
        console.error('Selected trainings container not found');
        return;
    }
    
    // Check if we're in view-only mode
    const isViewOnly = document.querySelector('.view-only-mode') !== null;
    
    if (selectedTrainings.length === 0) {
        container.innerHTML = `
            <div class="no-trainings-message" style="
                text-align: center;
                color: #666;
                font-style: italic;
                padding: 20px;
            ">
                <i class="fas fa-info-circle"></i> ${isViewOnly ? 'No training programs were selected.' : 'No training programs selected yet. Use the dropdown above to add trainings.'}
            </div>
        `;
        return;
    }
    
    let html = '';
    
    selectedTrainings.forEach((training, index) => {
        html += `
            <div class="selected-training-item" style="
                background: white;
                border: 1px solid #ddd;
                border-radius: 8px;
                padding: 15px;
                margin-bottom: 15px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                transition: var(--transition);
                position: relative;
                animation: fadeInUp 0.3s ease-out forwards;
            ">
                <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 10px;">
                    <div style="flex: 1;">
                        <h6 style="margin: 0 0 5px 0; color: var(--primary-color); font-size: 14px; font-weight: 600;">
                            <i class="fas fa-graduation-cap"></i> ${training.trainingName}
                        </h6>
                        <p style="margin: 0; color: #666; font-size: 12px; line-height: 1.4;">
                            ${training.trainingDescription}
                        </p>
                    </div>
                    ${!isViewOnly ? `
                    <button type="button" onclick="removeSelectedTraining('${training.trainingId}')" style="
                        background-color: var(--danger-color);
                        color: white;
                        border: none;
                        padding: 6px 10px;
                        border-radius: 4px;
                        cursor: pointer;
                        font-size: 12px;
                        margin-left: 10px;
                        transition: var(--transition);
                    " onmouseover="this.style.backgroundColor='#c82333'" onmouseout="this.style.backgroundColor='var(--danger-color)'">
                        <i class="fas fa-times"></i>
                    </button>
                    ` : ''}
                </div>
                
                <div style="margin-top: 10px;">
                    <label style="display: block; margin-bottom: 5px; font-size: 12px; font-weight: 500; color: var(--primary-color);">
                        <i class="fas fa-comment"></i> Remarks/Notes:
                    </label>
                    ${isViewOnly ? `
                        <div style="
                            padding: 8px;
                            background-color: #f5f5f5;
                            border-radius: 4px;
                            border: 1px solid #e1e5eb;
                            min-height: 40px;
                            font-size: 12px;
                            color: #555;
                        ">
                            ${training.remarks || 'No remarks provided.'}
                        </div>
                    ` : `
                        <textarea 
                            placeholder="Add any specific remarks or notes for this training program (e.g., priority level, expected outcomes, timeline)..."
                            style="
                                width: 100%;
                                min-height: 60px;
                                padding: 8px;
                                border: 1px solid #ddd;
                                border-radius: 4px;
                                font-size: 12px;
                                resize: vertical;
                                transition: var(--transition);
                            "
                            onchange="updateTrainingRemarks('${training.trainingId}', this.value)"
                            onfocus="this.style.borderColor='var(--secondary-color)'"
                            onblur="this.style.borderColor='#ddd'"
                            data-training-id="${training.trainingId}"
                        >${training.remarks}</textarea>
                    `}
                </div>
            </div>
        `;
    });
    
    container.innerHTML = html;
    
    console.log(`Displayed ${selectedTrainings.length} selected trainings (View-only: ${isViewOnly})`);
}
// Function to load existing selected trainings (for view/edit mode)
async function loadExistingSelectedTrainings(userId) {
    try {
        console.log('Loading existing selected trainings for user:', userId);
        const response = await fetch(`/linemanager/midyear-idp-trainings/${userId}`);
        const result = await response.json();
        
        if (result.success && result.data.suggestedTrainings && result.data.suggestedTrainings.length > 0) {
            selectedTrainings = result.data.suggestedTrainings.map(item => ({
                trainingId: item.trainingId.toString(),
                trainingName: item.trainings.trainingName,
                trainingDescription: item.trainings.trainingDesc || 'No description available.',
                remarks: item.remarks || ''
            }));
            
            updateSelectedTrainingsDisplay();
            console.log('Loaded existing selected trainings:', selectedTrainings);
        } else {
            console.log('No existing selected trainings found or error:', result.message);
            selectedTrainings = [];
            updateSelectedTrainingsDisplay();
        }
    } catch (error) {
        console.error('Error loading existing selected trainings:', error);
        selectedTrainings = [];
        updateSelectedTrainingsDisplay();
    }
}
// Function to get selected trainings data for form submission
function getSelectedTrainingsForSubmission() {
    return selectedTrainings.map(training => ({
        trainingId: training.trainingId,
        remarks: training.remarks
    }));
}

function initializeTrainingDescriptions() {
    const trainingSelect = document.getElementById('suggestedTrainings');
    if (!trainingSelect) return;
    
    // Clear existing descriptions
    trainingDescriptions = {};
    trainingMatchTypes = {};
    
    // Populate descriptions from select options
    Array.from(trainingSelect.options).forEach(option => {
        if (option.value && option.dataset.description) {
            trainingDescriptions[option.value] = option.dataset.description;
            trainingMatchTypes[option.value] = option.dataset.matchType || 'general';
        }
    });
    
    console.log('Initialized training descriptions:', trainingDescriptions);
    console.log('Initialized training match types:', trainingMatchTypes);
}
// Updated function to handle training selection for multiple training system
function handleTrainingSelection(selectElement) {
    const selectedValue = selectElement.value;
    const tooltipText = document.getElementById('trainingTooltipText');
    
    // Don't hide details panel immediately - let user see the details
    // hideTrainingDetails();
    
    if (selectedValue && selectElement.selectedIndex > 0) {
        const selectedOption = selectElement.options[selectElement.selectedIndex];
        
        // Get training details
        const trainingName = selectedOption.dataset.name || selectedOption.text.replace(/[⭐🎯🔧]$/, '').trim();
        const description = selectedOption.dataset.description || 'No description available.';
        const matchType = selectedOption.dataset.matchType || 'general';
        
        // Parse objectives and skills from data attributes
        let objectives = [];
        let skills = [];
        
        try {
            objectives = JSON.parse(selectedOption.dataset.objectives || '[]');
            skills = JSON.parse(selectedOption.dataset.skills || '[]');
        } catch (e) {
            console.error('Error parsing training details:', e);
        }
        
        // Build enhanced tooltip for multiple selection
        let tooltipContent = `<strong>${trainingName}</strong><br><br>${description}<br><br>`;
        
        // Add objectives section
        if (objectives.length > 0) {
            tooltipContent += `<strong>📋 Covered Objectives (${objectives.length}):</strong><br>`;
            objectives.forEach(obj => {
                tooltipContent += `• ${obj.objectiveDescrpt}`;
                if (obj.objectiveKPI) {
                    tooltipContent += ` (${obj.objectiveKPI})`;
                }
                tooltipContent += `<br>`;
            });
            tooltipContent += `<br>`;
        }
        
        // Add skills section
        if (skills.length > 0) {
            tooltipContent += `<strong>🔧 Developed Skills (${skills.length}):</strong><br>`;
            
            const hardSkills = skills.filter(skill => skill.jobReqSkillType === 'Hard');
            const softSkills = skills.filter(skill => skill.jobReqSkillType === 'Soft');
            
            if (hardSkills.length > 0) {
                tooltipContent += `<em>Hard Skills:</em> ${hardSkills.map(s => s.jobReqSkillName).join(', ')}<br>`;
            }
            
            if (softSkills.length > 0) {
                tooltipContent += `<em>Soft Skills:</em> ${softSkills.map(s => s.jobReqSkillName).join(', ')}<br>`;
            }
            
            tooltipContent += `<br>`;
        }
        
        // Check if training is already selected
        const alreadySelected = selectedTrainings.find(t => t.trainingId === selectedValue);
        
        if (alreadySelected) {
            tooltipContent += `<em style="color: #ff9800;">⚠️ This training is already selected</em><br><br>`;
        }
        
        // Add priority system based on lacking areas (if your function exists)
        if (typeof getTrainingPriorityInfo === 'function') {
            const priorityInfo = getTrainingPriorityInfo(selectedOption);
            tooltipContent += `<em style="color: ${priorityInfo.color};">${priorityInfo.text}</em><br><br>`;
        }
        
        // Add instruction for multiple selection
        tooltipContent += `<em style="color: var(--success-color);">💡 Click "Add Training" to include this in your selection</em>`;
        
        if (tooltipText) {
            tooltipText.innerHTML = tooltipContent;
        }
        
        // Add selected styling but don't auto-add to selection
        selectElement.classList.add('training-selected');
        
        // Show training details panel
        showTrainingDetails();
        
        console.log(`Viewing training details: ${trainingName} (ID: ${selectedValue})`);
        
    } else {
        // Reset tooltip to default
        if (tooltipText) {
            tooltipText.innerHTML = `<strong>Select a training</strong><br>Choose from our recommended training programs that address your development areas.`;
        }
        selectElement.classList.remove('training-selected');
        
        // Hide details panel
        hideTrainingDetails();
    }
}


// NEW: Function to get training priority based on lacking areas
function getTrainingPriorityInfo(trainingOption) {
    if (!midYearFeedbackData || !midYearFeedbackData.categorizedFeedback) {
        return {
            priority: 'unknown',
            text: 'Training Available',
            color: '#666'
        };
    }
    
    let objectives = [];
    let skills = [];
    
    try {
        objectives = JSON.parse(trainingOption.dataset.objectives || '[]');
        skills = JSON.parse(trainingOption.dataset.skills || '[]');
    } catch (e) {
        console.error('Error parsing training data for priority calculation:', e);
        return {
            priority: 'unknown',
            text: 'Training Available',
            color: '#666'
        };
    }
    
    const lackingAreas = [
        ...midYearFeedbackData.categorizedFeedback.average,
        ...midYearFeedbackData.categorizedFeedback.belowAverage
    ];
    
    let matchCount = 0;
    let criticalMatchCount = 0; // Below average (1-2 stars)
    
    // Check objectives matches
    objectives.forEach(obj => {
        const match = lackingAreas.find(area => 
            area.type === 'objective' && area.objectiveId === obj.objectiveId
        );
        if (match) {
            matchCount++;
            if (match.averageRating < 3) {
                criticalMatchCount++;
            }
        }
    });
    
    // Check skills matches
    skills.forEach(skill => {
        const match = lackingAreas.find(area => 
            area.type === 'skill' && area.jobReqSkillId === skill.jobReqSkillId
        );
        if (match) {
            matchCount++;
            if (match.averageRating < 3) {
                criticalMatchCount++;
            }
        }
    });
    
    // Determine priority
    if (criticalMatchCount > 0) {
        return {
            priority: 'critical',
            text: `🔥 High Priority - Addresses ${criticalMatchCount} critical development area${criticalMatchCount > 1 ? 's' : ''}`,
            color: '#dc3545'
        };
    } else if (matchCount > 0) {
        return {
            priority: 'recommended',
            text: `⚡ Recommended - Addresses ${matchCount} development area${matchCount > 1 ? 's' : ''}`,
            color: '#ffc107'
        };
    } else {
        return {
            priority: 'available',
            text: '✓ Available - General professional development',
            color: '#28a745'
        };
    }
}

function updateTrainingLegendWithTop5() {
    const legendContainer = document.querySelector('.training-match-info');
    if (!legendContainer) return;
    
    if (!midYearFeedbackData || !midYearFeedbackData.categorizedFeedback) {
        legendContainer.innerHTML = `
            <h5 style="margin: 5px 0; color: var(--primary-color); font-size: 13px;">Training Priorities:</h5>
            <div style="font-style: italic; color: #888; font-size: 11px;">
                Complete Q1 and Q2 feedback to see personalized training priorities based on your development areas.
            </div>
        `;
        return;
    }
    
    // Get top 5 lacking areas (lowest ratings first)
    const lackingAreas = [
        ...midYearFeedbackData.categorizedFeedback.average,
        ...midYearFeedbackData.categorizedFeedback.belowAverage
    ].sort((a, b) => a.averageRating - b.averageRating).slice(0, 5);
    
    let legendHTML = `
        <h5 style="margin: 5px 0; color: var(--primary-color); font-size: 13px;">
            <i class="fas fa-target"></i> Top 5 Development Areas (Based on Q1-Q2 Feedback):
        </h5>
    `;
    
    if (lackingAreas.length === 0) {
        legendHTML += `
            <div style="font-style: italic; color: #888; font-size: 11px;">
                No development areas identified. All objectives and skills are performing well!
            </div>
        `;
    } else {
        legendHTML += `<div style="display: flex; flex-direction: column; gap: 8px;">`;
        
        lackingAreas.forEach((area, index) => {
            const name = area.type === 'objective' ? area.objectiveDescrpt : area.jobReqSkillName;
            const type = area.type === 'objective' ? 'Objective' : `${area.jobReqSkillType} Skill`;
            const rating = area.averageRating.toFixed(1);
            const ratingColor = area.averageRating < 3 ? '#dc3545' : '#ffc107';
            
            legendHTML += `
                <div style="display: flex; align-items: center; gap: 10px; padding: 6px; background-color: rgba(255, 255, 255, 0.8); border-radius: 4px; border-left: 3px solid ${ratingColor};">
                    <span style="font-weight: bold; color: ${ratingColor}; min-width: 20px;">${index + 1}.</span>
                    <div style="flex: 1;">
                        <div style="font-size: 12px; font-weight: 500; color: var(--primary-color);">${truncateText(name, 40)}</div>
                        <div style="font-size: 10px; color: #666;">${type} • Rating: ${rating}/5.0</div>
                    </div>
                </div>
            `;
        });
        
        legendHTML += `</div>`;
        
        legendHTML += `
            <div style="margin-top: 8px; font-style: italic; color: #666; font-size: 11px;">
                💡 Trainings that address these areas will be prioritized in recommendations.
            </div>
        `;
    }
    
    legendContainer.innerHTML = legendHTML;
}
function showTrainingDetails() {
    const trainingSelect = document.getElementById('suggestedTrainings');
    const detailsPanel = document.getElementById('trainingDetailsPanel');
    const detailsList = document.getElementById('trainingDetailsList');
    
    if (!trainingSelect || !detailsPanel || !detailsList) return;
    
    console.log('Showing training details panel with priority information...');
    
    // Build the details content
    let detailsHTML = '<h4 style="margin: 0 0 15px 0; color: var(--primary-color); font-size: 16px;">Available Training Programs</h4>';
    
    // Get all training options and calculate priorities
    const options = Array.from(trainingSelect.options).slice(1);
    
    if (options.length === 0) {
        detailsHTML += '<p style="color: #666; font-style: italic;">No training programs available for your role.</p>';
    } else {
        // Sort options by priority (critical first, then recommended, then available)
        const optionsWithPriority = options.map(option => {
            const priorityInfo = getTrainingPriorityInfo(option);
            return { option, priorityInfo };
        }).sort((a, b) => {
            const priorityOrder = { 'critical': 0, 'recommended': 1, 'available': 2, 'unknown': 3 };
            return priorityOrder[a.priorityInfo.priority] - priorityOrder[b.priorityInfo.priority];
        });
        
        optionsWithPriority.forEach(({ option, priorityInfo }, index) => {
            if (option.value) {
                try {
                    const objectives = JSON.parse(option.dataset.objectives || '[]');
                    const skills = JSON.parse(option.dataset.skills || '[]');
                    const description = option.dataset.description || 'No description available.';
                    
                    // Get clean training name
                    const trainingName = option.text.replace(/[⭐🎯🔧]$/, '').trim();
                    
                    // Priority styling
                    let borderColor = priorityInfo.color;
                    let priorityBadge = `<span style="background: ${priorityInfo.color}; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px; font-weight: bold;">${priorityInfo.priority === 'critical' ? '🔥 High Priority' : priorityInfo.priority === 'recommended' ? '⚡ Recommended' : '✓ Available'}</span>`;
                    
                    detailsHTML += `
                        <div class="training-detail-item" style="
                            border: 1px solid ${borderColor};
                            border-radius: 8px;
                            padding: 15px;
                            margin-bottom: 15px;
                            background: linear-gradient(135deg, rgba(255,255,255,0.9), rgba(245,247,250,0.9));
                            cursor: pointer;
                            transition: var(--transition);
                        " onclick="selectTrainingFromPanel('${option.value}')" onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 4px 12px rgba(0,0,0,0.1)'" onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='none'">
                            
                            <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 10px;">
                                <h5 style="margin: 0; color: var(--primary-color); font-size: 14px; font-weight: 600;">${trainingName}</h5>
                                ${priorityBadge}
                            </div>
                            
                            <div style="margin-bottom: 12px; padding: 8px; background-color: rgba(${priorityInfo.color === '#dc3545' ? '220, 53, 69' : priorityInfo.color === '#ffc107' ? '255, 193, 7' : '40, 167, 69'}, 0.1); border-radius: 4px; font-size: 11px; color: ${priorityInfo.color};">
                                ${priorityInfo.text}
                            </div>
                            
                            <p style="margin: 0 0 12px 0; font-size: 12px; color: #666; line-height: 1.4;">${description}</p>
                            
                            ${objectives.length > 0 ? `
                                <div style="margin-bottom: 10px;">
                                    <strong style="font-size: 12px; color: var(--primary-color);">📋 Objectives (${objectives.length}):</strong>
                                    <div style="margin-top: 5px;">
                                        ${objectives.map(obj => `
                                            <span style="
                                                display: inline-block;
                                                background: rgba(33, 150, 243, 0.1);
                                                color: #1976D2;
                                                padding: 3px 8px;
                                                border-radius: 12px;
                                                font-size: 11px;
                                                margin: 2px;
                                                border: 1px solid rgba(33, 150, 243, 0.2);
                                            ">${obj.objectiveDescrpt}</span>
                                        `).join('')}
                                    </div>
                                </div>
                            ` : ''}
                            
                            ${skills.length > 0 ? `
                                <div>
                                    <strong style="font-size: 12px; color: var(--primary-color);">🔧 Skills (${skills.length}):</strong>
                                    <div style="margin-top: 5px;">
                                        ${skills.map(skill => {
                                            const isHard = skill.jobReqSkillType === 'Hard';
                                            const bgColor = isHard ? 'rgba(255, 152, 0, 0.1)' : 'rgba(76, 175, 80, 0.1)';
                                            const textColor = isHard ? '#F57C00' : '#388E3C';
                                            const borderColor = isHard ? 'rgba(255, 152, 0, 0.2)' : 'rgba(76, 175, 80, 0.2)';
                                            
                                            return `
                                                <span style="
                                                    display: inline-block;
                                                    background: ${bgColor};
                                                    color: ${textColor};
                                                    padding: 3px 8px;
                                                    border-radius: 12px;
                                                    font-size: 11px;
                                                    margin: 2px;
                                                    border: 1px solid ${borderColor};
                                                ">${skill.jobReqSkillName} <em>(${skill.jobReqSkillType})</em></span>
                                            `;
                                        }).join('')}
                                    </div>
                                </div>
                            ` : ''}
                        </div>
                    `;
                } catch (e) {
                    console.error('Error parsing training data for option:', option.value, e);
                }
            }
        });
    }
    
    detailsList.innerHTML = detailsHTML;
    detailsPanel.style.display = 'block';
    
    // Add click-outside handler to close panel
    setTimeout(() => {
        document.addEventListener('click', handleClickOutsideDetailsPanel);
    }, 100);
}



// Function to select training from the details panel
function selectTrainingFromPanel(trainingId) {
    const trainingSelect = document.getElementById('suggestedTrainings');
    const detailsPanel = document.getElementById('trainingDetailsPanel');
    
    if (trainingSelect && trainingId) {
        trainingSelect.value = trainingId;
        handleTrainingSelection(trainingSelect);
        
        // Close the details panel
        if (detailsPanel) {
            detailsPanel.style.display = 'none';
        }
        
        // Remove click-outside handler
        document.removeEventListener('click', handleClickOutsideDetailsPanel);
        
        console.log('Training selected from panel:', trainingId);
    }
}

function handleClickOutsideDetailsPanel(event) {
    const detailsPanel = document.getElementById('trainingDetailsPanel');
    const trainingSelect = document.getElementById('suggestedTrainings');
    const trainingContainer = document.querySelector('.training-dropdown-container');
    
    if (detailsPanel && trainingContainer) {
        // Check if click is outside the training container
        if (!trainingContainer.contains(event.target)) {
            detailsPanel.style.display = 'none';
            document.removeEventListener('click', handleClickOutsideDetailsPanel);
        }
    }
}

// Function to hide training details panel
function hideTrainingDetails() {
    const detailsPanel = document.getElementById('trainingDetailsPanel');
    if (detailsPanel) {
        detailsPanel.style.display = 'none';
        document.removeEventListener('click', handleClickOutsideDetailsPanel);
    }
}



// Enhanced function to show selected training display
function showSelectedTrainingDisplay(trainingName, description, matchType) {
    const displayElement = document.getElementById('selectedTrainingDisplay');
    const nameElement = document.getElementById('selectedTrainingName');
    const descriptionElement = document.getElementById('selectedTrainingDescription');
    const matchBadgeElement = document.getElementById('selectedTrainingMatchBadge');
    
    if (displayElement && nameElement && descriptionElement && matchBadgeElement) {
        nameElement.textContent = trainingName;
        descriptionElement.textContent = description;
        
        // Set match badge
        let badgeText = '';
        let badgeColor = '';
        
        switch(matchType) {
            case 'both':
                badgeText = 'Perfect Match';
                badgeColor = '#4CAF50';
                break;
            case 'objective':
                badgeText = 'Objective Match';
                badgeColor = '#2196F3';
                break;
            case 'skill':
                badgeText = 'Skill Match';
                badgeColor = '#FF9800';
                break;
            default:
                badgeText = 'Available';
                badgeColor = '#666';
        }
        
        matchBadgeElement.textContent = badgeText;
        matchBadgeElement.style.backgroundColor = badgeColor;
        matchBadgeElement.style.color = 'white';
        
        displayElement.style.display = 'block';
        displayElement.classList.add('show');
    }
}



// Enhanced function to show training selection confirmation
function showTrainingConfirmation(trainingName, matchType) {
    // Create a temporary notification
    const notification = document.createElement('div');
    
    let matchIcon = '';
    let bgColor = '';
    
    switch(matchType) {
        case 'both':
            matchIcon = '<i class="fas fa-star"></i>';
            bgColor = '#4CAF50';
            break;
        case 'objective':
            matchIcon = '<i class="fas fa-bullseye"></i>';
            bgColor = '#2196F3';
            break;
        case 'skill':
            matchIcon = '<i class="fas fa-cogs"></i>';
            bgColor = '#FF9800';
            break;
        default:
            matchIcon = '<i class="fas fa-check-circle"></i>';
            bgColor = 'var(--success-color)';
    }
    
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background-color: ${bgColor};
        color: white;
        padding: 12px 20px;
        border-radius: var(--border-radius);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        z-index: 10000;
        font-weight: 500;
        transform: translateX(100%);
        transition: transform 0.3s ease-in-out;
    `;
    notification.innerHTML = `${matchIcon} Training Selected: ${trainingName}`;
    
    document.body.appendChild(notification);
    
    // Animate in
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);
    
    // Remove after 3 seconds
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            document.body.removeChild(notification);
        }, 300);
    }, 3000);
}



// Enhanced function to get selected training data with objectives and skills
function getSelectedTrainingData() {
    const trainingSelect = document.getElementById('suggestedTrainings');
    if (!trainingSelect || !trainingSelect.value) {
        return null;
    }
    
    const selectedOption = trainingSelect.options[trainingSelect.selectedIndex];
    
    let objectives = [];
    let skills = [];
    
    try {
        objectives = JSON.parse(selectedOption.dataset.objectives || '[]');
        skills = JSON.parse(selectedOption.dataset.skills || '[]');
    } catch (e) {
        console.error('Error parsing training details:', e);
    }
    
    return {
        trainingId: trainingSelect.value,
        trainingName: selectedOption.text.split(' | ')[0], // Get just the training name
        description: selectedOption.dataset.description || '',
        matchType: selectedOption.dataset.matchType || 'general',
        objectives: objectives,
        skills: skills,
        objectiveCount: objectives.length,
        skillCount: skills.length
    };
}


// Function to get selected training ID (database ID)
function getSelectedTrainingId() {
    const trainingSelect = document.getElementById('suggestedTrainings');
    return trainingSelect ? trainingSelect.value : '';
}

// Function to get selected training name (display text)
function getSelectedTrainingName() {
    const trainingSelect = document.getElementById('suggestedTrainings');
    if (trainingSelect && trainingSelect.value) {
        return trainingSelect.options[trainingSelect.selectedIndex].text;
    }
    return '';
}
async function submitMidYearIDPFormWithTraining(event) {
    event.preventDefault();
    
    console.log("Submitting Mid-Year IDP form with multiple training selections...");
    
    // Validate the form
    if (!validateIDPForm('mid')) {
        return;
    }
    
    // Get form data including selected trainings
    const formData = {
        profStrengths: document.getElementById("profStrengths").value,
        profAreasForDevelopment: document.getElementById("profAreasForDevelopment").value,
        profActionsToTake: document.getElementById("profActionsToTake").value,
        leaderStrengths: document.getElementById("leaderStrengths").value,
        leaderAreasForDevelopment: document.getElementById("leaderAreasForDevelopment").value,
        leaderActionsToTake: document.getElementById("leaderActionsToTake").value,
        nextRoleShortTerm: document.getElementById("nextRoleShortTerm").value,
        nextRoleLongTerm: document.getElementById("nextRoleLongTerm").value,
        nextRoleMobility: document.getElementById("nextRoleMobility").value,
        suggestedTrainings: getSelectedTrainingsForSubmission() // NEW: Multiple trainings with remarks
    };
    
    console.log("Form data with multiple training selections:", formData);
    console.log("Selected trainings count:", selectedTrainings.length);
    
    // Disable the submit button and show loading state
    const submitButton = document.getElementById("submitMidYearIDP");
    if (submitButton) {
        submitButton.disabled = true;
        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Submitting...';
    }
    
    try {
        // Submit the form using AJAX
        const response = await fetch(`/linemanager/midyear-idp/${userId}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            body: JSON.stringify(formData)
        });
        
        if (!response.ok) {
            throw new Error(`Server responded with status ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            let successMessage = "Mid-Year IDP saved successfully!";
            if (selectedTrainings.length > 0) {
                successMessage += `\n\nSelected ${selectedTrainings.length} training program(s):`;
                selectedTrainings.forEach(training => {
                    successMessage += `\n• ${training.trainingName}`;
                    if (training.remarks) {
                        successMessage += ` (${training.remarks.substring(0, 50)}${training.remarks.length > 50 ? '...' : ''})`;
                    }
                });
            }
            
            alert(successMessage);
            
            // Update viewState to reflect the new status
            viewState.viewOnlyStatus.midyearidp = true;
            
            // Update the UI based on the new state
            updateStepperAccessibility();
            
            // Redirect to refresh the page
            window.location.href = `/linemanager/records-performance-tracker/${userId}`;
        } else {
            alert("Error saving Mid-Year IDP: " + (result.message || "Unknown error"));
            
            // Re-enable the submit button
            if (submitButton) {
                submitButton.disabled = false;
                submitButton.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Mid-Year IDP';
            }
        }
    } catch (error) {
        console.error("Error submitting Mid-Year IDP:", error);
        alert("An error occurred while submitting the Mid-Year IDP. Please try again.");
        
        // Re-enable the submit button
        if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Mid-Year IDP';
        }
    }
}
// Function to initialize training dropdown functionality
function initializeTrainingDropdown() {
    // Initialize training descriptions and match types first
    initializeTrainingDescriptions();
    
    // Add hover effect to training tooltip
    const trainingTooltip = document.querySelector('.training-tooltip');
    const tooltipText = document.getElementById('trainingTooltipText');
    
    if (trainingTooltip && tooltipText) {
        trainingTooltip.addEventListener('mouseenter', function() {
            tooltipText.style.visibility = 'visible';
            tooltipText.style.opacity = '1';
        });
        
        trainingTooltip.addEventListener('mouseleave', function() {
            tooltipText.style.visibility = 'hidden';
            tooltipText.style.opacity = '0';
        });
    }
    
    // Initialize training dropdown
    const trainingSelect = document.getElementById('suggestedTrainings');
    if (trainingSelect) {
        // Set default tooltip
        if (tooltipText) {
            tooltipText.innerHTML = `<strong>Select a training</strong><br>Choose from our recommended training programs that address your development areas.`;
        }
        
        // Add change event listener
        trainingSelect.addEventListener('change', function() {
            handleTrainingSelection(this);
        });
        
        console.log('Training dropdown initialized successfully');
    } else {
        console.warn('Training dropdown element not found');
    }
}


// Function to reset training selection
function resetTrainingSelection() {
    const trainingSelect = document.getElementById('suggestedTrainings');
    const tooltipText = document.getElementById('trainingTooltipText');
    
    if (trainingSelect) {
        trainingSelect.value = '';
        trainingSelect.classList.remove('training-selected', 'training-animation');
    }
    
    if (tooltipText) {
        tooltipText.innerHTML = `<strong>Select a training</strong><br>Choose from our recommended training programs that match your job objectives and required skills.`;
    }
    
    hideSelectedTrainingDisplay();
}


// Function to pre-select a training by ID (useful for loading saved data)
function setSelectedTrainingById(trainingId) {
    const trainingSelect = document.getElementById('suggestedTrainings');
    if (trainingSelect && trainingId) {
        trainingSelect.value = trainingId;
        handleTrainingSelection(trainingSelect);
    }
}

// Function to get all available trainings from the dropdown
function getAvailableTrainingsFromSelect() {
    const trainingSelect = document.getElementById('suggestedTrainings');
    if (!trainingSelect) return [];
    
    return Array.from(trainingSelect.options)
        .filter(option => option.value)
        .map(option => ({
            id: option.value,
            name: option.text,
            description: option.dataset.description || '',
            matchType: option.dataset.matchType || 'general'
        }));
}


// Function to set training dropdown to view-only mode
function setTrainingDropdownViewOnly(isViewOnly) {
    const trainingSelect = document.getElementById('suggestedTrainings');
    const addTrainingBtn = document.getElementById('addTrainingBtn');
    const trainingContainer = document.querySelector('.training-selection-container');
    
    if (!trainingSelect || !trainingContainer) return;
    
    if (isViewOnly) {
        // Disable the dropdown and add button
        trainingSelect.disabled = true;
        trainingSelect.style.backgroundColor = '#f5f5f5';
        trainingSelect.style.border = '1px solid #e1e5eb';
        trainingSelect.style.cursor = 'not-allowed';
        
        if (addTrainingBtn) {
            addTrainingBtn.disabled = true;
            addTrainingBtn.style.backgroundColor = '#ccc';
            addTrainingBtn.style.cursor = 'not-allowed';
            addTrainingBtn.innerHTML = '<i class="fas fa-lock"></i> View Only';
        }
        
        // Update label to indicate view-only mode
        const label = trainingContainer.querySelector('label');
        if (label) {
            label.innerHTML = '<i class="fas fa-graduation-cap"></i> Selected Training Programs:';
        }
        
        // Hide the dropdown container since we're in view-only mode
        const dropdownContainer = document.querySelector('.training-dropdown-container');
        if (dropdownContainer) {
            dropdownContainer.style.display = 'none';
        }
        
        console.log('Training dropdown set to view-only mode');
    } else {
        // Enable the dropdown and add button
        trainingSelect.disabled = false;
        trainingSelect.style.backgroundColor = 'white';
        trainingSelect.style.border = '2px solid #ddd';
        trainingSelect.style.cursor = 'pointer';
        
        if (addTrainingBtn) {
            addTrainingBtn.disabled = false;
            addTrainingBtn.style.backgroundColor = 'var(--success-color)';
            addTrainingBtn.style.cursor = 'pointer';
            addTrainingBtn.innerHTML = '<i class="fas fa-plus"></i> Add Training';
        }
        
        // Reset label
        const label = trainingContainer.querySelector('label');
        if (label) {
            label.innerHTML = '<i class="fas fa-search"></i> Choose Training Program:';
        }
        
        // Show the dropdown container
        const dropdownContainer = document.querySelector('.training-dropdown-container');
        if (dropdownContainer) {
            dropdownContainer.style.display = 'block';
        }
        
        console.log('Training dropdown set to edit mode');
    }
}

// Function to get training recommendations summary
function getTrainingRecommendationsSummary() {
    const trainings = getAvailableTrainingsFromSelect();
    
    const summary = {
        total: trainings.length,
        perfectMatch: trainings.filter(t => t.matchType === 'both').length,
        objectiveMatch: trainings.filter(t => t.matchType === 'objective').length,
        skillMatch: trainings.filter(t => t.matchType === 'skill').length,
        general: trainings.filter(t => t.matchType === 'general').length
    };
    
    return summary;
}

// Enhanced DOMContentLoaded event listener
document.addEventListener('DOMContentLoaded', function() {
    // Initialize training dropdown
    initializeTrainingDropdown();
    
    // Update the existing submitMidYearIDPForm function to use the new enhanced version
    if (typeof submitMidYearIDPForm !== 'undefined') {
        // Store reference to original function if needed
        window.originalSubmitMidYearIDPForm = submitMidYearIDPForm;
        // Replace with enhanced version
        window.submitMidYearIDPForm = submitMidYearIDPFormWithTraining;
        
        console.log('Enhanced Mid-Year IDP submission function loaded');
    }
    
    // If the form is already visible, ensure training dropdown is ready
    const midYearIDPForm = document.getElementById("midYearIDPForm");
    if (midYearIDPForm && midYearIDPForm.style.display !== 'none') {
        setTimeout(() => {
            initializeTrainingDropdown();
            console.log('Training dropdown re-initialized for visible form');
        }, 100);
    }
    
    console.log("Performance tracker stepper system with enhanced priority-based training dropdown initialized.");
});
// Export functions for global access
window.handleTrainingSelection = handleTrainingSelection;
window.getSelectedTrainingId = getSelectedTrainingId;
window.getSelectedTrainingName = getSelectedTrainingName;
window.getSelectedTrainingData = getSelectedTrainingData;
window.resetTrainingSelection = resetTrainingSelection;
window.setSelectedTrainingById = setSelectedTrainingById;
window.getAvailableTrainingsFromSelect = getAvailableTrainingsFromSelect;
window.setTrainingDropdownViewOnly = setTrainingDropdownViewOnly;
window.getTrainingRecommendationsSummary = getTrainingRecommendationsSummary;
window.submitMidYearIDPFormWithTraining = submitMidYearIDPFormWithTraining;
window.loadMidYearFeedbackAggregates = loadMidYearFeedbackAggregates;
window.updateTrainingLegendWithTop5 = updateTrainingLegendWithTop5;
window.initializeTrainingDropdown = initializeTrainingDropdown;
window.navigateToMidYearIDP = navigateToMidYearIDP;
window.refreshFeedbackDataOnYearChange = refreshFeedbackDataOnYearChange;
window.submitMidYearIDPFormWithTraining = submitMidYearIDPFormWithTraining;

// Initialize variables
let currentStep = 0; // Track the current step
let viewState = {}; // Store view state data
let userId = ''; // Store user ID
let jobId = ''; // Store job ID
let submittedObjectives = []; // Store submitted objectives
let hardSkills = []; // Store hard skills
let softSkills = []; // Store soft skills
let midYearIDPData = null; // Store mid-year IDP data
let finalYearIDPData = null; // Store final-year IDP data
let midYearFeedbackData = null; // Global variable to store Mid-Year feedback data


// Function to initialize all variables and setup from viewState
function initializeFromViewState() {
    // Parse viewState back into an object
    const viewStateElement = document.getElementById('viewState');
    if (!viewStateElement) {
        console.error("ViewState element not found");
        return;
    }
    
    try {
        viewState = JSON.parse(viewStateElement.getAttribute('data-viewstate'));
        userId = viewState.userId || '<%= user.userId %>';
        jobId = viewState.jobId || '';
        submittedObjectives = viewState.submittedObjectives || [];
        hardSkills = viewState.hardSkills || [];
        softSkills = viewState.softSkills || [];
        
        console.log("Initialized from viewState:", viewState);
        console.log("User ID:", userId);
        console.log("Job ID:", jobId);
        console.log("Submitted Objectives:", submittedObjectives);
        console.log("Hard Skills:", hardSkills);
        console.log("Soft Skills:", softSkills);
        
        // Initialize form values
        initializeFormValues();
    } catch (error) {
        console.error("Error parsing viewState:", error);
    }
}

// Function to initialize form values
function initializeFormValues() {
    // Set jobId from viewState if it's available
    const jobIdField = document.getElementById("jobId");
    if (jobIdField && viewState && viewState.jobId) {
        jobIdField.value = viewState.jobId;
        console.log("Set jobId from viewState:", viewState.jobId);
    } else {
        console.warn("Could not initialize jobId from viewState");
    }
}

function updateStepperAccessibility() {
    // Get all stepper elements
    const objectivesButton = document.getElementById("objectivesButton");
    const feedbackQ1Button = document.getElementById("feedbackButtonQ1");
    const feedbackQ2Button = document.getElementById("feedbackButtonQ2");
    const midYearIDPButton = document.getElementById("midYearIDP");
    const feedbackQ3Button = document.getElementById("feedbackButtonQ3");
    const feedbackQ4Button = document.getElementById("feedbackButtonQ4");
    const finalYearIDPButton = document.getElementById("finalYearIDP");
    
    // Check if we have the required data to make decisions
    if (!viewState || !viewState.viewOnlyStatus) {
        console.error("View state data is missing or incomplete");
        return;
    }
    
    // Helper function to update step appearance
    function updateStepStatus(stepElement, isAccessible, isViewOnly, statusText = null) {
        if (!stepElement) return;
        
        // Remove all previous classes
        stepElement.classList.remove('accessible', 'disabled', 'view-only');
        
        if (isAccessible) {
            stepElement.classList.add('accessible');
            
            if (isViewOnly) {
                stepElement.classList.add('view-only');
                
                // Update status badge
                const statusBadge = stepElement.querySelector('.status-badge');
                if (statusBadge) {
                    statusBadge.textContent = '(View-Only)';
                    statusBadge.style.color = '#4CAF50';
                }
            } else {
                // Update status badge
                const statusBadge = stepElement.querySelector('.status-badge');
                if (statusBadge) {
                    statusBadge.textContent = '(Editable)';
                    statusBadge.style.color = '#2196F3';
                }
            }
        } else {
            stepElement.classList.add('disabled');
            
            // Update status badge for disabled steps
            const statusBadge = stepElement.querySelector('.status-badge');
            if (statusBadge) {
                statusBadge.textContent = statusText || '(Locked)';
                statusBadge.style.color = '#999';
            }
            
            // Update notice for disabled steps
            let notice = stepElement.querySelector('.notice');
            if (!notice && stepElement !== objectivesButton) {
                notice = document.createElement('div');
                notice.className = 'notice';
                notice.style.cssText = 'font-size: 0.8em; color: #999; margin-top: 5px; text-align: center;';
                stepElement.appendChild(notice);
            }
            if (notice) {
                notice.textContent = statusText || 'Complete previous steps first';
            }
        }
    }
    
    // FIXED: Proper stepper progression logic
    const hasObjectives = viewState.submittedObjectives && viewState.submittedObjectives.length > 0;
    const objectivesViewOnly = viewState.viewOnlyStatus['objectivesettings'];
    
    // 1. Objective Setting - always accessible first
    updateStepStatus(objectivesButton, true, objectivesViewOnly);
    
    // 2. Q1 Feedback - accessible only after objectives are submitted
    const q1Accessible = hasObjectives;
    const q1ViewOnly = viewState.viewOnlyStatus['feedbacks_Q1'];
    updateStepStatus(feedbackQ1Button, q1Accessible, q1ViewOnly, 
        !hasObjectives ? 'Submit objectives first' : null);
    
    // 3. Q2 Feedback - accessible after Q1 is completed
    const q2Accessible = hasObjectives && q1ViewOnly;
    const q2ViewOnly = viewState.viewOnlyStatus['feedbacks_Q2'];
    updateStepStatus(feedbackQ2Button, q2Accessible, q2ViewOnly,
        !q1ViewOnly ? 'Complete Q1 feedback first' : null);
    
    // 4. Mid-Year IDP - accessible after Q2 is completed
    const midYearIDPAccessible = hasObjectives && q1ViewOnly && q2ViewOnly;
    const midYearIDPViewOnly = viewState.viewOnlyStatus['midyearidp'];
    updateStepStatus(midYearIDPButton, midYearIDPAccessible, midYearIDPViewOnly,
        !q2ViewOnly ? 'Complete Q2 feedback first' : null);
    
    // 5. Q3 Feedback - accessible after Mid-Year IDP is completed
    const q3Accessible = hasObjectives && q1ViewOnly && q2ViewOnly && midYearIDPViewOnly;
    const q3ViewOnly = viewState.viewOnlyStatus['feedbacks_Q3'];
    updateStepStatus(feedbackQ3Button, q3Accessible, q3ViewOnly,
        !midYearIDPViewOnly ? 'Complete Mid-Year IDP first' : null);
    
    // 6. Q4 Feedback - accessible after Q3 is completed
    const q4Accessible = hasObjectives && q1ViewOnly && q2ViewOnly && midYearIDPViewOnly && q3ViewOnly;
    const q4ViewOnly = viewState.viewOnlyStatus['feedbacks_Q4'];
    updateStepStatus(feedbackQ4Button, q4Accessible, q4ViewOnly,
        !q3ViewOnly ? 'Complete Q3 feedback first' : null);
    
    // 7. Final-Year IDP - accessible after Q4 is completed
    const finalYearIDPAccessible = hasObjectives && q1ViewOnly && q2ViewOnly && midYearIDPViewOnly && q3ViewOnly && q4ViewOnly;
    const finalYearIDPViewOnly = viewState.viewOnlyStatus['finalyearidp'];
    updateStepStatus(finalYearIDPButton, finalYearIDPAccessible, finalYearIDPViewOnly,
        !q4ViewOnly ? 'Complete Q4 feedback first' : null);
    
    console.log("Updated stepper accessibility states");
    console.log("Current progression:", {
        objectives: objectivesViewOnly ? 'Complete' : 'Pending',
        q1: q1ViewOnly ? 'Complete' : (q1Accessible ? 'Available' : 'Locked'),
        q2: q2ViewOnly ? 'Complete' : (q2Accessible ? 'Available' : 'Locked'),
        midYear: midYearIDPViewOnly ? 'Complete' : (midYearIDPAccessible ? 'Available' : 'Locked'),
        q3: q3ViewOnly ? 'Complete' : (q3Accessible ? 'Available' : 'Locked'),
        q4: q4ViewOnly ? 'Complete' : (q4Accessible ? 'Available' : 'Locked'),
        finalYear: finalYearIDPViewOnly ? 'Complete' : (finalYearIDPAccessible ? 'Available' : 'Locked')
    });
}

// Function to update total weight in the form
function updateTotalWeight() {
    const weightInputs = document.querySelectorAll(".weight-input");
    let totalWeight = 0;
    
    weightInputs.forEach(input => {
        const value = parseFloat(input.value) || 0;
        totalWeight += value;
    });
    
    const totalWeightElement = document.getElementById("totalWeight");
    const totalWeightDisplayElement = document.getElementById("totalWeightDisplay");
    
    if (totalWeightElement) totalWeightElement.value = totalWeight;
    if (totalWeightDisplayElement) totalWeightDisplayElement.textContent = totalWeight;
    
    // Change color based on total weight
    if (totalWeightDisplayElement) {
        if (totalWeight === 100) {
            totalWeightDisplayElement.style.color = "#4CAF50"; // Green when exactly 100
        } else if (totalWeight > 100) {
            totalWeightDisplayElement.style.color = "#f44336"; // Red when over 100
        } else {
            totalWeightDisplayElement.style.color = "#ff9800"; // Orange when under 100
        }
    }
}

// Function to handle objective click
function handleObjectiveClick() {
    console.log("Objective clicked. View only status:", viewState.viewOnlyStatus.objectivesettings);
    
    // Hide all other sections
    hideAllSections();
    
    // Get the form and view-only sections
    const formSection = document.getElementById("objective-skill-progress-form");
    const viewOnlySection = document.getElementById("view-only-page");
    
    // Check if the view-only status is true
    if (viewState.viewOnlyStatus.objectivesettings) {
        // Show view-only page with submitted objectives
        if (viewOnlySection) {
            displaySubmittedObjectives(submittedObjectives);
            viewOnlySection.style.display = "block";
            if (formSection) formSection.style.display = "none";
            
            // Add animation classes
            viewOnlySection.classList.remove("fade-out");
            viewOnlySection.classList.add("fade-in");
            
            console.log("Showing view-only page with submitted objectives.");
        } else {
            console.error("View-only section not found but required for view-only mode.");
        }
    } else {
        // Show editable form if in edit mode
        if (formSection) {
            formSection.style.display = "block";
            if (viewOnlySection) viewOnlySection.style.display = "none";
            
            // Add animation classes
            formSection.classList.remove("fade-out");
            formSection.classList.add("fade-in");
            
            console.log("Showing editable objective form.");
        } else {
            console.error("Form section not found but required for edit mode.");
        }
    }
    
    // Initialize the total weight display
    updateTotalWeight();
}

// Helper function to check if we're in feedback edit mode
function isInFeedbackEditMode() {
    const activeQuarterField = document.getElementById('activeQuarterField');
    if (!activeQuarterField) return false;
    
    const quarterValue = activeQuarterField.value;
    const quarter = quarterValue.replace('Q', '');
    
    // Check if this quarter is in view-only mode
    const isViewOnly = viewState.viewOnlyStatus[`feedbacks_${quarterValue}`];
    
    // We're in edit mode if it's not view-only and there are no saved questionnaires
    return !isViewOnly;
}


// Enhanced JavaScript functions to properly fetch and display feedback questionnaire data

// Function to get feedback questionnaire data for a specific quarter
async function getFeedbackQuestionnaire(quarter) {
    console.log(`Fetching questionnaire data for ${quarter}...`);
    
    try {
        // Show loading state
        const feedbackTableBody = document.getElementById('feedback-table-body');
        const hardSkillsTableBody = document.getElementById('hard-skills-table-body');
        const softSkillsTableBody = document.getElementById('soft-skills-table-body');
        
        if (feedbackTableBody) {
            feedbackTableBody.innerHTML = `
                <tr>
                    <td colspan="5" style="text-align: center; padding: 20px;">
                        <i class="fas fa-spinner fa-spin"></i> Loading questionnaire data...
                    </td>
                </tr>
            `;
        }

        // Format the quarter correctly
        const formattedQuarter = quarter.toString().startsWith('Q') ? quarter : `Q${quarter}`;
        
        // FIXED: Get the selected year from the year dropdown or URL
        let selectedYear = new Date().getFullYear(); // default to current year
        
        // Try to get year from the year select dropdown
        const yearSelect = document.getElementById('yearSelect');
        if (yearSelect && yearSelect.value) {
            selectedYear = yearSelect.value;
        }
        
        // Try to get year from URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.has('year')) {
            selectedYear = urlParams.get('year');
        }
        
        // Try to get year from viewState
        if (viewState && viewState.selectedYear) {
            selectedYear = viewState.selectedYear;
        }
        
        // FIXED: Construct the correct URL path with year parameter
        const url = `/linemanager/get-feedback-questionnaire/${userId}?quarter=${formattedQuarter}&year=${selectedYear}`;
        console.log(`Making request to: ${url}`);
        console.log(`Using selectedYear: ${selectedYear}`);
        
        // Fetch the questionnaire data from the server
        const response = await fetch(url);
        
        console.log(`Response status: ${response.status}`);
        console.log(`Response headers:`, response.headers);
        
        // FIXED: Better error handling for different HTTP status codes
        if (!response.ok) {
            let errorMessage = `Server error: ${response.status}`;
            
            try {
                const errorText = await response.text();
                console.error(`Server response (${response.status}):`, errorText);
                
                // Try to parse as JSON for better error message
                try {
                    const errorJson = JSON.parse(errorText);
                    errorMessage = errorJson.message || errorMessage;
                } catch (e) {
                    // If not JSON, use the text response
                    if (errorText.length < 200) {
                        errorMessage += `: ${errorText}`;
                    }
                }
            } catch (e) {
                console.error('Could not read error response:', e);
            }
            
            throw new Error(errorMessage);
        }
        
        let data;
        try {
            const responseText = await response.text();
            console.log('Raw response text:', responseText.substring(0, 500) + '...');
            data = JSON.parse(responseText);
        } catch (jsonError) {
            console.error('Failed to parse response as JSON:', jsonError);
            throw new Error('Invalid response format from server - expected JSON');
        }
        
        // FIXED: Check success flag first
        if (!data.success) {
            console.error("API returned error:", data.message);
            throw new Error(data.message || 'Unknown API error');
        }
        
        console.log("Successfully fetched questionnaire data:", data);
        
        // Clear existing content
        if (feedbackTableBody) feedbackTableBody.innerHTML = '';
        if (hardSkillsTableBody) hardSkillsTableBody.innerHTML = '';
        if (softSkillsTableBody) softSkillsTableBody.innerHTML = '';
        
        // FIXED: Properly handle date fields based on the fetched data
        const startDateInput = document.getElementById('startDate');
        const endDateInput = document.getElementById('endDate');
        
        if (startDateInput && endDateInput) {
            // FIXED: Always clear first, then set values if they exist
            startDateInput.value = '';
            endDateInput.value = '';
            
            if (data.startDate && data.endDate) {
                // If data exists, populate the fields
                startDateInput.value = data.startDate;
                endDateInput.value = data.endDate;
                console.log(`Set dates - Start: ${data.startDate}, End: ${data.endDate}`);
                
                if (data.isViewOnly) {
                    // View-only mode: disable and style as read-only
                    startDateInput.disabled = true;
                    endDateInput.disabled = true;
                    startDateInput.style.backgroundColor = "#f5f5f5";
                    endDateInput.style.backgroundColor = "#f5f5f5";
                    startDateInput.style.border = "1px solid #e1e5eb";
                    endDateInput.style.border = "1px solid #e1e5eb";
                    console.log(`${formattedQuarter} is in view-only mode - dates disabled`);
                } else {
                    // Edit mode with existing data: enable for editing
                    startDateInput.disabled = false;
                    endDateInput.disabled = false;
                    startDateInput.style.backgroundColor = "white";
                    endDateInput.style.backgroundColor = "white";
                    startDateInput.style.border = "1px solid #ddd";
                    endDateInput.style.border = "1px solid #ddd";
                    console.log(`${formattedQuarter} has existing data but is editable`);
                }
            } else {
                // No existing data: enable for new input
                startDateInput.disabled = false;
                endDateInput.disabled = false;
                startDateInput.style.backgroundColor = "white";
                endDateInput.style.backgroundColor = "white";
                startDateInput.style.border = "1px solid #ddd";
                endDateInput.style.border = "1px solid #ddd";
                console.log(`${formattedQuarter} has no existing data - fields enabled for new input`);
            }
        }
        
        // Display objectives with their guide questions
        if (data.objectives && data.objectives.length > 0) {
            data.objectives.forEach(objective => {
                addQuestionnaireObjectiveRow(objective, formattedQuarter);
            });
            console.log(`Added ${data.objectives.length} objectives to the table`);
        } else {
            // Fall back to basic objectives if no questionnaire data
            if (submittedObjectives && submittedObjectives.length > 0) {
                submittedObjectives.forEach(objective => {
                    addQuestionnaireObjectiveRow(objective, formattedQuarter);
                });
                console.log(`Fell back to ${submittedObjectives.length} submitted objectives`);
            } else {
                // Show empty state
                if (feedbackTableBody) {
                    feedbackTableBody.innerHTML = `
                        <tr>
                            <td colspan="5" style="text-align: center; padding: 20px;">
                                No objectives available. Please complete objective setting first.
                            </td>
                        </tr>
                    `;
                }
            }
        }
        
        // Display skills
        if (data.hardSkills && data.hardSkills.length > 0) {
            data.hardSkills.forEach(skill => {
                addQuestionnaireSkillRow(skill, 'hard');
            });
            console.log(`Added ${data.hardSkills.length} hard skills`);
        } else if (hardSkills && hardSkills.length > 0) {
            hardSkills.forEach(skill => {
                addQuestionnaireSkillRow(skill, 'hard');
            });
        }
        
        if (data.softSkills && data.softSkills.length > 0) {
            data.softSkills.forEach(skill => {
                addQuestionnaireSkillRow(skill, 'soft');
            });
            console.log(`Added ${data.softSkills.length} soft skills`);
        } else if (softSkills && softSkills.length > 0) {
            softSkills.forEach(skill => {
                addQuestionnaireSkillRow(skill, 'soft');
            });
        }
        
        // Update the save button based on view mode
        const saveButton = document.getElementById('save360Questionnaire');
        if (saveButton) {
            if (data.isViewOnly) {
                saveButton.disabled = true;
                saveButton.innerHTML = '<i class="fas fa-lock"></i> Questionnaire Submitted';
                saveButton.style.backgroundColor = '#ccc';
                console.log('Save button disabled - view only mode');
            } else {
                saveButton.disabled = false;
                saveButton.innerHTML = '<i class="fas fa-save"></i> Save Questionnaire';
                saveButton.style.backgroundColor = 'var(--primary-color)';
                console.log('Save button enabled - edit mode');
            }
        }
        
        // FIXED: Show additional debug information
        console.log(`=== QUESTIONNAIRE FETCH SUCCESS ===`);
        console.log(`Quarter: ${formattedQuarter}`);
        console.log(`Selected Year: ${selectedYear}`);
        console.log(`Objective Settings Year: ${data.meta?.objectiveSettingsYear || 'N/A'}`);
        console.log(`Feedback Year: ${data.meta?.year || 'N/A'}`);
        console.log(`Is View Only: ${data.isViewOnly}`);
        console.log(`Is New Feedback: ${data.isNewFeedback}`);
        console.log(`=== END QUESTIONNAIRE FETCH ===`);
        
    } catch (error) {
        console.error("Error fetching questionnaire data:", error);
        
        // Clear date fields on error
        const startDateInput = document.getElementById('startDate');
        const endDateInput = document.getElementById('endDate');
        if (startDateInput && endDateInput) {
            startDateInput.value = '';
            endDateInput.value = '';
            startDateInput.disabled = false;
            endDateInput.disabled = false;
            startDateInput.style.backgroundColor = "white";
            endDateInput.style.backgroundColor = "white";
            startDateInput.style.border = "1px solid #ddd";
            endDateInput.style.border = "1px solid #ddd";
        }
        
        // Show detailed error message
        const feedbackTableBody = document.getElementById('feedback-table-body');
        if (feedbackTableBody) {
            feedbackTableBody.innerHTML = `
                <tr>
                    <td colspan="5" style="text-align: center; padding: 20px; color: #f44336;">
                        <i class="fas fa-exclamation-triangle"></i> Error loading questionnaire data: ${error.message}
                        <br><small>Please check the console for more details and try again.</small>
                        <br><small style="color: #666;">Debug info: User ID: ${userId}, Quarter: ${quarter}</small>
                    </td>
                </tr>
            `;
        }
    }
}
// Function to add questionnaire objective row with guide question display
function addQuestionnaireObjectiveRow(objective, quarter) {
    const tbody = document.getElementById('feedback-table-body');
    if (!tbody) {
        console.error("Feedback table body not found.");
        return;
    }

    // Check if we're in view-only mode for this quarter
    const quarterKey = quarter.replace('Q', '');
    const isViewOnly = viewState.viewOnlyStatus[`feedbacks_Q${quarterKey}`];

    // Create and append the objective row
    const row = document.createElement('tr');
    row.innerHTML = `
        <td><strong>${objective.objectiveDescrpt || 'N/A'}</strong></td>
        <td><strong>${objective.objectiveKPI || 'N/A'}</strong></td>
        <td><strong>${objective.objectiveTarget || 'N/A'}</strong></td>
        <td><strong>${objective.objectiveUOM || '%'}</strong></td>
        <td><strong>${objective.objectiveAssignedWeight ? (objective.objectiveAssignedWeight * 100).toFixed(2) + '%' : 'N/A'}</strong></td>
    `;
    tbody.appendChild(row);

    // Create and append the guide question row
    const inputRow = document.createElement('tr');
    const inputId = `qualitativeInput_${objective.objectiveId}`;
    
    inputRow.innerHTML = `
        <td colspan="5" class="feedback-input-cell">
            <div style="margin-bottom: 15px; padding: 10px; background-color: #f9f9f9; border-radius: 4px;">
                <label for="${inputId}" style="display: block; margin-bottom: 8px; font-weight: 500;">
                    <i class="fas fa-question-circle"></i> <strong>Guide Question for Feedback:</strong>
                </label>
                ${isViewOnly ? 
                    `<div style="padding: 8px; background-color: #f5f5f5; border-radius: 4px; border: 1px solid #e1e5eb;">
                        ${objective.guideQuestion || objective.objectiveQualiQuestion || 'No guide question available'}
                    </div>` : 
                    `<input id="${inputId}" type="text" 
                        style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;"
                        value="${objective.guideQuestion || objective.objectiveQualiQuestion || ''}"  
                        placeholder="Enter guide question for feedback" 
                        data-objective-id="${objective.objectiveId}" 
                        class="guide-question-input"
                    >`
                }
            </div>
        </td>
    `;
    tbody.appendChild(inputRow);

    // Only add rater interface for edit mode
    if (!isViewOnly) {
        const raterRow = document.createElement('tr');
        const starRatingId = `starRating${objective.objectiveId}`;
        const ratingSectionId = `ratingSection${objective.objectiveId}`;

        raterRow.innerHTML = `
            <td colspan="5">
                <button type="button" onclick="toggleRatingSection('${ratingSectionId}')" 
                        style="background-color: #6c757d; color: white; border: none; padding: 8px 15px; 
                        cursor: pointer; border-radius: 4px; margin-bottom: 10px; width: 100%;">
                    <i class="fas fa-eye"></i> Preview Rater's Interface
                </button>
                <div id="${ratingSectionId}" style="display: none; margin-top: 10px; padding: 15px; 
                    background-color: #f9f9f9; border-radius: 8px; border: 1px solid #ddd;">
                    <div style="margin-bottom: 15px;">
                        <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                            <i class="fas fa-star"></i> <strong>Quantitative Rating:</strong>
                        </label>
                        <div style="font-size: 14px; margin-bottom: 10px; color: #666;">
                            Please rate the accomplishment of this objective for the quarter on a scale of 1 to 5.
                        </div>
                        <div class="star-rating" style="font-size: 24px; cursor: pointer;" id="${starRatingId}" data-rating="0">
                            <i class="fa-solid fa-star" data-value="1" style="color: #ddd; margin-right: 5px;"></i>
                            <i class="fa-solid fa-star" data-value="2" style="color: #ddd; margin-right: 5px;"></i>
                            <i class="fa-solid fa-star" data-value="3" style="color: #ddd; margin-right: 5px;"></i>
                            <i class="fa-solid fa-star" data-value="4" style="color: #ddd; margin-right: 5px;"></i>
                            <i class="fa-solid fa-star" data-value="5" style="color: #ddd;"></i>
                        </div>
                    </div>
                    <div style="margin-bottom: 10px;">
                        <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                            <i class="fas fa-comment"></i> <strong>Qualitative Feedback:</strong>
                        </label>
                        <div style="font-size: 14px; margin-bottom: 10px; color: #666;">
                            Please provide qualitative feedback regarding this objective for the quarter.
                        </div>
                        <textarea id="qualitativeFeedback_${objective.objectiveId}" 
                            placeholder="Place your qualitative feedback here." 
                            style="width: 100%; min-height: 80px; padding: 10px;" disabled readonly></textarea>
                    </div>
                </div>
            </td>
        `;
        tbody.appendChild(raterRow);

        // Add click event listeners to the stars for preview
        setTimeout(() => {
            const stars = document.querySelectorAll(`#${starRatingId} .fa-star`);
            stars.forEach(star => {
                star.addEventListener('click', function() {
                    const rating = this.getAttribute('data-value');
                    const starContainer = document.getElementById(starRatingId);
                    starContainer.setAttribute('data-rating', rating);
                    updateStarDisplay(stars, rating);
                });
            });
        }, 100);
    }
}


// Function to add questionnaire skill row
function addQuestionnaireSkillRow(skill, skillType) {
    const skillTableBody = document.querySelector(`#${skillType}-skills-table-body`);
    
    if (!skillTableBody) {
        console.log(`Skill table body not found for: ${skillType}`);
        return;
    }
    
    // Create skill name row
    const row = document.createElement('tr');
    row.innerHTML = `
        <td>
            <span style="font-weight: 500; color: #124A5C;">${skill.jobReqSkillName || skill.skillName}</span>
        </td>
    `;
    skillTableBody.appendChild(row);
    
    // Get current edit mode status
    const activeQuarterField = document.getElementById('activeQuarterField');
    const quarterValue = activeQuarterField ? activeQuarterField.value : 'Q1';
    const quarterKey = quarterValue.replace('Q', '');
    const isViewOnly = viewState.viewOnlyStatus[`feedbacks_Q${quarterKey}`];
    
    // Only add rater interface for edit mode
    if (!isViewOnly) {
        const raterRow = document.createElement('tr');
        const starRatingId = `${skillType}SkillRow${(skill.jobReqSkillName || skill.skillName).replace(/\s+/g, '_')}Rating`;
        const ratingSectionId = `ratingSection${(skill.jobReqSkillName || skill.skillName).replace(/\s+/g, '_')}`;
        
        raterRow.innerHTML = `
        <td>
            <button type="button" onclick="toggleRatingSection('${ratingSectionId}')" 
                    style="background-color: #6c757d; color: white; border: none; padding: 8px 15px; 
                    cursor: pointer; border-radius: 4px; margin-bottom: 10px; width: 100%;">
                <i class="fas fa-eye"></i> Preview Rater's Interface
            </button>
            <div id="${ratingSectionId}" style="display: none; margin: 10px 0 20px; padding: 15px; 
                    background-color: #f9f9f9; border-radius: 8px; border: 1px solid #ddd;">
                <div style="margin-bottom: 15px;">
                    <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                        <i class="fas fa-star"></i> <strong>Quantitative Rating:</strong>
                    </label>
                    <div style="font-size: 14px; margin-bottom: 10px; color: #666;">
                        Rate from 1 to 5 based on this skill's performance during the quarter.
                    </div>
                    <div class="star-rating" style="font-size: 24px;" id="${starRatingId}" data-rating="0">
                        <i class="fa-solid fa-star" data-value="1" style="color: #ddd; margin-right: 5px;"></i>
                        <i class="fa-solid fa-star" data-value="2" style="color: #ddd; margin-right: 5px;"></i>
                        <i class="fa-solid fa-star" data-value="3" style="color: #ddd; margin-right: 5px;"></i>
                        <i class="fa-solid fa-star" data-value="4" style="color: #ddd; margin-right: 5px;"></i>
                        <i class="fa-solid fa-star" data-value="5" style="color: #ddd;"></i>
                    </div>
                </div>
                <div>
                    <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                        <i class="fas fa-comment"></i> <strong>Qualitative Feedback:</strong>
                    </label>
                    <div style="font-size: 14px; margin-bottom: 10px; color: #666;">
                        Provide specific examples related to this skill.
                    </div>
                    <textarea placeholder="Enter your qualitative feedback here..." 
                              style="width: 100%; min-height: 80px; padding: 10px;" disabled readonly></textarea>
                </div>
            </div>
        </td>
        `;
        
        skillTableBody.appendChild(raterRow);
        
        // Add click event listeners to the stars for preview
        setTimeout(() => {
            const stars = document.querySelectorAll(`#${starRatingId} .fa-star`);
            stars.forEach(star => {
                star.addEventListener('click', function() {
                    const rating = this.getAttribute('data-value');
                    const starContainer = document.getElementById(starRatingId);
                    starContainer.setAttribute('data-rating', rating);
                    updateStarDisplay(stars, rating);
                });
            });
        }, 100);
    }
}
function showFeedbackFormFromButton() {
    // Get the clicked element's quarter data
    const clickedElement = event.target.closest('[data-quarter]');
    if (!clickedElement) {
        console.error("Could not determine quarter from clicked element");
        return;
    }
    
    const quarter = clickedElement.getAttribute('data-quarter');
    showFeedbackForm(quarter);
}

// Enhanced showFeedbackForm function
function showFeedbackForm(quarter) {
    // Get the feedback button for this quarter
    const feedbackButton = document.getElementById(`feedbackButtonQ${quarter}`);
    
    // Check if the button is accessible
    if (!feedbackButton || !feedbackButton.classList.contains('accessible')) {
        alert("You must complete the previous steps first.");
        return;
    }
    
    console.log(`Showing feedback form for Q${quarter}`);
    
    // Hide other sections
    hideAllSections();
    
    // Show feedback section
    const feedbackSection = document.getElementById("feedback-section");
    if (!feedbackSection) {
        console.error("Feedback section not found.");
        return;
    }
    
    feedbackSection.style.display = "block";
    feedbackSection.classList.remove("fade-out");
    feedbackSection.classList.add("fade-in");
    
    // Store the active quarter in a hidden field for form submission
    let quarterField = document.getElementById('activeQuarterField');
    if (!quarterField) {
        quarterField = document.createElement('input');
        quarterField.type = 'hidden';
        quarterField.name = 'activeQuarter';
        quarterField.id = 'activeQuarterField';
        feedbackSection.appendChild(quarterField);
    }
    
    // Set the quarter value
    quarterField.value = `Q${quarter}`;
    console.log(`Set active quarter to Q${quarter} in hidden field`);
    
    // Check if this quarter's feedback is in view-only mode
    const isViewOnly = viewState.viewOnlyStatus[`feedbacks_Q${quarter}`];
    
    // Update form action with the quarter parameter
    const feedbackForm = document.getElementById('feedbackForm');
    if (feedbackForm) {
        if (isViewOnly) {
            // In view-only mode, we don't need to set form action for submission
            feedbackForm.action = '#';
        } else {
            // In edit mode, set the correct action for saving
            feedbackForm.action = `/linemanager/save-feedback-questionnaire/${userId}`;
        }
        console.log(`Updated form action for Q${quarter} (View-Only: ${isViewOnly})`);
    }
    
    // Show the questionnaire view by default
    toggleFeedbackView('questionnaire');
    
    // Fetch and display the questionnaire data
    getFeedbackQuestionnaire(`Q${quarter}`);
    
    // Update buttons and form elements based on view mode
    updateFeedbackFormForViewMode(isViewOnly, quarter);
}

// New function to update form elements based on view mode
function updateFeedbackFormForViewMode(isViewOnly, quarter) {
    console.log(`Updating feedback form for Q${quarter} (View-Only: ${isViewOnly})`);
    
    // Update the form header to indicate mode
    const formHeader = document.querySelector('#questionnaireContent .form-header h2');
    if (formHeader) {
        if (isViewOnly) {
            formHeader.innerHTML = `<i class="fas fa-comment-dots"></i> 360 Degree Feedback Questionnaire - Q${quarter} (View Only)`;
        } else {
            formHeader.innerHTML = `<i class="fas fa-comment-dots"></i> 360 Degree Feedback Questionnaire - Q${quarter}`;
        }
    }
    
    // Update buttons based on view mode
    if (isViewOnly) {
        console.log(`Q${quarter} feedback is in VIEW mode`);
        updateFeedbackButtons(false);
    } else {
        console.log(`Q${quarter} feedback is in EDIT mode`);
        updateFeedbackButtons(true);
    }
    
    // REMOVED: Date field manipulation
    // The date fields are already properly configured by getFeedbackQuestionnaire()
    // Don't override those settings here as it will cause conflicts
    
    console.log(`Form mode updated for Q${quarter}. Date fields remain as configured by getFeedbackQuestionnaire.`);
}

function showFeedbackError(message) {
    console.error('Showing feedback error:', message);
    
    const containers = [
        document.getElementById('objectiveFeedbackContainer'),
        document.getElementById('skillsFeedbackContainer'),
        document.getElementById('individualAnswersContainer')
    ];
    
    const errorHTML = `
        <div class="error-state" style="text-align: center; padding: 30px; background-color: #ffebee; border-radius: 8px; border-left: 4px solid #f44336;">
            <i class="fas fa-exclamation-triangle" style="font-size: 48px; color: #f44336; margin-bottom: 15px;"></i>
            <p style="color: #f44336; margin: 0;">${message}</p>
            <small style="color: #666; margin-top: 10px; display: block;">If this error persists, please check the browser console for more details.</small>
        </div>
    `;
    
    containers.forEach(container => {
        if (container) {
            container.innerHTML = errorHTML;
        }
    });
}

document.addEventListener('DOMContentLoaded', function() {
    const clearFiltersBtn = document.getElementById('clearFilters');
    
    if (clearFiltersBtn) {
        clearFiltersBtn.addEventListener('click', function() {
            const responderFilter = document.getElementById('responderFilter');
            const questionFilter = document.getElementById('questionFilter');
            
            if (responderFilter) responderFilter.value = 'all';
            if (questionFilter) questionFilter.value = 'all';
            
            // Trigger filter application
            applyEnhancedFilters();
            
            // Show success message
            showFilterClearMessage();
        });
    }
});

// Function to show filter clear message
function showFilterClearMessage() {
    const message = document.createElement('div');
    message.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background-color: #4CAF50;
        color: white;
        padding: 10px 15px;
        border-radius: 4px;
        font-size: 14px;
        z-index: 10000;
        animation: fadeInOut 3s ease-in-out;
    `;
    message.innerHTML = '<i class="fas fa-check"></i> Filters cleared';
    
    document.body.appendChild(message);
    
    setTimeout(() => {
        if (document.body.contains(message)) {
            document.body.removeChild(message);
        }
    }, 3000);
}


// Add fadeInOut animation
const style = document.createElement('style');
style.textContent = `
    @keyframes fadeInOut {
        0% { opacity: 0; transform: translateY(-20px); }
        20% { opacity: 1; transform: translateY(0); }
        80% { opacity: 1; transform: translateY(0); }
        100% { opacity: 0; transform: translateY(-20px); }
    }
`;
document.head.appendChild(style);


// Add event listeners for feedback view buttons
document.addEventListener('DOMContentLoaded', function() {
    // Add event listeners for view toggle buttons
    const viewQuestionnaireBtn = document.getElementById('viewQuestionnaireBtn');
    const viewFeedbackBtn = document.getElementById('viewFeedbackBtn');
    
    if (viewQuestionnaireBtn) {
        viewQuestionnaireBtn.addEventListener('click', function() {
            toggleFeedbackView('questionnaire');
        });
    }
    
    if (viewFeedbackBtn) {
        viewFeedbackBtn.addEventListener('click', function() {
            toggleFeedbackView('feedback');
        });
    }
});


// Function to generate enhanced star rating display
function generateStarRating(rating) {
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 >= 0.5;
    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
    
    let starsHTML = '';
    
    // Add full stars
    for (let i = 0; i < fullStars; i++) {
        starsHTML += '<i class="fas fa-star" style="color: #FFD700;"></i>';
    }
    
    // Add half star if needed
    if (hasHalfStar) {
        starsHTML += '<i class="fas fa-star-half-alt" style="color: #FFD700;"></i>';
    }
    
    // Add empty stars
    for (let i = 0; i < emptyStars; i++) {
        starsHTML += '<i class="far fa-star" style="color: #FFD700;"></i>';
    }
    
    return starsHTML;
}

// Function to determine rating class based on score
function getRatingClass(rating) {
    if (rating >= 4.5) return 'rating-excellent';
    if (rating >= 3.5) return 'rating-good';
    if (rating >= 2.5) return 'rating-average';
    return 'rating-poor';
}
// Function to format date for display
function formatDateForDisplay(dateString) {
    if (!dateString) return 'Not specified';
    
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
    });
}

// Setup filters for individual answers
function setupFilters() {
    const responderFilter = document.getElementById('responderFilter');
    const questionFilter = document.getElementById('questionFilter');
    
    if (responderFilter) {
        responderFilter.addEventListener('change', filterAnswers);
    }
    
    if (questionFilter) {
        questionFilter.addEventListener('change', filterAnswers);
    }
}

// Function to filter individual answers
function filterAnswers() {
    const responderFilter = document.getElementById('responderFilter');
    const questionFilter = document.getElementById('questionFilter');
    const answerCards = document.querySelectorAll('.answer-card');
    
    if (!responderFilter || !questionFilter) return;
    
    const selectedResponder = responderFilter.value;
    const selectedQuestion = questionFilter.value;
    
    answerCards.forEach(card => {
        let showCard = true;
        
        // Filter by responder type
        if (selectedResponder !== 'all') {
            const responderType = card.querySelector('h4').textContent.toLowerCase();
            if (!responderType.includes(selectedResponder)) {
                showCard = false;
            }
        }
        
        // Filter by question (if implemented)
        if (selectedQuestion !== 'all' && showCard) {
            // This would need to be implemented based on your question structure
            // For now, we'll keep it simple
        }
        
        card.style.display = showCard ? 'block' : 'none';
    });
}
function navigateToMidYearIDP() {
    const midYearIDPButton = document.getElementById("midYearIDP");
    
    // Check if the button is accessible
    if (!midYearIDPButton || !midYearIDPButton.classList.contains('accessible')) {
        alert("You must complete the previous steps first.");
        return;
    }
    
    // Hide other sections
    hideAllSections();
    
    // Show the Mid-Year IDP form
    const midYearIDPForm = document.getElementById("midYearIDPForm");
    if (!midYearIDPForm) {
        console.error("Mid-Year IDP form not found.");
        return;
    }
    
    midYearIDPForm.style.display = "block";
    midYearIDPForm.classList.remove("fade-out");
    midYearIDPForm.classList.add("fade-in");
    
    // Load feedback aggregates when form is shown
    loadMidYearFeedbackAggregates();
    
    // Check if in view-only mode
    const isViewOnly = viewState.viewOnlyStatus.midyearidp;
    
    if (isViewOnly) {
        // If in view-only mode, load the existing data
        if (midYearIDPData) {
            createViewOnlyMidYearIDP(midYearIDPData);
        } else {
            // If data isn't loaded yet, fetch it
            loadMidYearIDPData(userId);
        }
    } else {
        // If in edit mode, ensure form fields are enabled
        enableMidYearIDPForm();
        // Load any existing selected trainings for editing
        loadExistingSelectedTrainings(userId);
    }
    
    midYearIDPForm.scrollIntoView({ behavior: "smooth" });
    console.log("Navigated to the Mid-Year IDP form with multiple training selection system.", isViewOnly ? "(View-Only Mode)" : "(Edit Mode)");
}

// Function to hide all sections
function hideAllSections() {
    const sectionsToHide = [
        document.getElementById("objective-skill-progress-form"),
        document.getElementById("view-only-page"),
        document.getElementById("feedback-section"),
        document.getElementById("midYearIDPForm")
    ];
    
    sectionsToHide.forEach(section => {
        if (section) {
            section.style.display = "none";
            section.classList.remove("fade-in");
            section.classList.add("fade-out");
        }
    });
}

// Function to add a row to feedback form
function addFormFeedbackRow(objective) {
    const tbody = document.getElementById('feedback-table-body');
    if (!tbody) {
        console.error("Feedback table body not found.");
        return;
    }

    // Get current edit mode status
    const isEditMode = isInFeedbackEditMode();

    // Create and append the objective row
    const row = document.createElement('tr');
    row.innerHTML = `
        <td><strong>${objective.objectiveDescrpt || 'N/A'}</strong></td>
        <td><strong>${objective.objectiveKPI || 'N/A'}</strong></td>
        <td><strong>${objective.objectiveTarget || 'N/A'}</strong></td>
        <td><strong>${objective.objectiveUOM || '%'}</strong></td>
        <td><strong>${(objective.objectiveAssignedWeight * 100) || 'N/A'}%</strong></td>
    `;
    tbody.appendChild(row);

    // Create and append the input row for feedback
    const inputRow = document.createElement('tr');
    const inputId = `qualitativeInput_${objective.objectiveId}`;
    
    // In edit mode, start with a blank guide question field
    // In view mode, show the saved guide question or "No guide question submitted"
    const questionText = isEditMode ? '' : (objective.objectiveQualiQuestion || 'No guide question submitted');

    inputRow.innerHTML = `
        <td colspan="5" class="feedback-input-cell">
            <div style="margin-bottom: 15px; padding: 10px; background-color: #f9f9f9; border-radius: 4px;">
                <label for="${inputId}" style="display: block; margin-bottom: 8px; font-weight: 500;">
                    <i class="fas fa-question-circle"></i> <strong>Guide Question for Feedback:</strong>
                </label>
                ${isEditMode ? 
                    `<input id="${inputId}" type="text" 
                        style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;"
                        value=""  
                        placeholder="Enter guide question for feedback" 
                        data-objective-id="${objective.objectiveId}" 
                        class="guide-question-input"
                    >` : 
                    `<div style="padding: 8px; background-color: #f5f5f5; border-radius: 4px;">
                        ${questionText}
                    </div>`
                }
            </div>
        </td>
    `;
    tbody.appendChild(inputRow);

    // Create and append the rater's view row
    const raterRow = document.createElement('tr');
    const starRatingId = `starRating${objective.objectiveId}`;
    const ratingSectionId = `ratingSection${objective.objectiveId}`;

    raterRow.innerHTML = `
        <td colspan="5">
            <button type="button" onclick="toggleRatingSection('${ratingSectionId}')" 
                    style="background-color: #6c757d; color: white; border: none; padding: 8px 15px; 
                    cursor: pointer; border-radius: 4px; margin-bottom: 10px; width: 100%;">
                <i class="fas fa-eye"></i> View Rater's Interface
            </button>
            <div id="${ratingSectionId}" style="display: none; margin-top: 10px; padding: 15px; 
                background-color: #f9f9f9; border-radius: 8px; border: 1px solid #ddd;">
                <div style="margin-bottom: 15px;">
                    <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                        <i class="fas fa-star"></i> <strong>Quantitative Rating:</strong>
                    </label>
                    <div style="font-size: 14px; margin-bottom: 10px; color: #666;">
                        Please rate the accomplishment of this objective for the quarter on a scale of 1 to 5.
                    </div>
                    <div class="star-rating" style="font-size: 24px; cursor: pointer;" id="${starRatingId}" data-rating="0">
                        <i class="fa-solid fa-star" data-value="1" style="color: #ddd; margin-right: 5px;"></i>
                        <i class="fa-solid fa-star" data-value="2" style="color: #ddd; margin-right: 5px;"></i>
                        <i class="fa-solid fa-star" data-value="3" style="color: #ddd; margin-right: 5px;"></i>
                        <i class="fa-solid fa-star" data-value="4" style="color: #ddd; margin-right: 5px;"></i>
                        <i class="fa-solid fa-star" data-value="5" style="color: #ddd;"></i>
                    </div>
                </div>
                <div style="margin-bottom: 10px;">
                    <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                        <i class="fas fa-comment"></i> <strong>Qualitative Feedback:</strong>
                    </label>
                    <div style="font-size: 14px; margin-bottom: 10px; color: #666;">
                        Please provide qualitative feedback regarding this objective for the quarter.
                    </div>
                    <textarea id="qualitativeFeedback_${objective.objectiveId}" 
                        placeholder="Place your qualitative feedback here." 
                        style="width: 100%; min-height: 80px; padding: 10px;"></textarea>
                </div>
            </div>
        </td>
    `;
    tbody.appendChild(raterRow);

    // Add click event listeners to the stars
    setTimeout(() => {
        const stars = document.querySelectorAll(`#${starRatingId} .fa-star`);
        stars.forEach(star => {
            star.addEventListener('click', function() {
                const rating = this.getAttribute('data-value');
                const starContainer = document.getElementById(starRatingId);
                starContainer.setAttribute('data-rating', rating);
                updateStarDisplay(stars, rating);
            });
        });
    }, 100);
}

// Function to update star display based on rating
function updateStarDisplay(stars, rating) {
    stars.forEach(star => {
        const value = star.getAttribute('data-value');
        if (value <= rating) {
            star.style.color = '#FFD700'; // Gold color for selected stars
        } else {
            star.style.color = '#ddd'; // Light gray for unselected stars
        }
    });
}

// Function to toggle rating section visibility
function toggleRatingSection(sectionId) {
    const section = document.getElementById(sectionId);
    if (section) {
        if (section.style.display === 'none') {
            section.style.display = 'block';
        } else {
            section.style.display = 'none';
        }
    }
}

// Function to add feedback skills rows
function addFormFeedbackSkillsRows(skills, skillType) {
    const skillTableBody = document.querySelector(`#${skillType}-skills-table-body`);
    
    if (!skillTableBody) {
        console.log(`Skill table body not found for: ${skillType}`);
        return;
    }
    
    // Clear existing content
    skillTableBody.innerHTML = '';
    
    // Check if skills array is empty
    if (!skills || skills.length === 0) {
        const emptyRow = document.createElement('tr');
        emptyRow.innerHTML = `
            <td style="text-align: center; padding: 15px;">No ${skillType} skills available</td>
        `;
        skillTableBody.appendChild(emptyRow);
        return;
    }
    
    // Iterate over skills and add each one
    skills.forEach(skill => {
        // Create skill name row
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>
                <span style="font-weight: 500; color: #124A5C;">${skill.jobReqSkillName}</span>
            </td>
        `;
        skillTableBody.appendChild(row);
        
        // Create rater view row
        const raterRow = document.createElement('tr');
        const starRatingId = `${skillType}SkillRow${skill.jobReqSkillName.replace(/\s+/g, '_')}Rating`;
        const ratingSectionId = `ratingSection${skill.jobReqSkillName.replace(/\s+/g, '_')}`;
        
        raterRow.innerHTML = `
        <td>
            <button type="button" onclick="toggleRatingSection('${ratingSectionId}')" 
                    style="background-color: #6c757d; color: white; border: none; padding: 8px 15px; 
                    cursor: pointer; border-radius: 4px; margin-bottom: 10px; width: 100%;">
                <i class="fas fa-eye"></i> View Rater's Interface
            </button>
            <div id="${ratingSectionId}" style="display: none; margin: 10px 0 20px; padding: 15px; 
                    background-color: #f9f9f9; border-radius: 8px; border: 1px solid #ddd;">
                <div style="margin-bottom: 15px;">
                    <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                        <i class="fas fa-star"></i> <strong>Quantitative Rating:</strong>
                    </label>
                    <div style="font-size: 14px; margin-bottom: 10px; color: #666;">
                        Rate from 1 to 5 based on this skill's performance during the quarter.
                    </div>
                    <div class="star-rating" style="font-size: 24px;" id="${starRatingId}" data-rating="0">
                        <i class="fa-solid fa-star" data-value="1" style="color: #ddd; margin-right: 5px;"></i>
                        <i class="fa-solid fa-star" data-value="2" style="color: #ddd; margin-right: 5px;"></i>
                        <i class="fa-solid fa-star" data-value="3" style="color: #ddd; margin-right: 5px;"></i>
                        <i class="fa-solid fa-star" data-value="4" style="color: #ddd; margin-right: 5px;"></i>
                        <i class="fa-solid fa-star" data-value="5" style="color: #ddd;"></i>
                    </div>
                </div>
                <div>
                    <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                        <i class="fas fa-comment"></i> <strong>Qualitative Feedback:</strong>
                    </label>
                    <div style="font-size: 14px; margin-bottom: 10px; color: #666;">
                        Provide specific examples related to this skill.
                    </div>
                    <textarea placeholder="Enter your qualitative feedback here..." 
                              style="width: 100%; min-height: 80px; padding: 10px;"></textarea>
                </div>
            </div>
        </td>
        `;
        
        skillTableBody.appendChild(raterRow);
        
        // Add click event listeners to the stars
        setTimeout(() => {
            const stars = document.querySelectorAll(`#${starRatingId} .fa-star`);
            stars.forEach(star => {
                star.addEventListener('click', function() {
                    const rating = this.getAttribute('data-value');
                    const starContainer = document.getElementById(starRatingId);
                    starContainer.setAttribute('data-rating', rating);
                    updateStarDisplay(stars, rating);
                });
            });
        }, 100);
    });
}

// Function to add a new row to the objective form
function addRow() {
    const tableBody = document.getElementById("progress-table-body");
    if (!tableBody) {
        console.error("Progress table body not found.");
        return;
    }
    
    const newRow = document.createElement("tr");
    newRow.innerHTML = `
        <td><input type="text" placeholder="Enter Objective" name="objectiveDescrpt" required></td>
        <td><input type="text" placeholder="Enter KPI" name="objectiveKPI" required></td>
        <td><input type="text" placeholder="Enter Target" name="objectiveTarget" required></td>
        <td><input type="text" placeholder="Enter UOM" name="objectiveUOM" required></td>
        <td><input type="number" class="weight-input" oninput="updateTotalWeight()" placeholder="Weight %" name="objectiveAssignedWeight" min="0" max="100" required></td>
        <td><button type="button" class="cancel-btn" onclick="removeRow(this)"><i class="fas fa-trash"></i> Remove</button></td>
    `;
    tableBody.appendChild(newRow);
    
    // Update total weight after adding a row
    updateTotalWeight();
}

// Function to remove a row from the objective form
function removeRow(button) {
    const row = button.parentNode.parentNode;
    row.parentNode.removeChild(row);
    updateTotalWeight(); // Update total weight after removal
}

// Function to display submitted objectives in view-only mode
function displaySubmittedObjectives(objectives) {
    const tableBody = document.getElementById("view-only-table-body");
    if (!tableBody) {
        console.error("View-only table body not found.");
        return;
    }
    
    tableBody.innerHTML = ""; // Clear previous content

    if (!objectives || objectives.length === 0) {
        tableBody.innerHTML = `<tr><td colspan="5" style="text-align: center; padding: 20px;">No objectives found.</td></tr>`;
        return;
    }

    objectives.forEach(obj => {
        const row = document.createElement("tr");
        row.innerHTML = `
            <td>${obj.objectiveDescrpt || 'N/A'}</td>
            <td>${obj.objectiveKPI || 'N/A'}</td>
            <td>${obj.objectiveTarget || 'N/A'}</td>
            <td>${obj.objectiveUOM || 'N/A'}</td>
            <td>${(obj.objectiveAssignedWeight * 100).toFixed(2) || 'N/A'}%</td>
        `;
        tableBody.appendChild(row);
    });
    
    console.log(`Displayed ${objectives.length} objectives in view-only mode.`);
}

// Function to update feedback buttons based on edit mode
function updateFeedbackButtons(isEditMode) {
    const buttonContainer = document.getElementById('feedback-button-container');
    if (!buttonContainer) {
        console.error("Feedback button container not found");
        return;
    }
    
    if (isEditMode) {
        // In edit mode, show both Save and Submit buttons
        buttonContainer.innerHTML = `
            <button id="saveFeedbackDraft" type="button" class="secondary-btn" style="margin-right: 10px; background-color: #6c757d; color: white; border: none; padding: 12px 15px; border-radius: 8px; cursor: pointer; font-weight: 500;">
                <i class="fas fa-save"></i> Save Draft
            </button>
            <button id="submitFeedback" type="submit" class="save-btn" style="background-color: var(--primary-color); color: white; border: none; padding: 12px 15px; border-radius: 8px; cursor: pointer; font-weight: 500;">
                <i class="fas fa-paper-plane"></i> Submit Questionnaire
            </button>
        `;
        
        // Add event listeners
        const saveDraftButton = document.getElementById('saveFeedbackDraft');
        const submitButton = document.getElementById('submitFeedback');
        
        if (saveDraftButton) {
            saveDraftButton.addEventListener('click', saveFeedbackDraft);
        }
        
        if (submitButton) {
            submitButton.addEventListener('click', submitFeedback);
        }
    } else {
        // In view mode, show a disabled Submit button
        buttonContainer.innerHTML = `
            <button disabled class="save-btn" style="background-color: #ccc; color: white; border: none; padding: 12px 15px; border-radius: 8px; cursor: not-allowed; font-weight: 500;">
                <i class="fas fa-lock"></i> Questionnaire Submitted
            </button>
        `;
    }
}

// Function to switch feedback to view-only mode
function switchToViewOnlyMode() {
    console.log("Switching feedback form to view-only mode");
    
    // Get elements
    const startDateInput = document.getElementById("startDate");
    const endDateInput = document.getElementById("endDate");
    
    // Make date inputs view-only
    if (startDateInput && !startDateInput.disabled) {
        startDateInput.disabled = true;
        startDateInput.readOnly = true;
        startDateInput.style.backgroundColor = "#f5f5f5";
        startDateInput.style.border = "1px solid #e1e5eb";
    }

    if (endDateInput && !endDateInput.disabled) {
        endDateInput.disabled = true;
        endDateInput.readOnly = true;
        endDateInput.style.backgroundColor = "#f5f5f5";
        endDateInput.style.border = "1px solid #e1e5eb";
    }

    // Update the buttons to view-only mode
    updateFeedbackButtons(false);
}

// Function to ensure guide questions remain editable
function updateGuideQuestionEditability() {
    // Get the active quarter
    const activeQuarterField = document.getElementById('activeQuarterField');
    if (!activeQuarterField) return;
    
    const quarterValue = activeQuarterField.value; // Example: "Q1"
    const quarter = quarterValue.replace('Q', ''); // Extract just the number
    
    // Check if this quarter is in view-only mode
    const isViewOnly = viewState.viewOnlyStatus[`feedbacks_Q${quarter}`];
    
    if (!isViewOnly) {
        // If not in view-only mode, ensure guide questions are editable
        const feedbackTableBody = document.getElementById('feedback-table-body');
        if (feedbackTableBody) {
            const guideQuestionInputs = feedbackTableBody.querySelectorAll('input[type="text"][id^="qualitativeInput_"]');
            
            guideQuestionInputs.forEach(input => {
                input.disabled = false;
                input.readOnly = false;
                
                // Add "editable" styling
                input.style.backgroundColor = 'white';
                input.style.border = '1px solid #ddd';
                input.style.padding = '8px';
                input.style.borderRadius = '4px';
            });
            
            console.log(`Made ${guideQuestionInputs.length} guide question inputs editable for Q${quarter}`);
        }
    }
}
async function fetchSubmittedFeedbackData(quarter) {
    console.log(`Fetching submitted feedback data for Q${quarter}...`);
    
    try {
        // Show loading state
        const feedbackTableBody = document.getElementById('feedback-table-body');
        if (feedbackTableBody) {
            feedbackTableBody.innerHTML = `
                <tr>
                    <td colspan="5" style="text-align: center; padding: 20px;">
                        <i class="fas fa-spinner fa-spin"></i> Loading submitted data...
                    </td>
                </tr>
            `;
        }
        
        // Format the quarter correctly
        const formattedQuarter = quarter.toString().startsWith('Q') ? quarter : `Q${quarter}`;
        
        // Fetch the data from the server
        const response = await fetch(`/linemanager/get-feedback-questionnaire/${userId}?quarter=${formattedQuarter}`);
        
        if (!response.ok) {
            throw new Error(`Failed to fetch feedback data: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.success) {
            console.log("Fetched submitted feedback data:", data);
            
            // Clear existing content
            if (feedbackTableBody) feedbackTableBody.innerHTML = '';
            
            // Display the fetched objective data with submitted guide questions
            if (data.objectives && data.objectives.length > 0) {
                data.objectives.forEach(objective => {
                    // Use the guide question from the API response
                    objective.objectiveQualiQuestion = objective.guideQuestion || '';
                    
                    // Add to the table using the new function
                    addQuestionnaireObjectiveRow(objective, formattedQuarter);
                });
            } else if (submittedObjectives && submittedObjectives.length > 0) {
                // Fall back to basic objectives with no guide questions if no data returned
                submittedObjectives.forEach(objective => {
                    addQuestionnaireObjectiveRow(objective, formattedQuarter);
                });
            }
            
            // Display skills data
            const hardSkillsTableBody = document.getElementById('hard-skills-table-body');
            const softSkillsTableBody = document.getElementById('soft-skills-table-body');
            
            if (hardSkillsTableBody) {
                hardSkillsTableBody.innerHTML = '';
                if (data.hardSkills && data.hardSkills.length > 0) {
                    data.hardSkills.forEach(skill => {
                        addQuestionnaireSkillRow(skill, 'hard');
                    });
                }
            }
            
            if (softSkillsTableBody) {
                softSkillsTableBody.innerHTML = '';
                if (data.softSkills && data.softSkills.length > 0) {
                    data.softSkills.forEach(skill => {
                        addQuestionnaireSkillRow(skill, 'soft');
                    });
                }
            }
            
            // Set the date fields if available
            const startDateInput = document.getElementById('startDate');
            const endDateInput = document.getElementById('endDate');
            
            if (startDateInput && data.startDate) {
                startDateInput.value = data.startDate;
                startDateInput.disabled = true;
            }
            
            if (endDateInput && data.endDate) {
                endDateInput.value = data.endDate;
                endDateInput.disabled = true;
            }
        } else {
            console.error("Error fetching feedback data:", data.message);
            
            // Fall back to basic objectives with no guide questions
            if (submittedObjectives && submittedObjectives.length > 0) {
                submittedObjectives.forEach(objective => {
                    addQuestionnaireObjectiveRow(objective, formattedQuarter);
                });
            }
        }
    } catch (error) {
        console.error("Error fetching submitted feedback data:", error);
        
        // Fall back to basic objectives with no guide questions
        if (submittedObjectives && submittedObjectives.length > 0 && feedbackTableBody) {
            feedbackTableBody.innerHTML = '';
            submittedObjectives.forEach(objective => {
                addQuestionnaireObjectiveRow(objective, formattedQuarter);
            });
        }
    }
}

// Enhanced function to toggle feedback view with better error handling
function toggleFeedbackView(view) {
    const questionnaireContent = document.getElementById('questionnaireContent');
    const feedbackContent = document.getElementById('feedbackContent');
    const viewQuestionnaireBtn = document.getElementById('viewQuestionnaireBtn');
    const viewFeedbackBtn = document.getElementById('viewFeedbackBtn');
    
    if (!questionnaireContent || !feedbackContent || !viewQuestionnaireBtn || !viewFeedbackBtn) {
        console.error("One or more feedback view elements not found:", {
            questionnaireContent: !!questionnaireContent,
            feedbackContent: !!feedbackContent,
            viewQuestionnaireBtn: !!viewQuestionnaireBtn,
            viewFeedbackBtn: !!viewFeedbackBtn
        });
        return;
    }
    
    if (view === 'questionnaire') {
        // Show questionnaire view
        questionnaireContent.style.display = 'block';
        feedbackContent.style.display = 'none';
        
        // Update button styles
        viewQuestionnaireBtn.style.backgroundColor = 'var(--primary-color)';
        viewQuestionnaireBtn.style.color = 'white';
        viewFeedbackBtn.style.backgroundColor = 'var(--secondary-color)';
        viewFeedbackBtn.style.color = 'white';
        
        console.log('Switched to questionnaire view');
    } else {
        // Show feedback view
        questionnaireContent.style.display = 'none';
        feedbackContent.style.display = 'block';
        
        // Update button styles
        viewFeedbackBtn.style.backgroundColor = 'var(--primary-color)';
        viewFeedbackBtn.style.color = 'white';
        viewQuestionnaireBtn.style.backgroundColor = 'var(--secondary-color)';
        viewQuestionnaireBtn.style.color = 'white';
        
        // Get the active quarter from the hidden field or feedback button
        const activeQuarterField = document.getElementById('activeQuarterField');
        const quarterValue = activeQuarterField ? activeQuarterField.value : 'Q1';
        
        // Extract just the quarter number
        const quarter = quarterValue.replace('Q', '');
        console.log(`Loading feedback data for ${quarterValue}`);
        
        // Load feedback data for this quarter
        loadFeedbackData(quarter);
        
        console.log('Switched to feedback results view');
    }
}

async function save360Questionnaire() {
    console.log("Saving 360 degree feedback...");
    
    // Get form values
    const startDateElement = document.getElementById('startDate');
    const endDateElement = document.getElementById('endDate');
    const saveFeedbackButton = document.getElementById("save360Questionnaire");
    const activeQuarterField = document.getElementById('activeQuarterField');

    if (!startDateElement || !endDateElement || !activeQuarterField) {
        console.error("One or more required form elements not found.");
        alert("Form error: Required fields are missing.");
        return;
    }

    // Show loading state
    if (saveFeedbackButton) {
        saveFeedbackButton.disabled = true;
        saveFeedbackButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
    }

    const startDate = startDateElement.value;
    const endDate = endDateElement.value;

    // Get the quarter from the active field
    const quarter = activeQuarterField.value || 'Q1';
    
    // Validate dates
    if (!startDate || !endDate) {
        alert("Please enter both start and end dates.");
        // Reset button state
        if (saveFeedbackButton) {
            saveFeedbackButton.disabled = false;
            saveFeedbackButton.innerHTML = '<i class="fas fa-save"></i> Save Questionnaire';
        }
        return;
    }
    
    if (new Date(startDate) > new Date(endDate)) {
        alert("End date must be after start date.");
        // Reset button state
        if (saveFeedbackButton) {
            saveFeedbackButton.disabled = false;
            saveFeedbackButton.innerHTML = '<i class="fas fa-save"></i> Save Questionnaire';
        }
        return;
    }
    
    console.log("Saving questionnaire with the following data:");
    console.log("User ID:", userId);
    console.log("Job ID:", jobId);
    console.log("Start Date:", startDate);
    console.log("End Date:", endDate);
    console.log("Quarter:", quarter);

    // Collect feedback data
    const feedbackData = {
        questions: [],
        skills: []
    };

    // Collect qualitative questions from input fields
    const guideQuestionInputs = document.querySelectorAll('.guide-question-input');
    guideQuestionInputs.forEach(input => {
        const objectiveId = input.getAttribute('data-objective-id');
        if (objectiveId && input.value.trim()) {
            feedbackData.questions.push({
                objectiveId: objectiveId,
                questionText: input.value.trim()
            });
        }
    });

    // Check if any questions were added
    if (feedbackData.questions.length === 0) {
        alert("Please provide at least one qualitative question.");
        
        // Reset button state
        if (saveFeedbackButton) {
            saveFeedbackButton.disabled = false;
            saveFeedbackButton.innerHTML = '<i class="fas fa-save"></i> Save Questionnaire';
        }
        return;
    }

    console.log("Feedback data to save:", feedbackData);

    // Send data to server using the correct endpoint for saving questionnaire
    try {
        const response = await fetch(`/linemanager/save-feedback-questionnaire/${userId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                userId,
                jobId,
                startDate,
                endDate,
                feedbackData,
                quarter
            })
        });

        console.log("Response from server:", response.status);

        // Check if the response was successful
        if (!response.ok) {
            throw new Error(`Server responded with status ${response.status}`);
        }

        const result = await response.json();
        console.log("Result from server:", result);

        if (result.success) {
            // Show success message
            alert("Feedback questionnaire saved successfully!");
            
            // Update viewState to reflect the new status
            const quarterKey = `feedbacks_${quarter}`;
            viewState.viewOnlyStatus[quarterKey] = true;
            
            // Update the UI based on the new state
            updateStepperAccessibility();
            
            // Switch to view-only mode
            switchToViewOnlyMode();
            
            // Switch to the "View Feedback" tab
            const viewFeedbackBtn = document.getElementById('viewFeedbackBtn');
            if (viewFeedbackBtn) {
                viewFeedbackBtn.click();
            }
        } else {
            alert("Failed to save feedback: " + (result.message || "Unknown error"));
            
            // Reset button state
            if (saveFeedbackButton) {
                saveFeedbackButton.disabled = false;
                saveFeedbackButton.innerHTML = '<i class="fas fa-save"></i> Save Questionnaire';
            }
        }
    } catch (error) {
        console.error("Error saving feedback:", error);
        alert("An error occurred while saving feedback. Please try again later.");
        
        // Reset button state
        if (saveFeedbackButton) {
            saveFeedbackButton.disabled = false;
            saveFeedbackButton.innerHTML = '<i class="fas fa-save"></i> Save Questionnaire';
        }
    }
}
// Function to fetch year data
function fetchYearData() {
    const yearSelect = document.getElementById('yearSelect');
    if (!yearSelect) {
        console.error("Year select element not found.");
        return;
    }
    
    const selectedYear = yearSelect.value;
    if (selectedYear) {
        // Show loading indicator
        const stepperContainer = document.querySelector('.stepper-container');
        if (stepperContainer) {
            stepperContainer.classList.add('loading');
        }
        
        // Redirect to the same page with the selected year as a query parameter
        window.location.href = `?year=${selectedYear}`;
    }
}

// Function to save objectives
async function saveObjectives(event) {
    event.preventDefault(); // Prevent default form submission
    
    // Get form values
    const userIdField = document.querySelector('input[name="userId"]');
    if (!userIdField) {
        console.error("User ID field not found in the form.");
        alert("Form error: User ID field not found.");
        return;
    }
    
    const userId = userIdField.value;
    let jobId = document.getElementById("jobId")?.value;
    
    // If jobId is not set in the form, try to get it from viewState
    if (!jobId && viewState && viewState.jobId) {
        jobId = viewState.jobId;
        console.log("Using jobId from viewState:", jobId);
    }
    
    console.log("Saving objectives for User ID:", userId);
    console.log("Job ID:", jobId);

    // Validate required IDs
    if (!userId) {
        console.error("User ID is missing.");
        alert("Please ensure all fields are filled out correctly before saving.");
        return;
    }

    // Ensure confirmation checkbox is checked
    const confirmationCheckbox = document.getElementById("confirmationCheckbox");
    if (!confirmationCheckbox || !confirmationCheckbox.checked) {
        alert("Please confirm that you have reviewed the objectives before saving.");
        return;
    }

    // Calculate total weight
    let totalWeight = 0;

    // Collect objectives from the form
    const objectiveDescrpt = [];
    const objectiveKPI = [];
    const objectiveTarget = [];
    const objectiveUOM = [];
    const objectiveAssignedWeight = [];

    const rows = document.querySelectorAll("#progress-table-body tr");
    rows.forEach(row => {
        const descriptionInput = row.querySelector('input[name="objectiveDescrpt"]');
        const kpiInput = row.querySelector('input[name="objectiveKPI"]');
        const targetInput = row.querySelector('input[name="objectiveTarget"]');
        const uomInput = row.querySelector('input[name="objectiveUOM"]');
        const weightInput = row.querySelector('input[name="objectiveAssignedWeight"]');

        if (descriptionInput && kpiInput && targetInput && uomInput && weightInput) {
            const weight = parseFloat(weightInput.value) || 0;
            totalWeight += weight;

            objectiveDescrpt.push(descriptionInput.value.trim());
            objectiveKPI.push(kpiInput.value.trim());
            objectiveTarget.push(targetInput.value.trim());
            objectiveUOM.push(uomInput.value.trim());
            objectiveAssignedWeight.push(weight);
        }
    });

    console.log("Total weight:", totalWeight);
    console.log("Objectives to save:", {
        objectiveDescrpt,
        objectiveKPI,
        objectiveTarget,
        objectiveUOM,
        objectiveAssignedWeight
    });

    // Validate total weight
    if (Math.abs(totalWeight - 100) > 0.01) { // Allow for small floating point differences
        alert("Total assigned weight must be exactly 100% to save.");
        return;
    }

    // Proceed if objectives are present
    if (objectiveDescrpt.length > 0) {
        try {
            // Show loading state
            const saveButton = document.getElementById("saveButton");
            if (saveButton) {
                saveButton.disabled = true;
                saveButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
            }

            // Construct the request payload
            const payload = {
                userId,
                jobId,
                objectiveDescrpt,
                objectiveKPI,
                objectiveTarget,
                objectiveUOM,
                objectiveAssignedWeight
            };
            
            console.log("Sending payload to server:", payload);

            // Send data to server
            const response = await fetch(`/linemanager/records-performance-tracker/${userId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            console.log("Response status:", response.status);

            // Get the response text first to debug
            const responseText = await response.text();
            console.log("Raw response:", responseText);
            
            let result;
            try {
                // Try to parse it as JSON (if it is JSON)
                result = JSON.parse(responseText);
            } catch (e) {
                console.error("Response is not valid JSON:", e);
                // Handle non-JSON response
                if (responseText.includes("Redirect")) {
                    console.log("Redirect detected in response");
                    // The server is trying to redirect, follow the redirect
                    window.location.href = `/linemanager/records-performance-tracker/${userId}`;
                    return;
                }
                throw new Error("Invalid response format from server");
            }

            console.log("Parsed result:", result);

            if (result.success) {
                // Display a success alert
                alert("Objectives saved successfully.");
                
                // Update viewState to reflect the new status
                viewState.submittedObjectives = result.objectives || submittedObjectives;
                viewState.viewOnlyStatus.objectivesettings = true;
                
                // Update the UI based on the new state
                updateStepperAccessibility();
                
                // Reload the page to show the updated view
                window.location.reload();
            } else {
                alert("Failed to save objectives: " + (result.message || "Unknown error"));
                
                // Reset button state
                if (saveButton) {
                    saveButton.disabled = false;
                    saveButton.innerHTML = '<i class="fas fa-save"></i> Save Objectives';
                }
            }
        } catch (error) {
            console.error("Error saving objectives:", error);
            alert("An error occurred while saving objectives. Please try again later.");
            
            // Reset button state
            const saveButton = document.getElementById("saveButton");
            if (saveButton) {
                saveButton.disabled = false;
                saveButton.innerHTML = '<i class="fas fa-save"></i> Save Objectives';
            }
        }
    } else {
        alert("No objectives to save. Please add at least one objective.");
    }
}

// Function to save feedback draft
async function saveFeedbackDraft(event) {
    if (event) event.preventDefault();
    
    console.log("Saving feedback draft...");
    
    // Get form values
    const startDateElement = document.getElementById('startDate');
    const endDateElement = document.getElementById('endDate');
    const saveDraftButton = document.getElementById("saveFeedbackDraft");
    const activeQuarterField = document.getElementById('activeQuarterField');

    if (!startDateElement || !endDateElement || !activeQuarterField) {
        console.error("One or more required form elements not found.");
        alert("Form error: Required fields are missing.");
        return;
    }

    // Show loading state
    if (saveDraftButton) {
        saveDraftButton.disabled = true;
        saveDraftButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
    }

    const startDate = startDateElement.value;
    const endDate = endDateElement.value;
    const quarter = activeQuarterField.value || 'Q1';
    
    // Validate dates
    if (!startDate || !endDate) {
        alert("Please enter both start and end dates.");
        // Reset button state
        if (saveDraftButton) {
            saveDraftButton.disabled = false;
            saveDraftButton.innerHTML = '<i class="fas fa-save"></i> Save Draft';
        }
        return;
    }
    
    if (new Date(startDate) > new Date(endDate)) {
        alert("End date must be after start date.");
        // Reset button state
        if (saveDraftButton) {
            saveDraftButton.disabled = false;
            saveDraftButton.innerHTML = '<i class="fas fa-save"></i> Save Draft';
        }
        return;
    }
    
    // Collect feedback data
    const feedbackData = {
        questions: [],
        skills: [],
        isDraft: true // Flag to indicate this is a draft
    };
    
    // Collect guide questions
    const guideQuestionInputs = document.querySelectorAll('.guide-question-input');
    guideQuestionInputs.forEach(input => {
        const objectiveId = input.getAttribute('data-objective-id');
        if (objectiveId) {
            feedbackData.questions.push({
                objectiveId: objectiveId,
                questionText: input.value.trim()
            });
        }
    });
    
    try {
        // Send draft data to server
        const response = await fetch(`/linemanager/save-feedback-draft/${userId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                userId,
                jobId,
                startDate,
                endDate,
                feedbackData,
                quarter
            })
        });
        
        if (!response.ok) {
            throw new Error(`Server responded with status ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            // Show success message
            alert("Feedback draft saved successfully! You can continue editing.");
            
            // Reset button state
            if (saveDraftButton) {
                saveDraftButton.disabled = false;
                saveDraftButton.innerHTML = '<i class="fas fa-save"></i> Save Draft';
            }
        } else {
            alert("Failed to save draft: " + (result.message || "Unknown error"));
            
            // Reset button state
            if (saveDraftButton) {
                saveDraftButton.disabled = false;
                saveDraftButton.innerHTML = '<i class="fas fa-save"></i> Save Draft';
            }
        }
    } catch (error) {
        console.error("Error saving feedback draft:", error);
        alert("An error occurred while saving the draft. Please try again later.");
        
        // Reset button state
        if (saveDraftButton) {
            saveDraftButton.disabled = false;
            saveDraftButton.innerHTML = '<i class="fas fa-save"></i> Save Draft';
        }
    }
}

// Function to submit feedback (finalize)
async function submitFeedback(event) {
    if (event) event.preventDefault();
    
    console.log("Submitting feedback (final)...");
    
    // Get form values
    const startDateElement = document.getElementById('startDate');
    const endDateElement = document.getElementById('endDate');
    const submitButton = document.getElementById("submitFeedback");
    const activeQuarterField = document.getElementById('activeQuarterField');

    if (!startDateElement || !endDateElement || !activeQuarterField) {
        console.error("One or more required form elements not found.");
        alert("Form error: Required fields are missing.");
        return;
    }

    // Show loading state
    if (submitButton) {
        submitButton.disabled = true;
        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Submitting...';
    }

    const startDate = startDateElement.value;
    const endDate = endDateElement.value;
    const quarter = activeQuarterField.value || 'Q1';
    
    // Validate dates
    if (!startDate || !endDate) {
        alert("Please enter both start and end dates.");
        // Reset button state
        if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Questionnaire';
        }
        return;
    }
    
    if (new Date(startDate) > new Date(endDate)) {
        alert("End date must be after start date.");
        // Reset button state
        if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Questionnaire';
        }
        return;
    }
    
    // Confirm submission
    if (!confirm("Are you sure you want to submit the questionnaire? You won't be able to edit it after submission.")) {
        // Reset button state
        if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Questionnaire';
        }
        return;
    }
    
    // Collect feedback data
    const feedbackData = {
        questions: [],
        skills: [],
        isDraft: false // Flag to indicate this is a final submission
    };
    
    // Collect guide questions
    const guideQuestionInputs = document.querySelectorAll('.guide-question-input');
    guideQuestionInputs.forEach(input => {
        const objectiveId = input.getAttribute('data-objective-id');
        if (objectiveId) {
            feedbackData.questions.push({
                objectiveId: objectiveId,
                questionText: input.value.trim()
            });
        }
    });
    
    try {
        // Send final submission to server
        const response = await fetch(`/linemanager/records-performance-tracker/questionnaire/${userId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                userId,
                jobId,
                startDate,
                endDate,
                feedbackData,
                quarter
            })
        });
        
        if (!response.ok) {
            throw new Error(`Server responded with status ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            // Show success message
            alert("Questionnaire submitted successfully!");
            
            // Update viewState to reflect the new status
            const quarterKey = `feedbacks_${quarter}`;
            viewState.viewOnlyStatus[quarterKey] = true;
            
            // Update the UI based on the new state
            updateStepperAccessibility();
            
            // Reload to show the updated view
            window.location.reload();
        } else {
            alert("Failed to submit questionnaire: " + (result.message || "Unknown error"));
            
            // Reset button state
            if (submitButton) {
                submitButton.disabled = false;
                submitButton.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Questionnaire';
            }
        }
    } catch (error) {
        console.error("Error submitting feedback:", error);
        alert("An error occurred while submitting the questionnaire. Please try again later.");
        
        // Reset button state
        if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Questionnaire';
        }
    }
}
function loadFeedbackData(quarter) {
    console.log(`Loading feedback data for quarter ${quarter}...`);
    
    if (!userId) {
        console.error("User ID not available for loading feedback data.");
        return;
    }
    
    const objectiveFeedbackContainer = document.getElementById('objectiveFeedbackContainer');
    const skillsFeedbackContainer = document.getElementById('skillsFeedbackContainer');
    
    // Show loading state
    if (objectiveFeedbackContainer) {
        objectiveFeedbackContainer.innerHTML = '<div class="loading" style="text-align: center; padding: 30px;"><i class="fas fa-spinner fa-spin" style="font-size: 24px;"></i><p>Loading feedback data...</p></div>';
    }
    
    if (skillsFeedbackContainer) {
        skillsFeedbackContainer.innerHTML = '<div class="loading" style="text-align: center; padding: 30px;"><i class="fas fa-spinner fa-spin" style="font-size: 24px;"></i><p>Loading skills feedback data...</p></div>';
    }
    
    // Format the quarter parameter
    const formattedQuarter = quarter.toString().startsWith('Q') ? quarter : `Q${quarter}`;
    
    // Fetch feedback data from the server
    fetch(`/linemanager/get-feedback-data/${userId}?quarter=${formattedQuarter}`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`Server responded with status ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log(`Received feedback data for ${formattedQuarter}:`, data);
            
            if (data.success) {
                // Update stats with correct department-wide calculations
                const totalResponsesElement = document.getElementById('totalResponses');
                const averageRatingElement = document.getElementById('averageRating');
                const completionRateElement = document.getElementById('completionRate');
                
                if (totalResponsesElement) totalResponsesElement.textContent = data.stats?.totalResponses || '0';
                if (averageRatingElement) averageRatingElement.textContent = data.stats?.averageRating || '0.0';
                if (completionRateElement) completionRateElement.textContent = data.stats?.completionRate || '0%';
                
                // Generate and display objective feedback
                if (objectiveFeedbackContainer) {
                    let objectiveFeedbackHTML = '';
                    
                    if (data.objectiveFeedback && data.objectiveFeedback.length > 0) {
                        data.objectiveFeedback.forEach(objective => {
                            objectiveFeedbackHTML += generateObjectiveFeedbackHTML(objective, formattedQuarter);
                        });
                    } else {
                        objectiveFeedbackHTML = `
                        <div class="empty-state" style="text-align: center; padding: 30px; background-color: #f9f9f9; border-radius: 8px;">
                            <i class="fas fa-inbox" style="font-size: 48px; color: #ccc; margin-bottom: 15px;"></i>
                            <p>No objective feedback responses available yet for ${formattedQuarter}.</p>
                        </div>`;
                    }
                    
                    objectiveFeedbackContainer.innerHTML = objectiveFeedbackHTML;
                }
                
                // Generate and display skills feedback
                if (skillsFeedbackContainer) {
                    let skillsFeedbackHTML = '';
                    
                    if (data.skillsFeedback && data.skillsFeedback.length > 0) {
                        skillsFeedbackHTML = '<div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 15px;">';
                        
                        data.skillsFeedback.forEach(skill => {
                            skillsFeedbackHTML += generateSkillFeedbackHTML(skill);
                        });
                        
                        skillsFeedbackHTML += '</div>';
                    } else {
                        skillsFeedbackHTML = `
                        <div class="empty-state" style="text-align: center; padding: 30px; background-color: #f9f9f9; border-radius: 8px;">
                            <i class="fas fa-inbox" style="font-size: 48px; color: #ccc; margin-bottom: 15px;"></i>
                            <p>No skills feedback responses available yet for ${formattedQuarter}.</p>
                        </div>`;
                    }
                    
                    skillsFeedbackContainer.innerHTML = skillsFeedbackHTML;
                }
                
                // Store data globally for filtering
                window.currentFeedbackData = {
                    individualAnswers: data.individualAnswers || [],
                    departmentStaff: data.departmentStaff || [],
                    questionFilterOptions: data.questionFilterOptions || [],
                    responderFilterOptions: data.responderFilterOptions || [], // NEW
                    quarter: formattedQuarter
                };
                
                // Update individual answers with proper filtering
                updateIndividualAnswersWithFiltering(data.individualAnswers, data.departmentStaff, data.questionFilterOptions, formattedQuarter);
                
                // Setup enhanced filter handlers
                setupEnhancedFilters(data.responderFilterOptions, data.questionFilterOptions);
                
            } else {
                // Show error message
                showFeedbackError(`Error loading feedback data for ${formattedQuarter}: ${data.message || 'Unknown error'}`);
            }
        })
        .catch(error => {
            console.error(`Error fetching feedback data for ${formattedQuarter}:`, error);
            showFeedbackError(`Error loading feedback data for ${formattedQuarter}. Please try again later. (${error.message})`);
        });
}

function setupEnhancedFilters(responderFilterOptions, questionFilterOptions) {
    const responderFilter = document.getElementById('responderFilter');
    const questionFilter = document.getElementById('questionFilter');
    
    // Clear and populate responder filter with enhanced options
    if (responderFilter && responderFilterOptions) {
        responderFilter.innerHTML = '';
        
        responderFilterOptions.forEach(option => {
            const optionElement = document.createElement('option');
            optionElement.value = option.value;
            optionElement.textContent = option.label;
            
            // Handle disabled options (separators)
            if (option.disabled) {
                optionElement.disabled = true;
                optionElement.style.fontWeight = 'bold';
                optionElement.style.backgroundColor = '#f0f0f0';
            }
            
            responderFilter.appendChild(optionElement);
        });
    }
    
    // Clear and populate question filter
    if (questionFilter && questionFilterOptions) {
        questionFilter.innerHTML = '';
        
        questionFilterOptions.forEach(option => {
            const optionElement = document.createElement('option');
            optionElement.value = option.value;
            optionElement.textContent = option.label;
            
            // Style section headers
            if (option.value === 'hard_skills' || option.value === 'soft_skills' || option.label.startsWith('---')) {
                optionElement.style.fontWeight = 'bold';
                optionElement.style.backgroundColor = '#f0f0f0';
                optionElement.disabled = true;
            }
            
            questionFilter.appendChild(optionElement);
        });
    }
    
    // Add event listeners for real-time filtering
    if (responderFilter) {
        responderFilter.addEventListener('change', applyEnhancedFilters);
    }
    
    if (questionFilter) {
        questionFilter.addEventListener('change', applyEnhancedFilters);
    }
    
    console.log('Enhanced filters setup completed with proper responder and question options');
}

function applyEnhancedFilters() {
    const responderFilter = document.getElementById('responderFilter');
    const questionFilter = document.getElementById('questionFilter');
    
    if (!window.currentFeedbackData || !responderFilter || !questionFilter) {
        console.error('Filter data not available');
        return;
    }
    
    const responderValue = responderFilter.value;
    const questionValue = questionFilter.value;
    
    let filteredAnswers = [...window.currentFeedbackData.individualAnswers];
    
    console.log('Applying filters:', { responderValue, questionValue });
    console.log('Original answers count:', filteredAnswers.length);
    
    // Apply responder filter
    if (responderValue !== 'all' && responderValue !== 'separator') {
        if (responderValue === 'peer' || responderValue === 'manager' || responderValue === 'direct' || responderValue === 'self') {
            // Filter by responder type
            filteredAnswers = filteredAnswers.filter(answer => 
                answer.responderType.toLowerCase() === responderValue.toLowerCase()
            );
            console.log(`Filtered by type '${responderValue}':`, filteredAnswers.length);
        } else {
            // Filter by specific responder ID
            filteredAnswers = filteredAnswers.filter(answer => 
                answer.responderId && answer.responderId.toString() === responderValue
            );
            console.log(`Filtered by responder ID '${responderValue}':`, filteredAnswers.length);
        }
    }
    
    // Apply question filter
    if (questionValue !== 'all' && !questionValue.endsWith('_skills') && !questionValue.startsWith('---')) {
        if (questionValue.startsWith('obj_')) {
            // Filter by specific objective
            const objectiveId = questionValue.replace('obj_', '');
            filteredAnswers = filteredAnswers.filter(answer => 
                answer.objectiveAnswers && answer.objectiveAnswers.some(obj => 
                    obj.objectiveId && obj.objectiveId.toString() === objectiveId
                )
            );
            console.log(`Filtered by objective '${objectiveId}':`, filteredAnswers.length);
        } else if (questionValue.startsWith('hard_') || questionValue.startsWith('soft_')) {
            // Filter by specific skill
            const skillId = questionValue.replace(/^(hard_|soft_)/, '');
            const skillType = questionValue.startsWith('hard_') ? 'Hard' : 'Soft';
            
            filteredAnswers = filteredAnswers.filter(answer => 
                answer.skillRatings && Object.values(answer.skillRatings).some(skill => 
                    skill.skillId && skill.skillId.toString() === skillId && skill.skillType === skillType
                )
            );
            console.log(`Filtered by skill '${skillId}' (${skillType}):`, filteredAnswers.length);
        }
    }
    
    // Display filtered results
    displayFilteredAnswers(filteredAnswers);
    
    // Update filter result count
    updateFilterResultCount(filteredAnswers.length, window.currentFeedbackData.individualAnswers.length);
}


// Function to update filter result count
function updateFilterResultCount(filteredCount, totalCount) {
    let countDisplay = document.getElementById('filterResultCount');
    
    if (!countDisplay) {
        // Create count display if it doesn't exist
        countDisplay = document.createElement('div');
        countDisplay.id = 'filterResultCount';
        countDisplay.style.cssText = `
            margin: 10px 0;
            padding: 10px;
            background-color: #e3f2fd;
            border-radius: 4px;
            font-size: 14px;
            color: #1976d2;
            border-left: 4px solid #2196F3;
        `;
        
        const filterBar = document.querySelector('.filter-bar');
        if (filterBar) {
            filterBar.appendChild(countDisplay);
        }
    }
    
    if (filteredCount === totalCount) {
        countDisplay.innerHTML = `<i class="fas fa-info-circle"></i> Showing all ${totalCount} responses`;
    } else {
        countDisplay.innerHTML = `<i class="fas fa-filter"></i> Showing ${filteredCount} of ${totalCount} responses`;
    }
}

function generateEnhancedObjectiveFeedbackHTML(objective, quarter) {
    const averageRating = objective.averageRating || 0;
    const ratingColor = averageRating >= 4 ? '#4CAF50' : averageRating >= 3 ? '#FF9800' : '#f44336';
    
    return `
    <div class="feedback-card" style="background-color: white; border-radius: 8px; padding: 20px; margin-bottom: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); border-left: 4px solid ${ratingColor};">
        <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 15px;">
            <div style="flex: 1;">
                <h4 style="margin: 0; color: var(--primary-color);">${objective.objectiveDescrpt || 'Unnamed Objective'}</h4>
                <p style="margin: 5px 0 0 0; color: #555; font-size: 0.9em;">
                    <strong>KPI:</strong> ${objective.objectiveKPI || 'N/A'} | 
                    <strong>Target:</strong> ${objective.objectiveTarget || 'N/A'} ${objective.objectiveUOM || ''} |
                    <strong>Weight:</strong> ${objective.objectiveAssignedWeight ? (objective.objectiveAssignedWeight * 100).toFixed(1) + '%' : 'N/A'}
                </p>
                ${objective.question ? `
                    <p style="margin: 10px 0 0 0; padding: 8px; background-color: #f5f5f5; border-radius: 4px; font-size: 0.9em;">
                        <strong>Guide Question:</strong> ${objective.question}
                    </p>
                ` : ''}
            </div>
            <div class="rating" style="background-color: ${ratingColor}; color: white; padding: 8px 12px; border-radius: 20px; font-weight: bold; text-align: center; min-width: 80px;">
                ${averageRating.toFixed(1)}/5.0<br>
                <div style="color: #FFD700; font-size: 0.8em; margin-top: 2px;">
                    ${generateStarRating(averageRating)}
                </div>
            </div>
        </div>
        
        <h5 style="margin: 15px 0 10px 0; color: var(--secondary-color);">
            <i class="fas fa-comments"></i> Feedback Comments (${objective.comments ? objective.comments.length : 0})
        </h5>
        ${objective.comments && objective.comments.length > 0 ? 
            objective.comments.map((comment, index) => `
                <div class="comment" style="background-color: #f9f9f9; padding: 12px; border-radius: 6px; margin-bottom: 10px; border-left: 3px solid var(--secondary-color);">
                    <p style="margin: 0; line-height: 1.5;">${comment.text || 'No comment provided'}</p>
                    <small style="display: block; margin-top: 8px; color: #777;">
                        <i class="fas fa-user"></i> ${comment.responderType || 'Anonymous'} - 
                        <i class="fas fa-calendar"></i> ${new Date(comment.submittedOn).toLocaleDateString()} 
                        (${quarter})
                    </small>
                </div>
            `).join('') : 
            '<div class="no-comments" style="text-align: center; padding: 20px; background-color: #f9f9f9; border-radius: 6px; border: 1px dashed #ddd;"><p style="margin: 0; color: #666;"><i class="fas fa-inbox"></i> No feedback comments available for this objective.</p></div>'
        }
    </div>
    `;
}

// Enhanced generateSkillFeedbackHTML with better visual representation
function generateEnhancedSkillFeedbackHTML(skill) {
    const averageRating = skill.averageRating || 0;
    const ratingColor = averageRating >= 4 ? '#4CAF50' : averageRating >= 3 ? '#FF9800' : '#f44336';
    const skillTypeColor = skill.skillType === 'Soft' ? '#9C27B0' : '#2196F3';
    
    return `
    <div class="skill-card" style="background-color: white; border-radius: 8px; padding: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); border-top: 4px solid ${skillTypeColor}; height: 100%;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
            <h4 style="margin: 0; color: var(--primary-color); font-size: 1rem;">${skill.skillName || 'Unnamed Skill'}</h4>
            <span class="skill-type" style="background-color: ${skillTypeColor}; color: white; padding: 4px 8px; border-radius: 12px; font-size: 0.75em; font-weight: bold;">
                ${skill.skillType || 'Skill'}
            </span>
        </div>
        
        <div class="rating-section" style="margin-bottom: 15px;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                <span style="font-weight: bold; color: var(--primary-color); font-size: 1.1em;">${averageRating.toFixed(1)}/5.0</span>
                <div style="color: #FFD700; font-size: 0.9em;">
                    ${generateStarRating(averageRating)}
                </div>
            </div>
            
            <div class="rating-bar" style="height: 8px; background-color: #e0e0e0; border-radius: 4px; overflow: hidden;">
                <div style="height: 100%; width: ${(averageRating/5)*100}%; background-color: ${ratingColor}; border-radius: 4px; transition: width 0.3s ease;"></div>
            </div>
        </div>
        
        <div style="text-align: center; color: #777; font-size: 0.85em;">
            <i class="fas fa-users"></i> Based on ${skill.responseCount || 0} response${skill.responseCount !== 1 ? 's' : ''}
        </div>
    </div>
    `;
}
function updateIndividualAnswersWithFiltering(individualAnswers, departmentStaff, questionFilterOptions, quarter) {
    const individualAnswersContainer = document.getElementById('individualAnswersContainer');
    
    if (!individualAnswersContainer) {
        console.error("Individual answers container not found.");
        return;
    }
    
    // Store data globally for filtering
    window.currentFeedbackData = {
        individualAnswers: individualAnswers || [],
        departmentStaff: departmentStaff || [],
        questionFilterOptions: questionFilterOptions || [],
        quarter
    };
    
    if (!individualAnswers || individualAnswers.length === 0) {
        individualAnswersContainer.innerHTML = `
        <div class="empty-state" style="text-align: center; padding: 30px; background-color: #f9f9f9; border-radius: 8px;">
            <i class="fas fa-inbox" style="font-size: 48px; color: #ccc; margin-bottom: 15px;"></i>
            <p>No individual feedback responses available yet for ${quarter}.</p>
        </div>`;
        return;
    }
    
    // Display all individual answers initially
    displayFilteredAnswers(individualAnswers);
    
    console.log(`Updated individual answers for ${quarter}: ${individualAnswers.length} responses`);
}



// Fixed function to setup feedback tabs
function setupFeedbackTabs() {
    const summaryTab = document.getElementById('summaryTab');
    const answersTab = document.getElementById('answersTab');
    const summaryContent = document.getElementById('summaryContent');
    const answersContent = document.getElementById('answersContent');
    
    if (summaryTab && answersTab && summaryContent && answersContent) {
        summaryTab.addEventListener('click', function() {
            // Show summary, hide answers
            summaryContent.style.display = 'block';
            answersContent.style.display = 'none';
            
            // Update tab styles
            summaryTab.classList.add('active');
            summaryTab.style.backgroundColor = 'var(--primary-color)';
            summaryTab.style.color = 'white';
            answersTab.classList.remove('active');
            answersTab.style.backgroundColor = '#f1f1f1';
            answersTab.style.color = '#333';
            
            console.log('Switched to Summary tab');
        });
        
        answersTab.addEventListener('click', function() {
            // Show answers, hide summary
            answersContent.style.display = 'block';
            summaryContent.style.display = 'none';
            
            // Update tab styles
            answersTab.classList.add('active');
            answersTab.style.backgroundColor = 'var(--primary-color)';
            answersTab.style.color = 'white';
            summaryTab.classList.remove('active');
            summaryTab.style.backgroundColor = '#f1f1f1';
            summaryTab.style.color = '#333';
            
            console.log('Switched to Individual Answers tab');
            
            // If we have current feedback data, make sure it's displayed properly
            if (window.currentFeedbackData && window.currentFeedbackData.individualAnswers) {
                console.log('Refreshing individual answers display');
                displayFilteredAnswers(window.currentFeedbackData.individualAnswers);
                
                // Ensure filters are properly set up
                if (window.currentFeedbackData.responderFilterOptions && window.currentFeedbackData.questionFilterOptions) {
                    setupEnhancedFilters(window.currentFeedbackData.responderFilterOptions, window.currentFeedbackData.questionFilterOptions);
                }
            }
        });
        
        console.log('Feedback tabs setup completed');
    } else {
        console.error('One or more tab elements not found:', {
            summaryTab: !!summaryTab,
            answersTab: !!answersTab,
            summaryContent: !!summaryContent,
            answersContent: !!answersContent
        });
    }
}

// Fixed function to display filtered answers
function displayFilteredAnswers(answersToShow) {
    const individualAnswersContainer = document.getElementById('individualAnswersContainer');
    
    if (!individualAnswersContainer) {
        console.error('Individual answers container not found');
        return;
    }
    
    if (!answersToShow || answersToShow.length === 0) {
        individualAnswersContainer.innerHTML = `
        <div class="empty-state" style="text-align: center; padding: 30px; background-color: #f9f9f9; border-radius: 8px;">
            <i class="fas fa-filter" style="font-size: 48px; color: #ccc; margin-bottom: 15px;"></i>
            <p>No responses match the selected filters.</p>
            <button onclick="clearAllFilters()" style="background-color: var(--primary-color); color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer; margin-top: 10px;">
                <i class="fas fa-times"></i> Clear Filters
            </button>
        </div>`;
        return;
    }
    
    let answersHTML = '';
    
    answersToShow.forEach((answer, index) => {
        // Generate star rating for individual objective ratings
        const generateStarRating = (rating) => {
            if (!rating || rating === 0) return '<span style="color: #ccc;">No rating</span>';
            
            const fullStars = Math.floor(rating);
            const hasHalfStar = rating % 1 >= 0.5;
            const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
            
            let starsHTML = '';
            
            // Add full stars
            for (let i = 0; i < fullStars; i++) {
                starsHTML += '<i class="fas fa-star" style="color: #FFD700;"></i>';
            }
            
            // Add half star if needed
            if (hasHalfStar) {
                starsHTML += '<i class="fas fa-star-half-alt" style="color: #FFD700;"></i>';
            }
            
            // Add empty stars
            for (let i = 0; i < emptyStars; i++) {
                starsHTML += '<i class="far fa-star" style="color: #FFD700;"></i>';
            }
            
            return starsHTML;
        };
        
        answersHTML += `
        <div class="answer-card" style="background-color: white; border-radius: 8px; padding: 20px; margin-bottom: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);" 
             data-responder-type="${answer.responderType.toLowerCase()}" 
             data-responder-id="${answer.responderId}"
             data-responder-name="${answer.responderName}">
            <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 15px;">
                <div>
                    <h4 style="margin: 0; color: var(--primary-color);">${answer.responderName} (${answer.responderType})</h4>
                    <p style="margin: 5px 0 0 0; color: #555; font-size: 0.9em;">${answer.responderJobTitle}</p>
                    <p style="margin: 5px 0 0 0; color: #555; font-size: 0.9em;">Submitted on ${answer.submittedDate ? new Date(answer.submittedDate).toLocaleDateString() : 'Unknown Date'}</p>
                </div>
                <div class="response-status" style="background-color: #4CAF50; color: white; padding: 5px 10px; border-radius: 20px; font-size: 0.8em; font-weight: bold;">
                    Complete
                </div>
            </div>
            
            ${answer.objectiveAnswers && answer.objectiveAnswers.length > 0 ? answer.objectiveAnswers.map(obj => `
                <div class="answer-group objective-answer" style="margin-bottom: 20px; padding-bottom: 15px; border-bottom: 1px solid #eee;" 
                     data-objective-id="${obj.objectiveId}" data-objective-name="${obj.objectiveName}">
                    <h5 style="margin: 0 0 10px 0; color: var(--secondary-color);">${obj.objectiveName || 'Unnamed Objective'}</h5>
                    <div style="display: flex; align-items: center; margin-bottom: 10px;">
                        <div style="margin-right: 15px;">
                            <strong style="color: #555;">Rating:</strong>
                            <span style="font-weight: bold; color: var(--primary-color); margin-left: 5px;">${obj.rating || 'N/A'}/5.0</span>
                        </div>
                        <div class="star-display" style="color: #FFD700;">
                            ${generateStarRating(obj.rating || 0)}
                        </div>
                    </div>
                    <div>
                        <strong style="color: #555;">Comment:</strong>
                        <p style="margin: 5px 0 0 0;">${obj.comment || 'No comment provided'}</p>
                    </div>
                </div>
            `).join('') : '<div style="text-align: center; color: #666; font-style: italic; padding: 10px;">No objective feedback provided</div>'}
            
            ${answer.skillRatings && Object.keys(answer.skillRatings).length > 0 ? `
                <div class="skill-ratings" style="background-color: #f9f9f9; border-radius: 6px; padding: 15px;">
                    <h5 style="margin: 0 0 10px 0; color: var(--secondary-color);">Skills Assessment</h5>
                    <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 10px;">
                        ${Object.entries(answer.skillRatings).map(([skillName, skillData]) => `
                            <div class="skill-rating" style="display: flex; justify-content: space-between;" 
                                 data-skill-name="${skillName}" 
                                 data-skill-type="${skillData.skillType}" 
                                 data-skill-id="${skillData.skillId}">
                                <span>${skillName} <small style="color: #666;">(${skillData.skillType})</small>:</span>
                                <strong style="color: var(--primary-color);">${skillData.rating}/5</strong>
                            </div>
                        `).join('')}
                    </div>
                </div>
            ` : '<div style="text-align: center; color: #666; font-style: italic; padding: 10px;">No skills assessment provided</div>'}
        </div>
        `;
    });
    
    individualAnswersContainer.innerHTML = answersHTML;
    console.log(`Displayed ${answersToShow.length} filtered answers`);
}


function clearAllFilters() {
    const responderFilter = document.getElementById('responderFilter');
    const questionFilter = document.getElementById('questionFilter');
    
    if (responderFilter) responderFilter.value = 'all';
    if (questionFilter) questionFilter.value = 'all';
    
    // Apply filters to show all results
    applyEnhancedFilters();
    
    // Show success message
    showFilterClearMessage();
}



// Function to submit Mid-Year IDP form
async function submitMidYearIDPForm(event) {
    event.preventDefault();
    
    console.log("Submitting Mid-Year IDP form...");
    
    // Validate the form
    if (!validateIDPForm('mid')) {
        return;
    }
    
    // Get form data
    const formData = {
        profStrengths: document.getElementById("profStrengths").value,
        profAreasForDevelopment: document.getElementById("profAreasForDevelopment").value,
        profActionsToTake: document.getElementById("profActionsToTake").value,
        leaderStrengths: document.getElementById("leaderStrengths").value,
        leaderAreasForDevelopment: document.getElementById("leaderAreasForDevelopment").value,
        leaderActionsToTake: document.getElementById("leaderActionsToTake").value,
        nextRoleShortTerm: document.getElementById("nextRoleShortTerm").value,
        nextRoleLongTerm: document.getElementById("nextRoleLongTerm").value,
        nextRoleMobility: document.getElementById("nextRoleMobility").value
    };
    
    // Disable the submit button and show loading state
    const submitButton = document.getElementById("submitMidYearIDP");
    if (submitButton) {
        submitButton.disabled = true;
        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Submitting...';
    }
    
    try {
        // Submit the form using AJAX
        const response = await fetch(`/linemanager/midyear-idp/${userId}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            body: JSON.stringify(formData)
        });
        
        if (!response.ok) {
            throw new Error(`Server responded with status ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            alert("Mid-Year IDP saved successfully!");
            
            // Update viewState to reflect the new status
            viewState.viewOnlyStatus.midyearidp = true;
            
            // Update the UI based on the new state
            updateStepperAccessibility();
            
            // Redirect to refresh the page
            window.location.href = `/linemanager/records-performance-tracker/${userId}`;
        } else {
            alert("Error saving Mid-Year IDP: " + (result.message || "Unknown error"));
            
            // Re-enable the submit button
            if (submitButton) {
                submitButton.disabled = false;
                submitButton.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Mid-Year IDP';
            }
        }
    } catch (error) {
        console.error("Error submitting Mid-Year IDP:", error);
        alert("An error occurred while submitting the Mid-Year IDP. Please try again.");
        
        // Re-enable the submit button
        if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Mid-Year IDP';
        }
    }
}

// Function to submit Final-Year IDP form
async function submitFinalYearIDPForm(event) {
    event.preventDefault();
    
    console.log("Submitting Final-Year IDP form...");
    
    // Validate the form
    if (!validateIDPForm('final')) {
        return;
    }
    
    // Get form data
    const formData = {
        profStrengths: document.getElementById("profStrengths").value,
        profAreasForDevelopment: document.getElementById("profAreasForDevelopment").value,
        profActionsToTake: document.getElementById("profActionsToTake").value,
        leaderStrengths: document.getElementById("leaderStrengths").value,
        leaderAreasForDevelopment: document.getElementById("leaderAreasForDevelopment").value,
        leaderActionsToTake: document.getElementById("leaderActionsToTake").value,
        nextRoleShortTerm: document.getElementById("nextRoleShortTerm").value,
        nextRoleLongTerm: document.getElementById("nextRoleLongTerm").value,
        nextRoleMobility: document.getElementById("nextRoleMobility").value
    };
    
    // Disable the submit button and show loading state
    const submitButton = document.getElementById("submitFinalYearIDP");
    if (submitButton) {
        submitButton.disabled = true;
        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Submitting...';
    }
    
    try {
        // Submit the form using AJAX
        const response = await fetch(`/linemanager/finalyear-idp/${userId}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            body: JSON.stringify(formData)
        });
        
        if (!response.ok) {
            throw new Error(`Server responded with status ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            alert("Final-Year IDP saved successfully!");
            
            // Update viewState to reflect the new status
            viewState.viewOnlyStatus.finalyearidp = true;
            
            // Update the UI based on the new state
            updateStepperAccessibility();
            
            // Redirect to refresh the page
            window.location.href = `/linemanager/records-performance-tracker/${userId}`;
        } else {
            alert("Error saving Final-Year IDP: " + (result.message || "Unknown error"));
            
            // Re-enable the submit button
            if (submitButton) {
                submitButton.disabled = false;
                submitButton.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Final-Year IDP';
            }
        }
    } catch (error) {
        console.error("Error submitting Final-Year IDP:", error);
        alert("An error occurred while submitting the Final-Year IDP. Please try again.");
        
        // Re-enable the submit button
        if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Final-Year IDP';
        }
    }
}

// Function to validate IDP form
function validateIDPForm(formType) {
    const prefix = formType === 'final' ? 'final' : '';
    
    const requiredFields = [
        `${prefix}ProfStrengths`, 
        `${prefix}ProfAreasForDevelopment`, 
        `${prefix}ProfActionsToTake`, 
        `${prefix}LeaderStrengths`, 
        `${prefix}LeaderAreasForDevelopment`, 
        `${prefix}LeaderActionsToTake`, 
        `${prefix}NextRoleShortTerm`, 
        `${prefix}NextRoleLongTerm`, 
        `${prefix}NextRoleMobility`
    ];
    
    let isValid = true;
    let firstInvalidField = null;
    
    requiredFields.forEach(fieldId => {
        // Handle both naming conventions (with and without prefix)
        let field = document.getElementById(fieldId);
        
        // If not found with prefix, try without prefix (using standard field names)
        if (!field && prefix) {
            const standardFieldId = fieldId.replace(prefix, '');
            field = document.getElementById(standardFieldId.charAt(0).toLowerCase() + standardFieldId.slice(1));
        }
        
        if (field) {
            if (!field.value.trim()) {
                field.classList.add("error");
                isValid = false;
                if (!firstInvalidField) {
                    firstInvalidField = field;
                }
            } else {
                field.classList.remove("error");
            }
        } else {
            console.warn(`Field with ID ${fieldId} not found.`);
        }
    });
    
    if (!isValid) {
        alert("Please fill all required fields.");
        
        // Scroll to the first invalid field
        if (firstInvalidField) {
            firstInvalidField.scrollIntoView({ behavior: 'smooth', block: 'center' });
            firstInvalidField.focus();
        }
    }
    
    return isValid;
}

// Function to load Mid-Year IDP data
function loadMidYearIDPData(userId) {
    console.log(`Loading Mid-Year IDP data for user ${userId}...`);
    
    fetch(`/linemanager/midyear-idp/${userId}`, {
        method: "GET",
        headers: {
            "Accept": "application/json"
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`Server responded with status ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            midYearIDPData = data.viewState.midYearData;
            console.log("Loaded Mid-Year IDP data:", midYearIDPData);
            
            // If the mid-year IDP form is currently displayed, update it
            const midYearIDPForm = document.getElementById("midYearIDPForm");
            if (midYearIDPForm && midYearIDPForm.style.display === 'block') {
                createViewOnlyMidYearIDP(midYearIDPData);
            }
        } else {
            console.error("Error loading Mid-Year IDP data:", data.message);
        }
    })
    .catch(error => {
        console.error("Error fetching Mid-Year IDP data:", error);
    });
}

async function loadMidYearFeedbackAggregates() {
    console.log("Loading Mid-Year feedback aggregates...");
    
    // Show loading indicator
    const loadingIndicator = document.getElementById('feedbackLoadingIndicator');
    if (loadingIndicator) {
        loadingIndicator.style.display = 'block';
    }
    
    // Show loading placeholders
    showLoadingPlaceholders();
    
    try {
        // Get the selected year
        let selectedYear = new Date().getFullYear();
        
        const yearSelect = document.getElementById('yearSelect');
        if (yearSelect && yearSelect.value) {
            selectedYear = yearSelect.value;
        }
        
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.has('year')) {
            selectedYear = urlParams.get('year');
        }
        
        // Fetch feedback aggregates from server
        const response = await fetch(`/linemanager/midyear-feedback-aggregates/${userId}?year=${selectedYear}`);
        
        if (!response.ok) {
            throw new Error(`Server responded with status ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            midYearFeedbackData = result.data;
            console.log("Mid-Year feedback data loaded:", midYearFeedbackData);
            
            // Display the feedback in circular format
            displayFeedbackInCircularFormat(midYearFeedbackData);
            
            // UPDATED: Update the training legend with top 5 lacking areas
            updateTrainingLegendWithTop5();
            
        } else {
            console.error("Error loading feedback aggregates:", result.message);
            showNoFeedbackMessage();
        }
        
    } catch (error) {
        console.error("Error fetching Mid-Year feedback aggregates:", error);
        showNoFeedbackMessage();
    } finally {
        // Hide loading indicator
        if (loadingIndicator) {
            loadingIndicator.style.display = 'none';
        }
    }
}

// Function to show loading placeholders
function showLoadingPlaceholders() {
    const containers = [
        'strengthsCircularDisplay',
        'averageCircularDisplay', 
        'belowAverageCircularDisplay',
        'leadershipStrengthsCircularDisplay',
        'leadershipDevelopmentCircularDisplay'
    ];
    
    containers.forEach(containerId => {
        const container = document.getElementById(containerId);
        if (container) {
            container.innerHTML = `
                <div class="loading-placeholder">
                    <i class="fas fa-spinner fa-spin"></i>
                    Loading feedback data...
                </div>
            `;
        }
    });
}

// Function to display feedback in circular format
function displayFeedbackInCircularFormat(feedbackData) {
    if (!feedbackData || !feedbackData.categorizedFeedback) {
        console.error("No categorized feedback data available");
        showNoFeedbackMessage();
        return;
    }
    
    const categorized = feedbackData.categorizedFeedback;
    
    // Display strengths (4-5 star ratings) in Professional Competences
    displayCircularItems('strengthsCircularDisplay', categorized.strengths.filter(item => 
        item.type === 'objective' || (item.type === 'skill' && item.jobReqSkillType === 'Hard')
    ), 'strength');
    
    // Display average ratings (3 stars) in Professional Competences
    displayCircularItems('averageCircularDisplay', categorized.average.filter(item => 
        item.type === 'objective' || (item.type === 'skill' && item.jobReqSkillType === 'Hard')
    ), 'average');
    
    // Display below average ratings (1-2 stars) in Professional Competences
    displayCircularItems('belowAverageCircularDisplay', categorized.belowAverage.filter(item => 
        item.type === 'objective' || (item.type === 'skill' && item.jobReqSkillType === 'Hard')
    ), 'below-average');
    
    // Display leadership strengths (4-5 star ratings)
    displayCircularItems('leadershipStrengthsCircularDisplay', categorized.strengths.filter(item => 
        item.type === 'skill' && item.jobReqSkillType === 'Soft'
    ), 'strength');
    
    // Display leadership development areas (1-3 stars)
    const leadershipDevelopment = [
        ...categorized.average.filter(item => item.type === 'skill' && item.jobReqSkillType === 'Soft'),
        ...categorized.belowAverage.filter(item => item.type === 'skill' && item.jobReqSkillType === 'Soft')
    ];
    displayCircularItems('leadershipDevelopmentCircularDisplay', leadershipDevelopment, 'mixed');
    
    console.log("Feedback displayed in circular format successfully");
}

// Function to display circular items in a container
function displayCircularItems(containerId, items, ratingType) {
    const container = document.getElementById(containerId);
    if (!container) {
        console.error(`Container ${containerId} not found`);
        return;
    }
    
    // Clear existing content
    container.innerHTML = '';
    
    if (!items || items.length === 0) {
        container.innerHTML = `
            <div class="no-feedback-message">
                <i class="fas fa-info-circle" style="margin-right: 8px;"></i>
                No feedback data available for this category
            </div>
        `;
        return;
    }
    
    // Create circular items
    items.forEach((item, index) => {
        const circularItem = createCircularFeedbackItem(item, ratingType);
        container.appendChild(circularItem);
    });
}

// Function to create a single circular feedback item
function createCircularFeedbackItem(item, ratingType) {
    const div = document.createElement('div');
    
    // Determine the CSS class based on rating
    let cssClass = 'circular-feedback-item';
    if (ratingType === 'strength') {
        cssClass += ' strength';
    } else if (ratingType === 'average') {
        cssClass += ' average';
    } else if (ratingType === 'below-average') {
        cssClass += ' below-average';
    } else if (ratingType === 'mixed') {
        // Mixed type - determine class based on actual rating
        if (item.averageRating >= 4) {
            cssClass += ' strength';
        } else if (item.averageRating >= 3) {
            cssClass += ' average';
        } else {
            cssClass += ' below-average';
        }
    }
    
    div.className = cssClass;
    
    // Generate title for tooltip
    const title = generateItemTooltip(item);
    div.setAttribute('title', title);
    
    // Generate star display
    const starDisplay = generateStarDisplay(item.averageRating);
    
    // Determine item type label
    const typeLabel = item.type === 'objective' ? 'OBJ' : 
                     (item.jobReqSkillType === 'Hard' ? 'HARD' : 'SOFT');
    
    // Get item name
    const itemName = item.type === 'objective' ? 
                     (item.objectiveDescrpt || 'Objective') : 
                     (item.jobReqSkillName || 'Skill');
    
    // Create the content
    div.innerHTML = `
        <span class="item-type">${typeLabel}</span>
        <span class="item-name">${truncateText(itemName, 25)}</span>
        <span class="rating-badge">
            ${item.averageRating.toFixed(1)}
            <span class="star-display">${starDisplay}</span>
        </span>
    `;
    
    return div;
}
// Helper function to truncate text
function truncateText(text, maxLength) {
    if (text.length <= maxLength) {
        return text;
    }
    return text.substring(0, maxLength - 3) + '...';
}

// Function to generate tooltip text
function generateItemTooltip(item) {
    let tooltip = '';
    
    if (item.type === 'objective') {
        tooltip = `Objective: ${item.objectiveDescrpt || 'N/A'}`;
        if (item.objectiveKPI) {
            tooltip += `\nKPI: ${item.objectiveKPI}`;
        }
    } else {
        tooltip = `${item.jobReqSkillType} Skill: ${item.jobReqSkillName || 'N/A'}`;
    }
    
    tooltip += `\nAverage Rating: ${item.averageRating.toFixed(1)}/5.0`;
    
    if (item.quarterRatings) {
        tooltip += '\nQuarter Ratings:';
        Object.entries(item.quarterRatings).forEach(([quarter, rating]) => {
            tooltip += `\n${quarter}: ${rating.toFixed(1)}/5.0`;
        });
    }
    
    return tooltip;
}

// Function to generate star display
function generateStarDisplay(rating) {
    let stars = '';
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 >= 0.5;
    
    for (let i = 0; i < fullStars; i++) {
        stars += '★';
    }
    
    if (hasHalfStar) {
        stars += '☆';
    }
    
    return stars;
}

// Function to truncate long text with ellipsis
function truncateText(text, maxLength = 100) {
    if (!text || text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
}

// Function to show "no feedback" message
function showNoFeedbackMessage() {
    const containers = [
        'strengthsCircularDisplay',
        'averageCircularDisplay', 
        'belowAverageCircularDisplay',
        'leadershipStrengthsCircularDisplay',
        'leadershipDevelopmentCircularDisplay'
    ];
    
    containers.forEach(containerId => {
        const container = document.getElementById(containerId);
        if (container) {
            container.innerHTML = `
                <div class="no-feedback-message">
                    <i class="fas fa-exclamation-circle" style="margin-right: 8px;"></i>
                    No Q1/Q2 feedback data available. Complete feedback sessions to see insights here.
                </div>
            `;
        }
    });
}
// Function to refresh feedback data when year changes - now updates training legend
function refreshFeedbackDataOnYearChange() {
    // Check if Mid-Year IDP form is currently visible
    const midYearIDPForm = document.getElementById("midYearIDPForm");
    if (midYearIDPForm && midYearIDPForm.style.display === "block") {
        // Reload feedback aggregates for the new year - this will update the training legend
        loadMidYearFeedbackAggregates();
    }
}



// Function to load Final-Year IDP data
function loadFinalYearIDPData(userId, year) {
    console.log(`Loading Final-Year IDP data for user ${userId} and year ${year}...`);
    
    fetch(`/linemanager/finalyear-idp/${userId}?year=${year}`, {
        method: "GET",
        headers: {
            "Accept": "application/json"
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`Server responded with status ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            finalYearIDPData = data.viewState.finalYearData;
            console.log("Loaded Final-Year IDP data:", finalYearIDPData);
            
            // If the form is currently displayed as Final-Year IDP, update it
            const midYearIDPForm = document.getElementById("midYearIDPForm");
            const formTitle = midYearIDPForm?.querySelector("h2");
            
            if (midYearIDPForm && midYearIDPForm.style.display === 'block' && 
                formTitle && formTitle.textContent.includes("Final-Year")) {
                createViewOnlyFinalYearIDP(finalYearIDPData);
            }
        } else {
            console.error("Error loading Final-Year IDP data:", data.message);
        }
    })
    .catch(error => {
        console.error("Error fetching Final-Year IDP data:", error);
    });
}
// Function to create view-only Mid-Year IDP with training display
function createViewOnlyMidYearIDP(data) {
    if (!data) {
        console.error("No Mid-Year IDP data available for view-only mode");
        return;
    }
    
    // Create view-only form
    const form = document.getElementById("midYearIDPFormDetails");
    if (!form) {
        console.error("Mid-Year IDP form not found");
        return;
    }
    
    // Set form to view-only mode
    form.classList.add('view-only-mode');
    
    // Disable all form inputs
    const inputs = form.querySelectorAll("input, textarea");
    inputs.forEach(input => {
        input.disabled = true;
        input.setAttribute('readonly', 'readonly');
    });
    
    // Update the title to indicate view-only mode
    const title = document.querySelector("#midYearIDPForm h2");
    if (title) {
        title.innerHTML = '<i class="fas fa-clipboard-check"></i> Mid-Year Individual Development Plan (View Only)';
    }
    
    // Hide submit button
    const submitButton = document.getElementById("submitMidYearIDP");
    if (submitButton) {
        submitButton.style.display = "none";
    }
    
    // Set values for view-only
    setIDPFormValues(data);
    
    // FIXED: Set training dropdown to view-only mode and load selected trainings
    setTrainingDropdownViewOnly(true);
    
    // Load existing selected trainings for view-only display
    loadExistingSelectedTrainings(userId);
    
    // Show last updated info
    let lastUpdatedInfo = document.querySelector("#midYearIDPForm .last-updated-info");
    if (!lastUpdatedInfo) {
        lastUpdatedInfo = document.createElement('div');
        lastUpdatedInfo.className = 'last-updated-info';
        form.appendChild(lastUpdatedInfo);
    }
    
    const lastUpdatedDate = data.lastUpdated ? new Date(data.lastUpdated).toLocaleString() : 'Unknown';
    lastUpdatedInfo.textContent = `Last updated: ${lastUpdatedDate}`;
}
// Function to create view-only Final-Year IDP
function createViewOnlyFinalYearIDP(data) {
    if (!data) {
        console.error("No Final-Year IDP data available for view-only mode");
        return;
    }
    
    // Create view-only form (reusing the Mid-Year form layout)
    const form = document.getElementById("midYearIDPFormDetails");
    if (!form) {
        console.error("IDP form not found for Final-Year view");
        return;
    }
    
    // Set form to view-only mode
    form.classList.add('view-only-mode');
    
    // Disable all form inputs
    const inputs = form.querySelectorAll("input, textarea");
    inputs.forEach(input => {
        input.disabled = true;
        input.setAttribute('readonly', 'readonly');
    });
    
    // Update the title to indicate view-only mode
    const title = document.querySelector("#midYearIDPForm h2");
    if (title) {
        title.innerHTML = '<i class="fas fa-clipboard-check"></i> Final-Year Individual Development Plan (View Only)';
    }
    
    // Hide submit button
    const submitButton = document.getElementById("submitFinalYearIDP");
    if (submitButton) {
        submitButton.style.display = "none";
    }
    
    // Set values for view-only
    setIDPFormValues(data);
    
    // Show last updated info
    let lastUpdatedInfo = document.querySelector("#midYearIDPForm .last-updated-info");
    if (!lastUpdatedInfo) {
        lastUpdatedInfo = document.createElement('div');
        lastUpdatedInfo.className = 'last-updated-info';
        form.appendChild(lastUpdatedInfo);
    }
    
    const lastUpdatedDate = data.lastUpdated ? new Date(data.lastUpdated).toLocaleString() : 'Unknown';
    lastUpdatedInfo.textContent = `Last updated: ${lastUpdatedDate}`;
}

// Function to enable Mid-Year IDP form for editing
function enableMidYearIDPForm() {
    const form = document.getElementById("midYearIDPFormDetails");
    if (form) {
        // Remove view-only mode class if present
        form.classList.remove('view-only-mode');
        
        // Enable all form inputs
        const inputs = form.querySelectorAll("input, textarea");
        inputs.forEach(input => {
            input.disabled = false;
            input.removeAttribute('readonly');
        });
        
        // Show submit button
        const submitButton = document.getElementById("submitMidYearIDP");
        if (submitButton) {
            submitButton.style.display = "inline-block";
        }
        
        // Remove any last updated info
        const lastUpdatedInfo = form.querySelector(".last-updated-info");
        if (lastUpdatedInfo) {
            lastUpdatedInfo.remove();
        }
        
        // Update form title if needed
        const title = document.querySelector("#midYearIDPForm h2");
        if (title) {
            title.innerHTML = '<i class="fas fa-clipboard-check"></i> Mid-Year Individual Development Plan (IDP)';
        }
        
        // Update the progress bar based on filled fields
        updateIDPProgress();
    }
}




// Function to enable Final-Year IDP form for editing
function enableFinalYearIDPForm() {
    const form = document.getElementById("midYearIDPFormDetails");
    if (form) {
        // Remove view-only mode class if present
        form.classList.remove('view-only-mode');
        
        // Enable all form inputs
        const inputs = form.querySelectorAll("input, textarea");
        inputs.forEach(input => {
            input.disabled = false;
            input.removeAttribute('readonly');
        });
        
        // Show submit button (which should be renamed to submitFinalYearIDP)
        const submitButton = document.getElementById("submitFinalYearIDP");
        if (submitButton) {
            submitButton.style.display = "inline-block";
        }
        
        // Remove any last updated info
        const lastUpdatedInfo = form.querySelector(".last-updated-info");
        if (lastUpdatedInfo) {
            lastUpdatedInfo.remove();
        }
        
        // Update form title if needed
        const title = document.querySelector("#midYearIDPForm h2");
        if (title) {
            title.innerHTML = '<i class="fas fa-clipboard-check"></i> Final-Year Individual Development Plan (IDP)';
        }
        
        // Update the progress bar based on filled fields
        updateFinalIDPProgress();
    }
}

// Function to set IDP form values
function setIDPFormValues(data) {
    if (!data) return;
    
    // Helper function to set field value if it exists
    function setFieldValue(fieldId, value) {
        const field = document.getElementById(fieldId);
        if (field && value) {
            field.value = value;
        }
    }
    
    // Set each field value
    setFieldValue("profStrengths", data.profStrengths);
    setFieldValue("profAreasForDevelopment", data.profAreasForDevelopment);
    setFieldValue("profActionsToTake", data.profActionsToTake);
    setFieldValue("leaderStrengths", data.leaderStrengths);
    setFieldValue("leaderAreasForDevelopment", data.leaderAreasForDevelopment);
    setFieldValue("leaderActionsToTake", data.leaderActionsToTake);
    setFieldValue("nextRoleShortTerm", data.nextRoleShortTerm);
    setFieldValue("nextRoleLongTerm", data.nextRoleLongTerm);
    setFieldValue("nextRoleMobility", data.nextRoleMobility);
    
    // Also try with "final" prefix for Final-Year IDP
    setFieldValue("finalProfStrengths", data.profStrengths);
    setFieldValue("finalProfAreasForDevelopment", data.profAreasForDevelopment);
    setFieldValue("finalProfActionsToTake", data.profActionsToTake);
    setFieldValue("finalLeaderStrengths", data.leaderStrengths);
    setFieldValue("finalLeaderAreasForDevelopment", data.leaderAreasForDevelopment);
    setFieldValue("finalLeaderActionsToTake", data.leaderActionsToTake);
    setFieldValue("finalNextRoleShortTerm", data.nextRoleShortTerm);
    setFieldValue("finalNextRoleLongTerm", data.nextRoleLongTerm);
    setFieldValue("finalNextRoleMobility", data.nextRoleMobility);
    
    // Update character counters
    updateAllCharCounters();
}

// Function to update all character counters
function updateAllCharCounters() {
    const textareas = document.querySelectorAll('textarea');
    textareas.forEach(textarea => {
        const counterId = textarea.id + 'Count';
        const counterElement = document.getElementById(counterId);
        if (counterElement) {
            counterElement.textContent = textarea.value.length;
        }
    });
}

// Function to update Mid-Year IDP progress
function updateIDPProgress() {
    const fields = [
        "profStrengths", 
        "profAreasForDevelopment", 
        "profActionsToTake", 
        "leaderStrengths", 
        "leaderAreasForDevelopment", 
        "leaderActionsToTake", 
        "nextRoleShortTerm", 
        "nextRoleLongTerm", 
        "nextRoleMobility"
    ];
    
    let filledFields = 0;
    
    fields.forEach(fieldId => {
        const field = document.getElementById(fieldId);
        if (field && field.value.trim().length > 0) {
            filledFields++;
            
            // Update character counter
            const counterId = fieldId + 'Count';
            const counterElement = document.getElementById(counterId);
            if (counterElement) {
                counterElement.textContent = field.value.length;
            }
        }
    });
    
    // Calculate progress percentage
    const progressPercentage = (filledFields / fields.length) * 100;
    
    // Update progress bar
    const progressBar = document.getElementById('midYearIDPProgressBar');
    if (progressBar) {
        progressBar.style.width = progressPercentage + '%';
    }
    
    // Enable/disable submit button based on progress
    const submitButton = document.getElementById('submitMidYearIDP');
    if (submitButton) {
        if (progressPercentage === 100) {
            submitButton.disabled = false;
        } else {
            submitButton.disabled = true;
        }
    }
}

// Function to update Final-Year IDP progress
function updateFinalIDPProgress() {
    const fields = [
        "finalProfStrengths", 
        "finalProfAreasForDevelopment", 
        "finalProfActionsToTake", 
        "finalLeaderStrengths", 
        "finalLeaderAreasForDevelopment", 
        "finalLeaderActionsToTake", 
        "finalNextRoleShortTerm", 
        "finalNextRoleLongTerm", 
        "finalNextRoleMobility"
    ];
    
    // Try with standard field names as backup
    const standardFields = [
        "profStrengths", 
        "profAreasForDevelopment", 
        "profActionsToTake", 
        "leaderStrengths", 
        "leaderAreasForDevelopment", 
        "leaderActionsToTake", 
        "nextRoleShortTerm", 
        "nextRoleLongTerm", 
        "nextRoleMobility"
    ];
    
    let filledFields = 0;
    const totalFields = fields.length;
    
    // Check each field
    for (let i = 0; i < totalFields; i++) {
        // Try with 'final' prefix first
        let field = document.getElementById(fields[i]);
        
        // If not found, try with standard field name
        if (!field) {
            field = document.getElementById(standardFields[i]);
        }
        
        if (field && field.value.trim().length > 0) {
            filledFields++;
            
            // Update character counter
            const counterId = fields[i] + 'Count';
            let counterElement = document.getElementById(counterId);
            
            // If counter not found with 'final' prefix, try standard name
            if (!counterElement) {
                counterElement = document.getElementById(standardFields[i] + 'Count');
            }
            
            if (counterElement) {
                counterElement.textContent = field.value.length;
            }
        }
    }
    
    // Calculate progress percentage
    const progressPercentage = (filledFields / totalFields) * 100;
    
    // Update progress bar
    const progressBar = document.getElementById('finalYearIDPProgressBar');
    if (progressBar) {
        progressBar.style.width = progressPercentage + '%';
    } else {
        // If final year progress bar doesn't exist, use mid-year one
        const midYearProgressBar = document.getElementById('midYearIDPProgressBar');
        if (midYearProgressBar) {
            midYearProgressBar.style.width = progressPercentage + '%';
        }
    }
    
    // Enable/disable submit button based on progress
    const submitButton = document.getElementById('submitFinalYearIDP');
    if (submitButton) {
        if (progressPercentage === 100) {
            submitButton.disabled = false;
        } else {
            submitButton.disabled = true;
        }
    }
}

// Helper function to get userId from URL
function getUserIdFromURL() {
    const pathParts = window.location.pathname.split('/');
    const userIdIndex = pathParts.indexOf('records-performance-tracker') + 1;
    if (userIdIndex < pathParts.length) {
        return pathParts[userIdIndex];
    }
    return null;
}

// Function to generate objective feedback HTML
function generateObjectiveFeedbackHTML(objective, quarter) {
    return `
    <div class="feedback-card" style="background-color: white; border-radius: 8px; padding: 20px; margin-bottom: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
        <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 15px;">
            <div>
                <h4 style="margin: 0; color: var(--primary-color);">${objective.objectiveDescrpt || 'Unnamed Objective'}</h4>
                <p style="margin: 5px 0 0 0; color: #555; font-size: 0.9em;">${objective.objectiveKPI || 'N/A'} | Target: ${objective.objectiveTarget || 'N/A'} ${objective.objectiveUOM || ''}</p>
            </div>
            <div class="rating" style="background-color: var(--primary-color); color: white; padding: 5px 10px; border-radius: 20px; font-weight: bold;">
                ${objective.averageRating ? objective.averageRating.toFixed(1) : 'N/A'} <i class="fas fa-star" style="font-size: 0.8em;"></i>
            </div>
        </div>
        
        <h5 style="margin: 15px 0 10px 0; color: var(--secondary-color);">Feedback Comments</h5>
        ${objective.comments && objective.comments.length > 0 ? 
            objective.comments.map(comment => `
                <div class="comment" style="background-color: #f9f9f9; padding: 10px; border-radius: 6px; margin-bottom: 10px;">
                    <p style="margin: 0;">${comment.text || 'No comment provided'}</p>
                    <small style="display: block; margin-top: 5px; color: #777;">${comment.responderType || 'Anonymous'} - ${quarter}</small>
                </div>
            `).join('') : 
            '<div class="no-comments" style="text-align: center; padding: 15px; background-color: #f9f9f9; border-radius: 6px;"><p style="margin: 0; color: #666;">No feedback comments available for this objective.</p></div>'
        }
    </div>
    `;
}
// Function to generate skill feedback HTML
function generateSkillFeedbackHTML(skill) {
    return `
    <div class="skill-card" style="background-color: white; border-radius: 8px; padding: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
            <h4 style="margin: 0; color: var(--primary-color);">${skill.skillName || 'Unnamed Skill'}</h4>
            <span class="skill-type" style="background-color: ${skill.skillType === 'Soft' ? '#4CAF50' : '#2196F3'}; color: white; padding: 3px 8px; border-radius: 12px; font-size: 0.8em;">${skill.skillType || 'Skill'}</span>
        </div>
        
        <div class="rating-bar" style="height: 8px; background-color: #e0e0e0; border-radius: 4px; margin: 10px 0;">
            <div style="height: 100%; width: ${((skill.averageRating || 0)/5)*100}%; background-color: var(--secondary-color); border-radius: 4px;"></div>
        </div>
        
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <span style="font-weight: bold; color: var(--primary-color);">${skill.averageRating ? skill.averageRating.toFixed(1) : 'N/A'}/5.0</span>
            <span style="color: #777; font-size: 0.9em;">Based on ${skill.responseCount || 0} responses</span>
        </div>
    </div>
    `;
}

// Function to update individual answers section
function updateIndividualAnswers(individualAnswers, quarter) {
    const individualAnswersContainer = document.getElementById('individualAnswersContainer');
    
    if (!individualAnswersContainer) {
        console.error("Individual answers container not found.");
        return;
    }
    
    if (!individualAnswers || individualAnswers.length === 0) {
        individualAnswersContainer.innerHTML = `
        <div class="empty-state" style="text-align: center; padding: 30px; background-color: #f9f9f9; border-radius: 8px;">
            <i class="fas fa-inbox" style="font-size: 48px; color: #ccc; margin-bottom: 15px;"></i>
            <p>No individual feedback responses available yet for ${quarter}.</p>
        </div>`;
        return;
    }
    
    let answersHTML = '';
    
    individualAnswers.forEach((answer, index) => {
        answersHTML += `
        <div class="answer-card" style="background-color: white; border-radius: 8px; padding: 20px; margin-bottom: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
            <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 15px;">
                <div>
                    <h4 style="margin: 0; color: var(--primary-color);">Responder #${index + 1} (${answer.responderType || 'Peer'})</h4>
                    <p style="margin: 5px 0 0 0; color: #555; font-size: 0.9em;">Submitted on ${new Date(answer.submittedDate).toLocaleDateString()}</p>
                </div>
                <div class="response-status" style="background-color: #4CAF50; color: white; padding: 5px 10px; border-radius: 20px; font-size: 0.8em; font-weight: bold;">
                    Complete
                </div>
            </div>
            
            ${answer.objectiveAnswers && answer.objectiveAnswers.map(obj => `
                <div class="answer-group" style="margin-bottom: 20px; padding-bottom: 15px; border-bottom: 1px solid #eee;">
                    <h5 style="margin: 0 0 10px 0; color: var(--secondary-color);">${obj.objectiveName || 'Unnamed Objective'}</h5>
                    <div style="display: flex; align-items: center; margin-bottom: 10px;">
                        <div style="margin-right: 15px;">
                            <strong style="color: #555;">Rating:</strong>
                            <span style="font-weight: bold; color: var(--primary-color); margin-left: 5px;">${obj.rating || 'N/A'}/5.0</span>
                        </div>
                        <div class="star-display" style="color: #FFD700;">
                            ${generateStarRating(obj.rating || 0)}
                        </div>
                    </div>
                    <div>
                        <strong style="color: #555;">Comment:</strong>
                        <p style="margin: 5px 0 0 0;">${obj.comment || 'No comment provided'}</p>
                    </div>
                </div>
            `).join('')}
            
            ${answer.skillRatings && Object.keys(answer.skillRatings).length > 0 ? `
                <div class="skill-ratings" style="background-color: #f9f9f9; border-radius: 6px; padding: 15px;">
                    <h5 style="margin: 0 0 10px 0; color: var(--secondary-color);">Skills Assessment</h5>
                    <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 10px;">
                        ${Object.entries(answer.skillRatings).map(([skillName, rating]) => `
                            <div class="skill-rating" style="display: flex; justify-content: space-between;">
                                <span>${skillName}:</span>
                                <strong>${rating}/5</strong>
                            </div>
                        `).join('')}
                    </div>
                </div>
            ` : ''}
        </div>
        `;
    });
    
    individualAnswersContainer.innerHTML = answersHTML;
    
    // Set up filters
    setupFilters();
}

// Function to setup filters for individual answers
function setupFilters() {
    const responderFilter = document.getElementById('responderFilter');
    const questionFilter = document.getElementById('questionFilter');
    
    if (responderFilter && questionFilter) {
        responderFilter.addEventListener('change', filterAnswers);
        questionFilter.addEventListener('change', filterAnswers);
    }
}

// Function to filter individual answers
function filterAnswers() {
    const responderFilter = document.getElementById('responderFilter');
    const questionFilter = document.getElementById('questionFilter');
    
    if (!responderFilter || !questionFilter) return;
    
    const responderValue = responderFilter.value;
    const questionValue = questionFilter.value;
    
    const answerCards = document.querySelectorAll('.answer-card');
    
    answerCards.forEach(card => {
        let showCard = true;
        
        // Filter by responder type
        if (responderValue !== 'all') {
            const responderType = card.querySelector('h4').textContent.toLowerCase();
            if (!responderType.includes(responderValue.toLowerCase())) {
                showCard = false;
            }
        }
        
        // Filter by question/objective
        if (questionValue !== 'all' && showCard) {
            const questions = card.querySelectorAll('h5');
            let hasMatchingQuestion = false;
            
            questions.forEach(question => {
                const questionText = question.textContent.toLowerCase();
                if (questionText.includes(questionValue.toLowerCase())) {
                    hasMatchingQuestion = true;
                }
            });
            
            if (!hasMatchingQuestion) {
                showCard = false;
            }
        }
        
        // Show or hide the card
        card.style.display = showCard ? 'block' : 'none';
    });
}

// Function to generate star rating HTML
function generateStarRating(rating) {
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 >= 0.5;
    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
    
    let starsHTML = '';
    
    // Add full stars
    for (let i = 0; i < fullStars; i++) {
        starsHTML += '<i class="fas fa-star"></i> ';
    }
    
    // Add half star if needed
    if (hasHalfStar) {
        starsHTML += '<i class="fas fa-star-half-alt"></i> ';
    }
    
    // Add empty stars
    for (let i = 0; i < emptyStars; i++) {
        starsHTML += '<i class="far fa-star"></i> ';
    }
    
    return starsHTML.trim();
}

// Function to show feedback error
function showFeedbackError(message) {
    console.error('Showing feedback error:', message);
    
    const containers = [
        document.getElementById('objectiveFeedbackContainer'),
        document.getElementById('skillsFeedbackContainer'),
        document.getElementById('individualAnswersContainer')
    ];
    
    const errorHTML = `
        <div class="error-state" style="text-align: center; padding: 30px; background-color: #ffebee; border-radius: 8px; border-left: 4px solid #f44336;">
            <i class="fas fa-exclamation-triangle" style="font-size: 48px; color: #f44336; margin-bottom: 15px;"></i>
            <h4 style="color: #f44336; margin: 0 0 10px 0;">Error Loading Feedback Data</h4>
            <p style="color: #666; margin: 0 0 15px 0;">${message}</p>
            <button onclick="location.reload()" style="background-color: #f44336; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">
                <i class="fas fa-refresh"></i> Retry
            </button>
        </div>
    `;
    
    containers.forEach(container => {
        if (container) {
            container.innerHTML = errorHTML;
        }
    });
}

document.addEventListener("DOMContentLoaded", function() {
    console.log("Initializing performance tracker stepper system...");
    
    // Initialize data from viewState
    initializeFromViewState();
    
    // Update stepper accessibility
    updateStepperAccessibility();
    
    // Set up event handlers for stepper buttons
    setupStepperEvents();
    
    // Initialize character counters
    updateAllCharCounters();
    
    // Attach form submission listeners
    attachFormListeners();
    
    // FIXED: Setup feedback tabs with proper initialization
    setTimeout(() => {
        setupFeedbackTabs();
        console.log('Feedback tabs setup completed after DOM loaded');
    }, 100);
    
    // Add CSS for fade animations
    const style = document.createElement('style');
    style.textContent = `
        @keyframes fadeInOut {
            0% { opacity: 0; transform: translateY(-20px); }
            20% { opacity: 1; transform: translateY(0); }
            80% { opacity: 1; transform: translateY(0); }
            100% { opacity: 0; transform: translateY(-20px); }
        }
        
        .answer-card {
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        
        .answer-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }
        
        .filter-bar select:focus {
            outline: none;
            border-color: var(--secondary-color);
            box-shadow: 0 0 0 2px rgba(5, 156, 164, 0.2);
        }
        
        .filter-bar button:hover {
            background-color: #5a6268;
            transform: translateY(-1px);
        }
        
        .tab-button:hover {
            opacity: 0.8;
            transform: translateY(-1px);
        }
        
        .tab-button.active {
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
    `;
    document.head.appendChild(style);
    
    console.log('Enhanced feedback functionality initialized');
    
    // Initialize training dropdown
    initializeTrainingDropdown();
    
    // Update the existing submitMidYearIDPForm function to use the new enhanced version
    if (typeof submitMidYearIDPForm !== 'undefined') {
        // Store reference to original function if needed
        window.originalSubmitMidYearIDPForm = submitMidYearIDPForm;
        // Replace with enhanced version
        window.submitMidYearIDPForm = submitMidYearIDPFormWithTraining;
        
        console.log('Enhanced Mid-Year IDP submission function loaded');
    }
    
    // Add focus event to show details panel
    const trainingSelect = document.getElementById('suggestedTrainings');
    if (trainingSelect) {
        trainingSelect.addEventListener('focus', showTrainingDetails);
        
        // Add keyboard navigation
        trainingSelect.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                hideTrainingDetails();
                trainingSelect.blur();
            }
        });
        
        // Add click event as backup for mobile devices
        trainingSelect.addEventListener('click', showTrainingDetails);
        
        console.log('Training dropdown events attached successfully');
    } else {
        console.warn('Training dropdown element not found during initialization');
    }
    
    // If the Mid-Year IDP form is already visible, ensure training dropdown is ready
    const midYearIDPForm = document.getElementById("midYearIDPForm");
    if (midYearIDPForm && midYearIDPForm.style.display !== 'none') {
        setTimeout(() => {
            initializeTrainingDropdown();
            console.log('Training dropdown re-initialized for visible form');
        }, 100);
    }
    
    // Log training recommendations summary
    setTimeout(() => {
        if (typeof getTrainingRecommendationsSummary === 'function') {
            const summary = getTrainingRecommendationsSummary();
            console.log('Training Recommendations Summary:', summary);
            
            if (summary.total === 0) {
                console.warn('No training recommendations found. Check if user has objectives and job skills defined.');
            } else {
                console.log(`Found ${summary.total} training recommendations:`, {
                    'Perfect Match (⭐)': summary.perfectMatch,
                    'Objective Match (🎯)': summary.objectiveMatch,
                    'Skill Match (🔧)': summary.skillMatch,
                    'General': summary.general
                });
            }
        }
    }, 500);
    
    console.log("Performance tracker stepper system with enhanced training dropdown and fixed tabs initialized.");
});

// Enhanced function to setup stepper events
function setupStepperEvents() {
    // Objective setting button
    const objectivesButton = document.getElementById("objectivesButton");
    if (objectivesButton) {
        objectivesButton.addEventListener("click", handleObjectiveClick);
    }
    
    // Feedback buttons
    for (let i = 1; i <= 4; i++) {
        const feedbackButton = document.getElementById(`feedbackButtonQ${i}`);
        if (feedbackButton) {
            feedbackButton.addEventListener("click", function() {
                const quarter = this.getAttribute('data-quarter');
                showFeedbackForm(quarter);
            });
        }
    }
    
    // IDP buttons
    const midYearIDPButton = document.getElementById("midYearIDP");
    if (midYearIDPButton) {
        midYearIDPButton.addEventListener("click", navigateToMidYearIDP);
    }
    
    const finalYearIDPButton = document.getElementById("finalYearIDP");
    if (finalYearIDPButton) {
        finalYearIDPButton.addEventListener("click", navigateToFinalYearIDP);
    }
    
    // Year select - enhanced to refresh feedback data
    const yearSelect = document.getElementById('yearSelect');
    if (yearSelect) {
        yearSelect.addEventListener('change', function() {
            fetchYearData();
            refreshFeedbackDataOnYearChange();
        });
    }
    
    // Add row button
    const addRowBtn = document.getElementById('addRowBtn');
    if (addRowBtn) {
        addRowBtn.addEventListener('click', addRow);
    }
    
    console.log('Stepper events setup completed');
}

// Function to attach form submission listeners
function attachFormListeners() {
    // Objective settings form
    const objectiveSettingsForm = document.getElementById('objectiveSettingsForm');
    if (objectiveSettingsForm) {
        objectiveSettingsForm.addEventListener('submit', function(event) {
            event.preventDefault();
            saveObjectives(event);
        });
    }
    
    // Feedback form
    const feedbackForm = document.getElementById('feedbackForm');
    if (feedbackForm) {
        feedbackForm.addEventListener('submit', function(event) {
            event.preventDefault();
            save360Questionnaire();
        });
    }
    
    // Mid-Year IDP form
    const midYearIDPForm = document.getElementById('midYearIDPFormDetails');
    if (midYearIDPForm) {
        midYearIDPForm.addEventListener('submit', function(event) {
            event.preventDefault();
            
            // Check if this is Mid-Year or Final-Year IDP
            const formTitle = document.querySelector("#midYearIDPForm h2");
            if (formTitle && formTitle.textContent.includes("Final-Year")) {
                submitFinalYearIDPForm(event);
            } else {
                submitMidYearIDPForm(event);
            }
        });
    }
    
    // Text area input handlers for character counting and progress tracking
    const midYearTextareas = document.querySelectorAll('#midYearIDPForm textarea');
    midYearTextareas.forEach(textarea => {
        textarea.addEventListener('input', function() {
            const counterId = textarea.id + 'Count';
            const counterElement = document.getElementById(counterId);
            if (counterElement) {
                counterElement.textContent = textarea.value.length;
            }
            
            // Update progress based on form type
            const formTitle = document.querySelector("#midYearIDPForm h2");
            if (formTitle && formTitle.textContent.includes("Final-Year")) {
                updateFinalIDPProgress();
            } else {
                updateIDPProgress();
            }
        });
    });
}

// Sidebar functionality
document.querySelectorAll('.sidebar ul li a').forEach(link => {
    link.addEventListener('click', function() {
        document.querySelectorAll('.sidebar ul li a').forEach(link => link.classList.remove('active'));
        this.classList.add('active');
    });
});

document.querySelectorAll('.collapsible-header').forEach(header => {
    header.addEventListener('click', function() {
        var content = this.nextElementSibling;
        if (content.style.display === 'block') {
            content.style.display = 'none';
        } else {
            // Hide all other collapsible contents
            document.querySelectorAll('.collapsible-content').forEach(item => {
                if (item !== content) {
                    item.style.display = 'none';
                }
            });
            content.style.display = 'block';
        }
    });
});
            </script>
        </div>
    </div>
</body>
</html>