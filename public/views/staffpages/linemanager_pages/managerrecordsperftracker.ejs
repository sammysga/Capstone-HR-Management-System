<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Employee's Records and Performance History</title>
    <link rel="stylesheet" href="/css/sidebar.css">
    <link rel="stylesheet" href="/css/hr_page.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
    /* Basic Layout */
    .main-content {
        margin-left: 300px;
        padding: 20px;
        font-family: 'Inter', sans-serif;
        min-height: 100vh;
        box-sizing: border-box;
        overflow-x: auto;
    }

    /* Header Styles */
    .dashboard-header {
        background: white;
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        margin-bottom: 30px;
    }

    .dashboard-header h2 {
        color: #1f2937;
        font-size: 28px;
        font-weight: 700;
        margin-bottom: 8px;
    }

    .dashboard-header p {
        color: #64748b;
        font-size: 16px;
        margin: 0;
    }

    /* Overview Cards */
    .overview-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .overview-card {
        background: white;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        text-align: center;
        border-left: 4px solid #3b82f6;
        transition: transform 0.2s ease;
    }

    .overview-card:hover {
        transform: translateY(-2px);
    }

    .overview-card h3 {
        font-size: 32px;
        font-weight: 700;
        color: #1f2937;
        margin-bottom: 8px;
    }

    .overview-card p {
        color: #64748b;
        font-size: 14px;
        margin: 0;
    }

    /* Report Generation Section */
    .report-generation {
        background: white;
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        margin-bottom: 30px;
    }

    .section-title {
        font-size: 20px;
        font-weight: 600;
        color: #1f2937;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .section-title i {
        color: #3b82f6;
    }

    /* Form Styles */
    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin-bottom: 20px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
    }

    .form-label {
        font-weight: 600;
        color: #374151;
        margin-bottom: 8px;
        font-size: 14px;
    }

    .form-select {
        padding: 12px 16px;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        font-size: 14px;
        background: white;
        transition: border-color 0.2s, box-shadow 0.2s;
    }

    .form-select:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    /* Report Type Selection */
    .report-types {
        margin-bottom: 30px;
    }

    .report-types h3 {
        margin-bottom: 15px;
        color: #374151;
        font-size: 16px;
        font-weight: 600;
    }

    .report-options {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
    }

    .report-option {
        border: 2px solid #e5e7eb;
        border-radius: 12px;
        padding: 20px;
        cursor: pointer;
        transition: all 0.2s;
        background: white;
        position: relative;
    }

    .report-option:hover {
        border-color: #3b82f6;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.15);
    }

    .report-option.selected {
        border-color: #3b82f6;
        background: #eff6ff;
    }

    .report-title {
        font-weight: 600;
        color: #1f2937;
        margin-bottom: 8px;
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 14px;
    }

    .report-desc {
        color: #64748b;
        font-size: 13px;
        line-height: 1.4;
    }

    /* Quarter Selector */
    .quarter-selector {
        margin-top: 15px;
        padding-top: 15px;
        border-top: 1px solid #e5e7eb;
    }

    .quarter-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 8px;
        margin-top: 10px;
    }

    .quarter-btn {
        padding: 8px 12px;
        border: 1px solid #d1d5db;
        border-radius: 6px;
        background: white;
        cursor: pointer;
        text-align: center;
        font-size: 12px;
        font-weight: 500;
        transition: all 0.2s;
        position: relative;
    }

    .quarter-btn.available {
        border-color: #10b981;
        color: #059669;
    }

    .quarter-btn.available::before {
        content: "";
        position: absolute;
        top: 3px;
        right: 3px;
        width: 6px;
        height: 6px;
        background: #10b981;
        border-radius: 50%;
    }

    .quarter-btn.unavailable {
        background: #f3f4f6;
        color: #9ca3af;
        cursor: not-allowed;
    }

    .quarter-btn.selected {
        background: #3b82f6;
        color: white;
        border-color: #3b82f6;
    }

    /* Action Buttons */
    .action-buttons {
        display: flex;
        justify-content: center;
        gap: 15px;
        margin-top: 30px;
        padding-top: 20px;
        border-top: 1px solid #e5e7eb;
    }

    .btn {
        padding: 12px 24px;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
        font-size: 14px;
        display: flex;
        align-items: center;
        gap: 8px;
        text-decoration: none;
    }

    .btn-primary {
        background: #3b82f6;
        color: white;
    }

    .btn-primary:hover {
        background: #2563eb;
        transform: translateY(-1px);
    }

    .btn-secondary {
        background: #6b7280;
        color: white;
    }

    .btn-secondary:hover {
        background: #4b5563;
    }

    .btn-success {
        background: #10b981;
        color: white;
    }

    .btn-success:hover {
        background: #059669;
    }

    .btn:disabled {
        background: #d1d5db;
        color: #9ca3af;
        cursor: not-allowed;
        transform: none;
    }

    /* Special Notes/Messages */
    .comparison-note {
        background: #ecfdf5;
        border: 1px solid #10b981;
        border-radius: 8px;
        padding: 15px;
        margin-top: 15px;
        font-size: 13px;
        color: #064e3b;
    }

    .preview-hint {
        background: #fef3c7;
        border: 1px solid #f59e0b;
        border-radius: 8px;
        padding: 12px;
        margin-top: 20px;
        font-size: 13px;
        color: #92400e;
        text-align: center;
    }

    /* Loading and Messages */
    .loading {
        display: none;
        text-align: center;
        padding: 20px;
        color: #6c757d;
    }

    .loading.show {
        display: block;
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3b82f6;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 1s linear infinite;
        margin: 0 auto 15px;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .error-message {
        background-color: #fef2f2;
        color: #991b1b;
        padding: 12px;
        border: 1px solid #fecaca;
        border-radius: 8px;
        margin-bottom: 20px;
        display: none;
    }

    .error-message.show {
        display: block;
    }

    .success-message {
        background-color: #f0fdf4;
        color: #166534;
        padding: 12px;
        border: 1px solid #bbf7d0;
        border-radius: 8px;
        margin-bottom: 20px;
        display: none;
    }

    .success-message.show {
        display: block;
    }

    /* Hidden class */
    .hidden {
        display: none;
    }

    /* Tab Styles */
    .tab-container {
        margin-bottom: 20px;
    }

    .tab-buttons {
        display: flex;
        border-bottom: 2px solid #e0e4e8;
        margin-bottom: 20px;
    }

    .tab-button {
        padding: 12px 24px;
        background: none;
        border: none;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        color: #6c757d;
        border-bottom: 2px solid transparent;
        transition: all 0.2s ease;
    }

    .tab-button.active {
        color: #007bff;
        border-bottom-color: #007bff;
    }

    .tab-button:hover {
        color: #007bff;
    }

    .tab-content {
        display: none;
    }

    .tab-content.active {
        display: block;
    }

    /* TABLE STYLES FOR EMPLOYEE RECORDS */
    table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
    }

    th, td {
        padding: 12px;
        border: 1px solid #e0e4e8;
        text-align: left;
    }

    th {
        background-color: #f8f9fa;
        font-weight: 600;
        color: #2c3e50;
    }

    tr:nth-child(even) {
        background-color: #f8f9fa;
    }

    tr:hover {
        background-color: #e3f2fd;
        cursor: pointer;
    }

    /* Report Preview Styles */
    .report-preview {
        background: #ffffff;
        border: 1px solid #e0e4e8;
        border-radius: 8px;
        padding: 25px;
        margin: 20px 0;
        display: none;
        width: 100%;
        max-width: 100%;
        box-sizing: border-box;
        position: relative;
        clear: both;
    }

    .report-preview.show {
        display: block;
    }

    .report-header {
        border-bottom: 2px solid #e0e4e8;
        padding-bottom: 15px;
        margin-bottom: 20px;
    }

    .employee-info {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
        background: #f8f9fa;
        padding: 15px;
        border-radius: 6px;
        margin-bottom: 20px;
    }

    .info-item {
        display: flex;
        flex-direction: column;
    }

    .info-label {
        font-weight: 600;
        color: #6c757d;
        font-size: 0.85rem;
        margin-bottom: 4px;
    }

    .info-value {
        color: #2c3e50;
        font-weight: 500;
    }

    .report-section {
        margin-bottom: 30px;
    }

    .data-table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
        display: table;
    }

    .data-table th,
    .data-table td {
        padding: 12px;
        border: 1px solid #e0e4e8;
        text-align: left;
    }

    .data-table th {
        background-color: #f8f9fa;
        font-weight: 600;
        color: #2c3e50;
    }

    .data-table tr:nth-child(even) {
        background-color: #f8f9fa;
    }

    .rating-cell {
        text-align: center;
        font-weight: bold;
    }

    .rating-excellent {
        color: #28a745;
    }

    .rating-good {
        color: #17a2b8;
    }

    .rating-average {
        color: #ffc107;
    }

    .rating-poor {
        color: #dc3545;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .main-content {
            margin-left: 0;
            padding: 15px;
        }
        
        .overview-cards {
            grid-template-columns: 1fr;
        }
        
        .form-row {
            grid-template-columns: 1fr;
        }
        
        .report-options {
            grid-template-columns: 1fr;
        }
        
        .action-buttons {
            flex-direction: column;
            align-items: center;
        }

        /* Development Plans Styles */
        .development-plan {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .plan-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 15px;
        }

        .plan-title {
            font-weight: 600;
            color: #1f2937;
            font-size: 16px;
        }

        .plan-priority {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 500;
        }

        .priority-high {
            background: #fef2f2;
            color: #dc2626;
        }

        .priority-medium {
            background: #fef3c7;
            color: #d97706;
        }

        .priority-low {
            background: #f0fdf4;
            color: #059669;
        }

        .plan-recommendations {
            margin-top: 10px;
        }

        .recommendation-item {
            display: flex;
            align-items: flex-start;
            margin-bottom: 8px;
        }

        .recommendation-item i {
            color: #3b82f6;
            margin-right: 8px;
            margin-top: 2px;
        }

        .comparison-section {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }

        .section-header {
            font-weight: 600;
            color: #374151;
            margin-bottom: 10px;
            padding: 10px;
            background: #f3f4f6;
            border-radius: 6px;
        }
    }

  /* Team Charts Styles - Single Row Design */
.team-charts-container {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 30px;
    border-radius: 16px;
    box-shadow: 0 8px 32px rgba(102, 126, 234, 0.2);
    margin-bottom: 30px;
    position: relative;
    overflow: hidden;
}

.team-charts-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg, rgba(255,255,255,0.1) 0%, transparent 100%);
    pointer-events: none;
}

.team-charts-container h2 {
    color: white;
    text-shadow: 0 2px 4px rgba(0,0,0,0.3);
    margin-bottom: 25px;
    position: relative;
    z-index: 1;
}

.team-charts-container .section-title i {
    color: #fbbf24;
    text-shadow: 0 2px 4px rgba(0,0,0,0.3);
}

.charts-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 15px;
    margin-top: 25px;
    position: relative;
    z-index: 1;
}

.chart-card {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 12px;
    padding: 15px;
    text-align: center;
    transition: all 0.3s ease;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
    position: relative;
    overflow: hidden;
}

.chart-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, #3b82f6, #8b5cf6, #06d6a0, #ffd60a);
    border-radius: 12px 12px 0 0;
}

.chart-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    background: rgba(255, 255, 255, 1);
}

.chart-card h4 {
    color: #1f2937;
    font-size: 12px;
    font-weight: 700;
    margin-bottom: 12px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    position: relative;
    z-index: 2;
}

.chart-card canvas {
    max-width: 100%;
    height: 140px !important;
    border-radius: 6px;
    position: relative;
    z-index: 2;
}

/* Individual chart card colors */
.chart-card:nth-child(1) h4 {
    color: #3b82f6;
}

.chart-card:nth-child(2) h4 {
    color: #8b5cf6;
}

.chart-card:nth-child(3) h4 {
    color: #06d6a0;
}

.chart-card:nth-child(4) h4 {
    color: #ffd60a;
}

/* Loading state for charts */
.chart-card.loading {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
}

@keyframes loading {
    0% { background-position: 200% 0; }
    100% { background-position: -200% 0; }
}

/* Responsive Design */
@media (max-width: 1200px) {
    .charts-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
    }
    
    .chart-card {
        padding: 20px;
    }
    
    .chart-card canvas {
        height: 160px !important;
    }
}

@media (max-width: 768px) {
    .charts-grid {
        grid-template-columns: 1fr;
        gap: 15px;
    }
    
    .team-charts-container {
        padding: 20px;
    }
    
    .chart-card h4 {
        font-size: 13px;
    }
}

/* Chart specific styling enhancements */
.chart-performance-status {
    border-left: 4px solid #3b82f6;
}

.chart-skills-priority {
    border-left: 4px solid #8b5cf6;
}

.chart-goal-achievement {
    border-left: 4px solid #06d6a0;
}

.chart-performance-trends {
    border-left: 4px solid #ffd60a;
}
    </style>
</head>
<body>
    <%- include('../../partials/linemanager_partials') %>
    
    <div class="main-content">
        <!-- Tab Navigation -->
        <div class="tab-container">
            <div class="tab-buttons">
                <button class="tab-button active" onclick="showTab('records')">Employee Records</button>
                <button class="tab-button" onclick="showTab('feedback-reports')">360 Feedback Reports</button>
            </div>
        </div>

        <!-- Employee Records Tab -->
        <div id="records" class="tab-content active">
            <h1>View Employee's Records and Performance History</h1>
            <table>
                <thead>
                    <tr>
                        <th>Last Name</th>
                        <th>First Name</th>
                        <th>Department</th>
                        <th>Job Position</th>
                        <th>Email</th>
                    </tr>
                </thead>
                <tbody>
                    <% employees.forEach(employee => { %>
                        <% if (employee.userId) { %>
                            <tr onclick="window.location.href='/linemanager/records-performance-tracker/<%= employee.userId %>'">
                                <td><%= employee.lastName %></td>
                                <td><%= employee.firstName %></td>
                                <td><%= employee.deptName || 'N/A' %></td>
                                <td><%= employee.jobTitle || 'N/A' %></td>
                                <td><%= employee.email %></td>
                            </tr>
                        <% } else { %>
                            <tr>
                                <td colspan="5">No ID available</td>
                            </tr>
                        <% } %>
                    <% }) %>
                </tbody>
            </table>
        </div>

        <!-- 360 Feedback Reports Tab -->
        <div id="feedback-reports" class="tab-content">
            <!-- Dashboard Header -->
            <div class="dashboard-header">
                <h2><i class="fas fa-chart-line"></i> Records & Performance Tracker</h2>
                <p>Generate performance reports and track employee progress - Department: <strong><%= typeof departmentName !== 'undefined' ? departmentName : 'Not Available' %></strong></p>
            </div>

            <!-- Overview Cards -->
            <div class="overview-cards">
                <div class="overview-card">
                    <h3 id="totalEmployeesCard">0</h3>
                    <p>Total Employees</p>
                </div>
                <div class="overview-card">
                    <h3 id="employeesWithFeedbackCard">0</h3>
                    <p>Employees with Feedback</p>
                </div>
                <div class="overview-card">
                    <h3 id="activeQuartersCard">0</h3>
                    <p>Active Quarters</p>
                </div>
                <div class="overview-card">
                    <h3 id="currentYearCard">2025</h3>
                    <p>Current Year</p>
                </div>
            </div>

            <!-- Team Overview Charts -->
            <div class="team-charts-container">
                <h2 class="section-title">
                    <i class="fas fa-chart-bar"></i>
                    Team Performance Overview
                </h2>
                <div class="charts-grid">
                    <div class="chart-card chart-performance-status">
                        <h4><i class="fas fa-users"></i> Performance Status</h4>
                        <canvas id="performanceTrendChart"></canvas>
                    </div>
                    <div class="chart-card chart-skills-priority">
                        <h4><i class="fas fa-bullseye"></i> Skills Priority</h4>
                        <canvas id="skillsHeatmapChart"></canvas>
                    </div>
                    <div class="chart-card chart-goal-achievement">
                        <h4><i class="fas fa-target"></i> Goal Achievement</h4>
                        <canvas id="objectiveAchievementChart"></canvas>
                    </div>
                    <div class="chart-card chart-performance-trends">
                        <h4><i class="fas fa-chart-line"></i> Performance Trends</h4>
                        <canvas id="performanceDistributionChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Report Generation Section -->
            <div class="report-generation">
                <h2 class="section-title">
                    <i class="fas fa-file-alt"></i>
                    Generate Performance Report
                </h2>

                <!-- Error/Success Messages -->
                <div id="errorMessage" class="error-message"></div>
                <div id="successMessage" class="success-message"></div>

                <!-- Form -->
                <form id="reportForm">
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Select Employee</label>
                            <select id="employeeSelect" class="form-select" name="employeeId" required>
                                <option value="">Choose an employee...</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Report Year</label>
                            <select id="yearSelect" class="form-select" name="year" required>
                                <% if (typeof availableYears !== 'undefined' && availableYears.length > 0) { %>
                                    <% availableYears.forEach(year => { %>
                                        <option value="<%= year %>" <%= year === (typeof currentYear !== 'undefined' ? currentYear : new Date().getFullYear()) ? 'selected' : '' %>><%= year %></option>
                                    <% }) %>
                                <% } else { %>
                                    <option value="<%= new Date().getFullYear() %>" selected><%= new Date().getFullYear() %></option>
                                <% } %>
                            </select>
                        </div>
                    </div>

                    <!-- Report Type Selection -->
                    <div class="report-types">
                        <h3>Select Report Type</h3>
                        <div class="report-options">
                            <!-- Individual Quarterly Reports -->
                            <div class="report-option" id="quarterly-option" onclick="selectReportType('quarterly')">
                                <div class="report-title">
                                    <i class="fas fa-calendar-alt" style="color: #3b82f6;"></i>
                                    Individual Quarterly Report
                                </div>
                                <div class="report-desc">
                                    Detailed performance report for a specific quarter (Q1, Q2, Q3, or Q4)
                                </div>
                                <div class="quarter-selector hidden" id="quarterly-selector">
                                    <small style="color: #64748b;">Available quarters:</small>
                                    <div class="quarter-grid" id="quarterGrid">
                                        <!-- Will be populated by JavaScript -->
                                    </div>
                                    <input type="hidden" id="quarterSelect" name="quarter">
                                </div>
                            </div>

                            <!-- Mid-Year Report -->
                            <div class="report-option" id="midyear-option" onclick="selectReportType('midyear')">
                                <div class="report-title">
                                    <i class="fas fa-chart-line" style="color: #10b981;"></i>
                                    Mid-Year Report (Q1+Q2)
                                </div>
                                <div class="report-desc">
                                    Combined Q1 and Q2 analysis with performance trends and mid-year recommendations
                                </div>
                            </div>

                            <!-- Final-Year Report -->
                            <div class="report-option" id="finalyear-option" onclick="selectReportType('finalyear')">
                                <div class="report-title">
                                    <i class="fas fa-trophy" style="color: #f59e0b;"></i>
                                    Final-Year Report (Q3+Q4)
                                </div>
                                <div class="report-desc">
                                    End-of-year performance summary with final recommendations and goal achievement
                                </div>
                            </div>

                            <!-- Comparison Report -->
                            <div class="report-option" id="comparison-option" onclick="selectReportType('comparison')">
                                <div class="report-title">
                                    <i class="fas fa-balance-scale" style="color: #8b5cf6;"></i>
                                    Comparison Report (Mid vs Final)
                                </div>
                                <div class="report-desc">
                                    Side-by-side comparison of mid-year vs final-year suggestions and performance trends
                                </div>
                                <div class="comparison-note hidden" id="comparison-note">
                                    <strong>📊 This report compares:</strong><br>
                                    • Mid-year suggestions (Q1+Q2) vs Final-year suggestions (Q3+Q4)<br>
                                    • Performance changes throughout the year<br>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="action-buttons">
                        <button type="button" id="previewBtn" class="btn btn-secondary">
                            <i class="fas fa-eye"></i>
                            Preview Report
                        </button>
                        <button type="button" id="generatePdfBtn" class="btn btn-primary">
                            <i class="fas fa-download"></i>
                            Generate PDF
                        </button>
                        <button type="button" id="refreshDataBtn" class="btn btn-secondary">
                            <i class="fas fa-sync-alt"></i>
                            Refresh Data
                        </button>
                    </div>

                    <!-- Hidden inputs for form submission -->
                    <input type="hidden" id="reportTypeInput" name="reportType">
                </form>

                <!-- Helpful Tips -->
                <div class="preview-hint">
                    <i class="fas fa-lightbulb"></i>
                    <strong>Tip:</strong> Use Preview to review the report content before generating the final PDF
                </div>
            </div>

            <!-- Loading Indicator -->
            <div id="loadingIndicator" class="loading">
                <div class="spinner"></div>
                <p>Loading report data...</p>
            </div>

            <!-- Report Preview Section -->
            <div id="reportPreview" class="report-preview">
                <div class="report-header">
                    <div class="report-title">Quarterly Qualitative & Quantitative 360 Feedback Report</div>
                </div>
                
                <!-- Employee Information -->
                <div id="employeeInfo" class="employee-info">
                    <!-- Will be populated by JavaScript -->
                </div>
                
                <!-- Objectives Assessment Section -->
                <div class="report-section">
                    <div class="section-title">Objectives Assessment</div>
                    <table class="data-table" id="objectivesTable">
                        <thead>
                            <tr>
                                <th>KRA/Objectives</th>
                                <th>KPI</th>
                                <th>Target</th>
                                <th>UOM</th>
                                <th>Assigned Weight</th>
                                <th>Weighted Score</th>
                                <th>Average Rating (1-5)</th>
                                <th>Qualitative Feedback</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
                
                <!-- Hard Skills Assessment Section -->
                <div class="report-section">
                    <div class="section-title">Hard Skills Assessment</div>
                    <table class="data-table" id="hardSkillsTable">
                        <thead>
                            <tr>
                                <th>Hard Skill</th>
                                <th>Average Rating (1-5)</th>
                                <th>Qualitative Feedback</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
                
                <!-- Soft Skills Assessment Section -->
                <div class="report-section">
                    <div class="section-title">Soft Skills Assessment</div>
                    <table class="data-table" id="softSkillsTable">
                        <thead>
                            <tr>
                                <th>Soft Skill</th>
                                <th>Average Rating (1-5)</th>
                                <th>Qualitative Feedback</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
                
                <!-- Summary Section -->
                <div class="report-section">
                    <div class="section-title">Performance Summary</div>
                    <div id="performanceSummary" class="employee-info">
                        <!-- Will be populated by JavaScript -->
                    </div>
                </div>
            </div>

            <!-- Combined Reports Preview Section -->
            <div id="combinedReportPreview" class="report-preview">
                <div class="report-header">
                    <div class="report-title" id="combinedReportTitle">Combined Performance Report</div>
                </div>
                
                <!-- Employee Information -->
                <div id="combinedEmployeeInfo" class="employee-info"></div>
                
                <!-- Performance Overview -->
                <div class="report-section">
                    <div class="section-title">Performance Overview</div>
                    <div id="performanceOverview" class="employee-info"></div>
                </div>
                
                <!-- Objectives Comparison -->
                <div class="report-section">
                    <div class="section-title">Objectives Performance</div>
                    <table class="data-table" id="combinedObjectivesTable">
                        <thead id="combinedObjectivesHead"></thead>
                        <tbody id="combinedObjectivesBody"></tbody>
                    </table>
                </div>
                
                <!-- Skills Comparison -->
                <div class="report-section">
                    <div class="section-title">Skills Performance</div>
                    <table class="data-table" id="combinedSkillsTable">
                        <thead id="combinedSkillsHead"></thead>
                        <tbody id="combinedSkillsBody"></tbody>
                    </table>
                </div>
                
                <!-- Development Plans (for comparison report) -->
                <div class="report-section" id="developmentPlansSection" style="display:none;">
                    <div class="section-title">Development Plans Comparison</div>
                    <div id="developmentPlansComparison"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.31/jspdf.plugin.autotable.min.js"></script>
    
    <script>
        // Global variables
        let currentReportData = null;
        let departmentEmployees = [];
        
        // Tab functionality
        function showTab(tabName) {
            // Hide all tab contents
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            
            // Remove active class from all tab buttons
            document.querySelectorAll('.tab-button').forEach(button => {
                button.classList.remove('active');
            });
            
            // Show selected tab content
            document.getElementById(tabName).classList.add('active');
            
            // Add active class to clicked button
            event.target.classList.add('active');
            
            // Initialize feedback reports if switching to that tab
            if (tabName === 'feedback-reports' && departmentEmployees.length === 0) {
                initializeFeedbackReports();
            }
        }
        
        // Report type selection
        function selectReportType(type) {
            console.log('Selected report type:', type);
            
            // Remove selected class from all options
            document.querySelectorAll('.report-option').forEach(option => {
                option.classList.remove('selected');
            });
            
            // Add selected class to clicked option
            const selectedOption = document.getElementById(type + '-option');
            if (selectedOption) {
                selectedOption.classList.add('selected');
            }
            
            // Set hidden input value
            document.getElementById('reportTypeInput').value = type;
            
            // Show/hide quarter selector and comparison note
            const quarterSelector = document.getElementById('quarterly-selector');
            const comparisonNote = document.getElementById('comparison-note');
            
            if (type === 'quarterly') {
                quarterSelector.classList.remove('hidden');
            } else {
                quarterSelector.classList.add('hidden');
                // Clear quarter selection when not quarterly
                document.getElementById('quarterSelect').value = '';
            }
            
            if (type === 'comparison') {
                comparisonNote.classList.remove('hidden');
            } else {
                comparisonNote.classList.add('hidden');
            }
        }
        
        // Quarter selection functionality
        function selectQuarter(quarter) {
            // Remove selected from all quarter buttons
            document.querySelectorAll('.quarter-btn').forEach(btn => {
                btn.classList.remove('selected');
            });
            
            // Add selected to clicked button
            const quarterBtn = document.querySelector(`[data-quarter="${quarter}"]`);
            if (quarterBtn && !quarterBtn.classList.contains('unavailable')) {
                quarterBtn.classList.add('selected');
                document.getElementById('quarterSelect').value = quarter;
                console.log('Selected quarter:', quarter);
            }
        }
        
        // Initialize feedback reports functionality
        function initializeFeedbackReports() {
            console.log('🔄 Initializing 360 Feedback Reports...');
            loadDepartmentEmployees();
            setupEventListeners();
        }
        
        // Load department employees for feedback reports
        async function loadDepartmentEmployees() {
            console.log('🔄 Loading department employees for feedback reports...');
            
            try {
                showLoading(true);
                hideMessages();
                
                const response = await fetch('/linemanager/reports/feedback-employees');
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                console.log('📊 API Response:', result);
                
                if (result.success) {
                    departmentEmployees = result.employees || [];
                    populateEmployeeDropdown(result.employees || []);
                    updateOverviewCards(result.employees || []);
                    showSuccessMessage(`Loaded ${result.employees?.length || 0} employees`);
                    console.log('✅ Employees loaded successfully:', result.employees?.length || 0);
                    generateTeamCharts(result.employees || []);
                } else {
                    throw new Error(result.message || 'Failed to load employees');
                }
                
            } catch (error) {
                console.error('❌ Error loading employees:', error);
                showErrorMessage('Error loading department employees: ' + error.message);
                departmentEmployees = [];
                populateEmployeeDropdown([]);
                updateOverviewCards([]);
            } finally {
                showLoading(false);
            }
        }

        // Update overview cards with real data
        function updateOverviewCards(employees) {
            console.log('📊 Updating overview cards with:', employees.length, 'employees');
            
            const totalEmployees = employees.length;
            let employeesWithFeedback = 0;
            const activeQuarters = new Set();
            
            employees.forEach(employee => {
                if (employee.feedbackAvailability) {
                    let hasFeedback = false;
                    Object.entries(employee.feedbackAvailability).forEach(([quarter, available]) => {
                        if (available) {
                            hasFeedback = true;
                            activeQuarters.add(quarter);
                        }
                    });
                    if (hasFeedback) {
                        employeesWithFeedback++;
                    }
                }
            });
            
            // Update the cards
            document.getElementById('totalEmployeesCard').textContent = totalEmployees;
            document.getElementById('employeesWithFeedbackCard').textContent = employeesWithFeedback;
            document.getElementById('activeQuartersCard').textContent = activeQuarters.size;
            document.getElementById('currentYearCard').textContent = new Date().getFullYear();
            
            console.log('✅ Cards updated:', { 
                totalEmployees, 
                employeesWithFeedback, 
                activeQuarters: activeQuarters.size 
            });
        }

        // Populate employee dropdown
        function populateEmployeeDropdown(employees) {
            const employeeSelect = document.getElementById('employeeSelect');
            employeeSelect.innerHTML = '<option value="">Choose an employee...</option>';
            
            employees.forEach(employee => {
                const option = document.createElement('option');
                option.value = employee.userId;
                option.textContent = `${employee.fullName} (${employee.jobTitle})`;
                option.dataset.feedbackAvailability = JSON.stringify(employee.feedbackAvailability || {});
                employeeSelect.appendChild(option);
            });
            
            console.log('✅ Employee dropdown populated with', employees.length, 'employees');
        }

        // Update quarters based on selected employee
        function updateQuartersForEmployee() {
            const employeeSelect = document.getElementById('employeeSelect');
            const selectedOption = employeeSelect.options[employeeSelect.selectedIndex];
            const quarterGrid = document.getElementById('quarterGrid');
            
            // Clear existing quarter buttons
            quarterGrid.innerHTML = '';
            
            // Clear hidden input
            document.getElementById('quarterSelect').value = '';
            
            ['Q1', 'Q2', 'Q3', 'Q4'].forEach(quarter => {
                const btn = document.createElement('div');
                btn.className = 'quarter-btn';
                btn.dataset.quarter = quarter;
                btn.textContent = quarter;
                
                // Add click handler
                btn.onclick = function() {
                    if (!this.classList.contains('unavailable')) {
                        selectQuarter(quarter);
                    }
                };
                
                if (selectedOption && selectedOption.dataset.feedbackAvailability) {
                    try {
                        const availability = JSON.parse(selectedOption.dataset.feedbackAvailability);
                        if (availability[quarter]) {
                            btn.textContent += ' ✓';
                            btn.classList.add('available');
                        } else {
                            btn.classList.add('unavailable');
                            btn.textContent += ' (No Data)';
                        }
                    } catch (error) {
                        console.error('❌ Error parsing feedback availability:', error);
                        btn.classList.add('unavailable');
                        btn.textContent += ' (No Data)';
                    }
                } else {
                    btn.classList.add('unavailable');
                    btn.textContent += ' (No Data)';
                }
                
                quarterGrid.appendChild(btn);
            });
            
            console.log('✅ Quarters updated for employee:', selectedOption?.textContent || 'None');
        }

        // 1. Team Performance Status Chart
        async function generateTeamPerformanceStatusChart(employees) {
            const ctx = document.getElementById('performanceTrendChart');
            if (!ctx) return;
            
            console.log('📊 Generating performance status chart...');
            const currentYear = new Date().getFullYear();
            const performanceData = [];
            
            // Get latest performance scores for each employee (limit to 8 for readability)
            for (const employee of employees.slice(0, 8)) {
                try {
                    const recentQuarter = getMostRecentQuarter(employee.feedbackAvailability);
                    if (!recentQuarter) {
                        performanceData.push({
                            name: employee.firstName,
                            score: 0,
                            status: 'no-data'
                        });
                        continue;
                    }
                    
                    const response = await fetch(`/linemanager/reports/quarterly-feedback?employeeId=${employee.userId}&quarter=${recentQuarter}&year=${currentYear}`);
                    if (response.ok) {
                        const result = await response.json();
                        if (result.success) {
                            const score = result.data.summary.overallPerformanceScore || 0;
                            performanceData.push({
                                name: employee.firstName,
                                score: score,
                                status: getPerformanceStatus(score)
                            });
                        } else {
                            performanceData.push({
                                name: employee.firstName,
                                score: 0,
                                status: 'no-data'
                            });
                        }
                    }
                } catch (error) {
                    console.error(`Error getting performance for ${employee.firstName}:`, error);
                    performanceData.push({
                        name: employee.firstName,
                        score: 0,
                        status: 'error'
                    });
                }
            }
            
            // Create chart
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: performanceData.map(emp => emp.name),
                    datasets: [{
                        label: 'Performance Score',
                        data: performanceData.map(emp => emp.score),
                        backgroundColor: performanceData.map(emp => {
                            switch(emp.status) {
                                case 'excellent': return '#10b981'; // Green
                                case 'good': return '#3b82f6';      // Blue
                                case 'average': return '#f59e0b';   // Orange
                                case 'needs-improvement': return '#ef4444'; // Red
                                default: return '#9ca3af';          // Gray for no data
                            }
                        }),
                        borderRadius: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: { 
                        legend: { display: false },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const emp = performanceData[context.dataIndex];
                                    return `${emp.name}: ${emp.score.toFixed(1)}/5.0 (${emp.status.replace('-', ' ')})`;
                                }
                            }
                        }
                    },
                    scales: {
                        y: { 
                            beginAtZero: true, 
                            max: 5, 
                            ticks: { font: { size: 10 } }
                        },
                        x: { 
                            ticks: { font: { size: 10 } }
                        }
                    }
                }
            });
            
            console.log('✅ Performance status chart completed');
        }

        // 2. Skills Priority Chart
        async function generateSkillsPriorityChart(employees) {
            const ctx = document.getElementById('skillsHeatmapChart');
            if (!ctx) return;
            
            console.log('📊 Generating skills priority chart...');
            const currentYear = new Date().getFullYear();
            const skillAverages = {};
            
            // Aggregate skills data across team
            for (const employee of employees) {
                const recentQuarter = getMostRecentQuarter(employee.feedbackAvailability);
                if (!recentQuarter) continue;
                
                try {
                    const response = await fetch(`/linemanager/reports/quarterly-feedback?employeeId=${employee.userId}&quarter=${recentQuarter}&year=${currentYear}`);
                    if (response.ok) {
                        const result = await response.json();
                        if (result.success) {
                            // Process both hard and soft skills
                            [...(result.data.hardSkills || []), ...(result.data.softSkills || [])].forEach(skill => {
                                if (!skillAverages[skill.skillName]) {
                                    skillAverages[skill.skillName] = { total: 0, count: 0 };
                                }
                                skillAverages[skill.skillName].total += skill.averageRating;
                                skillAverages[skill.skillName].count += 1;
                            });
                        }
                    }
                } catch (error) {
                    console.error(`Error getting skills for ${employee.firstName}:`, error);
                }
            }
            
            // Calculate averages and sort by priority (lowest first = highest priority)
            const skillData = Object.entries(skillAverages)
                .map(([skillName, data]) => ({
                    skill: skillName.length > 15 ? skillName.substring(0, 15) + '...' : skillName,
                    average: data.total / data.count,
                    fullName: skillName
                }))
                .sort((a, b) => a.average - b.average)
                .slice(0, 6); // Top 6 priority skills
            
            if (skillData.length === 0) {
                // Show no data message
                ctx.getContext('2d').clearRect(0, 0, ctx.width, ctx.height);
                const context = ctx.getContext('2d');
                context.font = '14px Inter';
                context.fillStyle = '#6b7280';
                context.textAlign = 'center';
                context.fillText('No skills data available', ctx.width / 2, ctx.height / 2);
                return;
            }
            
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: skillData.map(s => s.skill),
                    datasets: [{
                        label: 'Team Average',
                        data: skillData.map(s => s.average),
                        backgroundColor: skillData.map(s => {
                            if (s.average < 3) return '#ef4444';      // Red - urgent
                            if (s.average < 3.5) return '#f59e0b';   // Orange - needs attention
                            if (s.average < 4) return '#3b82f6';     // Blue - good
                            return '#10b981';                         // Green - excellent
                        }),
                        borderRadius: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: { 
                        legend: { display: false },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const skill = skillData[context.dataIndex];
                                    return `${skill.fullName}: ${skill.average.toFixed(1)}/5.0`;
                                }
                            }
                        }
                    },
                    scales: {
                        y: { 
                            beginAtZero: true, 
                            max: 5, 
                            ticks: { font: { size: 10 } }
                        },
                        x: { 
                            ticks: { font: { size: 9 }, maxRotation: 45 }
                        }
                    }
                }
            });
            
            console.log('✅ Skills priority chart completed');
        }

        // 3. Objective Achievement Chart
        async function generateObjectiveAchievementChart(employees) {
            const ctx = document.getElementById('objectiveAchievementChart');
            if (!ctx) return;
            
            console.log('📊 Generating objective achievement chart...');
            const currentYear = new Date().getFullYear();
            const achievementData = [];
            
            for (const employee of employees.slice(0, 6)) { // Limit to 6 for readability
                const recentQuarter = getMostRecentQuarter(employee.feedbackAvailability);
                if (!recentQuarter) {
                    achievementData.push({
                        name: employee.firstName,
                        rate: 0,
                        status: 'no-data'
                    });
                    continue;
                }
                
                try {
                    const response = await fetch(`/linemanager/reports/quarterly-feedback?employeeId=${employee.userId}&quarter=${recentQuarter}&year=${currentYear}`);
                    if (response.ok) {
                        const result = await response.json();
                        if (result.success) {
                            const summary = result.data.summary;
                            const totalWeightedScore = summary.totalWeightedScore || 0;
                            const totalPossibleWeight = summary.totalWeight || 0;
                            
                            const achievementRate = totalPossibleWeight > 0 ? (totalWeightedScore / totalPossibleWeight) * 100 : 0;
                            
                            achievementData.push({
                                name: employee.firstName,
                                rate: Math.min(achievementRate, 100), // Cap at 100%
                                status: achievementRate >= 90 ? 'excellent' : 
                                    achievementRate >= 75 ? 'good' : 
                                    achievementRate >= 60 ? 'average' : 'needs-improvement'
                            });
                        } else {
                            achievementData.push({
                                name: employee.firstName,
                                rate: 0,
                                status: 'no-data'
                            });
                        }
                    }
                } catch (error) {
                    console.error(`Error getting objectives for ${employee.firstName}:`, error);
                    achievementData.push({
                        name: employee.firstName,
                        rate: 0,
                        status: 'error'
                    });
                }
            }
            
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: achievementData.map(emp => emp.name),
                    datasets: [{
                        label: 'Achievement %',
                        data: achievementData.map(emp => emp.rate),
                        backgroundColor: achievementData.map(emp => {
                            switch(emp.status) {
                                case 'excellent': return '#10b981';
                                case 'good': return '#3b82f6';
                                case 'average': return '#f59e0b';
                                case 'needs-improvement': return '#ef4444';
                                default: return '#9ca3af';
                            }
                        }),
                        borderRadius: 4
                    }]
                },
                options: {
                    indexAxis: 'y',
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: { 
                        legend: { display: false },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const emp = achievementData[context.dataIndex];
                                    return `${emp.name}: ${emp.rate.toFixed(1)}% (${emp.status.replace('-', ' ')})`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: { 
                            beginAtZero: true, 
                            max: 100,
                            ticks: { 
                                font: { size: 10 },
                                callback: function(value) { return value + '%'; }
                            }
                        },
                        y: { 
                            ticks: { font: { size: 10 } }
                        }
                    }
                }
            });
            
            console.log('✅ Objective achievement chart completed');
        }

        // 4. Performance Trend Chart (simplified - uses mid-year vs final comparison)
        async function generatePerformanceTrendChart(employees) {
            const ctx = document.getElementById('performanceDistributionChart');
            if (!ctx) return;
            
            console.log('📊 Generating performance trend chart...');
            const currentYear = new Date().getFullYear();
            const trendData = [];
            
            for (const employee of employees.slice(0, 6)) {
                try {
                    // Check if employee has both mid-year and final-year data
                    const hasMidYear = employee.feedbackAvailability?.Q1 || employee.feedbackAvailability?.Q2;
                    const hasFinalYear = employee.feedbackAvailability?.Q3 || employee.feedbackAvailability?.Q4;
                    
                    if (!hasMidYear && !hasFinalYear) {
                        trendData.push({
                            name: employee.firstName,
                            trend: 0,
                            status: 'no-data'
                        });
                        continue;
                    }
                    
                    // For simplicity, compare Q2 vs Q4 if both exist, otherwise use available data
                    let earlyScore = 0, lateScore = 0;
                    
                    // Get early score (Q1 or Q2)
                    for (const quarter of ['Q2', 'Q1']) {
                        if (employee.feedbackAvailability?.[quarter]) {
                            const response = await fetch(`/linemanager/reports/quarterly-feedback?employeeId=${employee.userId}&quarter=${quarter}&year=${currentYear}`);
                            if (response.ok) {
                                const result = await response.json();
                                if (result.success) {
                                    earlyScore = result.data.summary.overallPerformanceScore || 0;
                                    break;
                                }
                            }
                        }
                    }
                    
                    // Get late score (Q4 or Q3)
                    for (const quarter of ['Q4', 'Q3']) {
                        if (employee.feedbackAvailability?.[quarter]) {
                            const response = await fetch(`/linemanager/reports/quarterly-feedback?employeeId=${employee.userId}&quarter=${quarter}&year=${currentYear}`);
                            if (response.ok) {
                                const result = await response.json();
                                if (result.success) {
                                    lateScore = result.data.summary.overallPerformanceScore || 0;
                                    break;
                                }
                            }
                        }
                    }
                    
                    const trend = lateScore - earlyScore;
                    
                    trendData.push({
                        name: employee.firstName,
                        trend: trend,
                        status: trend > 0.2 ? 'improving' : trend < -0.2 ? 'declining' : 'stable'
                    });
                    
                } catch (error) {
                    console.error(`Error getting trend for ${employee.firstName}:`, error);
                    trendData.push({
                        name: employee.firstName,
                        trend: 0,
                        status: 'error'
                    });
                }
            }
            
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: trendData.map(emp => emp.name),
                    datasets: [{
                        label: 'Performance Trend',
                        data: trendData.map(emp => emp.trend),
                        backgroundColor: trendData.map(emp => {
                            switch(emp.status) {
                                case 'improving': return '#10b981';   // Green
                                case 'declining': return '#ef4444';   // Red
                                case 'stable': return '#6b7280';      // Gray
                                default: return '#9ca3af';            // Light gray
                            }
                        }),
                        borderRadius: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: { 
                        legend: { display: false },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const emp = trendData[context.dataIndex];
                                    const trendText = emp.trend >= 0 ? `+${emp.trend.toFixed(2)}` : emp.trend.toFixed(2);
                                    return `${emp.name}: ${trendText} (${emp.status})`;
                                }
                            }
                        }
                    },
                    scales: {
                        y: { 
                            beginAtZero: false,
                            ticks: { font: { size: 10 } }
                        },
                        x: { 
                            ticks: { font: { size: 10 } }
                        }
                    }
                }
            });
            
            console.log('✅ Performance trend chart completed');
        }

        // Generate team performance charts using real feedback data - Enhanced Version
        async function generateTeamCharts(employees) {
            console.log('🔄 Generating performance-focused team charts...');
            
            if (!employees || employees.length === 0) {
                console.log('❌ No employee data for charts');
                showEmptyChartMessage();
                return;
            }
            
            try {
                showLoading(true, 'Loading team performance insights...');
                
                // Add loading state to all chart cards
                document.querySelectorAll('.chart-card').forEach(card => {
                    card.classList.add('loading');
                });
                
                // Generate all charts in parallel for better performance
                await Promise.all([
                    generateTeamPerformanceStatusChart(employees),
                    generateSkillsPriorityChart(employees),
                    generateObjectiveAchievementChart(employees),
                    generatePerformanceTrendChart(employees)
                ]);
                
                console.log('✅ All performance charts generated successfully');
                
                // Remove loading state
                document.querySelectorAll('.chart-card').forEach(card => {
                    card.classList.remove('loading');
                });
                
                // Add success animation
                document.querySelectorAll('.chart-card').forEach((card, index) => {
                    setTimeout(() => {
                        card.style.opacity = '0';
                        card.style.transform = 'translateY(20px)';
                        card.style.transition = 'all 0.5s ease';
                        
                        setTimeout(() => {
                            card.style.opacity = '1';
                            card.style.transform = 'translateY(0)';
                        }, 100);
                    }, index * 100);
                });
                
            } catch (error) {
                console.error('❌ Error generating team charts:', error);
                showErrorMessage('Error loading team performance charts: ' + error.message);
                
                // Remove loading state on error
                document.querySelectorAll('.chart-card').forEach(card => {
                    card.classList.remove('loading');
                });
            } finally {
                showLoading(false);
            }
        }

        // Show empty chart message
        function showEmptyChartMessage() {
            document.querySelectorAll('canvas').forEach(canvas => {
                const ctx = canvas.getContext('2d');
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                
                // Draw empty state
                ctx.fillStyle = '#e5e7eb';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                
                ctx.fillStyle = '#6b7280';
                ctx.font = '14px Inter, sans-serif';
                ctx.textAlign = 'center';
                ctx.fillText('No Data Available', canvas.width / 2, canvas.height / 2);
                
                ctx.font = '12px Inter, sans-serif';
                ctx.fillStyle = '#9ca3af';
                ctx.fillText('Switch to 360 Feedback Reports tab', canvas.width / 2, canvas.height / 2 + 20);
            });
        }

        // Helper function: Get performance status classification
        function getPerformanceStatus(score) {
            if (score >= 4.5) return 'excellent';
            if (score >= 3.5) return 'good';
            if (score >= 2.5) return 'average';
            return 'needs-improvement';
        }

        // Helper function: Get most recent quarter with feedback
        function getMostRecentQuarter(feedbackAvailability) {
            const quarters = ['Q4', 'Q3', 'Q2', 'Q1'];
            for (const quarter of quarters) {
                if (feedbackAvailability?.[quarter]) {
                    return quarter;
                }
            }
            return null;
        }

        // Setup event listeners
        function setupEventListeners() {
            console.log('🔄 Setting up feedback reports event listeners...');
            
            // Employee selection change
            document.getElementById('employeeSelect').addEventListener('change', function() {
                updateQuartersForEmployee();
                hideReportPreview();
            });
            
            // Year selection change
            document.getElementById('yearSelect').addEventListener('change', function() {
                hideReportPreview();
            });
            
            // Preview button
            document.getElementById('previewBtn').addEventListener('click', function() {
                generateReport('preview');
            });
            
            // Generate PDF button
            document.getElementById('generatePdfBtn').addEventListener('click', function() {
                generateReport('pdf');
            });
            
            // Refresh data button
            document.getElementById('refreshDataBtn').addEventListener('click', function() {
                loadDepartmentEmployees();
            });
            
            console.log('✅ Event listeners set up successfully');
        }

        const reportCache = {};

        // Generate report (preview or PDF)
        async function generateReport(format) {
            console.log(`🔄 Generating ${format} report...`);
            
            const employeeId = document.getElementById('employeeSelect').value;
            const year = document.getElementById('yearSelect').value;
            const reportType = document.getElementById('reportTypeInput').value;
            
            // Basic validation
            if (!employeeId || !year || !reportType) {
                showErrorMessage('Please select employee, year, and report type');
                return;
            }
            
            // Handle different report types
            if (reportType === 'quarterly') {
                const quarter = document.getElementById('quarterSelect').value;
                if (!quarter) {
                    showErrorMessage('Please select a quarter for quarterly reports');
                    return;
                }
                
                try {
                    showLoading(true);
                    hideMessages();
                    
                    const url = `/linemanager/reports/quarterly-feedback?employeeId=${employeeId}&quarter=${quarter}&year=${year}`;
                    const response = await fetch(url);
                    
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        currentReportData = result.data;
                        
                        if (format === 'pdf') {
                            const filename = `Feedback_Report_${employeeId}_${quarter}_${year}.pdf`;
                            generatePDFReport(result.data, filename);
                        } else {
                            displayReportPreview(result.data);
                            showSuccessMessage('Report preview loaded successfully');
                        }
                        
                        console.log('✅ Report generated successfully:', format);
                    } else {
                        throw new Error(result.message || 'Failed to generate report');
                    }
                    
                } catch (error) {
                    console.error('❌ Error generating report:', error);
                    showErrorMessage('Error generating report: ' + error.message);
                } finally {
                    if (format !== 'pdf') {
                        showLoading(false);
                    }
                }
                
            } else if (reportType === 'midyear') {
                // Mid-Year Report (Q1+Q2)
                try {
                    showLoading(true);
                    hideMessages();
                    
                    const url = `/linemanager/reports/mid-year-feedback?employeeId=${employeeId}&year=${year}`;
                    const response = await fetch(url);
                    
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        currentReportData = result.data;
                        
                        if (format === 'pdf') {
                            const filename = `Mid_Year_Report_${employeeId}_${year}.pdf`;
                            generateCombinedPDFReport(result.data, filename, 'Mid-Year');
                        } else {
                            displayCombinedReportPreview(result.data, 'midyear');
                            showSuccessMessage('Mid-Year report preview loaded successfully');
                        }
                        
                        console.log('✅ Mid-Year report generated successfully:', format);
                    } else {
                        throw new Error(result.message || 'Failed to generate mid-year report');
                    }
                    
                } catch (error) {
                    console.error('❌ Error generating mid-year report:', error);
                    showErrorMessage('Error generating mid-year report: ' + error.message);
                } finally {
                    if (format !== 'pdf') {
                        showLoading(false);
                    }
                }
                
            } else if (reportType === 'finalyear') {
                // Final-Year Report (Q3+Q4)
                try {
                    showLoading(true);
                    hideMessages();
                    
                    const url = `/linemanager/reports/final-year-feedback?employeeId=${employeeId}&year=${year}`;
                    const response = await fetch(url);
                    
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        currentReportData = result.data;
                        
                        if (format === 'pdf') {
                            const filename = `Final_Year_Report_${employeeId}_${year}.pdf`;
                            generateCombinedPDFReport(result.data, filename, 'Final-Year');
                        } else {
                            displayCombinedReportPreview(result.data, 'finalyear');
                            showSuccessMessage('Final-Year report preview loaded successfully');
                        }
                        
                        console.log('✅ Final-Year report generated successfully:', format);
                    } else {
                        throw new Error(result.message || 'Failed to generate final-year report');
                    }
                    
                } catch (error) {
                    console.error('❌ Error generating final-year report:', error);
                    showErrorMessage('Error generating final-year report: ' + error.message);
                } finally {
                    if (format !== 'pdf') {
                        showLoading(false);
                    }
                }
                
                } else if (reportType === 'comparison') {
            // Comparison Report (Mid vs Final) - SIMPLIFIED
            const cacheKey = `${employeeId}_${year}_comparison`;
            
            // Check cache first
            if (reportCache[cacheKey]) {
                console.log('📋 Using cached comparison data');
                currentReportData = reportCache[cacheKey];
                
                if (format === 'pdf') {
                    const filename = `Comparison_Report_${employeeId}_${year}.pdf`;
                    generateComparisonPDFReport(reportCache[cacheKey], filename);
                } else {
                    displayComparisonReportPreview(reportCache[cacheKey]);
                    showSuccessMessage('Comparison report loaded from cache');
                }
                return;
            }
            
            try {
                showLoading(true, 'Loading comparison data... this may take up to 2 minutes');
                hideMessages();
                
                const url = `/linemanager/reports/comparison-feedback?employeeId=${employeeId}&year=${year}`;
                
                // Simple fetch with just a timeout - no Promise.race
                const response = await fetch(url, {
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`Server error: ${response.status} - ${response.statusText}`);
                }
                
                showLoading(true, 'Processing comparison data...');
                
                const result = await response.json();
                
                if (result.success) {
                    currentReportData = result.data;
                    
                    // Cache the result for future use
                    reportCache[cacheKey] = result.data;
                    
                    if (format === 'pdf') {
                        const filename = `Comparison_Report_${employeeId}_${year}.pdf`;
                        generateComparisonPDFReport(result.data, filename);
                    } else {
                        displayComparisonReportPreview(result.data);
                        showSuccessMessage('Comparison report preview loaded successfully');
                    }
                    
                    console.log('✅ Comparison report generated successfully:', format);
                } else {
                    throw new Error(result.message || 'Failed to generate comparison report');
                }
                
            } catch (error) {
                console.error('❌ Error generating comparison report:', error);
                
                if (error.message.includes('Failed to fetch')) {
                    showErrorMessage('Network error or server timeout. Please check your connection and try again.');
                } else {
                    showErrorMessage('Error generating comparison report: ' + error.message);
                }
                
                // Add retry suggestion
                setTimeout(() => {
                    const errorDiv = document.getElementById('errorMessage');
                    if (errorDiv.classList.contains('show')) {
                        errorDiv.innerHTML += '<br><small>💡 Tip: Try refreshing the page or try again in a few moments.</small>';
                    }
                }, 2000);
                
            } finally {
                if (format !== 'pdf') {
                    showLoading(false);
                }
            }
            
        } else {
                    showErrorMessage(`Unknown report type: ${reportType}`);
                    return;
                }
        }

        // Display report preview
        function displayReportPreview(reportData) {
            console.log('🔄 Displaying report preview...');
            
            if (!reportData) {
                showErrorMessage('No report data available');
                return;
            }
            
            try {
                populateEmployeeInfo(reportData);
                populateObjectivesTable(reportData.objectives || []);
                populateSkillsTable('hardSkillsTable', reportData.hardSkills || []);
                populateSkillsTable('softSkillsTable', reportData.softSkills || []);
                populatePerformanceSummary(reportData.summary || {});
                
                document.getElementById('reportPreview').classList.add('show');
                
                setTimeout(() => {
                    document.getElementById('reportPreview').scrollIntoView({ behavior: 'smooth' });
                }, 100);
                
                console.log('✅ Report preview displayed successfully');
                
            } catch (error) {
                console.error('❌ Error displaying report preview:', error);
                showErrorMessage('Error displaying report preview: ' + error.message);
            }
        }

        // Populate employee information section
        function populateEmployeeInfo(reportData) {
            const employeeInfoDiv = document.getElementById('employeeInfo');
            const employee = reportData.employee || {};
            const reportingPeriod = reportData.reportingPeriod || {};
            const lineManager = reportData.lineManager || {};
            
            const startDate = reportingPeriod.startDate ? new Date(reportingPeriod.startDate).toLocaleDateString() : 'N/A';
            const endDate = reportingPeriod.endDate ? new Date(reportingPeriod.endDate).toLocaleDateString() : 'N/A';
            
            employeeInfoDiv.innerHTML = `
                <div class="info-item">
                    <div class="info-label">Employee Name</div>
                    <div class="info-value">${employee.fullName || 'N/A'}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Position</div>
                    <div class="info-value">${employee.jobTitle || employee.jobpositions?.jobTitle || 'N/A'}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Department</div>
                    <div class="info-value">${employee.department || employee.departments?.deptName || 'N/A'}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Line Manager</div>
                    <div class="info-value">${lineManager.fullName || 'N/A'}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Reporting Period</div>
                    <div class="info-value">${reportingPeriod.quarter || 'N/A'} ${reportingPeriod.year || 'N/A'} (${startDate} - ${endDate})</div>
                </div>
            `;
        }

        // Populate objectives table
        function populateObjectivesTable(objectives) {
            const tbody = document.querySelector('#objectivesTable tbody');
            tbody.innerHTML = '';
            
            if (!objectives || objectives.length === 0) {
                tbody.innerHTML = '<tr><td colspan="8" style="text-align: center;">No objectives data available</td></tr>';
                return;
            }
            
            objectives.forEach(objective => {
                const row = document.createElement('tr');
                const rating = parseFloat(objective.averageRating);
                const ratingClass = getRatingClass(rating);
                
                row.innerHTML = `
                    <td>${objective.objective}</td>
                    <td>${objective.kpi}</td>
                    <td>${objective.target}</td>
                    <td>${objective.uom}</td>
                    <td style="text-align: center;">${objective.assignedWeight}%</td>
                    <td style="text-align: center;">${objective.weightedScore}</td>
                    <td class="rating-cell ${ratingClass}">${objective.averageRating}</td>
                    <td>${objective.qualitativeFeedback}</td>
                `;
                tbody.appendChild(row);
            });
        }

        // Populate skills table (hard or soft skills)
        function populateSkillsTable(tableId, skills) {
            const tbody = document.querySelector(`#${tableId} tbody`);
            tbody.innerHTML = '';
            
            if (!skills || skills.length === 0) {
                tbody.innerHTML = '<tr><td colspan="3" style="text-align: center;">No skills data available</td></tr>';
                return;
            }
            
            skills.forEach(skill => {
                const row = document.createElement('tr');
                const rating = parseFloat(skill.averageRating);
                const ratingClass = getRatingClass(rating);
                
                row.innerHTML = `
                    <td>${skill.skillName}</td>
                    <td class="rating-cell ${ratingClass}">${skill.averageRating}</td>
                    <td>${skill.qualitativeFeedback}</td>
                `;
                tbody.appendChild(row);
            });
        }

        // Populate performance summary
        function populatePerformanceSummary(summary) {
            const summaryDiv = document.getElementById('performanceSummary');
            
            summaryDiv.innerHTML = `
                <div class="info-item">
                    <div class="info-label">Total Objectives</div>
                    <div class="info-value">${summary.objectivesCount || 0}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Total Hard Skills</div>
                    <div class="info-value">${summary.hardSkillsCount || 0}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Total Soft Skills</div>
                    <div class="info-value">${summary.softSkillsCount || 0}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Average Objective Rating</div>
                    <div class="info-value ${getRatingClass(parseFloat(summary.averageObjectiveRating || 0))}">${summary.averageObjectiveRating || 0}/5.0</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Average Hard Skills Rating</div>
                    <div class="info-value ${getRatingClass(parseFloat(summary.averageHardSkillRating || 0))}">${summary.averageHardSkillRating || 0}/5.0</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Average Soft Skills Rating</div>
                    <div class="info-value ${getRatingClass(parseFloat(summary.averageSoftSkillRating || 0))}">${summary.averageSoftSkillRating || 0}/5.0</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Total Weighted Score</div>
                    <div class="info-value">${summary.totalWeightedScore || 0}/${summary.totalWeight || 0}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Overall Performance Score</div>
                    <div class="info-value ${getRatingClass(parseFloat(summary.overallPerformanceScore || 0))}">${summary.overallPerformanceScore || 0}/5.0</div>
                </div>
            `;
        }

        // Generate PDF report
        function generatePDFReport(reportData, filename) {
            console.log('🔄 Generating quarterly PDF report...');
            
            try {
                showLoading(true);
                
                const { jsPDF } = window.jspdf;
                if (!jsPDF) {
                    throw new Error('jsPDF library not loaded');
                }
                
                const doc = new jsPDF();
                let currentY = 20;
                const margin = 20;
                
                // Simple header
                doc.setFontSize(16);
                doc.setFont('helvetica', 'bold');
                doc.text('360° Feedback Performance Report', 105, currentY, { align: 'center' });
                currentY += 20;
                
                // Employee Information
                const employee = reportData.employee || {};
                const reportingPeriod = reportData.reportingPeriod || {};
                const lineManager = reportData.lineManager || {};
                
                doc.setFontSize(12);
                doc.setFont('helvetica', 'bold');
                doc.text('Employee Information', margin, currentY);
                currentY += 10;
                
                doc.setFontSize(10);
                doc.setFont('helvetica', 'normal');
                
                const startDate = reportingPeriod.startDate ? new Date(reportingPeriod.startDate).toLocaleDateString() : 'N/A';
                const endDate = reportingPeriod.endDate ? new Date(reportingPeriod.endDate).toLocaleDateString() : 'N/A';
                
                doc.text(`Employee: ${employee.fullName || 'N/A'}`, margin, currentY);
                currentY += 7;
                doc.text(`Position: ${employee.jobTitle || employee.jobpositions?.jobTitle || 'N/A'}`, margin, currentY);
                currentY += 7;
                doc.text(`Department: ${employee.department || employee.departments?.deptName || 'N/A'}`, margin, currentY);
                currentY += 7;
                doc.text(`Line Manager: ${lineManager.fullName || 'N/A'}`, margin, currentY);
                currentY += 7;
                doc.text(`Period: ${reportingPeriod.quarter || 'N/A'} ${reportingPeriod.year || 'N/A'} (${startDate} - ${endDate})`, margin, currentY);
                currentY += 15;
                
                // Performance Summary
                const summary = reportData.summary || {};
                doc.setFontSize(12);
                doc.setFont('helvetica', 'bold');
                doc.text('Performance Summary', margin, currentY);
                currentY += 10;
                
                doc.setFontSize(10);
                doc.setFont('helvetica', 'normal');
                doc.text(`Overall Performance Score: ${summary.overallPerformanceScore || 0}/5.0`, margin, currentY);
                currentY += 7;
                doc.text(`Average Objective Rating: ${summary.averageObjectiveRating || 0}/5.0`, margin, currentY);
                currentY += 7;
                doc.text(`Average Hard Skills Rating: ${summary.averageHardSkillRating || 0}/5.0`, margin, currentY);
                currentY += 7;
                doc.text(`Average Soft Skills Rating: ${summary.averageSoftSkillRating || 0}/5.0`, margin, currentY);
                currentY += 15;
                
                // Objectives Assessment
                const objectives = reportData.objectives || [];
                if (objectives.length > 0) {
                    doc.setFontSize(12);
                    doc.setFont('helvetica', 'bold');
                    doc.text('Objectives Assessment', margin, currentY);
                    currentY += 10;
                    
                    const objectivesData = objectives.map(obj => [
                        (obj.objective || '').substring(0, 30) + ((obj.objective || '').length > 30 ? '...' : ''),
                        (obj.kpi || '').substring(0, 20) + ((obj.kpi || '').length > 20 ? '...' : ''),
                        String(obj.target || 'N/A'),
                        String(obj.uom || ''),
                        String(obj.assignedWeight || 0) + '%',
                        String(obj.averageRating || 0)
                    ]);
                    
                    if (doc.autoTable) {
                        doc.autoTable({
                            head: [['Objective', 'KPI', 'Target', 'UOM', 'Weight', 'Rating']],
                            body: objectivesData,
                            startY: currentY,
                            styles: { fontSize: 8 },
                            headStyles: { fillColor: [70, 130, 180] },
                            margin: { left: margin, right: margin }
                        });
                        currentY = doc.lastAutoTable.finalY + 15;
                    } else {
                        // Fallback without autoTable
                        doc.setFontSize(9);
                        doc.setFont('helvetica', 'bold');
                        doc.text('Objective | KPI | Target | UOM | Weight | Rating', margin, currentY);
                        currentY += 7;
                        
                        doc.setFont('helvetica', 'normal');
                        objectives.forEach(obj => {
                            if (currentY > 250) {
                                doc.addPage();
                                currentY = 30;
                            }
                            const line = `${(obj.objective || '').substring(0, 15)} | ${(obj.kpi || '').substring(0, 10)} | ${obj.target || 'N/A'} | ${obj.uom || ''} | ${obj.assignedWeight || 0}% | ${obj.averageRating || 0}`;
                            doc.text(line, margin, currentY);
                            currentY += 6;
                        });
                        currentY += 10;
                    }
                }
                
                // Hard Skills Assessment
                const hardSkills = reportData.hardSkills || [];
                if (hardSkills.length > 0) {
                    if (currentY > 200) {
                        doc.addPage();
                        currentY = 30;
                    }
                    
                    doc.setFontSize(12);
                    doc.setFont('helvetica', 'bold');
                    doc.text('Hard Skills Assessment', margin, currentY);
                    currentY += 10;
                    
                    const hardSkillsData = hardSkills.map(skill => [
                        skill.skillName || 'N/A',
                        String(skill.averageRating || 0),
                        (skill.qualitativeFeedback || '').substring(0, 50) + ((skill.qualitativeFeedback || '').length > 50 ? '...' : '') || 'No feedback'
                    ]);
                    
                    if (doc.autoTable) {
                        doc.autoTable({
                            head: [['Hard Skill', 'Rating', 'Feedback']],
                            body: hardSkillsData,
                            startY: currentY,
                            styles: { fontSize: 9 },
                            headStyles: { fillColor: [70, 130, 180] },
                            margin: { left: margin, right: margin }
                        });
                        currentY = doc.lastAutoTable.finalY + 15;
                    } else {
                        // Fallback
                        doc.setFontSize(9);
                        hardSkills.forEach(skill => {
                            if (currentY > 250) {
                                doc.addPage();
                                currentY = 30;
                            }
                            doc.text(`${skill.skillName}: ${skill.averageRating}/5.0`, margin, currentY);
                            currentY += 6;
                        });
                        currentY += 10;
                    }
                }
                
                // Soft Skills Assessment
                const softSkills = reportData.softSkills || [];
                if (softSkills.length > 0) {
                    if (currentY > 200) {
                        doc.addPage();
                        currentY = 30;
                    }
                    
                    doc.setFontSize(12);
                    doc.setFont('helvetica', 'bold');
                    doc.text('Soft Skills Assessment', margin, currentY);
                    currentY += 10;
                    
                    const softSkillsData = softSkills.map(skill => [
                        skill.skillName || 'N/A',
                        String(skill.averageRating || 0),
                        (skill.qualitativeFeedback || '').substring(0, 50) + ((skill.qualitativeFeedback || '').length > 50 ? '...' : '') || 'No feedback'
                    ]);
                    
                    if (doc.autoTable) {
                        doc.autoTable({
                            head: [['Soft Skill', 'Rating', 'Feedback']],
                            body: softSkillsData,
                            startY: currentY,
                            styles: { fontSize: 9 },
                            headStyles: { fillColor: [70, 130, 180] },
                            margin: { left: margin, right: margin }
                        });
                        currentY = doc.lastAutoTable.finalY + 15;
                    }
                }
                
                // Simple footer
                doc.setFontSize(8);
                doc.text(`Generated: ${new Date().toLocaleDateString()}`, margin, 280);
                doc.text('Page 1', 190, 280);
                
                // Save the PDF
                const pdfFilename = filename || `feedback_report_${new Date().getTime()}.pdf`;
                doc.save(pdfFilename);
                
                console.log('✅ PDF generated successfully:', pdfFilename);
                showSuccessMessage('PDF report generated successfully!');
                
            } catch (error) {
                console.error('❌ Error generating PDF:', error);
                showErrorMessage('Error generating PDF: ' + error.message);
            } finally {
                showLoading(false);
            }
        }

        // Populate performance overview for combined reports
        function populatePerformanceOverview(reportData) {
            const overview = document.getElementById('performanceOverview');
            const summary = reportData.summary || {};
            
            overview.innerHTML = `
                <div class="info-item">
                    <div class="info-label">Report Period</div>
                    <div class="info-value">${reportData.period || 'N/A'}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Quarters Included</div>
                    <div class="info-value">${reportData.quarters ? reportData.quarters.join(', ') : 'N/A'}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Overall Performance Score</div>
                    <div class="info-value ${getRatingClass(summary.overallPerformanceScore || 0)}">${summary.overallPerformanceScore || 0}/5.0</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Objectives Average</div>
                    <div class="info-value ${getRatingClass(summary.averageObjectiveRating || 0)}">${summary.averageObjectiveRating || 0}/5.0</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Hard Skills Average</div>
                    <div class="info-value ${getRatingClass(summary.averageHardSkillRating || 0)}">${summary.averageHardSkillRating || 0}/5.0</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Soft Skills Average</div>
                    <div class="info-value ${getRatingClass(summary.averageSoftSkillRating || 0)}">${summary.averageSoftSkillRating || 0}/5.0</div>
                </div>
            `;
        }

        function populateCombinedObjectivesTable(reportData) {
            const thead = document.getElementById('combinedObjectivesHead');
            const tbody = document.getElementById('combinedObjectivesBody');
            
            // Determine quarter headers based on report type
            let quarterHeaders = '';
            if (reportData.reportType === 'midyear') {
                quarterHeaders = '<th>Q1 Rating</th><th>Q2 Rating</th>';
            } else if (reportData.reportType === 'finalyear') {
                quarterHeaders = '<th>Q3 Rating</th><th>Q4 Rating</th>';
            } else if (reportData.reportType === 'comparison') {
                quarterHeaders = '<th>Mid-Year Rating</th><th>Final-Year Rating</th><th>Trend</th>';
            }
            
            // Set table headers
            thead.innerHTML = `
                <tr>
                    <th>Objective</th>
                    <th>KPI</th>
                    <th>Target</th>
                    <th>Weight</th>
                    <th>Combined Rating</th>
                    ${quarterHeaders}
                </tr>
            `;
            
            // Clear tbody
            tbody.innerHTML = '';
            
            const objectives = reportData.objectives || [];
            
            if (objectives.length === 0) {
                const colSpan = reportData.reportType === 'comparison' ? 8 : 7;
                tbody.innerHTML = `<tr><td colspan="${colSpan}" style="text-align: center;">No objectives data available</td></tr>`;
                return;
            }
            
            objectives.forEach(objective => {
                const row = document.createElement('tr');
                const combinedRating = parseFloat(objective.averageRating || 0);
                
                let quarterCells = '';
                if (reportData.reportType === 'midyear') {
                    const q1Rating = objective.q1Rating || 'N/A';
                    const q2Rating = objective.q2Rating || 'N/A';
                    quarterCells = `
                        <td class="rating-cell ${q1Rating !== 'N/A' ? getRatingClass(parseFloat(q1Rating)) : ''}">${q1Rating}</td>
                        <td class="rating-cell ${q2Rating !== 'N/A' ? getRatingClass(parseFloat(q2Rating)) : ''}">${q2Rating}</td>
                    `;
                } else if (reportData.reportType === 'finalyear') {
                    const q3Rating = objective.q3Rating || 'N/A';
                    const q4Rating = objective.q4Rating || 'N/A';
                    quarterCells = `
                        <td class="rating-cell ${q3Rating !== 'N/A' ? getRatingClass(parseFloat(q3Rating)) : ''}">${q3Rating}</td>
                        <td class="rating-cell ${q4Rating !== 'N/A' ? getRatingClass(parseFloat(q4Rating)) : ''}">${q4Rating}</td>
                    `;
                } else if (reportData.reportType === 'comparison') {
                    const midRating = objective.midYearRating || 'N/A';
                    const finalRating = objective.finalYearRating || 'N/A';
                    const trend = getTrendIndicator(midRating, finalRating);
                    quarterCells = `
                        <td class="rating-cell ${midRating !== 'N/A' ? getRatingClass(parseFloat(midRating)) : ''}">${midRating}</td>
                        <td class="rating-cell ${finalRating !== 'N/A' ? getRatingClass(parseFloat(finalRating)) : ''}">${finalRating}</td>
                        <td style="text-align: center;">${trend}</td>
                    `;
                }
                
                row.innerHTML = `
                    <td>${objective.objective || 'N/A'}</td>
                    <td>${objective.kpi || 'N/A'}</td>
                    <td>${objective.target || 'N/A'}</td>
                    <td>${objective.assignedWeight || 0}%</td>
                    <td class="rating-cell ${getRatingClass(combinedRating)}">${combinedRating.toFixed(2)}</td>
                    ${quarterCells}
                `;
                tbody.appendChild(row);
            });
        }

        // Add this helper function
        function getTrendIndicator(midValue, finalValue) {
            if (midValue === 'N/A' || finalValue === 'N/A') return '➖';
            
            const mid = parseFloat(midValue);
            const final = parseFloat(finalValue);
            const difference = final - mid;
            
            if (difference > 0.1) return '📈 +' + difference.toFixed(2);
            if (difference < -0.1) return '📉 ' + difference.toFixed(2);
            return '➡️ ' + difference.toFixed(2);
        }

        // Populate combined skills table
        function populateCombinedSkillsTable(reportData) {
            const thead = document.getElementById('combinedSkillsHead');
            const tbody = document.getElementById('combinedSkillsBody');
            
            // Determine quarter headers based on report type
            let quarterHeaders = '';
            if (reportData.reportType === 'midyear') {
                quarterHeaders = '<th>Q1 Rating</th><th>Q2 Rating</th>';
            } else if (reportData.reportType === 'finalyear') {
                quarterHeaders = '<th>Q3 Rating</th><th>Q4 Rating</th>';
            } else if (reportData.reportType === 'comparison') {
                quarterHeaders = '<th>Mid-Year Rating</th><th>Final-Year Rating</th><th>Trend</th>';
            }
            
            // Set table headers
            thead.innerHTML = `
                <tr>
                    <th>Skill Name</th>
                    <th>Skill Type</th>
                    <th>Combined Rating</th>
                    ${quarterHeaders}
                </tr>
            `;
            
            // Clear tbody
            tbody.innerHTML = '';
            
            const allSkills = [...(reportData.hardSkills || []), ...(reportData.softSkills || [])];
            
            if (allSkills.length === 0) {
                const colSpan = reportData.reportType === 'comparison' ? 6 : 5;
                tbody.innerHTML = `<tr><td colspan="${colSpan}" style="text-align: center;">No skills data available</td></tr>`;
                return;
            }
            
            allSkills.forEach(skill => {
                const row = document.createElement('tr');
                const combinedRating = parseFloat(skill.averageRating || 0);
                
                let quarterCells = '';
                if (reportData.reportType === 'midyear') {
                    const q1Rating = skill.q1Rating || 'N/A';
                    const q2Rating = skill.q2Rating || 'N/A';
                    quarterCells = `
                        <td class="rating-cell ${q1Rating !== 'N/A' ? getRatingClass(parseFloat(q1Rating)) : ''}">${q1Rating}</td>
                        <td class="rating-cell ${q2Rating !== 'N/A' ? getRatingClass(parseFloat(q2Rating)) : ''}">${q2Rating}</td>
                    `;
                } else if (reportData.reportType === 'finalyear') {
                    const q3Rating = skill.q3Rating || 'N/A';
                    const q4Rating = skill.q4Rating || 'N/A';
                    quarterCells = `
                        <td class="rating-cell ${q3Rating !== 'N/A' ? getRatingClass(parseFloat(q3Rating)) : ''}">${q3Rating}</td>
                        <td class="rating-cell ${q4Rating !== 'N/A' ? getRatingClass(parseFloat(q4Rating)) : ''}">${q4Rating}</td>
                    `;
                } else if (reportData.reportType === 'comparison') {
                    const midRating = skill.midYearRating || 'N/A';
                    const finalRating = skill.finalYearRating || 'N/A';
                    const trend = getTrendIndicator(midRating, finalRating);
                    quarterCells = `
                        <td class="rating-cell ${midRating !== 'N/A' ? getRatingClass(parseFloat(midRating)) : ''}">${midRating}</td>
                        <td class="rating-cell ${finalRating !== 'N/A' ? getRatingClass(parseFloat(finalRating)) : ''}">${finalRating}</td>
                        <td style="text-align: center;">${trend}</td>
                    `;
                }
                
                row.innerHTML = `
                    <td>${skill.skillName || 'N/A'}</td>
                    <td>${skill.skillType || 'N/A'}</td>
                    <td class="rating-cell ${getRatingClass(combinedRating)}">${combinedRating.toFixed(2)}</td>
                    ${quarterCells}
                `;
                tbody.appendChild(row);
            });
        }

        // Populate comparison overview (for comparison reports)
        function populateComparisonOverview(reportData) {
            const overview = document.getElementById('performanceOverview');
            
            overview.innerHTML = `
                <div class="info-item">
                    <div class="info-label">Comparison Period</div>
                    <div class="info-value">Mid-Year vs Final-Year ${reportData.year}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Mid-Year Score</div>
                    <div class="info-value ${getRatingClass(reportData.midYearSummary?.overallPerformanceScore || 0)}">${reportData.midYearSummary?.overallPerformanceScore || 0}/5.0</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Final-Year Score</div>
                    <div class="info-value ${getRatingClass(reportData.finalYearSummary?.overallPerformanceScore || 0)}">${reportData.finalYearSummary?.overallPerformanceScore || 0}/5.0</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Performance Trend</div>
                    <div class="info-value">${getPerformanceTrend(reportData.midYearSummary?.overallPerformanceScore, reportData.finalYearSummary?.overallPerformanceScore)}</div>
                </div>
            `;
        }

        // Helper function to get performance trend
        function getPerformanceTrend(midYear, finalYear) {
            if (!midYear || !finalYear) return 'Insufficient Data';
            
            const difference = finalYear - midYear;
            if (difference > 0.1) return '📈 Improving';
            if (difference < -0.1) return '📉 Declining';
            return '➡️ Stable';
        }

        // Placeholder functions for comparison report (we'll implement these later)
        function populateComparisonObjectivesTable(reportData) {
            // Temporary implementation
            populateCombinedObjectivesTable(reportData);
        }

        function populateComparisonSkillsTable(reportData) {
            // Temporary implementation
            populateCombinedSkillsTable(reportData);
        }

        // function populateDevelopmentPlansComparison(reportData) {
        //     const container = document.getElementById('developmentPlansComparison');
        //     container.innerHTML = '<p>Development plans comparison will be implemented soon.</p>';
        // }

        // Add missing PDF generation functions
        function generateCombinedPDFReport(reportData, filename, reportType) {
            console.log(`🔄 Generating ${reportType} PDF report...`);
            showSuccessMessage(`${reportType} PDF generation coming soon!`);
            showLoading(false);
        }


        function generateComparisonPDFReport(reportData, filename) {
            console.log('🔄 Generating Comparison PDF report...');
            
            try {
                showLoading(true);
                
                const { jsPDF } = window.jspdf;
                if (!jsPDF) {
                    throw new Error('jsPDF library not loaded');
                }
                
                const doc = new jsPDF();
                
                // Set up PDF constants
                let currentY = 20;
                const pageWidth = doc.internal.pageSize.getWidth();
                const pageHeight = doc.internal.pageSize.getHeight();
                const margin = 20;
                const contentWidth = pageWidth - (margin * 2);
                
                // ================================================================
                // HEADER FOR COMPARISON REPORT
                // ================================================================
                function addComparisonHeader() {
                    // Header background - Purple for comparison
                    doc.setFillColor(139, 92, 246);
                    doc.rect(0, 0, pageWidth, 50, 'F');
                    
                    // Title in white
                    doc.setTextColor(255, 255, 255);
                    doc.setFontSize(18);
                    doc.setFont('helvetica', 'bold');
                    doc.text('PERFORMANCE COMPARISON REPORT', pageWidth/2, 25, { align: 'center' });
                    
                    // Subtitle
                    doc.setFontSize(12);
                    doc.setFont('helvetica', 'normal');
                    doc.text(`Mid-Year vs Final-Year Analysis • ${reportData.year || new Date().getFullYear()}`, pageWidth/2, 37, { align: 'center' });
                    
                    // Generation info
                    doc.setFontSize(10);
                    doc.text(`Generated: ${new Date().toLocaleDateString()}`, pageWidth/2, 45, { align: 'center' });
                    
                    // Reset text color
                    doc.setTextColor(0, 0, 0);
                    return 60;
                }
                
                currentY = addComparisonHeader();
                
                // ================================================================
                // EMPLOYEE INFORMATION SECTION
                // ================================================================
                function addEmployeeInfo() {
                    const employee = reportData.employee || {};
                    
                    // Section background
                    doc.setFillColor(248, 250, 252);
                    doc.rect(margin, currentY - 5, contentWidth, 50, 'F');
                    doc.setDrawColor(139, 92, 246);
                    doc.setLineWidth(0.5);
                    doc.rect(margin, currentY - 5, contentWidth, 50);
                    
                    // Section title
                    doc.setFontSize(14);
                    doc.setFont('helvetica', 'bold');
                    doc.setTextColor(31, 41, 55);
                    doc.text('EMPLOYEE INFORMATION', margin + 5, currentY + 8);
                    
                    // Employee details
                    doc.setFontSize(11);
                    doc.setFont('helvetica', 'normal');
                    
                    const employeeDetails = [
                        ['Employee Name:', employee.fullName || 'N/A'],
                        ['Position:', employee.jobTitle || 'N/A'],
                        ['Department:', employee.department || 'N/A'],
                        ['Comparison Period:', `${reportData.year || new Date().getFullYear()} - Mid-Year vs Final-Year`],
                        ['Assessment Type:', 'Performance Comparison Analysis']
                    ];
                    
                    let detailY = currentY + 20;
                    const colWidth = contentWidth / 2;
                    
                    employeeDetails.forEach(([label, value], index) => {
                        const xPos = margin + 10 + (index % 2) * colWidth;
                        const yPos = detailY + Math.floor(index / 2) * 8;
                        
                        doc.setFont('helvetica', 'bold');
                        doc.setTextColor(100, 116, 139);
                        doc.text(label, xPos, yPos);
                        doc.setFont('helvetica', 'normal');
                        doc.setTextColor(31, 41, 55);
                        doc.text(value, xPos + 45, yPos);
                    });
                    
                    return currentY + 60;
                }
                
                currentY = addEmployeeInfo();
                
                // ================================================================
                // PERFORMANCE COMPARISON OVERVIEW
                // ================================================================
                function addComparisonOverview() {
                    const midYearSummary = reportData.midYearSummary || {};
                    const finalYearSummary = reportData.finalYearSummary || {};
                    
                    doc.setFontSize(14);
                    doc.setFont('helvetica', 'bold');
                    doc.setTextColor(31, 41, 55);
                    doc.text('PERFORMANCE COMPARISON OVERVIEW', margin, currentY);
                    currentY += 15;
                    
                    // Comparison metrics cards
                    const comparisonData = [
                        ['Mid-Year Score', `${midYearSummary.overallPerformanceScore || 0}/5.0`, '#10b981'],
                        ['Final-Year Score', `${finalYearSummary.overallPerformanceScore || 0}/5.0`, '#8b5cf6'],
                        ['Improvement', calculateImprovement(midYearSummary.overallPerformanceScore, finalYearSummary.overallPerformanceScore), '#3b82f6'],
                        ['Trend', getTrendText(midYearSummary.overallPerformanceScore, finalYearSummary.overallPerformanceScore), '#f59e0b']
                    ];
                    
                    const cardWidth = contentWidth / 4 - 5;
                    let cardX = margin;
                    
                    comparisonData.forEach(([title, value, color]) => {
                        const r = parseInt(color.slice(1, 3), 16);
                        const g = parseInt(color.slice(3, 5), 16);
                        const b = parseInt(color.slice(5, 7), 16);
                        
                        // Card background
                        doc.setFillColor(r, g, b, 0.1);
                        doc.rect(cardX, currentY - 5, cardWidth, 35, 'F');
                        doc.setDrawColor(r, g, b);
                        doc.setLineWidth(0.5);
                        doc.rect(cardX, currentY - 5, cardWidth, 35);
                        
                        // Card content
                        doc.setTextColor(r, g, b);
                        doc.setFontSize(12);
                        doc.setFont('helvetica', 'bold');
                        doc.text(String(value), cardX + cardWidth/2, currentY + 12, { align: 'center' });
                        
                        doc.setTextColor(100, 116, 139);
                        doc.setFontSize(9);
                        doc.setFont('helvetica', 'normal');
                        doc.text(title, cardX + cardWidth/2, currentY + 22, { align: 'center' });
                        
                        cardX += cardWidth + 5;
                    });
                    
                    return currentY + 45;
                }
                
                // Helper functions for comparison calculations
                function calculateImprovement(midYear, finalYear) {
                    if (!midYear || !finalYear) return 'N/A';
                    const diff = parseFloat(finalYear) - parseFloat(midYear);
                    return diff >= 0 ? `+${diff.toFixed(2)}` : diff.toFixed(2);
                }
                
                function getTrendText(midYear, finalYear) {
                    if (!midYear || !finalYear) return 'No Data';
                    const diff = parseFloat(finalYear) - parseFloat(midYear);
                    if (diff > 0.1) return '📈 Improving';
                    if (diff < -0.1) return '📉 Declining';
                    return '➡️ Stable';
                }
                
                currentY = addComparisonOverview();
                
                // ================================================================
                // OBJECTIVES COMPARISON TABLE
                // ================================================================
                function addObjectivesComparison() {
                    const objectives = reportData.objectives || [];
                    if (objectives.length === 0) return currentY;
                    
                    // Check if we need a new page
                    if (currentY > pageHeight - 100) {
                        doc.addPage();
                        currentY = 30;
                    }
                    
                    doc.setFontSize(14);
                    doc.setFont('helvetica', 'bold');
                    doc.setTextColor(31, 41, 55);
                    doc.text('OBJECTIVES PERFORMANCE COMPARISON', margin, currentY);
                    currentY += 15;
                    
                    // Prepare objectives comparison data
                    const objectivesData = objectives.map(obj => {
                        const midRating = obj.midYearRating || 'N/A';
                        const finalRating = obj.finalYearRating || 'N/A';
                        const trend = midRating !== 'N/A' && finalRating !== 'N/A' ? 
                            getTrendIndicator(midRating, finalRating) : 'N/A';
                        
                        return [
                            (obj.objective || '').substring(0, 25) + ((obj.objective || '').length > 25 ? '...' : ''),
                            (obj.kpi || '').substring(0, 15) + ((obj.kpi || '').length > 15 ? '...' : ''),
                            String(obj.target || 'N/A'),
                            String(obj.assignedWeight || 0) + '%',
                            String(midRating),
                            String(finalRating),
                            trend
                        ];
                    });
                    
                    if (doc.autoTable) {
                        doc.autoTable({
                            head: [['Objective', 'KPI', 'Target', 'Weight', 'Mid-Year', 'Final-Year', 'Trend']],
                            body: objectivesData,
                            startY: currentY,
                            styles: { 
                                fontSize: 8,
                                cellPadding: 3,
                                lineColor: [200, 200, 200],
                                lineWidth: 0.1
                            },
                            headStyles: { 
                                fillColor: [139, 92, 246],
                                textColor: [255, 255, 255],
                                fontStyle: 'bold',
                                fontSize: 8
                            },
                            columnStyles: {
                                0: { cellWidth: 25 }, // Objective
                                1: { cellWidth: 20 }, // KPI
                                2: { cellWidth: 15 }, // Target
                                3: { cellWidth: 15 }, // Weight
                                4: { cellWidth: 18, halign: 'center' }, // Mid-Year
                                5: { cellWidth: 18, halign: 'center' }, // Final-Year
                                6: { cellWidth: 20, halign: 'center' }  // Trend
                            },
                            didParseCell: function(data) {
                                // Color-code rating columns (4, 5)
                                if (data.column.index === 4 || data.column.index === 5) {
                                    const ratingText = data.cell.text[0];
                                    if (ratingText !== 'N/A') {
                                        const rating = parseFloat(ratingText);
                                        if (rating >= 4.5) {
                                            data.cell.styles.textColor = [22, 101, 52]; // Green
                                            data.cell.styles.fontStyle = 'bold';
                                        } else if (rating >= 3.5) {
                                            data.cell.styles.textColor = [59, 130, 246]; // Blue
                                        } else if (rating >= 2.5) {
                                            data.cell.styles.textColor = [217, 119, 6]; // Orange
                                        } else {
                                            data.cell.styles.textColor = [220, 38, 38]; // Red
                                        }
                                    }
                                }
                                
                                // Color-code trend column (6)
                                if (data.column.index === 6) {
                                    const trendText = data.cell.text[0];
                                    if (trendText.includes('📈')) {
                                        data.cell.styles.textColor = [22, 101, 52]; // Green
                                    } else if (trendText.includes('📉')) {
                                        data.cell.styles.textColor = [220, 38, 38]; // Red
                                    } else {
                                        data.cell.styles.textColor = [100, 116, 139]; // Gray
                                    }
                                }
                            }
                        });
                        
                        currentY = doc.lastAutoTable.finalY + 20;
                    }
                    
                    return currentY;
                }
                
                // Helper function for trend indicators
                function getTrendIndicator(midValue, finalValue) {
                    const mid = parseFloat(midValue);
                    const final = parseFloat(finalValue);
                    const difference = final - mid;
                    
                    if (difference > 0.1) return '📈 +' + difference.toFixed(1);
                    if (difference < -0.1) return '📉 ' + difference.toFixed(1);
                    return '➡️ ' + difference.toFixed(1);
                }
                
                currentY = addObjectivesComparison();
                
                // ================================================================
                // SKILLS COMPARISON TABLE
                // ================================================================
                function addSkillsComparison() {
                    const hardSkills = reportData.hardSkills || [];
                    const softSkills = reportData.softSkills || [];
                    const allSkills = [...hardSkills, ...softSkills];
                    
                    if (allSkills.length === 0) return currentY;
                    
                    // Check if we need a new page
                    if (currentY > pageHeight - 100) {
                        doc.addPage();
                        currentY = 30;
                    }
                    
                    doc.setFontSize(14);
                    doc.setFont('helvetica', 'bold');
                    doc.setTextColor(31, 41, 55);
                    doc.text('SKILLS PERFORMANCE COMPARISON', margin, currentY);
                    currentY += 15;
                    
                    // Prepare skills comparison data
                    const skillsData = allSkills.map(skill => {
                        const midRating = skill.midYearRating || 'N/A';
                        const finalRating = skill.finalYearRating || 'N/A';
                        const trend = midRating !== 'N/A' && finalRating !== 'N/A' ? 
                            getTrendIndicator(midRating, finalRating) : 'N/A';
                        
                        return [
                            skill.skillName || 'N/A',
                            skill.skillType || (hardSkills.includes(skill) ? 'Hard Skill' : 'Soft Skill'),
                            String(midRating),
                            String(finalRating),
                            trend
                        ];
                    });
                    
                    if (doc.autoTable) {
                        doc.autoTable({
                            head: [['Skill Name', 'Type', 'Mid-Year Rating', 'Final-Year Rating', 'Trend']],
                            body: skillsData,
                            startY: currentY,
                            styles: { 
                                fontSize: 9,
                                cellPadding: 4,
                                lineColor: [200, 200, 200],
                                lineWidth: 0.1
                            },
                            headStyles: { 
                                fillColor: [245, 158, 11],
                                textColor: [255, 255, 255],
                                fontStyle: 'bold',
                                fontSize: 9
                            },
                            columnStyles: {
                                0: { cellWidth: 45 }, // Skill name
                                1: { cellWidth: 25 }, // Type
                                2: { cellWidth: 30, halign: 'center' }, // Mid-Year Rating
                                3: { cellWidth: 30, halign: 'center' }, // Final-Year Rating
                                4: { cellWidth: 25, halign: 'center' }  // Trend
                            },
                            didParseCell: function(data) {
                                // Color-code rating columns (2, 3)
                                if (data.column.index === 2 || data.column.index === 3) {
                                    const ratingText = data.cell.text[0];
                                    if (ratingText !== 'N/A') {
                                        const rating = parseFloat(ratingText);
                                        if (rating >= 4.5) {
                                            data.cell.styles.textColor = [22, 101, 52]; // Green
                                            data.cell.styles.fontStyle = 'bold';
                                        } else if (rating >= 3.5) {
                                            data.cell.styles.textColor = [59, 130, 246]; // Blue
                                        } else if (rating >= 2.5) {
                                            data.cell.styles.textColor = [217, 119, 6]; // Orange
                                        } else {
                                            data.cell.styles.textColor = [220, 38, 38]; // Red
                                        }
                                    }
                                }
                                
                                // Color-code skill types (1)
                                if (data.column.index === 1) {
                                    if (data.cell.text[0] === 'Hard Skill') {
                                        data.cell.styles.textColor = [16, 185, 129]; // Green
                                    } else if (data.cell.text[0] === 'Soft Skill') {
                                        data.cell.styles.textColor = [245, 158, 11]; // Orange
                                    }
                                }
                                
                                // Color-code trend column (4)
                                if (data.column.index === 4) {
                                    const trendText = data.cell.text[0];
                                    if (trendText.includes('📈')) {
                                        data.cell.styles.textColor = [22, 101, 52]; // Green
                                    } else if (trendText.includes('📉')) {
                                        data.cell.styles.textColor = [220, 38, 38]; // Red
                                    } else {
                                        data.cell.styles.textColor = [100, 116, 139]; // Gray
                                    }
                                }
                            }
                        });
                        
                        currentY = doc.lastAutoTable.finalY + 20;
                    }
                    
                    return currentY;
                }
                
                currentY = addSkillsComparison();
                
                // ================================================================
                // PERFORMANCE ANALYSIS & INSIGHTS
                // ================================================================
                function addPerformanceAnalysis() {
                    // Check if we need a new page
                    if (currentY > pageHeight - 120) {
                        doc.addPage();
                        currentY = 30;
                    }
                    
                    doc.setFontSize(14);
                    doc.setFont('helvetica', 'bold');
                    doc.setTextColor(31, 41, 55);
                    doc.text('PERFORMANCE ANALYSIS & INSIGHTS', margin, currentY);
                    currentY += 15;
                    
                    // Analysis background
                    doc.setFillColor(248, 250, 252);
                    doc.rect(margin, currentY - 5, contentWidth, 90, 'F');
                    doc.setDrawColor(139, 92, 246);
                    doc.setLineWidth(0.5);
                    doc.rect(margin, currentY - 5, contentWidth, 90);
                    
                    doc.setFontSize(12);
                    doc.setFont('helvetica', 'bold');
                    doc.setTextColor(139, 92, 246);
                    doc.text('Year-End Performance Comparison', margin + 5, currentY + 10);
                    
                    doc.setFontSize(10);
                    doc.setFont('helvetica', 'normal');
                    doc.setTextColor(31, 41, 55);
                    
                    // Generate insights based on comparison data
                    const midYearSummary = reportData.midYearSummary || {};
                    const finalYearSummary = reportData.finalYearSummary || {};
                    const midScore = parseFloat(midYearSummary.overallPerformanceScore || 0);
                    const finalScore = parseFloat(finalYearSummary.overallPerformanceScore || 0);
                    const improvement = finalScore - midScore;
                    
                    const insights = [
                        `• Mid-Year Performance Score: ${midScore.toFixed(1)}/5.0`,
                        `• Final-Year Performance Score: ${finalScore.toFixed(1)}/5.0`,
                        `• Overall Year Improvement: ${improvement >= 0 ? '+' : ''}${improvement.toFixed(2)} points`,
                        improvement > 0.2 ? '• Strong performance improvement throughout the year' :
                        improvement < -0.2 ? '• Performance declined in second half - attention needed' :
                        '• Performance remained consistent throughout the year',
                        '• Comparison shows areas of strength and development opportunities',
                        '• Year-end review completed with comprehensive assessment'
                    ];
                    
                    let insightY = currentY + 25;
                    insights.forEach(insight => {
                        doc.text(insight, margin + 10, insightY);
                        insightY += 8;
                    });
                    
                    // Add performance metrics summary
                    doc.setFontSize(11);
                    doc.setFont('helvetica', 'bold');
                    doc.setTextColor(139, 92, 246);
                    doc.text('Key Performance Indicators:', margin + 10, insightY + 5);
                    
                    doc.setFontSize(10);
                    doc.setFont('helvetica', 'normal');
                    doc.setTextColor(31, 41, 55);
                    insightY += 15;
                    
                    const kpis = [
                        `Mid-Year Objectives Average: ${midYearSummary.averageObjectiveRating || 0}/5.0`,
                        `Final-Year Objectives Average: ${finalYearSummary.averageObjectiveRating || 0}/5.0`,
                        `Mid-Year Skills Average: ${((parseFloat(midYearSummary.averageHardSkillRating || 0) + parseFloat(midYearSummary.averageSoftSkillRating || 0)) / 2).toFixed(1)}/5.0`,
                        `Final-Year Skills Average: ${((parseFloat(finalYearSummary.averageHardSkillRating || 0) + parseFloat(finalYearSummary.averageSoftSkillRating || 0)) / 2).toFixed(1)}/5.0`
                    ];
                    
                    kpis.forEach(kpi => {
                        doc.text(`• ${kpi}`, margin + 15, insightY);
                        insightY += 6;
                    });
                    
                    return currentY + 100;
                }
                
                currentY = addPerformanceAnalysis();
                
                // ================================================================
                // RECOMMENDATIONS SECTION
                // ================================================================
                function addComparisonRecommendations() {
                    // Check if we need a new page
                    if (currentY > pageHeight - 100) {
                        doc.addPage();
                        currentY = 30;
                    }
                    
                    doc.setFontSize(14);
                    doc.setFont('helvetica', 'bold');
                    doc.setTextColor(31, 41, 55);
                    doc.text('COMPARISON RECOMMENDATIONS', margin, currentY);
                    currentY += 15;
                    
                    // Recommendations background
                    doc.setFillColor(254, 243, 199);
                    doc.rect(margin, currentY - 5, contentWidth, 70, 'F');
                    doc.setDrawColor(245, 158, 11);
                    doc.setLineWidth(0.5);
                    doc.rect(margin, currentY - 5, contentWidth, 70);
                    
                    doc.setFontSize(11);
                    doc.setFont('helvetica', 'bold');
                    doc.setTextColor(146, 64, 14);
                    doc.text('Next Year Development Recommendations:', margin + 5, currentY + 10);
                    
                    doc.setFontSize(10);
                    doc.setFont('helvetica', 'normal');
                    doc.setTextColor(31, 41, 55);
                    
                    // Generate recommendations based on comparison results
                    const midYearSummary = reportData.midYearSummary || {};
                    const finalYearSummary = reportData.finalYearSummary || {};
                    const midScore = parseFloat(midYearSummary.overallPerformanceScore || 0);
                    const finalScore = parseFloat(finalYearSummary.overallPerformanceScore || 0);
                    const improvement = finalScore - midScore;
                    
                    let recommendations;
                    if (improvement > 0.3) {
                        recommendations = [
                            '• Excellent year-over-year improvement demonstrated',
                            '• Continue current development trajectory into next year',
                            '• Consider leadership or mentoring opportunities',
                            '• Explore stretch assignments to further challenge capabilities',
                            '• Share successful improvement strategies with team members'
                        ];
                    } else if (improvement > 0) {
                        recommendations = [
                            '• Positive performance improvement shown throughout year',
                            '• Build on successful development areas in next year',
                            '• Address any remaining skill gaps identified',
                            '• Set ambitious but achievable goals for continued growth',
                            '• Regular performance check-ins recommended'
                        ];
                    } else if (improvement < -0.2) {
                        recommendations = [
                            '• Performance decline requires immediate attention',
                            '• Comprehensive performance improvement plan needed',
                            '• Additional support and resources to be provided',
                            '• Monthly performance reviews recommended for next year',
                            '• Focus on fundamental skill rebuilding'
                        ];
                    } else {
                        recommendations = [
                            '• Consistent performance maintained throughout year',
                            '• Identify opportunities for growth and challenge',
                            '• Set clear development objectives for next year',
                            '• Consider cross-functional or project-based assignments',
                            '• Regular goal setting and review sessions'
                        ];
                    }
                    
                    let recY = currentY + 25;
                    recommendations.forEach(rec => {
                        doc.text(rec, margin + 10, recY);
                        recY += 7;
                    });
                    
                    return currentY + 80;
                }
                
                currentY = addComparisonRecommendations();
                
                // ================================================================
                // FOOTER ON ALL PAGES
                // ================================================================
                function addFooter() {
                    const pageCount = doc.internal.getNumberOfPages();
                    for (let i = 1; i <= pageCount; i++) {
                        doc.setPage(i);
                        doc.setFontSize(8);
                        doc.setFont('helvetica', 'normal');
                        doc.setTextColor(100, 116, 139);
                        
                        // Page number
                        doc.text(`Page ${i} of ${pageCount}`, pageWidth - 30, pageHeight - 10);
                        
                        // Document info
                        doc.text('Performance Comparison Report - Confidential', margin, pageHeight - 10);
                        
                        // Generation timestamp
                        doc.text(`Generated: ${new Date().toLocaleString()}`, pageWidth / 2 - 30, pageHeight - 10);
                    }
                }
                
                addFooter();
                
                // ================================================================
                // SAVE THE PDF
                // ================================================================
                const pdfFilename = filename || `comparison_report_${new Date().getTime()}.pdf`;
                doc.save(pdfFilename);
                
                console.log('✅ Comparison PDF generated successfully:', pdfFilename);
                showSuccessMessage('Performance Comparison Report PDF generated successfully!');
                
            } catch (error) {
                console.error('❌ Error generating Comparison PDF:', error);
                showErrorMessage('Error generating Comparison PDF: ' + error.message);
            } finally {
                showLoading(false);
            }
        }

        // Display combined report preview
        function displayCombinedReportPreview(reportData, reportType) {
            console.log('🔄 Displaying combined report preview...');
            
            // Update title
            const titles = {
                'midyear': 'Mid-Year Performance Report (Q1 + Q2)',
                'finalyear': 'Final-Year Performance Report (Q3 + Q4)'
            };
            document.getElementById('combinedReportTitle').textContent = titles[reportType];
            
            // Populate employee info
            populateCombinedEmployeeInfo(reportData);
            
            // Populate performance overview
            populatePerformanceOverview(reportData);
            
            // Populate combined tables
            populateCombinedObjectivesTable(reportData);
            populateCombinedSkillsTable(reportData);
            
            // Show the preview
            document.getElementById('combinedReportPreview').classList.add('show');
            document.getElementById('reportPreview').classList.remove('show');
            
            setTimeout(() => {
                document.getElementById('combinedReportPreview').scrollIntoView({ behavior: 'smooth' });
            }, 100);
        }

        // Display comparison report preview
        function displayComparisonReportPreview(reportData) {
            document.getElementById('combinedReportTitle').textContent = 'Performance Comparison Report (Mid-Year vs Final-Year)';
            
            populateCombinedEmployeeInfo(reportData);
            populateComparisonOverview(reportData);
            populateComparisonObjectivesTable(reportData);
            populateComparisonSkillsTable(reportData);
            
            // // Show development plans section for comparison
            // document.getElementById('developmentPlansSection').style.display = 'block';
            // populateDevelopmentPlansComparison(reportData);
            
            document.getElementById('combinedReportPreview').classList.add('show');
            document.getElementById('reportPreview').classList.remove('show');
            
            setTimeout(() => {
                document.getElementById('combinedReportPreview').scrollIntoView({ behavior: 'smooth' });
            }, 100);
        }

        // Populate combined employee info
        function populateCombinedEmployeeInfo(reportData) {
            const employee = reportData.employee || {};
            const year = reportData.year || new Date().getFullYear();
            
            document.getElementById('combinedEmployeeInfo').innerHTML = `
                <div class="info-item">
                    <div class="info-label">Employee Name</div>
                    <div class="info-value">${employee.fullName || 'N/A'}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Position</div>
                    <div class="info-value">${employee.jobTitle || 'N/A'}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Department</div>
                    <div class="info-value">${employee.department || 'N/A'}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Report Year</div>
                    <div class="info-value">${year}</div>
                </div>
            `;
        }

        // Utility functions
        function getRatingClass(rating) {
            if (rating >= 4.5) return 'rating-excellent';
            if (rating >= 3.5) return 'rating-good';
            if (rating >= 2.5) return 'rating-average';
            return 'rating-poor';
        }

        function showLoading(show, message = 'Loading report data...') {
            const loading = document.getElementById('loadingIndicator');
            const loadingText = loading.querySelector('p');
            
            if (show) {
                loadingText.textContent = message;
                loading.classList.add('show');
            } else {
                loadingText.textContent = 'Loading report data...';
                loading.classList.remove('show');
            }
        }

        function showErrorMessage(message) {
            const errorDiv = document.getElementById('errorMessage');
            errorDiv.textContent = message;
            errorDiv.classList.add('show');
            
            setTimeout(() => {
                errorDiv.classList.remove('show');
            }, 5000);
        }

        function showSuccessMessage(message) {
            const successDiv = document.getElementById('successMessage');
            successDiv.textContent = message;
            successDiv.classList.add('show');
            
            setTimeout(() => {
                successDiv.classList.remove('show');
            }, 3000);
        }

        function hideMessages() {
            document.getElementById('errorMessage').classList.remove('show');
            document.getElementById('successMessage').classList.remove('show');
        }

        function hideReportPreview() {
            document.getElementById('reportPreview').classList.remove('show');
            document.getElementById('combinedReportPreview').classList.remove('show');
        }

        // Initialize page when DOM loads
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🔄 Page loaded - Employee Records and Feedback Reports');
        });
    </script>

    <!-- Original Sidebar Toggle Scripts -->
    <script>
        // Toggle active class for sidebar links
        document.querySelectorAll('.sidebar ul li a').forEach(link => {
            link.addEventListener('click', function() {
                document.querySelectorAll('.sidebar ul li a').forEach(link => link.classList.remove('active'));
                this.classList.add('active');
            });
        });

        // Toggle collapsible content
        document.querySelectorAll('.collapsible-header').forEach(header => {
            header.addEventListener('click', function() {
                var content = this.nextElementSibling;
                if (content.style.display === 'block') {
                    content.style.display = 'none';
                } else {
                    document.querySelectorAll('.collapsible-content').forEach(item => {
                        if (item !== content) {
                            item.style.display = 'none';
                        }
                    });
                    content.style.display = 'block';
                }
            });
        });
    </script>
</body>
</html>