<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Training Request Review</title>
    <link rel="stylesheet" href="/css/sidebar.css"> 
    <link rel="stylesheet" href="/css/linemanager.css"> 
    <style>
        .main-content { margin-left: 290px; }
        .account-info-header { margin-top: 40px; font-size: 1.5rem; font-weight: bold; color: #059ca4; }
        .form-group { margin-bottom: 20px; }
        .form-group label { display: block; margin-bottom: 5px; color: #555; font-weight: 600; }
        .form-group input, .form-group textarea { width: 100%; padding: 10px; border: 1px solid #ccc; border-radius: 4px; font-size: 1rem; }
        .form-group textarea { resize: none; height: 150px; }
        .form-group input:focus, .form-group textarea:focus { border-color: #059ca4; outline: none; }
        .form-group input[readonly] { background-color: #f8f9fa; color: #6c757d; }
        .form-group textarea[readonly] { background-color: #f8f9fa; color: #6c757d; }
        .training-btn { background-color: #124A5C; color: white; border: none; padding: 10px 20px; border-radius: 5px; font-size: 1rem; cursor: pointer; transition: background-color 0.3s ease; margin-right: 10px; }
        .training-btn:hover { background-color: #059ca4; }
        .training-btn.approve { background-color: #28a745; }
        .training-btn.approve:hover { background-color: #218838; }
        .training-btn.reject { background-color: #dc3545; }
        .training-btn.reject:hover { background-color: #c82333; }
        .training-btn:disabled { opacity: 0.6; cursor: not-allowed; }
        .button-group { margin-top: 30px; }
        .info-section { background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
        .info-section h3 { color: #059ca4; margin-bottom: 15px; }
        .two-column { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; }
        .status-badge { 
            display: inline-block; 
            padding: 5px 10px; 
            border-radius: 15px; 
            font-size: 0.8rem; 
            font-weight: bold;
            background-color: #ffc107;
            color: #000;
        }
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }
        .loading-spinner {
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
        }
        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #059ca4;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 0 auto 10px;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .error-message {
            background-color: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
            border: 1px solid #f5c6cb;
        }
        .success-message {
            background-color: #d4edda;
            color: #155724;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
            border: 1px solid #c3e6cb;
        }
    </style>
</head>
<body>
    <%- include('../../partials/linemanager_partials') %>

    <!-- Loading Overlay -->
    <div class="loading-overlay" id="loadingOverlay">
        <div class="loading-spinner">
            <div class="spinner"></div>
            <p>Loading training request...</p>
        </div>
    </div>

    <div class="main-content">
        <h1 class="account-info-header">Training Request Review</h1>

        <!-- Error/Success Messages -->
        <div id="messageContainer"></div>

        <!-- Training Request Content -->
        <div id="trainingRequestContent" style="display: none;">
            <div class="info-section">
                <h3>Request Information</h3>
                <div class="two-column">
                    <div>
                        <strong>Request ID:</strong> <span id="requestId"></span><br>
                        <strong>Status:</strong> <span class="status-badge">Pending Approval</span><br>
                        <strong>Date Requested:</strong> <span id="dateRequested"></span>
                    </div>
                    <div>
                        <strong>Requested By:</strong> <span id="requestedBy"></span><br>
                        <strong>Email:</strong> <span id="requestedByEmail"></span><br>
                        <strong>Department:</strong> <span id="department"></span><br>
                        <strong>Position:</strong> <span id="position"></span>
                    </div>
                </div>
            </div>

            <form id="trainingRequestForm">
                <input type="hidden" id="trainingRecordId">
                <input type="hidden" id="userId">
                
                <div class="form-group">
                    <label for="trainingCourseName">Training Course Name:</label>
                    <input type="text" id="trainingCourseName" name="trainingCourseName" readonly>
                </div>
                
                <div class="form-group">
                    <label for="trainingDescription">Training Description:</label>
                    <textarea id="trainingDescription" name="trainingDescription" readonly></textarea>
                </div>
                
                <div class="two-column">
                    <div class="form-group">
                        <label for="startDate">Start Date:</label>
                        <input type="date" id="startDate" name="startDate" readonly>
                    </div>
                    
                    <div class="form-group">
                        <label for="endDate">End Date:</label>
                        <input type="date" id="endDate" name="endDate" readonly>
                    </div>
                </div>

                <div class="two-column">
                    <div class="form-group">
                        <label for="duration">Total Duration (hours):</label>
                        <input type="number" id="duration" name="duration" readonly>
                    </div>
                    
                    <div class="form-group">
                        <label for="cost">Cost:</label>
                        <input type="number" id="cost" name="cost" step="0.01" readonly>
                    </div>
                </div>

                <div class="form-group">
                    <label for="trainingMode">Training Mode:</label>
                    <input type="text" id="trainingMode" name="trainingMode" readonly>
                </div>

                <div class="form-group" id="venueGroup" style="display: none;">
                    <label for="venue">Venue:</label>
                    <input type="text" id="venue" name="venue" readonly>
                </div>

                <div class="form-group">
                    <label for="remarks">Decision Remarks:</label>
                    <textarea id="remarks" name="remarks" placeholder="Enter your remarks for approval/rejection (required)" required></textarea>
                </div>

                <div class="button-group">
                    <button type="button" class="training-btn approve" id="approveRequest" disabled>
                        <i class="fas fa-check"></i> Approve Training Request
                    </button>
                    <button type="button" class="training-btn reject" id="rejectRequest" disabled>
                        <i class="fas fa-times"></i> Reject Training Request
                    </button>
                    <button type="button" class="training-btn" onclick="window.location.href='/linemanager/dashboard'">
                        <i class="fas fa-arrow-left"></i> Back to Dashboard
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Get URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        const userId = new URLSearchParams(window.location.pathname.split('/').pop()).get('userId') || window.location.pathname.split('/').pop();
        const recordId = urlParams.get('recordId');

        // Global variables
        let trainingRequestData = null;
        const loadingOverlay = document.getElementById('loadingOverlay');
        const messageContainer = document.getElementById('messageContainer');
        const trainingRequestContent = document.getElementById('trainingRequestContent');
        const remarksField = document.getElementById('remarks');
        const approveBtn = document.getElementById('approveRequest');
        const rejectBtn = document.getElementById('rejectRequest');

        // Utility functions
        function showLoading() {
            loadingOverlay.style.display = 'flex';
        }

        function hideLoading() {
            loadingOverlay.style.display = 'none';
        }

        function showMessage(message, type = 'error') {
            const messageClass = type === 'success' ? 'success-message' : 'error-message';
            messageContainer.innerHTML = `<div class="${messageClass}">${message}</div>`;
            messageContainer.scrollIntoView({ behavior: 'smooth' });
        }

        function clearMessages() {
            messageContainer.innerHTML = '';
        }

        function formatDate(dateString) {
            if (!dateString) return 'N/A';
            return new Date(dateString).toLocaleDateString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        }

        function formatDateForInput(dateString) {
            if (!dateString) return '';
            return new Date(dateString).toISOString().split('T')[0];
        }

        // Load training request data
        async function loadTrainingRequest() {
            if (!userId || !recordId) {
                showMessage('Invalid request parameters. Missing user ID or record ID.');
                return;
            }

            showLoading();
            clearMessages();

            try {
                const response = await fetch(`/linemanager/api/training-request/${userId}/details?recordId=${recordId}`, {
                    headers: {
                        'Accept': 'application/json'
                    }
                });

                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({}));
                    throw new Error(errorData.message || `Server error: ${response.status}`);
                }

                const responseData = await response.json();
                
                if (responseData.success && responseData.data) {
                    trainingRequestData = responseData.data;
                    populateForm(trainingRequestData);
                    trainingRequestContent.style.display = 'block';
                } else {
                    throw new Error(responseData.message || 'Failed to load training request data');
                }

            } catch (error) {
                console.error('Error loading training request:', error);
                showMessage(`Failed to load training request: ${error.message}`);
            } finally {
                hideLoading();
            }
        }

        // Populate form with data
        function populateForm(data) {
            try {
                // Basic request info
                document.getElementById('requestId').textContent = data.trainingRecordId || 'N/A';
                document.getElementById('dateRequested').textContent = formatDate(data.dateRequested);
                
                // User info
                const userInfo = data.useraccounts || {};
                document.getElementById('requestedBy').textContent = `${userInfo.firstName || ''} ${userInfo.lastName || ''}`.trim() || 'N/A';
                document.getElementById('requestedByEmail').textContent = userInfo.userEmail || 'N/A';
                
                // Staff info
                const staffInfo = userInfo.staffaccounts || {};
                document.getElementById('department').textContent = staffInfo.department || 'N/A';
                document.getElementById('position').textContent = staffInfo.position || 'N/A';
                
                // Training info
                const trainingInfo = data.trainings || {};
                document.getElementById('trainingCourseName').value = trainingInfo.trainingName || '';
                document.getElementById('trainingDescription').value = trainingInfo.trainingDesc || 'No description provided';
                document.getElementById('duration').value = trainingInfo.totalDuration || 0;
                document.getElementById('cost').value = trainingInfo.cost || 0;
                
                // Dates
                document.getElementById('startDate').value = formatDateForInput(data.setStartDate);
                document.getElementById('endDate').value = formatDateForInput(data.setEndDate);
                
                // Training mode and venue
                const isOnline = trainingInfo.isOnlineArrangement;
                document.getElementById('trainingMode').value = isOnline ? 'Online' : 'In-Person';
                
                if (!isOnline) {
                    const venue = `${trainingInfo.address || 'TBD'}, ${trainingInfo.country || ''}`.trim();
                    document.getElementById('venue').value = venue.endsWith(',') ? venue.slice(0, -1) : venue;
                    document.getElementById('venueGroup').style.display = 'block';
                }
                
                // Hidden fields
                document.getElementById('trainingRecordId').value = data.trainingRecordId || '';
                document.getElementById('userId').value = data.userId || '';
                
            } catch (error) {
                console.error('Error populating form:', error);
                showMessage('Error displaying training request data');
            }
        }

        // Handle approval
        async function approveRequest() {
            const remarks = remarksField.value.trim();
            if (!remarks) {
                showMessage('Please provide remarks for your decision.');
                remarksField.focus();
                return;
            }
            
            if (!confirm('Are you sure you want to approve this training request?')) {
                return;
            }
            
            const requestData = {
                action: 'approve',
                status: 'approved',
                remarks: remarks,
                trainingRecordId: document.getElementById('trainingRecordId').value,
                userId: document.getElementById('userId').value
            };

            await submitDecision('/linemanager/training/approve', requestData, 'Approving');
        }

        // Handle rejection
        async function rejectRequest() {
            const remarks = remarksField.value.trim();
            if (!remarks) {
                showMessage('Please provide remarks for your decision.');
                remarksField.focus();
                return;
            }
            
            if (!confirm('Are you sure you want to reject this training request?')) {
                return;
            }
            
            const requestData = {
                action: 'reject',
                status: 'rejected',
                remarks: remarks,
                trainingRecordId: document.getElementById('trainingRecordId').value,
                userId: document.getElementById('userId').value
            };

            await submitDecision('/linemanager/training/reject', requestData, 'Rejecting');
        }

        // Submit decision (approve/reject)
        async function submitDecision(url, requestData, actionText) {
            console.log(`${actionText} training request:`, requestData);
            clearMessages();

            // Disable buttons and show loading state
            approveBtn.disabled = true;
            rejectBtn.disabled = true;
            
            const originalApproveText = approveBtn.innerHTML;
            const originalRejectText = rejectBtn.innerHTML;
            
            if (url.includes('approve')) {
                approveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
            } else {
                rejectBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
            }

            try {
                const response = await fetch(url, {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(requestData)
                });

                const responseData = await response.json();

                if (!response.ok) {
                    throw new Error(responseData.message || `Server error: ${response.status}`);
                }

                if (responseData.success) {
                    showMessage(responseData.message || `Training request ${requestData.status} successfully!`, 'success');
                    
                    // Redirect after a short delay
                    setTimeout(() => {
                        window.location.href = '/linemanager/dashboard';
                    }, 2000);
                } else {
                    throw new Error(responseData.message || `${actionText} failed`);
                }

            } catch (error) {
                console.error('Error:', error);
                showMessage(error.message || `Something went wrong while ${actionText.toLowerCase()} the request.`);
                
                // Re-enable buttons
                approveBtn.disabled = false;
                rejectBtn.disabled = false;
                approveBtn.innerHTML = originalApproveText;
                rejectBtn.innerHTML = originalRejectText;
                
                // Re-validate remarks
                validateRemarks();
            }
        }

        // Validate remarks and update button states
        function validateRemarks() {
            const remarks = remarksField.value.trim();
            const hasRemarks = remarks.length > 0;
            
            approveBtn.disabled = !hasRemarks;
            rejectBtn.disabled = !hasRemarks;
            
            approveBtn.style.opacity = hasRemarks ? '1' : '0.6';
            rejectBtn.style.opacity = hasRemarks ? '1' : '0.6';
        }

        // Event listeners
        approveBtn.addEventListener('click', approveRequest);
        rejectBtn.addEventListener('click', rejectRequest);
        remarksField.addEventListener('input', validateRemarks);

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Loading training request for user:', userId, 'record:', recordId);
            loadTrainingRequest();
            validateRemarks(); // Initial validation
        });
    </script>
</body>
</html>