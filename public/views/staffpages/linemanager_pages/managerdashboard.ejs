<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Line Manager Home</title>
    <link rel="stylesheet" href="/css/sidebar.css"> <!-- Linking Sidebar CSS -->
    <link rel="stylesheet" href="/css/hr_pages.css"> <!-- Linking Main Content CSS -->
    <link rel="stylesheet" href="/css/linemanager.css"> <!-- Linking Main Content CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
   <style>
        /* Adding styles for the dashboard */
        h2 {
            color: #2385B0; /* Color for the dashboard title */
            margin-left: 40px; /* Increased space from the left */
        }
        h3 {
            margin-left: 40px; /* Increased space from the left for the sub-header */
        }
        .content {
            margin-left: 220px; /* Adjust based on your sidebar width to prevent overlap */
            padding: 20px; /* Adding some padding for better spacing */
            background-color: white; /* Set background color to white for the entire content area */
        }
        table {
            width: 80%; /* Full width for the table */
            border-collapse: collapse; /* Collapse borders */
            margin: 10px auto 30px; /* Center table and add space above and below */
        }
        th, td {
            border: 1px solid #ddd; /* Border for table cells */
            padding: 10px; /* Padding for table cells */
            text-align: left; /* Left-align text */
        }
        th {
            background-color: #f2f2f2; /* Light gray background for headers */
        }
        tr:hover {
            background-color: #f1f1f1; /* Hover effect for table rows */
        }
        .manage-leaves-button {
            padding: 10px 15px;
            background-color: #2385B0; /* Your preferred color */
            color: white;
            text-decoration: none;
            border-radius: 5px;
            transition: background-color 0.3s;
        }
        .manage-leaves-button:hover {
            background-color: #1a5f78; /* Darker shade for hover effect */
        }
        .action-required-btn {
            background-color: #2385B0;
            color: white;
            border-radius: 5px;
            text-decoration: none;
            transition: background-color 0.3s;
            padding: 5px 10px;
            cursor: pointer;
            border: none;
        }
        .action-required-btn:hover {
            background-color: #1a5f78;
        }
        
        /* Enhanced Dashboard Styles */
        .kpi-cards {
            display: grid;
            grid-template-columns: repeat(1, 1fr);
            gap: 20px;
            margin: 20px auto;
            width: 90%;
            max-width: 1400px;
        }
        
        @media (min-width: 768px) {
            .kpi-cards {
                grid-template-columns: repeat(2, 1fr);
            }
        }
        
        @media (min-width: 1024px) {
            .kpi-cards {
                grid-template-columns: repeat(4, 1fr);
            }
        }
        
        .kpi-card {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            padding: 15px;
            position: relative;
            overflow: hidden;
        }
        
        .kpi-card-icon {
            position: absolute;
            top: 12px;
            right: 12px;
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .kpi-card-title {
            font-size: 14px;
            color: #666;
            margin-bottom: 8px;
        }
        
        .kpi-card-value {
            font-size: 24px;
            font-weight: bold;
            color: #333;
        }
        
        .chart-container {
            display: flex;
            flex-direction: column;
            gap: 20px;
            margin: 20px auto;
            padding: 15px;
            background-color: #f9f9f9; 
            border: 1px solid #ddd; 
            border-radius: 8px;
            width: 90%;
            max-width: 1400px; 
            box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1); 
        }
        
        @media (min-width: 1024px) {
            .chart-container {
                flex-direction: row;
            }
        }
        
        .chart-box {
            flex: 1; 
            margin: 8px;
            text-align: center; 
            background-color: #fff; 
            padding: 12px;
            border-radius: 8px;
            border: 1px solid #ddd;
            box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.1); 
        }
        
        .chart-box canvas {
            max-width: 100%;
            height: 200px; /* Reduced chart height */
        }

        .chart-box canvas, .chart-card canvas {
            max-height: 180px !important; /* Make charts even smaller */
        }
        
        .chart-header {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }
        
        .chart-icon {
            width: 18px;
            height: 18px;
            margin-right: 8px;
            background-color: #2385B0;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 10px;
        }
        
        .tab-navigation {
            display: flex;
            border-bottom: 1px solid #ddd;
            margin: 0 auto 15px;
            width: 90%;
            max-width: 1400px;
            background-color: #fff;
            border-radius: 8px 8px 0 0;
            overflow: hidden;
            position: sticky;
            top: 0;
            z-index: 100;
        }
        
        .tab-button {
            padding: 10px 15px;
            border: none;
            background: none;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            color: #666;
            position: relative;
        }
        
        .tab-button.active {
            color: #2385B0;
        }
        
        .tab-button.active:after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 2px;
            background-color: #2385B0;
        }
        
        .tab-button:hover {
            background-color: #f9f9f9;
        }
        
        .tab-content {
            display: none;
            width: 90%;
            max-width: 1400px;
            margin: 0 auto;
            margin-bottom: 20px;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .dual-chart-container {
            display: grid;
            grid-template-columns: 1fr;
            gap: 15px;
            margin-bottom: 10px;
        }
        
        @media (min-width: 1024px) {
            .dual-chart-container {
                grid-template-columns: 1fr 1fr;
            }
        }
        
        .chart-card {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            padding: 15px;
        }

        .chart-card h3 {
            margin-left: 0;
            margin-bottom: 10px;
            font-size: 16px;
            color: #333;
        }

        .department-badge {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            padding: 6px 15px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-left: auto;
        }

        /* Attendance Reports Integration Styling */
        .attendance-reports-section {
            margin: 30px 0;
            padding: 20px;
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .reports-section-header {
            display: flex;
            align-items: center;
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 2px solid #2385B0;
        }

        .reports-section-header h3 {
            margin: 0;
            color: #2385B0;
            font-size: 20px;
            font-weight: 600;
            margin-left: 0;
        }

        .reports-section-header i {
            margin-right: 10px;
            font-size: 20px;
            color: #2385B0;
        }

        .reports-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 20px;
        }

        @media (min-width: 768px) {
            .reports-grid {
                grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            }
        }

        .report-item {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .report-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
        }

        .report-header {
            display: flex;
            align-items: center;
            padding: 15px 20px;
            background: linear-gradient(135deg, #2385B0 0%, #1a5f78 100%);
            color: white;
        }

        .report-icon {
            width: 40px;
            height: 40px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
            background: rgba(255, 255, 255, 0.2);
            font-size: 18px;
        }

        .report-info h4 {
            margin: 0 0 5px 0;
            font-size: 16px;
            font-weight: 600;
        }

        .report-info p {
            margin: 0;
            font-size: 13px;
            opacity: 0.9;
            line-height: 1.4;
        }

        .report-form {
            padding: 20px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
            color: #495057;
            font-size: 13px;
        }

        .form-group input,
        .form-group select {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #ced4da;
            border-radius: 6px;
            font-size: 13px;
            transition: border-color 0.2s ease;
        }

        .form-group input:focus,
        .form-group select:focus {
            outline: none;
            border-color: #2385B0;
            box-shadow: 0 0 0 0.2rem rgba(35, 133, 176, 0.25);
        }

        .form-actions {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        .btn-report {
            flex: 1;
            padding: 10px 15px;
            border: none;
            border-radius: 6px;
            font-size: 13px;
            font-weight: 500;
            cursor: pointer;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 6px;
            transition: all 0.2s ease;
        }

        .btn-report:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .btn-report.loading {
            position: relative;
            color: transparent;
        }

        .btn-report.loading::after {
            content: '';
            position: absolute;
            width: 14px;
            height: 14px;
            top: 50%;
            left: 50%;
            margin-left: -7px;
            margin-top: -7px;
            border: 2px solid transparent;
            border-top: 2px solid currentColor;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .btn-primary {
            background: linear-gradient(135deg, #2385B0 0%, #1a5f78 100%);
            color: white;
        }

        .btn-primary:hover:not(:disabled) {
            background: linear-gradient(135deg, #1a5f78 0%, #144a5e 100%);
            transform: translateY(-1px);
        }

        .btn-secondary {
            background: white;
            color: #2385B0;
            border: 1px solid #2385B0;
        }

        .btn-secondary:hover:not(:disabled) {
            background: #2385B0;
            color: white;
            transform: translateY(-1px);
        }

        .report-results {
            display: none;
            margin-top: 20px;
            padding: 20px;
            background: #f8f9fa;
            border-top: 1px solid #dee2e6;
            border-radius: 0 0 8px 8px;
        }

        .results-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #2385B0;
        }

        .results-header h5 {
            color: #2385B0;
            margin: 0;
            font-size: 16px;
            font-weight: 600;
        }

        .results-summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 12px;
            margin-bottom: 20px;
            padding: 15px;
            background: white;
            border-radius: 6px;
            border: 1px solid #dee2e6;
        }

        .summary-stat {
            text-align: center;
            padding: 12px;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 6px;
            border: 1px solid #dee2e6;
        }

        .summary-stat-value {
            font-size: 20px;
            font-weight: 700;
            color: #2385B0;
            margin-bottom: 4px;
        }

        .summary-stat-label {
            font-size: 11px;
            color: #6c757d;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .data-table-container {
            background: white;
            border-radius: 6px;
            overflow: hidden;
            border: 1px solid #dee2e6;
            margin-bottom: 15px;
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 12px;
        }

        .data-table th {
            background: linear-gradient(135deg, #2385B0 0%, #1a5f78 100%);
            color: white;
            padding: 10px 8px;
            text-align: left;
            font-weight: 600;
            font-size: 11px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .data-table td {
            padding: 8px;
            border-bottom: 1px solid #e9ecef;
            vertical-align: middle;
        }

        .data-table tr:nth-child(even) {
            background-color: #f8f9fa;
        }

        .data-table tr:hover {
            background-color: #e3f2fd;
        }

        .department-section {
            margin: 20px 0;
        }

        .department-title {
            background: linear-gradient(135deg, #495057 0%, #343a40 100%);
            color: white;
            padding: 10px 15px;
            font-weight: 600;
            font-size: 13px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            border-radius: 6px 6px 0 0;
            margin: 0;
        }

        .status-badge {
            padding: 3px 6px;
            border-radius: 10px;
            font-size: 10px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-present {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .status-late {
            background-color: #fff3cd;
            color: #856404;
            border: 1px solid #ffeaa7;
        }

        .status-early-out {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .status-on-leave {
            background-color: #cce5ff;
            color: #004085;
            border: 1px solid #b8daff;
        }

        .status-absent {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .leave-badge {
            background-color: #e7f3ff;
            color: #0066cc;
            padding: 2px 5px;
            border-radius: 6px;
            font-size: 9px;
            font-weight: 500;
        }

        .hours-display {
            font-weight: 600;
            color: #495057;
        }

        .late-time {
            color: #856404;
            font-weight: 600;
        }

        .early-out-time {
            color: #721c24;
            font-weight: 600;
        }

        .no-data {
            text-align: center;
            padding: 30px 20px;
            color: #6c757d;
            font-style: italic;
            background: white;
            border-radius: 6px;
            border: 1px solid #dee2e6;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .reports-grid {
                grid-template-columns: 1fr;
            }
            
            .form-actions {
                flex-direction: column;
            }
            
            .results-summary {
                grid-template-columns: repeat(2, 1fr);
                gap: 8px;
                padding: 12px;
            }
            
            .data-table {
                font-size: 10px;
            }
            
            .data-table th,
            .data-table td {
                padding: 6px 4px;
            }
        }

        .employee-report-enhanced {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .employee-report-enhanced .report-icon {
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(10px);
        }

        .period-selection-info {
            background: #e3f2fd;
            border: 1px solid #2196f3;
            border-radius: 4px;
            padding: 8px 12px;
            margin-top: 8px;
            font-size: 12px;
            color: #1976d2;
        }

        .period-selection-info i {
            margin-right: 6px;
            color: #2196f3;
        }

        .form-group.enhanced-select {
            position: relative;
        }

        .form-group.enhanced-select::after {
            content: '\f107';
            font-family: 'Font Awesome 5 Free';
            font-weight: 900;
            position: absolute;
            right: 12px;
            top: 32px;
            pointer-events: none;
            color: #2385B0;
        }

        .form-group select {
            appearance: none;
            background: white;
            cursor: pointer;
        }

        .employee-info-preview {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 6px;
            padding: 12px;
            margin-top: 10px;
            display: none;
        }

        .employee-info-preview.show {
            display: block;
        }

        .employee-info-preview h6 {
            margin: 0 0 8px 0;
            color: #2385B0;
            font-size: 14px;
            font-weight: 600;
        }

        .employee-info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 8px;
        }

        .employee-info-item {
            font-size: 12px;
        }

        .employee-info-item strong {
            color: #495057;
        }

        .leave-requests-report-container {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        margin-bottom: 20px;
    }

    /* Report header */
    .leave-report-header {
        background: linear-gradient(135deg, #2385B0 0%, #1a5f78 100%);
        color: white;
        padding: 20px;
        text-align: center;
    }

    .leave-report-title {
        font-size: 20px;
        font-weight: 700;
        margin: 0 0 8px 0;
        letter-spacing: 0.5px;
    }

    .leave-report-subtitle {
        font-size: 14px;
        opacity: 0.9;
        margin: 0;
    }

    .leave-report-date {
        font-size: 12px;
        opacity: 0.8;
        margin: 8px 0 0 0;
        font-style: italic;
    }

    /* Summary statistics section */
    .leave-summary-section {
        padding: 25px;
        background: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }

    .leave-summary-title {
        color: #2385B0;
        font-size: 18px;
        font-weight: 600;
        margin: 0 0 20px 0;
        display: flex;
        align-items: center;
        border-bottom: 2px solid #2385B0;
        padding-bottom: 10px;
    }

    .leave-summary-title i {
        margin-right: 10px;
        font-size: 20px;
    }

    .leave-summary-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
        margin-bottom: 20px;
    }

    .leave-summary-stat {
        background: white;
        border-radius: 8px;
        padding: 20px;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        border: 1px solid #e9ecef;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .leave-summary-stat:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .leave-summary-stat-value {
        font-size: 28px;
        font-weight: 700;
        color: #2385B0;
        margin-bottom: 8px;
        display: block;
    }

    .leave-summary-stat-label {
        font-size: 13px;
        color: #6c757d;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        line-height: 1.3;
    }

    /* Detailed requests section */
    .leave-detailed-section {
        padding: 25px;
    }

    .leave-detailed-title {
        color: #2385B0;
        font-size: 18px;
        font-weight: 600;
        margin: 0 0 25px 0;
        display: flex;
        align-items: center;
        border-bottom: 2px solid #2385B0;
        padding-bottom: 10px;
    }

    .leave-detailed-title i {
        margin-right: 10px;
        font-size: 20px;
    }

    /* Department sections */
    .leave-department-section {
        margin-bottom: 30px;
        background: #f8f9fa;
        border-radius: 8px;
        overflow: hidden;
        border: 1px solid #dee2e6;
    }

    .leave-department-header {
        background: linear-gradient(135deg, #495057 0%, #343a40 100%);
        color: white;
        padding: 15px 20px;
        font-weight: 600;
        font-size: 16px;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .leave-department-header i {
        margin-right: 10px;
        font-size: 18px;
    }

    .leave-department-count {
        background: rgba(255, 255, 255, 0.2);
        padding: 4px 12px;
        border-radius: 15px;
        font-size: 12px;
        font-weight: 500;
    }

    /* Department table */
    .leave-department-table-container {
        background: white;
        overflow-x: auto;
    }

    .leave-department-table {
        width: 100%;
        border-collapse: collapse;
        font-size: 12px;
        min-width: 900px;
    }

    .leave-department-table th {
        background: linear-gradient(135deg, #2385B0 0%, #1a5f78 100%);
        color: white;
        padding: 12px 8px;
        text-align: left;
        font-weight: 600;
        font-size: 11px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        white-space: nowrap;
    }

    .leave-department-table td {
        padding: 10px 8px;
        border-bottom: 1px solid #e9ecef;
        vertical-align: middle;
        white-space: nowrap;
    }

    .leave-department-table tr:nth-child(even) {
        background-color: #f8f9fa;
    }

    .leave-department-table tr:hover {
        background-color: #e3f2fd;
    }

    /* Department summary row */
    .leave-department-summary {
        background: linear-gradient(135deg, #e9ecef 0%, #dee2e6 100%) !important;
        font-weight: 600;
        color: #495057;
    }

    .leave-department-summary td {
        padding: 15px 8px;
        border-top: 2px solid #adb5bd;
        font-size: 13px;
    }

    /* Status badges */
    .leave-status-badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 10px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        display: inline-block;
        min-width: 60px;
        text-align: center;
    }

    .leave-status-approved {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .leave-status-pending {
        background-color: #fff3cd;
        color: #856404;
        border: 1px solid #ffeaa7;
    }

    .leave-status-rejected {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    /* Leave type badges */
    .leave-type-badge {
        background: linear-gradient(135deg, #e7f3ff 0%, #cce5ff 100%);
        color: #0066cc;
        padding: 4px 8px;
        border-radius: 8px;
        font-size: 10px;
        font-weight: 600;
        border: 1px solid #b8daff;
        display: inline-block;
    }

    /* Balance display */
    .leave-balance-display {
        font-weight: 600;
        color: #495057;
        font-size: 11px;
    }

    .leave-balance-positive {
        color: #28a745;
    }

    .leave-balance-warning {
        color: #ffc107;
    }

    .leave-balance-negative {
        color: #dc3545;
    }

    /* Timestamp formatting */
    .leave-timestamp {
        color: #6c757d;
        font-size: 11px;
        font-family: 'Courier New', monospace;
    }

    /* Duration display */
    .leave-duration {
        font-weight: 600;
        color: #495057;
        text-align: center;
    }

    /* Date range display */
    .leave-date-range {
        font-size: 11px;
        color: #495057;
        white-space: nowrap;
    }

    /* Remarks display */
    .leave-remarks {
        max-width: 150px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        color: #6c757d;
        font-style: italic;
        font-size: 11px;
    }

    .leave-remarks:hover {
        overflow: visible;
        white-space: normal;
        background: #f8f9fa;
        padding: 4px;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        position: relative;
        z-index: 10;
    }

    /* Total summary */
    .leave-total-summary {
        margin-top: 25px;
        padding: 20px;
        background: linear-gradient(135deg, #2385B0 0%, #1a5f78 100%);
        color: white;
        border-radius: 8px;
        text-align: center;
    }

    .leave-total-summary-title {
        font-size: 16px;
        font-weight: 600;
        margin: 0 0 10px 0;
    }

    .leave-total-summary-value {
        font-size: 24px;
        font-weight: 700;
        margin: 0;
    }

    /* No data state */
    .leave-no-data {
        text-align: center;
        padding: 40px 20px;
        color: #6c757d;
        font-style: italic;
        background: white;
        border-radius: 8px;
        border: 2px dashed #dee2e6;
        margin: 20px 0;
    }

    .leave-no-data i {
        font-size: 48px;
        color: #dee2e6;
        margin-bottom: 15px;
        display: block;
    }

    .action-button {
        background: linear-gradient(135deg, #2385B0 0%, #1a5f78 100%);
        color: white;
        padding: 6px 12px;
        text-decoration: none;
        border-radius: 6px;
        font-size: 11px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        transition: all 0.3s ease;
        white-space: nowrap;
        display: inline-block;
    }

    .action-button:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(35, 133, 176, 0.3);
        text-decoration: none;
        color: white;
    }

    /* Responsive design */
    @media (max-width: 768px) {
        .leave-summary-stats {
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
        }
    }

    /* Alert classes */
    .alert {
        padding: 15px;
        margin: 15px 0;
        border: 1px solid transparent;
        border-radius: 4px;
    }

    .alert-success {
        color: #155724;
        background-color: #d4edda;
        border-color: #c3e6cb;
    }

    .alert-error {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }

    /* Additional status badge classes for dynamic content */
    .status-badge.status-working {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .status-badge.status-checked-out {
        background-color: #cce5ff;
        color: #004085;
        border: 1px solid #b8daff;
    }

    .status-badge.status-not-checked {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    /* Leave status badge classes for dynamic content */
    .leave-status-badge.leave-status-pending-for-approval {
        background-color: #fff3cd;
        color: #856404;
        border: 1px solid #ffeaa7;
    }
    </style>
</head>
<body>
<script>
// Pass server data to JavaScript
window.attendanceLogs = <%- JSON.stringify(attendanceLogs || []) %>;
window.allLeaves = <%- JSON.stringify(allLeaves || []) %>;
window.approvedLeaves = <%- JSON.stringify(approvedLeaves || []) %>;
window.notifications = <%- JSON.stringify(notifications || []) %>;
</script>

    <%- include('../../partials/linemanager_partials') %>
    <!-- Main content -->
    <div class="content">
        <h2>
            Line Manager Dashboard
        </h2>
        <!-- Success and Error Messages -->
        <% if (successMessage && successMessage.length > 0) { %>
            <div class="alert alert-success">
                <%= successMessage %>
            </div>
        <% } %>
        <% if (errorMessage && errorMessage.length > 0) { %>
            <div class="alert alert-error">
                <%= errorMessage.dbError %>
            </div>
        <% } %>
        
        <!-- KPI Summary Cards -->
        <div class="kpi-cards">
            <div class="kpi-card">
                <div class="kpi-card-icon" style="background-color: rgba(35, 133, 176, 0.1); color: #2385B0;">
                    <i class="fas fa-users"></i>
                </div>
                <div class="kpi-card-title">Total Team Members</div>
                <div class="kpi-card-value" id="team-members-count">--</div>
            </div>
            
            <div class="kpi-card">
                <div class="kpi-card-icon" style="background-color: rgba(40, 167, 69, 0.1); color: #28a745;">
                    <i class="fas fa-clock"></i>
                </div>
                <div class="kpi-card-title">Avg Working Hours</div>
                <div class="kpi-card-value" id="avg-working-hours">--</div>
            </div>
            
            <div class="kpi-card">
                <div class="kpi-card-icon" style="background-color: rgba(255, 193, 7, 0.1); color: #ffc107;">
                    <i class="fas fa-calendar"></i>
                </div>
                <div class="kpi-card-title">Pending Leave Requests</div>
                <div class="kpi-card-value" id="pending-leaves">--</div>
            </div>
            
            <div class="kpi-card">
                <div class="kpi-card-icon" style="background-color: rgba(111, 66, 193, 0.1); color: #6f42c1;">
                    <i class="fas fa-file-alt"></i>
                </div>
                <div class="kpi-card-title">Pending Approvals</div>
                <div class="kpi-card-value" id="pending-approvals">--</div>
            </div>
        </div>
        
        <!-- Tab Navigation -->
        <div class="tab-navigation">
            <button class="tab-button active" data-tab="attendance">Attendance Analytics</button>
            <button class="tab-button" data-tab="leaves">Leave Management</button>
            <button class="tab-button" data-tab="team">Team Overview</button>
        </div>
        
        <!-- Attendance Tab Content -->
        <div class="tab-content active" id="attendance-tab">
            <div class="dual-chart-container">
                <div class="chart-card">
                    <div class="chart-header">
                        <div class="chart-icon">
                            <i class="fas fa-chart-line"></i>
                        </div>
                        <h3>Daily Attendance Trend</h3>
                    </div>
                    <canvas id="attendanceTrendChart"></canvas>
                </div>
                
                <div class="chart-card">
                    <div class="chart-header">
                        <div class="chart-icon">
                            <i class="fas fa-user-clock"></i>
                        </div>
                        <h3>Team Working Hours</h3>
                    </div>
                    <canvas id="workingHoursChart"></canvas>
                </div>
            </div>

            <!-- Department Reports Section (Line Manager) -->
            <div class="attendance-reports-section">
                <div class="reports-section-header">
                    <i class="fas fa-file-chart-line"></i>
                    <h3>Department Reports</h3>
                    <span class="department-badge" id="manager-department">Your Department</span>
                </div>
                
                <div class="reports-grid">
                    <!-- Daily Department Attendance Report -->
                    <div class="report-item">
                        <div class="report-header">
                            <div class="report-icon">
                                <i class="fas fa-calendar-day"></i>
                            </div>
                            <div class="report-info">
                                <h4>Daily Department Attendance</h4>
                                <p>Daily attendance overview for your department with detailed employee lists and metrics</p>
                            </div>
                        </div>
                        
                        <form class="report-form" id="lm-daily-attendance-form">
                            <div class="form-group">
                                <label for="lm-daily-attendance-date">Select Date</label>
                                <input type="date" id="lm-daily-attendance-date" name="attendanceDate" required>
                            </div>
                            
                            <div class="form-actions">
                                <button type="button" class="btn-report btn-primary" onclick="generateDepartmentReport('daily-attendance', 'view')">
                                    <i class="fas fa-eye"></i> View Report
                                </button>
                                <button type="button" class="btn-report btn-secondary" onclick="generateDepartmentReport('daily-attendance', 'pdf')">
                                    <i class="fas fa-file-pdf"></i> PDF
                                </button>
                            </div>
                        </form>
                        
                        <div class="report-results" id="lm-daily-attendance-results"></div>
                    </div>
                    
                    <!-- Individual Employee Report (Department) -->
                    <div class="report-item">
                        <div class="report-header">
                            <div class="report-icon">
                                <i class="fas fa-user-clock"></i>
                            </div>
                            <div class="report-info">
                                <h4>Individual Employee Report</h4>
                                <p>Weekly or monthly report for department employees with attendance and leave details</p>
                            </div>
                        </div>
                        
                        <form class="report-form" id="lm-employee-report-form">
                            <div class="form-group">
                                <label for="lm-employee-select">Select Employee</label>
                                <select id="lm-employee-select" name="employeeId" required>
                                    <option value="">Choose a team member...</option>
                                    <!-- Options will be populated dynamically -->
                                </select>
                            </div>
                            
                            <div class="form-group">
                                <label for="lm-employee-report-type">Report Period</label>
                                <select id="lm-employee-report-type" name="reportType" required>
                                    <option value="weekly">Weekly Report</option>
                                    <option value="monthly">Monthly Report</option>
                                </select>
                            </div>
                            
                            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                                <div class="form-group">
                                    <label for="lm-employee-start-date">Start Date</label>
                                    <input type="date" id="lm-employee-start-date" name="startDate" required>
                                </div>
                                <div class="form-group">
                                    <label for="lm-employee-end-date">End Date</label>
                                    <input type="date" id="lm-employee-end-date" name="endDate" required>
                                </div>
                            </div>
                            
                            <div class="form-actions">
                                <button type="button" class="btn-report btn-primary" onclick="generateDepartmentReport('employee-report', 'view')">
                                    <i class="fas fa-eye"></i> View Report
                                </button>
                                <button type="button" class="btn-report btn-secondary" onclick="generateDepartmentReport('employee-report', 'pdf')">
                                    <i class="fas fa-file-pdf"></i> Download PDF
                                </button>
                            </div>
                        </form>
                        
                        <div class="report-results" id="lm-employee-report-results"></div>
                    </div>
                    
                    <!-- Department Leave Requests Report -->
                    <div class="report-item">
                        <div class="report-header">
                            <div class="report-icon">
                                <i class="fas fa-calendar-times"></i>
                            </div>
                            <div class="report-info">
                                <h4>Department Leave Summary</h4>
                                <p>Leave requests and balances overview for your department team members</p>
                            </div>
                        </div>
                        
                        <form class="report-form" id="lm-leave-report-form">
                            <div class="form-group">
                                <label for="lm-leave-requests-report-type">Report Period</label>
                                <select id="lm-leave-requests-report-type" name="reportType" required>
                                    <option value="weekly">Weekly Report</option>
                                    <option value="monthly">Monthly Report</option>
                                </select>
                            </div>
                            
                            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                                <div class="form-group">
                                    <label for="lm-leave-requests-start-date">Start Date</label>
                                    <input type="date" id="lm-leave-requests-start-date" name="startDate" required>
                                </div>
                                <div class="form-group">
                                    <label for="lm-leave-requests-end-date">End Date</label>
                                    <input type="date" id="lm-leave-requests-end-date" name="endDate" required>
                                </div>
                            </div>
                            
                            <div class="form-actions">
                                <button type="button" class="btn-report btn-primary" onclick="generateDepartmentReport('leave-report', 'view')">
                                    <i class="fas fa-eye"></i> View Report
                                </button>
                                <button type="button" class="btn-report btn-secondary" onclick="generateDepartmentReport('leave-report', 'pdf')">
                                    <i class="fas fa-file-pdf"></i> PDF
                                </button>
                            </div>
                        </form>
                        
                        <div class="report-results" id="lm-leave-requests-report-results"></div>
                    </div>
                </div>
            </div>
            
            <!-- Attendance Logs Section -->
            <section class="attendance-logs">
                <h3>Today's Attendance Logs</h3>
                <table id="attendance-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Department</th>
                            <th>Time In</th>
                            <th>Time Out</th>
                            <th>Location</th>
                            <th>Working Hours</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (attendanceLogs && attendanceLogs.length) { %>
                            <% let counter = 0; %>
                            <% attendanceLogs.forEach(log => { %>
                                <tr class="<%= counter >= 5 ? 'hidden-row' : '' %>">
                                    <td><%= log.lastName %>, <%= log.firstName %></td>
                                    <td><%= log.department %></td>
                                    <td><%= log.timeIn %></td>
                                    <td><%= log.timeOut %></td>
                                    <td><%= log.city || 'Unknown' %></td>
                                    <td><%= log.activeWorkingHours %></td>
                                </tr>
                                <% counter++; %>
                            <% }); %>
                            <% if (attendanceLogs.length > 5) { %>
                                <tr class="show-more-row" id="show-more-attendance">
                                    <td colspan="6">Show more entries (<%= attendanceLogs.length - 5 %> more)</td>
                                </tr>
                            <% } %>
                        <% } else { %>
                            <tr>
                                <td colspan="6">No attendance logs available.</td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </section>
        </div>
        
        <!-- Leaves Tab Content -->
        <div class="tab-content" id="leaves-tab">
            <div class="dual-chart-container">
                <div class="chart-card">
                    <div class="chart-header">
                        <div class="chart-icon">
                            <i class="fas fa-chart-pie"></i>
                        </div>
                        <h3>Leave Request Status</h3>
                    </div>
                    <canvas id="leaveRequestsChart"></canvas>
                </div>
                
                <div class="chart-card">
                    <div class="chart-header">
                        <div class="chart-icon">
                            <i class="fas fa-calendar-check"></i>
                        </div>
                        <h3>Leave Requests Per Week</h3>
                    </div>
                    <canvas id="leaveRequestsPerWeekChart"></canvas>
                </div>
            </div>
            
            <!-- All Leave Requests Table -->
            <div class="allLeaves">
                <h3>Pending Leave Requests</h3>
                <table id="pending-leaves-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Filed Date</th>
                            <th>Department</th>
                            <th>Leave Type</th>
                            <th>Start Date</th>
                            <th>End Date</th>
                            <th>Status</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% 
                        let pendingLeaves = [];
                        if (allLeaves && allLeaves.length > 0) {
                            pendingLeaves = allLeaves.filter(leave => leave.status === 'Pending for Approval');
                        }
                        %>
                        
                        <% if (pendingLeaves.length > 0) { %>
                            <% let counter = 0; %>
                            <% pendingLeaves.forEach(leave => { %>
                                <tr class="<%= counter >= 5 ? 'hidden-row' : '' %>">
                                    <td><%= leave.lastName %>, <%= leave.firstName %></td>
                                    <td><%= leave.filedDate %></td>
                                    <td><%= leave.department %></td>
                                    <td><%= leave.type %></td>
                                    <td><%= leave.startDate %></td>
                                    <td><%= leave.endDate %></td>
                                    <td><%= leave.status %></td>
<td>
    <% if (leave.userId) { %>
        <a href="/linemanager/leaverequest?userId=<%= leave.userId %><%= leave.leaveRequestId ? '&leaveRequestId=' + leave.leaveRequestId : '' %>" class="action-button">Review</a>
    <% } else { %>
        <span>No User ID</span>
    <% } %>
</td>
                                </tr>
                                <% counter++; %>
                            <% }); %>
                            <% if (pendingLeaves.length > 5) { %>
                                <tr class="show-more-row" id="show-more-pending-leaves">
                                    <td colspan="8">Show more entries (<%= pendingLeaves.length - 5 %> more)</td>
                                </tr>
                            <% } %>
                        <% } else { %>
                            <tr>
                                <td colspan="8">No pending leave requests found.</td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
                
                <h3>Recent Approved Leave Requests</h3>
                <table id="approved-leaves-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Filed Date</th>
                            <th>Department</th>
                            <th>Leave Type</th>
                            <th>Start Date</th>
                            <th>End Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (approvedLeaves && approvedLeaves.length > 0) { %>
                            <% let counter = 0; %>
                            <% approvedLeaves.forEach(leave => { %>
                                <tr class="<%= counter >= 5 ? 'hidden-row' : '' %>">
                                    <td><%= leave.lastName %>, <%= leave.firstName %></td>
                                    <td><%= leave.filedDate %></td>
                                    <td><%= leave.department %></td>
                                    <td><%= leave.type %></td>
                                    <td><%= leave.startDate %></td>
                                    <td><%= leave.endDate %></td>
                                </tr>
                                <% counter++; %>
                            <% }); %>
                            <% if (approvedLeaves.length > 5) { %>
                                <tr class="show-more-row" id="show-more-approved-leaves">
                                    <td colspan="7">Show more entries (<%= approvedLeaves.length - 5 %> more)</td>
                                </tr>
                            <% } %>
                        <% } else { %>
                            <tr>
                                <td colspan="7">No approved leave requests found.</td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </div>
        </div>
        
        <!-- Team Overview Tab Content -->
        <div class="tab-content" id="team-tab">
            <div class="dual-chart-container">
                <div class="chart-card">
                    <div class="chart-header">
                        <div class="chart-icon">
                            <i class="fas fa-users"></i>
                        </div>
                        <h3>Department Distribution</h3>
                    </div>
                    <canvas id="departmentDistributionChart"></canvas>
                </div>
                
                <div class="chart-card">
                    <div class="chart-header">
                        <div class="chart-icon">
                            <i class="fas fa-user-check"></i>
                        </div>
                        <h3>Team Attendance Rate</h3>
                    </div>
                    <canvas id="teamAttendanceChart"></canvas>
                </div>
            </div>
            
            <!-- All Leave Requests Table -->
            <div class="allLeaves">
                <h3>All Team Members</h3>
                <table id="team-members-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Department</th>
                            <th>Job Position</th>
                            <th>Today's Status</th>
                            <th>Working Hours</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (attendanceLogs && attendanceLogs.length > 0) { %>
                            <% 
                            // Create a map to track unique team members
                            const teamMembersMap = new Map();
                            
                            // Process attendance logs to get today's status for each team member
                            attendanceLogs.forEach(log => {
                                const memberKey = `${log.firstName} ${log.lastName}`;
                                
                                // Only add if not already in map
                                if (!teamMembersMap.has(memberKey)) {
                                    let status = "Not Checked In";
                                    if (log.timeIn !== 'N/A') {
                                        status = log.timeOut && log.timeOut !== '(In Work)' ? "Checked Out" : "Working";
                                    }
                                    
                                    teamMembersMap.set(memberKey, {
                                        firstName: log.firstName,
                                        lastName: log.lastName,
                                        department: log.department,
                                        jobTitle: log.jobTitle,
                                        status: status,
                                        activeWorkingHours: log.activeWorkingHours
                                    });
                                }
                            });
                            
                            // Convert map to array for display
                            const teamMembers = Array.from(teamMembersMap.values());
                            %>
                            
                            <% let counter = 0; %>
                            <% teamMembers.forEach(member => { %>
                                <tr class="<%= counter >= 5 ? 'hidden-row' : '' %>">
                                    <td><%= member.lastName %>, <%= member.firstName %></td>
                                    <td><%= member.department %></td>
                                    <td><%= member.jobTitle %></td>
                                    <td>
                                        <span class="status-badge <%= member.status === 'Working' ? 'working' : (member.status === 'Checked Out' ? 'checked-out' : 'not-checked') %>">
                                            <%= member.status %>
                                        </span>
                                    </td>
                                    <td><%= member.activeWorkingHours %></td>
                                    <td>
                                        <a href="/linemanager/teammember?name=<%= member.firstName %>-<%= member.lastName %>" class="action-button">View Profile</a>
                                    </td>
                                </tr>
                                <% counter++; %>
                            <% }); %>
                            <% if (teamMembers.length > 5) { %>
                                <tr class="show-more-row" id="show-more-team">
                                    <td colspan="6">Show more entries (<%= teamMembers.length - 5 %> more)</td>
                                </tr>
                            <% } %>
                        <% } else { %>
                            <tr>
                                <td colspan="6">No team members available.</td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <!-- Script for the Chart.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.28/jspdf.plugin.autotable.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {

        // Define global variables with safe defaults
        let attendanceLogs = [];
        let allLeaves = [];
        let approvedLeaves = [];
        let notifications = [];

        // Try to get data from server-side variables if they exist
        try {
            if (typeof window.attendanceLogs !== 'undefined') attendanceLogs = window.attendanceLogs;
            if (typeof window.allLeaves !== 'undefined') allLeaves = window.allLeaves;
            if (typeof window.approvedLeaves !== 'undefined') approvedLeaves = window.approvedLeaves;
            if (typeof window.notifications !== 'undefined') notifications = window.notifications;
        } catch (e) {
            console.log('Using default empty data arrays');
        }

        // Mock data for demonstration (remove this when you have real data)
        if (attendanceLogs.length === 0) {
            attendanceLogs = [
                { firstName: 'John', lastName: 'Smith', department: 'Engineering', timeIn: '09:00', timeOut: '18:00', city: 'Office', activeWorkingHours: '8.0', date: '2025-06-18', jobTitle: 'Software Engineer' },
                { firstName: 'Jane', lastName: 'Doe', department: 'Engineering', timeIn: '09:15', timeOut: '17:45', city: 'Office', activeWorkingHours: '7.5', date: '2025-06-18', jobTitle: 'Senior Developer' }
            ];
        }

            // Function to ensure consistent chart dimensions
            function setupChartDimensions() {
                document.querySelectorAll('.chart-card canvas').forEach(canvas => {
                    canvas.style.height = '180px';
                });
            }
            
            // Call this initially
            setupChartDimensions();

            initializeLineManagerReports(); 
            
            // Calculate KPI values
            function calculateKPIs() {
                // Calculate total team members
                const uniqueMembers = new Set();
                attendanceLogs.forEach(log => {
                    uniqueMembers.add(`${log.firstName} ${log.lastName}`);
                });
                document.getElementById('team-members-count').textContent = uniqueMembers.size;
                
                // Calculate average working hours
                if (attendanceLogs && attendanceLogs.length) {
                    let totalHours = 0;
                    let validLogs = 0;
                    
                    attendanceLogs.forEach(log => {
                        if (log.activeWorkingHours && !isNaN(parseFloat(log.activeWorkingHours))) {
                            totalHours += parseFloat(log.activeWorkingHours);
                            validLogs++;
                        }
                    });
                    
                    if (validLogs > 0) {
                        const avgHours = (totalHours / validLogs).toFixed(1);
                        document.getElementById('avg-working-hours').textContent = `${avgHours} hrs`;
                    } else {
                        document.getElementById('avg-working-hours').textContent = 'N/A';
                    }
                } else {
                    document.getElementById('avg-working-hours').textContent = 'N/A';
                }
                
                // Count pending leave requests
                if (allLeaves && allLeaves.length) {
                    const pendingLeaves = allLeaves.filter(leave => leave.status === 'Pending for Approval').length;
                    document.getElementById('pending-leaves').textContent = pendingLeaves;
                } else {
                    document.getElementById('pending-leaves').textContent = '0';
                }
                
                // Count pending approvals
                const pendingApprovals = notifications.filter(
                    notification => notification.headline === "Awaiting Your Approval"
                ).length;
                document.getElementById('pending-approvals').textContent = pendingApprovals;
            }
            
            // Tab Navigation
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabContents = document.querySelectorAll('.tab-content');
            
            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    // Remove active class from all buttons and contents
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    tabContents.forEach(content => content.classList.remove('active'));
                    
                    // Add active class to clicked button and corresponding content
                    button.classList.add('active');
                    const tabId = `${button.dataset.tab}-tab`;
                    document.getElementById(tabId).classList.add('active');
                    
                    // Refresh chart dimensions when switching tabs
                    setTimeout(setupChartDimensions, 50);
                });
            });
            
            // Process attendance data for visualizations
            function processAttendanceData() {
                // Group by date
                const dateAttendance = {};
                
                attendanceLogs.forEach(log => {
                    if (log.date && log.date !== 'N/A') {
                        dateAttendance[log.date] = (dateAttendance[log.date] || 0) + 1;
                    }
                });
                
                // Group by department 
                const departmentData = {};
                
                attendanceLogs.forEach(log => {
                    if (log.department) {
                        if (!departmentData[log.department]) {
                            departmentData[log.department] = {
                                count: 0,
                                totalHours: 0
                            };
                        }
                        
                        departmentData[log.department].count++;
                        
                        if (log.activeWorkingHours && !isNaN(parseFloat(log.activeWorkingHours))) {
                            departmentData[log.department].totalHours += parseFloat(log.activeWorkingHours);
                        }
                    }
                });
                
                // Calculate average hours per department
                Object.keys(departmentData).forEach(dept => {
                    if (departmentData[dept].count > 0) {
                        departmentData[dept].avgHours = departmentData[dept].totalHours / departmentData[dept].count;
                    } else {
                        departmentData[dept].avgHours = 0;
                    }
                });
                
                return { dateAttendance, departmentData };
            }
            
            // Process leave data for visualizations
            function processLeaveData() {
                // Group by status
                const leaveStatus = {
                    'Pending for Approval': 0,
                    'Approved': 0,
                    'Rejected': 0
                };
                
                if (allLeaves && allLeaves.length) {
                    allLeaves.forEach(leave => {
                        if (leave.status && leaveStatus.hasOwnProperty(leave.status)) {
                            leaveStatus[leave.status]++;
                        }
                    });
                }
                
                // Group by week
                const leaveWeeklyCounts = {};
                
                if (allLeaves && allLeaves.length) {
                    allLeaves.forEach(leave => {
                        if (leave.filedDate && leave.filedDate !== 'N/A') {
                            const leaveDate = new Date(leave.filedDate);
                            const startOfYear = new Date(leaveDate.getFullYear(), 0, 1);
                            const weekNumber = Math.ceil(((leaveDate - startOfYear) / (24 * 60 * 60 * 1000) + startOfYear.getDay() + 1) / 7);
                            const weekKey = `Week ${weekNumber}`;
                            
                            leaveWeeklyCounts[weekKey] = (leaveWeeklyCounts[weekKey] || 0) + 1;
                        }
                    });
                }
                
                return { leaveStatus, leaveWeeklyCounts };
            }
            
            // Calculate team statistics
            function processTeamData() {
                // Get unique team members
                const teamMembers = new Map();
                const departmentCounts = {};
                const attendanceStatus = {
                    'Present': 0,
                    'Absent': 0
                };
                
                // Process attendance logs
                attendanceLogs.forEach(log => {
                    const memberKey = `${log.firstName} ${log.lastName}`;
                    
                    // Count by department
                    if (log.department) {
                        departmentCounts[log.department] = (departmentCounts[log.department] || 0) + 1;
                    }
                    
                    // Track attendance
                    if (!teamMembers.has(memberKey)) {
                        teamMembers.set(memberKey, {
                            firstName: log.firstName,
                            lastName: log.lastName,
                            department: log.department,
                            isPresent: log.timeIn !== 'N/A'
                        });
                        
                        // Update attendance counts
                        if (log.timeIn !== 'N/A') {
                            attendanceStatus.Present++;
                        } else {
                            attendanceStatus.Absent++;
                        }
                    }
                });
                
                return { departmentCounts, attendanceStatus, teamSize: teamMembers.size };
            }
            
            // Get processed data for charts
            const attendanceData = processAttendanceData();
            const leaveData = processLeaveData();
            const teamData = processTeamData();
            
            // Call KPI calculations
            calculateKPIs();
            
            // Create Attendance Trend Chart
            const trendCtx = document.getElementById('attendanceTrendChart').getContext('2d');
            new Chart(trendCtx, {
                type: 'line',
                data: {
                    labels: Object.keys(attendanceData.dateAttendance).slice(-7),
                    datasets: [{
                        label: 'Daily Attendance',
                        data: Object.values(attendanceData.dateAttendance).slice(-7),
                        borderColor: '#2385B0',
                        backgroundColor: 'rgba(35, 133, 176, 0.1)',
                        borderWidth: 2,
                        tension: 0.3,
                        fill: true,
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: { 
                        legend: { 
                            display: true, 
                            position: 'top',
                            labels: { 
                                boxWidth: 12, 
                                font: { size: 11 } 
                            }
                        }
                    },
                    scales: { 
                        x: { 
                            title: { display: true, text: 'Date' },
                            ticks: { maxRotation: 45, minRotation: 45 }
                        }, 
                        y: { 
                            title: { display: true, text: 'Employee Count' },
                            beginAtZero: true
                        } 
                    }
                }
            });
            
            // Working Hours Chart (by department)
            const workingHoursCtx = document.getElementById('workingHoursChart').getContext('2d');
            const departments = Object.keys(attendanceData.departmentData);
            const avgHoursData = departments.map(dept => 
                attendanceData.departmentData[dept].avgHours.toFixed(1)
            );
            
            new Chart(workingHoursCtx, {
                type: 'bar',
                data: {
                    labels: departments,
                    datasets: [{
                        label: 'Average Working Hours',
                        data: avgHoursData,
                        backgroundColor: '#4CAF50',
                        borderColor: '#4CAF50',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: { 
                        legend: { 
                            display: true, 
                            position: 'top',
                            labels: { 
                                boxWidth: 12, 
                                font: { size: 11 } 
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: { display: true, text: 'Hours' }
                        }
                    }
                }
            });
            
            // Leave Status Chart (Pie Chart)
            const leaveRequestCtx = document.getElementById('leaveRequestsChart').getContext('2d');
            new Chart(leaveRequestCtx, {
                type: 'pie',
                data: {
                    labels: Object.keys(leaveData.leaveStatus),
                    datasets: [{
                        data: Object.values(leaveData.leaveStatus),
                        backgroundColor: [
                            '#FFCE56', // Pending
                            '#2385B0', // Approved
                            '#FF6384'  // Rejected
                        ],
                        hoverOffset: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: { 
                        legend: { position: 'right', labels: { boxWidth: 12, font: { size: 11 } } },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.raw || 0;
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = Math.round((value / total) * 100);
                                    return `${label}: ${value} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
            
            // Leave Requests Per Week Chart
            const leaveWeeklyCtx = document.getElementById('leaveRequestsPerWeekChart').getContext('2d');
            new Chart(leaveWeeklyCtx, {
                type: 'line',
                data: {
                    labels: Object.keys(leaveData.leaveWeeklyCounts),
                    datasets: [{
                        label: 'Weekly Leave Requests',
                        data: Object.values(leaveData.leaveWeeklyCounts),
                        borderColor: '#FF6384',
                        backgroundColor: 'rgba(255, 99, 132, 0.1)',
                        tension: 0.3,
                        fill: true,
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: { 
                        legend: { display: true, position: 'top' } 
                    },
                    scales: { 
                        y: { 
                            beginAtZero: true,
                            ticks: { stepSize: 1 },
                            title: { display: true, text: 'Count' }
                        }
                    }
                }
            });
            
            // Department Distribution Chart
            const deptDistributionCtx = document.getElementById('departmentDistributionChart').getContext('2d');
            new Chart(deptDistributionCtx, {
                type: 'pie',
                data: {
                    labels: Object.keys(teamData.departmentCounts),
                    datasets: [{
                        data: Object.values(teamData.departmentCounts),
                        backgroundColor: [
                            '#2385B0',
                            '#4CAF50',
                            '#FFCE56',
                            '#FF6384',
                            '#9966FF',
                            '#36A2EB'
                        ],
                        hoverOffset: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: { 
                        legend: { position: 'right', labels: { boxWidth: 12, font: { size: 11 } } },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.raw || 0;
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = Math.round((value / total) * 100);
                                    return `${label}: ${value} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
            
            // Team Attendance Rate Chart
            const teamAttendanceCtx = document.getElementById('teamAttendanceChart').getContext('2d');
            new Chart(teamAttendanceCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Present', 'Absent'],
                    datasets: [{
                        data: [teamData.attendanceStatus.Present, teamData.attendanceStatus.Absent],
                        backgroundColor: [
                            '#4CAF50', // Present
                            '#FF6384'  // Absent
                        ],
                        hoverOffset: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: { 
                        legend: { position: 'right', labels: { boxWidth: 12, font: { size: 11 } } },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.raw || 0;
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = Math.round((value / total) * 100);
                                    return `${label}: ${value} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
            
            // Add this new function for "Show More" functionality (like HR dashboard)
            function setupShowMoreLinks() {
                const MAX_ROWS = 5; // Show only 5 rows by default
                
                document.querySelectorAll('table tbody').forEach(tbody => {
                    const rows = tbody.querySelectorAll('tr:not(.show-more-row)');
                    
                    // Skip tables that already have show-more handling
                    if (tbody.closest('table').querySelector('.show-more-row')) {
                        return;
                    }
                    
                    if (rows.length > MAX_ROWS) {
                        // Hide extra rows
                        for (let i = MAX_ROWS; i < rows.length; i++) {
                            if (!rows[i].classList.contains('hidden-row')) {
                                rows[i].classList.add('hidden-row');
                            }
                        }
                        
                        // Add "Show More" link if not already present
                        const tfoot = document.createElement('tfoot');
                        const footerRow = document.createElement('tr');
                        const cell = document.createElement('td');
                        
                        cell.colSpan = tbody.closest('table').querySelectorAll('th').length;
                        cell.innerHTML = `<a href="#" class="show-more-link">Show More (${rows.length - MAX_ROWS} more)...</a>`;
                        cell.style.textAlign = 'center';
                        cell.style.padding = '8px';
                        cell.style.backgroundColor = '#f9f9f9';
                        cell.style.color = '#2385B0';
                        cell.style.fontWeight = 'bold';
                        cell.style.cursor = 'pointer';
                        
                        footerRow.appendChild(cell);
                        tfoot.appendChild(footerRow);
                        tbody.parentElement.appendChild(tfoot);
                        
                        // Add click handler
                        cell.querySelector('.show-more-link').addEventListener('click', function(e) {
                            e.preventDefault();
                            tbody.querySelectorAll('.hidden-row').forEach(row => {
                                row.classList.remove('hidden-row');
                            });
                            this.closest('tr').style.display = 'none';
                        });
                    }
                });
            }
            
            // Call our new function
            setupShowMoreLinks();

             // Display manager's department
            function displayManagerDepartment() {
                // Get department from attendance logs or other available data
                if (attendanceLogs && attendanceLogs.length > 0) {
                    const managerDepartment = attendanceLogs[0].department || 'Unknown Department';
                    const departmentBadge = document.getElementById('manager-department');
                    if (departmentBadge) {
                        departmentBadge.textContent = managerDepartment;
                    }
                } else {
                    const departmentBadge = document.getElementById('manager-department');
                    if (departmentBadge) {
                        departmentBadge.textContent = 'Your Department';
                    }
                }
            }
            
            // Handle existing "Show More" rows
            document.querySelectorAll('.show-more-row').forEach(row => {
                row.addEventListener('click', function() {
                    // Get table ID to know which rows to show
                    const tableId = this.closest('table').id;
                    
                    // Show all hidden rows in this table
                    document.querySelectorAll(`#${tableId} .hidden-row`).forEach(hiddenRow => {
                        hiddenRow.classList.remove('hidden-row');
                    });
                    
                    // Hide this "Show More" row
                    this.style.display = 'none';
                });
            });
            
            // Format date for notifications
            function formatDate(dateString) {
                const date = new Date(dateString);
                const options = { 
                    year: 'numeric', 
                    month: 'short', 
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                };
                return date.toLocaleDateString('en-US', options);
            }
            
            // Re-adjust chart dimensions on window resize
            window.addEventListener('resize', function() {
                setupChartDimensions();
            });
        });

        function displayManagerDepartment() {
            // Get department from attendance logs or other available data
            if (attendanceLogs && attendanceLogs.length > 0) {
                const managerDepartment = attendanceLogs[0].department || 'Unknown Department';
                const departmentBadge = document.getElementById('manager-department');
                if (departmentBadge) {
                    departmentBadge.textContent = managerDepartment;
                }
            } else {
                const departmentBadge = document.getElementById('manager-department');
                if (departmentBadge) {
                    departmentBadge.textContent = 'Your Department';
                }
            }
        }

        // Initialize line manager reports
        function initializeLineManagerReports() {
            console.log('🔄 Initializing line manager department reports...');
            
            // Set default dates
            setLineManagerReportDefaultDates();
            
            // Load department employees
            loadDepartmentEmployees();
            
            // Setup report handlers
            setupLineManagerReportHandlers();
            
            // Get and display manager's department
            displayManagerDepartment();
        }

        // Set default dates for line manager reports
        function setLineManagerReportDefaultDates() {
            const today = new Date();
            const todayString = today.toISOString().split('T')[0];
            
            // Set today for daily attendance report
            const dailyDateInput = document.getElementById('lm-daily-attendance-date');
            if (dailyDateInput) {
                dailyDateInput.value = todayString;
            }
            
            // Set current week for employee reports
            const currentWeekStart = new Date(today);
            currentWeekStart.setDate(today.getDate() - today.getDay());
            const currentWeekEnd = new Date(currentWeekStart);
            currentWeekEnd.setDate(currentWeekStart.getDate() + 6);
            
            const employeeStartDate = document.getElementById('lm-employee-start-date');
            const employeeEndDate = document.getElementById('lm-employee-end-date');
            if (employeeStartDate && employeeEndDate) {
                employeeStartDate.value = currentWeekStart.toISOString().split('T')[0];
                employeeEndDate.value = currentWeekEnd.toISOString().split('T')[0];
            }
            
            // Set current month for leave reports
            const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
            const lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 0);
            
            const leaveStartDate = document.getElementById('lm-leave-requests-start-date');
            const leaveEndDate = document.getElementById('lm-leave-requests-end-date');
            if (leaveStartDate && leaveEndDate) {
                leaveStartDate.value = firstDay.toISOString().split('T')[0];
                leaveEndDate.value = lastDay.toISOString().split('T')[0];
            }
        }

        // Load department employees for dropdown
        async function loadDepartmentEmployees() {
            try {
                console.log('🔄 Loading department employees...');
                
                const response = await fetch('/linemanager/reports/employees');
                                
                if (!response.ok) {
                    console.warn('Could not load department employees, using mock data');
                    // Use mock data for demonstration
                    const mockEmployees = [
                        { userId: '1', firstName: 'John', lastName: 'Smith', department: 'Engineering' },
                        { userId: '2', firstName: 'Jane', lastName: 'Doe', department: 'Engineering' }
                    ];
                    
                    const employeeSelect = document.getElementById('lm-employee-select');
                    if (employeeSelect) {
                        employeeSelect.innerHTML = '<option value="">Choose a team member...</option>';
                        mockEmployees.forEach(employee => {
                            const option = document.createElement('option');
                            option.value = employee.userId;
                            option.textContent = `${employee.firstName} ${employee.lastName} - ${employee.department}`;
                            employeeSelect.appendChild(option);
                        });
                    }
                    return;
                }
                
                const result = await response.json();
                
                if (!result.success) {
                    throw new Error(result.message || 'Failed to load department employees');
                }
                
                const employeeSelect = document.getElementById('lm-employee-select');
                if (employeeSelect && result.employees) {
                    // Clear existing options except the first one
                    employeeSelect.innerHTML = '<option value="">Choose a team member...</option>';
                    
                    // Add employee options
                    result.employees.forEach(employee => {
                        const option = document.createElement('option');
                        option.value = employee.userId;
                        option.textContent = `${employee.firstName} ${employee.lastName} - ${employee.department}`;
                        employeeSelect.appendChild(option);
                    });
                    
                    console.log(`✅ Loaded ${result.employees.length} department employees`);
                }
                
            } catch (error) {
                console.error('❌ Error loading department employees:', error);
                
                const employeeSelect = document.getElementById('lm-employee-select');
                if (employeeSelect) {
                    employeeSelect.innerHTML = '<option value="">Error loading employees</option>';
                }
            }
        }

        // Setup report type change handlers for line manager
        function setupLineManagerReportHandlers() {
            const reportTypeSelect = document.getElementById('lm-employee-report-type');
            const startDateInput = document.getElementById('lm-employee-start-date');
            const endDateInput = document.getElementById('lm-employee-end-date');
            
            if (reportTypeSelect) {
                reportTypeSelect.addEventListener('change', function() {
                    const reportType = this.value;
                    const today = new Date();
                    
                    if (reportType === 'weekly') {
                        const currentWeekStart = new Date(today);
                        currentWeekStart.setDate(today.getDate() - today.getDay());
                        const currentWeekEnd = new Date(currentWeekStart);
                        currentWeekEnd.setDate(currentWeekStart.getDate() + 6);
                        
                        if (startDateInput) startDateInput.value = currentWeekStart.toISOString().split('T')[0];
                        if (endDateInput) endDateInput.value = currentWeekEnd.toISOString().split('T')[0];
                    } else if (reportType === 'monthly') {
                        const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
                        const lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 0);
                        
                        if (startDateInput) startDateInput.value = firstDay.toISOString().split('T')[0];
                        if (endDateInput) endDateInput.value = lastDay.toISOString().split('T')[0];
                    }
                });
            }
            
            // Handle leave report type changes
            const leaveReportTypeSelect = document.getElementById('lm-leave-requests-report-type');
            const leaveStartDateInput = document.getElementById('lm-leave-requests-start-date');
            const leaveEndDateInput = document.getElementById('lm-leave-requests-end-date');
            
            if (leaveReportTypeSelect) {
                leaveReportTypeSelect.addEventListener('change', function() {
                    const reportType = this.value;
                    const today = new Date();
                    
                    if (reportType === 'weekly') {
                        const currentWeekStart = new Date(today);
                        currentWeekStart.setDate(today.getDate() - today.getDay());
                        const currentWeekEnd = new Date(currentWeekStart);
                        currentWeekEnd.setDate(currentWeekStart.getDate() + 6);
                        
                        if (leaveStartDateInput) leaveStartDateInput.value = currentWeekStart.toISOString().split('T')[0];
                        if (leaveEndDateInput) leaveEndDateInput.value = currentWeekEnd.toISOString().split('T')[0];
                    } else if (reportType === 'monthly') {
                        const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
                        const lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 0);
                        
                        if (leaveStartDateInput) leaveStartDateInput.value = firstDay.toISOString().split('T')[0];
                        if (leaveEndDateInput) leaveEndDateInput.value = lastDay.toISOString().split('T')[0];
                    }
                });
            }
        }

        

        // PDF generation functions
        function generateDailyAttendancePDF(doc, data) {
            // Set up document header
            doc.setFontSize(20);
            doc.setTextColor(35, 133, 176);
            doc.text('Department Daily Attendance Report', 20, 20);
            
            // Add date and department info
            doc.setFontSize(12);
            doc.setTextColor(0, 0, 0);
            doc.text(`Date: ${data.reportDate}`, 20, 35);
            doc.text(`Department: ${data.department || 'Your Department'}`, 20, 45);
            doc.setFontSize(10);
            doc.setTextColor(100, 100, 100);
            doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 55);
            
            let yPosition = 70;
            
            // Department Summary Statistics
            if (data.summary) {
                doc.setFontSize(14);
                doc.setTextColor(0, 0, 0);
                doc.text('Department Attendance Summary', 20, yPosition);
                yPosition += 10;
                
                const summaryData = [
                    ['Total Team Members', data.summary.totalEmployees.toString()],
                    ['Present Today', data.summary.present.toString()],
                    ['On Leave', data.summary.onLeave.toString()],
                    ['Late Arrivals', data.summary.late.toString()],
                    ['Early Departures', data.summary.earlyOut.toString()]
                ];
                
                doc.autoTable({
                    startY: yPosition,
                    head: [['Department Metrics', 'Count']],
                    body: summaryData,
                    styles: { fontSize: 10 },
                    headStyles: { fillColor: [35, 133, 176] },
                    columnStyles: {
                        0: { fontStyle: 'bold', cellWidth: 80 },
                        1: { halign: 'center', cellWidth: 30 }
                    }
                });
                
                yPosition = doc.lastAutoTable.finalY + 20;
            }
            
            // Detailed Team Attendance
            if (data.detailedAttendance && Object.keys(data.detailedAttendance).length > 0) {
                const department = Object.keys(data.detailedAttendance)[0];
                const employees = data.detailedAttendance[department];
                
                if (employees && employees.length > 0) {
                    if (yPosition > 150) {
                        doc.addPage();
                        yPosition = 20;
                    }
                    
                    doc.setFontSize(14);
                    doc.setTextColor(0, 0, 0);
                    doc.text(`${department} Team Members`, 20, yPosition);
                    yPosition += 10;
                    
                    const empData = employees.map(emp => [
                        `${emp.lastName}, ${emp.firstName}`,
                        emp.timeIn || 'N/A',
                        emp.timeOut || 'N/A',
                        emp.hoursWorked || 'N/A',
                        emp.status || 'N/A',
                        (emp.lateMinutes || 0).toString(),
                        (emp.earlyOutMinutes || 0).toString(),
                        emp.onLeave ? 'Yes' : 'No'
                    ]);
                    
                    doc.autoTable({
                        startY: yPosition,
                        head: [['Name', 'Time In', 'Time Out', 'Hours', 'Status', 'Late (min)', 'Early (min)', 'On Leave']],
                        body: empData,
                        styles: { fontSize: 8 },
                        headStyles: { fillColor: [35, 133, 176], fontSize: 8 },
                        margin: { left: 10, right: 10 }
                    });
                }
            }
        }

        function generateEmployeeReportPDF(doc, data) {
            // Set up document header
            doc.setFontSize(18);
            doc.setTextColor(35, 133, 176);
            doc.text('Employee Attendance & Leave Report', 20, 20);
            
            // Employee Information
            if (data.employee) {
                doc.setFontSize(14);
                doc.setTextColor(0, 0, 0);
                doc.text('Employee Information', 20, 40);
                
                doc.setFontSize(10);
                doc.text(`Name: ${data.employee.employeeName}`, 20, 50);
                doc.text(`Position: ${data.employee.position}`, 20, 55);
                doc.text(`Department: ${data.employee.department}`, 20, 60);
                doc.text(`Reporting Period: ${data.reportingPeriod.startDate} - ${data.reportingPeriod.endDate}`, 20, 65);
                doc.text(`Report Generated: ${data.reportGenerated}`, 20, 70);
            }
            
            let yPosition = 85;
            
            // Period Overview
            if (data.periodOverview) {
                doc.setFontSize(14);
                doc.setTextColor(0, 0, 0);
                doc.text('Period Overview', 20, yPosition);
                yPosition += 10;
                
                const overviewData = [
                    ['Working Days in Period', data.periodOverview.workingDaysInPeriod.toString()],
                    ['Days Present', data.periodOverview.daysPresent.toString()],
                    ['Days on Leave', data.periodOverview.daysOnLeave.toString()],
                    ['Late Arrivals', data.periodOverview.lateArrivals.toString()],
                    ['Early Outs', data.periodOverview.earlyOuts.toString()],
                    ['Total Work Hours', data.periodOverview.totalWorkHours]
                ];
                
                doc.autoTable({
                    startY: yPosition,
                    head: [['Metric', 'Count']],
                    body: overviewData,
                    styles: { fontSize: 10 },
                    headStyles: { fillColor: [35, 133, 176] },
                    columnStyles: {
                        0: { fontStyle: 'bold', cellWidth: 80 },
                        1: { halign: 'center', cellWidth: 40 }
                    }
                });
                
                yPosition = doc.lastAutoTable.finalY + 20;
            }
            
            // Current Leave Balances
            if (data.currentLeaveBalances && data.currentLeaveBalances.length > 0) {
                if (yPosition > 200) {
                    doc.addPage();
                    yPosition = 20;
                }
                
                doc.setFontSize(14);
                doc.setTextColor(0, 0, 0);
                doc.text('Current Leave Balances', 20, yPosition);
                yPosition += 10;
                
                const balanceData = data.currentLeaveBalances.map(balance => [
                    balance.leaveType,
                    balance.annualEntitlement.toString(),
                    balance.used.toString(),
                    balance.remaining.toString()
                ]);
                
                doc.autoTable({
                    startY: yPosition,
                    head: [['Leave Type', 'Annual Entitlement', 'Used', 'Remaining']],
                    body: balanceData,
                    styles: { fontSize: 10 },
                    headStyles: { fillColor: [35, 133, 176] }
                });
                
                yPosition = doc.lastAutoTable.finalY + 20;
            }
            
            // Detailed Attendance Record
            if (data.detailedAttendanceRecord && data.detailedAttendanceRecord.length > 0) {
                if (yPosition > 150) {
                    doc.addPage();
                    yPosition = 20;
                }
                
                doc.setFontSize(14);
                doc.setTextColor(0, 0, 0);
                doc.text('Detailed Attendance Record', 20, yPosition);
                yPosition += 10;
                
                const attendanceData = data.detailedAttendanceRecord.map(record => [
                    record.date,
                    record.timeIn,
                    record.timeOut,
                    record.hoursWorked,
                    record.status,
                    record.lateMinutes.toString(),
                    record.earlyOutMinutes.toString(),
                    record.onLeave ? 'Y' : 'N'
                ]);
                
                doc.autoTable({
                    startY: yPosition,
                    head: [['Date', 'Time In', 'Time Out', 'Hours', 'Status', 'Late', 'Early', 'Leave']],
                    body: attendanceData,
                    styles: { fontSize: 8 },
                    headStyles: { fillColor: [35, 133, 176], fontSize: 8 },
                    margin: { left: 10, right: 10 }
                });
                
                yPosition = doc.lastAutoTable.finalY + 15;
            }
            
            // Leave Taken
            if (data.leaveTaken && data.leaveTaken.length > 0) {
                if (yPosition > 150) {
                    doc.addPage();
                    yPosition = 20;
                }
                
                doc.setFontSize(14);
                doc.setTextColor(0, 0, 0);
                doc.text('Leave Taken', 20, yPosition);
                yPosition += 10;
                
                const leaveData = data.leaveTaken.map(leave => [
                    leave.date,
                    leave.leaveType,
                    leave.requestedDates,
                    leave.duration.toString(),
                    leave.status,
                    leave.approvedBy,
                    leave.approvalDate
                ]);
                
                doc.autoTable({
                    startY: yPosition,
                    head: [['Date', 'Type', 'Requested Dates', 'Duration', 'Status', 'Approved By', 'Approval Date']],
                    body: leaveData,
                    styles: { fontSize: 8 },
                    headStyles: { fillColor: [35, 133, 176], fontSize: 8 },
                    margin: { left: 5, right: 5 }
                });
            }
        }

        function generateLeaveRequestsReportPDF(doc, data) {
            // Set up document header
            doc.setFontSize(18);
            doc.setTextColor(35, 133, 176);
            doc.text('Department Leave Requests & Balances Report', 20, 20);
            
            // Add generation date
            doc.setFontSize(10);
            doc.setTextColor(100, 100, 100);
            doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 30);
            doc.text(`Period: ${data.startDate} to ${data.endDate}`, 20, 35);
            doc.text(`Department: ${data.department || 'Your Department'}`, 20, 40);
            
            let yPosition = 55;
            
            // Calculate and add summary statistics
            const stats = calculateLeaveRequestsStatistics(data.leaveRequests || []);
            
            doc.setFontSize(14);
            doc.setTextColor(0, 0, 0);
            doc.text('Department Leave Summary Statistics', 20, yPosition);
            yPosition += 10;
            
            const summaryData = [
                ['Total Leave Requests', stats.totalRequests.toString()],
                ['Approved Requests', stats.approvedRequests.toString()],
                ['Pending Your Approval', stats.pendingRequests.toString()],
                ['Rejected Requests', stats.rejectedRequests.toString()],
                ['Total Leave Days Requested', stats.totalDaysRequested.toString()],
                ['Total Leave Days Approved', stats.totalDaysApproved.toString()]
            ];
            
            doc.autoTable({
                startY: yPosition,
                head: [['Summary Statistics', 'Count']],
                body: summaryData,
                styles: { fontSize: 10 },
                headStyles: { fillColor: [35, 133, 176] },
                columnStyles: {
                    0: { fontStyle: 'bold', cellWidth: 80 },
                    1: { halign: 'center', cellWidth: 30 }
                }
            });
            
            yPosition = doc.lastAutoTable.finalY + 20;
            
            // Detailed leave requests
            if (data.leaveRequests && data.leaveRequests.length > 0) {
                if (yPosition > 200) {
                    doc.addPage();
                    yPosition = 20;
                }
                
                doc.setFontSize(12);
                doc.setTextColor(0, 0, 0);
                doc.text('Detailed Leave Requests', 20, yPosition);
                yPosition += 10;
                
                const requestData = data.leaveRequests.map(request => {
                    const fromDate = new Date(request.fromDate);
                    const untilDate = new Date(request.untilDate);
                    const duration = Math.ceil((untilDate - fromDate) / (1000 * 60 * 60 * 24)) + 1;
                    const isApproved = (request.status || '').toLowerCase() === 'approved' ? 'Y' : 'N';
                    
                    return [
                        request.updatedDate ? new Date(request.updatedDate).toLocaleDateString() : new Date(request.fromDate).toLocaleDateString(),
                        `${request.lastName}, ${request.firstName}`,
                        request.leaveType || 'Unknown',
                        `${fromDate.toLocaleDateString()} - ${untilDate.toLocaleDateString()}`,
                        duration.toString(),
                        isApproved,
                        request.remainingBalance || 'N/A',
                        (request.reason || 'No remarks').substring(0, 25) + '...'
                    ];
                });
                
                doc.autoTable({
                    startY: yPosition,
                    head: [['Date Filed', 'Team Member', 'Leave Type', 'Dates', 'Days', 'Approved', 'Balance', 'Remarks']],
                    body: requestData,
                    styles: { fontSize: 7 },
                    headStyles: { fillColor: [35, 133, 176], fontSize: 7 },
                    margin: { left: 5, right: 5 }
                });
                
                yPosition = doc.lastAutoTable.finalY + 15;
            }
            
            // Department summary footer
            if (yPosition > 250) {
                doc.addPage();
                yPosition = 20;
            }
            
            doc.setFontSize(12);
            doc.setTextColor(35, 133, 176);
            doc.text(`Total Department Leave Requests: ${stats.totalRequests}`, 20, yPosition);
            doc.text(`Pending Your Review: ${stats.pendingRequests}`, 20, yPosition + 10);
        }

        // Main function to generate department reports
        async function generateDepartmentReport(reportType, format) {
            const form = document.getElementById(`lm-${reportType}-form`);
            const button = event.target;
            const resultsDiv = document.getElementById(`lm-${reportType}-results`);
            
            // Add loading state
            button.classList.add('loading');
            button.disabled = true;
            
            try {
                console.log(`🔄 [Line Manager] Generating ${reportType} department report in ${format} format...`);
                
                // Check if form exists
                if (!form) {
                    throw new Error(`Form with ID lm-${reportType}-form not found`);
                }

                const formData = new FormData(form);
                const params = new URLSearchParams();
                
                // Add all form data to params
                for (let [key, value] of formData.entries()) {
                    if (value) {
                        params.append(key, value);
                    }
                }
                
                // Add format parameter
                if (format) params.append('format', format);
                
                // Special validation for employee report
                if (reportType === 'employee-report') {
                    const employeeId = formData.get('employeeId');
                    if (!employeeId) {
                        throw new Error('Please select a team member before generating the report.');
                    }
                }
                
                // Determine endpoint based on report type
                let endpoint = '';
                switch(reportType) {
                    case 'daily-attendance':
                        endpoint = '/linemanager/reports/daily-attendance';
                        break;
                    case 'employee-report':
                        endpoint = '/linemanager/reports/employee-attendance';
                        break;
                    case 'leave-report':
                        endpoint = '/linemanager/reports/leave-requests';
                        break;
                    default:
                        throw new Error('Unknown report type: ' + reportType);
                }
                
                console.log(`🌐 [Line Manager] Making request to: ${endpoint}?${params.toString()}`);
                
                if (format === 'pdf') {
                    // Fetch data first
                    const response = await fetch(`${endpoint}?${params.toString()}`);

                    if (!response.ok) {
                        if (response.status === 404) {
                            // Show mock report for demonstration
                            showMockReport(resultsDiv, reportType);
                            return;
                        }
                        const errorText = await response.text();
                        throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
                    }
                    
                    const data = await response.json();
                    
                    if (!data.success) {
                        throw new Error(data.message || 'Failed to generate report');
                    }
                    
                    // Generate PDF
                    try {
                        // Check for both jsPDF and autoTable
                        if (typeof window.jspdf === 'undefined' && typeof window.jsPDF === 'undefined') {
                            throw new Error('jsPDF library is not loaded. Please refresh the page and try again.');
                        }
                        
                        let jsPDF;
                        if (window.jspdf && window.jspdf.jsPDF) {
                            jsPDF = window.jspdf.jsPDF;
                        } else if (window.jsPDF) {
                            jsPDF = window.jsPDF;
                        } else {
                            throw new Error('jsPDF not found. Please refresh the page.');
                        }
                        
                        const doc = new jsPDF();
                        
                        // Check if autoTable is available
                        if (typeof doc.autoTable !== 'function') {
                            throw new Error('jsPDF autoTable plugin is not loaded. Please refresh the page.');
                        }
                        
                        // Use the same PDF generation functions as HR but add department context
                        if (reportType === 'daily-attendance') {
                            generateDailyAttendancePDF(doc, data);
                        } else if (reportType === 'employee-report') {
                            generateEmployeeReportPDF(doc, data);
                        } else if (reportType === 'leave-report') {
                            generateLeaveRequestsReportPDF(doc, data);
                        }
                        
                        // Download the PDF
                        const filename = `department_${reportType.replace('-', '_')}_${new Date().toISOString().split('T')[0]}.pdf`;
                        doc.save(filename);
                        
                        console.log(`✅ Department PDF generated and downloaded: ${filename}`);
                        
                    } catch (pdfError) {
                        console.error('❌ Error generating PDF:', pdfError);
                        alert('Error generating PDF: ' + pdfError.message);
                    }
                    
                } else {
                    // Fetch data for viewing
                    const response = await fetch(`${endpoint}?${params.toString()}`);
                    
                    if (!response.ok) {
                        const errorText = await response.text();
                        throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
                    }
                    
                    const data = await response.json();
                    console.log(`✅ [Line Manager] Received data:`, data);
                    
                    if (!data.success) {
                        throw new Error(data.message || 'Failed to fetch report data');
                    }
                    
                    // Display the data using the same functions as HR
                    if (reportType === 'daily-attendance' || reportType === 'employee-report') {
                        displayAttendanceReportResults(resultsDiv, data, reportType);
                    } else if (reportType === 'leave-report') {
                         displayDepartmentLeaveRequestsReport(resultsDiv, data);
                    }
                    
                    console.log(`✅ [Line Manager] ${reportType} department report displayed successfully`);
                }
                
            } catch (error) {
                console.error(`❌ [Line Manager] Error generating ${reportType} report:`, error);
                alert('Error generating department report: ' + error.message);
            } finally {
                // Remove loading state
                button.classList.remove('loading');
                button.disabled = false;
            }
        }

        // Calculate statistics from leave requests data
        function calculateLeaveRequestsStatistics(leaveRequests) {
            const stats = {
                totalRequests: 0,
                approvedRequests: 0,
                pendingRequests: 0,
                rejectedRequests: 0,
                totalDaysRequested: 0,
                totalDaysApproved: 0
            };
            
            leaveRequests.forEach(request => {
                stats.totalRequests++;
                
                // Calculate duration
                const fromDate = new Date(request.fromDate);
                const untilDate = new Date(request.untilDate);
                const duration = Math.ceil((untilDate - fromDate) / (1000 * 60 * 60 * 24)) + 1;
                
                stats.totalDaysRequested += duration;
                
                // Count by status
                const status = (request.status || '').toLowerCase();
                if (status === 'approved') {
                    stats.approvedRequests++;
                    stats.totalDaysApproved += duration;
                } else if (status === 'pending' || status === 'pending for approval') {
                    stats.pendingRequests++;
                } else if (status === 'rejected') {
                    stats.rejectedRequests++;
                }
            });
            
            return stats;
        }

        // Display functions for reports
        function displayAttendanceReportResults(resultsDiv, data, reportType) {
            if (!resultsDiv) return;
            
            resultsDiv.style.display = 'block';
            resultsDiv.innerHTML = `
                <div class="results-header">
                    <h5>${reportType === 'daily-attendance' ? 'Daily Attendance Report' : 'Employee Attendance Report'}</h5>
                    <span class="report-date">${data.reportDate || data.reportingPeriod?.startDate || 'N/A'}</span>
                </div>
                
                <div class="results-summary">
                    <div class="summary-stat">
                        <div class="summary-stat-value">${data.summary?.totalEmployees || data.periodOverview?.workingDaysInPeriod || 0}</div>
                        <div class="summary-stat-label">${reportType === 'daily-attendance' ? 'Total Employees' : 'Working Days'}</div>
                    </div>
                    <div class="summary-stat">
                        <div class="summary-stat-value">${data.summary?.present || data.periodOverview?.daysPresent || 0}</div>
                        <div class="summary-stat-label">${reportType === 'daily-attendance' ? 'Present' : 'Days Present'}</div>
                    </div>
                    <div class="summary-stat">
                        <div class="summary-stat-value">${data.summary?.onLeave || data.periodOverview?.daysOnLeave || 0}</div>
                        <div class="summary-stat-label">On Leave</div>
                    </div>
                    <div class="summary-stat">
                        <div class="summary-stat-value">${data.summary?.late || data.periodOverview?.lateArrivals || 0}</div>
                        <div class="summary-stat-label">Late</div>
                    </div>
                </div>
                
                <div class="data-table-container">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Status</th>
                                <th>Time In</th>
                                <th>Time Out</th>
                                <th>Hours</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${generateTableRows(data)}
                        </tbody>
                    </table>
                </div>
            `;
        }

        function displayLeaveRequestsReport(resultsDiv, data) {
            if (!resultsDiv) return;
            
            resultsDiv.style.display = 'block';
            resultsDiv.innerHTML = `
                <div class="results-header">
                    <h5>Leave Requests Report</h5>
                    <span class="report-date">${data.startDate} to ${data.endDate}</span>
                </div>
                
                <div class="results-summary">
                    <div class="summary-stat">
                        <div class="summary-stat-value">${data.statistics?.totalRequests || 0}</div>
                        <div class="summary-stat-label">Total Requests</div>
                    </div>
                    <div class="summary-stat">
                        <div class="summary-stat-value">${data.statistics?.approvedRequests || 0}</div>
                        <div class="summary-stat-label">Approved</div>
                    </div>
                    <div class="summary-stat">
                        <div class="summary-stat-value">${data.statistics?.pendingRequests || 0}</div>
                        <div class="summary-stat-label">Pending</div>
                    </div>
                    <div class="summary-stat">
                        <div class="summary-stat-value">${data.statistics?.rejectedRequests || 0}</div>
                        <div class="summary-stat-label">Rejected</div>
                    </div>
                </div>
                
                <div class="data-table-container">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Employee</th>
                                <th>Leave Type</th>
                                <th>From Date</th>
                                <th>Until Date</th>
                                <th>Status</th>
                                <th>Duration</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${generateLeaveTableRows(data)}
                        </tbody>
                    </table>
                </div>
            `;
        }

        function generateTableRows(data) {
            if (data.detailedAttendance) {
                // Daily attendance report
                const department = Object.keys(data.detailedAttendance)[0];
                const employees = data.detailedAttendance[department] || [];
                
                return employees.map(emp => `
                    <tr>
                        <td>${emp.firstName} ${emp.lastName}</td>
                        <td><span class="status-badge status-${emp.status.toLowerCase().replace(' ', '-')}">${emp.status}</span></td>
                        <td>${emp.timeIn}</td>
                        <td>${emp.timeOut}</td>
                        <td>${emp.hoursWorked}</td>
                    </tr>
                `).join('');
            } else if (data.detailedAttendanceRecord) {
                // Employee report
                return data.detailedAttendanceRecord.map(record => `
                    <tr>
                        <td>${record.date}</td>
                        <td><span class="status-badge status-${record.status.toLowerCase().replace(' ', '-')}">${record.status}</span></td>
                        <td>${record.timeIn}</td>
                        <td>${record.timeOut}</td>
                        <td>${record.hoursWorked}</td>
                    </tr>
                `).join('');
            }
            return '<tr><td colspan="5">No data available</td></tr>';
        }

        function generateLeaveTableRows(data) {
            if (!data.leaveRequests || data.leaveRequests.length === 0) {
                return '<tr><td colspan="6">No leave requests found</td></tr>';
            }
            
            return data.leaveRequests.map(leave => `
                <tr>
                    <td>${leave.firstName} ${leave.lastName}</td>
                    <td>${leave.leaveType}</td>
                    <td>${leave.fromDate}</td>
                    <td>${leave.untilDate}</td>
                    <td><span class="leave-status-badge leave-status-${leave.status.toLowerCase().replace(' ', '-')}">${leave.status}</span></td>
                    <td>${leave.duration} days</td>
                </tr>
            `).join('');
        }

        // Department-specific leave report display
        function displayDepartmentLeaveRequestsReport(resultsDiv, data) {
            if (!resultsDiv) {
                console.error('❌ Results div not found');
                return;
            }
            
            resultsDiv.style.display = 'block';
            
            // Fallback to simple display
            resultsDiv.innerHTML = `
                <div class="results-header">
                    <h5>Department Leave Requests Report</h5>
                    <span class="report-date">${data.startDate} to ${data.endDate}</span>
                </div>
                
                <div class="results-summary">
                    <div class="summary-stat">
                        <div class="summary-stat-value">${data.statistics?.totalRequests || 0}</div>
                        <div class="summary-stat-label">Total Team Requests</div>
                    </div>
                    <div class="summary-stat">
                        <div class="summary-stat-value">${data.statistics?.approvedRequests || 0}</div>
                        <div class="summary-stat-label">Approved</div>
                    </div>
                    <div class="summary-stat">
                        <div class="summary-stat-value">${data.statistics?.pendingRequests || 0}</div>
                        <div class="summary-stat-label">Pending Your Approval</div>
                    </div>
                    <div class="summary-stat">
                        <div class="summary-stat-value">${data.statistics?.rejectedRequests || 0}</div>
                        <div class="summary-stat-label">Rejected</div>
                    </div>
                </div>
                
                <div class="data-table-container">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Team Member</th>
                                <th>Leave Type</th>
                                <th>From Date</th>
                                <th>Until Date</th>
                                <th>Duration</th>
                                <th>Status</th>
                                <th>Remaining Balance</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${generateDepartmentLeaveTableRows(data)}
                        </tbody>
                    </table>
                </div>
            `;
        }

        // Generate table rows for department leave requests
        function generateDepartmentLeaveTableRows(data) {
            if (!data.leaveRequests || data.leaveRequests.length === 0) {
                return '<tr><td colspan="7">No leave requests found for your department</td></tr>';
            }
            
            return data.leaveRequests.map(leave => {
                const fromDate = new Date(leave.fromDate);
                const untilDate = new Date(leave.untilDate);
                const duration = Math.ceil((untilDate - fromDate) / (1000 * 60 * 60 * 24)) + 1;
                
                return `
                    <tr>
                        <td>${leave.firstName} ${leave.lastName}</td>
                        <td><span class="leave-type-badge">${leave.leaveType}</span></td>
                        <td>${leave.fromDate}</td>
                        <td>${leave.untilDate}</td>
                        <td>${duration} day(s)</td>
                        <td><span class="leave-status-badge leave-status-${leave.status.toLowerCase().replace(/\s+/g, '-')}">${leave.status}</span></td>
                        <td class="leave-balance-display">${leave.remainingBalance || 'N/A'}</td>
                    </tr>
                `;
            }).join('');
        }

        function showMockReport(resultsDiv, reportType) {
            if (!resultsDiv) return;
            
            resultsDiv.style.display = 'block';
            resultsDiv.innerHTML = `
                <div class="results-header">
                    <h5>Demo ${reportType.charAt(0).toUpperCase() + reportType.slice(1).replace('-', ' ')} Report</h5>
                    <span class="report-date">Demo Data</span>
                </div>
                <div class="no-data">
                    <i class="fas fa-info-circle"></i>
                    <p>This is a demo report. Connect your backend routes to see real data.</p>
                </div>
            `;
        }
        
        // Original sidebar functionality 
        document.querySelectorAll('.sidebar ul li a').forEach(link => {
            link.addEventListener('click', function() {
                document.querySelectorAll('.sidebar ul li a').forEach(link => link.classList.remove('active'));
                this.classList.add('active');
            });
        });
        
        document.querySelectorAll('.collapsible-header').forEach(header => {
            header.addEventListener('click', function() {
                var content = this.nextElementSibling;
                if (content.style.display === 'block') {
                    content.style.display = 'none';
                } else {
                    // Hide all other collapsible contents
                    document.querySelectorAll('.collapsible-content').forEach(item => {
                        if (item !== content) {
                            item.style.display = 'none';
                        }
                    });
                    content.style.display = 'block';
                }
            });
        });
    </script>
</body>
</html>