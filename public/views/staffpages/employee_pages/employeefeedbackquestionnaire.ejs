<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Questionnaires</title>
    <link rel="stylesheet" href="/path/to/your/css/styles.css"> <!-- Update with actual CSS path -->
    <link rel="stylesheet" href="/css/sidebar.css"> <!-- Linking Sidebar CSS -->
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
</head>

<style>
.container {
    max-width: 1000px; /* Maximum width of the container */
    margin: 0 auto; /* Center the container horizontally */
    margin-left: 450px; /* Adjust this value based on your sidebar width */
    padding: 20px;
    font-family: 'Inter', sans-serif;
}
    .employee-info {
        margin-bottom: 20px;
        padding: 15px;
        background-color: #e9f5ff;
        border-radius: 8px;
        border: 1px solid #cce7ff;
    }

    .questionnaires-list {
        margin-top: 20px;
        overflow-y: auto;
        max-height: 70vh;
    }

    .questionnaire-item {
        border: 1px solid #ccc;
        padding: 15px;
        margin-bottom: 15px;
        border-radius: 8px;
        background-color: #f9f9f9;
    }

    .star-rating i {
        font-size: 24px;
        cursor: pointer;
        color: #ddd;
    }

    .star-rating i.selected {
        color: gold;
    }

    textarea {
        width: 100%;
        height: 80px;
        margin-top: 10px;
        margin-bottom: 10px;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    ul {
        padding-left: 20px;
        margin-bottom: 10px;
    }

    ul li {
        margin-bottom: 5px;
    }
</style>
<body>
    <<%- include('../../partials/employee_partials') %>
    <div class="container">
        <header>
            <h1>360-Degree Feedback Evaluation Set Within the Department</h1>
            <p>Below are all the questionnaires assigned to you. Please provide your feedback as required.</p>
        </header>

        <!-- Select Dropdown for Users in the Same Department -->
        <div>
            <label for="userSelect"><strong>Select User:</strong></label>
            <select id="userSelect">
                <option value="">-- Select User --</option>
                <% usersArray.forEach(user => { %>
                    <option value="<%= user.userId %>"><%= user.firstName %> <%= user.lastName %></option>
                <% }) %>
            </select>
        </div>
        
        <!-- Hidden Inputs -->
        <input type="hidden" id="departmentId" value="<%= user.departmentId || '' %>">
        <input type="hidden" id="userId" value="<%= user.userId || '' %>">
        
        <!-- Feedback Form -->
        <form id="feedbackForm" method="POST" action="/linemanager/records-performance-tracker/questionnaire/<%= user.userId || '#' %>">
            <section id="feedback-section" class="fade-out" style="display: none;">
                <input type="hidden" id="userId" value="<%= user.userId %>">
                <div class="form-header">
                    <h2>360 Degree Feedback Questionnaire</h2>
                    <div class="date-inputs">
                        <div class="date-input">
                            <label for="startDate"><strong>Start Date:</strong></label>
                            <input type="date" id="startDate" name="startDate" class="input-field" required>
                        </div>
                        <div class="date-input">
                            <label for="endDate"><strong>End Date:</strong></label>
                            <input type="date" id="endDate" name="endDate" class="input-field" required>
                        </div>
                    </div>
                </div>
                
                <h3 style="font-weight: bold; font-size: 1.2em; margin-top: 20px;">Instructions</h3>
                <p><strong>Setting Start and End Date:</strong> When creating a 360-degree feedback questionnaire, it is essential to set a start and end date...</p>
                
                <div class="feedback-header-grid">
                    <div><strong>Employee Name:</strong> <span id="employeeName"></span></div>
                    <div><strong>Position:</strong> <span id="employeePosition"></span></div>
                    <div><strong>Company:</strong> Prime Infrastructure</div>
                    <div><strong>Department:</strong> <span id="employeeDepartment"></span></div>
                </div>
                
                <hr class="divider" />
                
                <p style="font-weight: bold; font-size: 1.1em; margin-top: 20px;">Objective Setting Questions</p>
                
                <table>
                    <thead>
                        <tr>
                            <th>KRA/Objectives</th>
                            <th>KPI</th>
                            <th>Target</th>
                            <th>UOM</th>
                            <th>Assigned Weight</th>
                        </tr>
                    </thead>
                    <tbody id="feedback-table-body">
                        <!-- Populate objectives dynamically -->
                    </tbody>
                </table>

                <p style="font-weight: bold; font-size: 1.1em; margin-top: 20px;">Hard Skills</p>
                <table id="hardSkillsTable">
                    <thead>
                        <tr>
                            <th>Skill Name</th>
                        </tr>
                    </thead>
                    <tbody id="hard-skills-table-body">
                        <!-- Populate hard skills dynamically -->
                    </tbody>
                </table>
                
                <p style="font-weight: bold; font-size: 1.1em; margin-top:  20px;">Soft Skills</p>
                <table id="softSkillsTable">
                    <thead>
                        <tr>
                            <th>Skill Name</th>
                        </tr>
                    </thead>
                    <tbody id="soft-skills-table-body">
                        <!-- Populate soft skills dynamically -->
                    </tbody>
                </table>
                
                <button id="saveQ1_360FeedbackPreset Button" type="submit">Save Questionnaire</button>
            </section>
        </form>
    </div>
    <script>
        let submittedObjectives = [];
        let hardSkills = [];
        let softSkills = [];

        document.getElementById('userSelect').addEventListener('change', async function() {
    const selectedUserId = this.value;

    console.log("Selected User ID:", selectedUserId);

    // Check if selectedUser Id is valid
    if (selectedUserId && selectedUserId !== "undefined") {
        try {
            const feedbackResponse = await fetch(`/employee/employeefeedbackquestionnaire?userId=${selectedUserId}`, {
                method: 'GET', // Explicitly set the method to GET
                headers: { 'Accept': 'application/json' },
            });

            // Get the raw response text
            const responseText = await feedbackResponse.text(); 
            console.log("Raw Response:", responseText); // Log the raw response

            // Check if the response is OK
            if (!feedbackResponse.ok) {
                console.warn(`Failed to fetch feedback data for user ID ${selectedUserId}. Response status: ${feedbackResponse.status}`);
                return;
            }

            // Parse the response as JSON
            const feedbackData = JSON.parse(responseText);
            console.log("Feedback Data Received:", feedbackData);

            if (feedbackData.success) {
                submittedObjectives = feedbackData.feedbackDetails.flatMap(detail => detail.objectives) || [];
                hardSkills = feedbackData.feedbackDetails.flatMap(detail => detail.skills.filter(skill => skill.type === 'hard')) || [];
                softSkills = feedbackData.feedbackDetails.flatMap(detail => detail.skills.filter(skill => skill.type === 'soft')) || [];
                updateFeedbackForm(selectedUserId, feedbackData);
            } else {
                console.warn("No feedback data available for this user.");
            }
        } catch (error) {
            console.error('Error:', error);
        }
    } else {
        console.warn("No valid User ID selected.");
        const feedbackSection = document.getElementById("feedback-section");
        if (feedbackSection) {
            feedbackSection.style.display = "none";
        }
    }
});

        function updateFeedbackForm(selectedUserId, feedbackData) {
            const feedbackSection = document.getElementById("feedback-section");
            if (feedbackSection) {
                feedbackSection.style.display = "block";
            }

            const employeeName = document.getElementById("employeeName");
            const employeePosition = document.getElementById("employeePosition");
            const employeeDepartment = document.getElementById("employeeDepartment");

            const selectedUser  = feedbackData.usersArray.find(user => user.userId === selectedUserId);
            if (selectedUser ) {
                employeeName.textContent = `${selectedUser .firstName} ${selectedUser .lastName}`;
                employeePosition.textContent = feedbackData.jobTitle || 'N/A';
                employeeDepartment.textContent = feedbackData.deptName || 'N/A';
            }

            const feedbackTableBody = document.getElementById('feedback-table-body');
            feedbackTableBody.innerHTML = '';

            if (submittedObjectives.length > 0) {
                submittedObjectives.forEach(objective => {
                    addFormFeedbackRow(objective);
                });
            }

            addFormFeedbackSkillsRows(hardSkills, 'hard');
            addFormFeedbackSkillsRows(softSkills, 'soft');
        }

        function addFormFeedbackRow(objective) {
            const tbody = document.getElementById('feedback-table-body');
            const row = document.createElement('tr');
            row.innerHTML = `
                <td><strong>${objective.objectiveQualiQuestion || 'N/A'}</strong></td>
                <td><strong>N/A</strong></td>
                <td><strong>N/A</strong></td>
                <td><strong>N/A</strong></td>
                <td><strong>N/A</strong></td>
            `;
            tbody.appendChild(row);

            const inputRow = document.createElement('tr');
            const inputId = `qualitativeInput_${objective.objectiveId}`;
            const questionText = objective.objectiveQualiQuestion || 'Enter your feedback here';

            inputRow.innerHTML = `
                <td colspan="5">
                    <div style="margin-bottom: 10px;">
                        <label for="${inputId}">▶ Guide Question here for qualitative and quantitative feedback:</label>
                        <input id="${inputId}" type="text"
                            value="${questionText.trim() ? questionText : ''}"
                            placeholder="${questionText.trim() ? '' : 'Enter your feedback here'}"
                            name="kraObjectivesInput"
                            required
                            style="width: 100%; box-sizing: border-box;"
                            data-objective-id="${objective.objectiveId}">
                    </div>
                </td>
            `;
            tbody.appendChild(inputRow);

            const raterRow = document.createElement('tr');
            const starRatingId = `starRating${objective.objectiveId}`;
            const ratingSectionId = `ratingSection${objective.objectiveId}`;

            raterRow.innerHTML = `
                <td colspan="5">
                    <button type="button" onclick="toggleRatingSection('${ratingSectionId}')" style="background-color: gray; color: white; border: none; padding: 8px 12px ; cursor: pointer; border-radius: 4px;">
                        View Rater's View
                    </button>
                    <div id="${ratingSectionId}" style="display: none; margin-top: 10px;">
                        <div style="margin-bottom: 10px;">
                            <label><strong>Quantitative (Rating Scale):</strong></label>
                            <div style="font-size: 14px; margin-top: 5px;">
                                Rate from 1 to 5 based on the corresponding skill performed during the quarter.
                            </div>
                            <span style="font-size: 24px;" id="${starRatingId}" data-rating="0">
                                <i class="fa-solid fa-star" data-value="1"></i>
                                <i class="fa-solid fa-star" data-value="2"></i>
                                <i class="fa-solid fa-star" data-value="3"></i>
                                <i class="fa-solid fa-star" data-value="4"></i>
                                <i class="fa-solid fa-star" data-value="5"></i>
                            </span>
                        </div>
                        <div style="margin-bottom: 10px;">
                            <label><strong>Qualitative (Open-ended):</strong></label>
                            <input type="text" placeholder="Place your qualitative feedback here." style="width: 100%; box-sizing: border-box;">
                        </div>
                    </div>
                </td>
            `;
            tbody.appendChild(raterRow);

            const stars = document.querySelectorAll(`#${starRatingId} .fa-star`);
            stars.forEach(star => {
                star.addEventListener('click', function() {
                    const rating = this.getAttribute('data-value');
                    const starContainer = document.getElementById(starRatingId);
                    starContainer.setAttribute('data-rating', rating);
                    updateStarDisplay(stars, rating);
                });
            });
        }

        function addFormFeedbackSkillsRows(skills, skillType) {
            const skillTableBody = document.querySelector(`#${skillType}-skills-table-body`);

            if (!skillTableBody) {
                console.log("Skill table body not found for:", skillType);
                return;
            }

            skills.forEach(skill => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>
                        <span><strong>${skill.jobReqSkillName || 'N/A'}</strong></span>
                    </td>
                `;
                skillTableBody.appendChild(row);

                const inputRow = document.createElement('tr');
                const starRatingId = `${skillType}SkillRow${skill.jobReqSkillName.replace(/\s+/g, '_')}Rating`;
                const ratingSectionId = `ratingSection${skill.jobReqSkillName.replace(/\s+/g, '_')}`;

                inputRow.innerHTML = `
                    <td colspan="1">
                        <button type="button" onclick="toggleRatingSection('${ratingSectionId}')" style="background-color: gray; color: white; border: none; padding: 8px 12px; cursor: pointer; border-radius: 4px;">
                            View Rater's View
                        </button>
                        <div id="${ratingSectionId}" style="display: none; margin-top: 10px;">
                            <div style="margin-bottom: 10px;">
                                <label><strong>Quantitative (Rating Scale):</strong></label>
                                <div style="font-size: 14px; margin-top: 5px;">
                                    Rate from 1 to 5 based on the corresponding skill performed during the quarter.
                                </div>
                                <span style="font-size: 24px;" id="${starRatingId}" data-rating="0">
                                    <i class="fa-solid fa-star" data-value="1"></i>
                                    <i class="fa-solid fa-star" data-value="2"></i>
                                    <i class="fa-solid fa-star" data-value="3"></i>
                                    <i class="fa-solid fa-star" data-value="4"></i>
                                    <i class="fa-solid fa-star" data-value="5"></i>
                                </span>
                            </div>
                            <div style="margin-bottom: 10px;">
                                <label><strong>Qualitative (Open-ended):</strong></label>
                                <input type="text" placeholder="Place your qualitative feedback here." style="width: 100%; box-sizing: border-box;">
                            </div>
                        </div>
                    </td>
                `;
                skillTableBody.appendChild(inputRow);
            });
        }

        function toggleRatingSection(sectionId) {
            const section = document.getElementById(sectionId);
            if (section) {
                section.style.display = section.style.display === 'none' ? 'block' : 'none';
 }
        }

        function updateStarDisplay(stars, rating) {
            stars.forEach(star => {
                star.style.color = star.getAttribute('data-value') <= rating ? 'gold' : 'gray';
            });
        }
    </script>
</html>

<!-- 
<script>
    let submittedObjectives = [];
    let hardSkills = [];
    let softSkills = [];

    document.getElementById('userSelect').addEventListener('change', async function () {
        const selectedUserId = this.value;

        if (selectedUserId) {
            try {
                const feedbackResponse = await fetch(`/employee/employeefeedbackquestionnaire?userId=${selectedUserId}`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });

                if (!feedbackResponse.ok) {
                    throw new Error(`HTTP error! status: ${feedbackResponse.status}`);
                }

                const feedbackData = await feedbackResponse.json();

                if (feedbackData.success) {
                    // Update UI with feedbackData
                    const selectedUser  = feedbackData.user; // Assuming user details are returned
                    document.getElementById('selectedUserName').innerText = `${selectedUser.firstName} ${selectedUser.lastName}`;
                    document.getElementById('selectedUserPosition').innerText = selectedUser.jobTitle; 
                    document.getElementById('selectedUserDepartment').innerText = selectedUser.deptName; 

                    // Populate feedback details
                    submittedObjectives = feedbackData.feedbackDetails.objectives || [];
                    hardSkills = feedbackData.feedbackDetails.skills || [];
                    softSkills = feedbackData.feedbackDetails.softSkills || [];

                    showFeedbackForm();
                } else {
                    console.warn("No feedback data available for this user.");
                    clearFeedbackForm();
                }
            } catch (error) {
                console.error('Error:', error);
                clearFeedbackForm();
            }
        } else {
            clearFeedbackForm();
        }
    });

    function showFeedbackForm() {
        const feedbackSection = document.getElementById("feedback-section");
        if (feedbackSection) {
            feedbackSection.style.display = "block";
        }

        const feedbackTableBody = document.getElementById('feedback-table-body');
        feedbackTableBody.innerHTML = '';

        submittedObjectives.forEach(objective => {
            addFormFeedbackRow(objective);
        });

        addFormFeedbackSkillsRows(hardSkills, 'hard');
        addFormFeedbackSkillsRows(softSkills, 'soft');
    }

    function addFormFeedbackRow(objective) {
        const tbody = document.getElementById('feedback-table-body');
        if (!tbody) {
            console.error("Feedback table body not found.");
            return;
        }

        // Create objective information row
        const row = document.createElement('tr');
        row.innerHTML = `
            <td><strong>${objective.objectiveQualiQuestion || 'N/A'}</strong></td>
            <td><strong>${objective.kpi || 'N/A'}</strong></td>
            <td><strong>${objective.target || 'N/A'}</strong></td>
            <td><strong>${objective.uom || 'N/A'}</strong></td>
            <td><strong>${objective.assignedWeight || 'N/A'}</strong></td>
        `;
        tbody.appendChild(row);

        // Create input row for qualitative feedback
        const inputRow = document.createElement('tr');
        const inputId = `qualitativeInput_${objective.objectiveId}`;
        inputRow.innerHTML = `
            <td colspan="5">
                <div style="margin-bottom: 10px;">
                    <label for="${inputId}">▶ Guide Question:</label>
                    <input id="${inputId}" type="text" 
                        placeholder="Provide your qualitative feedback here"
                        value="${objective.objectiveQualiQuestion || ''}" 
                        name="kraObjectivesInput"
                        required 
                        style="width: 100%; box-sizing: border-box;"
                        data-objective-id="${objective.objectiveId}">
                </div>
            </td>
        `;
        tbody.appendChild(inputRow);

        // Add Rater's View Section
        const raterRow = document.createElement('tr');
        const starRatingId = `starRating_${objective.objectiveId}`;
        const ratingSectionId = `ratingSection_${objective.objectiveId}`;
        raterRow.innerHTML = `
            <td colspan="5">
                <button type="button" onclick="toggleRatingSection('${ratingSectionId}')" style="background-color: gray; color: white; border: none; padding: 8px 12px; cursor: pointer; border-radius: 4px;">
                    View Rater's View
                </button>
                <div id="${ratingSectionId}" style="display: none; margin-top: 10px;">
                    <div style="margin-bottom: 10px;">
                        <label><strong>Quantitative (Rating Scale):</strong></label>
                        <div>Rate from 1 to 5 based on performance during the quarter.</div>
                        <span style="font-size: 24px; cursor: pointer;" id="${starRatingId}" data-rating="0">
                            <i class="fa-solid fa-star" data-value="1"></i>
                            <i class="fa-solid fa-star" data-value="2"></i>
                            <i class="fa-solid fa-star" data-value="3"></i>
                            <i class="fa-solid fa-star" data-value="4"></i>
                            <i class="fa-solid fa-star" data-value="5"></i>
                        </span>
                    </div>
                    <div style="margin-bottom: 10px;">
                        <label><strong>Qualitative (Open-ended):</strong></label>
                        <input type="text" placeholder="Provide qualitative feedback" style="width: 100%; box-sizing: border-box;">
                    </div>
                </div>
            </td>
        `;
        tbody.appendChild(raterRow);

        // Add star click event listeners
        const stars = document.querySelectorAll(`#${starRatingId} .fa-star`);
        stars.forEach(star => {
            star.addEventListener('click', function () {
                const rating = this.getAttribute('data-value');
                const starContainer = document.getElementById(starRatingId);
                starContainer.setAttribute('data-rating', rating);
                updateStarDisplay(stars, rating);
            });
        });
    }

    function addFormFeedbackSkillsRows(skills, skillType) {
        const skillTableBody = document.querySelector(`#${skillType}-skills-table-body`);
        if (!skillTableBody) {
            console.error("Skill table body not found for:", skillType);
            return;
        }

        skills.forEach(skill => {
            // Create skill row
            const row = document.createElement('tr');
            row.innerHTML = `<td><strong>${skill.jobReqSkillName || 'N/A'}</strong></td>`;
            skillTableBody.appendChild(row);

            // Create Rater's View section
            const inputRow = document.createElement('tr');
            const starRatingId = `${skillType}_SkillRating_${skill.jobReqSkillName.replace(/\s+/g, '_')}`;
            const ratingSectionId = `ratingSection_${skill.jobReqSkillName.replace(/\s+/g, '_')}`;

            inputRow.innerHTML = `
                <td>
                    <button type="button" onclick="toggleRatingSection('${ratingSectionId}')" style="background-color: gray; color: white; border: none; padding: 8px 12px; cursor: pointer; border-radius: 4px;">
                        View Rater's View
                    </button>
                    <div id="${ratingSectionId}" style="display: none; margin-top: 10px;">
                        <div style="margin-bottom: 10px;">
                            <label><strong>Quantitative (Rating Scale):</strong></label>
                            <div>Rate from 1 to 5 based on performance.</div>
                            <span style="font-size: 24px;" id="${starRatingId}" data-rating="0">
                                <i class="fa-solid fa-star" data-value="1"></i>
                                <i class="fa-solid fa-star" data-value="2"></i>
                                <i class="fa-solid fa-star" data-value="3"></i>
                                <i class="fa-solid fa-star" data-value="4"></i>
                                <i class="fa-solid fa-star" data-value="5"></i>
                            </span>
                        </div>
                        <div style="margin-bottom: 10px;">
                            <label><strong>Qualitative Feedback:</strong></label>
                            <input type="text" placeholder="Provide feedback here" style="width: 100%; box-sizing: border-box;">
                        </div>
                    </div>
                </td>
            `;
            skillTableBody.appendChild(inputRow);
        });
    }

    function clearFeedbackForm() {
        const feedbackSection = document.getElementById("feedback-section");
        if (feedbackSection) {
            feedbackSection.style.display = "none";
        }

        document.getElementById('feedback-table-body').innerHTML = '';
        document.getElementById('hard-skills-table-body').innerHTML = '';
        document.getElementById('soft-skills-table-body').innerHTML = '';

        // Clear user info display
        document.getElementById('selectedUser  Name').innerText = '';
        document.getElementById('selectedUser  Position').innerText = '';
        document.getElementById('selectedUser  Department').innerText = '';
    }

    // Function to toggle the visibility of the rating section
    function toggleRatingSection(sectionId) {
        const section = document.getElementById(sectionId);
        if (section.style.display === 'none') {
            section.style.display = 'block'; // Show the rating section
        } else {
            section.style.display = 'none'; // Hide the rating section
        }
    }

    // Function to update star display based on the rating
    function updateStarDisplay(stars, rating) {
        stars.forEach(star => {
            if (star.getAttribute('data-value') <= rating) {
                star.class 
                star.classList.add('checked'); // Add checked class for selected stars
            } else {
                star.classList.remove('checked'); // Remove checked class for unselected stars
            }
        });
    }

    function setRating(rowId, rating) {
        const starRating = document.getElementById(`${rowId}Rating`);

        // Get all star icons (they are <i> elements)
        const stars = starRating.getElementsByTagName('i');

        // Loop through the stars and apply the "checked" class based on the rating
        for (let i = 0; i < stars.length; i++) {
            if (i < rating) {
                stars[i].classList.add('checked');  // Add "checked" class for selected stars
            } else {
                stars[i].classList.remove('checked');  // Remove "checked" class for unselected stars
            }
        }

        // Update the data-rating attribute to reflect the selected rating
        starRating.setAttribute('data-rating', rating);
    }
</script> -->
