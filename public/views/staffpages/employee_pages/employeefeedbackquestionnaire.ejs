<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Questionnaires</title>
    <link rel="stylesheet" href="/path/to/your/css/styles.css"> <!-- Update with actual CSS path -->
    <link rel="stylesheet" href="/css/sidebar.css"> <!-- Linking Sidebar CSS -->
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
</head>

<style>
.container {
    max-width: 1000px; /* Maximum width of the container */
    margin: 0 auto; /* Center the container horizontally */
    margin-left: 450px; /* Adjust this value based on your sidebar width */
    padding: 20px;
    font-family: 'Inter', sans-serif;
}
    .employee-info {
        margin-bottom: 20px;
        padding: 15px;
        background-color: #e9f5ff;
        border-radius: 8px;
        border: 1px solid #cce7ff;
    }

    .questionnaires-list {
        margin-top: 20px;
        overflow-y: auto;
        max-height: 70vh;
    }

    .questionnaire-item {
        border: 1px solid #ccc;
        padding: 15px;
        margin-bottom: 15px;
        border-radius: 8px;
        background-color: #f9f9f9;
    }

    .star-rating i {
        font-size: 24px;
        cursor: pointer;
        color: #ddd;
    }

    .star-rating i.selected {
        color: gold;
    }

    textarea {
        width: 100%;
        height: 80px;
        margin-top: 10px;
        margin-bottom: 10px;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    ul {
        padding-left: 20px;
        margin-bottom: 10px;
    }

    ul li {
        margin-bottom: 5px;
    }
</style>
<body>
    <%- include('../../partials/employee_partials') %>
    <div class="container">
        <header>
            <h1>Questionnaires for <span id="userName"><%= user.firstName || "First Name" %> <%= user.lastName || "Last Name" %></span></h1>
            <p>Below are all the questionnaires assigned to you. Please provide your feedback as required.</p>
        </header>
    
        <!-- Select Dropdown for Users in the Same Department -->
        <div>
            <label for="userSelect"><strong>Select User:</strong></label>
            <select id="userSelect">
                <option value="">-- Select User --</option>
                <% usersArray.forEach(user => { %>
                    <option value="<%= user.userId %>"><%= user.firstName %> <%= user.lastName %></option>
                <% }) %>
            </select>
        </div>
        
        <!-- Hidden Inputs -->
        <input type="hidden" id="departmentId" value="<%= user.departmentId || '' %>">
        <input type="hidden" id="userId" value="<%= user.userId || '' %>">
    
        <!-- Feedback Form -->
        <form id="feedbackForm" method="POST" action="/linemanager/records-performance-tracker/questionnaire/<%= user.userId || '#' %>">
            <section id="feedback-section" class="fade-out" style="display: none;">
                <input type="hidden" id="userId" value="<%= user.userId %>">
                <div class="form-header">
                    <h2>360 Degree Feedback Questionnaire</h2>
                    <div class="date-inputs">
                        <!-- Start Date -->
                        <div class="date-input">
                            <label for="startDate"><strong>Start Date:</strong></label>
                            <input type="date" id="startDate" name="startDate" class="input-field" required>
                        </div>
                        
                        <!-- End Date -->
                        <div class="date-input">
                            <label for="endDate"><strong>End Date:</strong></label>
                            <input type="date" id="endDate" name="endDate" class="input-field" required>
                        </div>
                    </div>
                </div>
                
                <!-- Instructions Label -->
                <h3 style="font-weight: bold; font-size: 1.2em; margin-top: 20px;">Instructions</h3>
                <br>
                <p><strong>Setting Start and End Date:</strong> When creating a 360-degree feedback questionnaire, it is essential to set a start and end date. This schedule will automatically notify employees through the system, ensuring that they are aware of the timeframe for providing feedback.</p>
                
                <p><strong>Setting of Guide Questions:</strong> The Line Manager should prepare guide questions that support co-employees in providing both qualitative and quantitative feedback for each role-specific objective. Additionally, employees will rate the hard and soft skills required for the job, offering qualitative comments and quantitative scores. These structured questions enable clear, measurable evaluations and ensure alignment with the objectives being tracked.</p>                    
                
                <div class="feedback-header-grid">
                    <div><strong>Employee Name:</strong> <%= user.lastName %>, <%= user.firstName %></div>
                    <div><strong>Position:</strong> <%= user.jobTitle %></div>
                    <div><strong>Company:</strong> Prime Infrastructure</div>
                    <div><strong>Department:</strong> <%= user.deptName %></div>
                </div>
                
                <hr class="divider" />
                
                <p style="font-weight: bold; font-size: 1.1em; margin-top: 20px;">Objective Setting Questions</p>
                
                <table>
                    <thead>
                        <tr>
                            <th>KRA/Objectives</th>
                            <th>KPI</th>
                            <th> Target</th>
                            <th>UOM</th>
                            <th>Assigned Weight</th>
                        </tr>
                    </thead>
                    <tbody id="feedback-table-body">
                        <!-- Populate objectives dynamically -->
                        <% feedbackDetails.forEach(feedback => { %>
                            <% feedback.objectives.forEach(objective => { %>
                                <tr>
                                    <td><strong><%= objective.objectiveQualiQuestion %></strong></td>
                                    <td><strong>N/A</strong></td> <!-- Replace with actual KPI if available -->
                                    <td><strong>N/A</strong></td> <!-- Replace with actual Target if available -->
                                    <td><strong>N/A</strong></td> <!-- Replace with actual UOM if available -->
                                    <td><strong>N/A</strong></td> <!-- Replace with actual Assigned Weight if available -->
                                </tr>
                            <% }) %>
                        <% }) %>
                    </tbody>
                </table>

                <p style="font-weight: bold; font-size: 1.1em; margin-top: 20px;">Hard Skills</p>
                <table id="hardSkillsTable">
                    <thead>
                        <tr>
                            <th>Skill Name</th>
                        </tr>
                    </thead>
                    <tbody id="hard-skills-table-body">
                        <!-- Populate hard skills dynamically -->
                        <% feedbackDetails.forEach(feedback => { %>
                            <% feedback.skills.forEach(skill => { %>
                                <tr>
                                    <td><strong>Skill ID: <%= skill.jobReqSkillId %></strong></td> <!-- Replace with actual skill name if available -->
                                </tr>
                            <% }) %>
                        <% }) %>
                    </tbody>
                </table>
                
                <p style="font-weight: bold; font-size: 1.1em; margin-top: 20px;">Soft Skills</p>
                <table id="softSkillsTable">
                    <thead>
                        <tr>
                            <th>Skill Name</th>
                        </tr>
                    </thead>
                    <tbody id="soft-skills-table-body">
                        <!-- Populate soft skills dynamically -->
                        <% feedbackDetails.forEach(feedback => { %>
                            <% feedback.skillDetails.forEach(skill => { %>
                                <tr>
                                    <td><strong>Skill ID: <%= skill.jobReqSkillId %></strong></td> <!-- Replace with actual skill name if available -->
                                </tr>
                            <% }) %>
                        <% }) %>
                    </tbody>
                </table>
                
                <button id="saveQ1_360FeedbackPresetButton" type="submit">Save Questionnaire</button>
            </section>
        </form>
    </div>
    <script>
        let submittedObjectives = []; // Declare these variables at the top
        let hardSkills = [];
        let softSkills = [];
    
        document.getElementById('userSelect').addEventListener('change', async function() {
            const selectedUserId = this.value;
    
            if (selectedUserId) {
                try {
                    // Fetch feedback for the selected user
                    const feedbackResponse = await fetch(`/employee/employeefeedbackquestionnaire?userId=${selectedUserId}`, {
                        headers: { 'Accept': 'application/json' },
                    });
    
                    if (!feedbackResponse.ok) {
                        throw new Error(`HTTP error! status: ${feedbackResponse.status}`);
                    }
    
                    const feedbackData = await feedbackResponse.json();
    
                    if (feedbackData.success) {
                        // Process feedback data here
                        console.log(`Feedback for user ${selectedUserId}:`, feedbackData.feedbackList);
                        submittedObjectives = feedbackData.feedbackList; // Objectives for the feedback form
                        hardSkills = feedbackData.hardSkills; // Hard skills from the response
                        softSkills = feedbackData.softSkills; // Soft skills from the response
    
                        // Call the function to show the feedback form
                        showFeedbackForm();
                    } else {
                        console.warn("No feedback data available for this user.");
                    }
                } catch (error) {
                    console.error('Error:', error);
                }
            } else {
                // Optionally, you can hide the feedback form if no user is selected
                const feedbackSection = document.getElementById("feedback-section");
                if (feedbackSection) {
                    feedbackSection.style.display = "none"; // Hide feedback section
                }
            }
        });
    
        function showFeedbackForm() {
            const feedbackSection = document.getElementById("feedback-section");
            if (feedbackSection) {
                feedbackSection.style.display = "block"; // Show feedback section
            }
    
            const feedbackTableBody = document.getElementById('feedback-table-body');
            feedbackTableBody.innerHTML = ''; // Clear existing rows
    
            // Populate feedback rows with objectives
            if (submittedObjectives && submittedObjectives.length > 0) {
                submittedObjectives.forEach(objective => {
                    addFormFeedbackRow(objective);
                });
            }
    
            // Add hard skills to the feedback form
            addFormFeedbackSkillsRows(hardSkills, 'hard');
    
            // Add soft skills to the feedback form
            addFormFeedbackSkillsRows(softSkills, 'soft');
        }
    
        function addFormFeedbackRow(objective) {
            const tbody = document.getElementById('feedback-table-body');
            if (!tbody) {
                console.error("Feedback table body not found.");
                return;
            }
    
            const row = document.createElement('tr');
            row.innerHTML = `
                <td><strong>${objective.objectiveQualiQuestion || 'N/A'}</strong></td>
                <td><strong>N/A</strong></td> <!-- Replace with actual KPI if available -->
                <td><strong>N/A</strong></td> <!-- Replace with actual Target if available -->
                <td><strong>N/A</strong></td> <!-- Replace with actual UOM if available -->
                <td><strong>N/A</strong></td> <!-- Replace with actual Assigned Weight if available -->
            `;
            tbody.appendChild(row);
    
            const inputRow = document.createElement('tr');
            const inputId = `qualitativeInput_${objective.objectiveId}`;
            const questionText = objective.objectiveQualiQuestion || 'Enter your feedback here';
    
            inputRow.innerHTML = `
                <td colspan="5">
                    <div style="margin-bottom: 10px;">
                        <label for="${inputId}">▶ Guide Question here for qualitative and quantitative feedback:</label>
                        <input id="${inputId}" type="text"
                            value="${questionText.trim() ? questionText : ''}"
                            placeholder="${questionText.trim() ? '' : 'Enter your feedback here'}"
                            name="kraObjectivesInput"
                            required
                            style="width: 100%; box-sizing: border-box;"
                            data-objective-id="${objective.objectiveId}">
                    </div>
                </ 
            </td>
        `;
        tbody.appendChild(inputRow);
    
        // Rater's View Section
        const raterRow = document.createElement('tr');
        const starRatingId = `starRating${objective.objectiveId}`;
        const ratingSectionId = `ratingSection${objective.objectiveId}`;
    
        raterRow.innerHTML = `
            <td colspan="5">
                <button type="button" onclick="toggleRatingSection('${ratingSectionId}')" style="background-color: gray; color: white; border: none; padding: 8px 12px; cursor: pointer; border-radius: 4px;">
                    View Rater's View
                </button>
                <div id="${ratingSectionId}" style="display: none; margin-top: 10px;">
                    <div style="margin-bottom: 10px;">
                        <label><strong>Quantitative (Rating Scale):</strong></label>
                        <div style="font-size: 14px; margin-top: 5px;">
                            Rate from 1 to 5 based on the corresponding skill performed during the quarter.
                        </div>
                        <span style="font-size: 24px; cursor: pointer;" id="${starRatingId}" data-rating="0">
                            <i class="fa-solid fa-star" data-value="1"></i>
                            <i class="fa-solid fa-star" data-value="2"></i>
                            <i class="fa-solid fa-star" data-value="3"></i>
                            <i class="fa-solid fa-star" data-value="4"></i>
                            <i class="fa-solid fa-star" data-value="5"></i>
                        </span>
                    </div>
                    <div style="margin-bottom: 10px;">
                        <label><strong>Qualitative (Open-ended):</strong></label>
                        <div style="font-size: 14px; margin-top: 5px;">
                            Provide qualitative feedback based on the corresponding skill performed during the quarter.
                        </div>
                        <input type="text" placeholder="Place your qualitative feedback here." style="width: 100%; box-sizing: border-box;">
                    </div>
                </div>
            </td>
        `;
        tbody.appendChild(raterRow);
    
        // Add click event listeners to the stars for the Rater's View
        const stars = document.querySelectorAll(`#${starRatingId} .fa-star`);
        stars.forEach(star => {
            star.addEventListener('click', function() {
                const rating = this.getAttribute('data-value');
                const starContainer = document.getElementById(starRatingId);
                starContainer.setAttribute('data-rating', rating);
                updateStarDisplay(stars, rating);
            });
        });
    }
    
    function addFormFeedbackSkillsRows(skills, skillType) {
        const skillTableBody = document.querySelector(`#${skillType}-skills-table-body`);
    
        // Check if the table body exists
        if (!skillTableBody) {
            console.log("Skill table body not found for:", skillType);
            return;
        }
    
        // Iterate over the array of skills and add each one
        skills.forEach(skill => {
            // Create the skill row
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>
                    <span><strong>${skill.jobReqSkillName || 'N/A'}</strong></span>
                </td>
            `;
            skillTableBody.appendChild(row);
    
            // Create a new row for input fields
            const inputRow = document.createElement('tr');
            const starRatingId = `${skillType}SkillRow${skill.jobReqSkillName.replace(/\s+/g, '_')}Rating`; // Unique ID for rating
            const ratingSectionId = `ratingSection${skill.jobReqSkillName.replace(/\s+/g, '_')}`; // Replace spaces for valid ID
    
            inputRow.innerHTML = `
                <td colspan="1">
                    <button type="button" onclick="toggleRatingSection('${ratingSectionId}')" style="background-color: gray; color: white; border: none; padding: 8px 12px; cursor: pointer; border-radius: 4px;">
                        View Rater's View
                    </button>
                    <div id="${ratingSectionId}" style="display: none; margin-top: 10px;">
                        <div style="margin-bottom: 10px;">
                            <label><strong>Quantitative (Rating Scale):</strong></label>
                            <div style="font-size: 14px; margin-top: 5px;">
                                Rate from 1 to 5 based on the corresponding skill performed during the quarter.
                            </div>
                            <span style="font-size: 24px; cursor: default;" id
                            <span style="font-size: 24px; cursor: default;" id="${starRatingId}" data-rating="0">
                                <i class="fa-solid fa-star" data-value="1" style="pointer-events: none;"></i>
                                <i class="fa-solid fa-star" data-value="2" style="pointer-events: none;"></i>
                                <i class="fa-solid fa-star" data-value="3" style="pointer-events: none;"></i>
                                <i class="fa-solid fa-star" data-value="4" style="pointer-events: none;"></i>
                                <i class="fa-solid fa-star" data-value="5" style="pointer-events: none;"></i>
                            </span>
                        </div>
                        <div style="margin-bottom: 10px;">
                            <label><strong>Qualitative (Open-ended):</strong></label>
                            <div style="font-size: 14px; margin-top: 5px;">
                                Provide qualitative feedback based on the corresponding skill performed during the quarter.
                            </div>
                            <input type="text" placeholder="Place your qualitative feedback here." style="width: 100%; box-sizing: border-box;" readonly>
                        </div>
                    </div>
                </td>
            `;
    
            skillTableBody.appendChild(inputRow);
        });
    }
    
    function toggleRatingSection(sectionId) {
        const section = document.getElementById(sectionId);
        if (section) {
            section.style.display = section.style.display === 'none' ? 'block' : 'none';
        }
    }
    
    function updateStarDisplay(stars, rating) {
        stars.forEach(star => {
            star.style.color = star.getAttribute('data-value') <= rating ? 'gold' : 'gray';
        });
    }
    </script>
</body>
</html>
