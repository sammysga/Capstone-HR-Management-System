<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Questionnaires</title>
    <link rel="stylesheet" href="/css/sidebar.css"> <!-- Linking Sidebar CSS -->
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

</head>

<style>
.container {
    max-width: 1000px; /* Maximum width of the container */
    margin: 0 auto; /* Center the container horizontally */
    margin-left: 300px; /* Adjust this value based on your sidebar width */
    padding: 20px;
    font-family: 'Inter', sans-serif;
}
    .employee-info {
        margin-bottom: 20px;
        padding: 15px;
        background-color: #e9f5ff;
        border-radius: 8px;
        border: 1px solid #cce7ff;
    }

    .questionnaires-list {
        margin-top: 20px;
        overflow-y: auto;
        max-height: 70vh;
    }

    .questionnaire-item {
        border: 1px solid #ccc;
        padding: 15px;
        margin-bottom: 15px;
        border-radius: 8px;
        background-color: #f9f9f9;
    }

    .star-rating i {
        font-size: 24px;
        cursor: pointer;
        color: #ddd;
    }

    .star-rating i.selected {
        color: gold;
    }

    textarea {
        width: 100%;
        height: 100px;
        margin-top: 10px;
        margin-bottom: 10px;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    ul {
        padding-left: 20px;
        margin-bottom: 10px;
    }

    ul li {
        margin-bottom: 5px;
    }
    #feedback-section {
        max-height: 80vh; /* Adjust this value as needed */
        overflow-y: auto; /* Allows scrolling if content overflows */
    }



/* CSS for 360 Degree Feedback */

.form-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 20px;
    border-bottom: 2px solid #333;
    padding-bottom: 10px;
}

.form-header h2 {
    font-size: 1.5em;
    font-weight: bold;
}
/* General input styles for the feedback form */
.input-field {
    width: 100%; /* Full width of input */
    padding: 8px; /* Consistent padding */
    box-sizing: border-box; /* Include padding in width */
    font-size: 1em; /* Font size consistency */
}

/* Styling for the start and end date inputs */
.date-inputs {
    display: flex;
    gap: 20px; /* Space between date input fields */
}

.date-input {
    flex: 1; /* Make each date input take up equal width */
}

.date-input label {
    display: block; /* Make the label block-level for proper spacing */
    font-weight: bold; /* Emphasize label text */
    margin-bottom: 5px; /* Space between label and input */
}

/* Styling for the header grid (employee information) */
.feedback-header-grid {
    display: grid;
    grid-template-columns: 1fr; /* Change to a single column */
    grid-template-rows: auto; /* Keep auto for rows */
    gap: 10px; /* Space between items */
    margin-top: 20px;
}

.feedback-header-grid div {
    font-size: 1.1em;
    padding: 5px;
    line-height: 1;
}

.feedback-header-grid strong {
    font-weight: bold;
}


/* Optional: Add padding or borders to the table for consistency */
table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}

table th, table td {
    padding: 8px;
    text-align: left;
    border: 1px solid #ddd;
}

/* Optional: Button styling */
button {
    padding: 10px 20px;
    font-size: 1em;
    cursor: pointer;
    border: none;
    background-color: #124A5C;
    color: white;
    border-radius: 5px;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #0056b3;
}
 .divider {
        border: none;        
        margin: 20px 0; /* Space before and after the divider */
        width: 50%; /* Makes the divider smaller */
        margin-left: auto;
        margin-right: auto; /* Centers the divider */
    }


/* CCS for collapsibels */

.divider {
    border: none;
    border-top: 1px solid #ddd;
    margin: 20px 0;
    width: 50%;
    margin-left: auto;
    margin-right: auto;
}

/* Collapse button styling */

.collapsible-button {
    padding: 10px 20px;
    font-size: 1em;
    cursor: pointer;
    border: none;
    background-color: #124A5C;
    color: white;
    border-radius: 5px;
    transition: background-color 0.3s;
}
.collapsible {
    background-color: #f1f1f1;
    color: #444;
    cursor: pointer;
    padding: 10px;
    width: 100%;
    border: none;
    text-align: left;
    outline: none;
    font-size: 15px;
    margin-top: 10px;
}

/* Styling for the content of each collapsible row */
.collapsible-content {
    display: none;
    padding-left: 20px;
    margin-top: 10px;
}

/* Styling for input fields inside collapsible rows */
.collapsible-content input {
    margin-top: 5px;
    padding: 5px;
    width: 90%;
}

/*STAR RATING*/
.fa-star {
    color: #ccc; /* Default color for unselected stars */
    font-size: 30px;
}

.checked {
    color: #FFD43B; /* Yellow color */
}

.gray-button {
    background-color: gray;
    color: white;
    border: none;
    padding: 8px 12px;
    cursor: pointer;
    border-radius: 4px;
}


</style>
<body>
    <%- include('../../partials/employee_partials') %>
    <div class="container">
        <header>
            <h1>360-Degree Feedback Evaluation Set Within the Department</h1>
            <p>Below are all the questionnaires assigned to you. Please provide your feedback as required.</p>
        </header>

        <select id="userSelect" onchange="loadFeedbackForm()">
            <option value="">-- Select User --</option>
            <% usersArray.forEach(user => { %>
                <option value="<%= user.userId %>">
                    <%= user.firstName %> <%= user.lastName %>
                </option>
            <% }) %>
        </select>
        
        <!-- Hidden Inputs -->
        <input type="hidden" id="departmentId" value="<%= user.departmentId || '' %>">
        <input type="hidden" id="selectedUserId" name="userId">
        
  <!-- Feedback Form -->
  <form id="feedbackForm" method="POST" action="/employee/employeefeedbackquestionnaire" onsubmit="event.preventDefault(); submitFeedback();">
    <section id="feedback-section" class="fade-out" style="display: none;">
        <div class="form-header">
            <h2>360 Degree Feedback Questionnaire</h2>
            <div class="date-inputs">
                <div class="date-input">
                    <label for="quarter"><strong>Quarter:</strong></label>
                    <span id="quarterDisplay">N/A</span>
                </div>
                <div class="date-input">
                    <label for="startDate"><strong>Start Date:</strong></label>
                    <span id="startDateDisplay">N/A</span>
                </div>
                <div class="date-input">
                    <label for="endDate"><strong>End Date:</strong></label>
                    <span id="endDateDisplay">N/A</span>
                </div>
            </div>                    
        </div>

        <div class="feedback-header-grid">
            <div><strong>Employee Name:</strong> <span id="employeeName"></span></div>
            <div><strong>Position:</strong> <span id="employeePosition"></span></div>
            <div><strong>Company:</strong> Prime Infrastructure</div>
            <div><strong>Department:</strong> <span id="employeeDepartment"></span></div>
        </div>
        
        <hr class="divider" />
        
        <p style="font-weight: bold; font-size: 1.1em; margin-top: 20px;">Objective Setting Questions</p>
        
        <table>
            <thead>
                <tr>
                    <th>KRA/Objectives</th>
                    <th>KPI</th>
                    <th>Target</th>
                    <th>UOM</th>
                    <th>Assigned Weight</th>
                </tr>
            </thead>
            <tbody id="feedback-table-body">
                <!-- Populate objectives dynamically -->
            </tbody>
        </table>
        
        <p style="font-weight: bold; font-size: 1.1em; margin-top: 20px;">Hard Skills</p>
        <table id="hardSkillsTable">
            <thead>
                <tr>
                    <th>Skill Name</th>
                </tr>
            </thead>
            <tbody id="hard-skills-table-body">
                <!-- Populate hard skills dynamically -->
            </tbody>
        </table>
        
        <p style="font-weight: bold; font-size: 1.1em; margin-top: 20px;">Soft Skills</p>
        <table id="softSkillsTable">
            <thead>
                <tr>
                    <th>Skill Name</th>
                </tr>
            </thead>
            <tbody id="soft-skills-table-body">
                <!-- Populate soft skills dynamically -->
            </tbody>
        </table>
        
        <button id="saveQ1_360FeedbackPresetButton" type="submit">Submit Feedback Answers</button>
    </section>
</form>
</div>





<script>
   document.addEventListener("DOMContentLoaded", function() {
console.log("DOMContentLoaded event triggered.");
const userSelect = document.getElementById('userSelect');
userSelect.addEventListener('change', function() {
    console.log("User selected: " + userSelect.value); // Log when a user is selected
    loadFeedbackForm();
});
fetchUsers();
});

async function fetchUsers() {
console.log("Fetching users...");
const response = await fetch('/employee/employeefeedbackquestionnaire');
const data = await response.json();

if (data.success) {
    const userSelect = document.getElementById('userSelect');
    console.log(`Received ${data.users.length} users.`);
    data.users.forEach(user => {
        const option = document.createElement('option');
        option.value = user.userId;
        option.textContent = `${user.firstName} ${user.lastName}`;
        userSelect.appendChild(option);
    });
} else {
    console.error('Error fetching users:', data.message);
}
}

async function loadFeedbackForm() {
console.log("loadFeedbackForm triggered.");

const userSelect = document.getElementById('userSelect');
const selectedUserId = userSelect.value;

if (!selectedUserId) {
console.error("No user selected");
return;
}

console.log(`Selected User ID: ${selectedUserId}`);

document.getElementById('feedback-section').style.display = 'block';
document.getElementById('selectedUserId').value = selectedUserId;

console.log(`Fetching feedback data for user ID: ${selectedUserId}`);
const response = await fetch(`/employee/employeefeedbackquestionnaire/${selectedUserId}`);
const data = await response.json();

if (data.success) {
console.log("Feedback data fetched successfully:", data);
const user = data.user;

// Populate feedback form with the data
document.getElementById('employeeName').innerText = `${user.lastName}, ${user.firstName}`;
document.getElementById('employeePosition').innerText = user.jobTitle;
document.getElementById('employeeDepartment').innerText = user.deptName;

// Check if feedback details are available and display the quarter, start date, and end date
if (data.feedbackDetails && data.feedbackDetails.length > 0) {
    const feedback = data.feedbackDetails[0]; // Get the first feedback record for this user

    // Display quarter, start date, and end date from the fetched data
    document.getElementById('quarterDisplay').innerText = feedback.feedback?.quarter || 'N/A';
    document.getElementById('startDateDisplay').innerText = feedback.feedback?.setStartDate || 'N/A';
    document.getElementById('endDateDisplay').innerText = feedback.feedback?.setEndDate || 'N/A';
} else {
    console.warn('No feedback details found for the selected user.');
    // Display N/A if no feedback details are found
    document.getElementById('quarterDisplay').innerText = 'N/A';
    document.getElementById('startDateDisplay').innerText = 'N/A';
    document.getElementById('endDateDisplay').innerText = 'N/A';
}

// Process objectives, skills, etc.
data.feedbackDetails.forEach(feedback => {
    feedback.objectives.forEach(objective => {
        addFormFeedbackRow(objective);
    });
    feedback.hardSkills.forEach(skill => {
        addFormFeedbackSkillsRows(skill, 'hard');
    });
    feedback.softSkills.forEach(skill => {
        addFormFeedbackSkillsRows(skill, 'soft');
    });
});
} else {
console.error('Error fetching feedback data:', data.message);
alert('No feedback data available for this user.');
}
}

// Function to simulate feedback submission and show success message
function submitFeedback() {
        console.log("Feedback submitted");

        // Fake the form submission success
        document.getElementById('feedback-section').style.display = 'none'; // Hide the form
        document.getElementById('successMessage').style.display = 'block'; // Show success message
    }
function addFormFeedbackRow(objective) {
    const tbody = document.getElementById('feedback-table-body');
    if (!tbody) {
        console.error("Feedback table body not found.");
        return;
    }

    const row = document.createElement('tr');

    console.log("Objective:", objective);
    console.log("Qualitative Question:", objective.objectiveQualiQuestion);

    row.innerHTML = `
        <td><strong>${objective.objectiveDescrpt || 'N/A'}</strong></td>
        <td><strong>${objective.objectiveKPI || 'N/A'}</strong></td>
        <td><strong>${objective.objectiveTarget || 'N/A'}</strong></td>
        <td><strong>${objective.objectiveUOM || '%'}</strong></td>
        <td><strong>${(objective.objectiveAssignedWeight * 100) || 'N/A'}%</strong></td>
    `;
    tbody.appendChild(row);

    const inputRow = document.createElement('tr');
const questionText = objective.objectiveQualiQuestion || 'Enter your feedback here';

inputRow.innerHTML = `
    <td colspan="5">
        <div style="margin-bottom: 10px;">
            <strong>Feedback Question:</strong>
            <span>${questionText.trim() ? questionText : 'Enter your feedback here'}</span>
        </div>
    </td>
`;

    tbody.appendChild(inputRow);

    // Rater's View (Quantitative Rating and Qualitative Feedback) - Displaying directly
    const raterRow = document.createElement('tr');
    const starRatingId = `starRating${objective.objectiveId}`;
    const ratingSectionId = `ratingSection${objective.objectiveId}`;

    raterRow.innerHTML = `
        <td colspan="5">
            <div id="${ratingSectionId}" style="margin-top: 10px;">
                <div style="margin-bottom: 10px;">
                    <label><strong>Quantitative (Rating Scale):</strong></label>
                    <div style="font-size: 14px; margin-top: 5px;">
                        Please rate the accomplishment of the corresponding objective for the quarter on a scale of 1 to 5.
                    </div>
                    <span style="font-size: 24px; cursor: pointer;" id="${starRatingId}" data-rating="0">
                        <i class="fa-solid fa-star" data-value="1"></i>
                        <i class="fa-solid fa-star" data-value="2"></i>
                        <i class="fa-solid fa-star" data-value="3"></i>
                        <i class="fa-solid fa-star" data-value="4"></i>
                        <i class="fa-solid fa-star" data-value="5"></i>
                    </span>
                </div>
                <div style="margin-bottom: 10px;">
                    <label><strong>Qualitative (Open-ended):</strong></label>
                    <div style="font-size: 14px; margin-top: 5px;">
                        Please provide qualitative feedback regarding the corresponding objective achieved during the quarter.
                    </div>
                    <input type="text" id="qualitativeFeedback_${objective.objectiveId}" placeholder="Place your qualitative feedback here." style="width: 100%; box-sizing: border-box;">
                </div>
            </div>
        </td>
    `;
    tbody.appendChild(raterRow);

    // Add click event listeners to the stars for the Rater's View
    const stars = document.querySelectorAll(`#${starRatingId} .fa-star`);
    stars.forEach(star => {
        star.addEventListener('click', function() {
            const rating = this.getAttribute('data-value');
            const starContainer = document.getElementById(starRatingId);
            starContainer.setAttribute('data-rating', rating);
            updateStarDisplay(stars, rating);
        });
    });
}

                            
                             // Function to update 360 degree feedback hard and soft skill rows
                             function addFormFeedbackSkillsRows(skills, skillType) {
    const skillTableBody = document.querySelector(`#${skillType}-skills-table-body`);

    // Check if the table body exists
    if (!skillTableBody) {
        console.log("Skill table body not found for:", skillType);
        return;
    }

    // Iterate over the array of skills and add each one
    skills.forEach(skill => {
        // Create the skill row
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>
                <span><strong>${skill.jobReqSkillName}</strong></span>
            </td>
        `;
        skillTableBody.appendChild(row);

        // Create a new row for input fields
        const inputRow = document.createElement('tr');
        const starRatingId = `${skillType}SkillRow${skill.jobReqSkillName}Rating`;

        // Create a unique ID for the rating section
        const ratingSectionId = `ratingSection${skill.jobReqSkillName.replace(/\s+/g, '_')}`; // Replace spaces for valid ID

        inputRow.innerHTML = `
        <td colspan="1">
            <div id="${ratingSectionId}" style="margin-top: 10px;">
                <div style="margin-bottom: 10px;">
                    <label><strong>Quantitative (Rating Scale):</strong></label>
                    <div style="font-size: 14px; margin-top: 5px;">
                        Rate from 1 to 5 based on the corresponding skill performed during the quarter.
                    </div>
                    <span style="font-size: 24px; cursor: default;" id="${starRatingId}" data-rating="0">
                        <i class="fa-solid fa-star" data-value="1" style="pointer-events: none;"></i>
                        <i class="fa-solid fa-star" data-value="2" style="pointer-events: none;"></i>
                        <i class="fa-solid fa-star" data-value="3" style="pointer-events: none;"></i>
                        <i class="fa-solid fa-star" data-value="4" style="pointer-events: none;"></i>
                        <i class="fa-solid fa-star" data-value="5" style="pointer-events: none;"></i>
                    </span>
                </div>
                <div style="margin-bottom: 10px;">
                    <label><strong>Qualitative (Open-ended):</strong></label>
                    <div style="font-size: 14px; margin-top: 5px;">
                        Provide qualitative feedback based on the corresponding skill performed during the quarter.
                    </div>
                    <input type="text" placeholder="Place your qualitative feedback here." style="width: 100%; box-sizing: border-box;" readonly>
                </div>
            </div>
        </td>
        `;
        skillTableBody.appendChild(inputRow);
    });
}


   // Function to toggle the visibility of the rating section
   function toggleRatingSection(sectionId) {
                                const section = document.getElementById(sectionId);
                                if (section.style.display === 'none') {
                                    section.style.display = 'block'; // Show the rating section
                                } else {
                                    section.style.display = 'none'; // Hide the rating section
                                }
                            }
                            
                            // Function to update star display based on the rating
                            function updateStarDisplay(stars, rating) {
                                stars.forEach(star => {
                                    if (star.getAttribute('data-value') <= rating) {
                                        star.classList.add('checked'); // Add checked class for selected stars
                                    } else {
                                        star.classList.remove('checked'); // Remove checked class for unselected stars
                                    }
                                });
                            }
                            
                            function setRating(rowId, rating) {
                                const starRating = document.getElementById(`${rowId}Rating`);
                                
                                // Get all star icons (they are <i> elements)
                                const stars = starRating.getElementsByTagName('i');
                                
                                // Loop through the stars and apply the "checked" class based on the rating
                                for (let i = 0; i < stars.length; i++) {
                                    if (i < rating) {
                                        stars[i].classList.add('checked');  // Add "checked" class for selected stars
                                    } else {
                                        stars[i].classList.remove('checked');  // Remove "checked" class for unselected stars
                                    }
                                }
                                
                                // Update the data-rating attribute to reflect the selected rating
                                starRating.setAttribute('data-rating', rating);
                            }

                            
                            
        // Function to update the form action
        function updateFormAction(userId) {
            var form = document.getElementById('feedbackForm');
            // Update the form action with the selected user ID
            form.action = '/linemanager/records-performance-tracker/questionnaire/' + userId;
        }
    
        // Call fetchUsers when the page loads
        window.onload = fetchUsers;
    </script>
    
</html>

<!-- 
<script>
    let submittedObjectives = [];
    let hardSkills = [];
    let softSkills = [];

    document.getElementById('userSelect').addEventListener('change', async function () {
        const selectedUserId = this.value;

        if (selectedUserId) {
            try {
                const feedbackResponse = await fetch(`/employee/employeefeedbackquestionnaire?userId=${selectedUserId}`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });

                if (!feedbackResponse.ok) {
                    throw new Error(`HTTP error! status: ${feedbackResponse.status}`);
                }

                const feedbackData = await feedbackResponse.json();

                if (feedbackData.success) {
                    // Update UI with feedbackData
                    const selectedUser  = feedbackData.user; // Assuming user details are returned
                    document.getElementById('selectedUserName').innerText = `${selectedUser.firstName} ${selectedUser.lastName}`;
                    document.getElementById('selectedUserPosition').innerText = selectedUser.jobTitle; 
                    document.getElementById('selectedUserDepartment').innerText = selectedUser.deptName; 

                    // Populate feedback details
                    submittedObjectives = feedbackData.feedbackDetails.objectives || [];
                    hardSkills = feedbackData.feedbackDetails.skills || [];
                    softSkills = feedbackData.feedbackDetails.softSkills || [];

                    showFeedbackForm();
                } else {
                    console.warn("No feedback data available for this user.");
                    clearFeedbackForm();
                }
            } catch (error) {
                console.error('Error:', error);
                clearFeedbackForm();
            }
        } else {
            clearFeedbackForm();
        }
    });

    function showFeedbackForm() {
        const feedbackSection = document.getElementById("feedback-section");
        if (feedbackSection) {
            feedbackSection.style.display = "block";
        }

        const feedbackTableBody = document.getElementById('feedback-table-body');
        feedbackTableBody.innerHTML = '';

        submittedObjectives.forEach(objective => {
            addFormFeedbackRow(objective);
        });

        addFormFeedbackSkillsRows(hardSkills, 'hard');
        addFormFeedbackSkillsRows(softSkills, 'soft');
    }

    function addFormFeedbackRow(objective) {
        const tbody = document.getElementById('feedback-table-body');
        if (!tbody) {
            console.error("Feedback table body not found.");
            return;
        }

        // Create objective information row
        const row = document.createElement('tr');
        row.innerHTML = `
            <td><strong>${objective.objectiveQualiQuestion || 'N/A'}</strong></td>
            <td><strong>${objective.kpi || 'N/A'}</strong></td>
            <td><strong>${objective.target || 'N/A'}</strong></td>
            <td><strong>${objective.uom || 'N/A'}</strong></td>
            <td><strong>${objective.assignedWeight || 'N/A'}</strong></td>
        `;
        tbody.appendChild(row);

        // Create input row for qualitative feedback
        const inputRow = document.createElement('tr');
        const inputId = `qualitativeInput_${objective.objectiveId}`;
        inputRow.innerHTML = `
            <td colspan="5">
                <div style="margin-bottom: 10px;">
                    <label for="${inputId}">▶ Guide Question:</label>
                    <input id="${inputId}" type="text" 
                        placeholder="Provide your qualitative feedback here"
                        value="${objective.objectiveQualiQuestion || ''}" 
                        name="kraObjectivesInput"
                        required 
                        style="width: 100%; box-sizing: border-box;"
                        data-objective-id="${objective.objectiveId}">
                </div>
            </td>
        `;
        tbody.appendChild(inputRow);

        // Add Rater's View Section
        const raterRow = document.createElement('tr');
        const starRatingId = `starRating_${objective.objectiveId}`;
        const ratingSectionId = `ratingSection_${objective.objectiveId}`;
        raterRow.innerHTML = `
            <td colspan="5">
                <button type="button" onclick="toggleRatingSection('${ratingSectionId}')" style="background-color: gray; color: white; border: none; padding: 8px 12px; cursor: pointer; border-radius: 4px;">
                    View Rater's View
                </button>
                <div id="${ratingSectionId}" style="display: none; margin-top: 10px;">
                    <div style="margin-bottom: 10px;">
                        <label><strong>Quantitative (Rating Scale):</strong></label>
                        <div>Rate from 1 to 5 based on performance during the quarter.</div>
                        <span style="font-size: 24px; cursor: pointer;" id="${starRatingId}" data-rating="0">
                            <i class="fa-solid fa-star" data-value="1"></i>
                            <i class="fa-solid fa-star" data-value="2"></i>
                            <i class="fa-solid fa-star" data-value="3"></i>
                            <i class="fa-solid fa-star" data-value="4"></i>
                            <i class="fa-solid fa-star" data-value="5"></i>
                        </span>
                    </div>
                    <div style="margin-bottom: 10px;">
                        <label><strong>Qualitative (Open-ended):</strong></label>
                        <input type="text" placeholder="Provide qualitative feedback" style="width: 100%; box-sizing: border-box;">
                    </div>
                </div>
            </td>
        `;
        tbody.appendChild(raterRow);

        // Add star click event listeners
        const stars = document.querySelectorAll(`#${starRatingId} .fa-star`);
        stars.forEach(star => {
            star.addEventListener('click', function () {
                const rating = this.getAttribute('data-value');
                const starContainer = document.getElementById(starRatingId);
                starContainer.setAttribute('data-rating', rating);
                updateStarDisplay(stars, rating);
            });
        });
    }

    function addFormFeedbackSkillsRows(skills, skillType) {
        const skillTableBody = document.querySelector(`#${skillType}-skills-table-body`);
        if (!skillTableBody) {
            console.error("Skill table body not found for:", skillType);
            return;
        }

        skills.forEach(skill => {
            // Create skill row
            const row = document.createElement('tr');
            row.innerHTML = `<td><strong>${skill.jobReqSkillName || 'N/A'}</strong></td>`;
            skillTableBody.appendChild(row);

            // Create Rater's View section
            const inputRow = document.createElement('tr');
            const starRatingId = `${skillType}_SkillRating_${skill.jobReqSkillName.replace(/\s+/g, '_')}`;
            const ratingSectionId = `ratingSection_${skill.jobReqSkillName.replace(/\s+/g, '_')}`;

            inputRow.innerHTML = `
                <td>
                    <button type="button" onclick="toggleRatingSection('${ratingSectionId}')" style="background-color: gray; color: white; border: none; padding: 8px 12px; cursor: pointer; border-radius: 4px;">
                        View Rater's View
                    </button>
                    <div id="${ratingSectionId}" style="display: none; margin-top: 10px;">
                        <div style="margin-bottom: 10px;">
                            <label><strong>Quantitative (Rating Scale):</strong></label>
                            <div>Rate from 1 to 5 based on performance.</div>
                            <span style="font-size: 24px;" id="${starRatingId}" data-rating="0">
                                <i class="fa-solid fa-star" data-value="1"></i>
                                <i class="fa-solid fa-star" data-value="2"></i>
                                <i class="fa-solid fa-star" data-value="3"></i>
                                <i class="fa-solid fa-star" data-value="4"></i>
                                <i class="fa-solid fa-star" data-value="5"></i>
                            </span>
                        </div>
                        <div style="margin-bottom: 10px;">
                            <label><strong>Qualitative Feedback:</strong></label>
                            <input type="text" placeholder="Provide feedback here" style="width: 100%; box-sizing: border-box;">
                        </div>
                    </div>
                </td>
            `;
            skillTableBody.appendChild(inputRow);
        });
    }

    function clearFeedbackForm() {
        const feedbackSection = document.getElementById("feedback-section");
        if (feedbackSection) {
            feedbackSection.style.display = "none";
        }

        document.getElementById('feedback-table-body').innerHTML = '';
        document.getElementById('hard-skills-table-body').innerHTML = '';
        document.getElementById('soft-skills-table-body').innerHTML = '';

        // Clear user info display
        document.getElementById('selectedUser  Name').innerText = '';
        document.getElementById('selectedUser  Position').innerText = '';
        document.getElementById('selectedUser  Department').innerText = '';
    }

    // Function to toggle the visibility of the rating section
    function toggleRatingSection(sectionId) {
        const section = document.getElementById(sectionId);
        if (section.style.display === 'none') {
            section.style.display = 'block'; // Show the rating section
        } else {
            section.style.display = 'none'; // Hide the rating section
        }
    }

    // Function to update star display based on the rating
    function updateStarDisplay(stars, rating) {
        stars.forEach(star => {
            if (star.getAttribute('data-value') <= rating) {
                star.class 
                star.classList.add('checked'); // Add checked class for selected stars
            } else {
                star.classList.remove('checked'); // Remove checked class for unselected stars
            }
        });
    }

    function setRating(rowId, rating) {
        const starRating = document.getElementById(`${rowId}Rating`);

        // Get all star icons (they are <i> elements)
        const stars = starRating.getElementsByTagName('i');

        // Loop through the stars and apply the "checked" class based on the rating
        for (let i = 0; i < stars.length; i++) {
            if (i < rating) {
                stars[i].classList.add('checked');  // Add "checked" class for selected stars
            } else {
                stars[i].classList.remove('checked');  // Remove "checked" class for unselected stars
            }
        }

        // Update the data-rating attribute to reflect the selected rating
        starRating.setAttribute('data-rating', rating);
    }
</script> -->
