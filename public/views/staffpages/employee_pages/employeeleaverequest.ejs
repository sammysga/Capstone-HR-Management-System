<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Leave Requests</title>
    <link rel="stylesheet" href="/css/sidebar.css"> <!-- Linking Sidebar CSS -->
    <style>
        body {
            font-family: Inter;
            margin: 0;
            padding: 0;
            background-color: #f9f9f9;
            display: flex; /* Make body a flex container */
        }

        /* Sidebar remains unchanged */
        .sidebar {
            width: 250px; /* Sidebar width */
            /* Add your sidebar styles here */
        }

        /* Main content wrapper */
        .content {
            margin-left: 250px; /* Leave space for the sidebar */
            padding: 20px;
            width: calc(100% - 250px); /* Full width minus sidebar width */
            display: flex; /* Use flexbox for layout */
            flex-direction: column; /* Stack children vertically */
            align-items: center; /* Center horizontally */
        }

        h1, h2 {
            text-align: center;
            color: #124A5C;
        }

        .chart-container {
            display: flex;
            justify-content: space-between; /* Space charts evenly */
            margin: 20px 0;
            width: 100%; /* Ensure it takes the full width of content */
            max-width: 800px; /* Set a maximum width for the chart container */
        }

        .chart {
            border: 1px solid #ccc;
            padding: 20px;
            border-radius: 10px;
            background-color: white;
            width: 25%; /* Set smaller width for charts */
            text-align: center;
        }

        .chart h3 {
            margin-bottom: 10px;
            color: #124A5C;
        }

        .pending-container {
            text-align: center;
            margin-bottom: 20px;
        }

        .pending-container h3 {
            margin-bottom: 10px;
            color: #124A5C;
        }

        .btn-container {
            text-align: center;
            margin-bottom: 20px;
        }

        .btn {
            background-color: #124A5C;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            border: none;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s ease;
        }

        .btn:hover {
            background-color: #07ACB9;
        }

        .records-container {
            width: 100%; /* Set the width of the records container */
            text-align: center; /* Center the text */
        }

        /* Style for the leave requests table */
        table {
            width: 80%; /* Leave requests table takes 80% width */
            border-collapse: collapse;
            margin: 20px auto; /* Center the table by using auto margins */
        }

        table th, table td {
            border: 1px solid #ccc;
            padding: 10px;
            text-align: center;
        }

        table th {
            background-color: #124A5C;
            color: white;
        }

        table tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        /* Modal styles */
        .modal {
            display: none; /* Hidden by default */
            position: fixed;
            z-index: 1; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto; /* Enable scroll if needed */
            background-color: rgba(0, 0, 0, 0.5); /* Black w/ opacity */
        }

        .modal-content {
            background-color: white;
            margin: 10% auto; /* 10% from the top and centered */
            padding: 20px;
            border-radius: 10px;
            width: 40%; /* Could be more or less, depending on screen size */
            position: relative; /* Positioning context for close button */
        }

        .close-btn {
            position: absolute;
            top: 10px;
            right: 15px;
            background: transparent;
            border: none;
            font-size: 20px;
            cursor: pointer;
        }

        .modal form {
            display: flex;
            flex-direction: column;
        }

        .modal label, .modal input, .modal select {
            margin-bottom: 10px;
        }

        .modal button {
            align-self: flex-end;
            padding: 10px 15px;
            background-color: #124A5C;
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 5px;
            transition: background-color 0.3s ease;
        }

        .modal button:hover {
            background-color: #07ACB9;
        }
        
        /* Improved file upload styling */
        .file-upload-container {
            margin-bottom: 15px;
        }
        
        .file-upload-btn {
            display: inline-block;
            padding: 8px 16px;
            background-color: #124A5C;
            color: white;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .file-upload-btn:hover {
            background-color: #07ACB9;
        }
        
        .file-name-display {
            margin-top: 5px;
            font-size: 14px;
            color: #666;
        }
        
        /* Hide the actual file input */
        .hidden-file-input {
            display: none;
        }
        
        /* Custom checkbox styling for self-certification */
        .custom-checkbox-container {
            display: flex;
            align-items: center;
            margin-top: 15px;
            padding: 12px;
            border-radius: 6px;
            background-color: #f0f7fa;
            border: 1px solid #d0e3e9;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .custom-checkbox-container:hover {
            background-color: #e5f1f5;
        }
        
        .custom-checkbox {
            width: 20px;
            height: 20px;
            margin-right: 10px;
            border: 2px solid #124A5C;
            border-radius: 4px;
            background-color: white;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .custom-checkbox.checked {
            background-color: #124A5C;
        }
        
        .custom-checkbox.checked::after {
            content: 'âœ“';
            color: white;
            font-size: 14px;
            font-weight: bold;
        }
        
        .custom-checkbox-label {
            font-size: 14px;
            color: #124A5C;
        }
        
        .custom-checkbox-container.disabled {
            opacity: 0.5;
            cursor: not-allowed;
            background-color: #f8f8f8;
        }
        
        .certification-section {
            margin-top: 15px;
            padding: 15px;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            background-color: #f8f8f8;
        }
        
        .certification-section h4 {
            margin-top: 0;
            color: #124A5C;
        }
        
        .certification-note {
            font-size: 14px;
            color: #666;
            margin-bottom: 12px;
        }
        
        .required-indicator {
            color: red;
            font-weight: bold;
            margin-left: 5px;
        }

        /* Responsive styles */
        @media (max-width: 768px) {
            .modal-content {
                width: 80%; /* Full width on smaller screens */
            }

            .chart {
                width: 100%; /* Full width for charts on smaller screens */
            }
        }
    </style>
</head>
<body>
    <%- include('../../partials/employee_partials') %>

    <!-- Main Content Wrapper -->
    <div class="content">
        <h1>Leave Requests</h1>
    
<div class="chart-container">
    <% leaveBalances.forEach(function(balance) { %>
        <% if (balance.remainingLeaves >= 0) { %> <!-- Check if there are remaining leaves -->
            <div class="chart" id="<%= balance.typeName %>">
                <h3><%= balance.typeName %></h3>
                <p>Remaining Leaves: <span><%= balance.remainingLeaves %></span></p>
            </div>
        <% } %>
    <% }); %>
</div>

    <!-- Pending Leave Requests (Centered) -->
    <div class="pending-container" style="text-align: center; margin: 20px 0;">
        <h3>Total Pending for Approval </h3>
        <p id="pendingCount">Loading Pending Requests...</p> <!-- Dynamically rendered pending count -->
    </div>

        <!-- File New Leave Button -->
        <div class="btn-container">
            <button class="btn" id="fileLeaveBtn">File a New Leave Request</button>
        </div>

        <!-- Filed Leave Requests Table -->
        <div class="records-container">
            <h2>Filed Leave Requests</h2>
            <table>
                <thead>
                    <tr>
                        <th>Leave Type</th>
                        <th>First Date</th>
                        <th>Last Date</th>
                        <th>Total Days</th>
                        <th>Status</th>
                        <th>Certification</th>
                    </tr>
                </thead>
                <tbody id="leaveRequestsTable">
                    <% if (leaveRequests && leaveRequests.length > 0) { %>
                        <% leaveRequests.forEach(request => { %>
                            <tr>
                                <td><%= request.leave_types.typeName %></td>
                                <td><%= request.fromDate %></td>
                                <td><%= request.untilDate %></td>
                                <td><%= Math.ceil((new Date(request.untilDate) - new Date(request.fromDate)) / (1000 * 60 * 60 * 24)) + 1 %></td>
                                <td><%= request.status %></td>
                                <td>
                                    <% if (request.certificationPath) { %>
                                        <a href="<%= request.certificationPath %>" target="_blank">View</a>
                                    <% } else if (request.isSelfCertified) { %>
                                        Self-certified
                                    <% } else if (request.leave_types.typeName.toLowerCase().includes('sick')) { %>
                                        <% if (Math.ceil((new Date(request.untilDate) - new Date(request.fromDate)) / (1000 * 60 * 60 * 24)) + 1 > 2) { %>
                                            <span style="color: red;">Required</span>
                                        <% } else { %>
                                            N/A
                                        <% } %>
                                    <% } else { %>
                                        N/A
                                    <% } %>
                                </td>
                            </tr>
                        <% }) %>
                    <% } else { %>
                        <tr>
                            <td colspan="6">No leave requests found.</td>
                        </tr>
                    <% } %>
                </tbody>        
            </table>
        </div>

        <!-- Leave Request Modal -->
        <div id="fileLeaveModal" class="modal">
            <div class="modal-content">
                <button class="close-btn" id="closeModalBtn">&times;</button>
                <h2>File a New Leave Request</h2>
                <form id="leaveForm">
                    <label for="leaveType">Leave Type:</label>
                    <select id="leaveType" name="leaveTypeId" required>
                        <% if (leaveTypes && leaveTypes.length > 0) { %>
                            <% leaveTypes.forEach(function(type) { %>
                                <option value="<%= type.leaveTypeId %>"><%= type.typeName %></option>
                            <% }); %>
                        <% } else { %>
                            <option disabled>No leave types available</option>
                        <% } %>
                    </select>

                    <label for="fromDate">From Date:</label>
                    <input type="date" id="fromDate" name="fromDate" required>

                    <label for="fromDayType">From Day Type:</label>
                    <select id="fromDayType" name="fromDayType" required>
                        <option value="whole_day">Whole Day</option>
                        <option value="half_day">Half Day</option>
                    </select>

                    <label for="untilDate">Until Date:</label>
                    <input type="date" id="untilDate" name="untilDate" required>

                    <label for="untilDayType">Until Day Type:</label>
                    <select id="untilDayType" name="untilDayType" required>
                        <option value="whole_day">Whole Day</option>
                        <option value="half_day">Half Day</option>
                    </select>

                    <label for="reason">Reason:</label>
                    <input type="text" id="reason" name="reason" required>

<!-- Replace the certification section with this simpler version -->
<div id="certificationSection" class="certification-section" style="display: none;">
    <h4>Medical Certificate</h4>
    <p id="certificationNote" class="certification-note">For sick leaves of 3 or more days, a medical certificate is required.</p>
    
    <div style="background-color: #e5f6ff; border-left: 4px solid #0288d1; padding: 10px; margin-bottom: 15px;">
        <strong>Note:</strong> You can either upload a medical certificate OR self-certify for short-term illness, but not both.
    </div>
    
    <div class="file-upload-container">
        <label for="certification" class="file-upload-btn">Choose Medical Certificate</label>
        <input type="file" id="certification" name="certification" class="hidden-file-input" accept=".pdf,.jpg,.jpeg,.png">
        <div style="display: flex; align-items: center; margin-top: 8px;">
            <div id="fileName" class="file-name-display">No file chosen</div>
            <button type="button" id="clearFileBtn" style="background-color: #f44336; color: white; border: none; padding: 5px 10px; border-radius: 4px; cursor: pointer; margin-left: 10px; display: none;">Clear File</button>
        </div>
    </div>
    
    <div id="customSelfCertify" class="custom-checkbox-container">
        <div id="customCheckbox" class="custom-checkbox"></div>
        <span class="custom-checkbox-label">This is a short-term illness (1-2 days) and I am self-certifying</span>
        <input type="checkbox" id="selfCertify" name="selfCertify" style="display: none;">
    </div>
</div>
                    <button type="submit">Submit Leave Request</button>
                </form>
            </div>
        </div>
    </div>
    <script>
        // Get the modal
        var modal = document.getElementById("fileLeaveModal");

        // Get the button that opens the modal
        var btn = document.getElementById("fileLeaveBtn");

        // Get the <span> element that closes the modal
        var closeBtn = document.getElementById("closeModalBtn");

        // When the user clicks the button, open the modal 
        btn.onclick = function() {
            modal.style.display = "block";
            // Reset the form when opening the modal
            document.getElementById('leaveForm').reset();
            
            // Reset custom checkbox state
            const customCheckbox = document.getElementById('customCheckbox');
            if (customCheckbox) {
                customCheckbox.classList.remove('checked');
            }
            
            // Reset hidden checkbox
            const selfCertifyCheckbox = document.getElementById('selfCertify');
            if (selfCertifyCheckbox) {
                selfCertifyCheckbox.checked = false;
            }
            
            // Reset file display
            const fileNameDisplay = document.getElementById('fileName');
            if (fileNameDisplay) {
                fileNameDisplay.textContent = 'No file chosen';
                fileNameDisplay.style.color = '#666';
            }
            
            // Hide clear file button
            const clearFileBtn = document.getElementById('clearFileBtn');
            if (clearFileBtn) {
                clearFileBtn.style.display = 'none';
            }
            
            // Initialize certification section after form reset
            setTimeout(initializeCertificationSection, 100);
            console.log("Modal opened, certification section will be initialized");
        }

        // When the user clicks on <span> (x), close the modal
        closeBtn.onclick = function() {
            modal.style.display = "none";
        }

        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function(event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }

        // Frontend fetch function with improved error handling
        async function updatePendingRequestsCount() {
            const pendingCountElement = document.getElementById('pendingCount');

            try {
                const response = await fetch('/employee/leaverequest/pending');
                const contentType = response.headers.get("content-type");
                
                if (response.ok) {
                    if (contentType && contentType.includes("application/json")) {
                        const data = await response.json();
                        pendingCountElement.textContent = data.count > 0 ? `${data.count} Pending Requests` : 'No Pending Requests';
                    } else {
                        const responseBody = await response.text();
                        console.error("Expected JSON response but received:", responseBody);
                        pendingCountElement.textContent = 'Error fetching count';
                    }
                } else {
                    const errorBody = await response.text();
                    console.error('Failed to fetch pending requests count:', errorBody);
                    pendingCountElement.textContent = 'Error fetching count';
                }
            } catch (error) {
                console.error('Error in updatePendingRequestsCount:', error);
                pendingCountElement.textContent = 'Error fetching count';
            }
        }

        // Fixed function to calculate leave duration
        function calculateLeaveDuration() {
            const fromDateInput = document.getElementById('fromDate');
            const untilDateInput = document.getElementById('untilDate');
            const fromDayTypeSelect = document.getElementById('fromDayType');
            const untilDayTypeSelect = document.getElementById('untilDayType');
            
            if (!fromDateInput || !untilDateInput || !fromDateInput.value || !untilDateInput.value) {
                return 0;
            }
            
            const fromDate = new Date(fromDateInput.value);
            const untilDate = new Date(untilDateInput.value);
            
            // Reset time portion to ensure accurate date comparison
            fromDate.setHours(0, 0, 0, 0);
            untilDate.setHours(0, 0, 0, 0);
            
            // Handle invalid date range
            if (fromDate > untilDate) {
                return 0;
            }
            
            // Same day case
            if (fromDate.getTime() === untilDate.getTime()) {
                if (fromDayTypeSelect.value === 'half_day' && untilDayTypeSelect.value === 'half_day') {
                    return 0.5;
                }
                return 1;
            }
            
            // Calculate number of calendar days (inclusive)
            const dayCount = Math.round((untilDate - fromDate) / (1000 * 60 * 60 * 24)) + 1;
            
            // Adjust for half days
            let adjustedDays = dayCount;
            if (fromDayTypeSelect.value === 'half_day') {
                adjustedDays -= 0.5;
            }
            if (untilDayTypeSelect.value === 'half_day') {
                adjustedDays -= 0.5;
            }
            
            return adjustedDays;
        }

        // FIXED: Certification section initialization
        function initializeCertificationSection() {
            console.log("Initializing certification section");
            
            // Get DOM elements
            const leaveTypeSelect = document.getElementById('leaveType');
            const fromDateInput = document.getElementById('fromDate');
            const untilDateInput = document.getElementById('untilDate');
            const fromDayTypeSelect = document.getElementById('fromDayType');
            const untilDayTypeSelect = document.getElementById('untilDayType');
            const certificationSection = document.getElementById('certificationSection');
            const certificationNote = document.getElementById('certificationNote');
            const certificationInput = document.getElementById('certification');
            const customSelfCertify = document.getElementById('customSelfCertify');
            const customCheckbox = document.getElementById('customCheckbox');
            const hiddenCheckbox = document.getElementById('selfCertify');
            const fileNameDisplay = document.getElementById('fileName');
            const clearFileBtn = document.getElementById('clearFileBtn');
            
            // Check if elements exist to prevent errors
            if (!certificationSection || !certificationInput || !customSelfCertify || !customCheckbox || !hiddenCheckbox) {
                console.error("Required certification elements not found");
                return;
            }
            
           // Store references to current elements
            const updatedCertificationInput = certificationInput;
            const updatedCustomSelfCertify = customSelfCertify;
            const updatedCustomCheckbox = customCheckbox;
            const updatedHiddenCheckbox = hiddenCheckbox;
            const updatedClearFileBtn = clearFileBtn;

            // Remove existing event listeners by checking if they have our custom property
            if (updatedCertificationInput._hasListener) {
                console.log("Skipping duplicate listener setup for certification input");
                return;
            }
            if (updatedCustomSelfCertify._hasListener) {
                console.log("Skipping duplicate listener setup for self-certification");
                return;
            }

            // Mark elements as having listeners to prevent duplicates
            updatedCertificationInput._hasListener = true;
            updatedCustomSelfCertify._hasListener = true;
            updatedClearFileBtn._hasListener = true;
            
            // FIXED: File input change handler with proper file handling
            updatedCertificationInput.addEventListener('change', function() {
                console.log("File input changed, files:", this.files);
                
                if (this.files && this.files.length > 0) {
                    // File selected
                    const file = this.files[0];
                    console.log("File selected:", file.name, "Size:", file.size, "Type:", file.mimetype);
                    
                    // Validate file
                    const allowedTypes = ['application/pdf', 'image/jpeg', 'image/png'];
                    const maxSize = 5 * 1024 * 1024; // 5 MB
                    
                    if (file.size > maxSize) {
                        alert('File size exceeds the 5 MB limit.');
                        this.value = ''; // Clear the input
                        return;
                    }
                    
                    if (!allowedTypes.includes(file.type)) {
                        alert('Invalid file type. Only PDF and image files are allowed.');
                        this.value = ''; // Clear the input
                        return;
                    }
                    
                    // Update UI
                    fileNameDisplay.textContent = file.name;
                    fileNameDisplay.style.color = '#124A5C';
                    updatedClearFileBtn.style.display = 'inline-block';
                    
                    // Disable self-certification
                    updatedCustomSelfCertify.classList.add('disabled');
                    updatedCustomCheckbox.classList.remove('checked');
                    updatedHiddenCheckbox.checked = false;
                    
                    console.log("File uploaded successfully, self-certification disabled");
                } else {
                    // No file selected
                    fileNameDisplay.textContent = 'No file chosen';
                    fileNameDisplay.style.color = '#666';
                    updatedClearFileBtn.style.display = 'none';
                    
                    // Re-enable self-certification if appropriate
                    updateCertificationState();
                    console.log("File cleared, checking if self-certification can be enabled");
                }
            });
            
            // FIXED: Clear file button handler
            updatedClearFileBtn.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                console.log("Clear file button clicked");
                
                // Clear file input
                updatedCertificationInput.value = '';
                fileNameDisplay.textContent = 'No file chosen';
                fileNameDisplay.style.color = '#666';
                updatedClearFileBtn.style.display = 'none';
                
                // Trigger change event to update UI state
                const changeEvent = new Event('change', { bubbles: true });
                updatedCertificationInput.dispatchEvent(changeEvent);
                
                console.log("File cleared, updating certification state");
            });
            
            // FIXED: Self-certification checkbox handler
            updatedCustomSelfCertify.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                console.log("Self-certification container clicked");
                console.log("Container disabled?", updatedCustomSelfCertify.classList.contains('disabled'));
                console.log("Current checkbox state:", updatedCustomCheckbox.classList.contains('checked'));
                
                // Only allow clicking if not disabled
                if (!updatedCustomSelfCertify.classList.contains('disabled')) {
                    if (updatedCustomCheckbox.classList.contains('checked')) {
                        // Uncheck
                        updatedCustomCheckbox.classList.remove('checked');
                        updatedHiddenCheckbox.checked = false;
                        console.log("Self-certification unchecked");
                    } else {
                        // Check
                        updatedCustomCheckbox.classList.add('checked');
                        updatedHiddenCheckbox.checked = true;
                        
                        // Clear file input when self-certifying
                        updatedCertificationInput.value = '';
                        fileNameDisplay.textContent = 'No file chosen';
                        fileNameDisplay.style.color = '#666';
                        updatedClearFileBtn.style.display = 'none';
                        
                        console.log("Self-certification checked, file input cleared");
                    }
                } else {
                    console.log("Self-certification is disabled");
                    // Check if there's a file that needs to be cleared
                    if (updatedCertificationInput.files && updatedCertificationInput.files.length > 0) {
                        alert("Please clear your uploaded file first before self-certifying.");
                    }
                }
            });
            
            // Function to update certification state based on leave type and duration
            function updateCertificationState() {
                const selectedText = leaveTypeSelect.options[leaveTypeSelect.selectedIndex].text;
                const isSickLeave = selectedText.toLowerCase().includes('sick');
                const days = calculateLeaveDuration();
                
                console.log(`Updating certification state - Leave type: ${selectedText}, Duration: ${days} days, Is sick leave: ${isSickLeave}`);
                
                if (isSickLeave) {
                    // Show certification section for sick leaves
                    certificationSection.style.display = 'block';
                    
                    // Check if a file is already selected
                    const hasFile = updatedCertificationInput.files && updatedCertificationInput.files.length > 0;
                    
                    if (days <= 2 && days > 0) {
                        // Short-term sick leave (1-2 days)
                        certificationNote.textContent = 'For short-term sick leave (1-2 days), you can self-certify or provide a medical certificate.';
                        certificationNote.style.color = '#124A5C';
                        
                        // Enable self-certification if no file is uploaded
                        if (!hasFile) {
                            updatedCustomSelfCertify.classList.remove('disabled');
                            console.log("Self-certification enabled for short-term sick leave");
                        } else {
                            updatedCustomSelfCertify.classList.add('disabled');
                            console.log("Self-certification disabled because file is uploaded");
                        }
                    } else if (days > 2) {
                        // Long-term sick leave (3+ days)
                        certificationNote.innerHTML = 'For sick leaves of 3 or more days, a medical certificate is <span class="required-indicator">required</span>.';
                        
                        // Always disable self-certification for long sick leaves
                        updatedCustomSelfCertify.classList.add('disabled');
                        updatedCustomCheckbox.classList.remove('checked');
                        updatedHiddenCheckbox.checked = false;
                        console.log("Self-certification disabled for long-term sick leave");
                    } else {
                        // Invalid date selection
                        certificationNote.textContent = 'Please select valid dates to determine certification requirements.';
                        
                        // Disable self-certification for invalid dates
                        updatedCustomSelfCertify.classList.add('disabled');
                        updatedCustomCheckbox.classList.remove('checked');
                        updatedHiddenCheckbox.checked = false;
                        console.log("Self-certification disabled for invalid dates");
                    }
                } else {
                    // Hide certification section for non-sick leaves
                    certificationSection.style.display = 'none';
                    
                    // Reset state
                    updatedCustomCheckbox.classList.remove('checked');
                    updatedHiddenCheckbox.checked = false;
                    updatedCertificationInput.value = '';
                    fileNameDisplay.textContent = 'No file chosen';
                    fileNameDisplay.style.color = '#666';
                    updatedClearFileBtn.style.display = 'none';
                    console.log("Certification section hidden for non-sick leave");
                }
            }
            
            // Add event listeners to form fields
            leaveTypeSelect.addEventListener('change', updateCertificationState);
            fromDateInput.addEventListener('change', updateCertificationState);
            untilDateInput.addEventListener('change', updateCertificationState);
            fromDayTypeSelect.addEventListener('change', updateCertificationState);
            untilDayTypeSelect.addEventListener('change', updateCertificationState);
            
            // Initial update
            updateCertificationState();
        }

        // Function to refresh leave balances from server
        async function refreshLeaveBalances() {
            try {
                console.log('Refreshing leave balances...');
                const response = await fetch('/employee/leaverequest/balances/latest');
                
                if (response.ok) {
                    const data = await response.json();
                    console.log('Received updated balances:', data.leaveBalances);
                    
                    // Update the UI with new balances
                    data.leaveBalances.forEach(balance => {
                        updateLeaveBalanceDisplay(balance);
                    });
                } else {
                    console.error('Failed to refresh leave balances');
                }
            } catch (error) {
                console.error('Error refreshing leave balances:', error);
            }
        }

        // Function to update individual leave balance display
        function updateLeaveBalanceDisplay(balance) {
            // Find the chart element for this leave type
            let chartElement = document.getElementById(balance.typeName);
            
            if (!chartElement) {
                // Try finding by case-insensitive search
                const allCharts = document.querySelectorAll('.chart');
                for (const chart of allCharts) {
                    const headerElement = chart.querySelector('h3');
                    if (headerElement && headerElement.textContent.trim().toLowerCase() === balance.typeName.toLowerCase()) {
                        chartElement = chart;
                        break;
                    }
                }
            }
            
            if (chartElement) {
                // Update the remaining leaves span
                const remainingLeavesSpan = chartElement.querySelector('p span');
                if (remainingLeavesSpan) {
                    remainingLeavesSpan.textContent = balance.remainingLeaves;
                    console.log(`Updated ${balance.typeName}: Remaining leaves now shows ${balance.remainingLeaves}`);
                } else {
                    console.error(`Could not find remaining leaves span for "${balance.typeName}"`);
                }
            } else {
                console.error(`Could not find chart element for leave type "${balance.typeName}"`);
            }
        }

        // Updated function to include certification status
        function updateLeaveDataWithCert(leaveType, fromDate, untilDate, totalDays, status, certStatus) {
            const table = document.getElementById('leaveRequestsTable');
            
            // Check if table has a "no leave requests" row and remove it
            const noRequestsRow = table.querySelector('tr td[colspan="6"]');
            if (noRequestsRow) {
                noRequestsRow.parentElement.remove();
            }
            
            const newRow = table.insertRow(0); // Insert at the top
            
            const cellLeaveType = newRow.insertCell(0);
            const cellFromDate = newRow.insertCell(1);
            const cellUntilDate = newRow.insertCell(2);
            const cellTotalDays = newRow.insertCell(3);
            const cellStatus = newRow.insertCell(4);
            const cellCert = newRow.insertCell(5);

            cellLeaveType.textContent = leaveType;
            cellFromDate.textContent = fromDate;
            cellUntilDate.textContent = untilDate;
            cellTotalDays.textContent = totalDays;
            cellStatus.textContent = status;
            
            // Style certification status
            if (certStatus === 'Provided') {
                cellCert.innerHTML = '<span style="color: green;">Provided</span>';
            } else if (certStatus === 'Self-certified') {
                cellCert.textContent = 'Self-certified';
            } else if (certStatus === 'Required') {
                cellCert.innerHTML = '<span style="color: red;">Required</span>';
            } else {
                cellCert.textContent = certStatus;
            }
        }

        // Initialize everything when DOM is fully loaded
        document.addEventListener('DOMContentLoaded', function() {
            console.log("DOM fully loaded");
            updatePendingRequestsCount();
            initializeCertificationSection();
            
            // Setup file upload button click
            const fileUploadBtn = document.querySelector('.file-upload-btn');
            const hiddenFileInput = document.getElementById('certification');
            
            if (fileUploadBtn && hiddenFileInput) {
                fileUploadBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    hiddenFileInput.click();
                });
            }
        });

        // FIXED: Enhanced form submission with proper file validation
        document.getElementById('leaveForm').addEventListener('submit', async (event) => {
            event.preventDefault();

            const leaveTypeSelect = document.getElementById('leaveType');
            const leaveTypeId = leaveTypeSelect.value;
            const leaveTypeText = leaveTypeSelect.options[leaveTypeSelect.selectedIndex].text;
            const fromDate = document.getElementById('fromDate').value;
            const fromDayType = document.getElementById('fromDayType').value;
            const untilDate = document.getElementById('untilDate').value;
            const untilDayType = document.getElementById('untilDayType').value;
            const reason = document.getElementById('reason').value;

            // Calculate total days
            const totalDays = calculateLeaveDuration();
            
            if (totalDays <= 0) {
                alert('Please select valid dates for your leave request.');
                return;
            }
            
            // Check if this is a sick leave
            const isSickLeave = leaveTypeText.toLowerCase().includes('sick');
            const certificationInput = document.getElementById('certification');
            const selfCertifyCheckbox = document.getElementById('selfCertify');
            
            console.log("Form submission - Sick leave:", isSickLeave, "Total days:", totalDays);
            console.log("File input files:", certificationInput ? certificationInput.files : 'null');
            console.log("Self-certify checked:", selfCertifyCheckbox ? selfCertifyCheckbox.checked : 'null');
            
            // Validate certification for sick leave
            if (isSickLeave && totalDays > 2) {
                const hasFile = certificationInput && certificationInput.files && certificationInput.files.length > 0;
                const isSelfCertified = selfCertifyCheckbox && selfCertifyCheckbox.checked;
                
                console.log("Validation check - Has file:", hasFile, "Is self-certified:", isSelfCertified);
                console.log("File input:", certificationInput);
                console.log("Files array:", certificationInput ? certificationInput.files : 'null');
                
                if (!hasFile && !isSelfCertified) {
                    alert('A medical certificate is required for sick leaves of 3 or more days.');
                    return;
                }
            }
            
            // Use FormData for file uploads
            const formData = new FormData();
            formData.append('leaveTypeId', leaveTypeId);
            formData.append('fromDate', fromDate);
            formData.append('fromDayType', fromDayType);
            formData.append('untilDate', untilDate);
            formData.append('untilDayType', untilDayType);
            formData.append('reason', reason);
            
            // Add certification data if it's a sick leave
            if (isSickLeave) {
                formData.append('isSickLeave', 'true');
                formData.append('leaveDuration', totalDays.toString());
                
                if (totalDays <= 2 && selfCertifyCheckbox && selfCertifyCheckbox.checked) {
                    formData.append('isSelfCertified', 'true');
                    console.log("Adding self-certification flag to form data");
                } else if (certificationInput && certificationInput.files && certificationInput.files.length > 0) {
                    formData.append('certification', certificationInput.files[0]);
                    console.log("Adding certification file to form data:", certificationInput.files[0].name);
                }
            }
            
            // Log FormData contents for debugging
            console.log("FormData contents:");
            for (let [key, value] of formData.entries()) {
                if (value instanceof File) {
                    console.log(key, ":", value.name, "(", value.size, "bytes )");
                } else {
                    console.log(key, ":", value);
                }
            }
            
            try {
                console.log("Submitting leave request...");
                const response = await fetch('/employee/leaverequest', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    const data = await response.json();
                    console.log("Leave request submitted successfully:", data);
                    alert('Leave request submitted successfully!');

                    // Get certification status for display
                    let certStatus = 'N/A';
                    if (isSickLeave) {
                        if (certificationInput && certificationInput.files && certificationInput.files.length > 0) {
                            certStatus = 'Provided';
                        } else if (selfCertifyCheckbox && selfCertifyCheckbox.checked) {
                            certStatus = 'Self-certified';
                        } else if (totalDays > 2) {
                            certStatus = 'Required';
                        }
                    }

                    // Update the UI
                    updateLeaveDataWithCert(leaveTypeText, fromDate, untilDate, totalDays, 'Pending for Approval', certStatus);

                    modal.style.display = "none";
                    
                    // Reset the form
                    document.getElementById('leaveForm').reset();
                    
                    // Refresh leave balances from server (this will show reduced effective balances for pending requests)
                    setTimeout(refreshLeaveBalances, 500);
                    
                    // Update pending requests count
                    updatePendingRequestsCount();
                } else {
                    let errorMessage = 'Error submitting leave request';
                    try {
                        const errorData = await response.json();
                        errorMessage = errorData.message || errorMessage;
                    } catch (e) {
                        console.error("Error parsing error response:", e);
                    }
                    console.error("Server returned error:", response.status, errorMessage);
                    alert('Error submitting leave request: ' + errorMessage);
                }
            } catch (error) {
                console.error('Error in form submission:', error);
                alert('Error submitting leave request: ' + error.message);
            }
        });
    </script>
</body>
</html>