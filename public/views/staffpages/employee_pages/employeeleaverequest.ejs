<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Leave Requests</title>
    <link rel="stylesheet" href="/css/sidebar.css"> <!-- Linking Sidebar CSS -->
    <style>
        body {
            font-family: Inter;
            margin: 0;
            padding: 0;
            background-color: #f9f9f9;
            display: flex; /* Make body a flex container */
        }

        /* Sidebar remains unchanged */
        .sidebar {
            width: 250px; /* Sidebar width */
            /* Add your sidebar styles here */
        }

        /* Main content wrapper */
        .content {
            margin-left: 250px; /* Leave space for the sidebar */
            padding: 20px;
            width: calc(100% - 250px); /* Full width minus sidebar width */
            display: flex; /* Use flexbox for layout */
            flex-direction: column; /* Stack children vertically */
            align-items: center; /* Center horizontally */
        }

        h1, h2 {
            text-align: center;
            color: #124A5C;
        }

        .chart-container {
            display: flex;
            justify-content: space-between; /* Space charts evenly */
            margin: 20px 0;
            width: 100%; /* Ensure it takes the full width of content */
            max-width: 800px; /* Set a maximum width for the chart container */
        }

        .chart {
            border: 1px solid #ccc;
            padding: 20px;
            border-radius: 10px;
            background-color: white;
            width: 25%; /* Set smaller width for charts */
            text-align: center;
        }

        .chart h3 {
            margin-bottom: 10px;
            color: #124A5C;
        }

        .pending-container {
            text-align: center;
            margin-bottom: 20px;
        }

        .pending-container h3 {
            margin-bottom: 10px;
            color: #124A5C;
        }

        .btn-container {
            text-align: center;
            margin-bottom: 20px;
        }

        .btn {
            background-color: #124A5C;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            border: none;
            cursor: pointer;
            font-size: 16px;
        }

        .btn:hover {
            background-color: #07ACB9;
        }

        .records-container {
            width: 100%; /* Set the width of the records container */
            text-align: center; /* Center the text */
        }

        /* Style for the leave requests table */
        table {
            width: 80%; /* Leave requests table takes 80% width */
            border-collapse: collapse;
            margin: 20px auto; /* Center the table by using auto margins */
        }

        table th, table td {
            border: 1px solid #ccc;
            padding: 10px;
            text-align: center;
        }

        table th {
            background-color: #124A5C;
            color: white;
        }

        table tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        /* Modal styles */
        .modal {
            display: none; /* Hidden by default */
            position: fixed;
            z-index: 1; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto; /* Enable scroll if needed */
            background-color: rgba(0, 0, 0, 0.5); /* Black w/ opacity */
        }

        .modal-content {
            background-color: white;
            margin: 10% auto; /* 10% from the top and centered */
            padding: 20px;
            border-radius: 10px;
            width: 40%; /* Could be more or less, depending on screen size */
            position: relative; /* Positioning context for close button */
        }

        .close-btn {
            position: absolute;
            top: 10px;
            right: 15px;
            background: transparent;
            border: none;
            font-size: 20px;
            cursor: pointer;
        }

        .modal form {
            display: flex;
            flex-direction: column;
        }

        .modal label, .modal input, .modal select {
            margin-bottom: 10px;
        }

        .modal button {
            align-self: flex-end;
            padding: 10px 15px;
            background-color: #124A5C;
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 5px;
        }

        /* Responsive styles */
        @media (max-width: 768px) {
            .modal-content {
                width: 80%; /* Full width on smaller screens */
            }

            .chart {
                width: 100%; /* Full width for charts on smaller screens */
            }
        }
    </style>
</head>
<body>
    <%- include('../../partials/employee_partials') %>

    <!-- Main Content Wrapper -->
    <div class="content">
        <h1>Leave Requests</h1>
    
        <div class="chart-container">
            <% leaveBalances.forEach(function(balance) { %>
                <% if (balance.remainingLeaves >= 0) { %> <!-- Check if there are remaining leaves -->
                    <div class="chart" id="<%= balance.typeName %>">
                        <h3><%= balance.typeName %></h3>
                        <p>Remaining Leaves: <span><%= balance.remainingLeaves %></span></p>
                    </div>
                <% } %>
            <% }); %>
        </div>

    <!-- Pending Leave Requests (Centered) -->
    <div class="pending-container" style="text-align: center; margin: 20px 0;">
        <h3>Total Pending for Approval </h3>
        <p id="pendingCount">Loading Pending Requests...</p> <!-- Dynamically rendered pending count -->
    </div>

        <!-- File New Leave Button -->
        <div class="btn-container">
            <button class="btn" id="fileLeaveBtn">File a New Leave Request</button>
        </div>

        <!-- Filed Leave Requests Table -->
        <div class="records-container">
            <h2>Filed Leave Requests</h2>
            <table>
                <thead>
                    <tr>
                        <th>Leave Type</th>
                        <th>First Date</th>
                        <th>Last Date</th>
                        <th>Total Days</th>
                        <th>Status</th>
                        <th>Certification</th>
                    </tr>
                </thead>
                <tbody id="leaveRequestsTable">
                    <% if (leaveRequests && leaveRequests.length > 0) { %>
                        <% leaveRequests.forEach(request => { %>
                            <tr>
                                <td><%= request.leave_types.typeName %></td>
                                <td><%= request.fromDate %></td>
                                <td><%= request.untilDate %></td>
                                <td><%= Math.ceil((new Date(request.untilDate) - new Date(request.fromDate)) / (1000 * 60 * 60 * 24)) + 1 %></td>
                                <td><%= request.status %></td>
                                <td>
                                    <% if (request.certificationPath) { %>
                                        <a href="<%= request.certificationPath %>" target="_blank">View</a>
                                    <% } else if (request.isSelfCertified) { %>
                                        Self-certified
                                    <% } else if (request.leave_types.typeName.toLowerCase().includes('sick')) { %>
                                        <% if (Math.ceil((new Date(request.untilDate) - new Date(request.fromDate)) / (1000 * 60 * 60 * 24)) + 1 > 2) { %>
                                            <span style="color: red;">Required</span>
                                        <% } else { %>
                                            N/A
                                        <% } %>
                                    <% } else { %>
                                        N/A
                                    <% } %>
                                </td>
                            </tr>
                        <% }) %>
                    <% } else { %>
                        <tr>
                            <td colspan="6">No leave requests found.</td>
                        </tr>
                    <% } %>
                </tbody>        
            </table>
        </div>

        <!-- Leave Request Modal -->
        <div id="fileLeaveModal" class="modal">
            <div class="modal-content">
                <button class="close-btn" id="closeModalBtn">&times;</button>
                <h2>File a New Leave Request</h2>
                <form id="leaveForm">
                    <label for="leaveType">Leave Type:</label>
                    <select id="leaveType" name="leaveTypeId" required>
                        <% if (leaveTypes && leaveTypes.length > 0) { %>
                            <% leaveTypes.forEach(function(type) { %>
                                <option value="<%= type.leaveTypeId %>"><%= type.typeName %></option>
                            <% }); %>
                        <% } else { %>
                            <option disabled>No leave types available</option>
                        <% } %>
                    </select>

                    <label for="fromDate">From Date:</label>
                    <input type="date" id="fromDate" name="fromDate" required>

                    <label for="fromDayType">From Day Type:</label>
                    <select id="fromDayType" name="fromDayType" required>
                        <option value="whole_day">Whole Day</option>
                        <option value="half_day">Half Day</option>
                    </select>

                    <label for="untilDate">Until Date:</label>
                    <input type="date" id="untilDate" name="untilDate" required>

                    <label for="untilDayType">Until Day Type:</label>
                    <select id="untilDayType" name="untilDayType" required>
                        <option value="whole_day">Whole Day</option>
                        <option value="half_day">Half Day</option>
                    </select>

                    <label for="reason">Reason:</label>
                    <input type="text" id="reason" name="reason" required>

                     <!-- New certification section - will only show for sick leave -->
                    <div id="certificationSection" style="display: none; margin-top: 15px; padding: 10px; border: 1px solid #eee; border-radius: 5px;">
                        <h4 style="margin-top: 0;">Medical Certificate</h4>
                        <p id="certificationNote" style="font-size: 12px; color: #666;">For sick leaves of 3 or more days, a medical certificate is required.</p>
                        
                        <label for="certification">Upload Medical Certificate (if available):</label>
                        <input type="file" id="certification" name="certification" accept=".pdf,.jpg,.jpeg,.png">
                        
                        <div style="margin-top: 10px;">
                            <input type="checkbox" id="selfCertify" name="selfCertify">
                            <label for="selfCertify">This is a short-term illness (1-2 days) and I am self-certifying.</label>
                        </div>
                    </div>

                    <button type="submit">Submit Leave Request</button>
                </form>
            </div>
        </div>
    </div>
    <script>
        // Get the modal
        var modal = document.getElementById("fileLeaveModal");
    
        // Get the button that opens the modal
        var btn = document.getElementById("fileLeaveBtn");
    
        // Get the <span> element that closes the modal
        var closeBtn = document.getElementById("closeModalBtn");
    
        // When the user clicks the button, open the modal 
        btn.onclick = function() {
            modal.style.display = "block";
        }
    
        // When the user clicks on <span> (x), close the modal
        closeBtn.onclick = function() {
            modal.style.display = "none";
        }
    
        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function(event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }
    
        // Frontend fetch function with improved error handling
        async function updatePendingRequestsCount() {
    const pendingCountElement = document.getElementById('pendingCount');

    try {
        const response = await fetch('/employee/leaverequest/pending'); // Ensure this is the correct endpoint

        // Log response details for debugging
        console.log('Response Status:', response.status);
        console.log('Response Headers:', response.headers);

        // Check if the response is JSON before parsing
        const contentType = response.headers.get("content-type");
        if (response.ok) {
            if (contentType && contentType.includes("application/json")) {
                const data = await response.json(); // Parse as JSON only if it's the right type
                pendingCountElement.textContent = data.count > 0 ? `${data.count} Pending Requests` : 'No Pending Requests';
            } else {
                console.error("Expected JSON response but received:", responseBody);
                pendingCountElement.textContent = 'Error fetching count';
            }
        } else {
            const errorBody = await response.text(); // Log non-JSON error message
            console.error('Failed to fetch pending requests count:', errorBody);
            pendingCountElement.textContent = 'Error fetching count';
        }
    } catch (error) {
        console.error('Error in updatePendingRequestsCount:', error);
        pendingCountElement.textContent = 'Error fetching count';
    }
}

        // Call this function when the page loads
        window.onload = function() {
            updatePendingRequestsCount();
            initializeCertificationSection();   // Initialize the certification section functionality
        };
    
        // Update leave requests table with new data
        function updateLeaveData(leaveType, fromDate, untilDate, totalDays, status) {
            const table = document.getElementById('leaveRequestsTable');
            const newRow = table.insertRow();
            const cellLeaveType = newRow.insertCell(0);
            const cellFromDate = newRow.insertCell(1);
            const cellUntilDate = newRow.insertCell(2);
            const cellTotalDays = newRow.insertCell(3);
            const cellStatus = newRow.insertCell(4);
            const cellCertification = newRow.insertCell(5); // New cell for certification
    
            cellLeaveType.textContent = leaveType;
            cellFromDate.textContent = fromDate;
            cellUntilDate.textContent = untilDate;
            cellTotalDays.textContent = totalDays;
            cellStatus.textContent = status;

            // Determine certification display
            const isSickLeave = leaveType.toLowerCase().includes('sick');
            const isSelfCertified = document.getElementById('selfCertify') && document.getElementById('selfCertify').checked;
            const hasCertification = document.getElementById('certification') && document.getElementById('certification').files.length > 0;
            
            if (isSickLeave) {
                if (hasCertification) {
                    cellCertification.innerHTML = '<span style="color: green;">Provided</span>';
                } else if (isSelfCertified) {
                    cellCertification.textContent = 'Self-certified';
                } else if (totalDays > 2) {
                    cellCertification.innerHTML = '<span style="color: red;">Required</span>';
                } else {
                    cellCertification.textContent = 'N/A';
                }
            } else {
                cellCertification.textContent = 'N/A';
            }
        }
    
        // This function updates the displayed remaining leaves after a successful leave request
        function updateRemainingLeaves(leaveTypeId, daysRequested) {
            const balanceElement = document.getElementById(leaveTypeId); // Assuming balance typeName is the same as leaveTypeId
    
            if (balanceElement) {
                const remainingLeavesSpan = balanceElement.querySelector('span');
                let remainingLeaves = parseInt(remainingLeavesSpan.textContent); // Get current remaining leaves
                remainingLeaves -= daysRequested; // Decrease by the days requested
                remainingLeavesSpan.textContent = remainingLeaves; // Update the displayed value
            }
        }

        // sick leave request certification section functionality
        function initializeCertificationSection() {
            const leaveTypeSelect = document.getElementById('leaveType');
            const fromDateInput = document.getElementById('fromDate');
            const untilDateInput = document.getElementById('untilDate');
            const certificationSection = document.getElementById('certificationSection');
            const certificationNote = document.getElementById('certificationNote');
            const certificationInput = document.getElementById('certification');
            const selfCertifyCheckbox = document.getElementById('selfCertify');
            
            // Function to calculate leave duration
            function calculateDays() {
                if (!fromDateInput.value || !untilDateInput.value) return 0;
                const fromDate = new Date(fromDateInput.value);
                const untilDate = new Date(untilDateInput.value);
                return Math.ceil((untilDate - fromDate) / (1000 * 60 * 60 * 24)) + 1;
            }
            
            // Function to update certification section visibility
            function updateCertificationSection() {
                if (!leaveTypeSelect || !certificationSection) return;
                
                const selectedText = leaveTypeSelect.options[leaveTypeSelect.selectedIndex].text;
                const isSickLeave = selectedText.toLowerCase().includes('sick');
                const days = calculateDays();
                
                if (isSickLeave) {
                    certificationSection.style.display = 'block';
                    
                    if (days <= 2) {
                        certificationNote.textContent = 'For short-term sick leave (1-2 days), you can self-certify.';
                        certificationInput.required = false;
                        selfCertifyCheckbox.disabled = false;
                    } else {
                        certificationNote.textContent = 'For sick leaves of 3 or more days, a medical certificate is required.';
                        certificationInput.required = true;
                        selfCertifyCheckbox.disabled = true;
                        selfCertifyCheckbox.checked = false;
                    }
                } else {
                    certificationSection.style.display = 'none';
                    certificationInput.required = false;
                }
            }
            
            // Add event listeners
            if (leaveTypeSelect) {
                leaveTypeSelect.addEventListener('change', updateCertificationSection);
            }
            
            if (fromDateInput) {
                fromDateInput.addEventListener('change', updateCertificationSection);
            }
            
            if (untilDateInput) {
                untilDateInput.addEventListener('change', updateCertificationSection);
            }
            
            // Initial update
            updateCertificationSection();
        }
    
       // Handle form submission
        document.getElementById('leaveForm').addEventListener('submit', async (event) => {
            event.preventDefault(); // Prevent the default form submission

            const leaveTypeSelect = document.getElementById('leaveType');
            const leaveTypeId = leaveTypeSelect.value;
            const leaveTypeText = leaveTypeSelect.options[leaveTypeSelect.selectedIndex].text;
            const fromDate = document.getElementById('fromDate').value;
            const fromDayType = document.getElementById('fromDayType').value;
            const untilDate = document.getElementById('untilDate').value;
            const untilDayType = document.getElementById('untilDayType').value;
            const reason = document.getElementById('reason').value;

            const totalDays = Math.ceil((new Date(untilDate) - new Date(fromDate)) / (1000 * 60 * 60 * 24)) + 1;
            
            // Check if this is a sick leave
            const isSickLeave = leaveTypeText.toLowerCase().includes('sick');
            const certificationInput = document.getElementById('certification');
            const selfCertifyCheckbox = document.getElementById('selfCertify');
            
            // For FormData approach with file upload
            let useFormData = false;
            
            // Validate certification for sick leave
            if (isSickLeave && totalDays > 2 && 
                (!certificationInput || certificationInput.files.length === 0)) {
                alert('A medical certificate is required for sick leaves of 3 or more days.');
                return;
            }
            
            // Determine if we need to use FormData (for file uploads)
            if (isSickLeave && certificationInput && certificationInput.files.length > 0) {
                useFormData = true;
            }
            
            try {
                let response;
                
                if (useFormData) {
                    // Use FormData for file upload
                    const formData = new FormData();
                    formData.append('leaveTypeId', leaveTypeId);
                    formData.append('fromDate', fromDate);
                    formData.append('fromDayType', fromDayType);
                    formData.append('untilDate', untilDate);
                    formData.append('untilDayType', untilDayType);
                    formData.append('reason', reason);
                    
                    // Add certification data if it's a sick leave
                    if (isSickLeave) {
                        formData.append('isSickLeave', 'true');
                        formData.append('leaveDuration', totalDays.toString());
                        
                        if (totalDays <= 2 && selfCertifyCheckbox && selfCertifyCheckbox.checked) {
                            formData.append('isSelfCertified', 'true');
                        } else if (certificationInput && certificationInput.files.length > 0) {
                            formData.append('certification', certificationInput.files[0]);
                        }
                    }
                    
                    response = await fetch('/employee/leaverequest', {
                        method: 'POST',
                        body: formData
                        // Note: Don't set Content-Type header when using FormData
                    });
                } else {
                    // Use JSON for regular submissions
                    const leaveData = {
                        leaveTypeId,
                        fromDate,
                        fromDayType,
                        untilDate,
                        untilDayType,
                        reason
                    };
                    
                    // Add certification info if it's a sick leave
                    if (isSickLeave) {
                        leaveData.isSickLeave = 'true';
                        leaveData.leaveDuration = totalDays;
                        
                        if (totalDays <= 2 && selfCertifyCheckbox && selfCertifyCheckbox.checked) {
                            leaveData.isSelfCertified = 'true';
                        }
                    }
                    
                    response = await fetch('/employee/leaverequest', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(leaveData)
                    });
                }

                if (response.ok) {
                    const data = await response.json();
                    alert('Leave request submitted successfully!');

                    // Get certification status for display
                    let certStatus = 'N/A';
                    if (isSickLeave) {
                        if (certificationInput && certificationInput.files.length > 0) {
                            certStatus = 'Provided';
                        } else if (selfCertifyCheckbox && selfCertifyCheckbox.checked) {
                            certStatus = 'Self-certified';
                        } else if (totalDays > 2) {
                            certStatus = 'Required';
                        }
                    }

                    // Update the UI
                    updateLeaveDataWithCert(leaveTypeText, fromDate, untilDate, totalDays, 'Pending', certStatus);
                    updateRemainingLeaves(leaveTypeId, totalDays);

                    modal.style.display = "none"; // Close the modal
                    
                    // Reset the form
                    document.getElementById('leaveForm').reset();
                    
                    // Update pending requests count
                    updatePendingRequestsCount();
                } else {
                    const errorData = await response.json();
                    alert('Error submitting leave request: ' + errorData.message);
                }
            } catch (error) {
                console.error('Error in form submission:', error);
                alert('Error submitting leave request');
            }
        });

        // Updated function to include certification status
        function updateLeaveDataWithCert(leaveType, fromDate, untilDate, totalDays, status, certStatus) {
            const table = document.getElementById('leaveRequestsTable');
            const newRow = table.insertRow(0); // Insert at the top
            
            const cellLeaveType = newRow.insertCell(0);
            const cellFromDate = newRow.insertCell(1);
            const cellUntilDate = newRow.insertCell(2);
            const cellTotalDays = newRow.insertCell(3);
            const cellStatus = newRow.insertCell(4);
            const cellCert = newRow.insertCell(5); // New cell for certification

            cellLeaveType.textContent = leaveType;
            cellFromDate.textContent = fromDate;
            cellUntilDate.textContent = untilDate;
            cellTotalDays.textContent = totalDays;
            cellStatus.textContent = status;
            
            // Style certification status
            if (certStatus === 'Provided') {
                cellCert.innerHTML = '<span style="color: green;">Provided</span>';
            } else if (certStatus === 'Self-certified') {
                cellCert.textContent = 'Self-certified';
            } else if (certStatus === 'Required') {
                cellCert.innerHTML = '<span style="color: red;">Required</span>';
            } else {
                cellCert.textContent = certStatus;
            }
        }

        // Toggle active class for sidebar links
        document.querySelectorAll('.sidebar ul li a').forEach(link => {
            link.addEventListener('click', function() {
                document.querySelectorAll('.sidebar ul li a').forEach(link => link.classList.remove('active'));
                this.classList.add('active');
            });
        });

        // Toggle collapsible content
        document.querySelectorAll('.collapsible-header').forEach(header => {
            header.addEventListener('click', function() {
                var content = this.nextElementSibling;
                if (content.style.display === 'block') {
                    content.style.display = 'none';
                } else {
                    // Hide all other collapsible contents
                    document.querySelectorAll('.collapsible-content').forEach(item => {
                        if (item !== content) {
                            item.style.display = 'none';
                        }
                    });
                    content.style.display = 'block';
                }
            });
        });

        // Handle navigation for Performance Management links
        document.querySelectorAll('.collapsible-content a').forEach(link => {
            link.addEventListener('click', function(event) {
                event.preventDefault(); // Prevent default link behavior
                
                // Perform the desired action or navigation
                const targetUrl = this.getAttribute('href');
                window.location.href = targetUrl; // Navigate to the target URL
            });
        });
        
    </script>
    
</body>
</html>
