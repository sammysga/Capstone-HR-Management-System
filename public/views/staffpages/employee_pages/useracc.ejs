<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee User Account</title>
    <link rel="stylesheet" href="/css/sidebar.css"> <!-- Linking Sidebar CSS -->
    <link rel="stylesheet" href="/css/hr_pages.css"> <!-- Linking Main Content CSS -->
    <style>
.profile-container { 
            display: flex; 
            align-items: center; 
            justify-content: space-between; 
            margin-bottom: 20px; 
        }
        .profile-pic { 
            width: 80px; 
            height: 80px; 
            border-radius: 50%; 
            object-fit: cover; 
            margin-right: 15px; 
        }
        .profile-info { 
            display: flex; 
            flex-direction: column; 
            flex-grow: 1; 
            margin-right: 20px;
        }
        .form-text { 
            font-size: 20px; 
            color: #09191F; 
        }
        #display-role { 
            font-size: 1.2rem; 
            font-style: italic; 
            margin-top: 5px; 
        }
        .password-reset-container { 
            margin-top: 30px; 
            border-top: 1px solid #ccc; 
            padding-top: 20px; 
        }
        .password-reset-container input { 
            width: 100%; 
            padding: 10px; 
            margin: 10px 0; 
            border-radius: 5px; 
            border: 1px solid #ccc; 
        }
        .update-password-btn, .offboarding-btn { 
            background-color: #124A5C; 
            color: white; 
            border: none; 
            padding: 10px 20px; 
            border-radius: 5px; 
            font-size: 1rem; 
            cursor: pointer; 
            transition: background-color 0.3s ease; 
        }
        .update-password-btn:hover, .offboarding-btn:hover { 
            background-color: #059ca4; 
        }
        .edit-btn, .save-btn { 
            background-color: #124A5C; 
            color: white; 
            border: none; 
            padding: 10px 20px; 
            border-radius: 5px; 
            font-size: 1rem; 
            cursor: pointer; 
            margin-left: 20px; /* Space between button and profile info */
            transition: background-color 0.3s ease; 
        }
        .edit-btn:hover, .save-btn:hover { 
            background-color: #059ca4; 
        }
        .form-input { 
            width: 100%; 
            padding: 15px; 
            margin: 10px 0; 
            border-radius: 5px; 
            border: 1px solid #ccc; 
            font-size: 16px; 
            transition: border-color 0.3s ease, box-shadow 0.3s ease; 
            background-color: #f9f9f9; /* Light background color */
            display: none; 
        }
        .form-input:focus { 
            border-color: #059ca4; /* Change border color on focus */
            box-shadow: 0 0 5px rgba(5, 156, 164, 0.5); /* Add shadow on focus */
            background-color: #ffffff; /* Change background color on focus */
        }
        .form-input::placeholder { 
            color: #aaa; /* Placeholder color */
            opacity: 1; /* Show placeholder color */
        }
        .account-info-header { 
            margin-top: 40px; 
            font-size: 1.5rem; 
            font-weight: bold; 
            color: #059ca4; 
        }
        .sub-header { 
            margin-top: 20px; 
            font-size: 1.2rem; 
            font-weight: bold; 
        }
        .offboarding-btn-container { 
            margin-top: 30px; 
        }
        .password-reset-info {
            margin-top: 40px; 
            font-size: 1.5rem; 
            font-weight: bold; 
            color: #059ca4; 
        }

        /* Toast notification styling */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: #f9f9f9;
            border: 1px solid #ccc;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            padding: 16px;
            border-radius: 8px;
            display: none;
            z-index: 9999;
            animation: slide-in 0.5s ease-out;
            font-family: Inter;
            color: #333; /* Default text color */
        }

        .toast.success {
            background-color: #28a745; /* Green for success */
            border-color: #218838;
            color: white; /* White text */
        }

        .toast.error {
            background-color: #dc3545; /* Red for error */
            border-color: #c82333;
            color: white; /* White text */
        }

        .toast button {
            margin-top: 10px;
            background: #059ca4;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 5px;
            cursor: pointer;
        }

        .toast button:hover {
            background: #027a8c; /* Slightly darker shade for hover */
        }

        .toast .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background: none;
            border: none;
            font-size: 20px;
            color: white;
            cursor: pointer;
            font-weight: bold;
        }

        @keyframes slide-in {
            from {
                right: -200px;
            }
            to {
                right: 20px;
            }
        }
    </style>
</head>
<body>
    <%- include('../../partials/employee_partials') %>
   <!-- Main content -->
   <div class="main-content">
    <!-- Profile section -->
    <div class="profile-container">
        <img src="/images/profile.png" alt="Profile Picture" class="profile-pic">
        <div class="profile-info">
            <form id="edit-user-info" action="/employee/update-info" method="POST">
                <span id="display-firstname" class="form-text" style="font-weight: bold; font-size: 25px;"><%= user.firstName %> <%= user.lastName %></span>
                <input type="text" class="form-input" name="firstName" value="<%= user.firstName %>" required>
                <input type="text" class="form-input" name="lastName" value="<%= user.lastName %>" required>
                
                <span id="display-role" class="form-text" style="margin-top: 5px;"><%= user.userRole %></span>
                <input type="text" class="form-input" name="userRole" value="<%= user.userRole %>" required>
                
                <input type="email" class="form-input" name="userEmail" value="<%= user.userEmail %>" required style="display: none;">
            </form>
        </div>
        <div>
            <button type="button" class="edit-btn" id="edit-info-btn">Edit Information</button>
            <button type="submit" class="save-btn" id="save-info-btn" style="display: none;">Save Changes</button>
        </div>
    </div>

    <div>
        <div class="sub-header">Department:</div>
        <span class="form-text"><%= user.deptName %></span>
    </div>
    <div>
        <div class="sub-header">Job Title:</div>
        <span class="form-text"><%= user.jobTitle %></span>
    </div>
    
    
    <div class="account-info-header">User Account Information</div>
    <div>
        <div class="sub-header">Email:</div>
        <span class="form-text"><%= user.userEmail %></span>
    </div>
    <div>
        <div class="sub-header">User Role:</div>
        <span class="form-text"><%= user.userRole %></span>
    </div>


    <!-- Offboarding button -->
    <div class="offboarding-btn-container">
        <form action="#" method="GET">
            <button type="submit" class="offboarding-btn">Request for Offboarding</button>
        </form>
    </div>

    <div class="password-reset-container">
        <h4 class="password-reset-info">Reset Password</h4>
        <form id="reset-password-form" action="#" method="POST">
            <label>Set New Password:</label>
            <input type="password" name="newPassword" required>
            <label>Confirm New Password:</label>
            <input type="password" name="confirmPassword" required>
            <button type="submit" class="update-password-btn">Update Password</button>
        </form>
    </div>

<!-- Toast Notification -->
<div class="toast" id="toast">
    <strong id="toast-title">360 Feedback Answers Required</strong>
    <p id="toast-message">The 360-Degree Quarterly Feedback must be accomplished from <span id="toast-start-date"></span> up until <span id="toast-end-date"></span>. Your participation is required. Thank you!</p>
    <button class="toast-btn" id="toast-action-btn">Go to Staff Feedback List</button>
    <button class="close-btn" id="close-toast-btn">&times;</button>
</div>

<script>
document.addEventListener("DOMContentLoaded", async () => {
    console.log("Fetching 360 feedback data...");

    try {
        // Make the fetch request to get the 360 feedback data
        const response = await fetch(`/employee/api/get360Feedback`);
        const data = await response.json();
        console.log("Received response:", data);

        if (data.success && data.feedback) {
            const feedbackRecords = data.feedback;
            const today = new Date();
            today.setHours(0, 0, 0, 0);  // Reset time to 00:00:00

            // Check if there are any active feedback records based on the start and end dates
            const activeFeedback = feedbackRecords.some(record => {
                const feedbackStartDate = new Date(record.setStartDate);
                const feedbackEndDate = new Date(record.setEndDate);

                feedbackStartDate.setHours(0, 0, 0, 0);  // Reset time for comparison
                feedbackEndDate.setHours(0, 0, 0, 0);  // Reset time for comparison

                return today >= feedbackStartDate && today <= feedbackEndDate;
            });

            if (activeFeedback) {
                console.log("Active feedback found. Displaying toast.");
                showToast(feedbackRecords);  // Pass the feedback records to showToast
            } else {
                console.log("No active feedback period for the user.");
            }
        } else {
            console.error("Failed to fetch feedback or no feedback available:", data.message);
        }
    } catch (error) {
        console.error("Error while fetching 360 feedback data:", error);
    }

    function showToast(feedbackRecords) {
        const toast = document.getElementById('toast');
        const toastTitle = document.getElementById('toast-title');
        const toastMessage = document.getElementById('toast-message');
        const toastActionBtn = document.getElementById('toast-action-btn');
        const closeToastBtn = document.getElementById('close-toast-btn');
        const toastStartDate = document.getElementById('toast-start-date');
        const toastEndDate = document.getElementById('toast-end-date');

        if (!toast || !toastTitle || !toastMessage || !toastActionBtn || !closeToastBtn || !toastStartDate || !toastEndDate) {
            console.error("One or more toast elements are missing from the DOM.");
            return;
        }

        // Assuming the feedback data has startDate and endDate fields in the first record (modify if needed)
        const feedbackRecord = feedbackRecords[0]; // Just an example, you might want to choose which record to display
        const startDate = new Date(feedbackRecord.setStartDate);
        const endDate = new Date(feedbackRecord.setEndDate);
        
        // Format the dates to a readable format
        const formattedStartDate = startDate.toLocaleDateString();
        const formattedEndDate = endDate.toLocaleDateString();

        toastTitle.innerText = "360 Feedback Answers Required";
        toastMessage.innerText = "The 360-Degree Quarterly Feedback must be accomplished from ";
        
        toastStartDate.innerText = formattedStartDate;
        toastEndDate.innerText = formattedEndDate;
        
        toast.style.display = 'block';

        // Redirect to feedback page on action button click
        toastActionBtn.onclick = () => {
            window.location.href = '/path/to/feedback-form';
        };

        // Close the toast manually
        closeToastBtn.onclick = hideToast;

        // Automatically hide the toast after 5 seconds
        setTimeout(hideToast, 5000);
    }

    // Function to hide the toast notification
    function hideToast() {
        const toast = document.getElementById('toast');
        if (toast) {
            toast.style.display = 'none';
        } else {
            console.error("Toast element is missing from the DOM.");
        }
    }

    // Toggle editing for user info
    const editBtn = document.getElementById('edit-info-btn');
    const saveBtn = document.getElementById('save-info-btn');
    const displayFirstName = document.getElementById('display-firstname');
    const displayLastName = document.getElementById('display-lastname');
    const displayEmail = document.getElementById('display-email');
    const displayRole = document.getElementById('display-role-info');
    const firstNameInput = document.getElementById('firstName');
    const lastNameInput = document.getElementById('lastName');
    const roleInput = document.getElementById('userRole');
    const emailInput = document.getElementById('userEmail');

    if (editBtn && saveBtn) {
        editBtn.addEventListener('click', function () {
            console.log("Edit button clicked. Switching to edit mode.");
            displayFirstName.style.display = 'none';
            displayLastName.style.display = 'none';
            displayRole.style.display = 'none';
            displayEmail.style.display = 'none';
            firstNameInput.style.display = 'block';
            lastNameInput.style.display = 'block';
            roleInput.style.display = 'block';
            emailInput.style.display = 'block';

            editBtn.style.display = 'none';
            saveBtn.style.display = 'inline-block';
        });

        saveBtn.addEventListener('click', function () {
            console.log("Save button clicked. Submitting the form.");
            document.getElementById('edit-user-info').submit();
        });
    } else {
        console.error("Edit or Save button is missing from the DOM.");
    }

    // Handle password reset validation
    const resetPasswordForm = document.getElementById('reset-password-form');
    if (resetPasswordForm) {
        resetPasswordForm.addEventListener('submit', function (event) {
            const newPassword = document.getElementById('new-password').value;
            const confirmPassword = document.getElementById('confirm-password').value;

            if (newPassword !== confirmPassword) {
                console.error("Passwords do not match!");
                alert('Passwords do not match!');
                event.preventDefault();
            } else {
                console.log("Passwords match. Form will be submitted.");
                alert('Password has been successfully updated!');
            }
        });
    }

    // Toggle active class for sidebar links
    document.querySelectorAll('.sidebar ul li a').forEach(link => {
        link.addEventListener('click', function () {
            console.log(`Sidebar link clicked: ${this.textContent}`);
            document.querySelectorAll('.sidebar ul li a').forEach(link => link.classList.remove('active'));
            this.classList.add('active');
        });
    });

    // Toggle collapsible content
    document.querySelectorAll('.collapsible-header').forEach(header => {
        header.addEventListener('click', function () {
            console.log("Collapsible header clicked.");
            const content = this.nextElementSibling;
            if (content.style.display === 'block') {
                console.log("Hiding collapsible content.");
                content.style.display = 'none';
            } else {
                console.log("Displaying collapsible content.");
                document.querySelectorAll('.collapsible-content').forEach(item => {
                    if (item !== content) {
                        item.style.display = 'none';
                    }
                });
                content.style.display = 'block';
            }
        });
    });

    // Handle navigation for Performance Management links
    document.querySelectorAll('.collapsible-content a').forEach(link => {
        link.addEventListener('click', function (event) {
            event.preventDefault();
            const targetUrl = this.getAttribute('href');
            console.log(`Navigating to: ${targetUrl}`);
            window.location.href = targetUrl;
        });
    });
});

</script>


    <!-- <script src="/public/scripts/360toast-script.js"></script> -->
</body>
</html>
