<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee User Account</title>
    <link rel="stylesheet" href="/css/sidebar.css"> <!-- Linking Sidebar CSS -->
    <link rel="stylesheet" href="/css/hr_pages.css"> <!-- Linking Main Content CSS -->
    <style>
.profile-container { 
            display: flex; 
            align-items: center; 
            justify-content: space-between; 
            margin-bottom: 20px; 
        }
        .profile-pic { 
            width: 80px; 
            height: 80px; 
            border-radius: 50%; 
            object-fit: cover; 
            margin-right: 15px; 
        }
        .profile-info { 
            display: flex; 
            flex-direction: column; 
            flex-grow: 1; 
            margin-right: 20px;
        }
        .form-text { 
            font-size: 20px; 
            color: #09191F; 
        }
        #display-role { 
            font-size: 1.2rem; 
            font-style: italic; 
            margin-top: 5px; 
        }
        .password-reset-container { 
            margin-top: 30px; 
            border-top: 1px solid #ccc; 
            padding-top: 20px; 
        }
        .password-reset-container input { 
            width: 100%; 
            padding: 10px; 
            margin: 10px 0; 
            border-radius: 5px; 
            border: 1px solid #ccc; 
        }
        .update-password-btn, .offboarding-btn { 
            background-color: #124A5C; 
            color: white; 
            border: none; 
            padding: 10px 20px; 
            border-radius: 5px; 
            font-size: 1rem; 
            cursor: pointer; 
            transition: background-color 0.3s ease; 
        }
        .update-password-btn:hover, .offboarding-btn:hover { 
            background-color: #059ca4; 
        }
        .edit-btn, .save-btn { 
            background-color: #124A5C; 
            color: white; 
            border: none; 
            padding: 10px 20px; 
            border-radius: 5px; 
            font-size: 1rem; 
            cursor: pointer; 
            margin-left: 20px; /* Space between button and profile info */
            transition: background-color 0.3s ease; 
        }
        .edit-btn:hover, .save-btn:hover { 
            background-color: #059ca4; 
        }
        .form-input { 
            width: 100%; 
            padding: 15px; 
            margin: 10px 0; 
            border-radius: 5px; 
            border: 1px solid #ccc; 
            font-size: 16px; 
            transition: border-color 0.3s ease, box-shadow 0.3s ease; 
            background-color: #f9f9f9; /* Light background color */
            display: none; 
        }
        .form-input:focus { 
            border-color: #059ca4; /* Change border color on focus */
            box-shadow: 0 0 5px rgba(5, 156, 164, 0.5); /* Add shadow on focus */
            background-color: #ffffff; /* Change background color on focus */
        }
        .form-input::placeholder { 
            color: #aaa; /* Placeholder color */
            opacity: 1; /* Show placeholder color */
        }
        .account-info-header { 
            margin-top: 40px; 
            font-size: 1.5rem; 
            font-weight: bold; 
            color: #059ca4; 
        }
        .sub-header { 
            margin-top: 20px; 
            font-size: 1.2rem; 
            font-weight: bold; 
        }
        .offboarding-btn-container { 
            margin-top: 30px; 
        }
        .password-reset-info {
            margin-top: 40px; 
            font-size: 1.5rem; 
            font-weight: bold; 
            color: #059ca4; 
        }

                /* Toast notification styling */
                .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: #f9f9f9;
            border: 1px solid #ccc;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            padding: 16px;
            border-radius: 8px;
            display: none;
            z-index: 9999;
            animation: slide-in 0.5s ease-out;
            font-family: Arial, sans-serif;
            color: #333; /* Default text color */
        }

        .toast.success {
            background-color: #28a745; /* Green for success */
            border-color: #218838;
            color: white; /* White text */
        }

        .toast.error {
            background-color: #dc3545; /* Red for error */
            border-color: #c82333;
            color: white; /* White text */
        }

        .toast button {
            margin-top: 10px;
            background: #059ca4;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 5px;
            cursor: pointer;
        }

        .toast button:hover {
            background: #027a8c; /* Slightly darker shade for hover */
        }

        .toast .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background: none;
            border: none;
            font-size: 20px;
            color: white;
            cursor: pointer;
            font-weight: bold;
        }

        @keyframes slide-in {
            from {
                right: -200px;
            }
            to {
                right: 20px;
            }
        }

    </style>
</head>
<body>
    <%- include('../../partials/employee_partials') %>
   <!-- Main content -->
   <div class="main-content">
    <!-- Profile section -->
    <div class="profile-container">
        <img src="/images/profile.png" alt="Profile Picture" class="profile-pic">
        <div class="profile-info">
            <form id="edit-user-info" action="/employee/update-info" method="POST">
                <span id="display-firstname" class="form-text" style="font-weight: bold; font-size: 25px;"><%= user.firstName %> <%= user.lastName %></span>
                <input type="text" class="form-input" name="firstName" value="<%= user.firstName %>" required>
                <input type="text" class="form-input" name="lastName" value="<%= user.lastName %>" required>
                
                <span id="display-role" class="form-text" style="margin-top: 5px;"><%= user.userRole %></span>
                <input type="text" class="form-input" name="userRole" value="<%= user.userRole %>" required>
                
                <input type="email" class="form-input" name="userEmail" value="<%= user.userEmail %>" required style="display: none;">
            </form>
        </div>
        <div>
            <button type="button" class="edit-btn" id="edit-info-btn">Edit Information</button>
            <button type="submit" class="save-btn" id="save-info-btn" style="display: none;">Save Changes</button>
        </div>
    </div>

    <div>
        <div class="sub-header">Department:</div>
        <span class="form-text"><%= user.deptName %></span>
    </div>
    <div>
        <div class="sub-header">Job Title:</div>
        <span class="form-text"><%= user.jobTitle %></span>
    </div>
    
    
    <div class="account-info-header">User Account Information</div>
    <div>
        <div class="sub-header">Email:</div>
        <span class="form-text"><%= user.userEmail %></span>
    </div>
    <div>
        <div class="sub-header">User Role:</div>
        <span class="form-text"><%= user.userRole %></span>
    </div>
    
<!-- Hidden Elements for Fetching Feedback Data -->
<% if (typeof feedbackData !== 'undefined' && feedbackData && feedbackData.length > 0) { %>
    <% feedbackData.forEach(feedbackItem => { %>
        <input type="hidden" id="userId_<%= feedbackItem.userId %>" value="<%= feedbackItem.userId %>">
        <input type="hidden" id="startDate_<%= feedbackItem.userId %>" value="<%= feedbackItem.feedbackStartDate || 'No start date' %>">
        <input type="hidden" id="endDate_<%= feedbackItem.userId %>" value="<%= feedbackItem.feedbackEndDate || 'No end date' %>">
    <% }); %>
<% } else { %>
    <p>No feedback data available.</p>
<% } %>


    <!-- Offboarding button -->
    <div class="offboarding-btn-container">
        <form action="#" method="GET">
            <button type="submit" class="offboarding-btn">Request for Offboarding</button>
        </form>
    </div>

    <div class="password-reset-container">
        <h4 class="password-reset-info">Reset Password</h4>
        <form id="reset-password-form" action="#" method="POST">
            <label>Set New Password:</label>
            <input type="password" name="newPassword" required>
            <label>Confirm New Password:</label>
            <input type="password" name="confirmPassword" required>
            <button type="submit" class="update-password-btn">Update Password</button>
        </form>
    </div>

    <!-- Toast Notification -->
    <div class="toast" id="toast">
        <span id="toast-message">Password updated successfully!</span>
        <button class="close-btn" id="close-toast-btn">&times;</button>
        <button class="btn" id="undo-toast-btn">Undo</button>
    </div>
</div>

<script>
    // Toast Functions
    function showToast(message, type) {
        const toast = document.getElementById('toast');
        const toastMessage = document.getElementById('toast-message');

        if (!toast || !toastMessage) {
            console.error("Toast elements are missing from the DOM.");
            return;
        }

        console.log(`Showing toast: [Message: ${message}, Type: ${type}]`);
        toast.classList.add(type);
        toastMessage.innerText = message;
        toast.style.display = 'block';

        setTimeout(() => {
            console.log("Hiding toast after 5 seconds.");
            toast.style.display = 'none';
        }, 5000);
    }

    function hideToast() {
        const toast = document.getElementById('toast');
        if (toast) {
            console.log("Hiding toast.");
            toast.style.display = 'none';
        } else {
            console.error("Toast element is missing from the DOM.");
        }
    }

    const feedbackDataElement = document.getElementById('feedbackData');
    const feedbackData = JSON.parse(feedbackDataElement.getAttribute('data-feedback'));
    console.log("Feedback Data:", feedbackData);

document.addEventListener("DOMContentLoaded", async () => { // Added async
    console.log("Fetching 360 feedback data...");

    try {
        const userIdElement = document.getElementById('userId');
        const startDateElement = document.getElementById('startDate');
        const endDateElement = document.getElementById('endDate');
        const quarterElement = document.getElementById('quarter');

        const missingElements = [];
        if (!userIdElement) missingElements.push("userId");
        if (!startDateElement) missingElements.push("startDate");
        if (!endDateElement) missingElements.push("endDate");
        if (!quarterElement) missingElements.push("quarter");

        if (missingElements.length > 0) {
            console.error(`Required elements are missing from the DOM: ${missingElements.join(", ")}`);
            return;
        }

        const userId = userIdElement.value;
        const startDate = startDateElement.value;
        const endDate = endDateElement.value;
        const quarter = quarterElement.value;

        console.log(`Fetching data with params: userId=${userId}, startDate=${startDate}, endDate=${endDate}, quarter=${quarter}`);

        // Fetch data
        const response = await fetch(`/employee/api/get360Feedback?userId=${userId}&startDate=${startDate}&endDate=${endDate}&quarter=${quarter}`);
        const data = await response.json();

        console.log("Received response:", data);

        if (data.success && data.feedback) {
            const { startDate: feedbackStart, endDate: feedbackEnd } = data.feedback;
            const today = new Date();
            const feedbackStartDate = new Date(feedbackStart);
            const feedbackEndDate = new Date(feedbackEnd);

            console.log(`Feedback period: Start=${feedbackStartDate}, End=${feedbackEndDate}`);

            if (today >= feedbackStartDate && today <= feedbackEndDate) {
                console.log("Feedback is available for the user.");
                showToast("You have feedback available. Please check your 360 feedback.", "info");

                document.getElementById("startDate").textContent = feedbackStartDate.toLocaleDateString();
                document.getElementById("endDate").textContent = feedbackEndDate.toLocaleDateString();

                const feedbackButton = document.getElementById("feedback-button");
                if (feedbackButton) {
                    feedbackButton.addEventListener("click", () => {
                        console.log("Navigating to feedback questionnaires.");
                        window.location.href = "/feedback/questionnaires";
                    });
                } else {
                    console.error("Feedback button is missing from the DOM.");
                }
            } else {
                console.log("No active feedback period for the user.");
            }
        } else {
            console.error("Failed to fetch feedback or no feedback available:", data.message);
        }
    } catch (error) {
        console.error("Error while fetching 360 feedback data:", error);
    }

        // Toggle editing for user info
        const editBtn = document.getElementById('edit-info-btn');
        const saveBtn = document.getElementById('save-info-btn');
        const displayFirstName = document.getElementById('display-firstname');
        const displayLastName = document.getElementById('display-lastname');
        const displayEmail = document.getElementById('display-email');
        const displayRole = document.getElementById('display-role-info');
        const firstNameInput = document.getElementById('firstName');
        const lastNameInput = document.getElementById('lastName');
        const roleInput = document.getElementById('userRole');
        const emailInput = document.getElementById('userEmail');

        if (editBtn && saveBtn) {
            editBtn.addEventListener('click', function () {
                console.log("Edit button clicked. Switching to edit mode.");
                displayFirstName.style.display = 'none';
                displayLastName.style.display = 'none';
                displayRole.style.display = 'none';
                displayEmail.style.display = 'none';
                firstNameInput.style.display = 'block';
                lastNameInput.style.display = 'block';
                roleInput.style.display = 'block';
                emailInput.style.display = 'block';

                editBtn.style.display = 'none';
                saveBtn.style.display = 'inline-block';
            });

            saveBtn.addEventListener('click', function () {
                console.log("Save button clicked. Submitting the form.");
                document.getElementById('edit-user-info').submit();
            });
        } else {
            console.error("Edit or Save button is missing from the DOM.");
        }

        // Handle password reset validation
        const resetPasswordForm = document.getElementById('reset-password-form');
        if (resetPasswordForm) {
            resetPasswordForm.addEventListener('submit', function (event) {
                const newPassword = document.getElementById('new-password').value;
                const confirmPassword = document.getElementById('confirm-password').value;

                if (newPassword !== confirmPassword) {
                    console.error("Passwords do not match!");
                    alert('Passwords do not match!');
                    event.preventDefault();
                } else {
                    console.log("Passwords match. Form will be submitted.");
                    alert('Password has been successfully updated!');
                }
            });
        }

        // Toggle active class for sidebar links
        document.querySelectorAll('.sidebar ul li a').forEach(link => {
            link.addEventListener('click', function () {
                console.log(`Sidebar link clicked: ${this.textContent}`);
                document.querySelectorAll('.sidebar ul li a').forEach(link => link.classList.remove('active'));
                this.classList.add('active');
            });
        });

        // Toggle collapsible content
        document.querySelectorAll('.collapsible-header').forEach(header => {
            header.addEventListener('click', function () {
                console.log("Collapsible header clicked.");
                const content = this.nextElementSibling;
                if (content.style.display === 'block') {
                    console.log("Hiding collapsible content.");
                    content.style.display = 'none';
                } else {
                    console.log("Displaying collapsible content.");
                    document.querySelectorAll('.collapsible-content').forEach(item => {
                        if (item !== content) {
                            item.style.display = 'none';
                        }
                    });
                    content.style.display = 'block';
                }
            });
        });

        // Handle navigation for Performance Management links
        document.querySelectorAll('.collapsible-content a').forEach(link => {
            link.addEventListener('click', function (event) {
                event.preventDefault();
                const targetUrl = this.getAttribute('href');
                console.log(`Navigating to: ${targetUrl}`);
                window.location.href = targetUrl;
            });
        });
    });
</script>


    <!-- <script src="/public/scripts/360toast-script.js"></script> -->
</body>
</html>
