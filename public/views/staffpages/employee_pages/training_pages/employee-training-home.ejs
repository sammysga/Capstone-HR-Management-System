<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trainings & Development</title>
    <link rel="stylesheet" href="/css/sidebar.css">
    <link rel="stylesheet" href="/css/recordsandperformancetracker.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        /* Import Inter font */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');

        /* Main content styling */
        .main-content {
            margin-left: 270px;
            padding: 20px;
            font-family: 'Inter', sans-serif;
        }

        /* Dashboard header */
        .dashboard-header {
            margin-bottom: 25px;
        }

        .dashboard-header h2 {
            margin-bottom: 10px;
            color: #333;
            font-size: 24px;
        }

        .dashboard-header p {
            color: #666;
            font-size: 0.95rem;
            max-width: 800px;
        }

        /* Action Required Alert */
        .action-required {
            background-color: #fef3c7;
            border-left: 4px solid #f59e0b;
            padding: 15px 20px;
            margin-bottom: 30px;
            border-radius: 8px;
        }

        .action-required-text {
            color: #92400e;
            font-weight: 500;
            margin: 0;
            font-size: 14px;
        }

        .action-required-highlight {
            color: #d97706;
            font-weight: 600;
        }

        /* Tabs styling */
        .tabs-container {
            width: 100%;
            margin-bottom: 30px;
        }

        .tabs-nav {
            display: flex;
            border-bottom: 2px solid #eee;
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .tab-button {
            padding: 12px 20px;
            background-color: transparent;
            border: none;
            border-bottom: 3px solid transparent;
            cursor: pointer;
            font-weight: 600;
            font-size: 14px;
            color: #666;
            transition: all 0.3s ease;
            margin-right: 10px;
            display: flex;
            align-items: center;
        }

        .tab-button i {
            margin-right: 8px;
            font-size: 16px;
        }

        .tab-button.active {
            color: #07ACB9;
            border-bottom: 3px solid #07ACB9;
            background-color: #f8fdfd;
        }

        .tab-button:hover:not(.active) {
            color: #124A5C;
            border-bottom: 3px solid #ddd;
        }

        .tab-content {
            display: none;
            padding: 25px 0;
            animation: fadeIn 0.5s;
        }

        .tab-content.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        /* Card styling */
        .card {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
            padding: 20px;
            margin-bottom: 25px;
        }

        .card-header {
            margin-bottom: 15px;
            border-bottom: 1px solid #f0f0f0;
            padding-bottom: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .card-header h3 {
            margin: 0;
            font-size: 1.2rem;
            color: #333;
        }

        /* Progress categories grid */
        .progress-categories {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .progress-category {
            background-color: #f8fafc;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            padding: 25px;
            text-align: center;
            min-height: 120px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
        }

        .progress-category:hover {
            border-color: #07ACB9;
            transform: translateY(-2px);
        }

        .progress-category h3 {
            margin: 0 0 10px 0;
            font-size: 1.1rem;
            color: #334155;
            font-weight: 600;
        }

        .progress-category .count {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 5px;
        }

        .progress-category.in-progress {
            border-color: #3b82f6;
            background-color: #eff6ff;
        }

        .progress-category.in-progress .count {
            color: #3b82f6;
        }

        .progress-category.completed {
            border-color: #10b981;
            background-color: #ecfdf5;
        }

        .progress-category.completed .count {
            color: #10b981;
        }

        .progress-category.overdue {
            border-color: #ef4444;
            background-color: #fef2f2;
        }

        .progress-category.overdue .count {
            color: #ef4444;
        }

        /* Courses header actions */
        .courses-header-actions {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        /* Add request button styling */
        .add-request-btn {
            background-color: #124A5C;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            white-space: nowrap;
        }

        .add-request-btn:hover {
            background-color: #0d3c4a;
            transform: translateY(-2px);
        }


.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(4px);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 10000;
    padding: 20px;
}

.modal-overlay.show {
    display: flex;
    animation: modalFadeIn 0.3s ease-out;
}

.modal-content {
    background: white;
    border-radius: 20px;
    width: 100%;
    max-width: 800px;
    max-height: 95vh;
    overflow-y: auto;
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
    position: relative;
    animation: modalSlideIn 0.3s ease-out;
}

@keyframes modalSlideIn {
    from { 
        opacity: 0;
        transform: translateY(-20px) scale(0.95);
    }
    to { 
        opacity: 1;
        transform: translateY(0) scale(1);
    }
}

.modal-header {
    padding: 30px 30px 20px 30px;
    border-bottom: 1px solid #e2e8f0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background:  #07ACB9 100%;
    color: white;
    border-radius: 20px 20px 0 0;
}

.modal-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin: 0;
}

.modal-close {
    background: rgba(255, 255, 255, 0.2);
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
}

.modal-close:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: scale(1.1);
}

     
/* Form Sections */
.form-section {
    padding: 25px 30px;
    border-bottom: 1px solid #f1f5f9;
}

.form-section:last-child {
    border-bottom: none;
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.section-header h3 {
    font-size: 1.2rem;
    font-weight: 600;
    color: #1e293b;
    margin: 0;
    display: flex;
    align-items: center;
    gap: 10px;
}

.section-header h3 i {
    color: #07ACB9;
}

.duration-info {
    background: #f0f9ff;
    color: #0369a1;
    padding: 8px 16px;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 500;
}


        .checkbox-group {
            display: flex;
            flex-wrap: wrap;
            gap: 12px;
            margin-top: 8px;
        }

        .checkbox-item {
            display: flex;
            align-items: center;
            gap: 6px;
            padding: 8px 12px;
            border: 1px solid #e2e8f0;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 14px;
        }

        .checkbox-item:hover {
            border-color: #07ACB9;
            background-color: #f0fdff;
        }

        .checkbox-item.selected {
            background-color: #07ACB9;
            color: white;
            border-color: #07ACB9;
        }

        .checkbox-item input[type="checkbox"] {
            display: none;
        }

        .date-inputs {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }

        .confirmation-message {
            background-color: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 16px;
            margin: 20px 0;
            font-size: 14px;
            color: #64748b;
            text-align: center;
        }

        .modal-actions {
            display: flex;
            justify-content: center;
            gap: 12px;
            margin-top: 25px;
        }

        .btn-secondary {
            background-color: #f8fafc;
            color: #64748b;
            border: 1px solid #e2e8f0;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .btn-secondary:hover {
            background-color: #e2e8f0;
        }

        .btn-primary {
            background-color: #124A5C;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .btn-primary:hover {
            background-color: #0d3c4a;
        }

        .filter-dropdown {
            position: relative;
        }

        .filter-button {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 10px 15px;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            background-color: #fff;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.2s ease;
        }

        .filter-button:hover {
            border-color: #07ACB9;
        }

        .filter-dropdown-content {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background-color: white;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            z-index: 1000;
            display: none;
            padding: 10px;
            min-width: 150px;
        }

        .filter-dropdown.open .filter-dropdown-content {
            display: block;
        }

        .filter-option {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px;
            cursor: pointer;
            border-radius: 4px;
            font-size: 14px;
        }

        .filter-option:hover {
            background-color: #f8fafc;
        }

        .filter-option input[type="checkbox"] {
            margin: 0;
        }

        /* Active filters display */
        .active-filters {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
            margin-left: 10px;
        }

        .filter-tag {
            background-color: #07ACB9;
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .filter-tag .remove-filter {
            cursor: pointer;
            font-size: 10px;
            background-color: rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            width: 14px;
            height: 14px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Courses Grid */
        .courses-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }

        .course-card {
            background-color: #f8fafc;
            border: none;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .course-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        }

        .course-card.enrolled {
            border-left: 4px solid #07ACB9;
        }

        .course-card.completed {
            border-left: 4px solid #10b981;
        }

        .course-card.overdue {
            border-left: 4px solid #ef4444;
        }

        .course-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 15px;
        }

        .course-title {
            font-size: 1.1rem;
            font-weight: 600;
            color: #334155;
            margin: 0;
            flex: 1;
        }

        .course-badges {
            display: flex;
            flex-direction: column;
            gap: 5px;
            margin-left: 10px;
        }

        .course-status {
            display: inline-flex;
            align-items: center;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: 500;
        }

        .course-status.active {
            background-color: #10b981;
            color: white;
        }

        .course-status.inactive {
            background-color: #6b7280;
            color: white;
        }

        .course-status.enrolled {
            background-color: #3b82f6;
            color: white;
        }

        .course-type {
            display: inline-flex;
            align-items: center;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: 500;
            background-color: #e5e7eb;
            color: #374151;
        }

        .course-type.online {
            background-color: #dbeafe;
            color: #1e40af;
        }

        .course-type.onsite {
            background-color: #fef3c7;
            color: #d97706;
        }

        .course-type.required {
            background-color: #fecaca;
            color: #dc2626;
        }

        .course-description {
            color: #64748b;
            font-size: 14px;
            margin-bottom: 15px;
            line-height: 1.5;
        }

        .enroll-btn {
            background-color: #07ACB9;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .enroll-btn:hover {
            background-color: #059ca4;
        }

        /* Progress bar styling - matching the performance dashboard */
        .course-progress {
            background-color: #f2f2f2;
            height: 20px;
            border-radius: 4px;
            overflow: hidden;
            margin: 15px 0 10px 0;
            position: relative;
        }

        .progress-fill {
            height: 100%;
            background-color: #07ACB9;
            border-radius: 4px;
            transition: width 0.3s ease-in-out;
            position: relative;
            text-align: center;
            color: #fff;
            line-height: 20px;
            font-size: 12px;
            font-weight: 600;
        }

        /* Upload button styling */
        .upload-certificate-btn {
            background-color: #124A5C;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .upload-certificate-btn:hover {
            background-color: #0d3c4a;
            transform: translateY(-2px);
        }

        /* View toggle buttons */
        .view-toggle {
            display: flex;
            gap: 10px;
        }

        .view-btn {
            padding: 8px 16px;
            border: 1px solid #e2e8f0;
            background-color: #f8fafc;
            color: #64748b;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.2s ease;
        }

        .view-btn.active {
            background-color: #124A5C;
            color: white;
            border-color: #124A5C;
        }

        .view-btn:hover:not(.active) {
            border-color: #07ACB9;
            color: #07ACB9;
        }

        /* Certificates grid */
        .certificates-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .certificate-item {
            background-color: #f8fafc;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            padding: 20px;
            transition: all 0.3s ease;
        }

        .certificate-item:hover {
            border-color: #07ACB9;
            background-color: #f0fdff;
        }

        .certificate-item.uploaded {
            border-color: #10b981;
            background-color: #ecfdf5;
        }

        .certificate-header {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 15px;
        }

        .certificate-icon {
            background-color: #07ACB9;
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
        }

        .certificate-title {
            font-weight: 600;
            color: #334155;
            font-size: 1rem;
            margin: 0;
        }

        .certificate-details {
            margin: 10px 0;
            color: #64748b;
            font-size: 14px;
            line-height: 1.5;
        }

        .certificate-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #e2e8f0;
            font-size: 12px;
            color: #6b7280;
        }

        .certificate-placeholder {
            color: #94a3b8;
            font-style: italic;
            text-align: center;
        }

        /* Progress sections styling */
        .progress-section {
            margin-bottom: 40px;
        }

        .progress-section .section-title {
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #f0f0f0;
            display: flex;
            align-items: center;
        }

        /* List view styling for progress sections */
        .courses-list {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .course-list-item {
            background-color: #fff;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 16px 20px;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .course-list-item:hover {
            border-color: #07ACB9;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .course-list-item.enrolled {
            border-left: 4px solid #3b82f6;
        }

        .course-list-item.completed {
            border-left: 4px solid #10b981;
        }

        .course-list-item.overdue {
            border-left: 4px solid #ef4444;
        }

        .course-list-info {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .course-list-title {
            font-size: 1rem;
            font-weight: 600;
            color: #334155;
            margin: 0;
        }

        .course-list-details {
            font-size: 14px;
            color: #64748b;
            line-height: 1.4;
        }

        .course-list-meta {
            display: flex;
            align-items: center;
            gap: 15px;
            min-width: 250px;
        }

        .course-list-badges {
            display: flex;
            gap: 6px;
            flex-wrap: wrap;
        }

        .course-list-badge {
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: 500;
        }

        .course-list-badge.online {
            background-color: #dbeafe;
            color: #1e40af;
        }

        .course-list-badge.onsite {
            background-color: #fef3c7;
            color: #d97706;
        }

        .course-list-badge.required {
            background-color: #fecaca;
            color: #dc2626;
        }

        .course-list-progress {
            width: 120px;
            text-align: right;
        }

        .course-list-progress-bar {
            width: 100%;
            height: 6px;
            background-color: #f2f2f2;
            border-radius: 3px;
            overflow: hidden;
            margin-bottom: 4px;
        }

        .course-list-progress-fill {
            height: 100%;
            background-color: #07ACB9;
            border-radius: 3px;
            transition: width 0.3s ease;
        }

        .course-list-progress-text {
            font-size: 12px;
            color: #64748b;
            font-weight: 500;
        }

        /* Certificates list styling */
        .certificates-list {
            display: flex;
            flex-direction: column;
            gap: 12px;
            margin-top: 20px;
        }

        .certificate-list-item {
            background-color: #fff;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 16px 20px;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .certificate-list-item:hover {
            border-color: #07ACB9;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .certificate-list-item.uploaded {
            border-left: 4px solid #10b981;
        }

        .certificate-list-info {
            flex: 1;
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .certificate-list-icon {
            background-color: #07ACB9;
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.1rem;
            flex-shrink: 0;
        }

        .certificate-list-details {
            flex: 1;
        }

        .certificate-list-title {
            font-size: 1rem;
            font-weight: 600;
            color: #334155;
            margin: 0 0 4px 0;
        }

        .certificate-list-meta {
            font-size: 14px;
            color: #64748b;
            line-height: 1.4;
        }

        .certificate-list-actions {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .certificate-list-id {
            font-size: 12px;
            color: #6b7280;
            font-family: monospace;
        }

        .certificate-download {
            color: #07ACB9;
            cursor: pointer;
            font-size: 1.1rem;
            padding: 4px;
            border-radius: 4px;
            transition: background-color 0.2s ease;
        }

        .certificate-download:hover {
            background-color: #f0fdff;
        }

        /* Show more styling */
        .show-more-item {
            border: 2px dashed #cbd5e1;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            color: #64748b;
        }

        .show-more-item:hover {
            border-color: #07ACB9;
            background-color: #f0fdff;
        }

        /* Smooth scrolling */
        html {
            scroll-behavior: smooth;
        }

        /* Mobile Responsive */
        @media (max-width: 768px) {
            .main-content {
                margin-left: 0;
                padding: 15px;
            }

            .progress-categories {
                grid-template-columns: 1fr;
            }

            .card-header {
                flex-direction: column;
                gap: 15px;
                align-items: stretch;
            }

            .filter-section {
                flex-direction: column;
                align-items: stretch;
            }

            .courses-grid {
                grid-template-columns: 1fr;
            }

            .course-header {
                flex-direction: column;
                gap: 10px;
            }

            .course-badges {
                margin-left: 0;
                flex-direction: row;
            }
        }

         /* ADD REQUEST MODAL CSS */
       

/* Training Details Card */
.training-details-card {
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
    border: 2px solid #e2e8f0;
    border-radius: 12px;
    padding: 20px;
    margin-top: 15px;
    transition: all 0.3s ease;
}

.training-card-header {
    display: flex;
    align-items: center;
    gap: 15px;
}

.training-icon {
    background: linear-gradient(135deg, #124A5C 0%, #07ACB9 100%);
    color: white;
    width: 50px;
    height: 50px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem;
}

.training-info h4 {
    margin: 0 0 8px 0;
    font-size: 1.1rem;
    font-weight: 600;
    color: #1e293b;
}

.training-meta {
    display: flex;
    gap: 20px;
    flex-wrap: wrap;
}

.meta-item {
    display: flex;
    align-items: center;
    gap: 6px;
    font-size: 14px;
    color: #64748b;
}

.meta-item i {
    color: #07ACB9;
}

/* Focus Areas */
.focus-areas-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 25px;
}

.focus-area-column {
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 10px;
    padding: 20px;
}

.focus-area-header {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 15px;
    font-weight: 600;
    color: #374151;
}

.focus-area-header i {
    color: #07ACB9;
}

.tags-container {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    min-height: 40px;
}

.tag {
    background: linear-gradient(135deg, #07ACB9 0%, #059ca4 100%);
    color: white;
    padding: 8px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 500;
    display: flex;
    align-items: center;
    gap: 6px;
    box-shadow: 0 2px 4px rgba(7, 172, 185, 0.2);
}

.tag.objective {
    background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
    box-shadow: 0 2px 4px rgba(59, 130, 246, 0.2);
}

.tag.skill {
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    box-shadow: 0 2px 4px rgba(16, 185, 129, 0.2);
}

.empty-state {
    color: #94a3b8;
    font-style: italic;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 40px;
    border: 2px dashed #cbd5e1;
    border-radius: 8px;
    background: white;
}

/* Schedule Options */
.schedule-options {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    gap: 15px;
    margin-bottom: 25px;
}

.schedule-option {
    position: relative;
    cursor: pointer;
}

.schedule-option input[type="radio"] {
    position: absolute;
    opacity: 0;
}

.schedule-option label {
    display: block;
    background: #f8fafc;
    border: 2px solid #e2e8f0;
    border-radius: 12px;
    padding: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
    height: 100%;
}

.schedule-option:hover label {
    border-color: #07ACB9;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(7, 172, 185, 0.15);
}

.schedule-option input[type="radio"]:checked + label {
    border-color: #07ACB9;
    background: linear-gradient(135deg, #f0fdff 0%, #e6fffa 100%);
    box-shadow: 0 4px 12px rgba(7, 172, 185, 0.2);
}

.option-icon {
    background: linear-gradient(135deg, #124A5C 0%, #07ACB9 100%);
    color: white;
    width: 40px;
    height: 40px;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 12px;
}

.option-content h4 {
    margin: 0 0 4px 0;
    font-size: 16px;
    font-weight: 600;
    color: #1e293b;
}

.option-content p {
    margin: 0 0 8px 0;
    font-size: 14px;
    color: #64748b;
}

.schedule-preview {
    font-size: 12px;
    color: #07ACB9;
    font-weight: 500;
}

/* Date Selection */
.date-selection {
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 25px;
    margin-bottom: 20px;
}

.date-input-group {
    display: grid;
    grid-template-columns: 1fr auto 1fr;
    gap: 20px;
    align-items: end;
    margin-bottom: 20px;
}

.date-arrow {
    color: #07ACB9;
    font-size: 1.2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 10px;
}

.date-field {
    position: relative;
}

.date-input {
    width: 100%;
    padding: 12px 16px;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    font-size: 14px;
    transition: all 0.2s ease;
}

.date-input:focus {
    outline: none;
    border-color: #07ACB9;
    box-shadow: 0 0 0 3px rgba(7, 172, 185, 0.1);
}

.date-input:read-only {
    background: #f1f5f9;
    color: #64748b;
}

.date-helper {
    font-size: 12px;
    color: #64748b;
    margin-top: 4px;
}

.custom-schedule {
    border-top: 1px solid #e2e8f0;
    padding-top: 20px;
}

.custom-input-group {
    margin-bottom: 15px;
}

.custom-note {
    display: flex;
    align-items: center;
    gap: 8px;
    color: #64748b;
    font-size: 14px;
}

.custom-note i {
    color: #07ACB9;
}

/* Schedule Summary */
.schedule-summary {
    margin-top: 25px;
}

.summary-card {
    background: linear-gradient(135deg, #ecfdf5 0%, #f0fdf4 100%);
    border: 2px solid #10b981;
    border-radius: 12px;
    padding: 20px;
}

.summary-header {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 15px;
    font-weight: 600;
    color: #065f46;
}

.summary-header i {
    color: #10b981;
}

.summary-content {
    display: grid;
    gap: 10px;
}

.summary-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px 0;
    border-bottom: 1px solid rgba(16, 185, 129, 0.2);
}

.summary-row:last-child {
    border-bottom: none;
}

.summary-row span {
    color: #374151;
}

.summary-row strong {
    color: #065f46;
}

/* Confirmation Note */
.confirmation-note {
    display: flex;
    gap: 15px;
    background: #fef3c7;
    border: 2px solid #f59e0b;
    border-radius: 12px;
    padding: 20px;
}

.note-icon {
    color: #d97706;
    font-size: 1.2rem;
    flex-shrink: 0;
}

.note-content {
    color: #92400e;
    line-height: 1.5;
}

/* Form Controls */
.form-label {
    display: block;
    font-size: 14px;
    font-weight: 600;
    color: #374151;
    margin-bottom: 8px;
    display: flex;
    align-items: center;
    gap: 8px;
}

.form-label i {
    color: #07ACB9;
}

.form-input {
    width: 100%;
    padding: 12px 16px;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    font-size: 14px;
    transition: all 0.2s ease;
    box-sizing: border-box;
}

.form-input:focus {
    outline: none;
    border-color: #07ACB9;
    box-shadow: 0 0 0 3px rgba(7, 172, 185, 0.1);
}

/* Dropdown */
.dropdown-container {
    position: relative;
}

.dropdown-input {
    width: 100%;
    padding: 12px 40px 12px 16px;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    font-size: 14px;
    transition: all 0.2s ease;
    cursor: pointer;
}

.dropdown-icon {
    position: absolute;
    right: 12px;
    top: 50%;
    transform: translateY(-50%);
    color: #64748b;
    pointer-events: none;
    transition: transform 0.2s ease;
}

.dropdown-container.open .dropdown-icon {
    transform: translateY(-50%) rotate(180deg);
}

.dropdown-list {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: white;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
    z-index: 1000;
    display: none;
    max-height: 250px;
    overflow-y: auto;
}

.dropdown-container.open .dropdown-list {
    display: block;
}

.dropdown-item {
    padding: 15px 20px;
    cursor: pointer;
    border-bottom: 1px solid #f1f5f9;
    transition: all 0.2s ease;
}

.dropdown-item:last-child {
    border-bottom: none;
}

.dropdown-item:hover {
    background: #f8fafc;
}

.dropdown-item-title {
    font-weight: 600;
    color: #1e293b;
    margin-bottom: 4px;
}

.dropdown-item-meta {
    font-size: 12px;
    color: #64748b;
    display: flex;
    align-items: center;
    gap: 12px;
}

.loading, .no-results {
    padding: 20px;
    text-align: center;
    color: #64748b;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
}

/* Action Buttons */
.modal-actions {
    padding: 25px 30px;
    background: #f8fafc;
    border-radius: 0 0 20px 20px;
    display: flex;
    justify-content: center;
    gap: 15px;
}

.btn-secondary, .btn-primary {
    padding: 12px 24px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 8px;
    min-width: 120px;
    justify-content: center;
}

.btn-secondary {
    background: white;
    color: #64748b;
    border: 2px solid #e2e8f0;
}

.btn-secondary:hover {
    background: #f1f5f9;
    border-color: #cbd5e1;
}

.btn-primary {
    background: linear-gradient(135deg, #124A5C 0%, #07ACB9 100%);
    color: white;
    border: none;
    box-shadow: 0 4px 12px rgba(18, 74, 92, 0.3);
}

.btn-primary:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(18, 74, 92, 0.4);
}

.btn-primary:disabled {
    background: #94a3b8;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
}

/* Responsive Design */
@media (max-width: 768px) {
    .modal-content {
        margin: 10px;
        max-height: calc(100vh - 20px);
        border-radius: 15px;
    }
    
    .modal-header {
        padding: 20px 20px 15px 20px;
        border-radius: 15px 15px 0 0;
    }
    
    .form-section {
        padding: 20px;
    }
    
    .focus-areas-grid {
        grid-template-columns: 1fr;
    }
    
    .schedule-options {
        grid-template-columns: 1fr;
    }
    
    .date-input-group {
        grid-template-columns: 1fr;
        gap: 15px;
    }
    
    .date-arrow {
        display: none;
    }
    
    .modal-actions {
        padding: 20px;
        flex-direction: column;
    }
    
    .btn-secondary, .btn-primary {
        width: 100%;
    }
    .peso-symbol {
    font-weight: bold;
    margin-right: 4px;
}
}
/* MODAL FOR ADD REQUEST */

    </style>
</head>
<body>
    <%- include('../../../partials/employee_partials') %>
    
    <!-- Main content area -->
    <div class="main-content">
        <div class="dashboard-header">
            <h2>Trainings</h2>
            <p>Access your training programs, track your learning progress, and manage your professional development certifications.</p>
        </div>

        <!-- Action Required Alert -->
        <div class="action-required">
            <p class="action-required-text">
                <span class="action-required-highlight">Action Required:</span> 
                [SETTING OF 2025 MID-YEAR/FINAL YEAR TRAININGS] Please set the Mid-Year/Final-Year Individual Development Plan (IDP) in the Records and Performance Tracker before adding a new entry.
            </p>
        </div>

       <!-- Tabs Container -->
        <div class="tabs-container">
            <ul class="tabs-nav">
                <li><button class="tab-button active" data-tab="progress-tab">
                    <i class="fas fa-chart-line"></i> Training Progress
                </button></li>
                <li><button class="tab-button" data-tab="courses-tab">
                    <i class="fas fa-graduation-cap"></i> All Courses
                </button></li>
                <li><button class="tab-button" data-tab="certificates-tab">
                    <i class="fas fa-certificate"></i> Certificates
                </button></li>
            </ul>

            <!-- Tab Content -->
            <div class="tab-contents">
                <!-- Training Progress Tab -->
                <div id="progress-tab" class="tab-content active">
                    <div class="card">
                        <div class="card-header">
                            <h3>Training Progress Overview</h3>
                            <div class="view-toggle">
                                <button class="view-btn active">List View</button>
                                <button class="view-btn">Calendar View</button>
                            </div>
                        </div>
                        <p>Track your training progress across different categories. Click on a category to filter your training courses below.</p>
                        
                        <div class="progress-categories" id="progressCategories">
                            <div class="loading-state">
                                <i class="fas fa-spinner fa-spin loading-spinner"></i>
                                Loading training progress...
                            </div>
                        </div>

                        <!-- Training Sections Container -->
                        <div id="trainingSections">
                            <div class="loading-state">
                                <i class="fas fa-spinner fa-spin loading-spinner"></i>
                                Loading your training courses...
                            </div>
                        </div>
                    </div>
                </div>

                <!-- All Courses Tab -->
                <div id="courses-tab" class="tab-content">
                    <div class="card">
                        <div class="card-header">
                            <h3>All Training Courses</h3>
                            <div class="courses-header-actions">
                                <button class="add-request-btn" onclick="openTrainingRequestModal()">
                                    <i class="fas fa-plus"></i>
                                    Request New Training
                                </button>
                            </div>
                        </div>
                        <p>Browse all available training courses. Use "Update Progress" for active trainings you're enrolled in.</p>
                        
                        <div class="courses-grid" id="allCoursesGrid">
                            <div class="loading-state">
                                <i class="fas fa-spinner fa-spin loading-spinner"></i>
                                Loading available courses...
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Certificates Tab -->
                <div id="certificates-tab" class="tab-content">
                    <div class="card">
                        <div class="card-header">
                            <h3>All Certificates</h3>
                            <button class="upload-certificate-btn">
                                <i class="fas fa-upload"></i>
                                Upload Certificate
                            </button>
                        </div>
                        <p>Manage your training certificates and upload new certifications you've earned.</p>
                        
                        <div class="certificates-list" id="certificatesList">
                            <div class="loading-state">
                                <i class="fas fa-spinner fa-spin loading-spinner"></i>
                                Loading certificates...
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

<!-- Training Request Modal -->
<div class="modal-overlay" id="trainingRequestModal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 class="modal-title">Request New Training</h2>
            <button class="modal-close" onclick="closeTrainingRequestModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        
        <form id="trainingRequestForm">
            <!-- Training Selection -->
            <div class="form-section">
                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-graduation-cap"></i>
                        Select Training Course
                    </label>
                    <div class="dropdown-container" id="trainingDropdown">
                        <input 
                            type="text" 
                            class="dropdown-input" 
                            id="trainingCourseInput" 
                            placeholder="Search and select a training course..."
                            autocomplete="off"
                            required
                        >
                        <i class="fas fa-chevron-down dropdown-icon"></i>
                        <div class="dropdown-list" id="trainingDropdownList">
                            <div class="loading">Loading available trainings...</div>
                        </div>
                    </div>
                    <input type="hidden" id="selectedTrainingId" name="selectedTrainingId">
                </div>

                <!-- Training Details Card -->
                <div class="training-details-card" id="trainingDetailsCard" style="display: none;">
                    <div class="training-card-header">
                        <div class="training-icon">
                            <i class="fas fa-book-open"></i>
                        </div>
                        <div class="training-info">
                            <h4 id="selectedTrainingName">Selected Training</h4>
                            <div class="training-meta">
                                <span id="trainingDuration" class="meta-item">
                                    <i class="fas fa-clock"></i> 0 hours
                                </span>
                                <span id="trainingType" class="meta-item">
                                    <i class="fas fa-laptop"></i> Online
                                </span>
                              <span id="trainingCost" class="meta-item">
    <span class="peso-symbol">Php</span> Free
</span>


                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Focus Areas -->
            <div class="form-section" id="focusAreasSection" style="display: none;">
                <div class="section-header">
                    <h3><i class="fas fa-target"></i> Training Focus Areas</h3>
                </div>
                
                <div class="focus-areas-grid">
                    <div class="focus-area-column">
                        <div class="focus-area-header">
                            <i class="fas fa-bullseye"></i>
                            <span>Objectives</span>
                        </div>
                        <div class="tags-container" id="objectivesContainer">
                            <div class="empty-state">No objectives defined</div>
                        </div>
                    </div>
                    
                    <div class="focus-area-column">
                        <div class="focus-area-header">
                            <i class="fas fa-cogs"></i>
                            <span>Skills</span>
                        </div>
                        <div class="tags-container" id="skillsContainer">
                            <div class="empty-state">No skills defined</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Schedule Selection -->
            <div class="form-section" id="scheduleSection" style="display: none;">
                <div class="section-header">
                    <h3><i class="fas fa-calendar-alt"></i> Training Schedule</h3>
                    <div class="duration-info" id="durationInfo">
                        Duration: <span id="totalHours">0</span> hours
                    </div>
                </div>

                <!-- Schedule Options -->
                <div class="schedule-options">
                    <div class="schedule-option" onclick="selectScheduleType('intensive')">
                        <input type="radio" name="scheduleType" value="intensive" id="intensive">
                        <label for="intensive">
                            <div class="option-icon">
                                <i class="fas fa-bolt"></i>
                            </div>
                            <div class="option-content">
                                <h4>Intensive Schedule</h4>
                                <p>8 hours per day</p>
                                <div class="schedule-preview" id="intensivePreview">0 days</div>
                            </div>
                        </label>
                    </div>

                    <div class="schedule-option" onclick="selectScheduleType('regular')">
                        <input type="radio" name="scheduleType" value="regular" id="regular">
                        <label for="regular">
                            <div class="option-icon">
                                <i class="fas fa-calendar-day"></i>
                            </div>
                            <div class="option-content">
                                <h4>Regular Schedule</h4>
                                <p>4 hours per day</p>
                                <div class="schedule-preview" id="regularPreview">0 days</div>
                            </div>
                        </label>
                    </div>

                    <div class="schedule-option" onclick="selectScheduleType('flexible')">
                        <input type="radio" name="scheduleType" value="flexible" id="flexible">
                        <label for="flexible">
                            <div class="option-icon">
                                <i class="fas fa-clock"></i>
                            </div>
                            <div class="option-content">
                                <h4>Flexible Schedule</h4>
                                <p>2 hours per day</p>
                                <div class="schedule-preview" id="flexiblePreview">0 days</div>
                            </div>
                        </label>
                    </div>

                    <div class="schedule-option" onclick="selectScheduleType('custom')">
                        <input type="radio" name="scheduleType" value="custom" id="custom">
                        <label for="custom">
                            <div class="option-icon">
                                <i class="fas fa-cog"></i>
                            </div>
                            <div class="option-content">
                                <h4>Custom Schedule</h4>
                                <p>Set your own pace</p>
                                <div class="schedule-preview">Manual dates</div>
                            </div>
                        </label>
                    </div>
                </div>

                <!-- Date Selection -->
                <div class="date-selection">
                    <div class="date-input-group">
                        <div class="date-field">
                            <label class="form-label">Start Date</label>
                            <input type="date" class="form-input date-input" id="startDate" required>
                        </div>
                        <div class="date-arrow">
                            <i class="fas fa-arrow-right"></i>
                        </div>
                        <div class="date-field">
                            <label class="form-label">End Date</label>
                            <input type="date" class="form-input date-input" id="endDate" required readonly>
                            <div class="date-helper" id="endDateHelper">
                                End date will be calculated automatically
                            </div>
                        </div>
                    </div>

                    <!-- Custom Schedule Options -->
                    <div class="custom-schedule" id="customScheduleOptions" style="display: none;">
                        <div class="custom-input-group">
                            <label class="form-label">Hours per day</label>
                            <input type="number" class="form-input" id="customHoursPerDay" min="1" max="12" step="0.5" placeholder="2.0">
                        </div>
                        <div class="custom-note">
                            <i class="fas fa-info-circle"></i>
                            End date will be calculated based on your custom hours per day
                        </div>
                    </div>
                </div>

                <!-- Schedule Summary -->
                <div class="schedule-summary" id="scheduleSummary" style="display: none;">
                    <div class="summary-card">
                        <div class="summary-header">
                            <i class="fas fa-calendar-check"></i>
                            <span>Training Schedule Summary</span>
                        </div>
                        <div class="summary-content">
                            <div class="summary-row">
                                <span>Training Duration:</span>
                                <strong id="summaryDuration">0 hours</strong>
                            </div>
                            <div class="summary-row">
                                <span>Schedule Type:</span>
                                <strong id="summaryScheduleType">-</strong>
                            </div>
                            <div class="summary-row">
                                <span>Hours per Day:</span>
                                <strong id="summaryHoursPerDay">-</strong>
                            </div>
                            <div class="summary-row">
                                <span>Training Period:</span>
                                <strong id="summaryDateRange">-</strong>
                            </div>
                            <div class="summary-row">
                                <span>Total Days:</span>
                                <strong id="summaryTotalDays">-</strong>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Confirmation -->
            <div class="form-section">
                <div class="confirmation-note">
                    <div class="note-icon">
                        <i class="fas fa-exclamation-circle"></i>
                    </div>
                    <div class="note-content">
                        <strong>Important:</strong> Please ensure your training request aligns with your Individual Development Plan (IDP). 
                        Your line manager will review and approve this request.
                    </div>
                </div>
            </div>

            <!-- Form Actions -->
            <div class="modal-actions">
                <button type="button" class="btn-secondary" onclick="closeTrainingRequestModal()">
                    <i class="fas fa-times"></i>
                    Cancel
                </button>
                <button type="submit" class="btn-primary" id="submitButton" disabled>
                    <i class="fas fa-paper-plane"></i>
                    Submit Request
                </button>
            </div>
        </form>
    </div>
</div>

    <!-- JavaScript for tabs and interactions -->
    <script>
        // Sample course data for filtering
        const allCourses = [
            { id: 1, title: "Leadership Development Program", status: "in-progress", type: ["online"], progress: 75, lessons: "15/20 lessons" },
            { id: 2, title: "Safety and Compliance Training", status: "in-progress", type: ["onsite", "required"], progress: 60, lessons: "5/8 modules" },
            { id: 3, title: "Technical Skills Enhancement", status: "completed", type: ["online", "required"], progress: 100, lessons: "12/12 lessons" },
            { id: 4, title: "Project Management Fundamentals", status: "overdue", type: ["online", "required"], progress: 25, lessons: "4/16 lessons" },
            { id: 5, title: "Advanced Data Analytics", status: "available", type: ["online"], progress: 0, lessons: "Not started" },
            { id: 6, title: "Communication Excellence Workshop", status: "available", type: ["onsite"], progress: 0, lessons: "Not started" },
            { id: 7, title: "Cybersecurity Awareness", status: "available", type: ["online", "required"], progress: 0, lessons: "Not started" },
            { id: 8, title: "Team Building & Collaboration", status: "available", type: ["onsite"], progress: 0, lessons: "Not started" }
        ];

        let selectedTraining = null;
        let filteredTrainings = [];
        let selectedScheduleType = null;


        document.addEventListener('DOMContentLoaded', () => {
            // Tab functionality
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabContents = document.querySelectorAll('.tab-content');

            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    // Remove active class from all buttons and contents
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    tabContents.forEach(content => content.classList.remove('active'));

                    // Add active class to clicked button
                    button.classList.add('active');

                    // Show corresponding content
                    const tabId = button.getAttribute('data-tab');
                    document.getElementById(tabId).classList.add('active');
                });
            });

            // View toggle functionality
            document.querySelectorAll('.view-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelectorAll('.view-btn').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                });
            });

            // Progress category click to scroll to section
            document.querySelectorAll('.progress-category').forEach(category => {
                category.addEventListener('click', function() {
                    const filterType = this.getAttribute('data-filter');
                    const sectionId = filterType + '-section';
                    scrollToSection(sectionId);
                });
            });

            // Upload certificate functionality
            const uploadBtn = document.querySelector('.upload-certificate-btn');
            if (uploadBtn) {
                uploadBtn.addEventListener('click', function() {
                    // Create file input
                    const fileInput = document.createElement('input');
                    fileInput.type = 'file';
                    fileInput.accept = '.pdf,.jpg,.jpeg,.png';
                    fileInput.style.display = 'none';
                    
                    fileInput.addEventListener('change', function() {
                        if (this.files.length > 0) {
                            alert(`Certificate "${this.files[0].name}" selected for upload.`);
                            // Here you would typically handle the file upload
                        }
                    });
                    
                    document.body.appendChild(fileInput);
                    fileInput.click();
                    document.body.removeChild(fileInput);
                });
            }
        });

        

        // Filter dropdown functionality
        function toggleFilterDropdown() {
            const dropdown = document.getElementById('filter-dropdown');
            dropdown.classList.toggle('open');
        }

        // Close dropdown when clicking outside
        document.addEventListener('click', function(event) {
            const dropdown = document.getElementById('filter-dropdown');
            if (!dropdown.contains(event.target)) {
                dropdown.classList.remove('open');
            }
        });

        // Update filters based on checkboxes
        function updateFilters() {
            const activeFilters = [];
            const checkboxes = document.querySelectorAll('#filter-dropdown input[type="checkbox"]:checked');
            
            checkboxes.forEach(checkbox => {
                activeFilters.push(checkbox.value);
            });
            
            updateActiveFiltersDisplay(activeFilters);
            filterCourses(activeFilters);
        }

        // Display active filters
        function updateActiveFiltersDisplay(filters) {
            const activeFiltersContainer = document.getElementById('active-filters');
            activeFiltersContainer.innerHTML = '';
            
            filters.forEach(filter => {
                const filterTag = document.createElement('div');
                filterTag.className = 'filter-tag';
                filterTag.innerHTML = `
                    ${filter.charAt(0).toUpperCase() + filter.slice(1)}
                    <span class="remove-filter" onclick="removeFilter('${filter}')">×</span>
                `;
                activeFiltersContainer.appendChild(filterTag);
            });
        }

        // Remove individual filter
        function removeFilter(filterToRemove) {
            const checkbox = document.getElementById(`filter-${filterToRemove}`);
            if (checkbox) {
                checkbox.checked = false;
                updateFilters();
            }
        }

        // Filter courses based on selected filters
        function filterCourses(activeFilters) {
            const courseCards = document.querySelectorAll('.course-card');
            
            courseCards.forEach(card => {
                if (activeFilters.length === 0) {
                    card.style.display = 'block';
                } else {
                    const cardTypes = card.getAttribute('data-type') || '';
                    const hasMatchingFilter = activeFilters.some(filter => 
                        cardTypes.includes(filter)
                    );
                    
                    card.style.display = hasMatchingFilter ? 'block' : 'none';
                }
            });
        }

        // Scroll to section functionality
        function scrollToSection(sectionId) {
            const section = document.getElementById(sectionId);
            if (section) {
                section.scrollIntoView({ 
                    behavior: 'smooth',
                    block: 'start'
                });
                
                // Add a subtle highlight effect
                section.style.backgroundColor = '#f0fdff';
                setTimeout(() => {
                    section.style.backgroundColor = '';
                }, 2000);
            }
        }


// Initialize modal when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    initializeTrainingModal();


    
});

document.addEventListener('DOMContentLoaded', async () => {
            // Initialize tabs
            initializeTabs();
            
            // Load initial data
            await Promise.all([
                loadTrainingProgress(),
                loadAllCourses(),
                loadCertificates()
            ]);
        });


function initializeTrainingModal() {
    setupTrainingDropdown();
    setupScheduleHandlers();
    setupDateHandlers();
    setupFormValidation();
}

// Training dropdown functionality
function setupTrainingDropdown() {
    const dropdown = document.getElementById('trainingDropdown');
    const input = document.getElementById('trainingCourseInput');
    const dropdownList = document.getElementById('trainingDropdownList');

    input.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        filterTrainings(searchTerm);
        dropdown.classList.add('open');
    });

    input.addEventListener('focus', function() {
        dropdown.classList.add('open');
        if (filteredTrainings.length === 0) {
            loadTrainings();
        }
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', function(event) {
        if (!dropdown.contains(event.target)) {
            dropdown.classList.remove('open');
        }
    });
}

// Schedule type handlers
function setupScheduleHandlers() {
    // Start date change handler
    document.getElementById('startDate').addEventListener('change', function() {
        if (selectedScheduleType && selectedTraining) {
            calculateEndDate();
        }
        validateForm();
    });

    // Custom hours per day handler
    document.getElementById('customHoursPerDay').addEventListener('input', function() {
        if (selectedScheduleType === 'custom' && selectedTraining) {
            calculateEndDate();
        }
        validateForm();
    });
}

function setupDateHandlers() {
    // Set minimum date to today
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('startDate').min = today;
}

function selectScheduleType(type) {
    selectedScheduleType = type;
    
    // Update radio button
    document.querySelectorAll('input[name="scheduleType"]').forEach(radio => {
        radio.checked = radio.value === type;
    });
    
    // Show/hide custom schedule options
    const customOptions = document.getElementById('customScheduleOptions');
    const endDateInput = document.getElementById('endDate');
    
    if (type === 'custom') {
        customOptions.style.display = 'block';
        endDateInput.readOnly = false;
        document.getElementById('endDateHelper').textContent = 'You can manually set the end date or specify hours per day';
    } else {
        customOptions.style.display = 'none';
        endDateInput.readOnly = true;
        document.getElementById('endDateHelper').textContent = 'End date will be calculated automatically';
        
        if (selectedTraining) {
            calculateEndDate();
        }
    }
    
    updateScheduleSummary();
    validateForm();
}

function calculateEndDate() {
    if (!selectedTraining || !selectedScheduleType) return;
    
    const startDateValue = document.getElementById('startDate').value;
    if (!startDateValue) return;
    
    const startDate = new Date(startDateValue);
    const totalHours = selectedTraining.totalDuration;
    let hoursPerDay;
    
    // Determine hours per day based on schedule type
    switch (selectedScheduleType) {
        case 'intensive':
            hoursPerDay = 8;
            break;
        case 'regular':
            hoursPerDay = 4;
            break;
        case 'flexible':
            hoursPerDay = 2;
            break;
        case 'custom':
            hoursPerDay = parseFloat(document.getElementById('customHoursPerDay').value) || 2;
            break;
        default:
            return;
    }
    
    // Calculate working days needed (excluding weekends)
    const totalDays = Math.ceil(totalHours / hoursPerDay);
    let currentDate = new Date(startDate);
    let workingDaysAdded = 0;
    
    // Add working days (skip weekends)
    while (workingDaysAdded < totalDays - 1) {
        currentDate.setDate(currentDate.getDate() + 1);
        // Skip weekends (0 = Sunday, 6 = Saturday)
        if (currentDate.getDay() !== 0 && currentDate.getDay() !== 6) {
            workingDaysAdded++;
        }
    }
    
    // Set the calculated end date
    const endDateFormatted = currentDate.toISOString().split('T')[0];
    document.getElementById('endDate').value = endDateFormatted;
    
    updateScheduleSummary();
}

function updateScheduleSummary() {
    if (!selectedTraining || !selectedScheduleType) {
        document.getElementById('scheduleSummary').style.display = 'none';
        return;
    }
    
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;
    
    if (!startDate) {
        document.getElementById('scheduleSummary').style.display = 'none';
        return;
    }
    
    let hoursPerDay;
    let scheduleTypeName;
    
    switch (selectedScheduleType) {
        case 'intensive':
            hoursPerDay = 8;
            scheduleTypeName = 'Intensive (8 hours/day)';
            break;
        case 'regular':
            hoursPerDay = 4;
            scheduleTypeName = 'Regular (4 hours/day)';
            break;
        case 'flexible':
            hoursPerDay = 2;
            scheduleTypeName = 'Flexible (2 hours/day)';
            break;
        case 'custom':
            hoursPerDay = parseFloat(document.getElementById('customHoursPerDay').value) || 2;
            scheduleTypeName = `Custom (${hoursPerDay} hours/day)`;
            break;
        default:
            return;
    }
    
    // Calculate total days
    let totalDays = 0;
    if (startDate && endDate) {
        const start = new Date(startDate);
        const end = new Date(endDate);
        let current = new Date(start);
        
        while (current <= end) {
            // Count only working days
            if (current.getDay() !== 0 && current.getDay() !== 6) {
                totalDays++;
            }
            current.setDate(current.getDate() + 1);
        }
    }
    
    // Update summary content
    document.getElementById('summaryDuration').textContent = `${selectedTraining.totalDuration} hours`;
    document.getElementById('summaryScheduleType').textContent = scheduleTypeName;
    document.getElementById('summaryHoursPerDay').textContent = `${hoursPerDay} hours`;
    document.getElementById('summaryDateRange').textContent = endDate ? 
        `${formatDate(startDate)} - ${formatDate(endDate)}` : 
        formatDate(startDate);
    document.getElementById('summaryTotalDays').textContent = `${totalDays} working days`;
    
    document.getElementById('scheduleSummary').style.display = 'block';
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'short', 
        day: 'numeric' 
    });
}

// Training selection and display
function loadTrainings() {
    const dropdownList = document.getElementById('trainingDropdownList');
    dropdownList.innerHTML = '<div class="loading"><i class="fas fa-spinner fa-spin"></i> Loading available trainings...</div>';

    // Fetch trainings from your API
    fetch('/employee/trainings/dropdown', {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        },
        credentials: 'include'
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    })
    .then(result => {
        if (result.success) {
            filteredTrainings = result.data || [];
            if (filteredTrainings.length === 0) {
                renderNoTrainings('No trainings available for your job position.');
            } else {
                renderTrainingOptions();
            }
        } else {
            throw new Error(result.message || 'Failed to fetch trainings');
        }
    })
    .catch(error => {
        console.error('Failed to load trainings:', error);
        renderNoTrainings('Failed to load trainings. Please try again.');
    });
}

function renderNoTrainings(message) {
    const dropdownList = document.getElementById('trainingDropdownList');
    dropdownList.innerHTML = `<div class="no-results"><i class="fas fa-info-circle"></i> ${message}</div>`;
}

function filterTrainings(searchTerm) {
    if (!searchTerm) {
        renderTrainingOptions();
    } else {
        const filtered = filteredTrainings.filter(training => 
            training.trainingName.toLowerCase().includes(searchTerm) ||
            training.trainingDesc.toLowerCase().includes(searchTerm)
        );
        
        const originalList = filteredTrainings;
        filteredTrainings = filtered;
        renderTrainingOptions();
        filteredTrainings = originalList;
    }
}

function renderTrainingOptions() {
    const dropdownList = document.getElementById('trainingDropdownList');
    
    if (filteredTrainings.length === 0) {
        dropdownList.innerHTML = '<div class="no-results"><i class="fas fa-search"></i> No trainings found</div>';
        return;
    }

    const optionsHTML = filteredTrainings.map(training => `
        <div class="dropdown-item" onclick="selectTraining(${training.trainingId})">
            <div class="dropdown-item-title">${training.trainingName}</div>
            <div class="dropdown-item-meta">
                <span><i class="fas fa-${training.isOnlineArrangement ? 'laptop' : 'map-marker-alt'}"></i> ${training.isOnlineArrangement ? 'Online' : 'Onsite'}</span>
                <span><i class="fas fa-clock"></i> ${training.totalDuration}h</span>
                <span><i class="peso-symbol"></i> ${training.cost ? training.cost.toFixed(2) : '0.00'}</span>
            </div>
        </div>
    `).join('');

    dropdownList.innerHTML = optionsHTML;
}

async function selectTraining(trainingId) {
    selectedTraining = filteredTrainings.find(t => t.trainingId === trainingId);
    
    if (!selectedTraining) return;

    // Update input field
    document.getElementById('trainingCourseInput').value = selectedTraining.trainingName;
    document.getElementById('selectedTrainingId').value = selectedTraining.trainingId;
    
    // Close dropdown
    document.getElementById('trainingDropdown').classList.remove('open');
    
    // Show training details
    displayTrainingDetails(selectedTraining);
    
    // Load skills and objectives from API
    await loadTrainingSkillsAndObjectives(selectedTraining.trainingId);
    
    // Show schedule section
    document.getElementById('scheduleSection').style.display = 'block';
    
    // Update schedule previews
    updateSchedulePreviews();
    
    // Recalculate end date if schedule is already selected
    if (selectedScheduleType) {
        calculateEndDate();
    }
    
    validateForm();
}

async function loadTrainingSkillsAndObjectives(trainingId) {
    const objectivesContainer = document.getElementById('objectivesContainer');
    const skillsContainer = document.getElementById('skillsContainer');
    
    // Show loading state
    objectivesContainer.innerHTML = '<div style="color: #64748b; font-style: italic; display: flex; align-items: center; gap: 8px;"><i class="fas fa-spinner fa-spin"></i>Loading objectives...</div>';
    skillsContainer.innerHTML = '<div style="color: #64748b; font-style: italic; display: flex; align-items: center; gap: 8px;"><i class="fas fa-spinner fa-spin"></i>Loading skills...</div>';
    
    document.getElementById('focusAreasSection').style.display = 'block';

    try {
        const response = await fetch(`/employee/trainings/${trainingId}/details`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'include'
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        
        if (result.success) {
            // Update selectedTraining with fetched data
            selectedTraining.objectives = result.data.objectives || [];
            selectedTraining.skills = result.data.skills || [];
            
            // Display the data
            displayFocusAreas(selectedTraining);
        } else {
            throw new Error(result.message || 'Failed to fetch training details');
        }
        
    } catch (error) {
        console.error('Failed to load training details:', error);
        objectivesContainer.innerHTML = '<div style="color: #ef4444; font-style: italic; display: flex; align-items: center; gap: 8px;"><i class="fas fa-exclamation-triangle"></i>Failed to load objectives</div>';
        skillsContainer.innerHTML = '<div style="color: #ef4444; font-style: italic; display: flex; align-items: center; gap: 8px;"><i class="fas fa-exclamation-triangle"></i>Failed to load skills</div>';
        
        // Still show the section with empty data
        selectedTraining.objectives = [];
        selectedTraining.skills = [];
    }
}

function displayTrainingDetails(training) {
    document.getElementById('selectedTrainingName').textContent = training.trainingName;
    document.getElementById('trainingDuration').innerHTML = `<i class="fas fa-clock"></i> ${training.totalDuration} hours`;
    document.getElementById('trainingType').innerHTML = `<i class="fas fa-${training.isOnlineArrangement ? 'laptop' : 'map-marker-alt'}"></i> ${training.isOnlineArrangement ? 'Online' : 'Onsite'}`;
    document.getElementById('trainingCost').innerHTML = `<i class="peso-symbol"></i> ${training.cost ? training.cost.toFixed(2) : 'Free'}`;
    document.getElementById('totalHours').textContent = training.totalDuration;
    
    document.getElementById('trainingDetailsCard').style.display = 'block';
}

function displayFocusAreas(training) {
    const objectivesContainer = document.getElementById('objectivesContainer');
    const skillsContainer = document.getElementById('skillsContainer');
    
    // Clear existing content
    objectivesContainer.innerHTML = '';
    skillsContainer.innerHTML = '';
    
    // Add objectives
    if (training.objectives && training.objectives.length > 0) {
        training.objectives.forEach(objective => {
            const tag = document.createElement('div');
            tag.className = 'tag objective';
            tag.innerHTML = `<i class="fas fa-bullseye"></i>${objective.objectiveDescrpt}`;
            tag.title = objective.objectiveKPI ? `KPI: ${objective.objectiveKPI}` : '';
            objectivesContainer.appendChild(tag);
        });
    } else {
        objectivesContainer.innerHTML = '<div class="empty-state">No objectives defined</div>';
    }
    
    // Add skills
    if (training.skills && training.skills.length > 0) {
        training.skills.forEach(skill => {
            const tag = document.createElement('div');
            tag.className = 'tag skill';
            tag.innerHTML = `<i class="fas fa-cogs"></i>${skill.jobReqSkillName}`;
            tag.title = `Type: ${skill.jobReqSkillType}`;
            skillsContainer.appendChild(tag);
        });
    } else {
        skillsContainer.innerHTML = '<div class="empty-state">No skills defined</div>';
    }
    
    document.getElementById('focusAreasSection').style.display = 'block';
}

function updateSchedulePreviews() {
    if (!selectedTraining) return;
    
    const totalHours = selectedTraining.totalDuration;
    
    // Calculate days for each schedule type
    const intensiveDays = Math.ceil(totalHours / 8);
    const regularDays = Math.ceil(totalHours / 4);
    const flexibleDays = Math.ceil(totalHours / 2);
    
    document.getElementById('intensivePreview').textContent = `${intensiveDays} working days`;
    document.getElementById('regularPreview').textContent = `${regularDays} working days`;
    document.getElementById('flexiblePreview').textContent = `${flexibleDays} working days`;
}

function setupFormValidation() {
    const form = document.getElementById('trainingRequestForm');
    form.addEventListener('submit', handleFormSubmit);
}

function validateForm() {
    const trainingSelected = document.getElementById('selectedTrainingId').value;
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;
    const scheduleSelected = selectedScheduleType;
    
    let isValid = trainingSelected && startDate && scheduleSelected;
    
    // Additional validation for custom schedule
    if (scheduleSelected === 'custom') {
        const customHours = document.getElementById('customHoursPerDay').value;
        isValid = isValid && customHours && parseFloat(customHours) > 0;
    }
    
    // Date validation
    if (startDate && endDate) {
        isValid = isValid && new Date(endDate) >= new Date(startDate);
    }
    
    document.getElementById('submitButton').disabled = !isValid;
    return isValid;
}

function handleFormSubmit(e) {
    e.preventDefault();
    
    if (!validateForm()) {
        alert('Please fill in all required fields correctly.');
        return;
    }
    
    const formData = {
        trainingId: selectedTraining.trainingId,
        trainingName: selectedTraining.trainingName,
        startDate: document.getElementById('startDate').value,
        endDate: document.getElementById('endDate').value,
        scheduleType: selectedScheduleType,
        hoursPerDay: getHoursPerDay(),
        totalDuration: selectedTraining.totalDuration
    };
    
    submitTrainingRequest(formData);
}

function getHoursPerDay() {
    switch (selectedScheduleType) {
        case 'intensive': return 8;
        case 'regular': return 4;
        case 'flexible': return 2;
        case 'custom': return parseFloat(document.getElementById('customHoursPerDay').value) || 2;
        default: return 4;
    }
}
async function submitTrainingRequest(formData) {
    const submitButton = document.getElementById('submitButton');
    const originalText = submitButton.innerHTML;
    
    submitButton.disabled = true;
    submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Submitting...';

    try {
        const response = await fetch('/employee/training-requests', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'include',
            body: JSON.stringify({
                trainingId: formData.trainingId,
                startDate: formData.startDate,
                endDate: formData.endDate
            })
        });

        const result = await response.json();
        
        if (response.ok && result.success) {
            alert(`✅ Training request submitted successfully!\n\nTraining: ${formData.trainingName}\nSchedule: ${formData.scheduleType} (${formData.hoursPerDay} hours/day)\nPeriod: ${formatDate(formData.startDate)} - ${formatDate(formData.endDate)}\nTotal Duration: ${formData.totalDuration} hours\n\nYour line manager will be notified for approval.`);
            
            closeTrainingRequestModal();
        } else {
            // Handle server rejection (e.g., duplicate request) gracefully
            if (result.message && result.message.includes('already have an active')) {
                alert('⚠️ You already have an active training request for this course. If you wish to request again, please contact your administrator.');
                closeTrainingRequestModal();
            } else {
                throw new Error(result.message || 'Failed to submit training request');
            }
        }
        
    } catch (error) {
        console.error('Error submitting training request:', error);

        let errorMessage = 'Failed to submit training request. ';
        if (error.message.includes('not authenticated')) {
            errorMessage += 'Please log in again and try again.';
        } else if (error.message.includes('not found')) {
            errorMessage += 'The selected training is no longer available.';
        } else if (error.message.includes('End date must be after start date')) {
            errorMessage += 'Please check your selected dates.';
        } else {
            errorMessage += error.message || 'Please try again later.';
        }
        alert('❌ ' + errorMessage);
    } finally {
        submitButton.disabled = false;
        submitButton.innerHTML = originalText;
    }
}


// Modal control functions
function openTrainingRequestModal() {
    document.getElementById('trainingRequestModal').classList.add('show');
    
    // Set minimum date to today
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('startDate').min = today;
    
    // Load trainings if not already loaded
    if (filteredTrainings.length === 0) {
        loadTrainings();
    }
}

function closeTrainingRequestModal() {
    document.getElementById('trainingRequestModal').classList.remove('show');
    resetModal();
}

function resetModal() {
    // Reset form
    document.getElementById('trainingRequestForm').reset();
    document.getElementById('selectedTrainingId').value = '';
    
    // Reset global variables
    selectedTraining = null;
    selectedScheduleType = null;
    
    // Hide sections
    document.getElementById('trainingDetailsCard').style.display = 'none';
    document.getElementById('focusAreasSection').style.display = 'none';
    document.getElementById('scheduleSection').style.display = 'none';
    document.getElementById('scheduleSummary').style.display = 'none';
    document.getElementById('customScheduleOptions').style.display = 'none';
    
    // Close dropdown
    document.getElementById('trainingDropdown').classList.remove('open');
    
    // Reset schedule options
    document.querySelectorAll('input[name="scheduleType"]').forEach(radio => {
        radio.checked = false;
    });
    
    // Reset end date to readonly
    document.getElementById('endDate').readOnly = true;
    
    // Disable submit button
    document.getElementById('submitButton').disabled = true;
}

function resetModal() {
    // Reset form
    document.getElementById('trainingRequestForm').reset();
    document.getElementById('selectedTrainingId').value = '';
    
    // Reset global variables
    selectedTraining = null;
    selectedScheduleType = null;
    
    // Hide sections
    document.getElementById('trainingDetailsCard').style.display = 'none';
    document.getElementById('focusAreasSection').style.display = 'none';
    document.getElementById('scheduleSection').style.display = 'none';
    document.getElementById('scheduleSummary').style.display = 'none';
    document.getElementById('customScheduleOptions').style.display = 'none';
    
    // Close dropdown
    document.getElementById('trainingDropdown').classList.remove('open');
    
    // Reset schedule options
    document.querySelectorAll('input[name="scheduleType"]').forEach(radio => {
        radio.checked = false;
    });
    
    // Reset end date to readonly
    document.getElementById('endDate').readOnly = true;
    
    // Disable submit button
    document.getElementById('submitButton').disabled = true;
}



 function initializeTabs() {
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabContents = document.querySelectorAll('.tab-content');

            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    tabContents.forEach(content => content.classList.remove('active'));

                    button.classList.add('active');
                    const tabId = button.getAttribute('data-tab');
                    document.getElementById(tabId).classList.add('active');
                });
            });
        }

        async function loadTrainingProgress() {
            try {
                const response = await fetch('/employee/training-progress', {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' },
                    credentials: 'include'
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                
                if (result.success) {
                    trainingProgressData = result.data;
                    renderProgressCategories();
                    renderTrainingSections();
                } else {
                    throw new Error(result.message || 'Failed to fetch training progress');
                }
            } catch (error) {
                console.error('Error loading training progress:', error);
                document.getElementById('progressCategories').innerHTML = 
                    `<div class="loading-state">
                        <i class="fas fa-exclamation-triangle"></i>
                        Failed to load training progress. Please refresh the page.
                    </div>`;
            }
        }

        function renderProgressCategories() {
            const container = document.getElementById('progressCategories');
            const counts = trainingProgressData.counts;
            
            container.innerHTML = `
                <div class="progress-category not-started" data-filter="not-started">
                    <div class="count">${counts.notStarted}</div>
                    <h3>Not Started</h3>
                    <p>Training courses not yet begun</p>
                </div>
                <div class="progress-category in-progress" data-filter="in-progress">
                    <div class="count">${counts.inProgress}</div>
                    <h3>In Progress</h3>
                    <p>Currently ongoing training sessions</p>
                </div>
                <div class="progress-category completed" data-filter="completed">
                    <div class="count">${counts.completed}</div>
                    <h3>Completed</h3>
                    <p>Successfully finished trainings</p>
                </div>
                <div class="progress-category overdue" data-filter="overdue">
                    <div class="count">${counts.overdue}</div>
                    <h3>Overdue</h3>
                    <p>Training sessions past due date</p>
                </div>
            `;

            // Add click handlers for filtering
            container.querySelectorAll('.progress-category').forEach(category => {
                category.addEventListener('click', function() {
                    const filterType = this.getAttribute('data-filter');
                    scrollToSection(filterType + '-section');
                });
            });
        }

        function renderTrainingSections() {
            const container = document.getElementById('trainingSections');
            const trainings = trainingProgressData.trainings;
            
            const groupedTrainings = {
                'not-started': trainings.filter(t => t.status === 'Not Started'),
                'in-progress': trainings.filter(t => t.status === 'In Progress'),
                'completed': trainings.filter(t => t.status === 'Completed'),
                'overdue': trainings.filter(t => t.status === 'Overdue')
            };

            let sectionsHTML = '';

            // Render each section
            Object.entries(groupedTrainings).forEach(([status, statusTrainings]) => {
                if (statusTrainings.length > 0) {
                    const statusLabels = {
                        'not-started': { title: 'Not Started Courses', icon: 'fas fa-circle', color: '#6b7280' },
                        'in-progress': { title: 'In Progress Courses', icon: 'fas fa-play-circle', color: '#3b82f6' },
                        'completed': { title: 'Completed Courses', icon: 'fas fa-check-circle', color: '#10b981' },
                        'overdue': { title: 'Overdue Courses', icon: 'fas fa-exclamation-circle', color: '#ef4444' }
                    };

                    const statusInfo = statusLabels[status];
                    
                    sectionsHTML += `
                        <div class="progress-section" id="${status}-section">
                            <h4 class="section-title">
                                <i class="${statusInfo.icon}" style="color: ${statusInfo.color}; margin-right: 8px;"></i>
                                ${statusInfo.title} (${statusTrainings.length})
                            </h4>
                            <div class="courses-list">
                                ${statusTrainings.map(training => renderTrainingListItem(training, status)).join('')}
                            </div>
                        </div>
                    `;
                }
            });

            container.innerHTML = sectionsHTML || '<p style="text-align: center; color: #64748b; padding: 40px;">No training records found.</p>';
        }

        function renderTrainingListItem(training, status) {
            const progressPercentage = training.progress || 0;
            const totalActivities = training.totalActivities || 0;
            const completedActivities = training.completedActivities || 0;
            
            return `
                <div class="course-list-item ${status}">
                    <div class="course-list-info">
                        <h5 class="course-list-title">${training.trainingName}</h5>
                        <div class="course-list-details">
                            Duration: ${training.totalDuration || 0} hours • 
                            ${formatDateRange(training.setStartDate, training.setEndDate)} • 
                            Activities: ${completedActivities}/${totalActivities}
                        </div>
                    </div>
                    <div class="course-list-meta">
                        <div class="course-list-badges">
                            <span class="course-list-badge ${training.isOnlineArrangement ? 'online' : 'onsite'}">
                                ${training.isOnlineArrangement ? 'Online' : 'Onsite'}
                            </span>
                            <span class="course-list-badge status">${training.status}</span>
                        </div>
                        <div class="course-list-progress">
                            <div class="course-list-progress-bar">
                                <div class="course-list-progress-fill" style="width: ${progressPercentage}%;"></div>
                            </div>
                            <div class="course-list-progress-text">${Math.round(progressPercentage)}%</div>
                        </div>
                    </div>
                </div>
            `;
        }

        async function loadAllCourses() {
            try {
                const response = await fetch('/employee/all-courses', {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' },
                    credentials: 'include'
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                
                if (result.success) {
                    allCoursesData = result.data;
                    renderAllCourses();
                } else {
                    throw new Error(result.message || 'Failed to fetch courses');
                }
            } catch (error) {
                console.error('Error loading all courses:', error);
                document.getElementById('allCoursesGrid').innerHTML = 
                    `<div class="loading-state">
                        <i class="fas fa-exclamation-triangle"></i>
                        Failed to load courses. Please refresh the page.
                    </div>`;
            }
        }

        function renderAllCourses() {
            const container = document.getElementById('allCoursesGrid');
            
            if (allCoursesData.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #64748b; padding: 40px;">No courses available.</p>';
                return;
            }

            const coursesHTML = allCoursesData.map(course => `
                <div class="course-card">
                    <div class="course-header">
                        <h3 class="course-title">${course.trainingName}</h3>
                        <div class="course-badges">
                            <span class="course-status ${course.isActive ? 'active' : 'inactive'}">
                                ${course.isActive ? 'Active' : 'Inactive'}
                            </span>
                            <span class="course-type ${course.isOnlineArrangement ? 'online' : 'onsite'}">
                                ${course.isOnlineArrangement ? 'Online' : 'Onsite'}
                            </span>
                        </div>
                    </div>
                    <div class="course-description">
                        ${course.trainingDesc || 'No description available'}<br>
                        Duration: ${course.totalDuration || 0} hours<br>
                        Cost: ₱${course.cost ? course.cost.toFixed(2) : '0.00'}
                        ${course.address ? `<br>Location: ${course.address}` : ''}
                    </div>
                    ${course.isActive ? 
                        `<button class="action-btn update-progress-btn" onclick="updateProgress(${course.trainingId})">Update Progress</button>` :
                        `<button class="action-btn completed-btn" disabled>Completed</button>`
                    }
                </div>
            `).join('');

            container.innerHTML = coursesHTML;
        }

       async function loadCertificates() {
            try {
                const response = await fetch('/employee/certificates', {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' },
                    credentials: 'include'
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                
                if (result.success) {
                    renderCertificates(result.data);
                } else {
                    throw new Error(result.message || 'Failed to fetch certificates');
                }
                
            } catch (error) {
                console.error('Error loading certificates:', error);
                document.getElementById('certificatesList').innerHTML = 
                    `<div class="loading-state">
                        <i class="fas fa-exclamation-triangle"></i>
                        Failed to load certificates. Please refresh the page.
                    </div>`;
            }
        }

        function renderCertificates(certificates) {
            const container = document.getElementById('certificatesList');
            
            if (certificates.length === 0) {
                container.innerHTML = `
                    <div style="text-align: center; color: #64748b; padding: 40px;">
                        <i class="fas fa-certificate" style="font-size: 2rem; margin-bottom: 10px;"></i>
                        <p>No certificates available yet.</p>
                        <p>Complete your training courses to earn certificates.</p>
                    </div>
                `;
                return;
            }

            const certificatesHTML = certificates.map(cert => `
                <div class="certificate-list-item uploaded">
                    <div class="certificate-list-info">
                        <div class="certificate-list-icon">
                            <i class="fas fa-certificate"></i>
                        </div>
                        <div class="certificate-list-details">
                            <h4 class="certificate-list-title">${cert.trainingCertTitle}</h4>
                            <div class="certificate-list-meta">
                                <strong>Description:</strong> ${cert.trainingCertDesc || 'No description'}<br>
                                <strong>Training:</strong> ${cert.trainingName || 'Unknown Training'}
                            </div>
                        </div>
                    </div>
                    <div class="certificate-list-actions">
                        <div class="certificate-list-id">CERT-${cert.trainingCertId}</div>
                        <i class="fas fa-download certificate-download" onclick="downloadCertificate(${cert.trainingCertId})" title="Download Certificate"></i>
                    </div>
                </div>
            `).join('');

            container.innerHTML = certificatesHTML;
        }

        // Utility functions
        function formatDateRange(startDate, endDate) {
            if (!startDate) return 'No dates set';
            
            const start = new Date(startDate).toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'short', 
                day: 'numeric' 
            });
            
            if (!endDate) return start;
            
            const end = new Date(endDate).toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'short', 
                day: 'numeric' 
            });
            
            return `${start} - ${end}`;
        }

        function scrollToSection(sectionId) {
            const section = document.getElementById(sectionId);
            if (section) {
                section.scrollIntoView({ 
                    behavior: 'smooth',
                    block: 'start'
                });
                
                // Add a subtle highlight effect
                section.style.backgroundColor = '#f0fdff';
                setTimeout(() => {
                    section.style.backgroundColor = '';
                }, 2000);
            }
        }

        // Action handlers
        function updateProgress(trainingId) {
            // Redirect to training progress update page or open modal
            window.location.href = `/employee/training/${trainingId}/progress`;
        }

        function downloadCertificate(certId) {
            // Handle certificate download
            window.open(`/employee/certificates/${certId}/download`, '_blank');
        }

        function openTrainingRequestModal() {
            // This function would open the training request modal
            // Implementation depends on your existing modal system
            alert('Training request modal would open here. Please implement the modal functionality.');
        }

        // Upload certificate functionality
        document.addEventListener('DOMContentLoaded', function() {
            const uploadBtn = document.querySelector('.upload-certificate-btn');
            if (uploadBtn) {
                uploadBtn.addEventListener('click', function() {
                    const fileInput = document.createElement('input');
                    fileInput.type = 'file';
                    fileInput.accept = '.pdf,.jpg,.jpeg,.png';
                    fileInput.style.display = 'none';
                    
                    fileInput.addEventListener('change', function() {
                        if (this.files.length > 0) {
                            uploadCertificateFile(this.files[0]);
                        }
                    });
                    
                    document.body.appendChild(fileInput);
                    fileInput.click();
                    document.body.removeChild(fileInput);
                });
            }
        });

        async function uploadCertificateFile(file) {
            const formData = new FormData();
            formData.append('certificate', file);
            
            try {
                const response = await fetch('/employee/certificates/upload', {
                    method: 'POST',
                    body: formData,
                    credentials: 'include'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert('Certificate uploaded successfully!');
                    loadCertificates(); // Reload certificates
                } else {
                    throw new Error(result.message || 'Upload failed');
                }
            } catch (error) {
                console.error('Error uploading certificate:', error);
                alert('Failed to upload certificate. Please try again.');
            }
        }

        // View toggle functionality
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('.view-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelectorAll('.view-btn').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    
                    // You can implement different view logic here
                    // For example, switching between list and calendar view
                    const isCalendarView = this.textContent.includes('Calendar');
                    if (isCalendarView) {
                        // Switch to calendar view logic
                        console.log('Switching to calendar view');
                    } else {
                        // Switch to list view logic
                        console.log('Switching to list view');
                    }
                });
            });
        });

        // Progress category click handlers
        document.addEventListener('DOMContentLoaded', function() {
            // This will be set up when progress categories are rendered
            // The actual event listeners are added in renderProgressCategories()
        });

        // Error handling for fetch requests
        function handleFetchError(error, context) {
            console.error(`Error in ${context}:`, error);
            
            if (error.name === 'TypeError' && error.message.includes('fetch')) {
                return 'Network error. Please check your connection and try again.';
            } else if (error.message.includes('401') || error.message.includes('unauthorized')) {
                return 'Session expired. Please log in again.';
            } else if (error.message.includes('403') || error.message.includes('forbidden')) {
                return 'Access denied. You do not have permission to perform this action.';
            } else if (error.message.includes('404') || error.message.includes('not found')) {
                return 'The requested resource was not found.';
            } else if (error.message.includes('500') || error.message.includes('internal server')) {
                return 'Server error. Please try again later.';
            } else {
                return error.message || 'An unexpected error occurred.';
            }
        }

        // Refresh data functionality
        function refreshAllData() {
            Promise.all([
                loadTrainingProgress(),
                loadAllCourses(),
                loadCertificates()
            ]).then(() => {
                console.log('All data refreshed successfully');
            }).catch(error => {
                console.error('Error refreshing data:', error);
                alert('Failed to refresh some data. Please check your connection and try again.');
            });
        }

        // Add refresh button functionality if you want to include one
        function addRefreshButton() {
            const refreshBtn = document.createElement('button');
            refreshBtn.innerHTML = '<i class="fas fa-sync-alt"></i> Refresh';
            refreshBtn.className = 'btn btn-outline-secondary btn-sm';
            refreshBtn.style.cssText = 'position: fixed; bottom: 20px; right: 20px; z-index: 1000;';
            refreshBtn.addEventListener('click', refreshAllData);
            document.body.appendChild(refreshBtn);
        }

        // Initialize refresh button (optional)
        // addRefreshButton();




        function toggleCheckbox(checkboxId) {
            const checkbox = document.getElementById(checkboxId);
            const checkboxItem = checkbox.closest('.checkbox-item');
            
            checkbox.checked = !checkbox.checked;
            checkboxItem.classList.toggle('selected', checkbox.checked);
        }

        // Handle form submission
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('trainingRequestForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                const formData = {
                    trainingCourse: document.getElementById('trainingCourse').value,
                    objectives: Array.from(document.querySelectorAll('#objectiveAreas input:checked')).map(cb => cb.value),
                    skills: Array.from(document.querySelectorAll('#skillAreas input:checked')).map(cb => cb.value),
                    startDate: document.getElementById('startDate').value,
                    endDate: document.getElementById('endDate').value
                };
                
                console.log('Training Request Submitted:', formData);
                alert('Training request submitted successfully! Your line manager will be notified for approval.');
                closeTrainingRequestModal();
            });
        });

        // Close modal when clicking outside
        document.addEventListener('click', function(event) {
            const modal = document.getElementById('trainingRequestModal');
            if (event.target === modal) {
                closeTrainingRequestModal();
            }
        });
    </script>
</body>
</html>