<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trainings & Development</title>
    <link rel="stylesheet" href="/css/sidebar.css">
    <link rel="stylesheet" href="/css/recordsandperformancetracker.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        /* Import Inter font */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');

         /* Main content styling */
        .main-content {
            margin-left: 270px;
            padding: 20px;
            font-family: 'Inter', sans-serif;
        }

        /* Dashboard header */
        .dashboard-header {
            margin-bottom: 25px;
        }

        .dashboard-header h2 {
            margin-bottom: 10px;
            color: #333;
            font-size: 24px;
        }

        .dashboard-header p {
            color: #666;
            font-size: 0.95rem;
            max-width: 800px;
        }

        /* Action Required Alert */
        .action-required {
            background-color: #fef3c7;
            border-left: 4px solid #f59e0b;
            padding: 15px 20px;
            margin-bottom: 30px;
            border-radius: 8px;
        }

        .action-required-text {
            color: #92400e;
            font-weight: 500;
            margin: 0;
            font-size: 14px;
        }

        .action-required-highlight {
            color: #d97706;
            font-weight: 600;
        }

      * Tabs styling */
        .tabs-container {
            width: 100%;
            margin-bottom: 30px;
        }

        .tabs-nav {
            display: flex;
            border-bottom: 2px solid #eee;
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .tab-button {
            padding: 12px 20px;
            background-color: transparent;
            border: none;
            border-bottom: 3px solid transparent;
            cursor: pointer;
            font-weight: 600;
            font-size: 14px;
            color: #666;
            transition: all 0.3s ease;
            margin-right: 10px;
            display: flex;
            align-items: center;
        }

        .tab-button i {
            margin-right: 8px;
            font-size: 16px;
        }

        .tab-button.active {
            color: #07ACB9;
            border-bottom: 3px solid #07ACB9;
            background-color: #f8fdfd;
        }

        .tab-button:hover:not(.active) {
            color: #124A5C;
            border-bottom: 3px solid #ddd;
        }

        .tab-content {
            display: none;
            padding: 25px 0;
            animation: fadeIn 0.5s;
        }

        .tab-content.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

    /* Card styling */
        .card {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
            padding: 20px;
            margin-bottom: 25px;
        }

        .card-header {
            margin-bottom: 15px;
            border-bottom: 1px solid #f0f0f0;
            padding-bottom: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .card-header h3 {
            margin: 0;
            font-size: 1.2rem;
            color: #333;
        }

          /* Updated Progress categories grid - Fixed layout with side-by-side approval cards */
        .progress-categories {
            display: grid;
            grid-template-columns: 1fr 1fr;
            grid-template-rows: auto auto auto;
            gap: 20px;
            margin-bottom: 30px;
        }

        /* Row 1 - Approval Status Cards (Side by side, each takes half width) */
        .progress-category.row-1 {
            background: linear-gradient(135deg, #fff 0%, #f8fafc 100%);
            border: 3px solid;
            border-radius: 16px;
            padding: 20px 30px;
            text-align: center;
            min-height: 100px;
            max-height: 120px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 30px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
            grid-column: span 1; /* Each takes half width */
            cursor: pointer;
        }

        .progress-category.row-1::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 6px;
            background: var(--accent-color);
        }

        .progress-category.row-1:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
        }

        /* Row 1 Content Layout (Horizontal) */
        .progress-category.row-1 .request-stat-icon {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 28px;
            color: white;
            background: linear-gradient(135deg, var(--accent-color), var(--accent-color-dark));
            flex-shrink: 0;
        }
        
        .progress-category.row-1 .count {
            font-size: 3rem;
            font-weight: 700;
            margin: 0 10px 0 0;
            color: var(--accent-color);
            line-height: 1;
        }

        .progress-category.row-1 .text-content {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            text-align: left;
        }

        .progress-category.row-1 h3 {
            margin: 0 0 5px 0;
            font-size: 1.3rem;
            color: #334155;
            font-weight: 700;
        }

        .progress-category.row-1 p {
            margin: 0;
            font-size: 0.9rem;
            color: #64748b;
            line-height: 1.3;
        }

        /* Row 2 - Training Status Cards (2x2 grid, bigger height) */
        .progress-category.row-2 {
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
            border: 1px solid #e2e8f0;
            border-radius: 12px;
            padding: 25px;
            text-align: center;
            min-height: 160px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
            grid-column: span 1; /* Takes half width */
        }

        .progress-category.row-2:hover {
            border-color: var(--accent-color);
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.12);
        }

        /* Common styles for row 2 progress categories */
        .progress-category.row-2 h3 {
            margin: 0 0 12px 0;
            font-size: 1.2rem;
            color: #334155;
            font-weight: 600;
        }
        
        .progress-category.row-2 .count {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 10px;
            color: var(--accent-color);
            line-height: 1;
        }

        .progress-category.row-2 p {
            margin: 0;
            font-size: 0.9rem;
            color: #64748b;
            line-height: 1.4;
        }

        /* Row 1 Approval Status Colors and Icons */
        .progress-category.awaiting-approval {
            --accent-color: #f59e0b;
            --accent-color-dark: #d97706;
            border-color: #f59e0b;
        }

        .progress-category.rejected {
            --accent-color: #ef4444;
            --accent-color-dark: #dc2626;
            border-color: #ef4444;
        }

        /* Row 2 Training Status Colors */
        .progress-category.not-started {
            --accent-color: #64748b;
        }

        .progress-category.in-progress {
            --accent-color: #07ACB9;
        }

        .progress-category.completed {
            --accent-color: #16a34a;
        }

        .progress-category.overdue {
            --accent-color: #dc2626;
        }

     
        /* Courses header actions */
        .courses-header-actions {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        /* Add request button styling */
        .add-request-btn {
            background-color: #124A5C;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            white-space: nowrap;
        }

        .add-request-btn:hover {
            background-color: #0d3c4a;
            transform: translateY(-2px);
        }


.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(4px);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 10000;
    padding: 20px;
}

.modal-overlay.show {
    display: flex !important;
    animation: modalFadeIn 0.3s ease-out;
}

.modal-content {
    background: white;
    border-radius: 20px;
    width: 100%;
    max-width: 800px;
    max-height: 95vh;
    overflow-y: auto;
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
    position: relative;
    animation: modalSlideIn 0.3s ease-out;
}

@keyframes modalSlideIn {
    from { 
        opacity: 0;
        transform: translateY(-20px) scale(0.95);
    }
    to { 
        opacity: 1;
        transform: translateY(0) scale(1);
    }
}

.modal-header {
    padding: 30px 30px 20px 30px;
    border-bottom: 1px solid #e2e8f0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background:  #07ACB9 100%;
    color: white;
    border-radius: 20px 20px 0 0;
}

.modal-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin: 0;
}

.modal-close {
    background: rgba(255, 255, 255, 0.2);
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
}

.modal-close:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: scale(1.1);
}

     
/* Form Sections */
/* Additional styles for the new modal */
.form-section {
    padding: 25px 30px;
    border-bottom: 1px solid #f1f5f9;
}

.form-section:last-child {
    border-bottom: none;
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.section-header h3, .section-header h4 {
    font-size: 1.2rem;
    font-weight: 600;
    color: #1e293b;
    margin: 0;
    display: flex;
    align-items: center;
    gap: 10px;
}

.section-header h3 i, .section-header h4 i {
    color: #07ACB9;
}

.form-group {
    margin-bottom: 20px;
}

.form-label {
    display: block;
    font-size: 14px;
    font-weight: 600;
    color: #374151;
    margin-bottom: 8px;
    display: flex;
    align-items: center;
    gap: 8px;
}

.form-label i {
    color: #07ACB9;
}

.form-input {
    width: 100%;
    padding: 12px 16px;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    font-size: 14px;
    transition: all 0.2s ease;
    box-sizing: border-box;
}

.form-input:focus {
    outline: none;
    border-color: #07ACB9;
    box-shadow: 0 0 0 3px rgba(7, 172, 185, 0.1);
}

textarea.form-input {
    resize: vertical;
    min-height: 80px;
}

.dropdown-container {
    position: relative;
}

.dropdown-input {
    width: 100%;
    padding: 12px 40px 12px 16px;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    font-size: 14px;
    transition: all 0.2s ease;
    cursor: pointer;
    background: white;
}

.dropdown-input:focus {
    outline: none;
    border-color: #07ACB9;
    box-shadow: 0 0 0 3px rgba(7, 172, 185, 0.1);
}

.dropdown-icon {
    position: absolute;
    right: 12px;
    top: 50%;
    transform: translateY(-50%);
    color: #64748b;
    pointer-events: none;
    transition: transform 0.2s ease;
}

.dropdown-container.open .dropdown-icon {
    transform: translateY(-50%) rotate(180deg);
}

.dropdown-list {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: white;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
    z-index: 1000;
    display: none;
    max-height: 250px;
    overflow-y: auto;
}

.dropdown-container.open .dropdown-list {
    display: block;
}

.dropdown-item {
    padding: 15px 20px;
    cursor: pointer;
    border-bottom: 1px solid #f1f5f9;
    transition: all 0.2s ease;
}

.dropdown-item:last-child {
    border-bottom: none;
}

.dropdown-item:hover {
    background: #f8fafc;
}

.dropdown-item-title {
    font-weight: 600;
    color: #1e293b;
    margin-bottom: 4px;
    display: flex;
    align-items: center;
    gap: 8px;
}

.dropdown-item-meta {
    font-size: 12px;
    color: #64748b;
}

.loading, .no-results {
    padding: 20px;
    text-align: center;
    color: #64748b;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
}

.training-categories-section {
    margin-top: 20px;
    padding-top: 20px;
    border-top: 1px solid #f1f5f9;
}

.categories-container {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    min-height: 50px;
    border: 2px dashed #e2e8f0;
    border-radius: 8px;
    padding: 15px;
    background: #f8fafc;
}

.category-tag {
    background: linear-gradient(135deg, #07ACB9 0%, #059ca4 100%);
    color: white;
    padding: 8px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 500;
    display: flex;
    align-items: center;
    gap: 6px;
    box-shadow: 0 2px 4px rgba(7, 172, 185, 0.2);
}

.focus-areas-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 25px;
}

.focus-area-column {
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 10px;
    padding: 20px;
}

.focus-area-header {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 15px;
    font-weight: 600;
    color: #374151;
}

.focus-area-header i {
    color: #07ACB9;
}

.onsite-fields {
    margin-top: 20px;
    padding-top: 20px;
    border-top: 1px solid #f1f5f9;
}

.activities-container {
    min-height: 100px;
    margin-bottom: 20px;
}

.activity-item {
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 16px;
    margin-bottom: 12px;
    transition: all 0.2s ease;
}

.activity-item:hover {
    border-color: #07ACB9;
    background: #f0fdff;
}

.activity-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 12px;
}

.activity-number {
    background: linear-gradient(135deg, #07ACB9 0%, #059ca4 100%);
    color: white;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 14px;
    font-weight: 600;
    flex-shrink: 0;
}

.activity-fields {
    display: grid;
    grid-template-columns: 2fr 1fr 1fr;
    gap: 15px;
    margin-bottom: 10px;
}

.activity-remarks {
    width: 100%;
}

.remove-activity {
    background: #ef4444;
    color: white;
    border: none;
    padding: 4px 8px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 12px;
}

.remove-activity:hover {
    background: #dc2626;
}

.total-duration-display {
    background: linear-gradient(135deg, #f0fdf4 0%, #ecfdf5 100%);
    border: 2px solid #10b981;
    border-radius: 12px;
    padding: 16px;
    text-align: center;
    color: #065f46;
    font-size: 16px;
}

.empty-state {
    color: #94a3b8;
    font-style: italic;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 50px;
    border: 2px dashed #cbd5e1;
    border-radius: 8px;
    background: white;
}

.btn-secondary, .btn-primary {
    padding: 12px 24px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 8px;
    border: none;
}

.btn-secondary {
    background: white;
    color: #64748b;
    border: 2px solid #e2e8f0;
}

.btn-secondary:hover {
    background: #f1f5f9;
    border-color: #cbd5e1;
}

.btn-primary {
    background: linear-gradient(135deg, #124A5C 0%, #07ACB9 100%);
    color: white;
    border: none;
    box-shadow: 0 4px 12px rgba(18, 74, 92, 0.3);
}

.btn-primary:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(18, 74, 92, 0.4);
}

.btn-primary:disabled {
    background: #94a3b8;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
}

.modal-actions {
    padding: 25px 30px;
    background: #f8fafc;
    border-radius: 0 0 20px 20px;
    display: flex;
    justify-content: center;
    gap: 15px;
}

.idp-data-content {
    padding: 30px;
    max-height: 70vh;
    overflow-y: auto;
}

.idp-section {
    margin-bottom: 30px;
    padding: 20px;
    background: #f8fafc;
    border-radius: 12px;
    border: 1px solid #e2e8f0;
}

.idp-section h4 {
    color: #1e293b;
    margin-bottom: 15px;
    display: flex;
    align-items: center;
    gap: 8px;
}

.idp-section h4 i {
    color: #07ACB9;
}

.idp-text {
    color: #64748b;
    line-height: 1.6;
    margin-bottom: 10px;
}

/* Responsive Design */
@media (max-width: 768px) {
    .focus-areas-grid {
        grid-template-columns: 1fr;
    }
    
    .activity-fields {
        grid-template-columns: 1fr;
    }
    
    .modal-actions {
        flex-direction: column;
    }
    
    .btn-secondary, .btn-primary {
        width: 100%;
        justify-content: center;
    }
}
        .checkbox-group {
            display: flex;
            flex-wrap: wrap;
            gap: 12px;
            margin-top: 8px;
        }

        .checkbox-item {
            display: flex;
            align-items: center;
            gap: 6px;
            padding: 8px 12px;
            border: 1px solid #e2e8f0;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 14px;
        }

        .checkbox-item:hover {
            border-color: #07ACB9;
            background-color: #f0fdff;
        }

        .checkbox-item.selected {
            background-color: #07ACB9;
            color: white;
            border-color: #07ACB9;
        }

        .checkbox-item input[type="checkbox"] {
            display: none;
        }

        .date-inputs {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }

        .confirmation-message {
            background-color: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 16px;
            margin: 20px 0;
            font-size: 14px;
            color: #64748b;
            text-align: center;
        }

        .modal-actions {
            display: flex;
            justify-content: center;
            gap: 12px;
            margin-top: 25px;
        }

        .btn-secondary {
            background-color: #f8fafc;
            color: #64748b;
            border: 1px solid #e2e8f0;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .btn-secondary:hover {
            background-color: #e2e8f0;
        }

        .btn-primary {
            background-color: #124A5C;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .btn-primary:hover {
            background-color: #0d3c4a;
        }

        .filter-dropdown {
            position: relative;
        }

        .filter-button {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 10px 15px;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            background-color: #fff;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.2s ease;
        }

        .filter-button:hover {
            border-color: #07ACB9;
        }

        .filter-dropdown-content {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background-color: white;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            z-index: 1000;
            display: none;
            padding: 10px;
            min-width: 150px;
        }

        .filter-dropdown.open .filter-dropdown-content {
            display: block;
        }

        .filter-option {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px;
            cursor: pointer;
            border-radius: 4px;
            font-size: 14px;
        }

        .filter-option:hover {
            background-color: #f8fafc;
        }

        .filter-option input[type="checkbox"] {
            margin: 0;
        }

        /* Active filters display */
        .active-filters {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
            margin-left: 10px;
        }

        .filter-tag {
            background-color: #07ACB9;
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .filter-tag .remove-filter {
            cursor: pointer;
            font-size: 10px;
            background-color: rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            width: 14px;
            height: 14px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Courses Grid */
        .courses-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }

        .course-card {
            background-color: #f8fafc;
            border: none;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .course-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        }


        .course-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 15px;
        }

        .course-title {
            font-size: 1.1rem;
            font-weight: 600;
            color: #334155;
            margin: 0;
            flex: 1;
        }

        .course-badges {
            display: flex;
            flex-direction: column;
            gap: 5px;
            margin-left: 10px;
        }

        .course-status {
            display: inline-flex;
            align-items: center;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: 500;
        }

        .course-status.active {
            background-color: #10b981;
            color: white;
        }

        .course-status.inactive {
            background-color: #6b7280;
            color: white;
        }

        .course-status.enrolled {
            background-color: #3b82f6;
            color: white;
        }

        .course-type {
            display: inline-flex;
            align-items: center;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: 500;
            background-color: #e5e7eb;
            color: #374151;
        }

        .course-type.online {
            background-color: #dbeafe;
            color: #1e40af;
        }

        .course-type.onsite {
            background-color: #fef3c7;
            color: #d97706;
        }

        .course-type.required {
            background-color: #fecaca;
            color: #dc2626;
        }

        .course-description {
            color: #64748b;
            font-size: 14px;
            margin-bottom: 15px;
            line-height: 1.5;
        }

        .enroll-btn {
            background-color: #07ACB9;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .enroll-btn:hover {
            background-color: #059ca4;
        }

        /* Status badges for course list items */
/* Card content sections - Fixed padding and spacing */
.course-card.enhanced .course-header {
    padding: 25px 25px 15px 25px;
    border-bottom: 1px solid #f1f5f9;
    margin-bottom: 0;
    flex-shrink: 0;
}

.course-card.enhanced .course-title {
    font-size: 1.125rem;
    font-weight: 700;
    color: #1e293b;
    margin: 0 0 8px 0;
    line-height: 1.4;
    min-height: 50px; /* Ensure consistent height */
    display: flex;
    align-items: center;
}

.course-card.enhanced .course-description {
    padding: 0 25px;
    margin: 15px 0;
    color: #64748b;
    font-size: 14px;
    line-height: 1.5;
    flex-grow: 1; /* Allow description to take available space */
    min-height: 60px; /* Ensure consistent height */
}

/* Meta grid - Fixed spacing */
.course-meta-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 12px;
    padding: 0 25px;
    margin-bottom: 20px;
    flex-shrink: 0;
}

.course-meta-grid .meta-item {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 10px 12px;
    background: #f8fafc;
    border-radius: 8px;
    font-size: 13px;
    color: #64748b;
    min-height: 40px; /* Consistent height */
}

.course-meta-grid .meta-item i {
    color: #07ACB9;
    font-size: 12px;
    width: 14px;
    text-align: center;
    flex-shrink: 0;
}
/* Progress section - Fixed positioning */
.course-progress-section {
    padding: 0 25px 20px 25px;
    margin-top: auto; /* Push to bottom */
    flex-shrink: 0;
}

.progress-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.progress-label-with-status {
    display: flex;
    align-items: center;
    gap: 10px;
}

.progress-label {
    font-size: 13px;
    font-weight: 600;
    color: #475569;
}

.progress-percentage {
    font-size: 13px;
    font-weight: 700;
    color: #07ACB9;
}


.course-progress-bar {
    height: 10px;
    background: #f1f5f9;
    border-radius: 6px;
    overflow: hidden;
    position: relative;
}

.course-progress-bar .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #07ACB9 0%, #124A5C 100%);
    border-radius: 6px;
    position: relative;
    transition: width 0.6s ease;
}

/* Footer - Fixed positioning */
.course-footer {
    padding: 20px 25px;
    background: #f8fafc;
    border-top: 1px solid #f1f5f9;
    border-radius: 0 0 16px 16px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: auto;
    flex-shrink: 0;
}

.course-dates {
    display: flex;
    flex-direction: column;
    gap: 4px;
}

.course-dates small {
    color: #64748b;
    font-size: 12px;
    display: flex;
    align-items: center;
    gap: 6px;
}

.course-dates i {
    color: #07ACB9;
    width: 12px;
    font-size: 10px;
}

.click-indicator {
    display: flex;
    align-items: center;
    gap: 8px;
    color: #07ACB9;
    font-size: 12px;
    font-weight: 600;
    opacity: 0;
    transform: translateX(-10px);
    transition: all 0.3s ease;
}

.course-card.enhanced:hover .click-indicator {
    opacity: 1;
    transform: translateX(0);
}

.click-indicator i {
    font-size: 11px;
    transition: transform 0.3s ease;
}

.course-card.enhanced:hover .click-indicator i {
    transform: translateX(3px);
}



      /* Approval status badge */
        .approval-status-badge {
            position: absolute;
            top: 15px;
            right: 15px;
            padding: 4px 10px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .approval-status-badge.awaiting-approval {
            background: #fef3c7;
            color: #d97706;
            border: 1px solid #f59e0b;
        }

        .approval-status-badge.rejected {
            background: #fef2f2;
            color: #dc2626;
            border: 1px solid #ef4444;
        }

        .approval-status-badge.approved {
            background: #f0fdf4;
            color: #16a34a;
            border: 1px solid #22c55e;
        }


/* Footer */
.course-footer {
    padding: 15px 20px;
    background: #f8fafc;
    border-top: 1px solid #f1f5f9;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.course-dates {
    display: flex;
    flex-direction: column;
    gap: 2px;
}

.course-dates small {
    color: #64748b;
    font-size: 11px;
    display: flex;
    align-items: center;
    gap: 4px;
}

.course-dates i {
    color: #07ACB9;
    width: 10px;
}

.click-indicator {
    display: flex;
    align-items: center;
    gap: 6px;
    color: #07ACB9;
    font-size: 11px;
    font-weight: 600;
    opacity: 0;
    transform: translateX(-10px);
    transition: all 0.3s ease;
}

.course-card.enhanced:hover .click-indicator {
    opacity: 1;
    transform: translateX(0);
}

.click-indicator i {
    font-size: 10px;
    transition: transform 0.3s ease;
}

.course-card.enhanced:hover .click-indicator i {
    transform: translateX(3px);
}

/* Remove old styles that conflict */
.course-card.enhanced::after {
    display: none;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .course-meta-grid {
        grid-template-columns: 1fr;
    }
    
    .course-footer {
        flex-direction: column;
        gap: 10px;
        align-items: flex-start;
    }
    
    .click-indicator {
        align-self: flex-end;
    }
}


        /* Progress bar styling - matching the performance dashboard */
        .course-progress {
            background-color: #f2f2f2;
            height: 20px;
            border-radius: 4px;
            overflow: hidden;
            margin: 15px 0 10px 0;
            position: relative;
        }

        .progress-fill {
            height: 100%;
            background-color: #07ACB9;
            border-radius: 4px;
            transition: width 0.3s ease-in-out;
            position: relative;
            text-align: center;
            color: #fff;
            line-height: 20px;
            font-size: 12px;
            font-weight: 600;
        }

        /* Upload button styling */
        .upload-certificate-btn {
            background-color: #124A5C;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .upload-certificate-btn:hover {
            background-color: #0d3c4a;
            transform: translateY(-2px);
        }

        /* View toggle buttons */
        .view-toggle {
            display: flex;
            gap: 10px;
        }

        .view-btn {
            padding: 8px 16px;
            border: 1px solid #e2e8f0;
            background-color: #f8fafc;
            color: #64748b;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.2s ease;
        }

        .view-btn.active {
            background-color: #124A5C;
            color: white;
            border-color: #124A5C;
        }

        .view-btn:hover:not(.active) {
            border-color: #07ACB9;
            color: #07ACB9;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .progress-categories {
                grid-template-columns: 1fr;
                grid-template-rows: none;
                gap: 15px;
            }
            
            .progress-category.row-1 {
                grid-column: span 1;
                flex-direction: column;
                gap: 15px;
                padding: 20px;
                min-height: 120px;
            }
            
            .progress-category.row-1 .text-content {
                align-items: center;
                text-align: center;
            }
            
            .progress-category.row-2 {
                padding: 20px;
                min-height: 140px;
            }
        }


        /* Certificates grid */
        .certificates-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .certificate-item {
            background-color: #f8fafc;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            padding: 20px;
            transition: all 0.3s ease;
        }

        .certificate-item:hover {
            border-color: #07ACB9;
            background-color: #f0fdff;
        }

        .certificate-item.uploaded {
            border-color: #10b981;
            background-color: #ecfdf5;
        }

        .certificate-header {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 15px;
        }

        .certificate-icon {
            background-color: #07ACB9;
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
        }

        .certificate-title {
            font-weight: 600;
            color: #334155;
            font-size: 1rem;
            margin: 0;
        }

        .certificate-details {
            margin: 10px 0;
            color: #64748b;
            font-size: 14px;
            line-height: 1.5;
        }

        .certificate-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #e2e8f0;
            font-size: 12px;
            color: #6b7280;
        }

        .certificate-placeholder {
            color: #94a3b8;
            font-style: italic;
            text-align: center;
        }

        /* Progress section styling */
        .progress-section {
            margin-bottom: 40px;
        }

        .progress-section:last-child {
    margin-bottom: 0;
}

.progress-section .section-title {
    font-size: 1.3rem;
    font-weight: 600;
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 2px solid #f0f0f0;
    display: flex;
    align-items: center;
}

/* Add spacing after the description paragraph */
.card p {
    margin-bottom: 30px;
}

        /* List view styling for progress sections */
        .courses-list {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .course-list-item {
            background-color: #fff;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 16px 20px;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .course-list-item:hover {
            border-color: #07ACB9;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .course-list-item.enrolled {
            border-left: 4px solid #3b82f6;
        }

        .course-list-item.completed {
            border-left: 4px solid #10b981;
        }

        .course-list-item.overdue {
            border-left: 4px solid #ef4444;
        }

        .course-list-info {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .course-list-title {
            font-size: 1rem;
            font-weight: 600;
            color: #334155;
            margin: 0;
        }

        .course-list-details {
            font-size: 14px;
            color: #64748b;
            line-height: 1.4;
        }

        .course-list-meta {
            display: flex;
            align-items: center;
            gap: 15px;
            min-width: 250px;
        }

        .course-list-badges {
            display: flex;
            gap: 6px;
            flex-wrap: wrap;
        }

        .course-list-badge {
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: 500;
        }

        .course-list-badge.online {
            background-color: #dbeafe;
            color: #1e40af;
        }

        .course-list-badge.onsite {
            background-color: #fef3c7;
            color: #d97706;
        }

       /* Required badge styling for list view */
.course-list-badge.required {
    background-color: #fecaca;
    color: #dc2626;
    font-weight: 600;
}

        .course-list-progress {
            width: 120px;
            text-align: right;
        }

        .course-list-progress-bar {
            width: 100%;
            height: 6px;
            background-color: #f2f2f2;
            border-radius: 3px;
            overflow: hidden;
            margin-bottom: 4px;
        }

        .course-list-progress-fill {
            height: 100%;
            background-color: #07ACB9;
            border-radius: 3px;
            transition: width 0.3s ease;
        }

        .course-list-progress-text {
            font-size: 12px;
            color: #64748b;
            font-weight: 500;
        }

        /* Course List Item Border Colors */
        .course-list-item.awaiting-approval {
            border-left: 4px solid #f59e0b;
            background-color: #fefcf0;
        }

        .course-list-item.rejected {
            border-left: 4px solid #ef4444;
            background-color: #fef2f2;
        }

        .course-list-item.not-started {
            border-left: 4px solid #64748b;
            background-color: #f8fafc;
        }

        .course-list-item.in-progress {
            border-left: 4px solid #07ACB9;
            background-color: #f0fdff;
        }

        .course-list-item.completed {
            border-left: 4px solid #16a34a;
            background-color: #f0fdf4;
        }

        .course-list-item.overdue {
            border-left: 4px solid #dc2626;
            background-color: #fef2f2;
        }
        /* Certificates list styling */
        .certificates-list {
            display: flex;
            flex-direction: column;
            gap: 12px;
            margin-top: 20px;
        }

        .certificate-list-item {
            background-color: #fff;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 16px 20px;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .certificate-list-item:hover {
            border-color: #07ACB9;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .certificate-list-item.uploaded {
            border-left: 4px solid #10b981;
        }

        .certificate-list-info {
            flex: 1;
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .certificate-list-icon {
            background-color: #07ACB9;
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.1rem;
            flex-shrink: 0;
        }

        .certificate-list-details {
            flex: 1;
        }

        .certificate-list-title {
            font-size: 1rem;
            font-weight: 600;
            color: #334155;
            margin: 0 0 4px 0;
        }

        .certificate-list-meta {
            font-size: 14px;
            color: #64748b;
            line-height: 1.4;
        }

        .certificate-list-actions {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .certificate-list-id {
            font-size: 12px;
            color: #6b7280;
            font-family: monospace;
        }

        .certificate-download {
            color: #07ACB9;
            cursor: pointer;
            font-size: 1.1rem;
            padding: 4px;
            border-radius: 4px;
            transition: background-color 0.2s ease;
        }

        .certificate-download:hover {
            background-color: #f0fdff;
        }

        /* Show more styling */
        .show-more-item {
            border: 2px dashed #cbd5e1;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            color: #64748b;
        }

        .show-more-item:hover {
            border-color: #07ACB9;
            background-color: #f0fdff;
        }

        /* Smooth scrolling */
        html {
            scroll-behavior: smooth;
        }


        /* Updated Progress categories grid with custom layout */
.progress-categories {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: auto auto auto;
    gap: 20px;
    margin-bottom: 30px;
}

/* Row 1 - Approval Status Cards (Side by side, smaller height) */
.progress-category.row-1 {
    background: linear-gradient(135deg, #fff 0%, #f8fafc 100%);
    border: 3px solid;
    border-radius: 16px;
    padding: 20px 30px;
    text-align: center;
    min-height: 100px;
    max-height: 120px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 30px;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    grid-column: span 1; /* Each takes half width - CHANGED FROM span 2 */
    /* Remove click functionality */
    cursor: default;
}

.progress-category.row-1::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 6px;
    background: var(--accent-color);
}

.progress-category.row-1:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
}

/* Row 1 Content Layout (Horizontal) */
.progress-category.row-1 .request-stat-icon {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 28px;
    color: white;
    background: linear-gradient(135deg, var(--accent-color), var(--accent-color-dark));
    flex-shrink: 0;
}

.progress-category.row-1 .count {
    font-size: 3rem;
    font-weight: 700;
    margin: 0 10px 0 0;
    color: var(--accent-color);
    line-height: 1;
}

.progress-category.row-1 .text-content {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    text-align: left;
}

.progress-category.row-1 h3 {
    margin: 0 0 5px 0;
    font-size: 1.3rem;
    color: #334155;
    font-weight: 700;
}

.progress-category.row-1 p {
    margin: 0;
    font-size: 0.9rem;
    color: #64748b;
    line-height: 1.3;
}

/* Row 2 - Training Status Cards (2x2 grid, bigger height) */
.progress-category.row-2 {
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 25px;
    text-align: center;
    min-height: 160px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    transition: all 0.3s ease;
    cursor: pointer;
    position: relative;
    grid-column: span 1; /* Takes half width */
}

.progress-category.row-2:hover {
    border-color: var(--accent-color);
    transform: translateY(-3px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.12);
}

/* Common styles for row 2 progress categories */
.progress-category.row-2 h3 {
    margin: 0 0 12px 0;
    font-size: 1.2rem;
    color: #334155;
    font-weight: 600;
}

.progress-category.row-2 .count {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 10px;
    color: var(--accent-color);
    line-height: 1;
}

.progress-category.row-2 p {
    margin: 0;
    font-size: 0.9rem;
    color: #64748b;
    line-height: 1.4;
}

/* Row 1 Approval Status Colors and Icons */
.progress-category.awaiting-approval {
    --accent-color: #f59e0b;
    --accent-color-dark: #d97706;
    border-color: #f59e0b;
}

.progress-category.rejected {
    --accent-color: #ef4444;
    --accent-color-dark: #dc2626;
    border-color: #ef4444;
}

/* Row 2 Training Status Colors */
.progress-category.not-started {
    --accent-color: #64748b;
}

.progress-category.in-progress {
    --accent-color: #07ACB9;
}

.progress-category.completed {
    --accent-color: #16a34a;
}

.progress-category.overdue {
    --accent-color: #dc2626;
}

/* Responsive Design */
        @media (max-width: 768px) {
            .progress-categories {
                grid-template-columns: 1fr;
                grid-template-rows: none;
                gap: 15px;
            }
            
            .progress-category.row-1 {
                grid-column: span 1;
                flex-direction: column;
                gap: 15px;
                padding: 20px;
                min-height: 120px;
            }
            
            .progress-category.row-1 .text-content {
                align-items: center;
                text-align: center;
            }
            
            .progress-category.row-2 {
                padding: 20px;
                min-height: 140px;
            }
        }

        @media (max-width: 480px) {
            .progress-category.row-1 {
                padding: 15px;
                min-height: 100px;
            }
            
            .progress-category.row-1 .request-stat-icon {
                width: 50px;
                height: 50px;
                font-size: 24px;
            }
            
            .progress-category.row-2 {
                padding: 15px;
                min-height: 120px;
            }
        }



        /* Enhanced Course Card Status Colors */
        .course-card.enhanced.awaiting-approval::before {
            background: linear-gradient(90deg, #f59e0b 0%, #d97706 100%);
        }

        .course-card.enhanced.rejected::before {
            background: linear-gradient(90deg, #ef4444 0%, #dc2626 100%);
        }

        .course-card.enhanced.not-started::before {
            background: linear-gradient(90deg, #64748b 0%, #475569 100%);
        }

        .course-card.enhanced.in-progress::before {
            background: linear-gradient(90deg, #07ACB9 0%, #059ca4 100%);
        }

        .course-card.enhanced.completed::before {
            background: linear-gradient(90deg, #16a34a 0%, #15803d 100%);
        }

        .course-card.enhanced.overdue::before {
            background: linear-gradient(90deg, #dc2626 0%, #b91c1c 100%);
        }

        /* Status Badge Colors for Course Cards */
        .course-status.awaiting-approval {
            background-color: #fef3c7;
            color: #d97706;
        }

        .course-status.rejected {
            background-color: #fef2f2;
            color: #dc2626;
        }

        .course-status.not-started {
            background-color: #f1f5f9;
            color: #64748b;
        }

        .course-status.in-progress {
            background-color: #f0fdff;
            color: #07ACB9;
        }

        .course-status.completed {
            background-color: #f0fdf4;
            color: #16a34a;
        }

        .course-status.overdue {
            background-color: #fef2f2;
            color: #dc2626;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .progress-categories {
                grid-template-columns: 1fr;
                grid-template-rows: none;
                gap: 15px;
            }
            
            .progress-category.row-1,
            .progress-category.row-2 {
                padding: 20px;
                min-height: auto;
            }
            
            .progress-category .count {
                font-size: 1.8rem;
            }
        }

        @media (max-width: 480px) {
            .progress-category.row-1,
            .progress-category.row-2 {
                padding: 15px;
            }
            
            .progress-category h3 {
                font-size: 1rem;
            }
            
            .progress-category .count {
                font-size: 1.6rem;
            }
        }


/* Training Details Card */
.training-details-card {
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
    border: 2px solid #e2e8f0;
    border-radius: 12px;
    padding: 20px;
    margin-top: 15px;
    transition: all 0.3s ease;
}

.training-card-header {
    display: flex;
    align-items: center;
    gap: 15px;
}

.training-icon {
    background: linear-gradient(135deg, #124A5C 0%, #07ACB9 100%);
    color: white;
    width: 50px;
    height: 50px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem;
}

.training-info h4 {
    margin: 0 0 8px 0;
    font-size: 1.1rem;
    font-weight: 600;
    color: #1e293b;
}

.training-meta {
    display: flex;
    gap: 20px;
    flex-wrap: wrap;
}

.meta-item {
    display: flex;
    align-items: center;
    gap: 6px;
    font-size: 14px;
    color: #64748b;
}

.meta-item i {
    color: #07ACB9;
}

/* Focus Areas */
.focus-areas-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 25px;
}

.focus-area-column {
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 10px;
    padding: 20px;
}

.focus-area-header {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 15px;
    font-weight: 600;
    color: #374151;
}

.focus-area-header i {
    color: #07ACB9;
}

.tags-container {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    min-height: 40px;
}

.tag {
    background: linear-gradient(135deg, #07ACB9 0%, #059ca4 100%);
    color: white;
    padding: 8px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 500;
    display: flex;
    align-items: center;
    gap: 6px;
    box-shadow: 0 2px 4px rgba(7, 172, 185, 0.2);
}

.tag.objective {
    background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
    box-shadow: 0 2px 4px rgba(59, 130, 246, 0.2);
}

.tag.skill {
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    box-shadow: 0 2px 4px rgba(16, 185, 129, 0.2);
}

.empty-state {
    color: #94a3b8;
    font-style: italic;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 40px;
    border: 2px dashed #cbd5e1;
    border-radius: 8px;
    background: white;
}

/* Schedule Options */
.schedule-options {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    gap: 15px;
    margin-bottom: 25px;
}

.schedule-option {
    position: relative;
    cursor: pointer;
}

.schedule-option input[type="radio"] {
    position: absolute;
    opacity: 0;
}

.schedule-option label {
    display: block;
    background: #f8fafc;
    border: 2px solid #e2e8f0;
    border-radius: 12px;
    padding: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
    height: 100%;
}

.schedule-option:hover label {
    border-color: #07ACB9;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(7, 172, 185, 0.15);
}

.schedule-option input[type="radio"]:checked + label {
    border-color: #07ACB9;
    background: linear-gradient(135deg, #f0fdff 0%, #e6fffa 100%);
    box-shadow: 0 4px 12px rgba(7, 172, 185, 0.2);
}

.option-icon {
    background: linear-gradient(135deg, #124A5C 0%, #07ACB9 100%);
    color: white;
    width: 40px;
    height: 40px;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 12px;
}

.option-content h4 {
    margin: 0 0 4px 0;
    font-size: 16px;
    font-weight: 600;
    color: #1e293b;
}

.option-content p {
    margin: 0 0 8px 0;
    font-size: 14px;
    color: #64748b;
}

.schedule-preview {
    font-size: 12px;
    color: #07ACB9;
    font-weight: 500;
}

/* Date Selection */
.date-selection {
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 25px;
    margin-bottom: 20px;
}

.date-input-group {
    display: grid;
    grid-template-columns: 1fr auto 1fr;
    gap: 20px;
    align-items: end;
    margin-bottom: 20px;
}

.date-arrow {
    color: #07ACB9;
    font-size: 1.2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 10px;
}

.date-field {
    position: relative;
}

.date-input {
    width: 100%;
    padding: 12px 16px;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    font-size: 14px;
    transition: all 0.2s ease;
}

.date-input:focus {
    outline: none;
    border-color: #07ACB9;
    box-shadow: 0 0 0 3px rgba(7, 172, 185, 0.1);
}

.date-input:read-only {
    background: #f1f5f9;
    color: #64748b;
}

.date-helper {
    font-size: 12px;
    color: #64748b;
    margin-top: 4px;
}

.custom-schedule {
    border-top: 1px solid #e2e8f0;
    padding-top: 20px;
}

.custom-input-group {
    margin-bottom: 15px;
}

.custom-note {
    display: flex;
    align-items: center;
    gap: 8px;
    color: #64748b;
    font-size: 14px;
}

.custom-note i {
    color: #07ACB9;
}

/* Schedule Summary */
.schedule-summary {
    margin-top: 25px;
}

.summary-card {
    background: linear-gradient(135deg, #ecfdf5 0%, #f0fdf4 100%);
    border: 2px solid #10b981;
    border-radius: 12px;
    padding: 20px;
}

.summary-header {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 15px;
    font-weight: 600;
    color: #065f46;
}

.summary-header i {
    color: #10b981;
}

.summary-content {
    display: grid;
    gap: 10px;
}

.summary-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px 0;
    border-bottom: 1px solid rgba(16, 185, 129, 0.2);
}

.summary-row:last-child {
    border-bottom: none;
}

.summary-row span {
    color: #374151;
}

.summary-row strong {
    color: #065f46;
}

/* Confirmation Note */
.confirmation-note {
    display: flex;
    gap: 15px;
    background: #fef3c7;
    border: 2px solid #f59e0b;
    border-radius: 12px;
    padding: 20px;
}

.note-icon {
    color: #d97706;
    font-size: 1.2rem;
    flex-shrink: 0;
}

.note-content {
    color: #92400e;
    line-height: 1.5;
}

/* Form Controls */
.form-label {
    display: block;
    font-size: 14px;
    font-weight: 600;
    color: #374151;
    margin-bottom: 8px;
    display: flex;
    align-items: center;
    gap: 8px;
}

.form-label i {
    color: #07ACB9;
}

.form-input {
    width: 100%;
    padding: 12px 16px;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    font-size: 14px;
    transition: all 0.2s ease;
    box-sizing: border-box;
}

.form-input:focus {
    outline: none;
    border-color: #07ACB9;
    box-shadow: 0 0 0 3px rgba(7, 172, 185, 0.1);
}

/* Dropdown */
.dropdown-container {
    position: relative;
}

.dropdown-input {
    width: 100%;
    padding: 12px 40px 12px 16px;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    font-size: 14px;
    transition: all 0.2s ease;
    cursor: pointer;
}

.dropdown-icon {
    position: absolute;
    right: 12px;
    top: 50%;
    transform: translateY(-50%);
    color: #64748b;
    pointer-events: none;
    transition: transform 0.2s ease;
}

.dropdown-container.open .dropdown-icon {
    transform: translateY(-50%) rotate(180deg);
}

.dropdown-list {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: white;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
    z-index: 1000;
    display: none;
    max-height: 250px;
    overflow-y: auto;
}

.dropdown-container.open .dropdown-list {
    display: block;
}

.dropdown-item {
    padding: 15px 20px;
    cursor: pointer;
    border-bottom: 1px solid #f1f5f9;
    transition: all 0.2s ease;
}

.dropdown-item:last-child {
    border-bottom: none;
}

.dropdown-item:hover {
    background: #f8fafc;
}

.dropdown-item-title {
    font-weight: 600;
    color: #1e293b;
    margin-bottom: 4px;
}

.dropdown-item-meta {
    font-size: 12px;
    color: #64748b;
    display: flex;
    align-items: center;
    gap: 12px;
}

.loading, .no-results {
    padding: 20px;
    text-align: center;
    color: #64748b;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
}
        /* Loading state improvements */
        .loading-state {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 60px 20px;
            color: #64748b;
            grid-column: 1 / -1;
        }

        .loading-state i {
            font-size: 2rem;
            margin-bottom: 15px;
            opacity: 0.6;
        }

        .loading-state .loading-spinner {
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

/* Action Buttons */
.modal-actions {
    padding: 25px 30px;
    background: #f8fafc;
    border-radius: 0 0 20px 20px;
    display: flex;
    justify-content: center;
    gap: 15px;
}

.btn-secondary, .btn-primary {
    padding: 12px 24px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 8px;
    min-width: 120px;
    justify-content: center;
}

.btn-secondary {
    background: white;
    color: #64748b;
    border: 2px solid #e2e8f0;
}

.btn-secondary:hover {
    background: #f1f5f9;
    border-color: #cbd5e1;
}

.btn-primary {
    background: linear-gradient(135deg, #124A5C 0%, #07ACB9 100%);
    color: white;
    border: none;
    box-shadow: 0 4px 12px rgba(18, 74, 92, 0.3);
}

.btn-primary:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(18, 74, 92, 0.4);
}

.btn-primary:disabled {
    background: #94a3b8;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
}

/* Responsive Design */
@media (max-width: 768px) {
    .modal-content {
        margin: 10px;
        max-height: calc(100vh - 20px);
        border-radius: 15px;
    }
    
    .modal-header {
        padding: 20px 20px 15px 20px;
        border-radius: 15px 15px 0 0;
    }
    
    .form-section {
        padding: 20px;
    }
    
    .focus-areas-grid {
        grid-template-columns: 1fr;
    }
    
    .schedule-options {
        grid-template-columns: 1fr;
    }
    
    .date-input-group {
        grid-template-columns: 1fr;
        gap: 15px;
    }
    
    .date-arrow {
        display: none;
    }
    
    .modal-actions {
        padding: 20px;
        flex-direction: column;
    }
    
    .btn-secondary, .btn-primary {
        width: 100%;
    }
    .peso-symbol {
    font-weight: bold;
    margin-right: 4px;
}
}
        /* Calendar View Styles */
        .calendar-container {
            display: none;
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07);
            overflow: hidden;
        }

        .calendar-container.active {
            display: block;
        }

        .calendar-header {
            background: linear-gradient(135deg, #124A5C 0%, #07ACB9 100%);
            color: white;
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .calendar-navigation {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .nav-btn {
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
        }

        .nav-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(1.1);
        }

        .month-year {
            font-size: 1.5rem;
            font-weight: 600;
            min-width: 200px;
            text-align: center;
        }

        .calendar-legend {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
        }

        .legend-color {
            width: 16px;
            height: 16px;
            border-radius: 4px;
        }

        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 1px;
            background-color: #e5e7eb;
            padding: 1px;
        }

        .calendar-day-header {
            background-color: #f8fafc;
            padding: 12px 8px;
            text-align: center;
            font-weight: 600;
            color: #374151;
            font-size: 14px;
        }

        .calendar-day {
            background-color: white;
            min-height: 120px;
            padding: 8px;
            position: relative;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .calendar-day:hover {
            background-color: #f8fafc;
        }

        .calendar-day.other-month {
            background-color: #f9fafb;
            color: #9ca3af;
        }

        .calendar-day.today {
            background-color: #fef3c7;
            border: 2px solid #f59e0b;
        }

        .day-number {
            font-weight: 600;
            color: #374151;
            margin-bottom: 4px;
            font-size: 14px;
        }

        .calendar-day.other-month .day-number {
            color: #9ca3af;
        }

        .training-events {
            display: flex;
            flex-direction: column;
            gap: 2px;
        }

        .training-event {
            background-color: #07ACB9;
            color: white;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 11px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .training-event:hover {
            transform: scale(1.02);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .more-events {
            font-size: 10px;
            color: #6b7280;
            font-style: italic;
            margin-top: 2px;
        }

        /* List View Styles */
        .list-container {
            display: block;
        }

        .list-container.hidden {
            display: none;
        }

        /* Calendar View Legend Colors - Updated to match */
.legend-color.not-started { background-color: #64748b; }
.legend-color.in-progress { background-color: #07ACB9; }
.legend-color.completed { background-color: #16a34a; }
.legend-color.overdue { background-color: #dc2626; }
.legend-color.awaiting-approval { background-color: #f59e0b; }
.legend-color.rejected { background-color: #ef4444; }

/* Calendar Training Event Colors - Updated to match */
.training-event.not-started { background-color: #64748b; }
.training-event.in-progress { background-color: #07ACB9; }
.training-event.completed { background-color: #16a34a; }
.training-event.overdue { background-color: #dc2626; }
.training-event.awaiting-approval { background-color: #f59e0b; }
.training-event.rejected { background-color: #ef4444; }

/* Progress Status Indicators - Updated colors */
.progress-status-indicator.not-started { background: #f1f5f9; color: #64748b; }
.progress-status-indicator.in-progress { background: #f0fdff; color: #07ACB9; }
.progress-status-indicator.completed { background: #f0fdf4; color: #16a34a; }
.progress-status-indicator.overdue { background: #fef2f2; color: #dc2626; }
.progress-status-indicator.awaiting-approval { background: #fef3c7; color: #d97706; }
.progress-status-indicator.rejected { background: #fef2f2; color: #dc2626; }

/* Training Activities Section Styles */
.activities-container {
    margin-top: 10px;
}

.activities-list {
    display: flex;
    flex-direction: column;
    gap: 12px;
    margin-top: 15px;
}

.activity-item {
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 16px;
    transition: all 0.2s ease;
}

.activity-item:hover {
    border-color: #07ACB9;
    background: #f0fdff;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(7, 172, 185, 0.1);
}

.activity-header {
    display: flex;
    align-items: flex-start;
    gap: 15px;
}

.activity-number {
    background: linear-gradient(135deg, #07ACB9 0%, #059ca4 100%);
    color: white;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 14px;
    font-weight: 600;
    flex-shrink: 0;
    box-shadow: 0 2px 4px rgba(7, 172, 185, 0.2);
}

.activity-info {
    flex: 1;
}

.activity-name {
    margin: 0 0 8px 0;
    font-size: 1rem;
    font-weight: 600;
    color: #1e293b;
    line-height: 1.3;
}

.activity-meta {
    display: flex;
    gap: 20px;
    margin-bottom: 8px;
    flex-wrap: wrap;
}

.activity-duration,
.activity-type {
    display: flex;
    align-items: center;
    gap: 6px;
    font-size: 13px;
    color: #64748b;
    background: white;
    padding: 4px 8px;
    border-radius: 6px;
    border: 1px solid #e2e8f0;
}

.activity-duration i {
    color: #07ACB9;
}

.activity-type i {
    color: #3b82f6;
}

.activity-remarks {
    display: flex;
    align-items: flex-start;
    gap: 8px;
    font-size: 13px;
    color: #64748b;
    background: #f1f5f9;
    padding: 8px 12px;
    border-radius: 8px;
    border-left: 3px solid #07ACB9;
    margin-top: 8px;
    line-height: 1.4;
}

.activity-remarks i {
    color: #07ACB9;
    margin-top: 2px;
    flex-shrink: 0;
}

.activities-summary {
    background: linear-gradient(135deg, #f0fdf4 0%, #ecfdf5 100%);
    border: 2px solid #10b981;
    border-radius: 12px;
    padding: 16px;
    display: flex;
    justify-content: space-around;
    align-items: center;
    margin-bottom: 15px;
    gap: 20px;
}

.summary-item {
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 14px;
    color: #065f46;
}

.summary-item i {
    color: #10b981;
    font-size: 16px;
}

.summary-item strong {
    font-weight: 600;
}

/* Responsive design for activities */
@media (max-width: 768px) {
    .activity-header {
        flex-direction: column;
        gap: 10px;
    }
    
    .activity-number {
        align-self: flex-start;
    }
    
    .activity-meta {
        flex-direction: column;
        gap: 8px;
    }
    
    .activities-summary {
        flex-direction: column;
        gap: 12px;
        text-align: center;
    }
}

/* Animation for when activities load */
@keyframes slideInUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.activity-item {
    animation: slideInUp 0.3s ease-out;
}

.activity-item:nth-child(2) { animation-delay: 0.1s; }
.activity-item:nth-child(3) { animation-delay: 0.2s; }
.activity-item:nth-child(4) { animation-delay: 0.3s; }
.activity-item:nth-child(5) { animation-delay: 0.4s; }
/* Custom Schedule Notice */
/* Add after line 1200 in your CSS */
.custom-schedule-notice {
    background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
    border: 2px solid #0ea5e9;
    border-radius: 12px;
    padding: 16px;
    margin-top: 15px;
    display: none; /* Hidden by default */
}

.custom-schedule-notice.show {
    display: block;
}

.date-helper.custom {
    color: #0ea5e9;
    font-weight: 500;
}

.custom-schedule-notice .custom-note {
    display: flex;
    align-items: flex-start;
    gap: 12px;
    color: #0c4a6e;
    font-size: 14px;
    line-height: 1.5;
}

.custom-schedule-notice .custom-note i {
    color: #0ea5e9;
    font-size: 16px;
    margin-top: 2px;
    flex-shrink: 0;
}

.custom-schedule-notice .custom-note strong {
    color: #0c4a6e;
    font-weight: 600;
}

/* Enhanced date field styling for custom schedule */
.date-field.custom-enabled input {
    border-color: #0ea5e9;
    background: linear-gradient(135deg, #f0f9ff 0%, #ffffff 100%);
}

.date-field.custom-enabled input:focus {
    border-color: #0ea5e9;
    box-shadow: 0 0 0 3px rgba(14, 165, 233, 0.1);
}

/* Submit modal button*/
.btn-submit {
    background: linear-gradient(135deg, #124A5C 0%, #07ACB9 100%);
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 8px;
    min-width: 120px;
    justify-content: center;
    box-shadow: 0 4px 12px rgba(18, 74, 92, 0.3);
}

.btn-submit:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(18, 74, 92, 0.4);
}

.btn-submit:disabled {
    background: #94a3b8;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
    opacity: 0.6;
}


/* Ongoing Required Courses styling */
.course-list-item.ongoing-required {
    border-left: 4px solid #dc2626;
    background-color: #fef2f2;
    border: 2px solid #fecaca;
}

.course-list-item.ongoing-required:hover {
    border-color: #dc2626;
    background-color: #fef2f2;
    box-shadow: 0 4px 12px rgba(220, 38, 38, 0.15);
}

.course-list-item.ongoing-required .course-list-title {
    color: #991b1b;
}

/* Enhanced required badge styling */
.course-list-badge.required {
    background-color: #fecaca;
    color: #dc2626;
    border: 1px solid #dc2626;
    font-weight: 600;
    animation: pulseRequired 2s infinite;
}

@keyframes pulseRequired {
    0%, 100% { 
        background-color: #fecaca; 
        transform: scale(1); 
    }
    50% { 
        background-color: #fca5a5; 
        transform: scale(1.02); 
    }
}
/* Row 3 - Ongoing Required Courses (Full width) - UPDATED */
.progress-category.row-3 {
    background: linear-gradient(135deg, #fef2f2 0%, #fef3c7 100%);
    border: 2px solid #dc2626;
    border-radius: 12px;
    padding: 25px;
    text-align: center;
    min-height: 140px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    transition: all 0.3s ease;
    cursor: pointer;
    position: relative;
    grid-column: span 2; /* Takes full width */
    --accent-color: #dc2626;
}

.progress-category.row-3 .count {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 10px;
    color: var(--accent-color);
    line-height: 1;
}

.progress-category.row-3 h3 {
    margin: 0 0 12px 0;
    font-size: 1.2rem;
    color: #334155;
    font-weight: 600;
}

.progress-category.row-3 p {
    margin: 0;
    font-size: 0.9rem;
    color: #64748b;
    line-height: 1.4;
}

.progress-category.ongoing-required {
    --accent-color: #dc2626;
    --accent-color-dark: #b91c1c;
    border-color: #dc2626;
}

.progress-category.ongoing-required:hover {
    border-color: var(--accent-color);
    transform: translateY(-3px);
    box-shadow: 0 6px 20px rgba(220, 38, 38, 0.2);
}

    </style>
</head>
<body>
    <%- include('../../../partials/employee_partials') %>
    
    <!-- Main content area -->
    <div class="main-content">
       <div class="dashboard-header">
            <h2>Trainings</h2>
            <p>Access your training programs, track your learning progress, and manage your professional development certifications.</p>
        </div>

        <!-- Action Required Alert -->
        <!-- <div class="action-required">
            <p class="action-required-text">
                <span class="action-required-highlight">Action Required:</span> 
                [SETTING OF 2025 MID-YEAR/FINAL YEAR TRAININGS] Please set the Mid-Year/Final-Year Individual Development Plan (IDP) in the Records and Performance Tracker before adding a new entry.
            </p>
        </div> -->
<div class="tabs-container">
            <ul class="tabs-nav">
                <li><button class="tab-button active" data-tab="progress-tab">
                    <i class="fas fa-chart-line"></i> Training Progress
                </button></li>
                <li><button class="tab-button" data-tab="courses-tab">
                    <i class="fas fa-graduation-cap"></i> All Courses
                </button></li>
                <li><button class="tab-button" data-tab="certificates-tab">
                    <i class="fas fa-certificate"></i> Certificates
                </button></li>
            </ul>

             <div class="tab-contents">
              <!-- Training Progress Tab -->
                <div id="progress-tab" class="tab-content active">
                    <div class="card">
                        <div class="card-header">
                            <h3>Training Progress Overview</h3>
                            <div class="view-toggle">
                                <button class="view-btn active" id="listViewBtn">List View</button>
                                <button class="view-btn" id="calendarViewBtn">Calendar View</button>
                            </div>
                        </div>
                        <p style="margin-bottom: 30px;">Track your training progress across different categories. Click on a category to filter your training courses below.</p>
                      
                        <div class="progress-categories" id="progressCategories">
                            <!-- This will be populated by JavaScript -->
                            <div class="loading-state">
                                <i class="fas fa-spinner fa-spin loading-spinner"></i>
                                Loading progress overview...
                            </div>
                        </div>

                        <!-- List View Container -->
                        <div class="list-container" id="listContainer">
                            <div id="trainingSections">
                                <div class="loading-state">
                                    <i class="fas fa-spinner fa-spin loading-spinner"></i>
                                    Loading your training courses...
                                </div>
                            </div>
                        </div>

                        <!-- Calendar View Container -->
                        <div class="calendar-container" id="calendarContainer">
                            <div class="calendar-header">
                                <div class="calendar-navigation">
                                    <button class="nav-btn" id="prevMonth">
                                        <i class="fas fa-chevron-left"></i>
                                    </button>
                                    <div class="month-year" id="monthYear">
                                        January 2024
                                    </div>
                                    <button class="nav-btn" id="nextMonth">
                                        <i class="fas fa-chevron-right"></i>
                                    </button>
                                </div>
                               <div class="calendar-legend">
    <div class="legend-item">
        <div class="legend-color not-started"></div>
        <span>Not Started</span>
    </div>
    <div class="legend-item">
        <div class="legend-color in-progress"></div>
        <span>In Progress</span>
    </div>
    <div class="legend-item">
        <div class="legend-color completed"></div>
        <span>Completed</span>
    </div>
    <div class="legend-item">
        <div class="legend-color overdue"></div>
        <span>Overdue</span>
    </div>
</div>
                            </div>
                            <div class="calendar-grid" id="calendarGrid">
                                <!-- Calendar will be generated here -->
                            </div>
                        </div>
                    </div>
                </div>

                <!-- All Courses Tab -->
                <div id="courses-tab" class="tab-content">
                    <div class="card">
                        <div class="card-header">
                            <h3>Manage Training Courses</h3>
                            <div class="courses-header-actions">
                                <button class="btn btn-primary">
                                    <i class="fas fa-plus"></i>
                                    Request New Training
                                </button>
                            </div>
                        </div>
                        <p style="margin-bottom: 20px;">Manage your assigned training courses. Click on any course to view details and update progress.</p>
                        <div id="allCoursesGrid">
                            <div class="loading-state">
                                <i class="fas fa-spinner fa-spin loading-spinner"></i>
                                Loading your training courses...
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Certificates Tab -->
                <div id="certificates-tab" class="tab-content">
                    <div class="card">
                        <div class="card-header">
                            <h3>All Certificates</h3>
                            <!-- <button class="btn btn-primary">
                                <i class="fas fa-upload"></i>
                                Upload Certificate
                            </button> -->
                        </div>
                        <p>Manage your training certificates and upload new certifications you've earned.</p>
                        
                        <div id="certificatesList">
                            <div class="loading-state">
                                <i class="fas fa-spinner fa-spin loading-spinner"></i>
                                Loading certificates...
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

<!-- Training Request Modal -->
<div class="modal-overlay" id="trainingRequestModal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 class="modal-title">Request New Training</h2>
            <button class="modal-close" onclick="closeTrainingRequestModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        
        <form id="trainingRequestForm">
            <!-- Basic Training Information -->
            <div class="form-section">
                <div class="section-header">
                    <h3><i class="fas fa-graduation-cap"></i> Training Information</h3>
                </div>
                
                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-book"></i>
                        Training Name
                    </label>
                    <input type="text" class="form-input" id="trainingName" name="trainingName" placeholder="Enter training name" required>
                </div>

                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-align-left"></i>
                        Training Description
                    </label>
                    <textarea class="form-input" id="trainingDesc" name="trainingDesc" rows="3" placeholder="Describe the training objectives and content" required></textarea>
                </div>

                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-peso-sign"></i>
                        Cost (PHP)
                    </label>
                    <input type="number" class="form-input" id="cost" name="cost" step="0.01" min="0" placeholder="0.00" required>
                </div>
            </div>

            <!-- IDP Selection -->
            <div class="form-section">
                <div class="section-header">
                    <h3><i class="fas fa-calendar-alt"></i> Individual Development Plan (IDP)</h3>
                </div>
                
                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-calendar"></i>
                        IDP Period
                    </label>
                    <div class="dropdown-container" id="idpDropdown">
                        <input 
                            type="text" 
                            class="dropdown-input" 
                            id="idpPeriodInput" 
                            placeholder="Select IDP period..."
                            readonly
                            required
                        >
                        <i class="fas fa-chevron-down dropdown-icon"></i>
                        <div class="dropdown-list" id="idpDropdownList">
                            <div class="loading">Loading IDP periods...</div>
                        </div>
                    </div>
                    <input type="hidden" id="selectedIdpId" name="selectedIdpId">
                    <input type="hidden" id="selectedIdpType" name="selectedIdpType">
                </div>

                <!-- Training Categories -->
                <div class="training-categories-section" id="trainingCategoriesSection" style="display: none;">
                    <div class="section-header">
                        <h4><i class="fas fa-tags"></i> Training Categories</h4>
                        <button type="button" class="btn-secondary" id="viewIdpDataBtn" style="display: none;">
                            <i class="fas fa-eye"></i> View IDP Data
                        </button>
                    </div>
                    <div class="categories-container" id="categoriesContainer">
                        <div class="empty-state">Select an IDP period to view training categories</div>
                    </div>
                </div>
            </div>

            <!-- Training Arrangement -->
            <div class="form-section">
                <div class="section-header">
                    <h3><i class="fas fa-laptop"></i> Training Arrangement</h3>
                </div>
                
                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-globe"></i>
                        Training Mode
                    </label>
                    <div class="dropdown-container" id="arrangementDropdown">
                        <input 
                            type="text" 
                            class="dropdown-input" 
                            id="arrangementInput" 
                            placeholder="Select training mode..."
                            readonly
                            required
                        >
                        <i class="fas fa-chevron-down dropdown-icon"></i>
                        <div class="dropdown-list" id="arrangementDropdownList">
                            <div class="dropdown-item" onclick="selectArrangement(true, 'Online')">
                                <div class="dropdown-item-title">
                                    <i class="fas fa-laptop"></i> Online Training
                                </div>
                                <div class="dropdown-item-meta">Conducted remotely via digital platforms</div>
                            </div>
                            <div class="dropdown-item" onclick="selectArrangement(false, 'Onsite')">
                                <div class="dropdown-item-title">
                                    <i class="fas fa-map-marker-alt"></i> Onsite Training
                                </div>
                                <div class="dropdown-item-meta">Conducted at physical location</div>
                            </div>
                        </div>
                    </div>
                    <input type="hidden" id="isOnlineArrangement" name="isOnlineArrangement">
                </div>

                <!-- Onsite Location Fields -->
                <div class="onsite-fields" id="onsiteFields" style="display: none;">
                    <div class="form-group">
                        <label class="form-label">
                            <i class="fas fa-map-marker-alt"></i>
                            Address
                        </label>
                        <input type="text" class="form-input" id="address" name="address" placeholder="Enter training venue address">
                    </div>

                    <div class="form-group">
                        <label class="form-label">
                            <i class="fas fa-globe-asia"></i>
                            Country
                        </label>
                        <input type="text" class="form-input" id="country" name="country" placeholder="Enter country" value="Philippines">
                    </div>
                </div>
            </div>

            <!-- Learning Objectives & Skills -->
            <div class="form-section">
                <div class="section-header">
                    <h3><i class="fas fa-target"></i> Learning Focus</h3>
                </div>
                
                <div class="focus-areas-grid">
                    <div class="focus-area-column">
                        <div class="focus-area-header">
                            <i class="fas fa-bullseye"></i>
                            <span>Objective</span>
                        </div>
                        <div class="form-group">
                            <div class="dropdown-container" id="objectiveDropdown">
                                <input 
                                    type="text" 
                                    class="dropdown-input" 
                                    id="objectiveInput" 
                                    placeholder="Select learning objective..."
                                    readonly
                                >
                                <i class="fas fa-chevron-down dropdown-icon"></i>
                                <div class="dropdown-list" id="objectiveDropdownList">
                                    <div class="loading">Loading objectives...</div>
                                </div>
                            </div>
                            <input type="hidden" id="selectedObjectiveId" name="objectiveId">
                        </div>
                    </div>
                    
                    <div class="focus-area-column">
                        <div class="focus-area-header">
                            <i class="fas fa-cogs"></i>
                            <span>Required Skill</span>
                        </div>
                        <div class="form-group">
                            <div class="dropdown-container" id="skillDropdown">
                                <input 
                                    type="text" 
                                    class="dropdown-input" 
                                    id="skillInput" 
                                    placeholder="Select required skill..."
                                    readonly
                                >
                                <i class="fas fa-chevron-down dropdown-icon"></i>
                                <div class="dropdown-list" id="skillDropdownList">
                                    <div class="loading">Loading skills...</div>
                                </div>
                            </div>
                            <input type="hidden" id="selectedSkillId" name="jobReqSkillId">
                        </div>
                    </div>
                </div>
            </div>

            <!-- Training Activities -->
            <div class="form-section">
                <div class="section-header">
                    <h3><i class="fas fa-tasks"></i> Training Activities</h3>
                    <button type="button" class="btn-secondary" id="addActivityBtn">
                        <i class="fas fa-plus"></i> Add Activity
                    </button>
                </div>
                
                <div class="activities-container" id="activitiesContainer">
                    <!-- Activities will be added here -->
                </div>
                
                <div class="total-duration-display" id="totalDurationDisplay">
                    <strong>Total Training Duration: <span id="totalDurationValue">0</span> hours</strong>
                </div>
            </div>

            <!-- Certification -->
            <div class="form-section">
                <div class="section-header">
                    <h3><i class="fas fa-certificate"></i> Training Certificate</h3>
                </div>
                
                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-award"></i>
                        Certificate Title
                    </label>
                    <input type="text" class="form-input" id="trainingCertTitle" name="trainingCertTitle" placeholder="Enter certificate title" required>
                </div>

                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-file-alt"></i>
                        Certificate Description
                    </label>
                    <textarea class="form-input" id="trainingCertDesc" name="trainingCertDesc" rows="2" placeholder="Describe the certificate requirements and criteria" required></textarea>
                </div>
            </div>

            <!-- Form Actions -->
            <div class="modal-actions">
                <button type="button" class="btn-secondary" onclick="closeTrainingRequestModal()">
                    <i class="fas fa-times"></i>
                    Cancel
                </button>
                <button type="submit" class="btn-primary" id="submitTrainingRequest">
                    <i class="fas fa-paper-plane"></i>
                    Submit Request
                </button>
            </div>
        </form>
    </div>
</div>

<!-- IDP Data View Modal -->
<div class="modal-overlay" id="idpDataModal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 class="modal-title">IDP Data Review</h2>
            <button class="modal-close" onclick="closeIdpDataModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        
        <div class="idp-data-content" id="idpDataContent">
            <div class="loading-state">
                <i class="fas fa-spinner fa-spin"></i>
                Loading IDP data...
            </div>
        </div>
        
        <div class="modal-actions">
            <button type="button" class="btn-secondary" onclick="closeIdpDataModal()">
                <i class="fas fa-times"></i>
                Close
            </button>
        </div>
    </div>
</div>

    <!-- JavaScript for tabs and interactions -->
    <script>
        // Sample course data for filtering
        const allCourses = [
            { id: 1, title: "Leadership Development Program", status: "in-progress", type: ["online"], progress: 75, lessons: "15/20 lessons" },
            { id: 2, title: "Safety and Compliance Training", status: "in-progress", type: ["onsite", "required"], progress: 60, lessons: "5/8 modules" },
            { id: 3, title: "Technical Skills Enhancement", status: "completed", type: ["online", "required"], progress: 100, lessons: "12/12 lessons" },
            { id: 4, title: "Project Management Fundamentals", status: "overdue", type: ["online", "required"], progress: 25, lessons: "4/16 lessons" },
            { id: 5, title: "Advanced Data Analytics", status: "available", type: ["online"], progress: 0, lessons: "Not started" },
            { id: 6, title: "Communication Excellence Workshop", status: "available", type: ["onsite"], progress: 0, lessons: "Not started" },
            { id: 7, title: "Cybersecurity Awareness", status: "available", type: ["online", "required"], progress: 0, lessons: "Not started" },
            { id: 8, title: "Team Building & Collaboration", status: "available", type: ["onsite"], progress: 0, lessons: "Not started" }
        ];

        let selectedTraining = null;
        let filteredTrainings = [];
        let selectedScheduleType = null;

        let trainingProgressData = { counts: { notStarted: 0, inProgress: 0, completed: 0, overdue: 0 }, trainings: [] };
        let allCoursesData = [];
        let currentDate = new Date();
        let currentView = 'list';

        let selectedIdpData = null;


        let selectedObjective = null;
        let selectedSkill = null;
        let activityCount = 0;
        let totalDuration = 0;


        document.addEventListener('DOMContentLoaded', () => {
            // Tab functionality
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabContents = document.querySelectorAll('.tab-content');

            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    // Remove active class from all buttons and contents
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    tabContents.forEach(content => content.classList.remove('active'));

                    // Add active class to clicked button
                    button.classList.add('active');

                    // Show corresponding content
                    const tabId = button.getAttribute('data-tab');
                    document.getElementById(tabId).classList.add('active');
                });
            });

            // View toggle functionality
            document.querySelectorAll('.view-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelectorAll('.view-btn').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                });
            });

            // Progress category click to scroll to section
            document.querySelectorAll('.progress-category').forEach(category => {
                category.addEventListener('click', function() {
                    const filterType = this.getAttribute('data-filter');
                    const sectionId = filterType + '-section';
                    scrollToSection(sectionId);
                });
            });

            // Upload certificate functionality
            const uploadBtn = document.querySelector('.upload-certificate-btn');
            if (uploadBtn) {
                uploadBtn.addEventListener('click', function() {
                    // Create file input
                    const fileInput = document.createElement('input');
                    fileInput.type = 'file';
                    fileInput.accept = '.pdf,.jpg,.jpeg,.png';
                    fileInput.style.display = 'none';
                    
                    fileInput.addEventListener('change', function() {
                        if (this.files.length > 0) {
                            alert(`Certificate "${this.files[0].name}" selected for upload.`);
                            // Here you would typically handle the file upload
                        }
                    });
                    
                    document.body.appendChild(fileInput);
                    fileInput.click();
                    document.body.removeChild(fileInput);
                });
            }
        });

        

        // Filter dropdown functionality
        function toggleFilterDropdown() {
            const dropdown = document.getElementById('filter-dropdown');
            dropdown.classList.toggle('open');
        }

       document.addEventListener('click', function(event) {
    const dropdown = document.getElementById('filter-dropdown');
    if (dropdown && !dropdown.contains(event.target)) {
        dropdown.classList.remove('open');
    }
});

        // Update filters based on checkboxes
        function updateFilters() {
            const activeFilters = [];
            const checkboxes = document.querySelectorAll('#filter-dropdown input[type="checkbox"]:checked');
            
            checkboxes.forEach(checkbox => {
                activeFilters.push(checkbox.value);
            });
            
            updateActiveFiltersDisplay(activeFilters);
            filterCourses(activeFilters);
        }

        // Display active filters
        function updateActiveFiltersDisplay(filters) {
            const activeFiltersContainer = document.getElementById('active-filters');
            activeFiltersContainer.innerHTML = '';
            
            filters.forEach(filter => {
                const filterTag = document.createElement('div');
                filterTag.className = 'filter-tag';
                filterTag.innerHTML = `
                    ${filter.charAt(0).toUpperCase() + filter.slice(1)}
                    <span class="remove-filter" onclick="removeFilter('${filter}')">×</span>
                `;
                activeFiltersContainer.appendChild(filterTag);
            });
        }

        // Remove individual filter
        function removeFilter(filterToRemove) {
            const checkbox = document.getElementById(`filter-${filterToRemove}`);
            if (checkbox) {
                checkbox.checked = false;
                updateFilters();
            }
        }

        // Filter courses based on selected filters
        function filterCourses(activeFilters) {
            const courseCards = document.querySelectorAll('.course-card');
            
            courseCards.forEach(card => {
                if (activeFilters.length === 0) {
                    card.style.display = 'block';
                } else {
                    const cardTypes = card.getAttribute('data-type') || '';
                    const hasMatchingFilter = activeFilters.some(filter => 
                        cardTypes.includes(filter)
                    );
                    
                    card.style.display = hasMatchingFilter ? 'block' : 'none';
                }
            });
        }

        // Scroll to section functionality
        function scrollToSection(sectionId) {
            const section = document.getElementById(sectionId);
            if (section) {
                section.scrollIntoView({ 
                    behavior: 'smooth',
                    block: 'start'
                });
                
                // Add a subtle highlight effect
                section.style.backgroundColor = '#f0fdff';
                setTimeout(() => {
                    section.style.backgroundColor = '';
                }, 2000);
            }
        }

document.addEventListener('DOMContentLoaded', function() {
    setupTrainingRequestModal();
    initializeTrainingModal();
});

function setupTrainingRequestModal() {
    // Find and setup the request button ONLY outside modal
    const requestButtons = document.querySelectorAll('button');
    requestButtons.forEach(button => {
        const modal = document.getElementById('trainingRequestModal');
        const isInsideModal = modal && modal.contains(button);
        
        if (!isInsideModal && button.textContent.includes('Request New Training')) {
            // Remove existing handlers to prevent duplicates
            button.removeEventListener('click', openTrainingRequestModal);
            button.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                openTrainingRequestModal();
            });
        }
    });
}

// REPLACE the existing closeTrainingRequestModal function with this:
function closeTrainingRequestModal() {
    const modal = document.getElementById('trainingRequestModal');
    if (modal) {
        modal.classList.remove('show');
        setTimeout(() => {
            modal.style.display = 'none';
            resetNewModal();
        }, 300);
    }
}

// REPLACE the existing resetModal function with this:
function resetNewModal() {
    // Reset form
    document.getElementById('trainingRequestForm').reset();
    
    // Reset global variables
    selectedIdpData = null;
    selectedObjective = null;
    selectedSkill = null;
    activityCount = 0;
    totalDuration = 0;
    
    // Hide sections
    document.getElementById('trainingCategoriesSection').style.display = 'none';
    document.getElementById('onsiteFields').style.display = 'none';
    document.getElementById('viewIdpDataBtn').style.display = 'none';
    
    // Clear containers
    document.getElementById('categoriesContainer').innerHTML = '<div class="empty-state">Select an IDP period to view training categories</div>';
    document.getElementById('activitiesContainer').innerHTML = '';
    document.getElementById('totalDurationValue').textContent = '0';
    
    // Close dropdowns
    document.querySelectorAll('.dropdown-container').forEach(dropdown => {
        dropdown.classList.remove('open');
    });
    
    // Clear hidden fields
    document.getElementById('selectedIdpId').value = '';
    document.getElementById('selectedIdpType').value = '';
    document.getElementById('selectedObjectiveId').value = '';
    document.getElementById('selectedSkillId').value = '';
    document.getElementById('isOnlineArrangement').value = '';
}

function renderIdpPeriods(periods) {
    const dropdownList = document.getElementById('idpDropdownList');
    
    if (!periods || periods.length === 0) {
        dropdownList.innerHTML = '<div class="no-results"><i class="fas fa-info-circle"></i> No IDP periods found</div>';
        return;
    }

    const periodsHTML = periods.map(period => `
        <div class="dropdown-item" onclick="selectIdpPeriod('${period.id}', '${period.type}', '${period.year}')">
            <div class="dropdown-item-title">
                <i class="fas fa-calendar"></i> ${period.type} ${period.year}
            </div>
            <div class="dropdown-item-meta">
                Individual Development Plan for ${period.type.toLowerCase()} year ${period.year}
            </div>
        </div>
    `).join('');

    dropdownList.innerHTML = periodsHTML;
}

// Select IDP period and load training categories
async function selectIdpPeriod(idpId, type, year) {
    console.log('Selected IDP:', { idpId, type, year });
    
    // Update input and hidden fields
    document.getElementById('idpPeriodInput').value = `${type} ${year}`;
    document.getElementById('selectedIdpId').value = idpId;
    document.getElementById('selectedIdpType').value = type;
    
    // Close dropdown
    document.getElementById('idpDropdown').classList.remove('open');
    
    try {
        // Fetch IDP data and training categories
        const response = await fetch(`/employee/idp/${idpId}/categories?type=${type}`, {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include'
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        
        if (result.success) {
            selectedIdpData = result.data;
            displayTrainingCategories(result.data.trainingCategories || []);
            document.getElementById('trainingCategoriesSection').style.display = 'block';
            document.getElementById('viewIdpDataBtn').style.display = 'block';
        } else {
            throw new Error(result.message || 'Failed to fetch IDP data');
        }
    } catch (error) {
        console.error('Failed to load IDP data:', error);
        document.getElementById('categoriesContainer').innerHTML = 
            '<div class="empty-state" style="color: #ef4444;">Failed to load training categories</div>';
    }
}

function displayTrainingCategories(categories) {
    const container = document.getElementById('categoriesContainer');
    
    if (!categories || categories.length === 0) {
        container.innerHTML = '<div class="empty-state">No training categories defined for this IDP</div>';
        return;
    }
    
    const categoriesHTML = categories.map(category => `
        <div class="category-tag">
            <i class="fas fa-tag"></i>
            ${category}
        </div>
    `).join('');
    
    container.innerHTML = categoriesHTML;
}

// View IDP data modal
function viewIdpData() {
    if (!selectedIdpData) {
        alert('No IDP data selected');
        return;
    }
    
    const modal = document.getElementById('idpDataModal');
    const content = document.getElementById('idpDataContent');
    
    // Build IDP data display
    let idpHTML = '';
    
    if (selectedIdpData.profStrengths) {
        idpHTML += `
            <div class="idp-section">
                <h4><i class="fas fa-thumbs-up"></i> Professional Strengths</h4>
                <div class="idp-text">${selectedIdpData.profStrengths}</div>
            </div>
        `;
    }
    
    if (selectedIdpData.profAreasForDevelopment) {
        idpHTML += `
            <div class="idp-section">
                <h4><i class="fas fa-chart-line"></i> Areas for Development</h4>
                <div class="idp-text">${selectedIdpData.profAreasForDevelopment}</div>
            </div>
        `;
    }
    
    if (selectedIdpData.profActionsToTake) {
        idpHTML += `
            <div class="idp-section">
                <h4><i class="fas fa-tasks"></i> Actions to Take</h4>
                <div class="idp-text">${selectedIdpData.profActionsToTake}</div>
            </div>
        `;
    }
    
    if (selectedIdpData.leaderStrengths) {
        idpHTML += `
            <div class="idp-section">
                <h4><i class="fas fa-user-tie"></i> Leadership Strengths</h4>
                <div class="idp-text">${selectedIdpData.leaderStrengths}</div>
            </div>
        `;
    }
    
    if (selectedIdpData.leaderAreasForDevelopment) {
        idpHTML += `
            <div class="idp-section">
                <h4><i class="fas fa-users"></i> Leadership Development Areas</h4>
                <div class="idp-text">${selectedIdpData.leaderAreasForDevelopment}</div>
            </div>
        `;
    }
    
    if (selectedIdpData.nextRoleShortTerm || selectedIdpData.nextRoleLongTerm) {
        idpHTML += `
            <div class="idp-section">
                <h4><i class="fas fa-road"></i> Career Goals</h4>
                ${selectedIdpData.nextRoleShortTerm ? `<div class="idp-text"><strong>Short-term:</strong> ${selectedIdpData.nextRoleShortTerm}</div>` : ''}
                ${selectedIdpData.nextRoleLongTerm ? `<div class="idp-text"><strong>Long-term:</strong> ${selectedIdpData.nextRoleLongTerm}</div>` : ''}
            </div>
        `;
    }
    
    if (selectedIdpData.trainingRemarks) {
        idpHTML += `
            <div class="idp-section">
                <h4><i class="fas fa-comment"></i> Training Remarks</h4>
                <div class="idp-text">${selectedIdpData.trainingRemarks}</div>
            </div>
        `;
    }
    
    content.innerHTML = idpHTML || '<div class="empty-state">No additional IDP data available</div>';
    modal.classList.add('show');
    modal.style.display = 'flex';
}

function closeIdpDataModal() {
    const modal = document.getElementById('idpDataModal');
    if (modal) {
        modal.classList.remove('show');
        setTimeout(() => {
            modal.style.display = 'none';
        }, 300);
    }
}

// Training arrangement selection
function selectArrangement(isOnline, displayText) {
    document.getElementById('arrangementInput').value = displayText;
    document.getElementById('isOnlineArrangement').value = isOnline;
    document.getElementById('arrangementDropdown').classList.remove('open');
    
    // Show/hide onsite fields
    const onsiteFields = document.getElementById('onsiteFields');
    if (isOnline) {
        onsiteFields.style.display = 'none';
        // Clear onsite field requirements
        document.getElementById('address').removeAttribute('required');
        document.getElementById('country').removeAttribute('required');
    } else {
        onsiteFields.style.display = 'block';
        // Add onsite field requirements
        document.getElementById('address').setAttribute('required', 'required');
        document.getElementById('country').setAttribute('required', 'required');
    }
}

// Load objectives
async function loadObjectives() {
    try {
        const response = await fetch('/employee/objectives', {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include'
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        
        if (result.success) {
            renderObjectives(result.data || []);
        } else {
            throw new Error(result.message || 'Failed to fetch objectives');
        }
    } catch (error) {
        console.error('Failed to load objectives:', error);
        document.getElementById('objectiveDropdownList').innerHTML = 
            '<div class="no-results"><i class="fas fa-exclamation-triangle"></i> Failed to load objectives</div>';
    }
}

function renderObjectives(objectives) {
    const dropdownList = document.getElementById('objectiveDropdownList');
    
    if (!objectives || objectives.length === 0) {
        dropdownList.innerHTML = '<div class="no-results"><i class="fas fa-info-circle"></i> No objectives found</div>';
        return;
    }

    const objectivesHTML = objectives.map(objective => `
        <div class="dropdown-item" onclick="selectObjective(${objective.objectiveId}, '${objective.objectiveDescrpt.replace(/'/g, "\\'")}')">
            <div class="dropdown-item-title">
                <i class="fas fa-bullseye"></i> ${objective.objectiveDescrpt}
            </div>
            <div class="dropdown-item-meta">
                ${objective.objectiveKPI ? `KPI: ${objective.objectiveKPI}` : ''}
                ${objective.objectiveUOM ? ` | UOM: ${objective.objectiveUOM}` : ''}
            </div>
        </div>
    `).join('');

    dropdownList.innerHTML = objectivesHTML;
}

function selectObjective(objectiveId, description) {
    selectedObjective = { objectiveId, description };
    document.getElementById('objectiveInput').value = description;
    document.getElementById('selectedObjectiveId').value = objectiveId;
    document.getElementById('objectiveDropdown').classList.remove('open');
}

// Load skills
async function loadSkills() {
    try {
        const response = await fetch('/employee/skills', {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include'
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        
        if (result.success) {
            renderSkills(result.data || []);
        } else {
            throw new Error(result.message || 'Failed to fetch skills');
        }
    } catch (error) {
        console.error('Failed to load skills:', error);
        document.getElementById('skillDropdownList').innerHTML = 
            '<div class="no-results"><i class="fas fa-exclamation-triangle"></i> Failed to load skills</div>';
    }
}

function renderSkills(skills) {
    const dropdownList = document.getElementById('skillDropdownList');
    
    if (!skills || skills.length === 0) {
        dropdownList.innerHTML = '<div class="no-results"><i class="fas fa-info-circle"></i> No skills found</div>';
        return;
    }

    const skillsHTML = skills.map(skill => `
        <div class="dropdown-item" onclick="selectSkill(${skill.jobReqSkillId}, '${skill.jobReqSkillName.replace(/'/g, "\\'")}', '${skill.jobReqSkillType.replace(/'/g, "\\'")}')">
            <div class="dropdown-item-title">
                <i class="fas fa-cogs"></i> ${skill.jobReqSkillName}
            </div>
            <div class="dropdown-item-meta">
                Type: ${skill.jobReqSkillType}
            </div>
        </div>
    `).join('');

    dropdownList.innerHTML = skillsHTML;
}

function selectSkill(skillId, skillName, skillType) {
    selectedSkill = { skillId, skillName, skillType };
    document.getElementById('skillInput').value = `${skillName} (${skillType})`;
    document.getElementById('selectedSkillId').value = skillId;
    document.getElementById('skillDropdown').classList.remove('open');
}

// Activity management
function addActivity() {
    activityCount++;
    const activityHTML = `
        <div class="activity-item" id="activity-${activityCount}">
            <div class="activity-header">
                <div class="activity-number">${activityCount}</div>
                <button type="button" class="remove-activity" onclick="removeActivity(${activityCount})">
                    <i class="fas fa-trash"></i> Remove
                </button>
            </div>
            <div class="activity-fields">
                <div>
                    <label class="form-label">Activity Name</label>
                    <input type="text" class="form-input" name="activityName[]" placeholder="Enter activity name" required>
                </div>
                <div>
                    <label class="form-label">Activity Type</label>
                    <input type="text" class="form-input" name="activityType[]" placeholder="e.g., Lecture, Workshop" required>
                </div>
                <div>
                    <label class="form-label">Duration (hours)</label>
                    <input type="number" class="form-input duration-input" name="estActivityDuration[]" 
                           step="0.5" min="0.5" placeholder="0.5" required onchange="updateTotalDuration()">
                </div>
            </div>
            <div class="activity-remarks">
                <label class="form-label">Remarks (optional)</label>
                <textarea class="form-input" name="activityRemarks[]" rows="2" placeholder="Additional notes about this activity"></textarea>
            </div>
        </div>
    `;
    
    document.getElementById('activitiesContainer').insertAdjacentHTML('beforeend', activityHTML);
    updateTotalDuration();
}

function removeActivity(activityNumber) {
    const activityElement = document.getElementById(`activity-${activityNumber}`);
    if (activityElement) {
        activityElement.remove();
        updateTotalDuration();
        renumberActivities();
    }
}

function renumberActivities() {
    const activities = document.querySelectorAll('.activity-item');
    activities.forEach((activity, index) => {
        const number = index + 1;
        activity.querySelector('.activity-number').textContent = number;
    });
}



function updateTotalDuration() {
    const durationInputs = document.querySelectorAll('.duration-input');
    totalDuration = 0;
    
    durationInputs.forEach(input => {
        const value = parseFloat(input.value) || 0;
        totalDuration += value;
    });
    
    document.getElementById('totalDurationValue').textContent = totalDuration.toFixed(1);
}

// Dropdown toggle functions
function toggleDropdown(dropdownId) {
    const dropdown = document.getElementById(dropdownId);
    const isOpen = dropdown.classList.contains('open');
    
    // Close all dropdowns first
    document.querySelectorAll('.dropdown-container').forEach(d => {
        d.classList.remove('open');
    });
    
    // Toggle the clicked dropdown
    if (!isOpen) {
        dropdown.classList.add('open');
    }
}

// Form submission handler - REPLACE existing handleFormSubmit with this:
async function handleNewFormSubmit(e) {
    e.preventDefault();
    
    console.log('Submitting new training request...');
    
    // Validate required fields
    if (!validateNewForm()) {
        alert('Please fill in all required fields.');
        return;
    }
    
    // Collect form data
    const formData = {
        trainingName: document.getElementById('trainingName').value,
        trainingDesc: document.getElementById('trainingDesc').value,
        cost: parseFloat(document.getElementById('cost').value) || 0,
        midyearidpId: document.getElementById('selectedIdpType').value === 'Midyear' ? 
                      parseInt(document.getElementById('selectedIdpId').value) : null,
        finalyearidpId: document.getElementById('selectedIdpType').value === 'Final' ? 
                        parseInt(document.getElementById('selectedIdpId').value) : null,
        isOnlineArrangement: document.getElementById('isOnlineArrangement').value === 'true',
        address: document.getElementById('address').value || null,
        country: document.getElementById('country').value || null,
        objectiveId: parseInt(document.getElementById('selectedObjectiveId').value) || null,
        jobReqSkillId: parseInt(document.getElementById('selectedSkillId').value) || null,
        totalDuration: totalDuration,
        trainingCertTitle: document.getElementById('trainingCertTitle').value,
        trainingCertDesc: document.getElementById('trainingCertDesc').value,
        activities: collectActivities()
    };
    
    console.log('Form data:', formData);
    
    const submitButton = document.getElementById('submitTrainingRequest');
    const originalText = submitButton.innerHTML;
    
    // Disable button and show loading
    submitButton.disabled = true;
    submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Submitting...';
    
    try {
        const response = await fetch('/employee/training-requests/new', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify(formData)
        });
        
        const result = await response.json();
        
        if (response.ok && result.success) {
            alert(`✅ Training request submitted successfully!\n\nTraining: ${formData.trainingName}\nTotal Duration: ${formData.totalDuration} hours\nActivities: ${formData.activities.length}\n\nYour request has been sent for approval.`);
            
            closeTrainingRequestModal();
            
            // Refresh the data
            setTimeout(() => {
                if (typeof loadTrainingProgress === 'function') loadTrainingProgress();
                if (typeof loadAllCourses === 'function') loadAllCourses();
            }, 1000);
            
        } else {
            throw new Error(result.message || 'Failed to submit training request');
        }
        
    } catch (error) {
        console.error('Error submitting training request:', error);
        alert('❌ Failed to submit training request: ' + (error.message || 'Please try again later.'));
        
        // Re-enable button
        submitButton.disabled = false;
        submitButton.innerHTML = originalText;
    }
}

// ADD these event listeners to your existing DOMContentLoaded section:
document.addEventListener('DOMContentLoaded', function() {
    // Existing code...
    
    // NEW: Add activity button
    const addActivityBtn = document.getElementById('addActivityBtn');
    if (addActivityBtn) {
        addActivityBtn.addEventListener('click', addActivity);
    }
    
    // NEW: View IDP data button
    const viewIdpDataBtn = document.getElementById('viewIdpDataBtn');
    if (viewIdpDataBtn) {
        viewIdpDataBtn.addEventListener('click', viewIdpData);
    }
    
    // NEW: Dropdown toggles
    const idpPeriodInput = document.getElementById('idpPeriodInput');
    if (idpPeriodInput) {
        idpPeriodInput.addEventListener('click', () => toggleDropdown('idpDropdown'));
    }
    
    const arrangementInput = document.getElementById('arrangementInput');
    if (arrangementInput) {
        arrangementInput.addEventListener('click', () => toggleDropdown('arrangementDropdown'));
    }
    
    const objectiveInput = document.getElementById('objectiveInput');
    if (objectiveInput) {
        objectiveInput.addEventListener('click', () => toggleDropdown('objectiveDropdown'));
    }
    
    const skillInput = document.getElementById('skillInput');
    if (skillInput) {
        skillInput.addEventListener('click', () => toggleDropdown('skillDropdown'));
    }
    
    // NEW: Form submission - replace existing form handler
    const newForm = document.getElementById('trainingRequestForm');
    if (newForm) {
        // Remove old handlers
        newForm.removeEventListener('submit', handleFormSubmit);
        // Add new handler
        newForm.addEventListener('submit', handleNewFormSubmit);
    }
});



function validateNewForm() {
    const requiredFields = [
        'trainingName',
        'trainingDesc', 
        'cost',
        'selectedIdpId',
        'isOnlineArrangement',
        'trainingCertTitle',
        'trainingCertDesc'
    ];
    
    for (const fieldId of requiredFields) {
        const field = document.getElementById(fieldId);
        if (!field || !field.value.trim()) {
            console.log(`Validation failed for field: ${fieldId}`);
            return false;
        }
    }
    
    // Check if arrangement is onsite and address/country are required
    const isOnline = document.getElementById('isOnlineArrangement').value === 'true';
    if (!isOnline) {
        const address = document.getElementById('address').value.trim();
        const country = document.getElementById('country').value.trim();
        if (!address || !country) {
            console.log('Validation failed: Onsite training requires address and country');
            return false;
        }
    }
    
    // Check if at least one activity is added
    const activities = document.querySelectorAll('.activity-item');
    if (activities.length === 0) {
        console.log('Validation failed: At least one activity is required');
        alert('Please add at least one training activity.');
        return false;
    }
    
    // Validate activity fields
    for (const activity of activities) {
        const nameInput = activity.querySelector('input[name="activityName[]"]');
        const typeInput = activity.querySelector('input[name="activityType[]"]');
        const durationInput = activity.querySelector('input[name="estActivityDuration[]"]');
        
        if (!nameInput.value.trim() || !typeInput.value.trim() || !durationInput.value || parseFloat(durationInput.value) <= 0) {
            console.log('Validation failed: Activity fields incomplete');
            alert('Please complete all activity fields with valid values.');
            return false;
        }
    }
    
    return true;
}

function collectActivities() {
    const activities = [];
    const activityItems = document.querySelectorAll('.activity-item');
    
    activityItems.forEach(item => {
        const name = item.querySelector('input[name="activityName[]"]').value.trim();
        const type = item.querySelector('input[name="activityType[]"]').value.trim();
        const duration = parseFloat(item.querySelector('input[name="estActivityDuration[]"]').value) || 0;
        const remarks = item.querySelector('textarea[name="activityRemarks[]"]').value.trim();
        
        if (name && type && duration > 0) {
            activities.push({
                activityName: name,
                activityType: type,
                estActivityDuration: duration,
                activityRemarks: remarks || null
            });
        }
    });
    
    return activities;
}


// Make functions globally available
window.openTrainingRequestModal = openTrainingRequestModal;
window.closeTrainingRequestModal = closeTrainingRequestModal;
window.selectIdpPeriod = selectIdpPeriod;
window.selectArrangement = selectArrangement;
window.selectObjective = selectObjective;
window.selectSkill = selectSkill;
window.addActivity = addActivity;
window.removeActivity = removeActivity;
window.viewIdpData = viewIdpData;
window.closeIdpDataModal = closeIdpDataModal;
window.updateTotalDuration = updateTotalDuration;

async function testTrainingDetailsAPI(trainingId) {
    console.log(`Testing API for training ID: ${trainingId}`);
    
    try {
        const response = await fetch(`/employee/trainings/${trainingId}/details`, {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include'
        });
        
        console.log('Response status:', response.status);
        console.log('Response headers:', response.headers);
        
        const text = await response.text();
        console.log('Raw response:', text);
        
        try {
            const json = JSON.parse(text);
            console.log('Parsed JSON:', json);
            return json;
        } catch (parseError) {
            console.error('JSON parse error:', parseError);
            console.log('Response was not valid JSON');
            return null;
        }
        
    } catch (error) {
        console.error('Fetch error:', error);
        return null;
    }
}

// Add to global scope for debugging
window.testTrainingDetailsAPI = testTrainingDetailsAPI;

// 4. Make sure the modal HTML structure is correct
function checkModalStructure() {
    const modal = document.getElementById('trainingRequestModal');
    if (!modal) {
        console.error('Training request modal not found in DOM!');
        return false;
    }
    
    const form = document.getElementById('trainingRequestForm');
    if (!form) {
        console.error('Training request form not found in modal!');
        return false;
    }
    
    console.log('Modal structure is correct');
    return true;
}


// 5. Enhanced modal CSS to ensure it shows properly
function addModalCSS() {
    const style = document.createElement('style');
    style.textContent = `
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(4px);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 10000;
            padding: 20px;
            opacity: 0;
            transition: all 0.3s ease;
        }

        .modal-overlay.show {
            display: flex !important;
            opacity: 1;
        }

        .modal-content {
            background: white;
            border-radius: 20px;
            width: 100%;
            max-width: 800px;
            max-height: 95vh;
            overflow-y: auto;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
            position: relative;
            transform: translateY(-20px);
            transition: transform 0.3s ease;
        }

        .modal-overlay.show .modal-content {
            transform: translateY(0);
        }
    `;
    document.head.appendChild(style);
}

// 7. Alternative button setup (if the first one doesn't work)
function setupAlternativeButtonHandler() {
    // Wait for DOM to be ready
    setTimeout(() => {
        // Look for the button more specifically
        const buttons = document.querySelectorAll('button');
        buttons.forEach(button => {
            const text = button.textContent.trim();
            if (text.includes('Request New Training') || text.includes('Request Training')) {
                console.log('Found button:', text);
                button.onclick = function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log('Button clicked via onclick');
                    openTrainingRequestModal();
                };
            }
        });
        
        // Also try by class name
        const btnPrimary = document.querySelector('.btn-primary, .add-request-btn');
        if (btnPrimary) {
            btnPrimary.onclick = function(e) {
                e.preventDefault();
                e.stopPropagation();
                console.log('Primary button clicked');
                openTrainingRequestModal();
            };
        }
    }, 1000);
}

// 8. Initialize everything
function initializeModalFix() {
    console.log('Initializing modal fix...');
    
    // Add CSS if needed
    addModalCSS();
    
    // Check modal structure
    checkModalStructure();
    
    // Set up button handlers
    setupAlternativeButtonHandler();
    
    // Run debug
    debugModal();
    
    // Test modal functionality
    setTimeout(() => {
        console.log('Testing modal...');
        // You can uncomment this line to test if modal opens
        // openTrainingRequestModal();
    }, 2000);
}

function debugModal() {
    console.log('=== MODAL DEBUG INFO ===');
    
    // Check if modal exists
    const modal = document.getElementById('trainingRequestModal');
    console.log('Modal element found:', !!modal);
    
    if (modal) {
        console.log('Modal classes:', modal.className);
        console.log('Modal style display:', modal.style.display);
        console.log('Modal computed display:', window.getComputedStyle(modal).display);
        console.log('Modal z-index:', window.getComputedStyle(modal).zIndex);
    }
    
    // Check if button exists
    const button = document.querySelector('.btn.btn-primary');
    console.log('Request button found:', !!button);
    
    if (button) {
        console.log('Button text:', button.textContent);
        console.log('Button click handlers:', button.onclick);
    }
    
    // Check if filteredTrainings is defined
    console.log('filteredTrainings defined:', typeof filteredTrainings !== 'undefined');
    console.log('filteredTrainings length:', filteredTrainings ? filteredTrainings.length : 'undefined');
}

// 9. Call the initialization
document.addEventListener('DOMContentLoaded', initializeModalFix);

// 10. Global function to manually open modal (for testing)
window.testModal = function() {
    console.log('Manual modal test...');
    openTrainingRequestModal();
};
// Enhanced event delegation (catches dynamically added buttons)
document.addEventListener('click', function(e) {
    const target = e.target;
    
    // Add null checks to prevent errors
    if (!target) return;
    
    // Check if we're inside the modal
    const modal = document.getElementById('trainingRequestModal');
    const isInsideModal = modal && modal.contains(target);
    
    // If inside modal, don't trigger the training request modal opening
    if (isInsideModal) {
        return;
    }
    
    // Check if clicked element is the request training button (only outside modal)
    const targetText = target.textContent || '';
    const isRequestButton = target.matches && (
        target.matches('.btn-primary') || 
        target.matches('.add-request-btn') ||
        targetText.includes('Request New Training')
    );
    
    const hasRequestButtonParent = target.closest && (
        target.closest('.btn-primary') || 
        target.closest('.add-request-btn')
    );
    
    // Only open modal if it's a request button and we're not already in modal
    if ((isRequestButton || hasRequestButtonParent) && !isInsideModal) {
        e.preventDefault();
        e.stopPropagation();
        console.log('Button clicked via event delegation');
        openTrainingRequestModal();
    }
});

// Initialize the application
        document.addEventListener('DOMContentLoaded', async () => {
            initializeTabs();
            initializeViewToggle();
            initializeCalendarNavigation();
            
            // Load initial data
            await Promise.all([
                loadTrainingProgress(),
                loadAllCourses(),
                loadCertificates()
            ]);
        });

        function initializeViewToggle() {
            const listViewBtn = document.getElementById('listViewBtn');
            const calendarViewBtn = document.getElementById('calendarViewBtn');
            const listContainer = document.getElementById('listContainer');
            const calendarContainer = document.getElementById('calendarContainer');

            listViewBtn.addEventListener('click', () => {
                currentView = 'list';
                listViewBtn.classList.add('active');
                calendarViewBtn.classList.remove('active');
                listContainer.classList.remove('hidden');
                calendarContainer.classList.remove('active');
            });

            calendarViewBtn.addEventListener('click', () => {
                currentView = 'calendar';
                calendarViewBtn.classList.add('active');
                listViewBtn.classList.remove('active');
                listContainer.classList.add('hidden');
                calendarContainer.classList.add('active');
                renderCalendar();
            });
        }

        function initializeCalendarNavigation() {
            document.getElementById('prevMonth').addEventListener('click', () => {
                currentDate.setMonth(currentDate.getMonth() - 1);
                renderCalendar();
            });

            document.getElementById('nextMonth').addEventListener('click', () => {
                currentDate.setMonth(currentDate.getMonth() + 1);
                renderCalendar();
            });
        }


function initializeTrainingModal() {
    setupTrainingDropdown();
    setupScheduleHandlers();
    setupDateHandlers();
    setupFormValidation();
    
    // Ensure modal close handlers work properly
    const modal = document.getElementById('trainingRequestModal');
    if (modal) {
        modal.addEventListener('click', function(e) {
            if (e.target === modal) {
                closeTrainingRequestModal();
            }
        });
    }
    
    // Close button handler
    const closeBtn = document.querySelector('.modal-close');
    if (closeBtn) {
        closeBtn.addEventListener('click', closeTrainingRequestModal);
    }
}

// Calendar rendering functions
        function renderCalendar() {
            const monthNames = [
                'January', 'February', 'March', 'April', 'May', 'June',
                'July', 'August', 'September', 'October', 'November', 'December'
            ];
            
            const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
            
            // Update month/year display
            document.getElementById('monthYear').textContent = 
                `${monthNames[currentDate.getMonth()]} ${currentDate.getFullYear()}`;
            
            // Get first day of month and number of days
            const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
            const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
            const startDate = new Date(firstDay);
            startDate.setDate(startDate.getDate() - firstDay.getDay());
            
            // Generate calendar grid
            let calendarHTML = '';
            
            // Add day headers
            dayNames.forEach(day => {
                calendarHTML += `<div class="calendar-day-header">${day}</div>`;
            });
            
            // Generate 6 weeks of calendar
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            
            for (let week = 0; week < 6; week++) {
                for (let day = 0; day < 7; day++) {
                    const cellDate = new Date(startDate);
                    cellDate.setDate(startDate.getDate() + (week * 7) + day);
                    
                    const isCurrentMonth = cellDate.getMonth() === currentDate.getMonth();
                    const isToday = cellDate.getTime() === today.getTime();
                    const dayNumber = cellDate.getDate();
                    
                    // Get trainings for this date
                    const dayTrainings = getTrainingsForDate(cellDate);
                    
                    let dayClasses = 'calendar-day';
                    if (!isCurrentMonth) dayClasses += ' other-month';
                    if (isToday) dayClasses += ' today';
                    
                    calendarHTML += `
                        <div class="${dayClasses}" data-date="${cellDate.toISOString().split('T')[0]}">
                            <div class="day-number">${dayNumber}</div>
                            <div class="training-events">
                                ${renderTrainingEvents(dayTrainings)}
                            </div>
                        </div>
                    `;
                }
            }
            
            document.getElementById('calendarGrid').innerHTML = calendarHTML;
        }

        function getTrainingsForDate(date) {
    if (!trainingProgressData.trainings) return [];
    
    const dateStr = date.toISOString().split('T')[0];
    
    return trainingProgressData.trainings.filter(training => {
        // Exclude trainings that are awaiting approval or rejected from calendar
        if (training.status === 'Awaiting Approval' || training.status === 'Rejected') {
            return false;
        }
        
        if (!training.setStartDate || !training.setEndDate) return false;
        
        const startDate = training.setStartDate.split('T')[0];
        const endDate = training.setEndDate.split('T')[0];
        
        return dateStr >= startDate && dateStr <= endDate;
    });
}

        function renderTrainingEvents(trainings) {
            if (!trainings || trainings.length === 0) return '';
            
            const maxVisible = 3;
            let eventsHTML = '';
            
            trainings.slice(0, maxVisible).forEach(training => {
                const statusClass = getStatusClass(training.status);
                eventsHTML += `
                    <div class="training-event ${statusClass}" 
                         onclick="navigateToTrainingDetails(${training.trainingRecordId})"
                         title="${training.trainingName} - ${training.status}">
                        ${training.trainingName}
                    </div>
                `;
            });
            
            if (trainings.length > maxVisible) {
                eventsHTML += `<div class="more-events">+${trainings.length - maxVisible} more</div>`;
            }
            
            return eventsHTML;
        }

function getStatusClass(status) {
    const statusMap = {
        'Not Started': 'not-started',
        'In Progress': 'in-progress',
        'Completed': 'completed',
        'Overdue': 'overdue',
        'Awaiting Approval': 'awaiting-approval',
        'Rejected': 'rejected'
    };
    return statusMap[status] || 'not-started';
}



// Training dropdown functionality
function setupTrainingDropdown() {
    const dropdown = document.getElementById('trainingDropdown');
    const input = document.getElementById('trainingCourseInput');
    const dropdownList = document.getElementById('trainingDropdownList');
    const hiddenInput = document.getElementById('selectedTrainingId');

    input.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase().trim();
        
        // Clear selection if user modifies the input
        if (selectedTraining && this.value !== selectedTraining.trainingName) {
            selectedTraining = null;
            hiddenInput.value = '';
            hideTrainingDetails();
            validateForm();
        }
        
        filterTrainings(searchTerm);
        dropdown.classList.add('open');
    });

    input.addEventListener('focus', function() {
        dropdown.classList.add('open');
        if (filteredTrainings.length === 0) {
            loadTrainings();
        } else {
            renderTrainingOptions(filteredTrainings);
        }
    });

   // Close dropdown when clicking outside
document.addEventListener('click', function(event) {
    const dropdown = document.getElementById('trainingDropdown');
    if (dropdown && !dropdown.contains(event.target)) {
        dropdown.classList.remove('open');
    }
});
}


function hideTrainingDetails() {
    document.getElementById('trainingDetailsCard').style.display = 'none';
    document.getElementById('focusAreasSection').style.display = 'none';
    document.getElementById('activitiesSection').style.display = 'none'; // Add this line
    document.getElementById('scheduleSection').style.display = 'none';
    document.getElementById('scheduleSummary').style.display = 'none';
}


// 4. Helper function for keyboard navigation
function updateActiveItem(items, activeIndex) {
    items.forEach((item, index) => {
        item.classList.toggle('active', index === activeIndex);
    });
}

// Schedule handlers
function setupScheduleHandlers() {
    // Make selectScheduleType globally available
    window.selectScheduleType = selectScheduleType;
}
function setupDateHandlers() {
    const today = new Date().toISOString().split('T')[0];
    const startDateInput = document.getElementById('startDate');
    const endDateInput = document.getElementById('endDate');
    
    startDateInput.min = today;
    
    startDateInput.addEventListener('change', function() {
        const startValue = this.value;
        
        if (startValue && selectedScheduleType && selectedTraining) {
            endDateInput.min = startValue; // Always set minimum end date
            
            if (selectedScheduleType === 'custom') {
                // For custom, clear end date and let user choose
                endDateInput.value = '';
                endDateInput.readOnly = false;
                console.log('Custom schedule: User can set end date manually');
            } else {
                // For structured schedules, calculate end date
                endDateInput.readOnly = true;
                calculateEndDate();
            }
        }
        validateForm();
    });
    
    endDateInput.addEventListener('change', function() {
        console.log('End date changed:', this.value);
        
        const startValue = startDateInput.value;
        const endValue = this.value;
        
        if (startValue && endValue) {
            const startDate = new Date(startValue);
            const endDate = new Date(endValue);
            
            if (endDate <= startDate) {
                alert('End date must be after start date');
                this.value = '';
                return;
            }
        }
        
        updateScheduleSummary();
        validateForm();
    });
}

// Debug function for custom schedule testing
function debugCustomSchedule() {
    console.log('=== CUSTOM SCHEDULE DEBUG ===');
    console.log('selectedScheduleType:', selectedScheduleType);
    console.log('selectedTraining:', selectedTraining);
    console.log('startDate:', document.getElementById('startDate').value);
    console.log('endDate:', document.getElementById('endDate').value);
    console.log('endDate readOnly:', document.getElementById('endDate').readOnly);
    console.log('validation result:', validateForm());
}

// Add to global scope
window.debugCustomSchedule = debugCustomSchedule;


// FIXED: Custom schedule validation
function validateForm() {
    const trainingSelected = document.getElementById('selectedTrainingId').value;
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;
    const scheduleSelected = selectedScheduleType;
    
    console.log('Validation check:', {
        trainingSelected: !!trainingSelected,
        startDate: !!startDate,
        endDate: !!endDate,
        scheduleSelected: scheduleSelected,
        selectedTraining: !!selectedTraining
    });
    
    // Basic validation - must have training, start date, and schedule type
    let isValid = trainingSelected && startDate && scheduleSelected && selectedTraining;
    
    if (!isValid) {
        console.log('Basic validation failed');
        setSubmitButtonState(false);
        return false;
    }
    
    // Date validation - start date should not be in the past
    if (startDate) {
        const today = new Date().toISOString().split('T')[0];
        if (startDate < today) {
            console.log('Start date is in the past');
            isValid = false;
        }
    }
    
    // FIXED: End date validation for custom schedule
    if (scheduleSelected === 'custom') {
        // For custom schedule, user must set both start and end dates manually
        const hasValidEndDate = endDate && new Date(endDate) > new Date(startDate);
        
        if (!hasValidEndDate) {
            console.log('Custom schedule validation failed - no valid end date');
            isValid = false;
        }
        
        console.log('Custom schedule validation:', { 
            hasValidEndDate, 
            endDate,
            startDateValue: startDate,
            isValid 
        });
    } else {
        // For non-custom schedules, end date should be automatically calculated
        if (!endDate || new Date(endDate) <= new Date(startDate)) {
            console.log('Non-custom schedule validation failed - invalid end date');
            isValid = false;
        }
    }
    
    console.log('Final validation result:', isValid);
    setSubmitButtonState(isValid);
    return isValid;
}
function selectScheduleType(type) {
    console.log('Selected schedule type:', type);
    selectedScheduleType = type;
    
    // Update radio button
    document.querySelectorAll('input[name="scheduleType"]').forEach(radio => {
        radio.checked = radio.value === type;
    });
    
    const endDateInput = document.getElementById('endDate');
    const endDateHelper = document.getElementById('endDateHelper');
    const customNotice = document.getElementById('customScheduleNotice');
    
    if (type === 'custom') {
        // For custom schedule, allow manual date entry
        endDateInput.readOnly = false;
        endDateInput.value = ''; // Clear for manual entry
        endDateHelper.textContent = 'Choose your preferred end date';
        endDateHelper.classList.add('custom');
        customNotice.style.display = 'block';
        
        console.log('Custom schedule enabled - manual date entry allowed');
    } else {
        // For structured schedules
        endDateInput.readOnly = true;
        endDateInput.value = ''; // Clear for recalculation
        endDateHelper.textContent = 'End date will be calculated automatically';
        endDateHelper.classList.remove('custom');
        customNotice.style.display = 'none';
        
        // Calculate end date if start date is already set
        const startDateValue = document.getElementById('startDate').value;
        if (selectedTraining && startDateValue) {
            calculateEndDate();
        }
    }
    
    // Update schedule summary and validate
    setTimeout(() => {
        updateScheduleSummary();
        validateForm();
    }, 100);
}


function calculateEndDate() {
    if (!selectedTraining || !selectedScheduleType) return;
    
    // Skip calculation for custom schedule - user sets dates manually
    if (selectedScheduleType === 'custom') {
        console.log('Custom schedule selected - user will set dates manually');
        return;
    }
    
    const startDateValue = document.getElementById('startDate').value;
    if (!startDateValue) return;
    
    const startDate = new Date(startDateValue);
    const totalHours = selectedTraining.totalDuration;
    let hoursPerDay;
    
    switch (selectedScheduleType) {
        case 'intensive':
            hoursPerDay = 8;
            break;
        case 'regular':
            hoursPerDay = 4;
            break;
        case 'flexible':
            hoursPerDay = 2;
            break;
        default:
            return;
    }
    
    // Calculate working days needed
    const totalDays = Math.ceil(totalHours / hoursPerDay);
    let currentDate = new Date(startDate);
    let workingDaysAdded = 0;
    
    // Add working days (skip weekends)
    while (workingDaysAdded < totalDays - 1) {
        currentDate.setDate(currentDate.getDate() + 1);
        if (currentDate.getDay() !== 0 && currentDate.getDay() !== 6) {
            workingDaysAdded++;
        }
    }
    
    const endDateFormatted = currentDate.toISOString().split('T')[0];
    document.getElementById('endDate').value = endDateFormatted;
    
    setTimeout(() => {
        updateScheduleSummary();
        validateForm();
    }, 50);
}


// FIXED: Enhanced updateScheduleSummary for custom schedules
function updateScheduleSummary() {
    if (!selectedTraining || !selectedScheduleType) {
        document.getElementById('scheduleSummary').style.display = 'none';
        return;
    }
    
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;
    
    if (!startDate) {
        document.getElementById('scheduleSummary').style.display = 'none';
        return;
    }
    
    let hoursPerDay;
    let scheduleTypeName;
    
    switch (selectedScheduleType) {
        case 'intensive':
            hoursPerDay = 8;
            scheduleTypeName = 'Intensive (8 hours/day)';
            break;
        case 'regular':
            hoursPerDay = 4;
            scheduleTypeName = 'Regular (4 hours/day)';
            break;
        case 'flexible':
            hoursPerDay = 2;
            scheduleTypeName = 'Flexible (2 hours/day)';
            break;
        case 'custom':
            hoursPerDay = 'Custom pace';
            scheduleTypeName = 'Custom Schedule (Self-paced)';
            break;
        default:
            return;
    }
    
    // Calculate total days for any schedule type
    let totalDays = 0;
    if (startDate && endDate) {
        const start = new Date(startDate);
        const end = new Date(endDate);
        let current = new Date(start);
        
        while (current <= end) {
            // Count all days for custom, working days for others
            if (selectedScheduleType === 'custom' || 
                (current.getDay() !== 0 && current.getDay() !== 6)) {
                totalDays++;
            }
            current.setDate(current.getDate() + 1);
        }
    }
    
    // Update summary content
    document.getElementById('summaryDuration').textContent = `${selectedTraining.totalDuration} hours`;
    document.getElementById('summaryScheduleType').textContent = scheduleTypeName;
    document.getElementById('summaryHoursPerDay').textContent = typeof hoursPerDay === 'number' ? `${hoursPerDay} hours` : hoursPerDay;
    document.getElementById('summaryDateRange').textContent = endDate ? 
        `${formatDate(startDate)} - ${formatDate(endDate)}` : 
        formatDate(startDate);
    
    // Different day calculation for custom vs structured schedules
    const dayType = selectedScheduleType === 'custom' ? 'days' : 'working days';
    document.getElementById('summaryTotalDays').textContent = totalDays > 0 ? 
        `${totalDays} ${dayType}` : 
        'Set end date to calculate';
    
    document.getElementById('scheduleSummary').style.display = 'block';
}


function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'short', 
        day: 'numeric' 
    });
}
function loadTrainings() {
    const dropdownList = document.getElementById('trainingDropdownList');
    dropdownList.innerHTML = '<div class="loading"><i class="fas fa-spinner fa-spin"></i> Loading available trainings...</div>';

    fetch('/employee/trainings/dropdown', {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include'
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    })
    .then(result => {
        if (result.success) {
            filteredTrainings = result.data || [];
            if (filteredTrainings.length === 0) {
                renderNoTrainings('No trainings available for your job position.');
            } else {
                renderTrainingOptions();
            }
        } else {
            throw new Error(result.message || 'Failed to fetch trainings');
        }
    })
    .catch(error => {
        console.error('Failed to load trainings:', error);
        renderNoTrainings('Failed to load trainings. Please try again.');
    });
}
function renderNoTrainings(message) {
    const dropdownList = document.getElementById('trainingDropdownList');
    dropdownList.innerHTML = `<div class="no-results"><i class="fas fa-info-circle"></i> ${message}</div>`;
}

function filterTrainings(searchTerm) {
    if (!searchTerm.trim()) {
        renderTrainingOptions(filteredTrainings);
        return;
    }
    
    const filtered = filteredTrainings.filter(training => 
        training.trainingName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        training.trainingDesc.toLowerCase().includes(searchTerm.toLowerCase())
    );
    
    renderTrainingOptions(filtered);
}



function renderTrainingOptions(trainingsToShow = filteredTrainings) {
    const dropdownList = document.getElementById('trainingDropdownList');
    
    if (!trainingsToShow || trainingsToShow.length === 0) {
        dropdownList.innerHTML = '<div class="no-results"><i class="fas fa-search"></i> No trainings found</div>';
        return;
    }

    const optionsHTML = trainingsToShow.map(training => `
        <div class="dropdown-item" 
             onclick="selectTraining(${training.trainingId})" 
             data-training-id="${training.trainingId}">
            <div class="dropdown-item-title">${training.trainingName}</div>
            <div class="dropdown-item-meta">
                <span><i class="fas fa-${training.isOnlineArrangement ? 'laptop' : 'map-marker-alt'}"></i> ${training.isOnlineArrangement ? 'Online' : 'Onsite'}</span>
                <span><i class="fas fa-clock"></i> ${training.totalDuration}h</span>
                <span><span class="peso-symbol">₱</span> ${training.cost ? training.cost.toFixed(2) : '0.00'}</span>
            </div>
        </div>
    `).join('');

    dropdownList.innerHTML = optionsHTML;
}


// UPDATED: Enhanced selectTraining function
async function selectTraining(trainingId) {
    console.log('Selecting training ID:', trainingId);
    
    selectedTraining = filteredTrainings.find(t => t.trainingId === trainingId);
    
    if (!selectedTraining) {
        console.error('Training not found:', trainingId);
        alert('Error: Selected training not found. Please try again.');
        return;
    }

    // Update input field and hidden field
    const input = document.getElementById('trainingCourseInput');
    const hiddenInput = document.getElementById('selectedTrainingId');
    
    input.value = selectedTraining.trainingName;
    hiddenInput.value = selectedTraining.trainingId;
    
    // Close dropdown
    document.getElementById('trainingDropdown').classList.remove('open');
    
    // Show training details
    displayTrainingDetails(selectedTraining);
    
    try {
        // Load skills, objectives, and activities
        await loadTrainingSkillsAndObjectives(selectedTraining.trainingId);
        
        // Show schedule section
        document.getElementById('scheduleSection').style.display = 'block';
        
        // Update schedule previews
        updateSchedulePreviews();
        
        // Validate form
        validateForm();
        
    } catch (error) {
        console.error('Error loading training details:', error);
        // Still show schedule section even if details fail
        document.getElementById('scheduleSection').style.display = 'block';
        updateSchedulePreviews();
        validateForm();
    }
}

async function loadTrainingSkillsAndObjectives(trainingId) {
    const objectivesContainer = document.getElementById('objectivesContainer');
    const skillsContainer = document.getElementById('skillsContainer');
    const activitiesContainer = document.getElementById('activitiesContainer'); // New container
    
    // Show loading state
    objectivesContainer.innerHTML = '<div style="color: #64748b; font-style: italic;"><i class="fas fa-spinner fa-spin"></i> Loading objectives...</div>';
    skillsContainer.innerHTML = '<div style="color: #64748b; font-style: italic;"><i class="fas fa-spinner fa-spin"></i> Loading skills...</div>';
    activitiesContainer.innerHTML = '<div style="color: #64748b; font-style: italic;"><i class="fas fa-spinner fa-spin"></i> Loading activities...</div>';
    
    document.getElementById('focusAreasSection').style.display = 'block';

    try {
        console.log(`Fetching details for training ID: ${trainingId}`);
        
        const response = await fetch(`/employee/trainings/${trainingId}/details`, {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include'
        });

        console.log('Response status:', response.status);

        if (response.ok) {
            const result = await response.json();
            console.log('Training details result:', result);
            
            if (result.success && result.data) {
                selectedTraining.objectives = result.data.objectives || [];
                selectedTraining.skills = result.data.skills || [];
                selectedTraining.activities = result.data.activities || [];
                
                console.log('Objectives:', selectedTraining.objectives);
                console.log('Skills:', selectedTraining.skills);
                console.log('Activities:', selectedTraining.activities);
                
                displayFocusAreas(selectedTraining);
                displayTrainingActivities(selectedTraining.activities); // New function
            } else {
                throw new Error(result.message || 'No data received');
            }
        } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
    } catch (error) {
        console.error('Failed to load training details:', error);
        objectivesContainer.innerHTML = '<div class="empty-state">Failed to load objectives</div>';
        skillsContainer.innerHTML = '<div class="empty-state">Failed to load skills</div>';
        activitiesContainer.innerHTML = '<div class="empty-state">Failed to load activities</div>';
        
        selectedTraining.objectives = [];
        selectedTraining.skills = [];
        selectedTraining.activities = [];
    }
}



// NEW: Function to display training activities
function displayTrainingActivities(activities) {
    const activitiesContainer = document.getElementById('activitiesContainer');
    
    if (!activities || activities.length === 0) {
        activitiesContainer.innerHTML = '<div class="empty-state">No activities defined for this training</div>';
        return;
    }
    
    let activitiesHTML = '';
    let totalDuration = 0;
    
    activities.forEach((activity, index) => {
        const duration = activity.estActivityDuration || 0;
        totalDuration += duration;
        
        activitiesHTML += `
            <div class="activity-item">
                <div class="activity-header">
                    <div class="activity-number">${index + 1}</div>
                    <div class="activity-info">
                        <div class="activity-name">${activity.activityName || 'Unnamed Activity'}</div>
                        <div class="activity-meta">
                            <span class="activity-duration">
                                <i class="fas fa-clock"></i>
                                ${duration} ${duration === 1 ? 'hour' : 'hours'}
                            </span>
                            <span class="activity-type">
                                <i class="fas fa-tag"></i>
                                ${activity.activityType || 'General'}
                            </span>
                        </div>
                        ${activity.activityRemarks ? `
                            <div class="activity-remarks">
                                <i class="fas fa-info-circle"></i>
                                ${activity.activityRemarks}
                            </div>
                        ` : ''}
                    </div>
                </div>
            </div>
        `;
    });
    
    // Add summary at the top
    const summaryHTML = `
        <div class="activities-summary">
            <div class="summary-item">
                <i class="fas fa-list"></i>
                <span><strong>${activities.length}</strong> Activities</span>
            </div>
            <div class="summary-item">
                <i class="fas fa-clock"></i>
                <span><strong>${totalDuration}</strong> Total Hours</span>
            </div>
        </div>
        <div class="activities-list">
            ${activitiesHTML}
        </div>
    `;
    
    activitiesContainer.innerHTML = summaryHTML;
}

function displayTrainingDetails(training) {
    document.getElementById('selectedTrainingName').textContent = training.trainingName;
    document.getElementById('trainingDuration').innerHTML = `<i class="fas fa-clock"></i> ${training.totalDuration} hours`;
    document.getElementById('trainingType').innerHTML = `<i class="fas fa-${training.isOnlineArrangement ? 'laptop' : 'map-marker-alt'}"></i> ${training.isOnlineArrangement ? 'Online' : 'Onsite'}`;
    document.getElementById('trainingCost').innerHTML = `<span class="peso-symbol">₱</span> ${training.cost ? training.cost.toFixed(2) : 'Free'}`;
    document.getElementById('totalHours').textContent = training.totalDuration;
    
    document.getElementById('trainingDetailsCard').style.display = 'block';
}

// UPDATED: Enhanced displayFocusAreas function with better error handling
function displayFocusAreas(training) {
    const objectivesContainer = document.getElementById('objectivesContainer');
    const skillsContainer = document.getElementById('skillsContainer');
    
    // Clear containers
    objectivesContainer.innerHTML = '';
    skillsContainer.innerHTML = '';
    
    // Add objectives
    if (training.objectives && training.objectives.length > 0) {
        console.log('Displaying objectives:', training.objectives);
        training.objectives.forEach(objective => {
            const tag = document.createElement('div');
            tag.className = 'tag objective';
            // Handle different possible field names from database
            const objectiveText = objective.objectiveDescrpt || objective.description || objective.name || 'Unnamed Objective';
            tag.innerHTML = `<i class="fas fa-bullseye"></i>${objectiveText}`;
            objectivesContainer.appendChild(tag);
        });
    } else {
        objectivesContainer.innerHTML = '<div class="empty-state">No objectives defined</div>';
    }
    
    // Add skills
    if (training.skills && training.skills.length > 0) {
        console.log('Displaying skills:', training.skills);
        training.skills.forEach(skill => {
            const tag = document.createElement('div');
            tag.className = 'tag skill';
            // Handle different possible field names from database
            const skillText = skill.jobReqSkillName || skill.skillName || skill.name || 'Unnamed Skill';
            tag.innerHTML = `<i class="fas fa-cogs"></i>${skillText}`;
            skillsContainer.appendChild(tag);
        });
    } else {
        skillsContainer.innerHTML = '<div class="empty-state">No skills defined</div>';
    }
    
    // Display activities (call the new function)
    displayTrainingActivities(training.activities || []);
    
    // Show the activities section
    document.getElementById('activitiesSection').style.display = 'block';
}



function updateSchedulePreviews() {
    if (!selectedTraining) return;
    
    const totalHours = selectedTraining.totalDuration;
    
    const intensiveDays = Math.ceil(totalHours / 8);
    const regularDays = Math.ceil(totalHours / 4);
    const flexibleDays = Math.ceil(totalHours / 2);
    
    document.getElementById('intensivePreview').textContent = `${intensiveDays} working days`;
    document.getElementById('regularPreview').textContent = `${regularDays} working days`;
    document.getElementById('flexiblePreview').textContent = `${flexibleDays} working days`;
}


function setupFormValidation() {
    const form = document.getElementById('trainingRequestForm');
    if (form) {
        // Remove any existing event listeners
        form.removeEventListener('submit', handleFormSubmit);
        // Add the submit handler
        form.addEventListener('submit', handleFormSubmit);
    }
    
    // Add event listeners for all form inputs
    const formInputs = document.querySelectorAll('#trainingRequestForm input, #trainingRequestForm select');
    formInputs.forEach(input => {
        input.addEventListener('change', validateForm);
        input.addEventListener('input', validateForm);
    });
}

function validateForm() {
    const trainingSelected = document.getElementById('selectedTrainingId').value;
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;
    const scheduleSelected = selectedScheduleType;
    
    console.log('Validation check:', {
        trainingSelected: !!trainingSelected,
        startDate: !!startDate,
        endDate: !!endDate,
        scheduleSelected: scheduleSelected,
        selectedTraining: !!selectedTraining
    });
    
    // Basic validation
    let isValid = trainingSelected && startDate && scheduleSelected && selectedTraining;
    
    if (!isValid) {
        console.log('Basic validation failed');
        setSubmitButtonState(false);
        return false;
    }
    
    // Date validation - start date should not be in the past
    if (startDate) {
        const today = new Date().toISOString().split('T')[0];
        if (startDate < today) {
            console.log('Start date is in the past');
            isValid = false;
        }
    }
    
    // End date validation
    if (!endDate) {
        console.log('No end date set');
        isValid = false;
    } else if (startDate && endDate) {
        const startDateObj = new Date(startDate);
        const endDateObj = new Date(endDate);
        
        if (endDateObj <= startDateObj) {
            console.log('End date must be after start date');
            isValid = false;
        }
    }
    
    console.log('Final validation result:', isValid);
    setSubmitButtonState(isValid);
    return isValid;
}

function setSubmitButtonState(isValid) {
    const submitButton = document.getElementById('submitButton');
    submitButton.disabled = !isValid;
    
    if (isValid) {
        submitButton.style.opacity = '1';
        submitButton.style.cursor = 'pointer';
    } else {
        submitButton.style.opacity = '0.6';
        submitButton.style.cursor = 'not-allowed';
    }
}

function handleFormSubmit(e) {
    e.preventDefault();
    
    console.log('Form submit attempted...');
    
    // Prevent double submission
    const submitButton = document.getElementById('submitButton');
    if (submitButton.disabled) {
        console.log('Submit button is disabled, preventing submission');
        return;
    }
    
    // Final validation
    if (!validateForm()) {
        console.log('Form validation failed');
        alert('Please fill in all required fields correctly.');
        return;
    }
    
    // Get form data
    const formData = {
        trainingId: selectedTraining.trainingId,
        trainingName: selectedTraining.trainingName,
        startDate: document.getElementById('startDate').value,
        endDate: document.getElementById('endDate').value,
        scheduleType: selectedScheduleType,
        hoursPerDay: getHoursPerDay(),
        totalDuration: selectedTraining.totalDuration
    };
    
    console.log('Submitting form data:', formData);
    
    // Don't reset modal here - wait for successful submission
    submitTrainingRequest(formData);
}

function getHoursPerDay() {
    switch (selectedScheduleType) {
        case 'intensive': return 8;
        case 'regular': return 4;
        case 'flexible': return 2;
        case 'custom': return 'Based on activities'; // Custom doesn't use hours per day
        default: return 4;
    }
}
async function submitTrainingRequest(formData) {
    const submitButton = document.getElementById('submitButton');
    const originalText = submitButton.innerHTML;
    
    // Disable button and show loading state
    submitButton.disabled = true;
    submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Submitting...';

    try {
        const response = await fetch('/employee/training-requests', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({
                trainingId: formData.trainingId,
                startDate: formData.startDate,
                endDate: formData.endDate,
                scheduleType: formData.scheduleType
            })
        });

        const result = await response.json();
        
        if (response.ok && result.success) {
            // Success message
            alert(`✅ Training request submitted successfully!\n\nTraining: ${formData.trainingName}\nSchedule: ${formData.scheduleType}\nPeriod: ${formatDate(formData.startDate)} - ${formatDate(formData.endDate)}\nTotal Duration: ${formData.totalDuration} hours\n\nYour line manager will be notified for approval.`);
            
            // Close modal AFTER showing success message
            closeTrainingRequestModal();
            
            // Refresh the data
            setTimeout(() => {
                if (typeof loadTrainingProgress === 'function') loadTrainingProgress();
                if (typeof loadAllCourses === 'function') loadAllCourses();
            }, 1000);
            
        } else {
            throw new Error(result.message || 'Failed to submit training request');
        }
        
    } catch (error) {
        console.error('Error submitting training request:', error);

        let errorMessage = 'Failed to submit training request. ';
        if (error.message.includes('already have an active')) {
            errorMessage = '⚠️ You already have an active training request for this course.';
        } else if (error.message.includes('not authenticated')) {
            errorMessage += 'Please log in again and try again.';
        } else if (error.message.includes('not found')) {
            errorMessage += 'The selected training is no longer available.';
        } else {
            errorMessage += error.message || 'Please try again later.';
        }
        
        alert('❌ ' + errorMessage);
        
        // Re-enable button on error - DON'T reset modal
        submitButton.disabled = false;
        submitButton.innerHTML = originalText;
        
        // Re-validate form to restore proper button state
        validateForm();
    }
}
function openTrainingRequestModal() {
    console.log('Opening training request modal...');
    
    const modal = document.getElementById('trainingRequestModal');
    if (!modal) {
        console.error('Modal element not found!');
        return;
    }
    
    // Show the modal
    modal.classList.add('show');
    modal.style.display = 'flex';
    
    // Set minimum date to today
    const today = new Date().toISOString().split('T')[0];
    const startDateInput = document.getElementById('startDate');
    if (startDateInput) {
        startDateInput.min = today;
    }
    
    // Load trainings if not already loaded
    if (!filteredTrainings || filteredTrainings.length === 0) {
        loadTrainings();
    }
    
    // Focus on the training input
    const trainingInput = document.getElementById('trainingCourseInput');
    if (trainingInput) {
        setTimeout(() => trainingInput.focus(), 100);
    }
}

function closeTrainingRequestModal() {
    console.log('Closing training request modal...');
    
    const modal = document.getElementById('trainingRequestModal');
    if (modal) {
        modal.classList.remove('show');
        setTimeout(() => {
            modal.style.display = 'none';
            // Only reset modal after successful submission or explicit cancel
            resetModal();
        }, 300);
    }
}

function debugFormState() {
    console.log('=== FORM STATE DEBUG ===');
    console.log('selectedTraining:', selectedTraining);
    console.log('selectedScheduleType:', selectedScheduleType);
    console.log('trainingId input:', document.getElementById('selectedTrainingId').value);
    console.log('startDate:', document.getElementById('startDate').value);
    console.log('endDate:', document.getElementById('endDate').value);
    console.log('customHours:', document.getElementById('customHoursPerDay').value);
    console.log('submitButton disabled:', document.getElementById('submitButton').disabled);
    console.log('form validation result:', validateForm());
}

// Add to global scope for debugging
window.debugFormState = debugFormState;

function resetModal() {
    // Reset form
    document.getElementById('trainingRequestForm').reset();
    document.getElementById('selectedTrainingId').value = '';
    
    // Reset global variables
    selectedTraining = null;
    selectedScheduleType = null;
    
    // Hide sections
    document.getElementById('trainingDetailsCard').style.display = 'none';
    document.getElementById('focusAreasSection').style.display = 'none';
    document.getElementById('scheduleSection').style.display = 'none';
    document.getElementById('scheduleSummary').style.display = 'none';
    document.getElementById('customScheduleOptions').style.display = 'none';
    
    // Close dropdown
    document.getElementById('trainingDropdown').classList.remove('open');
    
    // Reset schedule options
    document.querySelectorAll('input[name="scheduleType"]').forEach(radio => {
        radio.checked = false;
    });
    
    // Reset end date to readonly
    document.getElementById('endDate').readOnly = true;
    
    // Disable submit button
    document.getElementById('submitButton').disabled = true;
}




 function initializeTabs() {
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabContents = document.querySelectorAll('.tab-content');

            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    tabContents.forEach(content => content.classList.remove('active'));

                    button.classList.add('active');
                    const tabId = button.getAttribute('data-tab');
                    document.getElementById(tabId).classList.add('active');
                });
            });
        }

// Improved error handling for loadTrainingProgress
async function loadTrainingProgress() {
            try {
                const response = await fetch('/employee/training-progress', {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' },
                    credentials: 'include'
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                
                if (result.success && result.data) {
                    const processedData = {
                        trainings: result.data.map(training => {
                            const status = training.status || determineTrainingStatus(training);
                            return { ...training, status };
                        })
                    };
                    
                    trainingProgressData = processedData;
                    renderProgressCategories();
                    renderTrainingSections();
                } else {
                    throw new Error(result.message || 'No training data available');
                }
            } catch (error) {
                console.error('Error loading training progress:', error);
                document.getElementById('progressCategories').innerHTML = 
                    `<div class="loading-state" style="grid-column: 1 / -1; text-align: center; padding: 40px;">
                        <i class="fas fa-exclamation-triangle" style="font-size: 2rem; color: #ef4444; margin-bottom: 10px;"></i>
                        <p style="margin: 0; color: #64748b;">Failed to load training progress</p>
                        <button onclick="loadTrainingProgress()" style="margin-top: 10px; padding: 8px 16px; background: #07ACB9; color: white; border: none; border-radius: 4px; cursor: pointer;">
                            <i class="fas fa-retry"></i> Retry
                        </button>
                    </div>`;
                
                document.getElementById('trainingSections').innerHTML = 
                    `<div style="text-align: center; color: #64748b; padding: 40px;">
                        <p>Unable to load training courses. Please try refreshing the page.</p>
                    </div>`;
            }
        }

      function renderProgressCategories() {
    const container = document.getElementById('progressCategories');
    const trainings = trainingProgressData.trainings;
    
    console.log('📊 [Progress Categories] Total trainings loaded:', trainings.length);
    
    // Enhanced counting with detailed logging
    const counts = {
        notStarted: 0,
        inProgress: 0,
        completed: 0,
        overdue: 0,
        awaitingApproval: 0,
        rejected: 0,
        ongoingRequired: 0
    };
    
    // Count with detailed debugging
    trainings.forEach((training, index) => {
        console.log(`📊 [Progress Categories] Training ${index + 1}: ${training.trainingName}`);
        console.log(`  - Status: ${training.status}`);
        console.log(`  - Training Status (DB): ${training.trainingStatus}`);
        console.log(`  - Is Required: ${training.isRequired}`);
        console.log(`  - Is Approved: ${training.isApproved}`);
        console.log(`  - Is Ongoing Required: ${training.isOngoingRequired}`);
        console.log(`  - Percentage: ${training.trainingPercentage}%`);
        console.log(`  - Activities: ${training.completedActivities}/${training.totalActivities}`);
        
        // Count by status with ongoing required logic
        if (training.status === 'Awaiting Approval') {
            counts.awaitingApproval++;
        } else if (training.status === 'Rejected') {
            counts.rejected++;
        } else if (training.isOngoingRequired) {
            counts.ongoingRequired++;
            console.log(`  ➜ Counted as ongoing required`);
        } else {
            switch (training.status) {
                case 'Not Started':
                    counts.notStarted++;
                    console.log(`  ➜ Counted as not started`);
                    break;
                case 'In Progress':
                    counts.inProgress++;
                    console.log(`  ➜ Counted as in progress`);
                    break;
                case 'Completed':
                    counts.completed++;
                    console.log(`  ➜ Counted as completed`);
                    break;
                case 'Overdue':
                    counts.overdue++;
                    console.log(`  ➜ Counted as overdue`);
                    break;
                default:
                    console.log(`  ➜ Unknown status: ${training.status}`);
            }
        }
    });

    console.log('📊 [Progress Categories] Final counts:', counts);

    container.innerHTML = `
        <!-- Row 1: Approval Status (Side by side, smaller height) -->
        <div class="progress-category awaiting-approval row-1" data-filter="awaiting-approval">
            <div class="request-stat-icon">
                <i class="fas fa-clock"></i>
            </div>
            <div class="count">${counts.awaitingApproval}</div>
            <div class="text-content">
                <h3>Awaiting for Approval</h3>
                <p>Training requests pending approval</p>
            </div>
        </div>
        
        <div class="progress-category rejected row-1" data-filter="rejected">
            <div class="request-stat-icon">
                <i class="fas fa-times-circle"></i>
            </div>
            <div class="count">${counts.rejected}</div>
            <div class="text-content">
                <h3>Rejected</h3>
                <p>Training requests that were declined</p>
            </div>
        </div>
        
        <!-- Row 2: Training Status (2x2 grid, bigger height) -->
        <div class="progress-category not-started row-2" data-filter="not-started">
            <div class="count">${counts.notStarted}</div>
            <h3>Not Started</h3>
            <p>Approved trainings not yet begun</p>
        </div>
        <div class="progress-category in-progress row-2" data-filter="in-progress">
            <div class="count">${counts.inProgress}</div>
            <h3>In Progress</h3>
            <p>Currently ongoing training sessions</p>
        </div>
        <div class="progress-category completed row-2" data-filter="completed">
            <div class="count">${counts.completed}</div>
            <h3>Completed</h3>
            <p>Successfully finished trainings</p>
        </div>
        <div class="progress-category overdue row-2" data-filter="overdue">
            <div class="count">${counts.overdue}</div>
            <h3>Overdue</h3>
            <p>Training sessions past due date</p>
        </div>
        
        <!-- Row 3: Ongoing Required Courses (Full width) -->
        <div class="progress-category ongoing-required row-3" data-filter="ongoing-required" style="grid-column: span 2;">
            <div class="count">${counts.ongoingRequired}</div>
            <h3>Ongoing Required Courses</h3>
            <p>Required trainings within schedule period (not yet started or in progress)</p>
        </div>
    `;

    // Add click handlers for filtering
    container.querySelectorAll('.progress-category').forEach(category => {
        category.addEventListener('click', function() {
            const filterType = this.getAttribute('data-filter');
            scrollToSection(filterType + '-section');
        });
    });
}


        function renderTrainingSections() {
    const container = document.getElementById('trainingSections');
    const trainings = trainingProgressData.trainings;
    
    // FIXED: Group trainings with proper ongoing required logic
    const groupedTrainings = {
        'awaiting-approval': trainings.filter(t => t.status === 'Awaiting Approval'),
        'rejected': trainings.filter(t => t.status === 'Rejected'),
        // FIXED: Use the new isOngoingRequired property
        'ongoing-required': trainings.filter(t => t.isOngoingRequired),
        // FIXED: Exclude ongoing required from regular not-started
        'not-started': trainings.filter(t => t.status === 'Not Started' && !t.isOngoingRequired),
        'in-progress': trainings.filter(t => t.status === 'In Progress'),
        'completed': trainings.filter(t => t.status === 'Completed'),
        'overdue': trainings.filter(t => t.status === 'Overdue')
    };

    let sectionsHTML = '';

    // Define section information with proper order
    const sectionInfo = {
        'awaiting-approval': { title: 'Awaiting for Approval', icon: 'fas fa-clock', color: '#f59e0b' },
        'rejected': { title: 'Rejected Requests', icon: 'fas fa-times-circle', color: '#dc2626' },
        'ongoing-required': { title: 'Ongoing Required Courses', icon: 'fas fa-exclamation-triangle', color: '#dc2626' },
        'not-started': { title: 'Not Started Courses', icon: 'fas fa-circle', color: '#6b7280' },
        'in-progress': { title: 'In Progress Courses', icon: 'fas fa-play-circle', color: '#3b82f6' },
        'completed': { title: 'Completed Courses', icon: 'fas fa-check-circle', color: '#10b981' },
        'overdue': { title: 'Overdue Courses', icon: 'fas fa-exclamation-circle', color: '#ef4444' }
    };

    // Render each section in the defined order
    Object.entries(groupedTrainings).forEach(([status, statusTrainings]) => {
        if (statusTrainings.length > 0) {
            const statusDetails = sectionInfo[status];
            
            sectionsHTML += `
                <div class="progress-section" id="${status}-section">
                    <h4 class="section-title">
                        <i class="${statusDetails.icon}" style="color: ${statusDetails.color}; margin-right: 8px;"></i>
                        ${statusDetails.title} (${statusTrainings.length})
                    </h4>
                    <div class="courses-list">
                        ${statusTrainings.map(training => renderTrainingListItem(training, status)).join('')}
                    </div>
                </div>
            `;
        }
    });

    container.innerHTML = sectionsHTML || '<p style="text-align: center; color: #64748b; padding: 40px;">No training records found.</p>';
    
    // Debug logging
    console.log('Training sections rendered:', Object.entries(groupedTrainings).map(([status, trainings]) => ({
        status,
        count: trainings.length,
        trainings: trainings.map(t => ({ name: t.trainingName, status: t.status, isOngoingRequired: t.isOngoingRequired }))
    })));
}

function renderTrainingListItem(training, status) {
    console.log('=== Rendering Training Item ===');
    console.log('Training data:', {
        name: training.trainingName,
        status: training.status,
        trainingStatus: training.trainingStatus,
        isRequired: training.isRequired,
        isOngoingRequired: training.isOngoingRequired,
        section: status,
        percentage: training.trainingPercentage,
        totalActivities: training.totalActivities,
        completedActivities: training.completedActivities,
        inProgressActivities: training.inProgressActivities,
        hasValidCertificates: training.hasValidCertificates,
        debug: training._debug
    });

    // FIXED: Use backend-calculated percentage directly, with minimal validation
    let progressPercentage = training.trainingPercentage;
    
    // Only recalculate if backend percentage is clearly wrong (null/undefined/NaN)
    if (progressPercentage === undefined || progressPercentage === null || isNaN(progressPercentage)) {
        console.warn(`⚠️ Backend percentage is invalid for ${training.trainingName}: ${progressPercentage}`);
        
        // Fallback calculation only when backend fails
        const total = training.totalActivities || 0;
        const completed = training.completedActivities || 0;
        const inProgress = training.inProgressActivities || 0;
        
        if (total > 0) {
            // FIXED: Count in-progress activities as partial completion (50%)
            const partialProgress = (completed * 1.0) + (inProgress * 0.5);
            progressPercentage = Math.round((partialProgress / total) * 100);
            console.log(`🔧 Fallback calculation: ${progressPercentage}% (completed: ${completed}, in-progress: ${inProgress}, total: ${total})`);
        } else {
            progressPercentage = 0;
            console.log(`🔧 No activities found, using 0%`);
        }
    } else {
        // Trust the backend calculation
        console.log(`✅ Using backend percentage: ${progressPercentage}%`);
    }
    
    // Ensure percentage is within valid range
    progressPercentage = Math.max(0, Math.min(100, Math.round(progressPercentage)));
    
    console.log(`📊 Final display percentage: ${progressPercentage}%`);

    const totalActivities = training.totalActivities || 0;
    const completedActivities = training.completedActivities || 0;
    const inProgressActivities = training.inProgressActivities || 0;
    
    // Determine if the item should be clickable
    const isClickable = training.isApproved === true;
    const clickHandler = isClickable ? `onclick="navigateToTrainingDetails(${training.trainingRecordId})"` : '';
    const cursorStyle = isClickable ? 'cursor: pointer;' : 'cursor: default; opacity: 0.7;';
    
    // Add approval status badge if not approved
    let approvalBadge = '';
    if (training.isApproved === null) {
        approvalBadge = '<span class="course-list-badge awaiting-approval">Awaiting Approval</span>';
    } else if (training.isApproved === false) {
        approvalBadge = '<span class="course-list-badge rejected">Rejected</span>';
    }
    
    // Special handling for ongoing required courses
    let statusDescription = training.status;
    if (status === 'ongoing-required') {
        statusDescription = `${training.status} (Required)`;
    }
    
    // Enhanced activity summary with more detail
    const activitySummary = `Activities: ${completedActivities}/${totalActivities}${inProgressActivities > 0 ? ` (${inProgressActivities} in progress)` : ''}`;
    
    return `
        <div class="course-list-item ${status}" ${clickHandler} style="${cursorStyle}">
            <div class="course-list-info">
                <h5 class="course-list-title">${training.trainingName}</h5>
                <div class="course-list-details">
                    Duration: ${training.totalDuration || 0} hours • 
                    ${formatDateRange(training.setStartDate, training.setEndDate)} • 
                    ${activitySummary}
                    ${training.isApproved === null ? ' • <strong style="color: #f59e0b;">Pending Approval</strong>' : ''}
                    ${training.isApproved === false ? ' • <strong style="color: #dc2626;">Request Rejected</strong>' : ''}
                    ${training.isOngoingRequired ? ' • <strong style="color: #dc2626;">Required Course - Within Schedule</strong>' : ''}
                    ${training.hasValidCertificates ? ' • <strong style="color: #059669;">Certificate Uploaded</strong>' : ''}
                </div>
            </div>
            <div class="course-list-meta">
                <div class="course-list-badges">
                    <span class="course-list-badge ${training.isOnlineArrangement ? 'online' : 'onsite'}">
                        ${training.isOnlineArrangement ? 'Online' : 'Onsite'}
                    </span>
                    ${checkIfRequired(training) ? '<span class="course-list-badge required">Required by HR</span>' : ''}
                    <span class="course-list-badge ${getStatusClassForBadge(training, status)}">${statusDescription}</span>
                    ${approvalBadge}
                </div>
                <div class="course-list-progress">
                    <div class="course-list-progress-bar">
                        <div class="course-list-progress-fill" style="width: ${progressPercentage}%;"></div>
                    </div>
                    <div class="course-list-progress-text">${progressPercentage}%</div>
                </div>
            </div>
        </div>
    `;
}

function getStatusClassForBadge(training, section) {
    if (section === 'ongoing-required') {
        return 'ongoing-required';
    }
    return getStatusClass(training.status);
}

function checkIfRequired(training) {
    // Check multiple possible locations for the isRequired field
    return training.isRequired === true || 
           training.trainings?.isRequired === true ||
           training.isRequired === 1 ||
           training.trainings?.isRequired === 1;
}

function formatDateRange(startDate, endDate) {
            if (!startDate) return 'No dates set';
            
            const start = new Date(startDate).toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'short', 
                day: 'numeric' 
            });
            
            if (!endDate) return start;
            
            const end = new Date(endDate).toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'short', 
                day: 'numeric' 
            });
            
            return `${start} - ${end}`;
        }

// Navigation function to training details page
function navigateToTrainingDetails(trainingRecordId) {
    if (trainingRecordId) {
        window.location.href = `/employee/training/course/${trainingRecordId}`;
    }
}


function determineTrainingStatus(training) {
            // Check approval status first
            if (training.isApproved === null) {
                return 'Awaiting Approval';
            } else if (training.isApproved === false) {
                return 'Rejected';
            }
            
            // Only check progress for approved trainings
            if (training.isApproved === true) {
                const now = new Date();
                const startDate = training.setStartDate ? new Date(training.setStartDate) : null;
                const endDate = training.setEndDate ? new Date(training.setEndDate) : null;
                const percentage = training.trainingPercentage || 0;
                
                if (percentage >= 100) {
                    return 'Completed';
                }
                
                if (endDate && now > endDate && percentage < 100) {
                    return 'Overdue';
                }
                
                if (startDate && now >= startDate && percentage > 0) {
                    return 'In Progress';
                }
                
                if (startDate && now >= startDate && percentage === 0) {
                    return 'In Progress';
                }
                
                return 'Not Started';
            }
            
            return 'Not Started';
        }



async function loadAllCourses() {
            try {
                const response = await fetch('/employee/training-records', {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' },
                    credentials: 'include'
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                
                if (result.success) {
                    allCoursesData = result.data.map(training => {
                        const status = training.status || determineTrainingStatus(training);
                        return { ...training, status };
                    });
                    renderAllCourses();
                } else {
                    throw new Error(result.message || 'Failed to fetch training records');
                }
            } catch (error) {
                console.error('Error loading training records:', error);
                document.getElementById('allCoursesGrid').innerHTML = 
                    `<div class="loading-state">
                        <i class="fas fa-exclamation-triangle"></i>
                        Failed to load training records. Please refresh the page.
                    </div>`;
            }
        }

        function renderAllCourses() {
            const container = document.getElementById('allCoursesGrid');
            
            if (!allCoursesData || allCoursesData.length === 0) {
                container.innerHTML = `
                    <div style="text-align: center; color: #64748b; padding: 40px; grid-column: 1 / -1;">
                        <i class="fas fa-graduation-cap" style="font-size: 3rem; margin-bottom: 15px; opacity: 0.5;"></i>
                        <p style="font-size: 1.1rem; margin-bottom: 8px;">No training courses assigned</p>
                        <p style="font-size: 0.9rem;">You don't have any training courses assigned to you yet.</p>
                    </div>
                `;
                return;
            }

            const coursesHTML = allCoursesData.map(course => {
                const progressPercentage = course.trainingPercentage || 0;
                const statusClass = course.status ? course.status.toLowerCase().replace(' ', '-') : 'not-started';
                
                // Determine if course should be clickable
                const isClickable = course.isApproved === true;
                const clickHandler = isClickable ? `onclick="navigateToTrainingDetails(${course.trainingRecordId})"` : '';
                
                return `
                    <div class="course-card enhanced ${statusClass}" ${clickHandler} data-training-id="${course.trainingRecordId}">
                        
                        <div class="course-header">
                            <h3 class="course-title">${course.trainings?.trainingName || course.trainingName || 'Unknown Training'}</h3>
                          <div class="course-badges">
    <span class="course-type ${course.trainings?.isOnlineArrangement || course.isOnlineArrangement ? 'online' : 'onsite'}">
        <i class="fas fa-${course.trainings?.isOnlineArrangement || course.isOnlineArrangement ? 'laptop' : 'map-marker-alt'}"></i>
        ${course.trainings?.isOnlineArrangement || course.isOnlineArrangement ? 'Online' : 'Onsite'}
    </span>
    ${(course.trainings?.isRequired || course.isRequired) ? '<span class="course-type required">Required by HR</span>' : ''}
</div>
                        </div>
                        
                        <div class="course-description">
                            ${course.trainings?.trainingDesc || course.trainingDesc || 'No description available'}
                        </div>
                        
                        <div class="course-meta-grid">
                            <div class="meta-item">
                                <i class="fas fa-clock"></i>
                                <span>Duration: ${course.trainings?.totalDuration || course.totalDuration || 0} hours</span>
                            </div>
                            <div class="meta-item">
                                <i class="fas fa-tasks"></i>
                                <span>Activities: ${course.completedActivities || 0}/${course.totalActivities || 0}</span>
                            </div>
                            <div class="meta-item">
                                <i class="fas fa-calendar-alt"></i>
                                <span>${formatDateRange(course.setStartDate, course.setEndDate)}</span>
                            </div>
                            <div class="meta-item">
                                <i class="fas fa-chart-line"></i>
                                <span>Progress: ${Math.round(progressPercentage)}%</span>
                            </div>
                        </div>
                        
                        <div class="course-progress-section">
                            <div class="progress-header">
                                <div class="progress-label-with-status">
                                    <span class="progress-label">Training Progress</span>
                                    <span class="progress-status-indicator ${statusClass}">
                                        ${course.status || 'Not Started'}
                                    </span>
                                </div>
                                <span class="progress-percentage">${Math.round(progressPercentage)}%</span>
                            </div>
                            <div class="course-progress-bar">
                                <div class="progress-fill" style="width: ${progressPercentage}%;">
                                    <div class="progress-shine"></div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="course-footer">
                            <div class="course-dates">
                                ${course.setStartDate ? `<small><i class="fas fa-play"></i> Started: ${formatDate(course.setStartDate)}</small>` : ''}
                                ${course.setEndDate ? `<small><i class="fas fa-flag-checkered"></i> Deadline: ${formatDate(course.setEndDate)}</small>` : ''}
                            </div>
                            <div class="click-indicator">
                                <i class="fas fa-arrow-right"></i>
                                ${isClickable ? 'View Details' : 'Pending Approval'}
                            </div>
                        </div>
                    </div>
                `;
            }).join('');

            container.innerHTML = coursesHTML;
        }

        function renderCertificates(certificates) {
    const container = document.getElementById('certificatesList');
    
    if (!certificates || certificates.length === 0) {
        container.innerHTML = `
            <div style="text-align: center; color: #64748b; padding: 40px;">
                <i class="fas fa-certificate" style="font-size: 2rem; margin-bottom: 10px; opacity: 0.5;"></i>
                <p style="font-size: 1.1rem; margin-bottom: 8px;">No certificates available yet</p>
                <p style="font-size: 0.9rem;">Complete your training courses to earn certificates.</p>
            </div>
        `;
        return;
    }

    // Filter certificates that have valid URLs (handle both field naming conventions)
    const validCertificates = certificates.filter(cert => {
        const url = cert.certificate_url || cert.certificateUrl;
        return url && url.trim() !== '';
    });

    if (validCertificates.length === 0) {
        container.innerHTML = `
            <div style="text-align: center; color: #64748b; padding: 40px;">
                <i class="fas fa-certificate" style="font-size: 2rem; margin-bottom: 10px; opacity: 0.5;"></i>
                <p style="font-size: 1.1rem; margin-bottom: 8px;">No certificate files available</p>
                <p style="font-size: 0.9rem;">Certificates will appear here once they are uploaded.</p>
            </div>
        `;
        return;
    }

    const certificatesHTML = validCertificates.map(cert => {
        // Handle different date field names
        const dateField = cert.created_at || cert.issuedDate;
        const formattedDate = dateField ? 
            new Date(dateField).toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'short', 
                day: 'numeric' 
            }) : 'Date not available';

        // Handle different field naming conventions
        const certificateUrl = cert.certificate_url || cert.certificateUrl;
        const certificateTitle = cert.trainingCertTitle || cert.trainingName || 'Training Certificate';
        const certificateDesc = cert.trainingCertDesc || 'Certificate of completion';

        return `
            <div class="certificate-list-item uploaded">
                <div class="certificate-list-info">
                    <div class="certificate-list-icon">
                        <i class="fas fa-certificate"></i>
                    </div>
                    <div class="certificate-list-details">
                        <h4 class="certificate-list-title">${certificateTitle}</h4>
                        <div class="certificate-list-meta">
                            <strong>Training:</strong> ${cert.trainingName || 'Unknown Training'}<br>
                            <strong>Description:</strong> ${certificateDesc}<br>
                            <strong>Issued:</strong> ${formattedDate}<br>
                            <strong>Record ID:</strong> ${cert.trainingRecordId || 'N/A'}
                        </div>
                    </div>
                </div>
                <div class="certificate-list-actions">
                    <div class="certificate-list-id">CERT-${cert.trainingRecordCertificateId || cert.trainingCertId || 'N/A'}</div>
                    <i class="fas fa-external-link-alt certificate-download" 
                       onclick="viewCertificate('${certificateUrl}')" 
                       title="View Certificate"
                       style="cursor: pointer; color: #07ACB9; font-size: 1.1rem; padding: 4px; border-radius: 4px; transition: background-color 0.2s ease;"
                       onmouseover="this.style.backgroundColor='#f0fdff'" 
                       onmouseout="this.style.backgroundColor='transparent'"></i>
                </div>
            </div>
        `;
    }).join('');

    container.innerHTML = certificatesHTML;
}

        function viewCertificate(certificateUrl) {
    if (!certificateUrl || certificateUrl.trim() === '') {
        alert('Certificate URL not available');
        return;
    }
    
    // Check if URL is relative or absolute
    let fullUrl = certificateUrl;
    if (!certificateUrl.startsWith('http://') && !certificateUrl.startsWith('https://')) {
        // If it's a relative URL, you might need to prepend your domain
        // Adjust this based on how your certificate URLs are stored
        fullUrl = certificateUrl.startsWith('/') ? certificateUrl : '/' + certificateUrl;
    }
    
    // Open certificate in new tab/window
    window.open(fullUrl, '_blank', 'noopener,noreferrer');
}

        function downloadCertificate(certId) {
            window.open(`/employee/certificates/${certId}/download`, '_blank');
        }


// Utility function to format dates
function formatDate(dateString) {
    if (!dateString) return 'Not set';
    return new Date(dateString).toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'short', 
        day: 'numeric' 
    });
}

        function scrollToSection(sectionId) {
            const section = document.getElementById(sectionId);
            if (section) {
                section.scrollIntoView({ 
                    behavior: 'smooth',
                    block: 'start'
                });
                
                // Add a subtle highlight effect
                section.style.backgroundColor = '#f0fdff';
                setTimeout(() => {
                    section.style.backgroundColor = '';
                }, 2000);
            }
        }

        // Action handlers
        function updateProgress(trainingId) {
            // Redirect to training progress update page or open modal
            window.location.href = `/employee/training/course/${trainingId}`;
        }

        // Upload certificate functionality
        document.addEventListener('DOMContentLoaded', function() {
            const uploadBtn = document.querySelector('.upload-certificate-btn');
            if (uploadBtn) {
                uploadBtn.addEventListener('click', function() {
                    const fileInput = document.createElement('input');
                    fileInput.type = 'file';
                    fileInput.accept = '.pdf,.jpg,.jpeg,.png';
                    fileInput.style.display = 'none';
                    
                    fileInput.addEventListener('change', function() {
                        if (this.files.length > 0) {
                            uploadCertificateFile(this.files[0]);
                        }
                    });
                    
                    document.body.appendChild(fileInput);
                    fileInput.click();
                    document.body.removeChild(fileInput);
                });
            }
        });

        async function uploadCertificateFile(file) {
            const formData = new FormData();
            formData.append('certificate', file);
            
            try {
                const response = await fetch('/employee/certificates/upload', {
                    method: 'POST',
                    body: formData,
                    credentials: 'include'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert('Certificate uploaded successfully!');
                    loadCertificates(); // Reload certificates
                } else {
                    throw new Error(result.message || 'Upload failed');
                }
            } catch (error) {
                console.error('Error uploading certificate:', error);
                alert('Failed to upload certificate. Please try again.');
            }
        }
async function loadCertificates() {
    console.log('Loading certificates...'); // Debug log
    
    try {
        const response = await fetch('/employee/certificates', {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include'
        });

        console.log('Response status:', response.status); // Debug log

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        console.log('Certificates result:', result); // Debug log
        
        if (result.success) {
            console.log('Certificates data:', result.data); // Debug log
            renderCertificates(result.data || []);
        } else {
            throw new Error(result.message || 'Failed to fetch certificates');
        }
    } catch (error) {
        console.error('Error loading certificates:', error);
        document.getElementById('certificatesList').innerHTML = 
            `<div style="text-align: center; color: #64748b; padding: 40px;">
                <i class="fas fa-exclamation-triangle" style="font-size: 2rem; color: #ef4444; margin-bottom: 10px;"></i>
                <p style="margin: 0; color: #64748b;">Failed to load certificates</p>
                <p style="margin: 5px 0; color: #ef4444; font-size: 0.9rem;">${error.message}</p>
                <button onclick="loadCertificates()" style="margin-top: 10px; padding: 8px 16px; background: #07ACB9; color: white; border: none; border-radius: 4px; cursor: pointer;">
                    <i class="fas fa-retry"></i> Retry
                </button>
            </div>`;
    }
}

function renderCertificates(certificates) {
    const container = document.getElementById('certificatesList');
    
    if (!certificates || certificates.length === 0) {
        container.innerHTML = `
            <div style="text-align: center; color: #64748b; padding: 40px;">
                <i class="fas fa-certificate" style="font-size: 2rem; margin-bottom: 10px; opacity: 0.5;"></i>
                <p style="font-size: 1.1rem; margin-bottom: 8px;">No certificates available yet</p>
                <p style="font-size: 0.9rem;">Complete your training courses to earn certificates.</p>
            </div>
        `;
        return;
    }

    // Filter certificates that have valid URLs
    const validCertificates = certificates.filter(cert => cert.certificate_url && cert.certificate_url.trim() !== '');

    if (validCertificates.length === 0) {
        container.innerHTML = `
            <div style="text-align: center; color: #64748b; padding: 40px;">
                <i class="fas fa-certificate" style="font-size: 2rem; margin-bottom: 10px; opacity: 0.5;"></i>
                <p style="font-size: 1.1rem; margin-bottom: 8px;">No certificate files available</p>
                <p style="font-size: 0.9rem;">Certificates will appear here once they are uploaded.</p>
            </div>
        `;
        return;
    }

    const certificatesHTML = validCertificates.map(cert => {
        const formattedDate = cert.created_at ? 
            new Date(cert.created_at).toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'short', 
                day: 'numeric' 
            }) : 'Date not available';

        return `
            <div class="certificate-list-item uploaded">
                <div class="certificate-list-info">
                    <div class="certificate-list-icon">
                        <i class="fas fa-certificate"></i>
                    </div>
                    <div class="certificate-list-details">
                        <h4 class="certificate-list-title">${cert.trainingName || 'Training Certificate'}</h4>
                        <div class="certificate-list-meta">
                            <strong>Training:</strong> ${cert.trainingName || 'Unknown Training'}<br>
                            <strong>Issued:</strong> ${formattedDate}<br>
                            <strong>Record ID:</strong> ${cert.trainingRecordId || 'N/A'}
                        </div>
                    </div>
                </div>
                <div class="certificate-list-actions">
                    <div class="certificate-list-id">CERT-${cert.trainingRecordCertificateId || 'N/A'}</div>
                    <i class="fas fa-external-link-alt certificate-download" 
                       onclick="viewCertificate('${cert.certificate_url}')" 
                       title="View Certificate"
                       style="cursor: pointer; color: #07ACB9; font-size: 1.1rem; padding: 4px; border-radius: 4px; transition: background-color 0.2s ease;"
                       onmouseover="this.style.backgroundColor='#f0fdff'" 
                       onmouseout="this.style.backgroundColor='transparent'"></i>
                </div>
            </div>
        `;
    }).join('');

    container.innerHTML = certificatesHTML;
}
        // View toggle functionality
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('.view-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelectorAll('.view-btn').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    
                    // You can implement different view logic here
                    // For example, switching between list and calendar view
                    const isCalendarView = this.textContent.includes('Calendar');
                    if (isCalendarView) {
                        // Switch to calendar view logic
                        console.log('Switching to calendar view');
                    } else {
                        // Switch to list view logic
                        console.log('Switching to list view');
                    }
                });
            });
        });

        // Progress category click handlers
        document.addEventListener('DOMContentLoaded', function() {
            // This will be set up when progress categories are rendered
            // The actual event listeners are added in renderProgressCategories()
        });

        // Error handling for fetch requests
        function handleFetchError(error, context) {
            console.error(`Error in ${context}:`, error);
            
            if (error.name === 'TypeError' && error.message.includes('fetch')) {
                return 'Network error. Please check your connection and try again.';
            } else if (error.message.includes('401') || error.message.includes('unauthorized')) {
                return 'Session expired. Please log in again.';
            } else if (error.message.includes('403') || error.message.includes('forbidden')) {
                return 'Access denied. You do not have permission to perform this action.';
            } else if (error.message.includes('404') || error.message.includes('not found')) {
                return 'The requested resource was not found.';
            } else if (error.message.includes('500') || error.message.includes('internal server')) {
                return 'Server error. Please try again later.';
            } else {
                return error.message || 'An unexpected error occurred.';
            }
        }

        // Refresh data functionality
        function refreshAllData() {
            Promise.all([
                loadTrainingProgress(),
                loadAllCourses(),
                loadCertificates()
            ]).then(() => {
                console.log('All data refreshed successfully');
            }).catch(error => {
                console.error('Error refreshing data:', error);
                alert('Failed to refresh some data. Please check your connection and try again.');
            });
        }

        // Add refresh button functionality if you want to include one
        function addRefreshButton() {
            const refreshBtn = document.createElement('button');
            refreshBtn.innerHTML = '<i class="fas fa-sync-alt"></i> Refresh';
            refreshBtn.className = 'btn btn-outline-secondary btn-sm';
            refreshBtn.style.cssText = 'position: fixed; bottom: 20px; right: 20px; z-index: 1000;';
            refreshBtn.addEventListener('click', refreshAllData);
            document.body.appendChild(refreshBtn);
        }

        // Initialize refresh button (optional)
        // addRefreshButton();




        function toggleCheckbox(checkboxId) {
            const checkbox = document.getElementById(checkboxId);
            const checkboxItem = checkbox.closest('.checkbox-item');
            
            checkbox.checked = !checkbox.checked;
            checkboxItem.classList.toggle('selected', checkbox.checked);
        }

        // Handle form submission
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('trainingRequestForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                const formData = {
                    trainingCourse: document.getElementById('trainingCourse').value,
                    objectives: Array.from(document.querySelectorAll('#objectiveAreas input:checked')).map(cb => cb.value),
                    skills: Array.from(document.querySelectorAll('#skillAreas input:checked')).map(cb => cb.value),
                    startDate: document.getElementById('startDate').value,
                    endDate: document.getElementById('endDate').value
                };
                
                console.log('Training Request Submitted:', formData);
                alert('Training request submitted successfully! Your line manager will be notified for approval.');
                closeTrainingRequestModal();
            });
        });

// Close modal when clicking outside
document.addEventListener('click', function(event) {
    const modal = document.getElementById('trainingRequestModal');
    if (event.target === modal) {
        closeTrainingRequestModal();
    }
});

// Close modal with Escape key
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
        const modal = document.getElementById('trainingRequestModal');
        if (modal && modal.classList.contains('show')) {
            closeTrainingRequestModal();
        }
    }
});


// Global error handler for uncaught errors
window.addEventListener('error', function(e) {
    console.error('Global error caught:', e.error);
    console.log('Error occurred at:', e.filename, 'line:', e.lineno);
    
    // Don't reset modal on errors - just log them
    return false; // Don't prevent default error handling
});

window.debugFormState = function() {
    console.log('=== FORM STATE DEBUG ===');
    console.log('selectedTraining:', selectedTraining);
    console.log('selectedScheduleType:', selectedScheduleType);
    console.log('trainingId input:', document.getElementById('selectedTrainingId').value);
    console.log('startDate:', document.getElementById('startDate').value);
    console.log('endDate:', document.getElementById('endDate').value);
    console.log('customHours:', document.getElementById('customHoursPerDay').value);
    console.log('submitButton disabled:', document.getElementById('submitButton').disabled);
    console.log('form validation result:', validateForm());
};



function debugPercentageIssues() {
    console.log('🔍 DEBUGGING PERCENTAGE ISSUES');
    console.log('====================================');
    
    if (!window.trainingProgressData?.trainings) {
        console.log('❌ No training data found');
        return;
    }
    
    const trainings = window.trainingProgressData.trainings;
    console.log(`📊 Found ${trainings.length} training records`);
    
    // Focus on required trainings with issues
    const problematicTrainings = trainings.filter(training => {
        const hasInProgress = training.inProgressActivities > 0;
        const hasZeroPercentage = training.trainingPercentage === 0;
        return hasInProgress && hasZeroPercentage;
    });
    
    console.log(`🚨 Found ${problematicTrainings.length} trainings with in-progress activities but 0% completion`);
    
    problematicTrainings.forEach((training, index) => {
        console.log(`\n--- Problem Training ${index + 1}: ${training.trainingName} ---`);
        console.log(`Backend Data:`);
        console.log(`  - Training Percentage: ${training.trainingPercentage}%`);
        console.log(`  - Total Activities: ${training.totalActivities}`);
        console.log(`  - Completed Activities: ${training.completedActivities}`);
        console.log(`  - In Progress Activities: ${training.inProgressActivities}`);
        console.log(`  - Training Status: ${training.trainingStatus}`);
        console.log(`  - Display Status: ${training.status}`);
        console.log(`  - Is Required: ${training.isRequired}`);
        console.log(`  - Is Approved: ${training.isApproved}`);
        
        // Manual calculation
        if (training.totalActivities > 0) {
            const manualPercentage = Math.round(
                ((training.completedActivities * 1.0) + (training.inProgressActivities * 0.5)) / 
                training.totalActivities * 100
            );
            console.log(`  - Manual Calculation: ${manualPercentage}%`);
            console.log(`  - Difference: ${manualPercentage - training.trainingPercentage}%`);
        }
        
        if (training._debug) {
            console.log(`Backend Debug:`, training._debug);
        }
    });
    
    return problematicTrainings;
}

function testPercentageCalculation(trainingRecordId) {
    console.log(`🧪 TESTING PERCENTAGE CALCULATION FOR RECORD ${trainingRecordId}`);
    
    if (!window.trainingProgressData?.trainings) {
        console.log('❌ No training data available');
        return;
    }
    
    const training = window.trainingProgressData.trainings.find(t => t.trainingRecordId === trainingRecordId);
    
    if (!training) {
        console.log(`❌ Training record ${trainingRecordId} not found`);
        return;
    }
    
    console.log(`\n=== Testing ${training.trainingName} ===`);
    console.log(`Current backend percentage: ${training.trainingPercentage}%`);
    console.log(`Activities: ${training.completedActivities}/${training.totalActivities} (${training.inProgressActivities} in progress)`);
    
    // Test different calculation methods
    if (training.totalActivities > 0) {
        const method1 = Math.round((training.completedActivities / training.totalActivities) * 100);
        const method2 = Math.round(((training.completedActivities + training.inProgressActivities) / training.totalActivities) * 100);
        const method3 = Math.round(((training.completedActivities * 1.0) + (training.inProgressActivities * 0.5)) / training.totalActivities * 100);
        
        console.log(`\nCalculation Methods:`);
        console.log(`  Method 1 (completed only): ${method1}%`);
        console.log(`  Method 2 (completed + in-progress): ${method2}%`);
        console.log(`  Method 3 (completed + 50% in-progress): ${method3}%`);
        console.log(`  Current backend: ${training.trainingPercentage}%`);
        
        // Recommend the best method
        if (training.inProgressActivities > 0 && training.trainingPercentage === 0) {
            console.log(`\n🔧 RECOMMENDATION: Backend should use Method 3 (${method3}%)`);
        }
    }
    
    return training;
}

function forceRefreshTrainingData() {
    console.log('🔄 FORCING TRAINING DATA REFRESH');
    
    // Clear current data
    window.trainingProgressData = { trainings: [] };
    
    // Reload data
    loadTrainingProgress().then(() => {
        console.log('✅ Training data refreshed');
        debugPercentageIssues();
    }).catch(error => {
        console.error('❌ Failed to refresh data:', error);
    });
}

// Make functions globally available
window.debugPercentageIssues = debugPercentageIssues;
window.testPercentageCalculation = testPercentageCalculation;
window.forceRefreshTrainingData = forceRefreshTrainingData;

// Auto-run on page load
console.log('🚀 Percentage debugging tools loaded. Available functions:');
console.log('  - debugPercentageIssues()');
console.log('  - testPercentageCalculation(trainingRecordId)');
console.log('  - forceRefreshTrainingData()');
    </script>
</body>
</html>