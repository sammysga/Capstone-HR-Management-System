<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Course Progress - Prime Infra</title>
    <link rel="stylesheet" href="/css/sidebar.css">
    <link rel="stylesheet" href="/css/recordsandperformancetracker.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        /* Import Inter font */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');

        /* Main content styling */
        .main-content {
            margin-left: 270px;
            padding: 30px;
            font-family: 'Inter', sans-serif;
            background-color: #f8fafc;
            min-height: 100vh;
        }

        /* Course header */
        .course-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 30px;
        }

        .course-info h1 {
            font-size: 1.8rem;
            font-weight: 600;
            color: #334155;
            margin: 0 0 5px 0;
        }

        .course-info p {
            color: #64748b;
            font-size: 14px;
            margin: 0;
        }

        .training-mode-badge {
            background-color: #f1f5f9;
            color: #475569;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
            border: 1px solid #e2e8f0;
            margin-right: 50px;
        }

        .training-mode-label {
            color: #64748b;
            margin-right: 8px;
        }

        /* Course details section */
        .course-details {
            background-color: white;
            border-radius: 12px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .details-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 30px;
        }

        .detail-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .detail-label {
            font-size: 14px;
            color: #64748b;
            font-weight: 500;
        }

        .detail-value {
            padding: 12px 16px;
            background-color: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            font-size: 14px;
            color: #334155;
        }

        .focus-areas {
            margin-bottom: 25px;
        }

        .focus-areas h3 {
            font-size: 14px;
            color: #64748b;
            font-weight: 500;
            margin: 0 0 12px 0;
        }

        .tags-container {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }

        .tag {
            background-color: #e0f2fe;
            color: #0369a1;
            padding: 6px 12px;
            border-radius: 16px;
            font-size: 12px;
            font-weight: 500;
        }

        /* Activities section */
        .activities-section {
            background-color: white;
            border-radius: 12px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .activities-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
        }

        .activities-title {
            font-size: 1.4rem;
            font-weight: 600;
            color: #0891b2;
            margin: 0;
        }

        .total-duration {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
        }

        .duration-label {
            color: #64748b;
            font-weight: 500;
        }

        .duration-value {
            color: #334155;
            font-weight: 600;
        }

        /* Activities table */
        .activities-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 14px;
            margin-bottom: 20px;
        }

        .activities-table th {
            background-color: #f8fafc;
            padding: 12px 16px;
            text-align: left;
            border: 1px solid #e2e8f0;
            font-weight: 600;
            color: #374151;
            font-size: 13px;
        }

        .activities-table td {
            padding: 12px 16px;
            border: 1px solid #e2e8f0;
            color: #64748b;
            vertical-align: middle;
        }

        .activities-table tbody tr:hover {
            background-color: #f8fafc;
        }

        /* Editable fields highlighting */
        .editable-field {
            position: relative;
            transition: all 0.3s ease;
        }

        .editable-field::before {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            background: linear-gradient(45deg, #07ACB9, #124A5C);
            border-radius: 8px;
            z-index: -1;
            opacity: 0.1;
        }

        .editable-field:hover::before {
            opacity: 0.2;
        }

        .editable-field.changed::before {
            opacity: 0.3;
            animation: pulse 1s ease-in-out;
        }

        /* Status dropdown styling */
        .status-select {
            padding: 8px 12px;
            border: 2px solid #07ACB9;
            border-radius: 8px;
            font-size: 12px;
            font-weight: 600;
            background-color: white;
            cursor: pointer;
            min-width: 130px;
            box-shadow: 0 2px 4px rgba(7, 172, 185, 0.1);
            transition: all 0.2s ease;
        }

        .status-select:focus {
            outline: none;
            border-color: #124A5C;
            box-shadow: 0 0 0 3px rgba(7, 172, 185, 0.2);
        }

        .status-select.not-started {
            background-color: #f8fafc;
            color: #64748b;
            border-color: #64748b;
        }

        .status-select.in-progress {
            background-color: #f0fdff;
            color: #0891b2;
            border-color: #07ACB9;
        }

        .status-select.completed {
            background-color: #ecfdf5;
            color: #059669;
            border-color: #10b981;
        }

        /* Timestamp display styling */
        .timestamp-display {
            padding: 8px 12px;
            background-color: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            font-size: 12px;
            color: #64748b;
            min-width: 140px;
            text-align: center;
        }

        .timestamp-display.has-value {
            background-color: #ecfdf5;
            border-color: #10b981;
            color: #059669;
            font-weight: 500;
        }

        /* Certificates section */
        .certificates-section {
            background-color: white;
            border-radius: 12px;
            padding: 30px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .certificates-title {
            font-size: 1.4rem;
            font-weight: 600;
            color: #0891b2;
            margin: 0 0 20px 0;
        }

        .certificates-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .certificate-card {
            background-color: #f8fafc;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            padding: 20px;
            transition: all 0.3s ease;
            position: relative;
        }

        .certificate-card:hover {
            border-color: #07ACB9;
            background-color: #f0fdff;
        }

        .certificate-card.uploaded {
            border-color: #10b981;
            background-color: #ecfdf5;
        }

        .certificate-card.disabled {
            opacity: 0.6;
            pointer-events: none;
            background-color: #f1f5f9;
            border-color: #cbd5e1;
        }

        .certificate-header {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 15px;
        }

        .certificate-icon {
            background-color: #07ACB9;
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
        }

        .certificate-icon.disabled {
            background-color: #94a3b8;
        }

        .certificate-title {
            font-size: 16px;
            font-weight: 600;
            color: #334155;
            margin: 0;
        }

        .certificate-desc {
            color: #64748b;
            font-size: 14px;
            line-height: 1.5;
            margin-bottom: 15px;
        }

        .certificate-actions {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        /* Upload area styling */
        .upload-area {
            border: 2px dashed #ccc;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            background: #fff;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .upload-area:hover {
            border-color: #007bff;
            background: #f8f9fa;
        }

        .upload-area.dragover {
            border-color: #007bff;
            background: #e3f2fd;
        }

        .upload-area.disabled {
            border-color: #cbd5e1;
            background: #f8fafc;
            cursor: not-allowed;
            color: #94a3b8;
        }

        .file-input {
            display: none;
        }

        .upload-btn {
            background-color: #124A5C;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 12px;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 6px;
            transition: all 0.2s ease;
        }

        .upload-btn:hover {
            background-color: #0d3c4a;
        }

        .upload-btn:disabled {
            background-color: #94a3b8;
            cursor: not-allowed;
        }

        .download-btn {
            background-color: #07ACB9;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 12px;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 6px;
            transition: all 0.2s ease;
        }

        .download-btn:hover {
            background-color: #059ca4;
        }

        .replace-btn {
            background-color: #6c757d;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 12px;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 6px;
            transition: all 0.2s ease;
        }

        .replace-btn:hover {
            background-color: #545b62;
        }

        .success-indicator {
            color: #28a745;
            font-weight: bold;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .uploaded-file {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            padding: 15px;
            border-radius: 8px;
            color: #155724;
        }

        .progress-bar {
            width: 100%;
            height: 20px;
            background: #e9ecef;
            border-radius: 10px;
            overflow: hidden;
            margin: 10px 0;
        }

        .progress-fill {
            height: 100%;
            background: #007bff;
            width: 0%;
            transition: width 0.3s ease;
        }

        .error-message {
            color: #dc3545;
            font-size: 14px;
            margin-top: 5px;
        }

        .completion-requirement {
            background: #fef3c7;
            border: 1px solid #f59e0b;
            border-radius: 8px;
            padding: 12px;
            margin-bottom: 15px;
            color: #92400e;
            font-size: 13px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        /* Loading states */
        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 12px;
            z-index: 10;
        }

        .loading-spinner {
            color: #07ACB9;
            font-size: 1.5rem;
            animation: spin 1s linear infinite;
        }

        /* Save all button */
        .save-all-btn {
            background-color: #059669;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: all 0.2s ease;
            margin-bottom: 20px;
        }

        .save-all-btn:hover {
            background-color: #047857;
            transform: translateY(-2px);
        }

        .save-all-btn:disabled {
            background-color: #9ca3af;
            cursor: not-allowed;
            transform: none;
        }

        /* Activity update feedback */
        .updating {
            opacity: 0.6;
            pointer-events: none;
            position: relative;
        }

        .updating::after {
            content: '';
            position: absolute;
            top: 50%;
            right: 5px;
            width: 12px;
            height: 12px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #007bff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            transform: translateY(-50%);
        }

        .success {
            border-color: #28a745 !important;
            background-color: #d4edda !important;
        }

        .error {
            border-color: #dc3545 !important;
            background-color: #f8d7da !important;
        }

        /* Instructions banner */
        .instructions-banner {
            background: #e0f2fe;
            border: 1px solid #0891b2;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            color: #0c4a6e;
            font-size: 13px;
            line-height: 1.4;
        }

        .instructions-banner strong {
            color: #0891b2;
        }

        .instructions-banner ul {
            margin: 8px 0 0 20px;
            padding: 0;
        }

        .instructions-banner li {
            margin: 4px 0;
        }

        /* Animations */
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @keyframes pulse {
            0%, 100% { opacity: 0.1; }
            50% { opacity: 0.3; }
        }

        /* Mobile responsive */
        @media (max-width: 768px) {
            .main-content {
                margin-left: 0;
                padding: 20px;
            }

            .course-header {
                flex-direction: column;
                gap: 15px;
                align-items: flex-start;
            }

            .details-grid {
                grid-template-columns: 1fr;
                gap: 20px;
            }

            .activities-table {
                font-size: 12px;
            }

            .activities-table th,
            .activities-table td {
                padding: 8px 10px;
            }

            .certificates-grid {
                grid-template-columns: 1fr;
            }
        }

        /* Table responsiveness */
        @media (max-width: 1024px) {
            .activities-table {
                display: block;
                overflow-x: auto;
                white-space: nowrap;
            }
        }
    </style>
</head>
<body>
    <%- include('../../../partials/employee_partials') %>
    
       <!-- Main content area -->
    <div class="main-content">
        <!-- Course Header -->
        <div class="course-header">
            <div class="course-info">
                <h1 id="trainingName">Loading...</h1>
                <p>Professional Development Course</p>
            </div>
            <div class="training-mode-badge">
                <span class="training-mode-label">Training Mode:</span>
                <span id="trainingMode">Loading...</span>
            </div>
        </div>

        <!-- Course Details -->
        <div class="course-details">
            <div class="details-grid">
                <div class="detail-group">
                    <label class="detail-label">Set Start Date:</label>
                    <div class="detail-value" id="startDate">Loading...</div>
                </div>
                <div class="detail-group">
                    <label class="detail-label">Set End Date:</label>
                    <div class="detail-value" id="endDate">Loading...</div>
                </div>
            </div>

            <div class="focus-areas" id="objectivesSection">
                <h3>Focus Objective Areas:</h3>
                <div class="tags-container" id="objectivesTags">
                    <div class="tag">Loading...</div>
                </div>
            </div>

            <div class="focus-areas" id="skillsSection">
                <h3>Focus Skill Areas:</h3>
                <div class="tags-container" id="skillsTags">
                    <div class="tag">Loading...</div>
                </div>
            </div>
        </div>

        <!-- Activities Section -->
        <div class="activities-section">
            <div class="activities-header">
                <h2 class="activities-title">Activities</h2>
                <div class="total-duration">
                    <span class="duration-label">Total Duration:</span>
                    <span class="duration-value" id="totalDuration">Loading...</span>
                </div>
            </div>

            <div class="instructions-banner">
                <strong><i class="fas fa-info-circle"></i> Activity Tracking Instructions:</strong>
                <ul>
                    <li><strong>Not Started → In Progress:</strong> Automatically records the start timestamp</li>
                    <li><strong>In Progress → Completed:</strong> Automatically records the completion timestamp</li>
                    <li><strong>Status changes are saved immediately</strong> - no need to click save buttons</li>
                    <li><strong>Timestamps are read-only</strong> and managed automatically by the system</li>
                </ul>
            </div>

            <div class="table-container">
                <table class="activities-table" id="activitiesTable">
                    <thead>
                        <tr>
                            <th>Activity Name</th>
                            <th>Estimated Time</th>
                            <th style="background-color: #f0fdff; color: #124A5C; font-weight: 700;">
                                <i class="fas fa-edit" style="margin-right: 5px;"></i>Status
                            </th>
                            <th style="background-color: #f8fafc; color: #64748b; font-weight: 600;">
                                <i class="fas fa-clock" style="margin-right: 5px;"></i>Time Started
                            </th>
                            <th style="background-color: #f8fafc; color: #64748b; font-weight: 600;">
                                <i class="fas fa-check-circle" style="margin-right: 5px;"></i>Time Completed
                            </th>
                            <th>Type</th>
                            <th>Remarks</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="7" style="text-align: center; padding: 40px;">
                                <i class="fas fa-spinner fa-spin loading-spinner"></i>
                                Loading activities...
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <!-- <div class="bulk-actions-section" style="margin-top: 20px; padding: 15px; background: #f8fafc; border-radius: 8px; border: 1px solid #e2e8f0;">
                <h4 style="margin: 0 0 10px 0; color: #374151; font-size: 14px;">
                    <i class="fas fa-layer-group" style="margin-right: 8px; color: #07ACB9;"></i>
                    Bulk Actions (Optional)
                </h4>
                <p style="margin: 0 0 15px 0; font-size: 13px; color: #64748b;">
                    Use this only if you need to apply changes to multiple activities at once or if individual auto-save fails.
                </p>
                <button class="save-all-btn" id="saveAllBtnBottom" onclick="saveAllActivities()" disabled style="margin: 0;">
                    <i class="fas fa-save"></i>
                    Save All Changes
                </button>
            </div> -->
        </div>

        <!-- Certificates Section -->
        <div class="certificates-section">
            <h2 class="certificates-title" id="certificatesTitle">Training Certificates</h2>
            <div class="completion-requirement" id="completionRequirement" style="display: none;">
                <i class="fas fa-exclamation-triangle"></i>
                <span>Complete all activities before uploading certificates</span>
            </div>
            <div class="certificates-grid" id="certificatesGrid">
                <div class="certificate-card">
                    <div class="loading-overlay">
                        <i class="fas fa-spinner fa-spin loading-spinner"></i>
                    </div>
                    <div class="certificate-header">
                        <div class="certificate-icon">
                            <i class="fas fa-certificate"></i>
                        </div>
                        <h3 class="certificate-title">Loading...</h3>
                    </div>
                    <div class="certificate-desc">Loading certificates...</div>
                </div>
            </div>
        </div>
    </div>

    <script>
    // Embed the training data from the server into the page
    window.trainingData = <%- JSON.stringify(data) %>;
    console.log('🎯 Training data embedded from server:', window.trainingData);
</script>

    <!-- JavaScript for interactions -->
    <script>
        let trainingData = null;
        let hasUnsavedChanges = false;
        let allActivitiesCompleted = false;
       const trainingRecordId = window.location.pathname.split('/').pop();

document.addEventListener('DOMContentLoaded', async () => {
        // Use the embedded data instead of making an AJAX call
        if (window.trainingData) {
            console.log('✅ Using embedded training data');
            trainingData = window.trainingData;
            displayTrainingData();
        } else {
            console.log('⚠️ No embedded data found, falling back to AJAX');
            await loadTrainingData();
        }
        
        await loadCertificates();
        setupEventListeners();
    });

      async function loadTrainingData() {
    try {
        console.log('🔄 Loading training data via AJAX for trainingRecordId:', trainingRecordId);
        
        const response = await fetch(`/employee/training/${trainingRecordId}/details`, {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include'
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
        }

        const result = await response.json();
        
        if (result.success) {
            trainingData = result.data;
            console.log('✅ Training data loaded via AJAX:', trainingData);
            displayTrainingData();
        } else {
            throw new Error(result.message || 'Failed to fetch training data');
        }
    } catch (error) {
        console.error('❌ Error loading training data:', error);
        showError('Failed to load training data: ' + error.message);
        
        // Show the error in the UI
        const tableBody = document.querySelector('#activitiesTable tbody');
        if (tableBody) {
            tableBody.innerHTML = `
                <tr>
                    <td colspan="7" style="text-align: center; padding: 40px; color: #dc2626;">
                        <i class="fas fa-exclamation-triangle"></i><br>
                        Failed to load training data<br>
                        <small>${error.message}</small>
                    </td>
                </tr>
            `;
        }
    }
}

        async function loadSkillsAndObjectives() {
            try {
                // Get user's job ID from staff data
                const userResponse = await fetch('/employee/user-job-info', {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' },
                    credentials: 'include'
                });

                if (userResponse.ok) {
                    const userResult = await userResponse.json();
                    if (userResult.success && userResult.data.jobId) {
                        // Fetch skills for this job
                        const skillsResponse = await fetch(`/employee/job/${userResult.data.jobId}/skills`);
                        if (skillsResponse.ok) {
                            const skillsResult = await skillsResponse.json();
                            if (skillsResult.success) {
                                trainingData.jobSkills = skillsResult.data;
                            }
                        }

                        // Fetch objectives for this user
                        const objectivesResponse = await fetch(`/employee/user/objectives`);
                        if (objectivesResponse.ok) {
                            const objectivesResult = await objectivesResponse.json();
                            if (objectivesResult.success) {
                                trainingData.userObjectives = objectivesResult.data;
                            }
                        }
                    }
                }
            } catch (error) {
                console.error('Error loading skills and objectives:', error);
                // Continue without this data
            }
        }

     async function loadCertificates() {
    try {
        console.log('📂 [Frontend] Loading certificates for training record:', trainingRecordId);
        
        const response = await fetch(`/employee/training/${trainingRecordId}/certificates`);
        const result = await response.json();
        
        console.log('📂 [Frontend] Certificates API response:', result);
        
        if (result.success) {
            if (result.data && Array.isArray(result.data)) {
                displayCertificates(result.data);
            } else {
                console.error('❌ [Frontend] Invalid certificates data:', result.data);
                showError('Failed to load certificates: Invalid data format');
            }
        } else {
            console.error('❌ [Frontend] Failed to load certificates:', result.message);
            showError('Failed to load certificates: ' + (result.message || 'Unknown error'));
        }
    } catch (error) {
        console.error('❌ [Frontend] Error loading certificates:', error);
        showError('Error loading certificates. Please refresh the page.');
    }
}


function displayCertificates(certificates) {
    const container = document.getElementById('certificatesGrid');
    container.innerHTML = '';
    
    console.log('📊 [Frontend] Displaying certificates:', certificates);
    
    if (!certificates || certificates.length === 0) {
        container.innerHTML = `
            <div class="certificate-card ${!allActivitiesCompleted ? 'disabled' : ''}">
                <div class="certificate-header">
                    <div class="certificate-icon ${!allActivitiesCompleted ? 'disabled' : ''}">
                        <i class="fas fa-info-circle"></i>
                    </div>
                    <h3 class="certificate-title">No Certificates Available</h3>
                </div>
                <div class="certificate-desc">
                    No certificates are configured for this training.
                </div>
            </div>
        `;
        return;
    }

    certificates.forEach((cert, index) => {
        console.log(`📊 [Frontend] Processing certificate ${index + 1}:`, cert);
        const certElement = createCertificateElement(cert);
        container.appendChild(certElement);
    });
}

function createCertificateElement(cert) {
    const div = document.createElement('div');
    const isDisabled = !allActivitiesCompleted && !cert.isUploaded;
    
    // Enhanced validation of upload status
    const isActuallyUploaded = cert.isUploaded && 
                              cert.certificate_url && 
                              cert.certificate_url !== null && 
                              cert.certificate_url !== '' &&
                              cert.certificate_url.includes('http');
    
    console.log('📊 [Frontend] Certificate validation:', {
        trainingCertId: cert.trainingCertId,
        isUploaded: cert.isUploaded,
        certificate_url: cert.certificate_url,
        isActuallyUploaded: isActuallyUploaded
    });
    
    div.className = `certificate-card ${isActuallyUploaded ? 'uploaded' : ''} ${isDisabled ? 'disabled' : ''}`;
    
    if (isActuallyUploaded) {
        div.innerHTML = createUploadedView(cert);
    } else {
        div.innerHTML = createUploadView(cert, isDisabled);
    }
    
    return div;
}
function createUploadedView(cert) {
    return `
        <div class="certificate-header">
            <div class="certificate-icon">
                <i class="fas fa-certificate"></i>
            </div>
            <h3 class="certificate-title">${cert.trainingCertTitle}</h3>
        </div>
        <div class="certificate-desc">${cert.trainingCertDesc}</div>
        <div class="uploaded-file">
            <div class="success-indicator">
                <i class="fas fa-check-circle"></i>
                Certificate uploaded successfully
            </div>
            <div style="margin-top: 10px; font-size: 12px; color: #666;">
                <strong>File:</strong> ${cert.certificate_url ? cert.certificate_url.split('/').pop() : 'Unknown file'}
            </div>
            <div style="margin-top: 5px; font-size: 12px; color: #666;">
                <strong>Uploaded:</strong> ${cert.uploadedAt ? new Date(cert.uploadedAt).toLocaleString() : 'Unknown date'}
            </div>
            <div class="certificate-actions">
                <button class="download-btn" onclick="downloadCertificate('${cert.certificate_url}')">
                    <i class="fas fa-download"></i>
                    Download
                </button>
                <button class="replace-btn" onclick="reuploadCertificate(${cert.trainingCertId})" ${!allActivitiesCompleted ? 'disabled' : ''}>
                    <i class="fas fa-redo"></i>
                    Replace
                </button>
            </div>
        </div>
    `;
}

function createUploadView(cert, isDisabled) {
    return `
        <div class="certificate-header">
            <div class="certificate-icon ${isDisabled ? 'disabled' : ''}">
                <i class="fas fa-upload"></i>
            </div>
            <h3 class="certificate-title">${cert.trainingCertTitle}</h3>
        </div>
        <div class="certificate-desc">${cert.trainingCertDesc}</div>
        ${!allActivitiesCompleted ? `
            <div class="completion-requirement">
                <i class="fas fa-lock"></i>
                Complete all activities to unlock certificate upload
            </div>
        ` : ''}
        <div class="upload-area ${isDisabled ? 'disabled' : ''}" onclick="${!isDisabled ? `triggerFileInput(${cert.trainingCertId})` : ''}">
            <div><i class="fas fa-cloud-upload-alt"></i> ${!isDisabled ? 'Click to upload' : 'Upload locked'} ${cert.trainingCertTitle}</div>
            <div style="font-size: 12px; color: #666; margin-top: 5px;">
                ${!isDisabled ? 'Supported formats: PDF, JPG, PNG, Word (Max 10MB)' : 'Complete all activities first'}
            </div>
            <input type="file" id="fileInput_${cert.trainingCertId}" class="file-input" 
                   accept=".pdf,.jpg,.jpeg,.png,.doc,.docx" 
                   onchange="handleFileSelect(${cert.trainingCertId}, this.files[0])"
                   ${isDisabled ? 'disabled' : ''}>
            <div id="uploadProgress_${cert.trainingCertId}" style="display: none;">
                <div class="progress-bar">
                    <div class="progress-fill" id="progressFill_${cert.trainingCertId}"></div>
                </div>
                <div id="uploadStatus_${cert.trainingCertId}">Uploading...</div>
            </div>
            <div id="uploadError_${cert.trainingCertId}" class="error-message" style="display: none;"></div>
        </div>
    `;
}


function triggerFileInput(trainingCertId) {
    if (!allActivitiesCompleted) {
        showError('Please complete all activities before uploading certificates.');
        return;
    }
    console.log('Triggering file input for certificate:', trainingCertId);
    document.getElementById(`fileInput_${trainingCertId}`).click();
}

function reuploadCertificate(trainingCertId) {
    if (!allActivitiesCompleted) {
        showError('Please complete all activities before uploading certificates.');
        return;
    }
    console.log('Reuploading certificate:', trainingCertId);
    triggerFileInput(trainingCertId);
}

async function handleFileSelect(trainingCertId, file) {
    if (!file) {
        console.log('No file selected');
        return;
    }
    
    console.log('File selected:', { trainingCertId, fileName: file.name, fileSize: file.size, fileType: file.type });
    
    if (!allActivitiesCompleted) {
        showError('Please complete all activities before uploading certificates.');
        return;
    }
    
    // Validate file
    const maxSize = 10 * 1024 * 1024; // 10MB
    const allowedTypes = [
        'application/pdf', 
        'image/jpeg', 
        'image/jpg', 
        'image/png', 
        'application/msword', 
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    ];
    
    if (file.size > maxSize) {
        showCertError(trainingCertId, 'File size exceeds 10MB limit');
        return;
    }
    
    if (!allowedTypes.includes(file.type)) {
        showCertError(trainingCertId, 'Invalid file type. Please upload PDF, image, or Word document.');
        return;
    }
    
    // Show upload progress
    showUploadProgress(trainingCertId);
    
    try {
        await uploadCertificate(trainingCertId, file);
    } catch (error) {
        console.error('Upload failed:', error);
        showCertError(trainingCertId, error.message);
        hideUploadProgress(trainingCertId);
    }
}

      function displayTrainingData() {
    if (!trainingData) {
        console.error('❌ No training data available to display');
        return;
    }

    console.log('🎨 Displaying training data:', trainingData);

    // Update header information
    const trainingNameEl = document.getElementById('trainingName');
    const trainingModeEl = document.getElementById('trainingMode');
    const startDateEl = document.getElementById('startDate');
    const endDateEl = document.getElementById('endDate');
    const totalDurationEl = document.getElementById('totalDuration');
    
    // Update certificates section title with training name
    const certificatesTitleEl = document.getElementById('certificatesTitle');

    if (trainingNameEl) trainingNameEl.textContent = trainingData.trainingName || 'Unknown Training';
    if (trainingModeEl) trainingModeEl.textContent = trainingData.isOnlineArrangement ? 'Online' : 'Onsite';
    if (startDateEl) startDateEl.textContent = formatDate(trainingData.setStartDate) || 'Not set';
    if (endDateEl) endDateEl.textContent = formatDate(trainingData.setEndDate) || 'Not set';
    if (totalDurationEl) totalDurationEl.textContent = `${trainingData.totalDuration || 0} hours`;
    
    // Update certificates title to use training name + "Certificates"
    if (certificatesTitleEl) {
        certificatesTitleEl.textContent = `${trainingData.trainingName} Certificate`;
    }

    // Display objectives and skills (show sections now)
    displayObjectives();
    displaySkills();
    
    // Display activities
    displayActivities();
}
        function displayObjectives() {
    const objectivesSection = document.getElementById('objectivesSection');
    const container = document.getElementById('objectivesTags');
    
    if (!objectivesSection || !container) return;
    
    // Show the section
    objectivesSection.style.display = 'block';
    
    if (trainingData.objectives && trainingData.objectives.length > 0) {
        console.log('🎯 Displaying objectives:', trainingData.objectives);
        container.innerHTML = trainingData.objectives.map(obj => 
            `<span class="tag">${obj.objectiveDescrpt || 'Unknown Objective'}</span>`
        ).join('');
    } else {
        container.innerHTML = '<span class="tag">No specific objectives assigned</span>';
    }
}

function displaySkills() {
    const skillsSection = document.getElementById('skillsSection');
    const container = document.getElementById('skillsTags');
    
    if (!skillsSection || !container) return;
    
    // Show the section
    skillsSection.style.display = 'block';
    
    if (trainingData.skills && trainingData.skills.length > 0) {
        console.log('🛠️ Displaying skills:', trainingData.skills);
        container.innerHTML = trainingData.skills.map(skill => 
            `<span class="tag">${skill.jobReqSkillName || 'Unknown Skill'} ${skill.jobReqSkillType ? `(${skill.jobReqSkillType})` : ''}</span>`
        ).join('');
    } else {
        container.innerHTML = '<span class="tag">No specific skills assigned</span>';
    }
}

        function displayActivities() {
    const tableBody = document.querySelector('#activitiesTable tbody');
    
    if (!tableBody) {
        console.error('❌ Activities table body not found');
        return;
    }
    
    if (!trainingData.activities || trainingData.activities.length === 0) {
        tableBody.innerHTML = `
            <tr>
                <td colspan="7" style="text-align: center; padding: 40px; color: #64748b;">
                    No activities found for this training.
                </td>
            </tr>
        `;
        allActivitiesCompleted = false;
        updateCompletionRequirement();
        return;
    }

    console.log('🎨 Displaying activities:', trainingData.activities);

    // Check if all activities are completed
    allActivitiesCompleted = trainingData.activities.every(activity => activity.status === 'Completed');
    updateCompletionRequirement();

    // Check if we're within training period
    const withinPeriod = isWithinTrainingPeriod();
    const isDisabled = !withinPeriod;

    tableBody.innerHTML = trainingData.activities.map(activity => `
        <tr data-activity-id="${activity.activityId}">
            <td>${activity.activityName || 'Unknown Activity'}</td>
            <td>${activity.estActivityDuration || 0} minutes</td>
            <td class="editable-field">
                <select class="status-select ${getStatusClass(activity.status)} ${isDisabled ? 'disabled' : ''}" 
                        onchange="updateActivityStatus(${activity.activityId}, this.value)"
                        data-activity-id="${activity.activityId}" 
                        data-field="status"
                        ${isDisabled ? 'disabled' : ''}>
                    <option value="Not Started" ${activity.status === 'Not Started' ? 'selected' : ''}>Not Started</option>
                    <option value="In Progress" ${activity.status === 'In Progress' ? 'selected' : ''}>In Progress</option>
                    <option value="Completed" ${activity.status === 'Completed' ? 'selected' : ''}>Completed</option>
                </select>
                ${isDisabled ? `
                    <div style="font-size: 11px; color: #dc2626; margin-top: 2px;">
                        <i class="fas fa-calendar-times"></i> Updates restricted outside training period
                    </div>
                ` : ''}
            </td>
            <td>
                <div class="timestamp-display ${activity.timestampzStarted ? 'has-value' : ''}">
                    ${activity.timestampzStarted ? formatTimestamp(activity.timestampzStarted) : 'Not started'}
                </div>
            </td>
            <td>
                <div class="timestamp-display ${activity.timestampzCompleted ? 'has-value' : ''}">
                    ${activity.timestampzCompleted ? formatTimestamp(activity.timestampzCompleted) : 'Not completed'}
                </div>
            </td>
            <td>${activity.activityType || 'N/A'}</td>
            <td>${activity.activityRemarks || 'No remarks'}</td>
        </tr>
    `).join('');

    // Show date restriction banner if outside training period
    if (!withinPeriod) {
        showDateRestrictionBanner();
    }

    console.log('✅ Activities displayed successfully');
}

// Function to show date restriction banner
function showDateRestrictionBanner() {
    // Remove existing banner if any
    const existingBanner = document.querySelector('.date-restriction-banner');
    if (existingBanner) {
        existingBanner.remove();
    }

    const startDate = trainingData.setStartDate ? new Date(trainingData.setStartDate).toLocaleDateString() : 'Not set';
    const endDate = trainingData.setEndDate ? new Date(trainingData.setEndDate).toLocaleDateString() : 'Not set';

    const banner = document.createElement('div');
    banner.className = 'date-restriction-banner';
    banner.style.cssText = `
        background: #fef2f2;
        border: 1px solid #fecaca;
        border-radius: 8px;
        padding: 12px 16px;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 10px;
        color: #dc2626;
        font-size: 14px;
    `;
    
    banner.innerHTML = `
        <i class="fas fa-calendar-times" style="font-size: 16px;"></i>
        <div>
            <strong>Activity updates are currently restricted.</strong><br>
            <small>Updates are only allowed during the training period: <strong>${startDate}</strong> to <strong>${endDate}</strong></small>
        </div>
    `;

    // Insert banner before the activities table
    const activitiesSection = document.querySelector('.activities-section');
    const instructionsBanner = document.querySelector('.instructions-banner');
    if (activitiesSection && instructionsBanner) {
        instructionsBanner.insertAdjacentElement('afterend', banner);
    }
}

// Add CSS for disabled status selects
function addDateRestrictionStyles() {
    if (!document.querySelector('#date-restriction-styles')) {
        const style = document.createElement('style');
        style.id = 'date-restriction-styles';
        style.textContent = `
            .status-select.disabled {
                background-color: #f9fafb !important;
                color: #6b7280 !important;
                cursor: not-allowed !important;
                opacity: 0.6;
            }
            
            .status-select.disabled:hover {
                background-color: #f9fafb !important;
            }
        `;
        document.head.appendChild(style);
    }
}

// Call this when the page loads
document.addEventListener('DOMContentLoaded', () => {
    addDateRestrictionStyles();
});

function updateCompletionRequirement() {
        const completionReq = document.getElementById('completionRequirement');
        if (!completionReq) return;
        
        if (allActivitiesCompleted) {
            completionReq.style.display = 'none';
        } else {
            completionReq.style.display = 'flex';
        }
    }
        function displayCertificates(certificates) {
            const container = document.getElementById('certificatesGrid');
            container.innerHTML = '';
            
            if (!certificates || certificates.length === 0) {
                container.innerHTML = `
                    <div class="certificate-card ${!allActivitiesCompleted ? 'disabled' : ''}">
                        <div class="certificate-header">
                            <div class="certificate-icon ${!allActivitiesCompleted ? 'disabled' : ''}">
                                <i class="fas fa-info-circle"></i>
                            </div>
                            <h3 class="certificate-title">No Certificates Available</h3>
                        </div>
                        <div class="certificate-desc">
                            No certificates are configured for this training.
                        </div>
                    </div>
                `;
                return;
            }

            certificates.forEach(cert => {
                const certElement = createCertificateElement(cert);
                container.appendChild(certElement);
            });
        }

        function createCertificateElement(cert) {
            const div = document.createElement('div');
            const isDisabled = !allActivitiesCompleted && !cert.isUploaded;
            div.className = `certificate-card ${cert.isUploaded ? 'uploaded' : ''} ${isDisabled ? 'disabled' : ''}`;
            div.innerHTML = cert.isUploaded ? createUploadedView(cert) : createUploadView(cert, isDisabled);
            return div;
        }

        function createUploadedView(cert) {
            return `
                <div class="certificate-header">
                    <div class="certificate-icon">
                        <i class="fas fa-certificate"></i>
                    </div>
                    <h3 class="certificate-title">${cert.trainingCertTitle}</h3>
                </div>
                <div class="certificate-desc">${cert.trainingCertDesc}</div>
                <div class="uploaded-file">
                    <div class="success-indicator">
                        ✓ Certificate uploaded successfully
                    </div>
                    <div style="margin-top: 10px;">
                        <small>Uploaded: ${new Date(cert.uploadedAt).toLocaleString()}</small>
                    </div>
                    <div class="certificate-actions">
                        <button class="download-btn" onclick="downloadCertificate('${cert.certificate_url}')">
                            <i class="fas fa-download"></i>
                            Download
                        </button>
                        <button class="replace-btn" onclick="reuploadCertificate(${cert.trainingCertId})" ${!allActivitiesCompleted ? 'disabled' : ''}>
                            <i class="fas fa-redo"></i>
                            Replace
                        </button>
                    </div>
                </div>
            `;
        }

        function createUploadView(cert, isDisabled) {
            return `
                <div class="certificate-header">
                    <div class="certificate-icon ${isDisabled ? 'disabled' : ''}">
                        <i class="fas fa-upload"></i>
                    </div>
                    <h3 class="certificate-title">${cert.trainingCertTitle}</h3>
                </div>
                <div class="certificate-desc">${cert.trainingCertDesc}</div>
                ${!allActivitiesCompleted ? `
                    <div class="completion-requirement">
                        <i class="fas fa-lock"></i>
                        Complete all activities to unlock certificate upload
                    </div>
                ` : ''}
                <div class="upload-area ${isDisabled ? 'disabled' : ''}" onclick="${!isDisabled ? `triggerFileInput(${cert.trainingCertId})` : ''}">
                    <div>📄 ${!isDisabled ? 'Click to upload' : 'Upload locked'} ${cert.trainingCertTitle}</div>
                    <div style="font-size: 12px; color: #666; margin-top: 5px;">
                        ${!isDisabled ? 'Supported formats: PDF, JPG, PNG, Word (Max 10MB)' : 'Complete all activities first'}
                    </div>
                    <input type="file" id="fileInput_${cert.trainingCertId}" class="file-input" 
                           accept=".pdf,.jpg,.jpeg,.png,.doc,.docx" 
                           onchange="handleFileSelect(${cert.trainingCertId}, this.files[0])"
                           ${isDisabled ? 'disabled' : ''}>
                    <div id="uploadProgress_${cert.trainingCertId}" style="display: none;">
                        <div class="progress-bar">
                            <div class="progress-fill" id="progressFill_${cert.trainingCertId}"></div>
                        </div>
                        <div id="uploadStatus_${cert.trainingCertId}">Uploading...</div>
                    </div>
                    <div id="uploadError_${cert.trainingCertId}" class="error-message" style="display: none;"></div>
                </div>
            `;
        }

       function getStatusClass(status) {
        if (!status) return 'not-started';
        return status.toLowerCase().replace(' ', '-');
    }

// Add this function to check if current date is within training period
function isWithinTrainingPeriod() {
    if (!trainingData || !trainingData.setStartDate || !trainingData.setEndDate) {
        console.log('⚠️ Missing training date information');
        return false;
    }

    const now = new Date();
    const startDate = new Date(trainingData.setStartDate);
    const endDate = new Date(trainingData.setEndDate);
    
    // Set time to start/end of day for proper comparison
    startDate.setHours(0, 0, 0, 0);
    endDate.setHours(23, 59, 59, 999);
    
    const isWithin = now >= startDate && now <= endDate;
    
    console.log('📅 Training period check:', {
        currentDate: now.toISOString(),
        startDate: startDate.toISOString(),
        endDate: endDate.toISOString(),
        isWithin: isWithin
    });
    
    return isWithin;
}

        // Updated activity status change with timestamp handling
       async function updateActivityStatus(activityId, newStatus) {
    console.log('🔄 Updating activity status:', { activityId, newStatus });
    
    // Check if current date is within training period
    if (!isWithinTrainingPeriod()) {
        const startDate = trainingData.setStartDate ? new Date(trainingData.setStartDate).toLocaleDateString() : 'Not set';
        const endDate = trainingData.setEndDate ? new Date(trainingData.setEndDate).toLocaleDateString() : 'Not set';
        
        showError(`Activity updates are only allowed during the training period (${startDate} - ${endDate}). Current date is outside this range.`);
        
        // Revert the select dropdown to original value
        const activity = trainingData.activities.find(a => a.activityId === activityId);
        if (activity) {
            const selectElement = document.querySelector(`tr[data-activity-id="${activityId}"] .status-select`);
            if (selectElement) {
                selectElement.value = activity.status;
            }
        }
        
        return;
    }
    
    // Find the activity in our data
    const activity = trainingData.activities.find(a => a.activityId === activityId);
    if (!activity) {
        console.error('❌ Activity not found:', activityId);
        showError('Activity not found');
        return;
    }

    const oldStatus = activity.status;
    
    // NEW: Time validation for completion
    if (newStatus === 'Completed' && oldStatus === 'In Progress') {
        const timeValidation = validateActivityTimeRequirement(activity);
        if (!timeValidation.isValid) {
            showError(timeValidation.message);
            
            // Revert the select dropdown to original value
            const selectElement = document.querySelector(`tr[data-activity-id="${activityId}"] .status-select`);
            if (selectElement) {
                selectElement.value = oldStatus;
            }
            return;
        }
    }
    
    // Show loading state
    const fieldElement = document.querySelector(`[data-activity-id="${activityId}"][data-field="status"]`);
    if (fieldElement) {
        fieldElement.classList.add('updating');
        fieldElement.disabled = true;
    }

    try {
        // Prepare request data
        const requestData = { status: newStatus };
        
        // Determine which timestamp to update based on status change
        const now = new Date().toISOString();
        if (oldStatus === 'Not Started' && newStatus === 'In Progress') {
            requestData.timestampzStarted = now;
        } else if (newStatus === 'Completed') {
            requestData.timestampzCompleted = now;
            if (!activity.timestampzStarted) {
                requestData.timestampzStarted = now; // Also set start time if not set
            }
        }

        console.log('📡 Sending update request:', requestData);

        // Save to database
        const response = await fetch(`/employee/training/${trainingRecordId}/activity/${activityId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'include',
            body: JSON.stringify(requestData)
        });

        const result = await response.json();
        console.log('📡 Update response:', result);
        
        if (!result.success) {
            throw new Error(result.message || 'Failed to save activity change');
        }

        // Update local data
        activity.status = newStatus;
        if (requestData.timestampzStarted) activity.timestampzStarted = requestData.timestampzStarted;
        if (requestData.timestampzCompleted) activity.timestampzCompleted = requestData.timestampzCompleted;

        // Update visual state
        const selectElement = document.querySelector(`tr[data-activity-id="${activityId}"] .status-select`);
        if (selectElement) {
            selectElement.className = `status-select ${getStatusClass(newStatus)}`;
        }
        
        // Update timestamps in UI
        updateTimestampDisplays(activityId, activity);
        
        // Check if all activities are completed
        allActivitiesCompleted = trainingData.activities.every(act => act.status === 'Completed');
        updateCompletionRequirement();
        
        // Reload certificates to update enabled/disabled state
        if (allActivitiesCompleted) {
            await loadCertificates();
        }

        // Show success state
        if (fieldElement) {
            fieldElement.classList.remove('updating');
            fieldElement.classList.add('success');
            fieldElement.disabled = false;
            
            setTimeout(() => {
                fieldElement.classList.remove('success');
            }, 2000);
        }

        const statusText = newStatus === 'In Progress' ? 'started' : newStatus.toLowerCase();
        showSuccess(`Activity ${statusText} successfully! ${requestData.timestampzStarted ? 'Start time recorded.' : ''} ${requestData.timestampzCompleted ? 'Completion time recorded.' : ''}`);
        
    } catch (error) {
        console.error('❌ Error saving activity change:', error);
        
        // Revert the change if save failed
        const selectElement = document.querySelector(`tr[data-activity-id="${activityId}"] .status-select`);
        if (selectElement) {
            selectElement.value = oldStatus;
            selectElement.className = `status-select ${getStatusClass(oldStatus)}`;
        }

        // Show error state
        if (fieldElement) {
            fieldElement.classList.remove('updating');
            fieldElement.classList.add('error');
            fieldElement.disabled = false;
            
            setTimeout(() => {
                fieldElement.classList.remove('error');
            }, 3000);
        }

        showError('Failed to save status change: ' + error.message);
    }
}

// NEW: Function to validate if activity has met the time requirement
function validateActivityTimeRequirement(activity) {
    console.log('⏱️ Validating time requirement for activity:', activity.activityName);
    
    // Check if activity has estimated duration
    const estimatedMinutes = parseInt(activity.estActivityDuration) || 0;
    if (estimatedMinutes <= 0) {
        console.log('⏱️ No time requirement - validation passed');
        return { 
            isValid: true, 
            message: 'No time requirement specified' 
        };
    }
    
    // Check if activity has start time
    if (!activity.timestampzStarted) {
        console.log('⏱️ No start time recorded - validation failed');
        return { 
            isValid: false, 
            message: 'Activity must be started before it can be completed' 
        };
    }
    
    // Calculate elapsed time
    const startTime = new Date(activity.timestampzStarted);
    const currentTime = new Date();
    const elapsedMinutes = Math.floor((currentTime - startTime) / (1000 * 60));
    
    console.log('⏱️ Time validation:', {
        estimatedMinutes,
        elapsedMinutes,
        startTime: startTime.toISOString(),
        currentTime: currentTime.toISOString()
    });
    
    // Check if enough time has elapsed
    if (elapsedMinutes < estimatedMinutes) {
        const remainingMinutes = estimatedMinutes - elapsedMinutes;
        const remainingHours = Math.floor(remainingMinutes / 60);
        const remainingMins = remainingMinutes % 60;
        
        let timeMessage = '';
        if (remainingHours > 0) {
            timeMessage = `${remainingHours} hour${remainingHours > 1 ? 's' : ''} and ${remainingMins} minute${remainingMins !== 1 ? 's' : ''}`;
        } else {
            timeMessage = `${remainingMins} minute${remainingMins !== 1 ? 's' : ''}`;
        }
        
        return { 
            isValid: false, 
            message: `You need to spend at least ${estimatedMinutes} minutes on this activity. You have ${timeMessage} remaining before you can mark it as completed.` 
        };
    }
    
    console.log('⏱️ Time requirement met - validation passed');
    return { 
        isValid: true, 
        message: 'Time requirement met' 
    };
}

       function updateTimestampDisplays(activityId, activity) {
    const row = document.querySelector(`tr[data-activity-id="${activityId}"]`);
    if (!row) return;

    // Update start timestamp
    const startDisplay = row.children[3].querySelector('.timestamp-display');
    if (startDisplay) {
        if (activity.timestampzStarted) {
            startDisplay.textContent = formatTimestamp(activity.timestampzStarted);
            startDisplay.classList.add('has-value');
        } else {
            startDisplay.textContent = 'Not started';
            startDisplay.classList.remove('has-value');
        }
    }

    // Update completion timestamp
    const completionDisplay = row.children[4].querySelector('.timestamp-display');
    if (completionDisplay) {
        if (activity.timestampzCompleted) {
            completionDisplay.textContent = formatTimestamp(activity.timestampzCompleted);
            completionDisplay.classList.add('has-value');
        } else {
            completionDisplay.textContent = 'Not completed';
            completionDisplay.classList.remove('has-value');
        }
    }
}

        // Save individual activity changes
        async function saveActivityChange(activityId, requestData) {
    console.log('Saving activity change:', { activityId, requestData });

    const response = await fetch(`/employee/training/${trainingRecordId}/activity/${activityId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify(requestData)
    });

    const result = await response.json();
    
    if (!result.success) {
        throw new Error(result.message || 'Failed to save activity change');
    }

    console.log('Activity change saved successfully:', result);
    return result;
}

        // Batch save function (for bulk operations)
        async function saveAllActivities() {
            if (!hasUnsavedChanges) {
                showInfo('All changes have been saved automatically.');
                return;
            }

            const saveBtn = document.getElementById('saveAllBtnBottom');
            const originalText = saveBtn.innerHTML;
            
            try {
                saveBtn.disabled = true;
                saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';

                const response = await fetch(`/employee/training/${trainingRecordId}/activities`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify({
                        activities: trainingData.activities.map(activity => ({
                            activityId: activity.activityId,
                            status: activity.status || 'Not Started',
                            timestampzStarted: activity.timestampzStarted || null,
                            timestampzCompleted: activity.timestampzCompleted || null
                        }))
                    })
                });

                const result = await response.json();
                
                if (result.success) {
                    hasUnsavedChanges = false;
                    saveBtn.disabled = true;
                    saveBtn.innerHTML = '<i class="fas fa-check"></i> All Saved!';
                    
                    setTimeout(() => {
                        saveBtn.innerHTML = originalText;
                    }, 2000);
                    
                    showSuccess(`All activities updated successfully! ${result.updatedCount || 0} activities saved.`);
                } else {
                    throw new Error(result.message || 'Failed to save activities');
                }
            } catch (error) {
                console.error('Error saving activities:', error);
                showError('Failed to save some changes. Individual changes are still saved automatically.');
                saveBtn.innerHTML = originalText;
                saveBtn.disabled = false;
            }
        }

        // Certificate functions
function triggerFileInput(trainingCertId) {
    if (!allActivitiesCompleted) {
        showError('Please complete all activities before uploading certificates.');
        return;
    }
    console.log('Triggering file input for certificate:', trainingCertId);
    document.getElementById(`fileInput_${trainingCertId}`).click();
}

function reuploadCertificate(trainingCertId) {
    if (!allActivitiesCompleted) {
        showError('Please complete all activities before uploading certificates.');
        return;
    }
    console.log('Reuploading certificate:', trainingCertId);
    triggerFileInput(trainingCertId);
}


        async function handleFileSelect(trainingCertId, file) {
    if (!file) {
        console.log('No file selected');
        return;
    }
    
    console.log('File selected:', { trainingCertId, fileName: file.name, fileSize: file.size, fileType: file.type });
    
    if (!allActivitiesCompleted) {
        showError('Please complete all activities before uploading certificates.');
        return;
    }
    
    // Validate file
    const maxSize = 10 * 1024 * 1024; // 10MB
    const allowedTypes = [
        'application/pdf', 
        'image/jpeg', 
        'image/jpg', 
        'image/png', 
        'application/msword', 
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    ];
    
    if (file.size > maxSize) {
        showCertError(trainingCertId, 'File size exceeds 10MB limit');
        return;
    }
    
    if (!allowedTypes.includes(file.type)) {
        showCertError(trainingCertId, 'Invalid file type. Please upload PDF, image, or Word document.');
        return;
    }
    
    // Show upload progress
    showUploadProgress(trainingCertId);
    
    try {
        await uploadCertificate(trainingCertId, file);
    } catch (error) {
        console.error('Upload failed:', error);
        showCertError(trainingCertId, error.message);
        hideUploadProgress(trainingCertId);
    }
}

      async function uploadCertificate(trainingCertId, file) {
    console.log('📂 [Frontend] Starting certificate upload:', { trainingCertId, file: file.name });
    
    const formData = new FormData();
    formData.append('file', file);
    formData.append('trainingRecordId', trainingRecordId);
    formData.append('trainingCertId', trainingCertId);
    
    // Debug: Log FormData contents
    console.log('📂 [Frontend] FormData contents:');
    for (let [key, value] of formData.entries()) {
        console.log(`  ${key}:`, value);
    }
    
    const xhr = new XMLHttpRequest();
    
    return new Promise((resolve, reject) => {
        xhr.upload.addEventListener('progress', (e) => {
            if (e.lengthComputable) {
                const percentComplete = (e.loaded / e.total) * 100;
                console.log('📂 [Frontend] Upload progress:', percentComplete + '%');
                updateProgress(trainingCertId, percentComplete);
            }
        });
        
        xhr.addEventListener('load', () => {
            console.log('📂 [Frontend] Upload response status:', xhr.status);
            console.log('📂 [Frontend] Upload response text:', xhr.responseText);
            
            hideUploadProgress(trainingCertId);
            
            if (xhr.status === 200) {
                try {
                    const response = JSON.parse(xhr.responseText);
                    console.log('📂 [Frontend] Upload response parsed:', response);
                    
                    if (response.success) {
                        if (response.data && response.data.certificateUrl) {
                            console.log('✅ [Frontend] Upload verified successful with URL:', response.data.certificateUrl);
                            showSuccess(`Certificate "${response.data.trainingCertTitle}" uploaded successfully!`);
                            
                            // Reload certificates to show updated status
                            setTimeout(() => {
                                loadCertificates();
                            }, 1000);
                            
                            resolve(response);
                        } else {
                            console.error('❌ [Frontend] Success response but missing certificate URL:', response);
                            reject(new Error('Upload completed but certificate URL is missing. Please try again.'));
                        }
                    } else {
                        console.error('❌ [Frontend] Server returned failure:', response.message);
                        reject(new Error(response.message || 'Upload failed on server'));
                    }
                } catch (parseError) {
                    console.error('❌ [Frontend] Failed to parse response:', parseError);
                    console.error('❌ [Frontend] Raw response:', xhr.responseText);
                    reject(new Error('Invalid response from server. Please try again.'));
                }
            } else {
                try {
                    const errorResponse = JSON.parse(xhr.responseText);
                    console.error('❌ [Frontend] HTTP error with parsed response:', errorResponse);
                    reject(new Error(errorResponse.message || `Upload failed with status ${xhr.status}`));
                } catch (parseError) {
                    console.error('❌ [Frontend] HTTP error with unparseable response:', xhr.responseText);
                    reject(new Error(`Upload failed with status ${xhr.status}`));
                }
            }
        });
        
        xhr.addEventListener('error', () => {
            console.error('❌ [Frontend] Network error during upload');
            hideUploadProgress(trainingCertId);
            reject(new Error('Network error occurred during upload. Please check your connection and try again.'));
        });
        
        xhr.addEventListener('timeout', () => {
            console.error('❌ [Frontend] Upload timeout');
            hideUploadProgress(trainingCertId);
            reject(new Error('Upload timed out. Please try again.'));
        });
        
        // Set timeout (10 minutes for large files)
        xhr.timeout = 10 * 60 * 1000;
        
        console.log('📂 [Frontend] Sending request to /employee/certificates/upload');
        xhr.open('POST', '/employee/certificates/upload');
        xhr.send(formData);
    });
}



function showUploadProgress(trainingCertId) {
    const progressElement = document.getElementById(`uploadProgress_${trainingCertId}`);
    const errorElement = document.getElementById(`uploadError_${trainingCertId}`);
    
    if (progressElement) {
        progressElement.style.display = 'block';
        console.log('Progress element shown for:', trainingCertId);
    }
    if (errorElement) {
        errorElement.style.display = 'none';
    }
}

function hideUploadProgress(trainingCertId) {
    const progressElement = document.getElementById(`uploadProgress_${trainingCertId}`);
    if (progressElement) {
        progressElement.style.display = 'none';
        console.log('Progress element hidden for:', trainingCertId);
    }
}

function showCertError(trainingCertId, message) {
    const errorElement = document.getElementById(`uploadError_${trainingCertId}`);
    if (errorElement) {
        errorElement.textContent = message;
        errorElement.style.display = 'block';
        console.error('❌ [Frontend] Certificate error:', { trainingCertId, message });
    }
    
    // Also show global error
    showError(message);
    
    // Clear any success states
    const uploadArea = document.querySelector(`#fileInput_${trainingCertId}`).closest('.certificate-card');
    if (uploadArea) {
        uploadArea.classList.remove('uploaded');
    }
}

// ENHANCED: Better progress display
function updateProgress(trainingCertId, percentage) {
    const progressFill = document.getElementById(`progressFill_${trainingCertId}`);
    const statusElement = document.getElementById(`uploadStatus_${trainingCertId}`);
    
    if (progressFill) {
        progressFill.style.width = `${percentage}%`;
    }
    
    if (statusElement) {
        if (percentage < 100) {
            statusElement.textContent = `Uploading... ${Math.round(percentage)}%`;
        } else {
            statusElement.textContent = 'Processing... Please wait';
        }
    }
}

function downloadCertificate(url) {
    console.log('Downloading certificate from:', url);
    if (url) {
        window.open(url, '_blank');
    } else {
        showError('Certificate URL not found');
    }
}
// 1. Check database schema for training_records_certificates table
async function debugDatabaseSchema() {
    try {
        const { data, error } = await supabase
            .from('training_records_certificates')
            .select('*')
            .limit(1);
        
        console.log('🔍 [Debug] Table schema check:', { data, error });
        
        if (data && data.length > 0) {
            console.log('🔍 [Debug] Sample record structure:', Object.keys(data[0]));
        }
    } catch (error) {
        console.error('❌ [Debug] Schema check failed:', error);
    }
}

// 2. Check if the specific record exists after upload
async function debugSpecificRecord(trainingRecordId, trainingCertId) {
    try {
        console.log(`🔍 [Debug] Checking record for trainingRecordId: ${trainingRecordId}, trainingCertId: ${trainingCertId}`);
        
        const { data, error } = await supabase
            .from('training_records_certificates')
            .select('*')
            .eq('trainingRecordId', trainingRecordId)
            .eq('trainingCertId', trainingCertId);
        
        console.log('🔍 [Debug] Specific record query result:', { data, error });
        
        if (data && data.length > 0) {
            console.log('🔍 [Debug] Found records:', data.length);
            data.forEach((record, index) => {
                console.log(`🔍 [Debug] Record ${index + 1}:`, record);
            });
        }
    } catch (error) {
        console.error('❌ [Debug] Specific record check failed:', error);
    }
}

// 3. Enhanced completion check function
function checkActivitiesCompletion(activities) {
    console.log('📊 [Activity Check] Starting completion check...');
    console.log('📊 [Activity Check] Raw activities:', activities);
    
    if (!activities || !Array.isArray(activities)) {
        console.log('📊 [Activity Check] No activities or invalid format');
        return {
            completed: false,
            total: 0,
            incomplete: 0,
            reason: 'No activities found or invalid format',
            incompleteList: []
        };
    }

    if (activities.length === 0) {
        console.log('📊 [Activity Check] No activities to check');
        return {
            completed: true,
            total: 0,
            incomplete: 0,
            reason: 'No activities to complete',
            incompleteList: []
        };
    }

    const incompleteActivities = [];
    let completedCount = 0;

    activities.forEach((activity, index) => {
        const status = activity.status ? activity.status.trim() : '';
        const activityName = activity.activityName || `Activity ${index + 1}`;
        
        console.log(`📊 [Activity Check] Activity "${activityName}": status = "${status}" (type: ${typeof status})`);
        
        // Enhanced completion check with time validation
        if (status !== 'Completed') {
            let reason = status || 'Not started';
            
            // If activity is in progress, check if it can be completed (time requirement)
            if (status === 'In Progress') {
                const timeValidation = validateActivityTimeRequirement(activity);
                if (!timeValidation.isValid) {
                    reason = 'Time requirement not met';
                }
            }
            
            incompleteActivities.push({
                activityName: activityName,
                currentStatus: status || 'Unknown',
                reason: reason
            });
        } else {
            // Double-check completed activities have met time requirements
            const timeValidation = validateActivityTimeRequirement(activity);
            if (!timeValidation.isValid) {
                console.warn(`⚠️ Completed activity "${activityName}" did not meet time requirement`);
                incompleteActivities.push({
                    activityName: activityName,
                    currentStatus: 'Completed (Invalid)',
                    reason: 'Time requirement not properly validated'
                });
            } else {
                completedCount++;
            }
        }
    });

    const allCompleted = incompleteActivities.length === 0;
    
    const result = {
        completed: allCompleted,
        total: activities.length,
        incomplete: incompleteActivities.length,
        completedCount: completedCount,
        reason: allCompleted ? 'All activities completed with time requirements met' : `${incompleteActivities.length} activities not completed or time requirements not met`,
        incompleteList: incompleteActivities
    };

    console.log('📊 [Activity Check] Final result:', result);
    return result;
}

// NEW: Helper function to format time remaining display
function formatTimeRemaining(minutes) {
    if (minutes <= 0) return '0 minutes';
    
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    
    if (hours > 0) {
        return `${hours}h ${mins}m`;
    }
    return `${mins}m`;
}

// NEW: Function to show time progress in the UI (optional enhancement)
function updateTimeProgressDisplay(activityId) {
    const activity = trainingData.activities.find(a => a.activityId === activityId);
    if (!activity || activity.status !== 'In Progress' || !activity.timestampzStarted) {
        return;
    }
    
    const estimatedMinutes = parseInt(activity.estActivityDuration) || 0;
    if (estimatedMinutes <= 0) return;
    
    const startTime = new Date(activity.timestampzStarted);
    const currentTime = new Date();
    const elapsedMinutes = Math.floor((currentTime - startTime) / (1000 * 60));
    const progress = Math.min((elapsedMinutes / estimatedMinutes) * 100, 100);
    
    // Find the row and add/update progress indicator
    const row = document.querySelector(`tr[data-activity-id="${activityId}"]`);
    if (row) {
        let progressElement = row.querySelector('.time-progress');
        if (!progressElement) {
            progressElement = document.createElement('div');
            progressElement.className = 'time-progress';
            progressElement.style.cssText = `
                font-size: 11px;
                color: #64748b;
                margin-top: 2px;
                display: flex;
                align-items: center;
                gap: 5px;
            `;
            
            const statusCell = row.querySelector('.editable-field');
            if (statusCell) {
                statusCell.appendChild(progressElement);
            }
        }
        
        const remainingMinutes = Math.max(0, estimatedMinutes - elapsedMinutes);
        const isComplete = remainingMinutes === 0;
        
        progressElement.innerHTML = `
            <div style="width: 60px; height: 4px; background: #e5e7eb; border-radius: 2px; overflow: hidden;">
                <div style="width: ${progress}%; height: 100%; background: ${isComplete ? '#10b981' : '#3b82f6'}; transition: width 0.3s ease;"></div>
            </div>
            <span style="color: ${isComplete ? '#10b981' : '#64748b'};">
                ${isComplete ? '✓ Ready' : formatTimeRemaining(remainingMinutes)}
            </span>
        `;
    }
}

// NEW: Start a timer to update progress displays for in-progress activities
function startTimeProgressUpdates() {
    setInterval(() => {
        if (trainingData && trainingData.activities) {
            trainingData.activities.forEach(activity => {
                if (activity.status === 'In Progress') {
                    updateTimeProgressDisplay(activity.activityId);
                }
            });
        }
    }, 60000); // Update every minute
}

// 4. Database validation query
async function validateDatabaseState(trainingRecordId, trainingCertId) {
    console.log('🔍 [Validation] Starting database state validation...');
    
    try {
        // Check training_records table
        const { data: trainingRecord, error: recordError } = await supabase
            .from('training_records')
            .select('*')
            .eq('trainingRecordId', trainingRecordId)
            .single();
        
        console.log('🔍 [Validation] Training record:', { data: trainingRecord, error: recordError });
        
        // Check training_certifications table
        const { data: certification, error: certError } = await supabase
            .from('training_certifications')
            .select('*')
            .eq('trainingCertId', trainingCertId)
            .single();
        
        console.log('🔍 [Validation] Training certification:', { data: certification, error: certError });
        
        // Check if certificate matches training
        if (trainingRecord && certification) {
            const matches = trainingRecord.trainingId === certification.trainingId;
            console.log(`🔍 [Validation] Training ID match: ${matches} (${trainingRecord.trainingId} vs ${certification.trainingId})`);
        }
        
        // Check existing certificate records
        const { data: existingCerts, error: existingError } = await supabase
            .from('training_records_certificates')
            .select('*')
            .eq('trainingRecordId', trainingRecordId);
        
        console.log('🔍 [Validation] Existing certificate records:', { data: existingCerts, error: existingError });
        
    } catch (error) {
        console.error('❌ [Validation] Database validation failed:', error);
    }
}

// 5. Test file upload to Supabase storage
async function testSupabaseStorageUpload(fileName, fileBuffer, mimeType) {
    console.log('🧪 [Storage Test] Testing Supabase storage upload...');
    
    try {
        const testFileName = `test-${Date.now()}-${fileName}`;
        
        // Test upload
        const { data: uploadData, error: uploadError } = await supabase.storage
            .from('uploads')
            .upload(testFileName, fileBuffer, {
                contentType: mimeType,
                cacheControl: '3600',
                upsert: false,
            });
        
        console.log('🧪 [Storage Test] Upload result:', { data: uploadData, error: uploadError });
        
        if (!uploadError) {
            // Test public URL generation
            const { data: publicUrlData } = supabase.storage
                .from('uploads')
                .getPublicUrl(testFileName);
            
            console.log('🧪 [Storage Test] Public URL:', publicUrlData);
            
            // Test file exists
            const { data: listData, error: listError } = await supabase.storage
                .from('uploads')
                .list('', {
                    search: testFileName
                });
            
            console.log('🧪 [Storage Test] File list check:', { data: listData, error: listError });
            
            // Clean up test file
            const { error: deleteError } = await supabase.storage
                .from('uploads')
                .remove([testFileName]);
            
            console.log('🧪 [Storage Test] Cleanup result:', { error: deleteError });
        }
        
    } catch (error) {
        console.error('❌ [Storage Test] Test failed:', error);
    }
}

// 6. Alternative database update approach
async function alternativeUpdateApproach(trainingRecordId, trainingCertId, fileUrl) {
    console.log('🔄 [Alternative] Trying alternative database update approach...');
    
    try {
        // First, try direct insert with conflict resolution
        const insertData = {
            trainingRecordId: parseInt(trainingRecordId),
            trainingCertId: parseInt(trainingCertId),
            certificate_url: fileUrl,
            created_at: new Date().toISOString()
        };
        
        console.log('🔄 [Alternative] Insert data:', insertData);
        
        // Try upsert approach
        const { data: upsertResult, error: upsertError } = await supabase
            .from('training_records_certificates')
            .upsert(insertData, { 
                onConflict: 'trainingRecordId,trainingCertId',
                ignoreDuplicates: false 
            })
            .select()
            .single();
        
        console.log('🔄 [Alternative] Upsert result:', { data: upsertResult, error: upsertError });
        
        return { data: upsertResult, error: upsertError };
        
    } catch (error) {
        console.error('❌ [Alternative] Alternative approach failed:', error);
        return { data: null, error: error };
    }
}


        function setupEventListeners() {
    // Drag and drop functionality
    document.addEventListener('dragover', handleDragOver);
    document.addEventListener('dragleave', handleDragLeave);
    document.addEventListener('drop', handleDrop);

    // Warn user about unsaved changes
    window.addEventListener('beforeunload', (e) => {
        if (hasUnsavedChanges) {
            e.preventDefault();
            e.returnValue = '';
        }
    });
}

function handleDragOver(e) {
    e.preventDefault();
    const uploadArea = e.target.closest('.upload-area');
    if (uploadArea && !uploadArea.classList.contains('disabled')) {
        uploadArea.classList.add('dragover');
    }
}

function handleDragLeave(e) {
    e.preventDefault();
    const uploadArea = e.target.closest('.upload-area');
    if (uploadArea) {
        uploadArea.classList.remove('dragover');
    }
}
        function handleDrop(e) {
    e.preventDefault();
    const uploadArea = e.target.closest('.upload-area');
    if (uploadArea && !uploadArea.classList.contains('disabled')) {
        uploadArea.classList.remove('dragover');
        
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            const fileInput = uploadArea.querySelector('.file-input');
            if (fileInput) {
                const trainingCertId = fileInput.id.split('_')[1];
                handleFileSelect(parseInt(trainingCertId), files[0]);
            }
        }
    }
}

function formatDate(dateString) {
        if (!dateString) return 'Not set';
        return new Date(dateString).toLocaleDateString('en-US', { 
            year: 'numeric', 
            month: 'short', 
            day: 'numeric' 
        });
    }

    function formatTimestamp(timestampString) {
        if (!timestampString) return 'Not set';
        return new Date(timestampString).toLocaleString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            hour12: true
        });
    }


        
function showInfo(message) {
    createToast('info', message);
}
function showSuccess(message) {
        createToast('success', message);
    }

    function showError(message) {
        createToast('error', message);
    }

    function createToast(type, message) {
        // Remove existing toasts
        const existingToasts = document.querySelectorAll('.toast');
        existingToasts.forEach(toast => toast.remove());

        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        
        const icon = type === 'success' ? 'check-circle' : 'exclamation-circle';
        const color = type === 'success' ? '#059669' : '#dc2626';
        
        toast.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <i class="fas fa-${icon}" style="color: ${color};"></i>
                <span>${message}</span>
            </div>
        `;
        
        toast.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: white;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            border-left: 4px solid ${color};
            z-index: 10000;
            font-size: 14px;
            max-width: 400px;
            animation: slideInRight 0.3s ease-out;
        `;
        
        document.body.appendChild(toast);
        
        // Auto remove after 4 seconds
        setTimeout(() => {
            toast.style.animation = 'slideOutRight 0.3s ease-out';
            setTimeout(() => toast.remove(), 300);
        }, 4000);
    }

    // Add this CSS for animations
    if (!document.querySelector('#toast-styles')) {
        const style = document.createElement('style');
        style.id = 'toast-styles';
        style.textContent = `
            @keyframes slideInRight {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            @keyframes slideOutRight {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
        `;
        document.head.appendChild(style);
    }
    </script>
</body>
</html>