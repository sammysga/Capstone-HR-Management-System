<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chatbot</title>
    <link
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
  rel="stylesheet"
/>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }
        .chat-container {
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        .chat-header {
            background-color: #007BFF;
            color: white;
            padding: 15px;
            text-align: center;
            font-size: 1.5em;
        }
        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            background-color: #f8f9fa;
            display: flex;
            flex-direction: column;
        }
        .message {
            max-width: 70%;
            padding: 10px;
            margin: 5px 0;
            border-radius: 10px;
            position: relative;
        }
        .user-message {
            background-color: white;
            align-self: flex-end;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        .bot-message {
            background-color: #007BFF;
            color: white;
            align-self: flex-start;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        .chat-input {
            display: flex;
            border-top: 1px solid #ccc;
            padding: 10px;
        }
        .chat-input input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px 0 0 5px;
        }
        .chat-input button {
            padding: 10px;
            border: none;
            background-color: #007BFF;
            color: white;
            cursor: pointer;
            border-radius: 0 5px 5px 0;
        }
        .job-button {
            margin: 5px 0;
            background-color: #e0e0e0;
            border: none;
            padding: 10px;
            border-radius: 5px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">Chatbot</div>
        <div class="chat-messages" id="chat-messages"></div>
        <div class="chat-input">
            <input type="text" id="user-input" placeholder="Type your message..." />
            <button id="send-button">Send</button>
        </div>

        <!-- Hidden file upload input -->
        <input
            type="file"
            id="fileUpload"
            accept=".pdf, .png, .jpeg, .jpg"
            style="display:none"
            onchange="uploadFile(event)"
        />


        <!-- <button
        id="upload-button"
        onclick="document.getElementById('fileUpload').click()"
      >
        <i class="fa-duotone fa-solid fa-file"></i> Upload a File
      </button> -->
      

    </div>
    <script>
        let screeningQuestions = [];
        let currentQuestionIndex = 0;

        document.addEventListener("DOMContentLoaded", function () {
            console.log("Page loaded. Initializing chat...");
            loadChatHistory();

            document.getElementById("send-button").addEventListener("click", handleUserInput);
            document.getElementById("user-input").addEventListener("keypress", function (event) {
                if (event.key === "Enter") {
                    handleUserInput();
                }
            });

            fetchInitialResponse();
        });

        function handleUserInput() {
            const inputField = document.getElementById("user-input");
            const userInput = inputField.value.trim();

            if (!userInput) {
                console.log("Input is empty.");
                return;
            }

            console.log("User  input:", userInput);
            addMessage("You", userInput);
            inputField.value = "";

            sendMessage(userInput);
        }

        async function sendMessage(message) {
            try {
                const response = await fetch("/chatbothome", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ message }),
                });

                if (!response.ok) throw new Error("Failed to send message");

                const data = await response.json();
                console.log("Response from server:", data);

                // Display the entire chat history
                if (data.chatHistory) {
                    data.chatHistory.forEach(chat => {
                        if (chat.sender === 'user') {
                            addMessage("You", chat.message);
                        } else if (chat.sender === 'bot') {
                            try {
                                const botMessage = JSON.parse(chat.message);
                                displayBotResponse(botMessage);
                            } catch (error) {
                                addMessage("Bot", chat.message);
                            }
                        }
                    });
                }

                // Handle the latest bot response
                if (data.response) {
                    displayBotResponse(data.response);
                }
            } catch (error) {
                console.error("Error sending message:", error);
                addMessage("Bot", "There was an error sending your message. Please try again.");
            }
        }

        function addMessage(sender, message) {
            console.log(`Adding message from ${sender}:`, message);
            const chatMessages = document.getElementById("chat-messages");
            const messageDiv = document.createElement("div");
            messageDiv.classList.add("message", sender === "You" ? "user-message" : "bot-message");
            messageDiv.textContent = message;
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;

            saveChatHistory(sender, message);
        }

        function saveChatHistory(sender, message) {
            let chatHistory = JSON.parse(localStorage.getItem("chatHistory")) || [];
            chatHistory.push({ sender, message });
            localStorage.setItem("chatHistory", JSON.stringify(chatHistory));
        }

        function loadChatHistory() {
            const chatMessages = document.getElementById("chat-messages");
            let chatHistory = JSON.parse(localStorage.getItem("chatHistory")) || [];

            chatHistory.forEach((chat) => {
                addMessage(chat.sender, chat.message);
            });

            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        async function uploadFile(event) {
            const file = event.target.files[0];
            if (!file) return;

            console.log("Uploading file:", file.name);
            const formData = new FormData();
            formData.append("file", file);

            try {
                const response = await fetch("/handleFileUpload", {
                    method: "POST",
                    body: formData,
                });

                if (!response.ok) throw new Error("Failed to upload file");

                const fileUrl = await response.text();
                addMessage(
                    "Bot",
                    "Thank you for answering. We have forwarded your resume to the department's Line Manager. We will notify you once a decision has been made."
                );

                console.log("File uploaded successfully. File URL:", fileUrl);
            } catch (error) {
                console.error("Error uploading file:", error);
                addMessage("Bot", "Error uploading file. Please try again.");
            }
        }

        function displayBotResponse(response) {
            console.log("Bot response:", response);
            const chatMessages = document.getElementById("chat-messages");

            if (typeof response === "object" && response.text) {
                addMessage("Bot", response.text);

                if (response.buttons && response.buttons.length) {
                    response.buttons.forEach((button) => {
                        const btn = document.createElement("button");
                        btn.innerText = button.text;
                        btn.classList.add("job-button");

                        if (button.type === "file_upload") {
                            btn.onclick = () => document.getElementById("fileUpload").click();
                        } else {
                            btn.onclick = async () => {
                                console.log("Button clicked:", button.text);
                                addMessage("You", button.text);
                                await sendMessage(button.text);
                            };
                        }

                        chatMessages.appendChild(btn);
                    });
                }
            } else {
                addMessage("Bot", response);
            }

            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        async function fetchInitialResponse() {
            console.log("Fetching initial response...");
            try {
                const response = await fetch("/chatbothome", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ message: "init" }),
                });

                if (!response.ok) throw new Error("Failed to fetch initial response");

                const data = await response.json();
                console.log("Initial response:", data);

                // Check if data.response is an array
                if (Array.isArray(data.chatHistory)) {
                    data.chatHistory.forEach(chat => {
                        if (chat.sender === 'user') {
                            addMessage("You", chat.message);
                        } else if (chat.sender === 'bot') {
                            try {
                                const botMessage = JSON.parse(chat.message);
                                displayBotResponse(botMessage);
                            } catch (error) {
                                addMessage("Bot", chat.message);
                            }
                        }
                    });
                } else {
                    // Handle the case where data.response is not an array
                    addMessage("Bot", data.response || "Hi! Welcome to Prime Infrastructure's recruitment portal. What position are you going to apply for?");
                }
            } catch (error) {
                console.error("Error fetching initial response:", error);
                addMessage("Bot", "Welcome! How can I assist you today?");
            }
        }
    </script>
</body>
</html>


    <!-- ARCHIVED UNFINISHED SESSIONS -->
    <!-- <script>
        let screeningQuestions = [];
        let currentQuestionIndex = 0;

        document.addEventListener("DOMContentLoaded", function () {
            console.log("Page loaded. Initializing chat...");
            loadChatHistory();

            document.getElementById("send-button").addEventListener("click", handleUserInput);
            document.getElementById("user-input").addEventListener("keypress", function (event) {
                if (event.key === "Enter") {
                    handleUserInput();
                }
            });

            fetchInitialResponse();
        });


        function handleUserInput() {
            const inputField = document.getElementById("user-input");
            const userInput = inputField.value.trim();

            if (!userInput) {
                console.log("Input is empty.");
                return;
            }

            console.log("User  input:", userInput);
            addMessage("You", userInput);
            inputField.value = "";

            sendMessage(userInput);
        }


        async function sendMessage(message) {
            try {
                const response = await fetch("/chatbothome", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ message }),
                });

                if (!response.ok) throw new Error("Failed to send message");

                const data = await response.json();
                console.log("Response from server:", data);

                // Display the entire chat history
                if (data.chatHistory) {
                    data.chatHistory.forEach(chat => {
                        if (chat.sender === 'user') {
                            addMessage("You", chat.message);
                        } else if (chat.sender === 'bot') {
                            try {
                                const botMessage = JSON.parse(chat.message);
                                displayBotResponse(botMessage);
                            } catch (error) {
                                addMessage("Bot", chat.message);
                            }
                        }
                    });
                }

                // Handle the latest bot response
                if (data.response) {
                    displayBotResponse(data.response);
                }
            } catch (error) {
                console.error("Error sending message:", error);
                addMessage("Bot", "There was an error sending your message. Please try again.");
            }
        }

        function addMessage(sender, message) {
            console.log(`Adding message from ${sender}:`, message);
            const chatMessages = document.getElementById("chat-messages");
            const messageDiv = document.createElement("div");
            messageDiv.classList.add("message", sender === "You" ? "user-message" : "bot-message");
            messageDiv.textContent = message;
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;

            saveChatHistory(sender, message);
        }

        function saveChatHistory(sender, message) {
            let chatHistory = JSON.parse(localStorage.getItem("chatHistory")) || [];
            chatHistory.push({ sender, message });
            localStorage.setItem("chatHistory", JSON.stringify(chatHistory));
        }


        function loadChatHistory() {
            const chatMessages = document.getElementById("chat-messages");
            let chatHistory = JSON.parse(localStorage.getItem("chatHistory")) || [];

            chatHistory.forEach((chat) => {
                addMessage(chat.sender, chat.message);
            });

            chatMessages.scrollTop = chatMessages.scrollHeight;
        }


        async function uploadFile(event) {
            const file = event.target.files[0];
            if (!file) return;

            console.log("Uploading file:", file.name);
            const formData = new FormData();
            formData.append("file", file);

            try {
                const response = await fetch("/handleFileUpload", {
                    method: "POST",
                    body: formData,
                });

                if (!response.ok) throw new Error("Failed to upload file");

                const fileUrl = await response.text();
                addMessage(
                    "Bot",
                    "Thank you for answering. We have forwarded your resume to the department's Line Manager. We will notify you once a decision has been made."
                );

                console.log("File uploaded successfully. File URL:", fileUrl);
            } catch (error) {
                console.error("Error uploading file:", error);
                addMessage("Bot", "Error uploading file. Please try again.");
            }
        }

        function displayBotResponse(response) {
    console.log("Bot response:", response);
    const chatMessages = document.getElementById("chat-messages");

    if (typeof response === "object" && response.text) {
        addMessage("Bot", response.text);

        if (response.buttons && response.buttons.length) {
            response.buttons.forEach((button) => {
                const btn = document.createElement("button");
                btn.innerText = button.text;
                btn.classList.add("job-button");

                if (button.type === "file_upload") {
                    btn.onclick = () => document.getElementById("fileUpload").click();
                } else {
                    btn.onclick = async () => {
                        console.log("Button clicked:", button.text);
                        addMessage("You", button.text);
                        await sendMessage(button.text);
                    };
                }

                chatMessages.appendChild(btn);
            });
        }
    } else {
        addMessage("Bot", response);
    }

    chatMessages.scrollTop = chatMessages.scrollHeight;
}
        async function handleNextQuestion() {
            if (currentQuestionIndex + 1 < screeningQuestions.length) {
                currentQuestionIndex++;
                displayBotResponse({
                    text: screeningQuestions[currentQuestionIndex].text,
                    buttons: screeningQuestions[currentQuestionIndex].buttons,
                });
            } else {
                addMessage("Bot", "Thank you for completing the screening process.");
            }
        }

        async function fetchInitialResponse() {
            console.log("Fetching initial response...");
            try {
                const response = await fetch("/chatbothome", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ message: "init" }),
                });

                if (!response.ok) throw new Error("Failed to fetch initial response");

                const data = await response.json();
                console.log("Initial response:", data);

                // Check if data.response is an array
                if (Array.isArray(data.response)) {
                    data.response.forEach(chat => {
                        addMessage(chat.sender === 'user' ? "You" : "Bot", chat.message);
                    });
                } else {
                    // Handle the case where data.response is not an array
                    addMessage("Bot", data.response || "Hi! Welcome to Prime Infrastructure's recruitment portal. What position are you going to apply for?");
                }
            } catch (error) {
                console.error("Error fetching initial response:", error);
                addMessage("Bot", "Welcome! How can I assist you today?");
            }
        }
    </script> -->