<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chatbot - Online Applicant Screening</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet"/>
    <style>

.job-button.calendly-button {
    background-color: #07ACB9;
    color: white;
    font-weight: bold;
    padding: 12px 20px;
    border-radius: 24px;
    transform: scale(1.05);
    transition: all 0.3s ease;
}

.job-button.calendly-button:hover {
    background-color: #059DAF;
    transform: scale(1.1);
}

        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f7;
            margin: 0;
            height: 100vh;
            display: flex;
        }
        
        /* Left sidebar with logo and stepper */
        .sidebar {
            width: 250px;
            background-color: white;
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
            padding: 20px;
            display: flex;
            flex-direction: column;
            z-index: 2;
        }
        
        .logo-container {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .logo {
            max-width: 85%;
            height: auto;
        }
        
        .stepper {
            margin-top: 20px;
        }
        
        .stepper-step {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            position: relative;
        }
        
        .stepper-step:not(:last-child):after {
            content: '';
            position: absolute;
            top: 30px;
            left: 12px;
            height: 25px;
            width: 2px;
            background-color: #ccc;
        }
        
        .stepper-step.active:not(:last-child):after {
            background-color: #07ACB9;
        }
        
        .step-number {
            width: 25px;
            height: 25px;
            border-radius: 50%;
            background-color: #D8D8D8;
            color: #09191F;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            margin-right: 10px;
        }
        
        .stepper-step.active .step-number {
            background-color: #07ACB9;
            color: white;
        }
        
        .step-label {
            font-weight: 500;
            color: #09191F;
        }
        
        .stepper-step.active .step-label {
            color: #07ACB9;
            font-weight: bold;
        }
        
        .logout-container {
            margin-top: auto;
            text-align: center;
            margin-right: 0;
            margin-bottom: 20px;
        }
        
        .logout-button {
            text-decoration: none;
            color: #2385B0;
            font-weight: bold;
            background-color: #D8D8D8;
            padding: 15px 15px;
            border-radius: 5px;
            display: block;
            transition: background-color 0.3s;
            font-size: 16px;
            width: 100%;
            cursor: pointer;
            border: none;
        }
        
        .logout-button:hover {
            background-color: #2385B0; 
            color: #D8D8D8;
            font-weight: bold;
        }
        
        /* Main chat container */
        .chat-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            max-width: 100%;
            background-color: white;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            margin: 20px;
            overflow: hidden;
        }
        
        .chat-header {
            background-color: #07ACB9;
            color: white;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        
        .chat-header h1 {
            font-size: 1.5rem;
            margin: 0;
            font-weight: 600;
        }
        
        .chat-header-buttons {
            display: flex;
            gap: 10px;
        }
        
        .back-button {
            background-color: transparent;
            border: 1px solid white;
            color: white;
            border-radius: 5px;
            padding: 8px 15px;
            cursor: pointer;
            transition: background-color 0.3s;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .back-button:hover {
            background-color: rgba(255, 255, 255, 0.2);
        }
        
        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            background-color: #f8f9fa;
            display: flex;
            flex-direction: column;
        }
        
        .message {
            max-width: 70%;
            padding: 12px 16px;
            margin: 8px 0;
            border-radius: 12px;
            position: relative;
            line-height: 1.5;
            animation: fadeIn 0.3s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .user-message {
            background-color: #B4E3E3;
            align-self: flex-end;
            border-bottom-right-radius: 4px;
            color: #09191F;
        }
        
        .bot-message {
            background-color: white;
            align-self: flex-start;
            border-bottom-left-radius: 4px;
            color: #09191F;
            border-left: 4px solid #07ACB9;
        }
        
        .message-timestamp {
            font-size: 0.7rem;
            color: #6c757d;
            margin-top: 5px;
            text-align: right;
        }
        
        .chat-input {
            display: flex;
            background-color: white;
            border-top: 1px solid #eee;
            padding: 15px;
            position: relative;
        }
        
        .chat-input-wrapper {
            display: flex;
            width: 100%;
            border-radius: 24px;
            overflow: hidden;
            border: 1px solid #ddd;
            background-color: white;
            transition: all 0.3s ease;
        }
        
        .chat-input-wrapper:focus-within {
            box-shadow: 0 0 0 2px #B4E3E3;
            border-color: #07ACB9;
        }
        
        .chat-input input {
            flex: 1;
            padding: 12px 16px;
            border: none;
            outline: none;
            font-size: 1rem;
        }
        
        .chat-input button {
            padding: 10px 20px;
            background-color: #07ACB9;
            color: white;
            border: none;
            cursor: pointer;
            font-weight: 600;
            transition: background-color 0.3s;
        }
        
        .chat-input button:hover {
            background-color: #059DAF;
        }
        
        .button-container {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 12px;
            justify-content: flex-start;
            width: 100%;
        }
        
        .job-button {
            margin: 5px 0;
            background-color: white;
            border: 1px solid #07ACB9;
            color: #07ACB9;
            padding: 10px 15px;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
        }
        
        .job-button:hover {
            background-color: #B4E3E3;
            transform: scale(1.05);
        }
        
        /* File upload styling */
        .file-upload-button {
            background-color: #07ACB9;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 5px;
            font-weight: 500;
        }
        
        .file-upload-button:hover {
            background-color: #059DAF;
            transform: scale(1.05);
        }
        
        /* Loading indicator */
        .typing-indicator {
            display: flex;
            align-items: center;
            margin: 10px 0;
            display: none;
        }
        
        .typing-indicator span {
            height: 8px;
            width: 8px;
            background-color: #07ACB9;
            border-radius: 50%;
            display: inline-block;
            margin-right: 5px;
            opacity: 0.6;
            animation: typingAnimation 1s infinite;
        }
        
        .typing-indicator span:nth-child(2) {
            animation-delay: 0.2s;
        }
        
        .typing-indicator span:nth-child(3) {
            animation-delay: 0.4s;
            margin-right: 0;
        }
        
        @keyframes typingAnimation {
            0% { opacity: 0.6; transform: scale(1); }
            50% { opacity: 1; transform: scale(1.2); }
            100% { opacity: 0.6; transform: scale(1); }
        }
        
        .upload-progress {
            height: 5px;
            background-color: #B4E3E3;
            border-radius: 5px;
            overflow: hidden;
            margin-top: 5px;
            display: none;
        }
        
        .upload-progress-bar {
            height: 100%;
            background-color: #07ACB9;
            width: 0%;
            transition: width 0.3s ease;
        }
        
        /* Responsive styles */
        @media (max-width: 768px) {
            body {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                height: auto;
                padding: 10px;
            }
            
            .stepper {
                display: flex;
                justify-content: space-around;
                margin-bottom: 10px;
            }
            
            .stepper-step {
                flex-direction: column;
                align-items: center;
                margin-bottom: 0;
            }
            
            .stepper-step:not(:last-child):after {
                display: none;
            }
            
            .step-label {
                font-size: 0.8rem;
            }
            
            .logout-container {
                display: none;
            }
            
            .chat-container {
                margin: 10px;
            }
            
            .message {
                max-width: 85%;
            }
        }
    </style>
</head>
<body>
    <!-- Left sidebar with logo and stepper -->
    <div class="sidebar">
        <div class="logo-container">
            <img src="/images/prime_assets/company-logo-revised-sidebar-logo.png" alt="Prime Infrastructure" class="logo">
        </div>
        
        <div class="stepper">
            <div class="stepper-step active" id="step-job-selection">
                <div class="step-number">1</div>
                <div class="step-label">Job Selection</div>
            </div>
            <div class="stepper-step" id="step-screening">
                <div class="step-number">2</div>
                <div class="step-label">Screening Questions</div>
            </div>
            <div class="stepper-step" id="step-resume">
                <div class="step-number">3</div>
                <div class="step-label">Resume Upload</div>
            </div>
        </div>
        
        <div class="logout-container">
            <button id="logout-button" class="logout-button">
                <i class="fas fa-sign-out-alt"></i> Logout
            </button>
        </div>
    </div>

    <!-- Main chat container -->
    <div class="chat-container">
        <div class="chat-header">
            <h1>Online Applicant Screening</h1>
            <div class="chat-header-buttons">
                <button id="back-button" class="back-button">
                    <i class="fas fa-arrow-left"></i> Back
                </button>
            </div>
        </div>
        <div class="chat-messages" id="chat-messages">
            <!-- Messages will be added here dynamically -->
            <div class="typing-indicator" id="typing-indicator">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </div>
        <div class="chat-input">
            <div class="chat-input-wrapper">
                <input type="text" id="user-input" placeholder="Type your message..." />
                <button id="send-button"><i class="fas fa-paper-plane"></i></button>
            </div>
        </div>

        <!-- Hidden file upload input -->
        <input
            type="file"
            id="fileUpload"
            accept=".pdf, .doc, .docx, .png, .jpeg, .jpg"
            style="display:none"
            onchange="uploadFile(event)"
        />
        <div id="chat-data" style="display: none;"><%= chatData %></div>
    </div>
    <script>
    let screeningQuestions = [];
    let currentQuestionIndex = 0;
    let initialResponse = {}; // Declare initialResponse globally
    let currentStage = 'job_selection'; // To track the current stage for stepper

   document.addEventListener("DOMContentLoaded", function() {
    console.log("✅ [Chatbot] Page loaded. Initializing chat...");

    // Check if returning from calendly
    const urlParams = new URLSearchParams(window.location.search);
    const fromCalendly = urlParams.get('from') === 'calendly';
    const interviewScheduled = localStorage.getItem('interviewScheduled') === 'true';
    
    // Clear the localStorage flag if we're using it
    if (interviewScheduled) {
        localStorage.removeItem('interviewScheduled');
    }

    loadChatHistory();

    // Handle returning from Calendly scheduling
    if (fromCalendly || interviewScheduled) {
        console.log("✅ [Chatbot] User returned from Calendly");
        
        // Check if this is a P2 interview by examining the URL or localStorage
        const urlParams = new URLSearchParams(window.location.search);
        const isP2Interview = urlParams.get('stage') === 'P2' || localStorage.getItem('interviewStage') === 'P2';
        
        console.log(`✅ [Chatbot] Interview stage from params: ${isP2Interview ? 'P2' : 'P1'}`);
        
        // Wait a moment for chat history to load before adding the thank you message
        setTimeout(async () => {
            let thankYouMessage;
            
            // Check if this was a P2 interview
            if (isP2Interview) {
                console.log("✅ [Chatbot] Final interview scheduled for P2 PASSED applicant");
                
                thankYouMessage = {
                    text: "Thank you for scheduling your final interview! We've sent a confirmation to your email. We look forward to discussing your potential role at Prime Infrastructure in more detail.",
                    applicantStage: "P3 - Awaiting for Line Manager Evaluation"
                };
                
                // Update applicant status in the database using a direct API call
                try {
                    const response = await fetch("/update-applicant-status", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            userId: userId,
                            status: "P3 - Awaiting for Line Manager Evaluation"
                        })
                    });
                    
                    const result = await response.json();
                    if (result.success) {
                        console.log('✅ [Chatbot] Applicant status successfully updated to P3 - Awaiting for Line Manager Evaluation');
                    } else {
                        console.error('❌ [Chatbot] Error updating applicant status:', result.error);
                    }
                } catch (error) {
                    console.error('❌ [Chatbot] Error updating applicant status:', error);
                }
            } else {
                // For P1 PASSED applicants
                console.log("✅ [Chatbot] First interview scheduled for P1 PASSED applicant");
                
                thankYouMessage = {
                    text: "Thank you for scheduling your interview! We've sent a confirmation to your email. Looking forward to meeting with you soon!",
                    applicantStage: "P2 - Awaiting for HR Evaluation"
                };
                
                // Use the same update endpoint for consistency
                try {
                    const response = await fetch("/update-applicant-status", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            userId: userId,
                            status: "P2 - Awaiting for HR Evaluation"
                        })
                    });
                    
                    const result = await response.json();
                    if (result.success) {
                        console.log('✅ [Chatbot] Applicant status successfully updated to P2 - Awaiting for HR Evaluation');
                    } else {
                        console.error('❌ [Chatbot] Error updating applicant status:', result.error);
                    }
                } catch (error) {
                    console.error('❌ [Chatbot] Error updating applicant status:', error);
                }
            }
            
            // Display the message
            displayBotResponse(thankYouMessage);
            
            // Save the thank you message to chat history
            sendMessageToServer(null, thankYouMessage);
            
            // Clear localStorage items to prevent issues on page refresh
            localStorage.removeItem('interviewStage');
            localStorage.removeItem('interviewScheduled');
        }, 1000);
        
        // Remove the parameters from URL to prevent showing message on page refresh
        if (fromCalendly) {
            const url = new URL(window.location);
            url.searchParams.delete('from');
            url.searchParams.delete('stage');
            window.history.replaceState({}, '', url);
        }
    }

    // Event listeners for input
    document.getElementById("send-button").addEventListener("click", handleUserInput);
    document.getElementById("user-input").addEventListener("keypress", function(event) {
        if (event.key === "Enter") {
            handleUserInput();
        }
    });

    // Back button functionality
    document.getElementById("back-button").addEventListener("click", function() {
        window.location.href = '/'; // Redirect to the about page route
    });

    // Logout button functionality
    document.getElementById("logout-button").addEventListener("click", function() {
        fetch("/logout", {
            method: "GET",
            headers: {
                "Content-Type": "application/json"
            }
        })
        .then(response => {
            if (response.ok) {
                window.location.href = "/applicant/login";
            } else {
                console.error("Logout failed");
            }
        })
        .catch(error => {
            console.error("Error during logout:", error);
        });
    });

    // ✅ SINGLE status check on page load (only once)
    setTimeout(() => {
        console.log("🔍 [Chatbot] Initial status check on page load...");
        
// Send a status check message to trigger the server-side status checking
    fetch("/chatbothome", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({ message: "status_check" })
    })
    .then(response => response.json())
    .then(data => {
        console.log("📊 [Chatbot] Initial status check response:", data);
            
 // If we got a meaningful response (not just "Status checked"), display it
        if (data.response && data.response.text && data.response.text !== "Status checked") {
            console.log("✅ [Chatbot] New status detected on page load, displaying response");
            displayBotResponse(data.response);
                
                // // If there's a nextMessage (like Calendly link), handle it too
                // if (data.response.nextMessage) {
                //     setTimeout(() => {
                //         displayBotResponse(data.response.nextMessage);
                //     }, 1000);
                // }
            }
        })
        .catch(error => {
            console.error('❌ [Chatbot] Error in initial status check:', error);
        });
    }, 2000); // Check once, 2 seconds after page load

    console.log("✅ [Chatbot] Chat initialized without continuous polling");
});

    // Added support for sending a predefined message (for the thank you message)
async function sendMessageToServer(userInput, predefinedMessage = null) {
    try {
        const payload = predefinedMessage 
            ? { predefinedMessage } // Send the predefined message
            : { message: userInput }; // Send a user message
            
        const response = await fetch("/chatbothome", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(payload),
        });

        if (!response.ok) throw new Error("Failed to send message");

        const data = await response.json();
        console.log("Response from server:", data);
        
        // Hide typing indicator
        showTypingIndicator(false);

        // We don't need to display the response if it was a predefined message
        // since we already displayed it before sending it to the server
        if (!predefinedMessage && data.response) {
            // Check if response contains applicantStage for stepper update
            if (data.response && data.response.applicantStage) {
                updateStepper(data.response.applicantStage);
            }
            displayBotResponse(data.response);
        }
        
        return data;
    } catch (error) {
        console.error("Error sending message:", error);
        showTypingIndicator(false);
        if (!predefinedMessage) {
            // Only show error if this was a user message
            addMessage("Bot", "There was an error sending your message. Please try again.");
        }
    }
}

    // Update stepper function
    function updateStepper(stage) {
        // Reset all steps
        document.querySelectorAll('.stepper-step').forEach(step => {
            step.classList.remove('active');
        });
        
        // Set active step based on stage
        if (stage === 'job_selection') {
            document.getElementById('step-job-selection').classList.add('active');
        } else if (stage === 'screening_questions' || stage === 'file_upload') {
            document.getElementById('step-screening').classList.add('active');
        } else if (stage === 'resume_upload' || stage.includes('P1')) {
            document.getElementById('step-resume').classList.add('active');
        }
        
        currentStage = stage;
    }

    // Function to display the initial message with buttons
    function displayInitialMessage(response) {
        const chatMessages = document.getElementById('chat-messages');

        // Prevent duplicate initial messages
        if (document.querySelector('.bot-message')) return;

        // Append bot message text
        const botMessageDiv = document.createElement('div');
        botMessageDiv.classList.add('message', 'bot-message');
        botMessageDiv.innerText = response.text;
        
        // Add timestamp
        const timestamp = document.createElement('div');
        timestamp.classList.add('message-timestamp');
        timestamp.innerText = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
        botMessageDiv.appendChild(timestamp);
        
        chatMessages.appendChild(botMessageDiv);

        // Create button container
        if (response.buttons && response.buttons.length) {
            const buttonContainer = document.createElement('div');
            buttonContainer.classList.add('button-container');
            
            // Append buttons for job positions
            response.buttons.forEach(button => {
                const jobButton = document.createElement('button');
                jobButton.innerText = button.text;
                jobButton.onclick = () => {
                    console.log('✅ [Chatbot] Button clicked:', button.text);
                    addMessage('You', button.text);
                    sendMessage(button.text);
                };
                jobButton.classList.add('job-button');
                buttonContainer.appendChild(jobButton);
            });
            
            chatMessages.appendChild(buttonContainer);
        }

        // Auto-scroll to bottom
        chatMessages.scrollTop = chatMessages.scrollHeight;
        
        // Update stepper
        updateStepper('job_selection');
    }

    function handleUserInput() {
        const inputField = document.getElementById("user-input");
        const userInput = inputField.value.trim();

        if (!userInput) {
            console.log("Input is empty.");
            return;
        }

        console.log("User input:", userInput);
        addMessage("You", userInput);
        inputField.value = "";
        
        // Show typing indicator
        showTypingIndicator(true);
        
        sendMessageToServer(userInput);
    }

    async function sendMessage(message) {
        try {
            const response = await fetch("/chatbothome", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ message }),
            });

            if (!response.ok) throw new Error("Failed to send message");

            const data = await response.json();
            console.log("Response from server:", data);
            
            // Hide typing indicator
            showTypingIndicator(false);

            // Handle the latest bot response
            if (data.response) {
                // Check if response contains applicantStage for stepper update
                if (data.response && data.response.applicantStage) {
                    updateStepper(data.response.applicantStage);
                }
                displayBotResponse(data.response);
            }
        } catch (error) {
            console.error("Error sending message:", error);
            showTypingIndicator(false);
            addMessage("Bot", "There was an error sending your message. Please try again.");
        }
    }

    function addMessage(sender, message) {
        console.log(`Adding message from ${sender}:`, message);
        const chatMessages = document.getElementById("chat-messages");
        const messageDiv = document.createElement("div");
        messageDiv.classList.add("message", sender === "You" ? "user-message" : "bot-message");
        messageDiv.textContent = message;
        
        // Add timestamp
        const timestamp = document.createElement('div');
        timestamp.classList.add('message-timestamp');
        timestamp.innerText = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
        messageDiv.appendChild(timestamp);
        
        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;

        saveChatHistory(sender, message);
    }

    function saveChatHistory(sender, message) {
        let chatHistory = JSON.parse(localStorage.getItem("chatHistory")) || [];
        chatHistory.push({ sender, message });
        localStorage.setItem("chatHistory", JSON.stringify(chatHistory));
    }

  async function uploadFile(event) {
    const file = event.target.files[0];
    if (!file) return;

    console.log("Uploading file:", file.name);
    
    // Determine upload type based on the data attribute
    const uploadType = event.target.getAttribute('data-upload-type') || 'regular';
    const endpoint = uploadType === 'reupload' ? '/handleReuploadsFileUpload' : '/handleFileUpload';
    
    console.log(`Using ${uploadType} upload endpoint: ${endpoint}`);
    
    // Create loading message
    const loadingMessageDiv = document.createElement("div");
    loadingMessageDiv.classList.add("message", "bot-message");
    loadingMessageDiv.textContent = "Uploading file... Please wait.";
    loadingMessageDiv.id = "loading-message"; // Add ID for easy removal
    
    const chatMessages = document.getElementById("chat-messages");
    chatMessages.appendChild(loadingMessageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
    
    // Show upload progress
    const uploadProgressDiv = document.createElement('div');
    uploadProgressDiv.classList.add('upload-progress');
    uploadProgressDiv.style.display = 'block';
    uploadProgressDiv.id = "progress-container"; // Add ID for easy removal
    
    const progressBar = document.createElement('div');
    progressBar.classList.add('upload-progress-bar');
    uploadProgressDiv.appendChild(progressBar);
    
    chatMessages.appendChild(uploadProgressDiv);
    
    // Simulate progress
    let progress = 0;
    const progressInterval = setInterval(() => {
        progress += 5;
        progressBar.style.width = `${Math.min(progress, 95)}%`;
        if (progress >= 95) clearInterval(progressInterval);
    }, 200);
    
    const formData = new FormData();
    formData.append("file", file);

    try {
        const response = await fetch(endpoint, {
            method: "POST",
            body: formData,
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        console.log("Upload result:", result);
        
        // Complete progress and remove progress bar
        clearInterval(progressInterval);
        progressBar.style.width = '100%';
        
        setTimeout(() => {
            // Remove loading message and progress bar
            const loadingMsg = document.getElementById("loading-message");
            const progressContainer = document.getElementById("progress-container");
            
            if (loadingMsg) loadingMsg.remove();
            if (progressContainer) progressContainer.remove();
            
            // Display the actual response from server
            if (result.response) {
                if (result.response.text) {
                    addMessage("Bot", result.response.text);
                    
                    // Update stepper if needed
                    if (result.response.applicantStage) {
                        updateStepper(result.response.applicantStage);
                    }
                }
                
                // Handle next message if it exists
                if (result.response.nextMessage) {
                    setTimeout(() => {
                        addMessage("Bot", result.response.nextMessage.text);
                        chatMessages.scrollTop = chatMessages.scrollHeight;
                    }, 1000);
                }
            } else {
                addMessage("Bot", "File uploaded successfully!");
            }
            
            // Reset file input and data attribute
            document.getElementById("fileUpload").value = "";
            document.getElementById("fileUpload").removeAttribute('data-upload-type');
            
        }, 500);

    } catch (error) {
        console.error("Error uploading file:", error);
        
        // Clean up on error
        clearInterval(progressInterval);
        const loadingMsg = document.getElementById("loading-message");
        const progressContainer = document.getElementById("progress-container");
        
        if (loadingMsg) loadingMsg.remove();
        if (progressContainer) progressContainer.remove();
        
        // Show error message
        addMessage("Bot", "Error uploading file. Please try again.");
        
        // Reset file input and data attribute
        document.getElementById("fileUpload").value = "";
        document.getElementById("fileUpload").removeAttribute('data-upload-type');
    }
}

function displayBotResponse(response, isFromHistory = false) {
    console.log("Bot response:", response);
    const chatMessages = document.getElementById("chat-messages");

    if (typeof response === "object" && response.text) {
        addMessage("Bot", response.text);
        
        // If this is the first screening question, update stepper
        if (response.text.includes("would you like to proceed") || 
            response.text.includes("Do you have a degree") ||
            response.text.includes("Do you have experience")) {
            updateStepper('screening_questions');
        }
        
        // If this involves resume upload, update stepper
        if (response.text.includes("upload your resume") || 
            response.text.includes("marks the end of the initial screening")) {
            updateStepper('resume_upload');
        }

        // Handle buttons for main message
        if (response.buttons && response.buttons.length) {
            const buttonContainer = document.createElement('div');
            buttonContainer.classList.add('button-container');
            
            response.buttons.forEach((button) => {
                const btn = document.createElement("button");
                btn.innerText = button.text;
                
                if (button.type === "file_upload") {
                    // Regular file upload (for initial 3 documents)
                    btn.classList.add("file-upload-button");
                    btn.innerHTML = `<i class="fas fa-file-upload"></i> ${button.text}`;
                    btn.onclick = () => {
                        // Set the upload type for regular uploads
                        document.getElementById("fileUpload").setAttribute('data-upload-type', 'regular');
                        document.getElementById("fileUpload").click();
                    };
                } else if (button.type === "file_upload_reupload") {
                    // Reupload file upload (for HR-requested reuploads)
                    btn.classList.add("file-upload-button");
                    btn.innerHTML = `<i class="fas fa-file-upload"></i> ${button.text}`;
                    btn.onclick = () => {
                        // Set the upload type for reuploads
                        document.getElementById("fileUpload").setAttribute('data-upload-type', 'reupload');
                        document.getElementById("fileUpload").click();
                    };
                } else if (button.url) {
                    // Handle URL buttons (like Calendly link)
                    btn.classList.add("job-button", "calendly-button");
                    btn.style.backgroundColor = "#07ACB9";
                    btn.style.color = "white";
                    btn.innerHTML = `<i class="fas fa-calendar-alt"></i> ${button.text}`;
                    btn.onclick = () => window.location.href = button.url;
                } else {
                    btn.classList.add("job-button");
                    btn.onclick = async () => {
                        console.log("Button clicked:", button.text);
                        addMessage("You", button.text);
                        showTypingIndicator(true);
                        await sendMessage(button.text);
                    };
                }

                buttonContainer.appendChild(btn);
            });
            
            chatMessages.appendChild(buttonContainer);
        }
        
        // Only handle nextMessage if this is NOT from chat history
        if (response.nextMessage && !isFromHistory) {
            // Add a slight delay to make it feel more natural
            setTimeout(() => {
                addMessage("Bot", response.nextMessage.text);
                
                if (response.nextMessage.buttons && response.nextMessage.buttons.length) {
                    const nextButtonContainer = document.createElement('div');
                    nextButtonContainer.classList.add('button-container');
                    
                    response.nextMessage.buttons.forEach((button) => {
                        const btn = document.createElement("button");
                        btn.innerText = button.text;
                        
                        if (button.url) {
                            // Style URL buttons differently
                            btn.classList.add("job-button", "calendly-button");
                            btn.style.backgroundColor = "#07ACB9";
                            btn.style.color = "white";
                            btn.innerHTML = `<i class="fas fa-calendar-alt"></i> ${button.text}`;
                            btn.onclick = () => window.location.href = button.url;
                        } else {
                            btn.classList.add("job-button");
                            btn.onclick = async () => {
                                console.log("Button clicked:", button.text);
                                addMessage("You", button.text);
                                showTypingIndicator(true);
                                await sendMessage(button.text);
                            };
                        }
                        
                        nextButtonContainer.appendChild(btn);
                    });
                    
                    chatMessages.appendChild(nextButtonContainer);
                }
                
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }, 1000); // 1 second delay
        }
    } else {
        addMessage("Bot", response);
    }

    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Update the loadChatHistory function to pass the isFromHistory flag
function loadChatHistory() {
    const chatMessages = document.getElementById("chat-messages");
    let chatHistory = [];
    try {
        chatHistory = JSON.parse(document.getElementById("chat-data").textContent) || [];
    } catch (e) {
        console.error("Error parsing chat history:", e);
        chatHistory = [];
    }

    console.log("✅ [Chatbot] Loading chat history from Supabase:", chatHistory);

    if (chatHistory.length > 0) {
        let lastStage = 'job_selection';
        
        chatHistory.forEach((chat) => {
            if (chat.applicantStage) {
                lastStage = chat.applicantStage;
            }
            
            if (chat.sender === 'user') {
                addMessage("You", chat.message);
            } else if (chat.sender === 'bot') {
                try {
                    const botMessage = JSON.parse(chat.message);
                    displayBotResponse(botMessage, true); // Pass true to indicate this is from history
                } catch (error) {
                    addMessage("Bot", chat.message);
                }
            }
        });

        updateStepper(lastStage);
        console.log("✅ [Chatbot] Chat history successfully rendered.");
    } else {
        console.log("✅ [Chatbot] No chat history. Displaying initial message.");
        displayInitialMessage(initialResponse);
    }

    chatMessages.scrollTop = chatMessages.scrollHeight;
}
    
    function showTypingIndicator(show) {
        const typingIndicator = document.getElementById('typing-indicator');
        if (show) {
            typingIndicator.style.display = 'flex';
        } else {
            typingIndicator.style.display = 'none';
        }
        const chatMessages = document.getElementById("chat-messages");
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    </script>
</body>
</html>