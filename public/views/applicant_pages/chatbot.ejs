<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chatbot</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            height: 100vh;
            display: flex;
            flex-direction: column;
            background: linear-gradient(135deg, #e0eafc, #cfdef3);
        }
        .chat-container {
    width: 100%; /* Full window width */
    max-width: 100%; /* Remove any width restriction */
    margin: 0; /* No margin to utilize the full screen */
    display: flex;
    flex-direction: column;
    height: 90vh; /* Occupy most of the viewport height */
    background: linear-gradient(to bottom, #ffffff, #f2f2f2); /* Subtle gradient */
    box-shadow: none; /* Optional: remove shadow for fullscreen */
    border-radius: 0; /* No rounded corners */
    overflow: hidden; /* Prevent content overflow */
    border: none; /* Remove border */
}
        .chat-header {
            background: linear-gradient(90deg, #007BFF, #0056b3);
            color: white;
            padding: 20px;
            text-align: center;
            font-size: 1.8em;
            font-weight: bold;
        }
        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            background-color: #f8f9fa;
            display: flex;
            flex-direction: column;
        }
        .message {
            max-width: 75%;
            padding: 15px;
            margin: 8px 0;
            border-radius: 15px;
            position: relative;
            font-size: 1rem;
            line-height: 1.5;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        .user-message {
            background-color: #f1f1f1;
            align-self: flex-end;
            border-top-right-radius: 0;
        }
        .bot-message {
            background-color: #007BFF;
            color: white;
            align-self: flex-start;
            border-top-left-radius: 0;
        }
        .chat-input {
            display: flex;
            border-top: 1px solid #ddd;
            padding: 10px;
            background-color: #ffffff;
        }
        .chat-input input {
            flex: 1;
            padding: 12px;
            border: 1px solid #ccc;
            border-radius: 10px 0 0 10px;
            font-size: 1rem;
        }
        .chat-input input:focus {
            outline: none;
            border-color: #007BFF;
        }
        .chat-input button {
            padding: 12px 20px;
            border: none;
            background-color: #007BFF;
            color: white;
            cursor: pointer;
            border-radius: 0 10px 10px 0;
            font-size: 1rem;
            transition: background-color 0.3s;
        }
        .chat-input button:hover {
            background-color: #0056b3;
        }
        .job-button {
            margin: 5px 0;
            background-color: #e0e0e0;
            border: none;
            padding: 10px;
            border-radius: 20px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: background-color 0.3s;
        }
        .job-button:hover {
            background-color: #d6d6d6;
        }
        .chat-messages::-webkit-scrollbar {
            width: 8px;
        }
        .chat-messages::-webkit-scrollbar-thumb {
            background: #ccc;
            border-radius: 4px;
        }
        .chat-messages::-webkit-scrollbar-thumb:hover {
            background: #999;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">Chatbot</div>
        <div class="chat-messages" id="chat-messages"></div>
        <div class="chat-input">
            <input type="text" id="user-input" placeholder="Type your message..." />
            <button id="send-button">Send</button>
        </div>
    </div>

    <script>
        document.getElementById('send-button').addEventListener('click', () => {
            const inputField = document.getElementById('user-input');
            const userInput = inputField.value.trim();
            if (userInput) {
                addMessage('You', userInput);
                inputField.value = '';
                sendMessage(userInput);
            }
        });

        async function sendMessage(message) {
            console.log('Sending message:', message);
            try {
                const response = await fetch('/chatbot', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ message }),
                });

                if (!response.ok) throw new Error("Failed to send message");

                const data = await response.json();
                displayBotResponse(data.response);
            } catch (error) {
                console.error("Error sending message:", error);
                addMessage("Bot", "There was an error sending your message. Please try again later.");
            }
        }

        function addMessage(sender, message) {
            const chatMessages = document.getElementById('chat-messages');
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message', sender === 'You' ? 'user-message' : 'bot-message');
            messageDiv.textContent = message;
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function displayInitialMessage(initialResponse) {
            const chatMessages = document.getElementById('chat-messages');
            const responseLines = initialResponse.split('\n');

            responseLines.forEach(line => {
                if (line.startsWith('-')) {
                    const button = document.createElement('button');
                    button.innerText = line.slice(2);
                    button.onclick = () => {
                        addMessage('You', button.innerText);
                        sendMessage(button.innerText);
                    }; 
                    button.classList.add('job-button');
                    chatMessages.appendChild(button);
                } else {
                    const textNode = document.createElement('div');
                    textNode.classList.add('message', 'bot-message');
                    textNode.innerText = line;
                    chatMessages.appendChild(textNode);
                }
            });
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function displayBotResponse(response) {
            const chatMessages = document.getElementById('chat-messages');
            const responseLines = response.split('\n');

            responseLines.forEach(line => {
                if (line.startsWith('-')) {
                    const button = document.createElement('button');
                    button.innerText = line.slice(2);
                    button.onclick = () => {
                        addMessage('You', button.innerText);
                        sendMessage(button.innerText);
                    };
                    button.classList.add('job-button');
                    chatMessages.appendChild(button);
                } else {
                    const messageDiv = document.createElement('div');
                    messageDiv.classList.add('message', 'bot-message');
                    messageDiv.innerHTML = line;
                    chatMessages.appendChild(messageDiv);
                }
            });

            // Add prompt for rating
            if (response.includes("Please rate each question from 1 to 5")) {
                const ratingInputDiv = document.createElement('div');
                ratingInputDiv.classList.add('message', 'bot-message');
                ratingInputDiv.innerHTML = "Please rate your answers from 1 to 5:";
                chatMessages.appendChild(ratingInputDiv);

                for (let i = 1; i <= 5; i++) {
                    const button = document.createElement('button');
                    button.innerText = i; 
                    button.onclick = () => {
                        addMessage('You', button.innerText);
                        sendMessage(button.innerText); 
                    };
                    button.classList.add('job-button');
                    chatMessages.appendChild(button);
                }
            }

            chatMessages.scrollTop = chatMessages.scrollHeight; // Scroll to the bottom
        }

        document.addEventListener("DOMContentLoaded", function() {
        // Use <%- %> to render raw string correctly
        const initialResponse = "<%- initialResponse %>";  // This will inject the string without encoding

        // Ensure that initialResponse is processed correctly in JavaScript
        displayInitialMessage(initialResponse);
        console.log('Initial response being displayed:', initialResponse);
    });
    </script>
</body>
</html>
