<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chatbot</title>
    <link
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
  rel="stylesheet"
/>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }
        .chat-container {
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        .chat-header {
            background-color: #007BFF;
            color: white;
            padding: 15px;
            text-align: center;
            font-size: 1.5em;
        }
        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            background-color: #f8f9fa;
            display: flex;
            flex-direction: column;
        }
        .message {
            max-width: 70%;
            padding: 10px;
            margin: 5px 0;
            border-radius: 10px;
            position: relative;
        }
        .user-message {
            background-color: white;
            align-self: flex-end;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        .bot-message {
            background-color: #007BFF;
            color: white;
            align-self: flex-start;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        .chat-input {
            display: flex;
            border-top: 1px solid #ccc;
            padding: 10px;
        }
        .chat-input input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px 0 0 5px;
        }
        .chat-input button {
            padding: 10px;
            border: none;
            background-color: #007BFF;
            color: white;
            cursor: pointer;
            border-radius: 0 5px 5px 0;
        }
        .job-button {
            margin: 5px 0;
            background-color: #e0e0e0;
            border: none;
            padding: 10px;
            border-radius: 5px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">Chatbot</div>
        <div class="chat-messages" id="chat-messages"></div>
        <div class="chat-input">
            <input type="text" id="user-input" placeholder="Type your message..." />
            <button id="send-button">Send</button>
        </div>

        <!-- Hidden file upload input -->
        <input
            type="file"
            id="fileUpload"
            accept=".pdf, .png, .jpeg, .jpg"
            style="display:none"
            onchange="uploadFile(event)"
        />


        <!-- <button
        id="upload-button"
        onclick="document.getElementById('fileUpload').click()"
      >
        <i class="fa-duotone fa-solid fa-file"></i> Upload a File
      </button> -->
      

    </div>

    <script>
let screeningQuestions = [];
let currentQuestionIndex = 0;


        document.getElementById('send-button').addEventListener('click', () => {
        const inputField = document.getElementById('user-input');
        const userInput = inputField.value.trim();
        console.log('User  input:', userInput);
        if (userInput) {
            console.log('Adding user message to chat:', userInput);
            addMessage('You', userInput);
            inputField.value = '';
            sendMessage(userInput);
        } else {
            console.log('Input is empty.');
        }
    });
    async function sendMessage(message) {
    console.log('Sending message:', message);
    try {
        const response = await fetch('/chatbot', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ message }),
        });

        if (!response.ok) throw new Error("Failed to send message");

        const data = await response.json();
        console.log('Response from server:', data); // Debug response

        // Store the questions and reset the index if they are provided
        if (data.response.questions) {
            screeningQuestions = data.response.questions;
            currentQuestionIndex = 0; // Reset to the first question
        }

        displayBotResponse(data.response);

        //TODO: Add logic on saving the yes or no on supabase
    } catch (error) {
        console.error("Error sending message:", error);
        addMessage("Bot", "There was an error sending your message. Please try again later.");
    }
}

    function addMessage(sender, message) {
        console.log(`Adding message from ${sender}:`, message);
        const chatMessages = document.getElementById('chat-messages');
        const messageDiv = document.createElement('div');
        messageDiv.classList.add('message', sender === 'You' ? 'user-message' : 'bot-message');
        messageDiv.textContent = message;
        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    async function uploadFile(event) {
    const file = event.target.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append('file', file);

    try {
        const response = await fetch('/handleFileUpload', {
            method: 'POST',
            body: formData,
        });

        if (!response.ok) throw new Error("Failed to upload file");

        const fileUrl = await response.text(); // Assuming the server responds with the file URL
        addMessage('Bot', "Thank you for answering, this marks the end of the initial screening process. We have forwarded your resume to the department's Line Manager, and we will notify you once a decision has been made.");

        console.log('File uploaded successfully. File URL:', fileUrl);
    } catch (error) {
        console.error('Error uploading file:', error);
        addMessage('Bot', 'Error uploading file. Please try again.');
    }
}


        function showFileUpload() {
            document.getElementById('fileUpload').click();
        }

    function displayInitialMessage(initialResponse) {
    console.log('Displaying initial message:', initialResponse);
    const chatMessages = document.getElementById('chat-messages');
    const responseLines = initialResponse.split('\n');

    responseLines.forEach(line => {
        if (line.startsWith('-')) {
            const button = document.createElement('button');
            button.innerText = line.slice(2);
            button.onclick = () => {
                console.log('Button clicked:', button.innerText);
                addMessage('You', button.innerText);
                sendMessage(button.innerText);
            }; 
            button.classList.add('job-button');
            chatMessages.appendChild(button);
        } else {
            const textNode = document.createElement('div');
            textNode.classList.add('message', 'bot-message');
            textNode.innerText = line;
            chatMessages.appendChild(textNode);
        }
    });
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function displayBotResponse(response) {
    console.log('Bot response:', response);
    const chatMessages = document.getElementById('chat-messages');

    // Check if response is an object with text and buttons
    if (typeof response === 'object' && response.text) {
        const messageDiv = document.createElement('div');
        messageDiv.classList.add('message', 'bot-message');
        messageDiv.innerText = response.text; // Display the question text
        chatMessages.appendChild(messageDiv);

        // Create buttons if they exist
        if (response.buttons && response.buttons.length) {
            response.buttons.forEach(button => {
                if (button.type === 'file_upload') {
                    // Handle file upload button
                    const fileInput = document.createElement('input');
                    fileInput.type = 'file';
                    fileInput.style.display = 'none'; // Hide the file input

                    const uploadButton = document.createElement('button');
                    uploadButton.innerText = button.text;
                    uploadButton.onclick = () => {
                        fileInput.click(); // Trigger file input click
                    };
                    uploadButton.classList.add('job-button');

                    fileInput.onchange = async (event) => {
                        const file = event.target.files[0];
                        if (!file) {
                            addMessage('Bot', 'No file selected. Please try again.');
                            return;
                        }

                        const formData = new FormData();
                        formData.append('file', file);

                        try {
                            const response = await fetch('/handleFileUpload', {
                                method: 'POST',
                                body: formData,
                            });

                            if (response.ok) {
                                const fileUrl = await response.text();
                                addMessage('Bot', `File uploaded successfully! File URL: ${fileUrl}`);
                            } else {
                                addMessage('Bot', 'Error uploading file. Please try again.');
                            }
                        } catch (error) {
                            console.error('File upload error:', error);
                            addMessage('Bot', 'An unexpected error occurred while uploading the file.');
                        }
                    };

                    chatMessages.appendChild(uploadButton);
                    chatMessages.appendChild(fileInput); // Append file input to DOM for functionality
                } else {
                    // Handle regular buttons
                    const btn = document.createElement('button');
                    btn.innerText = button.text;
                    btn.onclick = async () => {
                        console.log('Button clicked:', button.text);
                        addMessage('You', button.text);
                        await sendMessage(button.text); // Send the button text as the user's response
                    };
                    btn.classList.add('job-button');
                    chatMessages.appendChild(btn);
                }
            });
        }
    } else {
        // Handle case where response is a string
        const messageDiv = document.createElement('div');
        messageDiv.classList.add('message', 'bot-message');
        messageDiv.innerText = response; // Fallback for string responses
        chatMessages.appendChild(messageDiv);
    }

    chatMessages.scrollTop = chatMessages.scrollHeight; // Scroll to the bottom
}


        // if (response.buttons && response.buttons.length && response.text !== "Thank you for completing the screening process.") {
        //     response.buttons.forEach(button => {
        //         const btn = document.createElement('button');
        //         btn.innerText = button.text;
        //         btn.onclick = async () => {
        //             console.log('Button clicked:', button.text);
        //             addMessage('You', button.text);
        //             // Send the answer to the server
        //             await sendMessage(button.text);
        //             // No need to call handleNextQuestion here
        //         };
        //         btn.classList.add('job-button');
        //         chatMessages.appendChild(btn);
        //     });
        // }
//     } else {
//         // Handle case where response is a string
//         const messageDiv = document.createElement('div');
//         messageDiv.classList.add('message', 'bot-message');
//         messageDiv.innerText = response; // Fallback for string responses
//         chatMessages.appendChild(messageDiv);
//     }

//     chatMessages.scrollTop = chatMessages.scrollHeight; // Scroll to the bottom
// }
async function handleNextQuestion() {
    // Check if there are more questions
    if (currentQuestionIndex + 1 < screeningQuestions.length) {
        currentQuestionIndex++; // Move to the next question
        const nextQuestion = screeningQuestions[currentQuestionIndex];
        
        // Construct the bot response for the next question
        const botResponse = {
            text: nextQuestion.text,
            buttons: nextQuestion.buttons
        };
        
        // Display the next question
        displayBotResponse(botResponse);
    } else {
        // Handle the end of the screening questions
        addMessage("Bot", "Thank you for completing the screening process.");
        // Optionally, you can redirect to another part of the application or provide further instructions.
    }
}
    // function handleAnswer(answerValue) {
    //     console.log('Handling answer:', answerValue);
    //     // Send the answer back to the backend
    //     fetch('/submit-answer', {
    //         method: 'POST',
    //         headers: { 'Content-Type': 'application/json' },
    //         body: JSON.stringify({ answer: answerValue })
    //     }).then(response => response.json()).then(data => {
    //         if (data.nextQuestion) {
    //             displayQuestion(data.nextQuestion);
    //         } else {
    //             alert(data.finalMessage);
    //         }
    //     }).catch(err => console.error('Error submitting answer:', err));
    // }

        document.addEventListener("DOMContentLoaded", function() {
            const initialResponse = "<%= initialResponse %>";
            displayInitialMessage(initialResponse);
            console.log('Initial response being displayed:', initialResponse);
        });
    </script>
</body>
</html>
