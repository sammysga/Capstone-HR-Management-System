<!-- Update the Font Awesome CDN link to the latest version -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" integrity="sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js"></script>

<style>
body {
    font-family: 'Inter', sans-serif;
}
.logout-container {
    margin-top: 370px; /* Push the logout button to the bottom */
    text-align: center; /* Center the button */
    margin-right: 35px;
}

.logout-button {
    text-decoration: none;
    color: #2385B0; /* Text color */
    font-weight: bold;
    background-color: #D8D8D8; /* Bootstrap's danger color for logout */
    padding: 15px 15px; /* Padding for button */
    border-radius: 5px; /* Rounded corners */
    display: block; /* Align as a block */
    transition: background-color 0.3s; /* Smooth hover effect */
    font-size: 16px; /* Font size */
    width: 100%;
}

.logout-button:hover {
    background-color: #2385B0; 
    color: #D8D8D8;
    font-weight: bold;
}
/* Notification Bell and Counter Styles*/
/* Notification Bell and Counter Styles*/
#notification-bell {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1001;
    background: none;
    border: none;
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
}

#notification-bell i {
    font-size: 36px;
    color: white;
    background-color: #07ACB9;
    border-radius: 50%;
    padding: 15px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    transition: background-color 0.3s, transform 0.3s;
    /* Make sure the icon is displayed as block */
    display: inline-block;
    text-align: center;
    width: 36px;
    height: 36px;
    line-height: 36px;
}

#notification-bell i:hover {
    background-color: #B4E3E3;
    transform: scale(1.1);
}

#notification-count {
    position: absolute;
    top: 10px;
    right: 10px;
    background-color: red;
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    font-size: 12px;
    display: flex;
    justify-content: center;
    align-items: center;
}

/* Notification Panel */
#notification-panel {
    position: fixed;
    top: 0;
    right: -400px;
    width: 350px;
    height: 100%;
    background-color: #fff;
    box-shadow: -2px 0 10px rgba(0, 0, 0, 0.1);
    transition: right 0.3s ease-in-out;
    z-index: 1000;
    padding: 20px;
    overflow-y: auto;
}

#notification-panel.open {
    right: 0;
}

#notification-panel h3 {
    font-weight: bold;
    margin-bottom: 20px;
    font-size: 20px;
    color: #07ACB9;
    text-align: left;
    margin-left: 0;
    padding-left: 0;
}

.notification-section {
    margin-top: 20px;
    border-top: 1px solid #ccc;
    padding-top: 10px;
}

.notification-section h4 {
    margin-bottom: 15px;
    color: #333;
}

/* Special styling for P2 section */
#section-p2 {
    background-color: #FFF3E0; /* Light orange background */
    border-radius: 5px;
    padding: 10px;
    border-left: 4px solid #FF9800; /* Orange left border */
    margin-bottom: 15px;
}

#section-p2 h4 {
    color: #E65100; /* Darker orange for heading */
    font-weight: bold;
}

.notification-item {
    margin-bottom: 15px;
    padding-bottom: 15px;
    border-bottom: 1px solid #f0f0f0;
}

.notification-item .headline {
    display: block;
    font-weight: bold;
    font-size: 16px;
    color: #000;
}

.notification-item .content {
    margin: 5px 0;
    color: #555;
    font-size: 14px;
}

.notification-item .date {
    font-size: 12px;
    color: #888;
    margin-top: 5px;
}

.notification-item button {
    background-color: #07ACB9;
    color: white;
    border: none;
    padding: 8px 15px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 14px;
    margin-top: 10px;
    transition: background-color 0.3s;
}

.notification-item button:hover {
    background-color: #B4E3E3;
}

/* Special styling for evaluate applicant buttons */
.evaluate-applicant-btn {
    background-color: #FF9800 !important; /* Orange color to indicate priority */
}

.evaluate-applicant-btn:hover {
    background-color: #FFC107 !important;
}

/* Floating Action Button Styling */
.fab {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 1001;
    font-size: 24px;
    width: 50px;
    height: 50px;
    cursor: pointer;
    background-color: #07ACB9;
    color: white;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    transition: background-color 0.3s, transform 0.3s;
}

.fab:hover {
    background-color: #B4E3E3;
    transform: scale(1.1);
}

.fab i {
    /* Ensure the icon is properly centered */
    display: inline-block;
}

#see-previous-notifications {
    background-color: #07ACB9;
    color: white;
    border: none;
    padding: 10px 15px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 14px;
    margin-top: 20px;
    width: 100%;
    transition: background-color 0.3s;
}

#see-previous-notifications:hover {
    background-color: #B4E3E3;
}

/* Loading indicator styles */
.loading-indicator {
    display: flex;
    justify-content: center;
    padding: 20px 0;
}

.loading-indicator .spinner {
    border: 4px solid #f3f3f3;
    border-top: 4px solid #07ACB9;
    border-radius: 50%;
    width: 30px;
    height: 30px;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Fix for sidebar items if needed */
.sidebar ul li a i {
    margin-right: 10px;
    width: 20px;
    text-align: center;
}

/* Animation for new notifications */
@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.1); }
    100% { transform: scale(1); }
}

.pulse-animation {
    animation: pulse 1s infinite;
}
</style>

<div class="sidebar">
    <div class="logo-container">
        <img src="/images/prime_assets/primeinfra-logo-with-name.png" alt="Logo" class="logo">
    </div>
    <ul>
        <li class="collapsible">
            <a href="#" class="collapsible-header">Staff Information</a>
            <ul class="collapsible-content">
                <li><a href="/linemanager/useraccount">User Account Information</a></li>
                <li><a href="/linemanager/persinfocareerprog">Personal Information & Career Progression</a></li>
            </ul>
        </li>
        <li class="collapsible">
            <a href="#" class="collapsible-header">Manage Recruitment</a>
            <ul class="collapsible-content">
                <li><a href="/linemanager/applicant-tracker">Applicant Tracking</a></li>
                <li><a href="/linemanager/mrf">Request MRF</a></li>
            </ul>
        </li>
        <li class="collapsible">
            <a href="#" class="collapsible-header">Manage Department Team</a>
            <ul class="collapsible-content">
                <li><a href="/linemanager/dashboard">Dashboard</a></li>
                <li><a href="/linemanager/records-performance-tracker">Records and Performance Tracker</a></li>
                <li><a href="/linemanager/offboarding-requests">Offboarding Requests</a></li>
            </ul>
        </li>
    </ul>
    <div class="logout-container">
        <a href="/logout" class="logout-button">Logout</a>
    </div>
</div>

<!-- Notification Bell with Counter -->
<button id="notification-bell">
    <i class="fas fa-bell"></i>
    <span id="notification-count">0</span>
</button>

<!-- Notification Panel -->
<div id="notification-panel">
    <h3>Notifications</h3>
    <div id="recent-notifications">
        <!-- 360 Feedback section will be inserted here when available -->
        <div class="notification-section" id="section-2">
            <h4>Applicants Awaiting Review</h4>
            <!-- Applicants awaiting review will be loaded here -->
            <div class="loading-indicator">
                <div class="spinner"></div>
            </div>
        </div>
        <!-- Section for P3 Applicants will be inserted here when available -->
        <div class="notification-section" id="section-3">
            <h4>Leave Requests</h4>
            <!-- Leave requests notifications will be loaded here -->
            <div class="loading-indicator">
                <div class="spinner"></div>
            </div>
        </div>
        <div class="notification-section" id="section-resignation">
            <h4>Resignation Requests</h4>
            <div class="loading-indicator">
                <div class="spinner"></div>
            </div>
        </div>
    </div>
    <button id="see-previous-notifications">See Previous Notifications</button>
</div>

<!-- Floating Action Button -->
<div class="fab" id="fab">
    <i class="fas fa-arrow-right"></i>
</div>

<script>
    // Notification bell functionality
    const notificationBell = document.getElementById('notification-bell');
    const notificationPanel = document.getElementById('notification-panel');
    const notificationCount = document.getElementById('notification-count');
    const fab = document.getElementById('fab');
    const seePreviousButton = document.getElementById('see-previous-notifications');
    
    // API endpoints for fetching notifications
    const notificationsAPI = '/api/linemanager/notifications';
    const feedbackAPI = '/api/get360FeedbackToast';
    
    // Track if we have active feedback
    let hasActiveFeedback = false;
    let activeFeedbackQuarter = null;
    
    // Default FAB click handler
    const fabDefaultHandler = () => {
        console.log('Floating Action Button clicked - default handler');
        window.location.href = '/linemanager/applicant-tracker-jobposition';
    };
    
// Function to fetch 360 feedback data and update notification panel
async function fetch360Feedback() {
    try {
        console.log("Checking for 360 feedback data...");
        
        // Make the fetch request to the API with a catch for network errors
        let response;
        try {
            response = await fetch(feedbackAPI);
        } catch (networkError) {
            console.log("Network error when fetching 360 feedback. Assuming no feedback.");
            return false;
        }
        
        // If response is 404, that's expected (no active feedback)
        if (response.status === 404) {
            console.log("No active 360 feedback found.");
            // Remove any existing feedback section
            const existingFeedbackSection = document.getElementById('section-feedback');
            if (existingFeedbackSection) {
                existingFeedbackSection.remove();
            }
            hasActiveFeedback = false;
            return false;
        }
        
        // For other non-OK responses, log but don't throw
        if (!response.ok) {
            console.log(`Server responded with status: ${response.status}. Assuming no feedback.`);
            return false;
        }
        
        // Try to parse the JSON response
        let data;
        try {
            data = await response.json();
            console.log("Received 360 feedback response:", data);
        } catch (jsonError) {
            console.log("Error parsing 360 feedback response:", jsonError);
            return false;
        }
        
        if (data.success && data.feedback) {
            // Get the feedback data
            const feedback = data.feedback;
            const quarter = data.quarter || '';
            activeFeedbackQuarter = quarter;
            
            // Format dates for display
            const startDate = new Date(feedback.setStartDate).toLocaleDateString('en-US', {
                year: 'numeric', month: 'long', day: 'numeric'
            });
            const endDate = new Date(feedback.setEndDate).toLocaleDateString('en-US', {
                year: 'numeric', month: 'long', day: 'numeric'
            });
            
            // Get current date in Philippines timezone
            const now = new Date();
            const currentDateTime = now.toLocaleString('en-US', {
                timeZone: 'Asia/Manila',
                weekday: 'short', 
                year: 'numeric', 
                month: 'short', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
            
            // Look for an existing feedback section
            let feedbackSection = document.getElementById('section-feedback');
            
            // If no feedback section exists, create it
            if (!feedbackSection) {
                feedbackSection = document.createElement('div');
                feedbackSection.id = 'section-feedback';
                feedbackSection.className = 'notification-section';
                
                // Insert at the top of recent-notifications
                const recentNotifications = document.getElementById('recent-notifications');
                if (recentNotifications.firstChild) {
                    recentNotifications.insertBefore(feedbackSection, recentNotifications.firstChild);
                } else {
                    recentNotifications.appendChild(feedbackSection);
                }
            }
            
            // Update the feedback section content
            feedbackSection.innerHTML = `
                <h4>REQUIRED 360 Degree Feedback</h4>
                <div class="notification-item">
                    <div class="headline">360 Feedback Answers Required</div>
                    <div class="content">The 360-Degree Quarterly Feedback (${quarter}) must be accomplished from 
                        <span id="feedback-start-date">${startDate}</span> up until 
                        <span id="feedback-end-date">${endDate}</span>. 
                        Your participation is required.
                    </div>
                    <div class="date">${currentDateTime}</div>
                    <button class="action-btn priority-btn" id="feedback-action-btn">Required Action</button>
                </div>
            `;
            
            // Add click event for the action button
            document.getElementById('feedback-action-btn').addEventListener('click', function() {
                // FIX: Change the URL to the new endpoint
                window.location.href = `/linemanager/staffFeedbackList?quarter=${quarter}`;
            });
            
            // Update the FAB to point to the feedback page
            const fabElement = document.getElementById('fab');
            if (fabElement) {
                fabElement.innerHTML = '<i class="fas fa-clipboard-list"></i>';
                
                // Remove any existing click handlers from FAB
                const newFab = fabElement.cloneNode(true);
                if (fabElement.parentNode) {
                    fabElement.parentNode.replaceChild(newFab, fabElement);
                }
                
                // Add new click handler to the new element
                document.getElementById('fab').addEventListener('click', function() {
                    // FIX: Update the FAB URL too
                    window.location.href = `/linemanager/staffFeedbackList?quarter=${quarter}`;
                });
            }
            
            // Add a pulse animation to notification bell
            notificationBell.classList.add('pulse-animation');
            setTimeout(() => {
                notificationBell.classList.remove('pulse-animation');
            }, 3000);
            
            // Increment notification count for the feedback
            const currentCount = parseInt(notificationCount.textContent || '0');
            notificationCount.textContent = currentCount + 1;
            
            hasActiveFeedback = true;
            return true;
        } else {
            console.log("No active feedback or error in response:", data.message);
            hasActiveFeedback = false;
            return false;
        }
    } catch (error) {
        console.error("Error while fetching 360 feedback data:", error);
        hasActiveFeedback = false;
        return false;
    }
}

    // Function to fetch notifications from the server
    async function fetchNotifications() {
        try {
            // Check if notification API is configured - use dummy data if not available
            let response;
            try {
                response = await fetch(notificationsAPI, {
                    headers: {
                        'Accept': 'application/json'
                    },
                    cache: 'no-store'
                });
            } catch (networkError) {
                console.log("Network error when fetching notifications. Using empty data.");
                return { 
                    applicants: [], 
                    leaveRequests: [],
                    offboardingRequests: [],
                    notificationCount: 0
                };
            }
            
            if (!response.ok) {
                console.log(`Server responded with status: ${response.status}. Using empty data.`);
                return { 
                    applicants: [], 
                    leaveRequests: [],
                    notificationCount: 0
                };
            }
            
            // Try to parse the response
            try {
                const data = await response.json();
                return data;
            } catch (jsonError) {
                console.log("Error parsing notifications response:", jsonError);
                return { 
                    applicants: [], 
                    leaveRequests: [],
                    notificationCount: 0
                };
            }
        } catch (error) {
            console.error('Error fetching notifications:', error);
            return { 
                applicants: [], 
                leaveRequests: [],
                notificationCount: 0
            };
        }
    }
    
    // Function to update applicants section (with sorting)
function updateApplicantsSection(applicants) {
    const applicantsSection = document.getElementById('section-2');
    applicantsSection.innerHTML = '<h4>Applicants Awaiting Review</h4>';

    if (!applicants || applicants.length === 0) {
        const emptyMessage = document.createElement('div');
        emptyMessage.classList.add('notification-item');
        emptyMessage.innerHTML = `
            <div class="headline">No applicants awaiting review</div>
            <div class="content">You don't have any pending applicants to review.</div>
        `;
        applicantsSection.appendChild(emptyMessage);
        return;
    }
    
    // Make sure we can safely access applicant properties by checking structure
    const validateApplicant = (applicant) => {
        // Check if object has required fields, or provide defaults based on actual DB structure
        return {
            id: applicant.applicantId || applicant.id || 'unknown',
            jobId: applicant.jobId || applicant.job_id || 'unknown',
            firstName: applicant.firstName || applicant.first_name || 'Applicant',
            lastName: applicant.lastName || applicant.last_name || '',
            status: applicant.applicantStatus || applicant.status || 'Pending Review',
            formattedDate: applicant.formattedDate || applicant.formatted_date || 
                (applicant.applicantDate ? new Date(applicant.applicantDate).toLocaleString('en-US', {
                    weekday: 'short',
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric'
                }) : 'Recent'),
            // Include the original date for sorting
            date: applicant.applicantDate || applicant.date || applicant.created_at || new Date().toISOString()
        };
    };
    
    // Map to standardized format to handle both column naming conventions
    const normalizedApplicants = applicants.map(validateApplicant);
    
    // Sort applicants by date (newest first)
    normalizedApplicants.sort((a, b) => {
        const dateA = new Date(a.date);
        const dateB = new Date(b.date);
        return dateB - dateA; // Sort by newest first
    });
    
    // Filter P3 applicants - check for actual applicant status types from your database
    const p3ApplicantStatus = "P3 - Awaiting for Line Manager Evaluation";
    
    const p3Applicants = normalizedApplicants.filter(a => 
        a.status === p3ApplicantStatus || 
        a.applicantStatus === p3ApplicantStatus
    );
    
    const regularApplicants = normalizedApplicants.filter(a => 
        (a.status !== p3ApplicantStatus && a.applicantStatus !== p3ApplicantStatus) && 
        a.status !== "hired" && a.status !== "rejected" && a.applicantStatus !== "hired" && a.applicantStatus !== "rejected"
    );
    
    // Remove existing P3 section
    const existingP3Section = document.getElementById('section-p3');
    if (existingP3Section) existingP3Section.remove();
    
    // Add regular applicants
    if (regularApplicants.length > 0) {
        regularApplicants.forEach(applicant => {
            const notificationItem = document.createElement('div');
            notificationItem.classList.add('notification-item');
            notificationItem.innerHTML = `
                <div class="headline">Applicant Review: ${applicant.firstName} ${applicant.lastName}</div>
                <div class="content">Status: ${applicant.status}</div>
                <div class="date">${applicant.formattedDate}</div>
                <button class="view-applicant-btn" data-id="${applicant.id}" data-jobid="${applicant.jobId}">Review Applicant</button>
            `;
            applicantsSection.appendChild(notificationItem);
        });
    } else {
        const emptyMessage = document.createElement('div');
        emptyMessage.classList.add('notification-item');
        emptyMessage.innerHTML = `
            <div class="headline">No pending reviews</div>
            <div class="content">There are currently no applicants awaiting your review.</div>
        `;
        applicantsSection.appendChild(emptyMessage);
    }
    
    // Add P3 applicants section
    if (p3Applicants.length > 0) {
        const p3Section = document.createElement('div');
        p3Section.id = 'section-p3';
        p3Section.classList.add('notification-section');
        p3Section.innerHTML = '<h4>Applicants Awaiting Evaluation</h4>';
        
        p3Applicants.forEach(applicant => {
            const notificationItem = document.createElement('div');
            notificationItem.classList.add('notification-item');
            notificationItem.innerHTML = `
                <div class="headline">Evaluation Required: ${applicant.firstName} ${applicant.lastName}</div>
                <div class="content">Status: ${applicant.status}</div>
                <div class="date">${applicant.formattedDate}</div>
                <button class="evaluate-applicant-btn" data-id="${applicant.id}" data-jobid="${applicant.jobId}">Evaluate Applicant</button>
            `;
            p3Section.appendChild(notificationItem);
        });
        
        // Insert after section-2
        const section3 = document.getElementById('section-3');
        section3.parentNode.insertBefore(p3Section, section3);
    }
    
    // Add click handlers for applicant buttons
    setTimeout(() => {
        document.querySelectorAll('.view-applicant-btn, .evaluate-applicant-btn').forEach(button => {
            button.addEventListener('click', function() {
                const jobId = this.getAttribute('data-jobid');
                window.location.href = `/linemanager/applicant-tracker-jobposition?jobId=${jobId}`;
            });
        });
    }, 100);
}

    // Function to update leave request section (with sorting)
function updateLeaveRequestsSection(leaveRequests) {
    const leaveSection = document.getElementById('section-3');
    leaveSection.innerHTML = '<h4>Leave Requests</h4>';

    if (!leaveRequests || leaveRequests.length === 0) {
        const emptyMessage = document.createElement('div');
        emptyMessage.classList.add('notification-item');
        emptyMessage.innerHTML = `
            <div class="headline">No pending leave requests</div>
            <div class="content">There are currently no leave requests pending approval.</div>
        `;
        leaveSection.appendChild(emptyMessage);
        return;
    }
    
    // Normalize leave request data to handle different column names
    const validateLeaveRequest = (leave) => {
        return {
            userId: leave.userId || leave.user_id || leave.employee_id || 'unknown',
            requestId: leave.leaveRequestId || leave.requestId || 'unknown', 
            // If we get staff information from a join, it will be in userInfo
            firstName: leave.userInfo?.firstName || leave.firstName || leave.first_name || 'Employee',
            lastName: leave.userInfo?.lastName || leave.lastName || leave.last_name || '',
            type: leave.type || leave.leaveType || leave.leave_type || 'Leave',
            startDate: leave.startDate || leave.fromDate || leave.from_date || leave.from || 'TBD',
            endDate: leave.endDate || leave.untilDate || leave.until_date || leave.until || 'TBD',
            filedDate: leave.filedDate || leave.created_at || 'Recent',
            // Include the original date for sorting
            date: leave.filedDate || leave.created_at || leave.request_date || new Date().toISOString()
        };
    };
    
    // Map all leave requests to normalized format
    const normalizedLeaveRequests = leaveRequests.map(validateLeaveRequest);
    
    // Sort leave requests by date (newest first)
    normalizedLeaveRequests.sort((a, b) => {
        const dateA = new Date(a.date);
        const dateB = new Date(b.date);
        return dateB - dateA; // Sort by newest first
    });
    
    // Add leave requests
    normalizedLeaveRequests.forEach(leave => {
        const notificationItem = document.createElement('div');
        notificationItem.classList.add('notification-item');
        notificationItem.innerHTML = `
            <div class="headline">Leave Request: ${leave.firstName} ${leave.lastName}</div>
            <div class="content">Type: ${leave.type}, From: ${leave.startDate} To: ${leave.endDate}</div>
            <div class="date">${leave.filedDate}</div>
            <button class="view-leave-btn" data-id="${leave.userId}">Review Request</button>
        `;
        leaveSection.appendChild(notificationItem);
    });
    
    // Add click handlers for leave buttons
    setTimeout(() => {
        document.querySelectorAll('.view-leave-btn').forEach(button => {
            button.addEventListener('click', function() {
                const userId = this.getAttribute('data-id');
                window.location.href = `/linemanager/leaverequest?userId=${userId}`;
            });
        });
    }, 100);
}

// Function to update resignation requests section
function updateResignationRequestsSection(offboardingRequests) {
    const resignationSection = document.getElementById('section-resignation');
    resignationSection.innerHTML = '<h4>Resignation Requests</h4>';

    if (!offboardingRequests || offboardingRequests.length === 0) {
        const emptyMessage = document.createElement('div');
        emptyMessage.classList.add('notification-item');
        emptyMessage.innerHTML = `
            <div class="headline">No pending resignation requests</div>
            <div class="content">There are currently no resignation requests pending approval.</div>
        `;
        resignationSection.appendChild(emptyMessage);
        return;
    }
    
    // Normalize resignation request data
    const validateResignationRequest = (request) => {
        return {
            userId: request.userId || request.user_id || 'unknown',
            requestId: request.requestId || request.request_id || 'unknown',
            firstName: request.firstName || request.first_name || 'Employee',
            lastName: request.lastName || request.last_name || '',
            lastDay: request.lastDay || request.last_day || 'TBD',
            filedDate: request.filedDate || request.created_at || 'Recent',
            message: request.message || '',
            status: request.status || 'Pending',
            // Include the original date for sorting
            date: request.filedDate || request.created_at || new Date().toISOString()
        };
    };
    
    // Map all resignation requests to normalized format
    const normalizedRequests = offboardingRequests.map(validateResignationRequest);
    
    // Sort resignation requests by date (newest first)
    normalizedRequests.sort((a, b) => {
        const dateA = new Date(a.date);
        const dateB = new Date(b.date);
        return dateB - dateA; // Sort by newest first
    });
    
    // Add resignation requests
    normalizedRequests.forEach(request => {
        const notificationItem = document.createElement('div');
        notificationItem.classList.add('notification-item');
        notificationItem.innerHTML = `
            <div class="headline">Resignation Request: ${request.firstName} ${request.lastName}</div>
            <div class="content">Last Working Day: ${request.lastDay}</div>
            <div class="date">${request.filedDate}</div>
            <button class="view-resignation-btn" data-id="${request.userId}">Review Request</button>
        `;
        resignationSection.appendChild(notificationItem);
    });
    
    // Add click handlers for resignation buttons
    setTimeout(() => {
        document.querySelectorAll('.view-resignation-btn').forEach(button => {
            button.addEventListener('click', function() {
                const userId = this.getAttribute('data-id');
                window.location.href = `/linemanager/view-offboarding-request/${userId}`;
            });
        });
    }, 100);
}
    // Sample older notifications data
    const olderNotifications = [
        { message: "Team Meeting Scheduled", timestamp: "2025-03-12T08:30:00" },
        { message: "Project Deadline Updated", timestamp: "2025-03-11T16:45:00" },
        { message: "New Training Available", timestamp: "2025-03-10T11:20:00" },
        { message: "Performance Review Reminder", timestamp: "2025-03-09T10:15:00" },
        { message: "System Maintenance Scheduled", timestamp: "2025-03-08T14:30:00" },
        { message: "Holiday Schedule Updated", timestamp: "2025-03-07T09:45:00" },
        { message: "New Company Policy", timestamp: "2025-03-06T13:20:00" },
        { message: "Team Building Event", timestamp: "2025-03-05T15:10:00" },
        { message: "Quarterly Report Due", timestamp: "2025-03-04T11:00:00" }
    ];

    // Format date function
    function formatDate(date) {
        const options = { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' };
        return new Intl.DateTimeFormat('en-US', options).format(date);
    }

    // Function to check for new notifications
    let previousNotificationCount = 0;
    
    function checkForNewNotifications(currentCount) {
        if (previousNotificationCount > 0 && currentCount > previousNotificationCount) {
            // Add pulse animation to notification bell
            notificationBell.classList.add('pulse-animation');
            
            setTimeout(() => {
                notificationBell.classList.remove('pulse-animation');
            }, 3000); // Remove animation after 3 seconds
        }
        
        // Update the previous count
        previousNotificationCount = currentCount;
    }

    // Notification bell click event - FIXED VERSION
    notificationBell.addEventListener('click', async function(event) {
        console.log('Notification bell clicked');
        notificationPanel.classList.toggle('open');
        
        // Add explicit style manipulation for better cross-browser compatibility
        if (notificationPanel.classList.contains('open')) {
            try {
                // First check for 360 feedback
                await fetch360Feedback();
                
                // Show loading indicators for other sections
                document.getElementById('section-2').innerHTML = '<h4>Applicants Awaiting Review</h4><div class="loading-indicator"><div class="spinner"></div></div>';
                document.getElementById('section-3').innerHTML = '<h4>Leave Requests</h4><div class="loading-indicator"><div class="spinner"></div></div>';
                
                // Fetch regular notifications
                const notificationData = await fetchNotifications();
                
                notificationCount.textContent = notificationData.notificationCount;
                
                // Update sections
                updateApplicantsSection(notificationData.applicants);
                updateLeaveRequestsSection(notificationData.leaveRequests);
                updateResignationRequestsSection(notificationData.offboardingRequests); 
                
            } catch (error) {
                console.error('Error updating notifications:', error);
                
                // Show error message in sections
                document.getElementById('section-2').innerHTML = '<h4>Applicants Awaiting Review</h4><div class="notification-item"><div class="headline">Error loading data</div><div class="content">Could not load applicant data. Please try again later.</div></div>';
                
                document.getElementById('section-3').innerHTML = '<h4>Leave Requests</h4><div class="notification-item"><div class="headline">Error loading data</div><div class="content">Could not load leave request data. Please try again later.</div></div>';
            }
        }
    });

  // Update the older notifications handling to sort by date
document.addEventListener('DOMContentLoaded', function() {
    // Sort the older notifications array by timestamp (newest first)
    olderNotifications.sort((a, b) => {
        return new Date(b.timestamp) - new Date(a.timestamp);
    });
    
    // Update the initial Recent Notifications section with the 3 most recent
    document.getElementById('section-4').innerHTML = '<h4>Recent Notifications</h4>';
    olderNotifications.slice(0, 3).forEach(notification => {
        const notificationItem = document.createElement('div');
        notificationItem.classList.add('notification-item');
        notificationItem.innerHTML = `
            <div class="headline">${notification.message}</div>
            <div class="date">${formatDate(new Date(notification.timestamp))}</div>
        `;
        document.getElementById('section-4').appendChild(notificationItem);
    });
});

// Update the See Previous Notifications button functionality to sort properly
seePreviousButton.addEventListener('click', function() {
    console.log('See Previous Notifications clicked');
    // Clear section-4 before adding all notifications
    document.getElementById('section-4').innerHTML = '<h4>All Notifications</h4>';
    
    // Sort older notifications by timestamp (newest first)
    olderNotifications.sort((a, b) => {
        const dateA = new Date(a.timestamp);
        const dateB = new Date(b.timestamp);
        return dateB - dateA; // Sort by newest first
    });
    
    // Add all notifications to section-4
    olderNotifications.forEach(notification => {
        const notificationItem = document.createElement('div');
        notificationItem.classList.add('notification-item');
        notificationItem.innerHTML = `
            <div class="headline">${notification.message}</div>
            <div class="date">${formatDate(new Date(notification.timestamp))}</div>
        `;
        document.getElementById('section-4').appendChild(notificationItem);
    });
    
    // Hide the button after showing all notifications
    seePreviousButton.style.display = 'none';
    
    // Add a "Show Less" button
    const showLessButton = document.createElement('button');
    showLessButton.id = 'show-less-notifications';
    showLessButton.textContent = 'Show Less';
    showLessButton.style = seePreviousButton.style.cssText;
    document.getElementById('recent-notifications').appendChild(showLessButton);
    
    showLessButton.addEventListener('click', function() {
        // Reset to initial state
        document.getElementById('section-4').innerHTML = '<h4>Recent Notifications</h4>';
        
        // Sort notifications and take only the most recent 3
        const recentThree = [...olderNotifications]
            .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
            .slice(0, 3);
            
        recentThree.forEach(notification => {
            const notificationItem = document.createElement('div');
            notificationItem.classList.add('notification-item');
            notificationItem.innerHTML = `
                <div class="headline">${notification.message}</div>
                <div class="date">${formatDate(new Date(notification.timestamp))}</div>
            `;
            document.getElementById('section-4').appendChild(notificationItem);
        });
        
        // Show the "See Previous" button again
        seePreviousButton.style.display = 'block';
        
        // Remove the "Show Less" button
        this.remove();
    });
});

    // Function to periodically check for new notifications
    async function checkNotifications() {
        try {
            const notificationData = await fetchNotifications();
            
            // Check if there are new notifications
            checkForNewNotifications(notificationData.notificationCount);
            
            // Update the notification count
            notificationCount.textContent = notificationData.notificationCount;
            
        } catch (error) {
            console.error('Error checking for notifications:', error);
        }
    }

    // Initialize the page - fetch data when the page loads to update the notification count badge
    document.addEventListener('DOMContentLoaded', async function() {
        try {
            // Verify that Font Awesome is loaded
            const isFontAwesomeLoaded = (function() {
                // Check for a common Font Awesome class
                const testIcon = document.createElement('i');
                testIcon.className = 'fas fa-bell';
                document.body.appendChild(testIcon);
                
                // Check if the icon is displaying as expected
                const styles = window.getComputedStyle(testIcon);
                const fontFamily = styles.getPropertyValue('font-family');
                
                // Clean up
                document.body.removeChild(testIcon);
                
                // If Font Awesome is loaded, the font-family should contain "Font Awesome"
                return fontFamily.includes('Font Awesome') || fontFamily.includes('FontAwesome');
            })();
            
            if (!isFontAwesomeLoaded) {
                console.warn('Font Awesome may not be loaded correctly. Check the CDN link.');
            }
            
            // Initial notification check
            await checkNotifications();
            
            // Set up periodic notification checks (every 5 minutes)
            setInterval(checkNotifications, 5 * 60 * 1000);
            
        } catch (error) {
            console.error('Error loading initial notification count:', error);
            notificationCount.textContent = '0';
        }
    });

    // Original sidebar functionality 
    // document.addEventListener('DOMContentLoaded', function() {
    //     document.querySelectorAll('.sidebar ul li a').forEach(link => {
    //         link.addEventListener('click', function() {
    //             document.querySelectorAll('.sidebar ul li a').forEach(link => link.classList.remove('active'));
    //             this.classList.add('active');
    //         });
    //     });
        
    //     document.querySelectorAll('.collapsible-header').forEach(header => {
    //         header.addEventListener('click', function() {
    //             var content = this.nextElementSibling;
    //             if (content.style.display === 'block') {
    //                 content.style.display = 'none';
    //             } else {
    //                 // Hide all other collapsible contents
    //                 document.querySelectorAll('.collapsible-content').forEach(item => {
    //                     if (item !== content) {
    //                         item.style.display = 'none';
    //                     }
    //                 });
    //                 content.style.display = 'block';
    //             }
    //         });
    //     });
    // });
</script>