<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" integrity="sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js"></script>

<style>
body {
    font-family: 'Inter', sans-serif;
}

.logout-container {
    margin-top: 370px; /* Push the logout button to the bottom */
    text-align: center; /* Center the button */
    margin-right: 35px;
}

.logout-button {
    text-decoration: none;
    color: #2385B0; /* Text color */
    font-weight: bold;
    background-color: #D8D8D8; /* Bootstrap's danger color for logout */
    padding: 15px 15px; /* Padding for button */
    border-radius: 5px; /* Rounded corners */
    display: block; /* Align as a block */
    transition: background-color 0.3s; /* Smooth hover effect */
    font-size: 16px; /* Font size */
    width: 100%;
}

.logout-button:hover {
    background-color: #2385B0; 
    color: #D8D8D8;
    font-weight: bold;
}

/* Notification Bell and Counter Styles*/
#notification-bell {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1001;
    background: none;
    border: none;
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
}

#notification-bell i {
    font-size: 36px;
    color: white;
    background-color: #07ACB9;
    border-radius: 50%;
    padding: 15px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    transition: background-color 0.3s, transform 0.3s;
    /* Make sure the icon is displayed as block */
    display: inline-block;
    text-align: center;
    width: 36px;
    height: 36px;
    line-height: 36px;
}

#notification-bell i:hover {
    background-color: #B4E3E3;
    transform: scale(1.1);
}

#notification-count {
    position: absolute;
    top: 10px;
    right: 10px;
    background-color: red;
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    font-size: 12px;
    display: flex;
    justify-content: center;
    align-items: center;
}

/* Notification Panel */
#notification-panel {
    position: fixed;
    top: 0;
    right: -400px;
    width: 350px;
    height: 100%;
    background-color: #fff;
    box-shadow: -2px 0 10px rgba(0, 0, 0, 0.1);
    transition: right 0.3s ease-in-out;
    z-index: 1000;
    padding: 20px;
    overflow-y: auto;
}

#notification-panel.open {
    right: 0;
}

#notification-panel h3 {
    font-weight: bold;
    margin-bottom: 20px;
    font-size: 20px;
    color: #07ACB9;
}

.notification-section {
    margin-top: 20px;
    border-top: 1px solid #ccc;
    padding-top: 10px;
}

.notification-section h4 {
    margin-bottom: 15px;
    color: #333;
}

/* Special styling for P2 section */
#section-p2 {
    background-color: #FFF3E0; /* Light orange background */
    border-radius: 5px;
    padding: 10px;
    border-left: 4px solid #FF9800; /* Orange left border */
    margin-bottom: 15px;
}

#section-p2 h4 {
    color: #E65100; /* Darker orange for heading */
    font-weight: bold;
}

.notification-item {
    margin-bottom: 15px;
    padding-bottom: 15px;
    border-bottom: 1px solid #f0f0f0;
}

.notification-item .headline {
    display: block;
    font-weight: bold;
    font-size: 16px;
    color: #000;
}

.notification-item .content {
    margin: 5px 0;
    color: #555;
    font-size: 14px;
}

.notification-item .date {
    font-size: 12px;
    color: #888;
    margin-top: 5px;
}

.notification-item button {
    background-color: #07ACB9;
    color: white;
    border: none;
    padding: 8px 15px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 14px;
    margin-top: 10px;
    transition: background-color 0.3s;
}

.notification-item button:hover {
    background-color: #B4E3E3;
}

/* Special styling for evaluate applicant buttons */
.evaluate-applicant-btn {
    background-color: #FF9800 !important; /* Orange color to indicate priority */
}

.evaluate-applicant-btn:hover {
    background-color: #FFC107 !important;
}

/* Floating Action Button Styling */
.fab {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 1001;
    font-size: 24px;
    width: 50px;
    height: 50px;
    cursor: pointer;
    background-color: #07ACB9;
    color: white;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    transition: background-color 0.3s, transform 0.3s;
}

.fab:hover {
    background-color: #B4E3E3;
    transform: scale(1.1);
}

.fab i {
    /* Ensure the icon is properly centered */
    display: inline-block;
}

#see-previous-notifications {
    background-color: #07ACB9;
    color: white;
    border: none;
    padding: 10px 15px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 14px;
    margin-top: 20px;
    width: 100%;
    transition: background-color 0.3s;
}

#see-previous-notifications:hover {
    background-color: #B4E3E3;
}

/* Loading indicator styles */
.loading-indicator {
    display: flex;
    justify-content: center;
    padding: 20px 0;
}

.loading-indicator .spinner {
    border: 4px solid #f3f3f3;
    border-top: 4px solid #07ACB9;
    border-radius: 50%;
    width: 30px;
    height: 30px;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Fix for sidebar items if needed */
.sidebar ul li a i {
    margin-right: 10px;
    width: 20px;
    text-align: center;
}

/* Animation for new notifications */
@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.1); }
    100% { transform: scale(1); }
}

.pulse-animation {
    animation: pulse 1s infinite;
}
</style>

<div class="sidebar">
    <div class="logo-container">
        <img src="/images/prime_assets/company-logo-revised-sidebar-logo.png" alt="Logo" class="logo">
    </div>
    <ul>
        <li class="collapsible">
            <a href="#" class="collapsible-header">Staff Information</a>
            <ul class="collapsible-content">
                <li><a href="/hr/useraccount">User Account Information</a></li>
                <li><a href="/linemanager/persinfocareerprog">Personal Information & Career Progression</a></li>
            </ul>
        </li>
        <li class="collapsible">
            <a href="#" class="collapsible-header">Manage Recruitment</a>
            <ul class="collapsible-content">
                <li><a href="/hr/managehome">Home Management</a></li>
                <li><a href="/hr/joboffers">Job Postings Management</a></li>
                <li><a href="/hr/applicant-tracker">Applicant Tracking</a></li>
                 <li><a href="/hr/recruitment/reports">Dashboard & Reports</a></li>
            </ul>
        </li>
        <li class="collapsible">
            <a href="#" class="collapsible-header">Manage Employees</a>
            <ul class="collapsible-content">
                <li><a href="/hr/dashboard">Dashboard</a></li>
                <li><a href="/hr/managestaff">Manage Employee Accounts</a></li>
                <li><a href="/hr/records-performance-tracker">Records and Performance Tracker</a></li>
                <li><a href="/hr/offboarding-request">Offboarding Requests</a></li>
                <li><a href="/hr/retirement-tracker">Retirement Tracker</a></li>
                <li><a href="/hr/training-development-tracker">Training & Development Tracker</a></li>
            </ul>
        </li>
    </ul>
    <div class="logout-container">
        <a href="/logout" class="logout-button">Logout</a>
    </div>
</div>


<!-- Notification Bell with Counter -->
<button id="notification-bell">
    <i class="fas fa-bell"></i>
    <span id="notification-count">0</span>
</button>

<!-- Notification Panel -->
<div id="notification-panel">
    <h3>Notifications</h3>
    <div id="recent-notifications">
        <div class="notification-section" id="section-1">
            <h4>REQUIRED 360 Degree Feedback Submission</h4>
            <!-- Sample 360 Feedback notifications -->
            <div class="notification-item">
                <div class="headline">360 Feedback Answers Required</div>
                <div class="content">Your participation is required from March 15, 2025 to March 30, 2025.</div>
                <div class="date">Wed, Mar 12, 2025, 09:15 AM</div>
                <button class="action-btn">Required Action</button>
            </div>
        </div>
        <div class="notification-section" id="section-2">
            <h4>HR Applicant Updates</h4>
            <!-- HR applicant notifications will be loaded here -->
            <div class="loading-indicator">
                <div class="spinner"></div>
            </div>
        </div>
        <!-- Section for P2 Applicants will be inserted here when available -->
        <div class="notification-section" id="section-3">
            <h4>Pending MRF Requests</h4>
            <!-- Pending MRF notifications will be loaded here -->
            <div class="loading-indicator">
                <div class="spinner"></div>
            </div>
        </div>
        <div class="notification-section" id="section-resignation">
            <h4>Resignation Requests</h4>
            <div class="loading-indicator">
                <div class="spinner"></div>
            </div>
        </div>
    </div>
    <button id="see-previous-notifications">See Previous Notifications</button>
</div>

<!-- Floating Action Button -->
<div class="fab" id="fab">
    <i class="fas fa-arrow-right"></i>
</div>

<script>
    // Notification bell functionality
    const notificationBell = document.getElementById('notification-bell');
    const notificationPanel = document.getElementById('notification-panel');
    const notificationCount = document.getElementById('notification-count');
    const fab = document.getElementById('fab');
    const seePreviousButton = document.getElementById('see-previous-notifications');
    
    // API endpoint for fetching notifications
    const notificationsAPI = '/api/hr/notifications';

    // Function to fetch notifications from the server
    async function fetchNotifications() {
        try {
            const response = await fetch(notificationsAPI, {
                headers: {
                    'Accept': 'application/json'
                }
            });
            
            if (!response.ok) {
                throw new Error(`Server responded with status: ${response.status}`);
            }
            
            return await response.json();
        } catch (error) {
            console.error('Error fetching notifications:', error);
            return { 
                hrApplicants: [], 
                pendingMRFs: [], 
                notificationCount: 0 
            };
        }
    }
    
    // Function to update the notification panel with HR applicants (with sorting)
function updateHRApplicantsSection(hrApplicants) {
    const hrSection = document.getElementById('section-2');
    hrSection.innerHTML = '<h4>HR Applicant Updates</h4>';
    
    // Sort all applicants by date (newest first)
    // This assumes each applicant has a 'date' property that can be parsed as a date
    hrApplicants.sort((a, b) => {
        const dateA = new Date(a.date);
        const dateB = new Date(b.date);
        return dateB - dateA; // Sort by newest first
    });
    
    // Filter applicants with status "P2 - Awaiting for HR Evaluation"
    const p2Applicants = hrApplicants.filter(applicant => 
        applicant.status === "P2 - Awaiting for HR Evaluation"
    );
    
    // Regular applicants (not P2)
    const regularApplicants = hrApplicants.filter(applicant => 
        applicant.status !== "P2 - Awaiting for HR Evaluation"
    );

    // Remove any existing P2 section if it exists
    const existingP2Section = document.getElementById('section-p2');
    if (existingP2Section) {
        existingP2Section.remove();
    }

    if (hrApplicants.length === 0) {
        const emptyMessage = document.createElement('div');
        emptyMessage.classList.add('notification-item');
        emptyMessage.innerHTML = `
            <div class="headline">No HR applicants found</div>
            <div class="content">There are currently no applicants with HR status.</div>
        `;
        hrSection.appendChild(emptyMessage);
    } else {
        // Add regular applicants to notification panel
        if (regularApplicants.length > 0) {
            regularApplicants.forEach(applicant => {
                const notificationItem = document.createElement('div');
                notificationItem.classList.add('notification-item');
                notificationItem.innerHTML = `
                    <div class="headline">New HR Applicant: ${applicant.firstName} ${applicant.lastName}</div>
                    <div class="content">Status: ${applicant.status}</div>
                    <div class="date">${applicant.formattedDate}</div>
                    <button class="view-applicant-btn" data-id="${applicant.id}" data-jobid="${applicant.jobId}">View Applicant</button>
                `;
                hrSection.appendChild(notificationItem);
            });
        } else {
            // No regular applicants
            const emptyMessage = document.createElement('div');
            emptyMessage.classList.add('notification-item');
            emptyMessage.innerHTML = `
                <div class="headline">No pending applicants</div>
                <div class="content">There are currently no applicants awaiting HR action.</div>
            `;
            hrSection.appendChild(emptyMessage);
        }
        
        // Add P2 applicants section if any exist
        if (p2Applicants.length > 0) {
            // Create a special section for P2 applicants
            const p2Section = document.createElement('div');
            p2Section.classList.add('notification-section');
            p2Section.id = 'section-p2';
            p2Section.innerHTML = '<h4>Applicants Awaiting Evaluation</h4>';
            
            // Add P2 applicants to the special section
            p2Applicants.forEach(applicant => {
                const notificationItem = document.createElement('div');
                notificationItem.classList.add('notification-item');
                notificationItem.innerHTML = `
                    <div class="headline">Evaluation Required: ${applicant.firstName} ${applicant.lastName}</div>
                    <div class="content">Status: ${applicant.status}</div>
                    <div class="date">${applicant.formattedDate}</div>
                    <button class="evaluate-applicant-btn" data-id="${applicant.id}" data-jobid="${applicant.jobId}">Evaluate Applicant</button>
                `;
                p2Section.appendChild(notificationItem);
            });
            
            // Insert the P2 section after the regular applicants section
            const recentNotifications = document.getElementById('recent-notifications');
            const section3 = document.getElementById('section-3');
            recentNotifications.insertBefore(p2Section, section3);
        }

        // Add event listeners to the view and evaluate applicant buttons
        document.querySelectorAll('.view-applicant-btn, .evaluate-applicant-btn').forEach(button => {
            button.addEventListener('click', function() {
                const applicantId = this.getAttribute('data-id');
                const jobId = this.getAttribute('data-jobid');
                console.log('Applicant action clicked:', applicantId, 'Job ID:', jobId);
                
                // Both button types should redirect to the same page, but we'll keep different console logs for troubleshooting
                if (this.classList.contains('evaluate-applicant-btn')) {
                    console.log('Evaluation action triggered');
                    window.location.href = `/hr/applicant-tracker-jobposition?jobId=${jobId}`;
                } else {
                    console.log('View action triggered');
                    window.location.href = `/hr/applicant-tracker-jobposition?jobId=${jobId}`;
                }
            });
        });
    }
}
    
    
// Function to update the notification panel with pending MRFs (with sorting)
function updatePendingMRFsSection(pendingMRFs) {
    const mrfSection = document.getElementById('section-3');
    mrfSection.innerHTML = '<h4>Pending MRF Requests</h4>';

    // Sort MRFs by request date (newest first)
    pendingMRFs.sort((a, b) => {
        const dateA = new Date(a.requestDate);
        const dateB = new Date(b.requestDate);
        return dateB - dateA; // Sort by newest first
    });

    if (pendingMRFs.length === 0) {
        const emptyMessage = document.createElement('div');
        emptyMessage.classList.add('notification-item');
        emptyMessage.innerHTML = `
            <div class="headline">No pending MRF requests</div>
            <div class="content">There are currently no MRF requests pending approval.</div>
        `;
        mrfSection.appendChild(emptyMessage);
    } else {
        // Add MRFs to notification panel
        pendingMRFs.forEach(mrf => {
            const notificationItem = document.createElement('div');
            notificationItem.classList.add('notification-item');
            notificationItem.innerHTML = `
                <div class="headline">MRF: ${mrf.position}</div>
                <div class="content">Department: ${mrf.department}</div>
                <div class="date">Requested: ${mrf.requestDate}</div>
                <button class="view-mrf-btn" data-id="${mrf.id}">Review Request</button>
            `;
            mrfSection.appendChild(notificationItem);
        });

        // Add event listeners to the view MRF buttons
        document.querySelectorAll('.view-mrf-btn').forEach(button => {
            button.addEventListener('click', function() {
                const mrfId = this.getAttribute('data-id');
                console.log('Review MRF clicked:', mrfId);
                window.location.href = `/hr/view-mrf/${mrfId}`;
            });
        });
    }
}

// Function to update resignation requests section
function updateResignationRequestsSection(offboardingRequests) {
    // Find or create the resignation section
    let resignationSection = document.getElementById('section-resignation');
    if (!resignationSection) {
        resignationSection = document.createElement('div');
        resignationSection.id = 'section-resignation';
        resignationSection.className = 'notification-section';
        
        // Insert after MRF section or before the "Recent Notifications" section
        const recentNotifications = document.getElementById('section-4');
        if (recentNotifications && recentNotifications.parentNode) {
            recentNotifications.parentNode.insertBefore(resignationSection, recentNotifications);
        } else {
            document.getElementById('recent-notifications').appendChild(resignationSection);
        }
    }
    
    // Set the header
    resignationSection.innerHTML = '<h4>Resignation Requests</h4>';

    // Check if there are any requests
    if (!offboardingRequests || offboardingRequests.length === 0) {
        const emptyMessage = document.createElement('div');
        emptyMessage.classList.add('notification-item');
        emptyMessage.innerHTML = `
            <div class="headline">No pending resignation requests</div>
            <div class="content">There are currently no resignation requests pending approval.</div>
        `;
        resignationSection.appendChild(emptyMessage);
        return;
    }
    
    // Normalize resignation request data
    const validateResignationRequest = (request) => {
        return {
            userId: request.userId || request.user_id || 'unknown',
            requestId: request.requestId || request.request_id || 'unknown',
            firstName: request.firstName || request.first_name || 'Employee',
            lastName: request.lastName || request.last_name || '',
            lastDay: request.lastDay || request.last_day || 'TBD',
            filedDate: request.filedDate || request.created_at || 'Recent',
            message: request.message || '',
            status: request.status || 'Pending',
            // Include the original date for sorting
            date: request.filedDate || request.created_at || new Date().toISOString()
        };
    };
    
    // Map all resignation requests to normalized format
    const normalizedRequests = offboardingRequests.map(validateResignationRequest);
    
    // Sort resignation requests by date (newest first)
    normalizedRequests.sort((a, b) => {
        const dateA = new Date(a.date);
        const dateB = new Date(b.date);
        return dateB - dateA; // Sort by newest first
    });
    
    // Add resignation requests
    normalizedRequests.forEach(request => {
        const notificationItem = document.createElement('div');
        notificationItem.classList.add('notification-item');
        notificationItem.innerHTML = `
            <div class="headline">Resignation Request: ${request.firstName} ${request.lastName}</div>
            <div class="content">Last Working Day: ${request.lastDay}</div>
            <div class="date">${request.filedDate}</div>
            <button class="view-resignation-btn" data-id="${request.userId}">Review Request</button>
        `;
        resignationSection.appendChild(notificationItem);
    });
    
    // Add click handlers for resignation buttons
    setTimeout(() => {
        document.querySelectorAll('.view-resignation-btn').forEach(button => {
            button.addEventListener('click', function() {
                const userId = this.getAttribute('data-id');
                window.location.href = `/hr/view-offboarding-request/${userId}`;
            });
        });
    }, 100);
}
    // Sample older notifications data
    const olderNotifications = [
        { message: "Team Meeting Scheduled", timestamp: "2025-03-12T08:30:00" },
        { message: "Project Deadline Updated", timestamp: "2025-03-11T16:45:00" },
        { message: "New Training Available", timestamp: "2025-03-10T11:20:00" },
        { message: "Performance Review Reminder", timestamp: "2025-03-09T10:15:00" },
        { message: "System Maintenance Scheduled", timestamp: "2025-03-08T14:30:00" },
        { message: "Holiday Schedule Updated", timestamp: "2025-03-07T09:45:00" },
        { message: "New Company Policy", timestamp: "2025-03-06T13:20:00" },
        { message: "Team Building Event", timestamp: "2025-03-05T15:10:00" },
        { message: "Quarterly Report Due", timestamp: "2025-03-04T11:00:00" }
    ];

    // Format date function
    function formatDate(date) {
        const options = { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' };
        return new Intl.DateTimeFormat('en-US', options).format(date);
    }

    // Function to check for new notifications
    let previousNotificationCount = 0;
    
    function checkForNewNotifications(currentCount) {
        if (previousNotificationCount > 0 && currentCount > previousNotificationCount) {
            // Add pulse animation to notification bell
            notificationBell.classList.add('pulse-animation');
            
            setTimeout(() => {
                notificationBell.classList.remove('pulse-animation');
            }, 3000); // Remove animation after 3 seconds
        }
        
        // Update the previous count
        previousNotificationCount = currentCount;
    }

    // Notification bell click event
    notificationBell.addEventListener('click', async function() {
        console.log('Notification bell clicked');
        notificationPanel.classList.toggle('open');
        
        // Load notification data when panel is opened
        if (notificationPanel.classList.contains('open')) {
            try {
                // Show loading indicators
                document.getElementById('section-2').innerHTML = '<h4>HR Applicant Updates</h4><div class="loading-indicator"><div class="spinner"></div></div>';
                document.getElementById('section-3').innerHTML = '<h4>Pending MRF Requests</h4><div class="loading-indicator"><div class="spinner"></div></div>';
                document.getElementById('section-resignation').innerHTML = '<h4>Pending Offboarding Requests</h4><div class="loading-indicator"><div class="spinner"></div></div>';
                
                // Fetch notifications
                const notificationData = await fetchNotifications();
                
                // Update notification count
                notificationCount.textContent = notificationData.notificationCount;
                
                // Update HR applicants section
                updateHRApplicantsSection(notificationData.hrApplicants);
                
                // Update pending MRFs section
                updatePendingMRFsSection(notificationData.pendingMRFs);

                 // Update pending offboarding requests section
                updateResignationRequestsSection(notificationData.offboardingRequests);
            } catch (error) {
                console.error('Error updating notifications:', error);
                
                // Show error message in sections
                document.getElementById('section-2').innerHTML = '<h4>HR Applicant Updates</h4><div class="notification-item"><div class="headline">Error loading data</div><div class="content">Could not load applicant data. Please try again later.</div></div>';
                
                document.getElementById('section-3').innerHTML = '<h4>Pending MRF Requests</h4><div class="notification-item"><div class="headline">Error loading data</div><div class="content">Could not load MRF request data. Please try again later.</div></div>';
            }
        }
    });

    // Close notification panel when clicking outside
    document.addEventListener('click', function(event) {
        if (!notificationPanel.contains(event.target) && !notificationBell.contains(event.target)) {
            notificationPanel.classList.remove('open');
        }
    });

    // Update the older notifications handling to sort by date
seePreviousButton.addEventListener('click', function() {
    console.log('See Previous Notifications clicked');
    // Clear section-4 before adding all notifications
    document.getElementById('section-4').innerHTML = '<h4>All Notifications</h4>';
    
    // Sort older notifications by timestamp (newest first)
    olderNotifications.sort((a, b) => {
        const dateA = new Date(a.timestamp);
        const dateB = new Date(b.timestamp);
        return dateB - dateA; // Sort by newest first
    });
    
    // Add all notifications to section-4
    olderNotifications.forEach(notification => {
        const notificationItem = document.createElement('div');
        notificationItem.classList.add('notification-item');
        notificationItem.innerHTML = `
            <div class="headline">${notification.message}</div>
            <div class="date">${formatDate(new Date(notification.timestamp))}</div>
        `;
        document.getElementById('section-4').appendChild(notificationItem);
    });
    
    // Hide the button after showing all notifications
    seePreviousButton.style.display = 'none';
    
    // Add a "Show Less" button
    const showLessButton = document.createElement('button');
    showLessButton.id = 'show-less-notifications';
    showLessButton.textContent = 'Show Less';
    showLessButton.style = seePreviousButton.style.cssText;
    document.getElementById('recent-notifications').appendChild(showLessButton);
    
    showLessButton.addEventListener('click', function() {
        // Reset to initial state
        document.getElementById('section-4').innerHTML = '<h4>Recent Notifications</h4>';
        
        // Sort notifications and take only the most recent 3
        const recentThree = [...olderNotifications]
            .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
            .slice(0, 3);
            
        recentThree.forEach(notification => {
            const notificationItem = document.createElement('div');
            notificationItem.classList.add('notification-item');
            notificationItem.innerHTML = `
                <div class="headline">${notification.message}</div>
                <div class="date">${formatDate(new Date(notification.timestamp))}</div>
            `;
            document.getElementById('section-4').appendChild(notificationItem);
        });
        
        // Show the "See Previous" button again
        seePreviousButton.style.display = 'block';
        
        // Remove the "Show Less" button
        this.remove();
    });
});

    // Initialize button click handlers for sample notifications
    document.querySelectorAll('.action-btn').forEach(button => {
        button.addEventListener('click', function() {
            console.log('Action button clicked');
            window.location.href = '/hr/staffFeedbackList';
        });
    });

    // Floating action button functionality
    fab.addEventListener('click', () => {
        console.log('Floating Action Button clicked');
        window.location.href = '/hr/staffFeedbackList';
    });

    // Function to periodically check for new notifications
    async function checkNotifications() {
        try {
            const notificationData = await fetchNotifications();
            
            // Check if there are new notifications
            checkForNewNotifications(notificationData.notificationCount);
            
            // Update the notification count
            notificationCount.textContent = notificationData.notificationCount;
            
        } catch (error) {
            console.error('Error checking for notifications:', error);
        }
    }

    // Initialize the page - fetch data when the page loads to update the notification count badge
    document.addEventListener('DOMContentLoaded', async function() {
        try {
            // Verify that Font Awesome is loaded
            const isFontAwesomeLoaded = (function() {
                // Check for a common Font Awesome class
                const testIcon = document.createElement('i');
                testIcon.className = 'fas fa-bell';
                document.body.appendChild(testIcon);
                
                // Check if the icon is displaying as expected
                const styles = window.getComputedStyle(testIcon);
                const fontFamily = styles.getPropertyValue('font-family');
                
                // Clean up
                document.body.removeChild(testIcon);
                
                // If Font Awesome is loaded, the font-family should contain "Font Awesome"
                return fontFamily.includes('Font Awesome') || fontFamily.includes('FontAwesome');
            })();
            
            if (!isFontAwesomeLoaded) {
                console.warn('Font Awesome may not be loaded correctly. Check the CDN link.');
            }
            
            // Initial notification check
            await checkNotifications();
            
            // Set up periodic notification checks (every 5 minutes)
            setInterval(checkNotifications, 5 * 60 * 1000);
            
        } catch (error) {
            console.error('Error loading initial notification count:', error);
            notificationCount.textContent = '0';
        }
    });
</script>